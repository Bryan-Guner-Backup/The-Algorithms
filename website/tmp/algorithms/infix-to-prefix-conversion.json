{
  "slug": "infix-to-prefix-conversion",
  "name": "Infix to Prefix Conversion",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/infix_to_prefix_conversion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/infix_to_prefix_conversion.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nOutput:\n\nEnter an Infix Equation = a + b ^c\n Symbol  |  Stack  | Postfix\n----------------------------\n   c     |         | c\n   ^     | ^       | c\n   b     | ^       | cb\n   +     | +       | cb^\n   a     | +       | cb^a\n         |         | cb^a+\n\n         a+b^c (Infix) -&gt;  +a^bc (Prefix)\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">infix_2_postfix</span>(<span class=\"hljs-params\">Infix</span>):\n    Stack = []\n    Postfix = []\n    priority = {\n        <span class=\"hljs-string\">&quot;^&quot;</span>: <span class=\"hljs-number\">3</span>,\n        <span class=\"hljs-string\">&quot;*&quot;</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-string\">&quot;/&quot;</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-string\">&quot;%&quot;</span>: <span class=\"hljs-number\">2</span>,\n        <span class=\"hljs-string\">&quot;+&quot;</span>: <span class=\"hljs-number\">1</span>,\n        <span class=\"hljs-string\">&quot;-&quot;</span>: <span class=\"hljs-number\">1</span>,\n    }  <span class=\"hljs-comment\"># Priority of each operator</span>\n    print_width = <span class=\"hljs-built_in\">len</span>(Infix) <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">len</span>(Infix) &gt; <span class=\"hljs-number\">7</span>) <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">7</span>\n\n    <span class=\"hljs-comment\"># Print table header for output</span>\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;Symbol&quot;</span>.center(<span class=\"hljs-number\">8</span>),\n        <span class=\"hljs-string\">&quot;Stack&quot;</span>.center(print_width),\n        <span class=\"hljs-string\">&quot;Postfix&quot;</span>.center(print_width),\n        sep=<span class=\"hljs-string\">&quot; | &quot;</span>,\n    )\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;-&quot;</span> * (print_width * <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">7</span>))\n\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> Infix:\n        <span class=\"hljs-keyword\">if</span> x.isalpha() <span class=\"hljs-keyword\">or</span> x.isdigit():\n            Postfix.append(x)  <span class=\"hljs-comment\"># if x is Alphabet / Digit, add it to Postfix</span>\n        <span class=\"hljs-keyword\">elif</span> x == <span class=\"hljs-string\">&quot;(&quot;</span>:\n            Stack.append(x)  <span class=\"hljs-comment\"># if x is &quot;(&quot; push to Stack</span>\n        <span class=\"hljs-keyword\">elif</span> x == <span class=\"hljs-string\">&quot;)&quot;</span>:  <span class=\"hljs-comment\"># if x is &quot;)&quot; pop stack until &quot;(&quot; is encountered</span>\n            <span class=\"hljs-keyword\">while</span> Stack[-<span class=\"hljs-number\">1</span>] != <span class=\"hljs-string\">&quot;(&quot;</span>:\n                Postfix.append(Stack.pop())  <span class=\"hljs-comment\"># Pop stack &amp; add the content to Postfix</span>\n            Stack.pop()\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(Stack) == <span class=\"hljs-number\">0</span>:\n                Stack.append(x)  <span class=\"hljs-comment\"># If stack is empty, push x to stack</span>\n            <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># while priority of x is not &gt; priority of element in the stack</span>\n                <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(Stack) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> priority[x] &lt;= priority[Stack[-<span class=\"hljs-number\">1</span>]]:\n                    Postfix.append(Stack.pop())  <span class=\"hljs-comment\"># pop stack &amp; add to Postfix</span>\n                Stack.append(x)  <span class=\"hljs-comment\"># push x to stack</span>\n\n        <span class=\"hljs-built_in\">print</span>(\n            x.center(<span class=\"hljs-number\">8</span>),\n            (<span class=\"hljs-string\">&quot;&quot;</span>.join(Stack)).ljust(print_width),\n            (<span class=\"hljs-string\">&quot;&quot;</span>.join(Postfix)).ljust(print_width),\n            sep=<span class=\"hljs-string\">&quot; | &quot;</span>,\n        )  <span class=\"hljs-comment\"># Output in tabular format</span>\n\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(Stack) &gt; <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># while stack is not empty</span>\n        Postfix.append(Stack.pop())  <span class=\"hljs-comment\"># pop stack &amp; add to Postfix</span>\n        <span class=\"hljs-built_in\">print</span>(\n            <span class=\"hljs-string\">&quot; &quot;</span>.center(<span class=\"hljs-number\">8</span>),\n            (<span class=\"hljs-string\">&quot;&quot;</span>.join(Stack)).ljust(print_width),\n            (<span class=\"hljs-string\">&quot;&quot;</span>.join(Postfix)).ljust(print_width),\n            sep=<span class=\"hljs-string\">&quot; | &quot;</span>,\n        )  <span class=\"hljs-comment\"># Output in tabular format</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(Postfix)  <span class=\"hljs-comment\"># return Postfix as str</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">infix_2_prefix</span>(<span class=\"hljs-params\">Infix</span>):\n    Infix = <span class=\"hljs-built_in\">list</span>(Infix[::-<span class=\"hljs-number\">1</span>])  <span class=\"hljs-comment\"># reverse the infix equation</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(Infix)):\n        <span class=\"hljs-keyword\">if</span> Infix[i] == <span class=\"hljs-string\">&quot;(&quot;</span>:\n            Infix[i] = <span class=\"hljs-string\">&quot;)&quot;</span>  <span class=\"hljs-comment\"># change &quot;(&quot; to &quot;)&quot;</span>\n        <span class=\"hljs-keyword\">elif</span> Infix[i] == <span class=\"hljs-string\">&quot;)&quot;</span>:\n            Infix[i] = <span class=\"hljs-string\">&quot;(&quot;</span>  <span class=\"hljs-comment\"># change &quot;)&quot; to &quot;(&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> (infix_2_postfix(<span class=\"hljs-string\">&quot;&quot;</span>.join(Infix)))[\n        ::-<span class=\"hljs-number\">1</span>\n    ]  <span class=\"hljs-comment\"># call infix_2_postfix on Infix, return reverse of Postfix</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    Infix = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;\\nEnter an Infix Equation = &quot;</span>)  <span class=\"hljs-comment\"># Input an Infix equation</span>\n    Infix = <span class=\"hljs-string\">&quot;&quot;</span>.join(Infix.split())  <span class=\"hljs-comment\"># Remove spaces from the input</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n\\t&quot;</span>, Infix, <span class=\"hljs-string\">&quot;(Infix) -&gt; &quot;</span>, infix_2_prefix(Infix), <span class=\"hljs-string\">&quot;(Prefix)&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
