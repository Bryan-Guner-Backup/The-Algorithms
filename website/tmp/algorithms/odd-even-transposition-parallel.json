{
  "slug": "odd-even-transposition-parallel",
  "name": "Odd Even Transposition Parallel",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/odd_even_transposition_parallel.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/odd_even_transposition_parallel.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is an implementation of odd-even transposition sort.\n\nIt works by performing a series of parallel swaps between odd and even pairs of\nvariables in the list.\n\nThis implementation represents each variable in the list with a process and\neach process communicates with its neighboring processes in the list to perform\ncomparisons.\nThey are synchronized with locks and message passing but other forms of\nsynchronization could be used.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> multiprocessing <span class=\"hljs-keyword\">import</span> Lock, Pipe, Process\n\n<span class=\"hljs-comment\"># lock used to ensure that two processes do not access a pipe at the same time</span>\nprocessLock = Lock()\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nThe function run by the processes that sorts the list\n\nposition = the position in the list the process represents, used to know which\n            neighbor we pass our value to\nvalue = the initial value at list[position]\nLSend, RSend = the pipes we use to send to our left and right neighbors\nLRcv, RRcv = the pipes we use to receive from our left and right neighbors\nresultPipe = the pipe used to send results back to main\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">oeProcess</span>(<span class=\"hljs-params\">position, value, LSend, RSend, LRcv, RRcv, resultPipe</span>):\n    <span class=\"hljs-keyword\">global</span> processLock\n\n    <span class=\"hljs-comment\"># we perform n swaps since after n swaps we know we are sorted</span>\n    <span class=\"hljs-comment\"># we *could* stop early if we are sorted already, but it takes as long to</span>\n    <span class=\"hljs-comment\"># find out we are sorted as it does to sort the list with this algorithm</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>):\n\n        <span class=\"hljs-keyword\">if</span> (i + position) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> RSend <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-comment\"># send your value to your right neighbor</span>\n            processLock.acquire()\n            RSend[<span class=\"hljs-number\">1</span>].send(value)\n            processLock.release()\n\n            <span class=\"hljs-comment\"># receive your right neighbor&#x27;s value</span>\n            processLock.acquire()\n            temp = RRcv[<span class=\"hljs-number\">0</span>].recv()\n            processLock.release()\n\n            <span class=\"hljs-comment\"># take the lower value since you are on the left</span>\n            value = <span class=\"hljs-built_in\">min</span>(value, temp)\n        <span class=\"hljs-keyword\">elif</span> (i + position) % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> LSend <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-comment\"># send your value to your left neighbor</span>\n            processLock.acquire()\n            LSend[<span class=\"hljs-number\">1</span>].send(value)\n            processLock.release()\n\n            <span class=\"hljs-comment\"># receive your left neighbor&#x27;s value</span>\n            processLock.acquire()\n            temp = LRcv[<span class=\"hljs-number\">0</span>].recv()\n            processLock.release()\n\n            <span class=\"hljs-comment\"># take the higher value since you are on the right</span>\n            value = <span class=\"hljs-built_in\">max</span>(value, temp)\n    <span class=\"hljs-comment\"># after all swaps are performed, send the values back to main</span>\n    resultPipe[<span class=\"hljs-number\">1</span>].send(value)\n\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nthe function which creates the processes that perform the parallel swaps\n\narr = the list to be sorted\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">OddEvenTransposition</span>(<span class=\"hljs-params\">arr</span>):\n    processArray = []\n    resultPipe = []\n    <span class=\"hljs-comment\"># initialize the list of pipes where the values will be retrieved</span>\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> arr:\n        resultPipe.append(Pipe())\n    <span class=\"hljs-comment\"># creates the processes</span>\n    <span class=\"hljs-comment\"># the first and last process only have one neighbor so they are made outside</span>\n    <span class=\"hljs-comment\"># of the loop</span>\n    tempRs = Pipe()\n    tempRr = Pipe()\n    processArray.append(\n        Process(\n            target=oeProcess,\n            args=(<span class=\"hljs-number\">0</span>, arr[<span class=\"hljs-number\">0</span>], <span class=\"hljs-literal\">None</span>, tempRs, <span class=\"hljs-literal\">None</span>, tempRr, resultPipe[<span class=\"hljs-number\">0</span>]),\n        )\n    )\n    tempLr = tempRs\n    tempLs = tempRr\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(arr) - <span class=\"hljs-number\">1</span>):\n        tempRs = Pipe()\n        tempRr = Pipe()\n        processArray.append(\n            Process(\n                target=oeProcess,\n                args=(i, arr[i], tempLs, tempRs, tempLr, tempRr, resultPipe[i]),\n            )\n        )\n        tempLr = tempRs\n        tempLs = tempRr\n\n    processArray.append(\n        Process(\n            target=oeProcess,\n            args=(\n                <span class=\"hljs-built_in\">len</span>(arr) - <span class=\"hljs-number\">1</span>,\n                arr[<span class=\"hljs-built_in\">len</span>(arr) - <span class=\"hljs-number\">1</span>],\n                tempLs,\n                <span class=\"hljs-literal\">None</span>,\n                tempLr,\n                <span class=\"hljs-literal\">None</span>,\n                resultPipe[<span class=\"hljs-built_in\">len</span>(arr) - <span class=\"hljs-number\">1</span>],\n            ),\n        )\n    )\n\n    <span class=\"hljs-comment\"># start the processes</span>\n    <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> processArray:\n        p.start()\n\n    <span class=\"hljs-comment\"># wait for the processes to end and write their values to the list</span>\n    <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(resultPipe)):\n        arr[p] = resultPipe[p][<span class=\"hljs-number\">0</span>].recv()\n        processArray[p].join()\n    <span class=\"hljs-keyword\">return</span> arr\n\n\n<span class=\"hljs-comment\"># creates a reverse sorted list and sorts it</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    arr = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Initial List&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(*arr)\n    arr = OddEvenTransposition(arr)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Sorted List\\n&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(*arr)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "Samarth Sehgal",
      "email": "samarthsehgal97@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "CharlesRitter",
      "email": "crritte@g.clemson.edu",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
