{
  "slug": "doubly-linked-list-two",
  "name": "Doubly Linked List Two",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/linked_list/doubly_linked_list_two.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/linked_list/doubly_linked_list_two.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n- A linked list is similar to an array, it holds values. However, links in a linked\n    list do not have indexes.\n- This is an example of a double ended, doubly linked list.\n- Each link references the next link and the previous one.\n- A Doubly Linked List (DLL) contains an extra pointer, typically called previous\n    pointer, together with next pointer and data which are there in singly linked list.\n - Advantages over SLL - It can be traversed in both forward and backward direction.\n     Delete operation is more efficient\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-built_in\">int</span>, previous=<span class=\"hljs-literal\">None</span>, next_node=<span class=\"hljs-literal\">None</span></span>):\n        self.data = data\n        self.previous = previous\n        self.<span class=\"hljs-built_in\">next</span> = next_node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.data}</span>&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_data</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">return</span> self.data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_next</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_previous</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.previous\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedListIterator</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, head</span>):\n        self.current = head\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__next__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.current:\n            <span class=\"hljs-keyword\">raise</span> StopIteration\n        <span class=\"hljs-keyword\">else</span>:\n            value = self.current.get_data()\n            self.current = self.current.get_next()\n            <span class=\"hljs-keyword\">return</span> value\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedList</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.head = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># First node in list</span>\n        self.tail = <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># Last node in list</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n        current = self.head\n        nodes = []\n        <span class=\"hljs-keyword\">while</span> current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            nodes.append(current.get_data())\n            current = current.get_next()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(node) <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> nodes)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__contains__</span>(<span class=\"hljs-params\">self, value: <span class=\"hljs-built_in\">int</span></span>):\n        current = self.head\n        <span class=\"hljs-keyword\">while</span> current:\n            <span class=\"hljs-keyword\">if</span> current.get_data() == value:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n            current = current.get_next()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> LinkedListIterator(self.head)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_head_data</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">if</span> self.head:\n            <span class=\"hljs-keyword\">return</span> self.head.get_data()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_tail_data</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">if</span> self.tail:\n            <span class=\"hljs-keyword\">return</span> self.tail.get_data()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_head</span>(<span class=\"hljs-params\">self, node: Node</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            self.head = node\n            self.tail = node\n        <span class=\"hljs-keyword\">else</span>:\n            self.insert_before_node(self.head, node)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_tail</span>(<span class=\"hljs-params\">self, node: Node</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            self.set_head(node)\n        <span class=\"hljs-keyword\">else</span>:\n            self.insert_after_node(self.tail, node)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, value: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        node = Node(value)\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            self.set_head(node)\n        <span class=\"hljs-keyword\">else</span>:\n            self.set_tail(node)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_before_node</span>(<span class=\"hljs-params\">self, node: Node, node_to_insert: Node</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        node_to_insert.<span class=\"hljs-built_in\">next</span> = node\n        node_to_insert.previous = node.previous\n\n        <span class=\"hljs-keyword\">if</span> node.get_previous() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            self.head = node_to_insert\n        <span class=\"hljs-keyword\">else</span>:\n            node.previous.<span class=\"hljs-built_in\">next</span> = node_to_insert\n\n        node.previous = node_to_insert\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_after_node</span>(<span class=\"hljs-params\">self, node: Node, node_to_insert: Node</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        node_to_insert.previous = node\n        node_to_insert.<span class=\"hljs-built_in\">next</span> = node.<span class=\"hljs-built_in\">next</span>\n\n        <span class=\"hljs-keyword\">if</span> node.get_next() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            self.tail = node_to_insert\n        <span class=\"hljs-keyword\">else</span>:\n            node.<span class=\"hljs-built_in\">next</span>.previous = node_to_insert\n\n        node.<span class=\"hljs-built_in\">next</span> = node_to_insert\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_at_position</span>(<span class=\"hljs-params\">self, position: <span class=\"hljs-built_in\">int</span>, value: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        current_position = <span class=\"hljs-number\">1</span>\n        new_node = Node(value)\n        node = self.head\n        <span class=\"hljs-keyword\">while</span> node:\n            <span class=\"hljs-keyword\">if</span> current_position == position:\n                self.insert_before_node(node, new_node)\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n            current_position += <span class=\"hljs-number\">1</span>\n            node = node.<span class=\"hljs-built_in\">next</span>\n        self.insert_after_node(self.tail, new_node)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_node</span>(<span class=\"hljs-params\">self, item: <span class=\"hljs-built_in\">int</span></span>) -&gt; Node:\n        node = self.head\n        <span class=\"hljs-keyword\">while</span> node:\n            <span class=\"hljs-keyword\">if</span> node.get_data() == item:\n                <span class=\"hljs-keyword\">return</span> node\n            node = node.get_next()\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Node not found&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_value</span>(<span class=\"hljs-params\">self, value</span>):\n        node = self.get_node(value)\n\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">if</span> node == self.head:\n                self.head = self.head.get_next()\n\n            <span class=\"hljs-keyword\">if</span> node == self.tail:\n                self.tail = self.tail.get_previous()\n\n            self.remove_node_pointers(node)\n\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove_node_pointers</span>(<span class=\"hljs-params\">node: Node</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> node.get_next():\n            node.<span class=\"hljs-built_in\">next</span>.previous = node.previous\n\n        <span class=\"hljs-keyword\">if</span> node.get_previous():\n            node.previous.<span class=\"hljs-built_in\">next</span> = node.<span class=\"hljs-built_in\">next</span>\n\n        node.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n        node.previous = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_linked_list</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; new_linked_list = LinkedList()\n    &gt;&gt;&gt; new_linked_list.get_head_data() is None\n    True\n    &gt;&gt;&gt; new_linked_list.get_tail_data() is None\n    True\n    &gt;&gt;&gt; new_linked_list.is_empty()\n    True\n    &gt;&gt;&gt; new_linked_list.insert(10)\n    &gt;&gt;&gt; new_linked_list.get_head_data()\n    10\n    &gt;&gt;&gt; new_linked_list.get_tail_data()\n    10\n    &gt;&gt;&gt; new_linked_list.insert_at_position(position=3, value=20)\n    &gt;&gt;&gt; new_linked_list.get_head_data()\n    10\n    &gt;&gt;&gt; new_linked_list.get_tail_data()\n    20\n    &gt;&gt;&gt; new_linked_list.set_head(Node(1000))\n    &gt;&gt;&gt; new_linked_list.get_head_data()\n    1000\n    &gt;&gt;&gt; new_linked_list.get_tail_data()\n    20\n    &gt;&gt;&gt; new_linked_list.set_tail(Node(2000))\n    &gt;&gt;&gt; new_linked_list.get_head_data()\n    1000\n    &gt;&gt;&gt; new_linked_list.get_tail_data()\n    2000\n    &gt;&gt;&gt; for value in new_linked_list:\n    ...    print(value)\n    1000\n    10\n    20\n    2000\n    &gt;&gt;&gt; new_linked_list.is_empty()\n    False\n    &gt;&gt;&gt; for value in new_linked_list:\n    ...    print(value)\n    1000\n    10\n    20\n    2000\n    &gt;&gt;&gt; 10 in new_linked_list\n    True\n    &gt;&gt;&gt; new_linked_list.delete_value(value=10)\n    &gt;&gt;&gt; 10 in new_linked_list\n    False\n    &gt;&gt;&gt; new_linked_list.delete_value(value=2000)\n    &gt;&gt;&gt; new_linked_list.get_tail_data()\n    20\n    &gt;&gt;&gt; new_linked_list.delete_value(value=1000)\n    &gt;&gt;&gt; new_linked_list.get_tail_data()\n    20\n    &gt;&gt;&gt; new_linked_list.get_head_data()\n    20\n    &gt;&gt;&gt; for value in new_linked_list:\n    ...    print(value)\n    20\n    &gt;&gt;&gt; new_linked_list.delete_value(value=20)\n    &gt;&gt;&gt; for value in new_linked_list:\n    ...    print(value)\n    &gt;&gt;&gt; for value in range(1,10):\n    ...    new_linked_list.insert(value=value)\n    &gt;&gt;&gt; for value in new_linked_list:\n    ...    print(value)\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    &quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
