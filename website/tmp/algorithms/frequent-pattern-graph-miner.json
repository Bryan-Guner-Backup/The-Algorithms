{
  "slug": "frequent-pattern-graph-miner",
  "name": "Frequent Pattern Graph Miner",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/frequent_pattern_graph_miner.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/frequent_pattern_graph_miner.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nFP-GraphMiner - A Fast Frequent Pattern Mining Algorithm for Network Graphs\r\n\r\nA novel Frequent Pattern Graph Mining algorithm, FP-GraphMiner, that compactly\r\nrepresents a set of network graphs as a Frequent Pattern Graph (or FP-Graph).\r\nThis graph can be used to efficiently mine frequent subgraphs including maximal\r\nfrequent subgraphs and maximum common subgraphs.\r\n\r\nURL: https://www.researchgate.net/publication/235255851\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-comment\"># fmt: off</span>\r\nedge_array = [\r\n    [<span class=\"hljs-string\">&#x27;ab-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;ac-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;ad-e5&#x27;</span>, <span class=\"hljs-string\">&#x27;bc-e4&#x27;</span>, <span class=\"hljs-string\">&#x27;bd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;be-e6&#x27;</span>, <span class=\"hljs-string\">&#x27;bh-e12&#x27;</span>, <span class=\"hljs-string\">&#x27;cd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;ce-e4&#x27;</span>,\r\n     <span class=\"hljs-string\">&#x27;de-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;df-e8&#x27;</span>, <span class=\"hljs-string\">&#x27;dg-e5&#x27;</span>, <span class=\"hljs-string\">&#x27;dh-e10&#x27;</span>, <span class=\"hljs-string\">&#x27;ef-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;eg-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;fg-e6&#x27;</span>, <span class=\"hljs-string\">&#x27;gh-e6&#x27;</span>, <span class=\"hljs-string\">&#x27;hi-e3&#x27;</span>],\r\n    [<span class=\"hljs-string\">&#x27;ab-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;ac-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;ad-e5&#x27;</span>, <span class=\"hljs-string\">&#x27;bc-e4&#x27;</span>, <span class=\"hljs-string\">&#x27;bd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;be-e6&#x27;</span>, <span class=\"hljs-string\">&#x27;cd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;de-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;df-e8&#x27;</span>,\r\n     <span class=\"hljs-string\">&#x27;ef-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;eg-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;fg-e6&#x27;</span>],\r\n    [<span class=\"hljs-string\">&#x27;ab-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;ac-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;bc-e4&#x27;</span>, <span class=\"hljs-string\">&#x27;bd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;de-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;df-e8&#x27;</span>, <span class=\"hljs-string\">&#x27;dg-e5&#x27;</span>, <span class=\"hljs-string\">&#x27;ef-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;eg-e2&#x27;</span>,\r\n     <span class=\"hljs-string\">&#x27;eh-e12&#x27;</span>, <span class=\"hljs-string\">&#x27;fg-e6&#x27;</span>, <span class=\"hljs-string\">&#x27;fh-e10&#x27;</span>, <span class=\"hljs-string\">&#x27;gh-e6&#x27;</span>],\r\n    [<span class=\"hljs-string\">&#x27;ab-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;ac-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;bc-e4&#x27;</span>, <span class=\"hljs-string\">&#x27;bd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;bh-e12&#x27;</span>, <span class=\"hljs-string\">&#x27;cd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;df-e8&#x27;</span>, <span class=\"hljs-string\">&#x27;dh-e10&#x27;</span>],\r\n    [<span class=\"hljs-string\">&#x27;ab-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;ac-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;ad-e5&#x27;</span>, <span class=\"hljs-string\">&#x27;bc-e4&#x27;</span>, <span class=\"hljs-string\">&#x27;bd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;cd-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;ce-e4&#x27;</span>, <span class=\"hljs-string\">&#x27;de-e1&#x27;</span>, <span class=\"hljs-string\">&#x27;df-e8&#x27;</span>,\r\n     <span class=\"hljs-string\">&#x27;dg-e5&#x27;</span>, <span class=\"hljs-string\">&#x27;ef-e3&#x27;</span>, <span class=\"hljs-string\">&#x27;eg-e2&#x27;</span>, <span class=\"hljs-string\">&#x27;fg-e6&#x27;</span>]\r\n]\r\n<span class=\"hljs-comment\"># fmt: on</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_distinct_edge</span>(<span class=\"hljs-params\">edge_array</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return Distinct edges from edge array of multiple graphs\r\n    &gt;&gt;&gt; sorted(get_distinct_edge(edge_array))\r\n    [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;]\r\n    &quot;&quot;&quot;</span>\r\n    distinct_edge = <span class=\"hljs-built_in\">set</span>()\r\n    <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> edge_array:\r\n        <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> row:\r\n            distinct_edge.add(item[<span class=\"hljs-number\">0</span>])\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(distinct_edge)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_bitcode</span>(<span class=\"hljs-params\">edge_array, distinct_edge</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return bitcode of distinct_edge\r\n    &quot;&quot;&quot;</span>\r\n    bitcode = [<span class=\"hljs-string\">&quot;0&quot;</span>] * <span class=\"hljs-built_in\">len</span>(edge_array)\r\n    <span class=\"hljs-keyword\">for</span> i, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(edge_array):\r\n        <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> row:\r\n            <span class=\"hljs-keyword\">if</span> distinct_edge <span class=\"hljs-keyword\">in</span> item[<span class=\"hljs-number\">0</span>]:\r\n                bitcode[i] = <span class=\"hljs-string\">&quot;1&quot;</span>\r\n                <span class=\"hljs-keyword\">break</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(bitcode)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_frequency_table</span>(<span class=\"hljs-params\">edge_array</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns Frequency Table\r\n    &quot;&quot;&quot;</span>\r\n    distinct_edge = get_distinct_edge(edge_array)\r\n    frequency_table = <span class=\"hljs-built_in\">dict</span>()\r\n\r\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> distinct_edge:\r\n        bit = get_bitcode(edge_array, item)\r\n        <span class=\"hljs-comment\"># print(&#x27;bit&#x27;,bit)</span>\r\n        <span class=\"hljs-comment\"># bt=&#x27;&#x27;.join(bit)</span>\r\n        s = bit.count(<span class=\"hljs-string\">&quot;1&quot;</span>)\r\n        frequency_table[item] = [s, bit]\r\n    <span class=\"hljs-comment\"># Store [Distinct edge, WT(Bitcode), Bitcode] in descending order</span>\r\n    sorted_frequency_table = [\r\n        [k, v[<span class=\"hljs-number\">0</span>], v[<span class=\"hljs-number\">1</span>]]\r\n        <span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">sorted</span>(frequency_table.items(), key=<span class=\"hljs-keyword\">lambda</span> v: v[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>], reverse=<span class=\"hljs-literal\">True</span>)\r\n    ]\r\n    <span class=\"hljs-keyword\">return</span> sorted_frequency_table\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_nodes</span>(<span class=\"hljs-params\">frequency_table</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns nodes\r\n    format nodes={bitcode:edges that represent the bitcode}\r\n    &gt;&gt;&gt; get_nodes([[&#x27;ab&#x27;, 5, &#x27;11111&#x27;], [&#x27;ac&#x27;, 5, &#x27;11111&#x27;], [&#x27;df&#x27;, 5, &#x27;11111&#x27;],\r\n    ...            [&#x27;bd&#x27;, 5, &#x27;11111&#x27;], [&#x27;bc&#x27;, 5, &#x27;11111&#x27;]])\r\n    {&#x27;11111&#x27;: [&#x27;ab&#x27;, &#x27;ac&#x27;, &#x27;df&#x27;, &#x27;bd&#x27;, &#x27;bc&#x27;]}\r\n    &quot;&quot;&quot;</span>\r\n    nodes = {}\r\n    <span class=\"hljs-keyword\">for</span> i, item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(frequency_table):\r\n        nodes.setdefault(item[<span class=\"hljs-number\">2</span>], []).append(item[<span class=\"hljs-number\">0</span>])\r\n    <span class=\"hljs-keyword\">return</span> nodes\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_cluster</span>(<span class=\"hljs-params\">nodes</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns cluster\r\n    format cluster:{WT(bitcode):nodes with same WT}\r\n    &quot;&quot;&quot;</span>\r\n    cluster = {}\r\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> nodes.items():\r\n        cluster.setdefault(key.count(<span class=\"hljs-string\">&quot;1&quot;</span>), {})[key] = value\r\n    <span class=\"hljs-keyword\">return</span> cluster\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_support</span>(<span class=\"hljs-params\">cluster</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns support\r\n    &gt;&gt;&gt; get_support({5: {&#x27;11111&#x27;: [&#x27;ab&#x27;, &#x27;ac&#x27;, &#x27;df&#x27;, &#x27;bd&#x27;, &#x27;bc&#x27;]},\r\n    ...              4: {&#x27;11101&#x27;: [&#x27;ef&#x27;, &#x27;eg&#x27;, &#x27;de&#x27;, &#x27;fg&#x27;], &#x27;11011&#x27;: [&#x27;cd&#x27;]},\r\n    ...              3: {&#x27;11001&#x27;: [&#x27;ad&#x27;], &#x27;10101&#x27;: [&#x27;dg&#x27;]},\r\n    ...              2: {&#x27;10010&#x27;: [&#x27;dh&#x27;, &#x27;bh&#x27;], &#x27;11000&#x27;: [&#x27;be&#x27;], &#x27;10100&#x27;: [&#x27;gh&#x27;],\r\n    ...                  &#x27;10001&#x27;: [&#x27;ce&#x27;]},\r\n    ...              1: {&#x27;00100&#x27;: [&#x27;fh&#x27;, &#x27;eh&#x27;], &#x27;10000&#x27;: [&#x27;hi&#x27;]}})\r\n    [100.0, 80.0, 60.0, 40.0, 20.0]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> [i * <span class=\"hljs-number\">100</span> / <span class=\"hljs-built_in\">len</span>(cluster) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> cluster]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_all</span>() -&gt; <span class=\"hljs-literal\">None</span>:\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nNodes\\n&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> nodes.items():\r\n        <span class=\"hljs-built_in\">print</span>(key, value)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nSupport\\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(support)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n Cluster \\n&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">sorted</span>(cluster.items(), reverse=<span class=\"hljs-literal\">True</span>):\r\n        <span class=\"hljs-built_in\">print</span>(key, value)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n Graph\\n&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> graph.items():\r\n        <span class=\"hljs-built_in\">print</span>(key, value)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n Edge List of Frequent subgraphs \\n&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> edge_list <span class=\"hljs-keyword\">in</span> freq_subgraph_edge_list:\r\n        <span class=\"hljs-built_in\">print</span>(edge_list)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_edge</span>(<span class=\"hljs-params\">nodes, graph, cluster, c1</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    create edge between the nodes\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> cluster[c1].keys():\r\n        count = <span class=\"hljs-number\">0</span>\r\n        c2 = c1 + <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">while</span> c2 &lt; <span class=\"hljs-built_in\">max</span>(cluster.keys()):\r\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> cluster[c2].keys():\r\n                <span class=\"hljs-string\">&quot;&quot;&quot;\r\n                creates edge only if the condition satisfies\r\n                &quot;&quot;&quot;</span>\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">int</span>(i, <span class=\"hljs-number\">2</span>) &amp; <span class=\"hljs-built_in\">int</span>(j, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-built_in\">int</span>(i, <span class=\"hljs-number\">2</span>):\r\n                    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tuple</span>(nodes[i]) <span class=\"hljs-keyword\">in</span> graph:\r\n                        graph[<span class=\"hljs-built_in\">tuple</span>(nodes[i])].append(nodes[j])\r\n                    <span class=\"hljs-keyword\">else</span>:\r\n                        graph[<span class=\"hljs-built_in\">tuple</span>(nodes[i])] = [nodes[j]]\r\n                    count += <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">if</span> count == <span class=\"hljs-number\">0</span>:\r\n                c2 = c2 + <span class=\"hljs-number\">1</span>\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">break</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">construct_graph</span>(<span class=\"hljs-params\">cluster, nodes</span>):\r\n    X = cluster[<span class=\"hljs-built_in\">max</span>(cluster.keys())]\r\n    cluster[<span class=\"hljs-built_in\">max</span>(cluster.keys()) + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&quot;Header&quot;</span>\r\n    graph = {}\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> X:\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tuple</span>([<span class=\"hljs-string\">&quot;Header&quot;</span>]) <span class=\"hljs-keyword\">in</span> graph:\r\n            graph[<span class=\"hljs-built_in\">tuple</span>([<span class=\"hljs-string\">&quot;Header&quot;</span>])].append(X[i])\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            graph[<span class=\"hljs-built_in\">tuple</span>([<span class=\"hljs-string\">&quot;Header&quot;</span>])] = [X[i]]\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> X:\r\n        graph[<span class=\"hljs-built_in\">tuple</span>(X[i])] = [[<span class=\"hljs-string\">&quot;Header&quot;</span>]]\r\n    i = <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">while</span> i &lt; <span class=\"hljs-built_in\">max</span>(cluster) - <span class=\"hljs-number\">1</span>:\r\n        create_edge(nodes, graph, cluster, i)\r\n        i = i + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> graph\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">myDFS</span>(<span class=\"hljs-params\">graph, start, end, path=[]</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    find different DFS walk from given node to Header node\r\n    &quot;&quot;&quot;</span>\r\n    path = path + [start]\r\n    <span class=\"hljs-keyword\">if</span> start == end:\r\n        paths.append(path)\r\n    <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> graph[start]:\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">tuple</span>(node) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> path:\r\n            myDFS(graph, <span class=\"hljs-built_in\">tuple</span>(node), end, path)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_freq_subgraph_given_support</span>(<span class=\"hljs-params\">s, cluster, graph</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    find edges of multiple frequent subgraphs\r\n    &quot;&quot;&quot;</span>\r\n    k = <span class=\"hljs-built_in\">int</span>(s / <span class=\"hljs-number\">100</span> * (<span class=\"hljs-built_in\">len</span>(cluster) - <span class=\"hljs-number\">1</span>))\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> cluster[k].keys():\r\n        myDFS(graph, <span class=\"hljs-built_in\">tuple</span>(cluster[k][i]), <span class=\"hljs-built_in\">tuple</span>([<span class=\"hljs-string\">&quot;Header&quot;</span>]))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">freq_subgraphs_edge_list</span>(<span class=\"hljs-params\">paths</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    returns Edge list for frequent subgraphs\r\n    &quot;&quot;&quot;</span>\r\n    freq_sub_EL = []\r\n    <span class=\"hljs-keyword\">for</span> edges <span class=\"hljs-keyword\">in</span> paths:\r\n        EL = []\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(edges) - <span class=\"hljs-number\">1</span>):\r\n            temp = <span class=\"hljs-built_in\">list</span>(edges[j])\r\n            <span class=\"hljs-keyword\">for</span> e <span class=\"hljs-keyword\">in</span> temp:\r\n                edge = (e[<span class=\"hljs-number\">0</span>], e[<span class=\"hljs-number\">1</span>])\r\n                EL.append(edge)\r\n        freq_sub_EL.append(EL)\r\n    <span class=\"hljs-keyword\">return</span> freq_sub_EL\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">preprocess</span>(<span class=\"hljs-params\">edge_array</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Preprocess the edge array\r\n    &gt;&gt;&gt; preprocess([[&#x27;ab-e1&#x27;, &#x27;ac-e3&#x27;, &#x27;ad-e5&#x27;, &#x27;bc-e4&#x27;, &#x27;bd-e2&#x27;, &#x27;be-e6&#x27;, &#x27;bh-e12&#x27;,\r\n    ...              &#x27;cd-e2&#x27;, &#x27;ce-e4&#x27;, &#x27;de-e1&#x27;, &#x27;df-e8&#x27;, &#x27;dg-e5&#x27;, &#x27;dh-e10&#x27;, &#x27;ef-e3&#x27;,\r\n    ...              &#x27;eg-e2&#x27;, &#x27;fg-e6&#x27;, &#x27;gh-e6&#x27;, &#x27;hi-e3&#x27;]])\r\n\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(edge_array)):\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(edge_array[i])):\r\n            t = edge_array[i][j].split(<span class=\"hljs-string\">&quot;-&quot;</span>)\r\n            edge_array[i][j] = t\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    preprocess(edge_array)\r\n    frequency_table = get_frequency_table(edge_array)\r\n    nodes = get_nodes(frequency_table)\r\n    cluster = get_cluster(nodes)\r\n    support = get_support(cluster)\r\n    graph = construct_graph(cluster, nodes)\r\n    find_freq_subgraph_given_support(<span class=\"hljs-number\">60</span>, cluster, graph)\r\n    paths = []\r\n    freq_subgraph_edge_list = freq_subgraphs_edge_list(paths)\r\n    print_all()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "siva1098",
      "email": "32545976+siva1098@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
