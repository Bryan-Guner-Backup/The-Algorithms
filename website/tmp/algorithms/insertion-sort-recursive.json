{
  "slug": "insertion-sort-recursive",
  "name": "Insertion Sort Recursive",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting/insertion_sort_recursive.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/insertion_sort_recursive.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Insertion sort](https://en.wikipedia.org/wiki/Insertion_sort)\n * algorithm implementation.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @addtogroup sorting Sorting algorithms\n * @{\n */</span>\n<span class=\"hljs-comment\">/**\n * Insertion sort algorithm implements using Recursion \n * @param arr array to be sorted\n * @param size size of array\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">RecursionInsertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\n{\n    <span class=\"hljs-keyword\">if</span>(size &lt;= <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    \n    <span class=\"hljs-comment\">// marking recursive call to reach starting element</span>\n    RecursionInsertionSort(arr,size<span class=\"hljs-number\">-1</span>);\n    \n    <span class=\"hljs-type\">int</span> key = arr[size<span class=\"hljs-number\">-1</span>];\n    <span class=\"hljs-type\">int</span> j = size<span class=\"hljs-number\">-2</span>;\n    <span class=\"hljs-comment\">// swapping logic for insertion sort</span>\n    <span class=\"hljs-keyword\">while</span>(j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; arr[j] &gt; key)\n    {\n        arr[j+<span class=\"hljs-number\">1</span>] = arr[j];\n        j--;\n    }\n    arr[j+<span class=\"hljs-number\">1</span>] = key;\n}\n<span class=\"hljs-comment\">/** @} */</span>\n<span class=\"hljs-comment\">/** Test function\n  * @returns None\n  */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> size = rand() % <span class=\"hljs-number\">500</span>; <span class=\"hljs-comment\">/* random array size */</span>\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-comment\">/* generate size random numbers from -50 to 49 */</span>  \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        arr[i] = (rand() % <span class=\"hljs-number\">100</span>) - <span class=\"hljs-number\">50</span>;<span class=\"hljs-comment\">/* signed random numbers */</span>\n    }\n    RecursionInsertionSort(arr, size);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size  ; ++i)\n    {\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-built_in\">free</span>(arr);\n}\n\n<span class=\"hljs-comment\">/** Main function\n *  @returns integer 0\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\n    test();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
