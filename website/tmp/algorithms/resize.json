{
  "slug": "resize",
  "name": "Resize",
  "categories": ["digitalimageprocessing", "resize"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "digital_image_processing/resize/resize.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/digital_image_processing/resize/resize.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; Multiple image resizing techniques &quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">from</span> cv2 <span class=\"hljs-keyword\">import</span> destroyAllWindows, imread, imshow, waitKey\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NearestNeighbour</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Simplest and fastest version of image resizing.\n    Source: https://en.wikipedia.org/wiki/Nearest-neighbor_interpolation\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, img, dst_width: <span class=\"hljs-built_in\">int</span>, dst_height: <span class=\"hljs-built_in\">int</span></span>):\n        <span class=\"hljs-keyword\">if</span> dst_width &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> dst_height &lt; <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Destination width/height should be &gt; 0&quot;</span>)\n\n        self.img = img\n        self.src_w = img.shape[<span class=\"hljs-number\">1</span>]\n        self.src_h = img.shape[<span class=\"hljs-number\">0</span>]\n        self.dst_w = dst_width\n        self.dst_h = dst_height\n\n        self.ratio_x = self.src_w / self.dst_w\n        self.ratio_y = self.src_h / self.dst_h\n\n        self.output = self.output_img = (\n            np.ones((self.dst_h, self.dst_w, <span class=\"hljs-number\">3</span>), np.uint8) * <span class=\"hljs-number\">255</span>\n        )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.dst_h):\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.dst_w):\n                self.output[i][j] = self.img[self.get_y(i)][self.get_x(j)]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_x</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Get parent X coordinate for destination X\n        :param x: Destination X coordinate\n        :return: Parent X coordinate based on `x ratio`\n        &gt;&gt;&gt; nn = NearestNeighbour(imread(&quot;digital_image_processing/image_data/lena.jpg&quot;,\n        ...                              1), 100, 100)\n        &gt;&gt;&gt; nn.ratio_x = 0.5\n        &gt;&gt;&gt; nn.get_x(4)\n        2\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(self.ratio_x * x)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_y</span>(<span class=\"hljs-params\">self, y: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Get parent Y coordinate for destination Y\n        :param y: Destination X coordinate\n        :return: Parent X coordinate based on `y ratio`\n        &gt;&gt;&gt; nn = NearestNeighbour(imread(&quot;digital_image_processing/image_data/lena.jpg&quot;,\n        ...                              1), 100, 100)\n        &gt;&gt;&gt; nn.ratio_y = 0.5\n        &gt;&gt;&gt; nn.get_y(4)\n        2\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(self.ratio_y * y)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    dst_w, dst_h = <span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">600</span>\n    im = imread(<span class=\"hljs-string\">&quot;image_data/lena.jpg&quot;</span>, <span class=\"hljs-number\">1</span>)\n    n = NearestNeighbour(im, dst_w, dst_h)\n    n.process()\n\n    imshow(\n        <span class=\"hljs-string\">f&quot;Image resized from: <span class=\"hljs-subst\">{im.shape[<span class=\"hljs-number\">1</span>]}</span>x<span class=\"hljs-subst\">{im.shape[<span class=\"hljs-number\">0</span>]}</span> to <span class=\"hljs-subst\">{dst_w}</span>x<span class=\"hljs-subst\">{dst_h}</span>&quot;</span>, n.output\n    )\n    waitKey(<span class=\"hljs-number\">0</span>)\n    destroyAllWindows()\n"
    }
  },
  "contributors": [
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
