{
  "slug": "sqrt-double",
  "name": "Sqrt Double",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/sqrt_double.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/sqrt_double.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Calculate the square root of any positive real number in \\f$O(\\log\n * N)\\f$ time, with precision fixed using [bisection\n * method](https://en.wikipedia.org/wiki/Bisection_method) of root-finding.\n *\n * @see Can be implemented using faster and better algorithms like\n * newton_raphson_method.cpp and false_position.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Bisection method implemented for the function \\f$x^2-a=0\\f$\n * whose roots are \\f$\\pm\\sqrt{a}\\f$ and only the positive root is returned.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">Sqrt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> a)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (a &gt; <span class=\"hljs-number\">0</span> &amp;&amp; a &lt; <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-built_in\">Sqrt</span>(<span class=\"hljs-number\">1</span> / a);\n    }\n    <span class=\"hljs-type\">double</span> l = <span class=\"hljs-number\">0</span>, r = a;\n    <span class=\"hljs-comment\">/* Epsilon is the precision.\n    A great precision is\n    between 1e-7 and 1e-12.\n    double epsilon = 1e-12;\n    */</span>\n    <span class=\"hljs-type\">double</span> epsilon = <span class=\"hljs-number\">1e-12</span>;\n    <span class=\"hljs-keyword\">while</span> (l &lt;= r) {\n        <span class=\"hljs-type\">double</span> mid = (l + r) / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">if</span> (mid * mid &gt; a) {\n            r = mid;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> (a - mid * mid &lt; epsilon) {\n                <span class=\"hljs-keyword\">return</span> mid;\n            }\n            l = mid;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-comment\">/** main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">double</span> n{};\n    std::cin &gt;&gt; n;\n    <span class=\"hljs-built_in\">assert</span>(n &gt;= <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-comment\">// Change this line for a better precision</span>\n    std::cout.<span class=\"hljs-built_in\">precision</span>(<span class=\"hljs-number\">12</span>);\n    std::cout &lt;&lt; std::fixed &lt;&lt; <span class=\"hljs-built_in\">Sqrt</span>(n);\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
