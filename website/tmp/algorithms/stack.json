{
  "slug": "stack",
  "name": "Stack",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/stack.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/stack.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StackOverflowError</span>(<span class=\"hljs-title class_ inherited__\">BaseException</span>):\n    <span class=\"hljs-keyword\">pass</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Stack</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;A stack is an abstract data type that serves as a collection of\n    elements with two principal operations: push() and pop(). push() adds an\n    element to the top of the stack, and pop() removes an element from the top\n    of a stack. The order in which elements come off of a stack are\n    Last In, First Out (LIFO).\n    https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, limit: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">10</span></span>):\n        self.stack: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>] = []\n        self.limit = limit\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__bool__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">bool</span>(self.stack)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self.stack)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, data</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;Push an element to the top of the stack.&quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.stack) &gt;= self.limit:\n            <span class=\"hljs-keyword\">raise</span> StackOverflowError\n        self.stack.append(data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;Pop an element off of the top of the stack.&quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self.stack.pop()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">peek</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;Peek at the top-most element of the stack.&quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self.stack[-<span class=\"hljs-number\">1</span>]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;Check if a stack is empty.&quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">bool</span>(self.stack)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_full</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-keyword\">return</span> self.size() == self.limit\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">size</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;Return the size of the stack.&quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.stack)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__contains__</span>(<span class=\"hljs-params\">self, item</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;Check if item is in stack&quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> item <span class=\"hljs-keyword\">in</span> self.stack\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_stack</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; test_stack()\n    &quot;&quot;&quot;</span>\n    stack = Stack(<span class=\"hljs-number\">10</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">bool</span>(stack) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">assert</span> stack.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">assert</span> stack.is_full() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(stack) == <span class=\"hljs-string\">&quot;[]&quot;</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        _ = stack.pop()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        _ = stack.peek()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n        <span class=\"hljs-keyword\">assert</span> stack.size() == i\n        stack.push(i)\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">bool</span>(stack) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">assert</span> stack.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">assert</span> stack.is_full() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(stack) == <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>)))\n    <span class=\"hljs-keyword\">assert</span> stack.pop() == <span class=\"hljs-number\">9</span>\n    <span class=\"hljs-keyword\">assert</span> stack.peek() == <span class=\"hljs-number\">8</span>\n\n    stack.push(<span class=\"hljs-number\">100</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(stack) == <span class=\"hljs-built_in\">str</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">100</span>])\n\n    <span class=\"hljs-keyword\">try</span>:\n        stack.push(<span class=\"hljs-number\">200</span>)\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen</span>\n    <span class=\"hljs-keyword\">except</span> StackOverflowError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen</span>\n\n    <span class=\"hljs-keyword\">assert</span> stack.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">assert</span> stack.size() == <span class=\"hljs-number\">10</span>\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-keyword\">in</span> stack\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-number\">55</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> stack\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    test_stack()\n"
    },
    "javascript": {
      "dir": "Data-Structures/Stack/Stack.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Stack/Stack.js",
      "code": "<span class=\"hljs-comment\">/* Stack!!\n* A stack is exactly what it sounds like. An element gets added to the top of\n* the stack and only the element on the top may be removed. This is an example\n* of an array implementation of a Stack. So an element can only be added/removed\n* from the end of the array.\n*/</span>\n\n<span class=\"hljs-comment\">// Functions: push, pop, peek, view, length</span>\n\n<span class=\"hljs-comment\">// Creates a stack constructor</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Stack</span> = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Stack</span> () {\n    <span class=\"hljs-comment\">// The top of the Stack</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\">// The array representation of the stack</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span> = []\n  }\n\n  <span class=\"hljs-comment\">// Adds a value onto the end of the stack</span>\n  <span class=\"hljs-title class_\">Stack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">push</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span>] = value\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span>++\n  }\n\n  <span class=\"hljs-comment\">// Removes and returns the value at the end of the stack</span>\n  <span class=\"hljs-title class_\">Stack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">pop</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Stack is Empty&#x27;</span>\n    }\n\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span>--\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span>]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span>)\n    <span class=\"hljs-keyword\">return</span> result\n  }\n\n  <span class=\"hljs-comment\">// Returns the size of the stack</span>\n  <span class=\"hljs-title class_\">Stack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">size</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span>\n  }\n\n  <span class=\"hljs-comment\">// Returns the value at the end of the stack</span>\n  <span class=\"hljs-title class_\">Stack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">peek</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> - <span class=\"hljs-number\">1</span>]\n  }\n\n  <span class=\"hljs-comment\">// To see all the elements in the stack</span>\n  <span class=\"hljs-title class_\">Stack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">view</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span>; i++) { <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>[i]) }\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Stack</span>\n}())\n\n<span class=\"hljs-comment\">// Implementation</span>\n<span class=\"hljs-keyword\">const</span> myStack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>()\n\nmyStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\nmyStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">5</span>)\nmyStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">76</span>)\nmyStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">69</span>)\nmyStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">32</span>)\nmyStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">54</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myStack.<span class=\"hljs-title function_\">size</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myStack.<span class=\"hljs-title function_\">peek</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myStack.<span class=\"hljs-title function_\">pop</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myStack.<span class=\"hljs-title function_\">peek</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myStack.<span class=\"hljs-title function_\">pop</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myStack.<span class=\"hljs-title function_\">peek</span>())\nmyStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">55</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(myStack.<span class=\"hljs-title function_\">peek</span>())\nmyStack.<span class=\"hljs-title function_\">view</span>()\n"
    },
    "c-plus-plus": {
      "dir": "data_structures/stack.h",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/stack.h",
      "code": "<span class=\"hljs-comment\">/**\n * @file stack.h\n * @author danghai\n * @brief  This class specifies the basic operation on a stack as a linked list\n **/</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> DATA_STRUCTURES_STACK_H_</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DATA_STRUCTURES_STACK_H_</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Definition of the node as a linked-list\n * \\tparam Type type of data nodes of the linked list should contain\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\n    Type data;         <span class=\"hljs-comment\">///&lt; data at current node</span>\n    node&lt;Type&gt; *next;  <span class=\"hljs-comment\">///&lt; pointer to the next ::node instance</span>\n};\n\n<span class=\"hljs-comment\">/** Definition of the stack class\n * \\tparam Type type of data nodes of the linked list in the stack should\n * contain\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">stack</span> {\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/** Show stack */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> </span>{\n        node&lt;Type&gt; *current = stackTop;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Top --&gt; &quot;</span>;\n        <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">nullptr</span>) {\n            std::cout &lt;&lt; current-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\n            current = current-&gt;next;\n        }\n        std::cout &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Size of stack: &quot;</span> &lt;&lt; size &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-comment\">/** Default constructor*/</span>\n    <span class=\"hljs-built_in\">stack</span>() {\n        stackTop = <span class=\"hljs-literal\">nullptr</span>;\n        size = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/** Copy constructor*/</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">stack</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> stack&lt;Type&gt; &amp;otherStack)</span> </span>{\n        node&lt;Type&gt; *newNode, *current, *last;\n\n        <span class=\"hljs-comment\">/* If stack is no empty, make it empty */</span>\n        <span class=\"hljs-keyword\">if</span> (stackTop != <span class=\"hljs-literal\">nullptr</span>) {\n            stackTop = <span class=\"hljs-literal\">nullptr</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (otherStack.stackTop == <span class=\"hljs-literal\">nullptr</span>) {\n            stackTop = <span class=\"hljs-literal\">nullptr</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            current = otherStack.stackTop;\n            stackTop = <span class=\"hljs-keyword\">new</span> node&lt;Type&gt;;\n            stackTop-&gt;data = current-&gt;data;\n            stackTop-&gt;next = <span class=\"hljs-literal\">nullptr</span>;\n            last = stackTop;\n            current = current-&gt;next;\n            <span class=\"hljs-comment\">/* Copy the remaining stack */</span>\n            <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">nullptr</span>) {\n                newNode = <span class=\"hljs-keyword\">new</span> node&lt;Type&gt;;\n                newNode-&gt;data = current-&gt;data;\n                newNode-&gt;next = <span class=\"hljs-literal\">nullptr</span>;\n                last-&gt;next = newNode;\n                last = newNode;\n                current = current-&gt;next;\n            }\n        }\n        size = otherStack.size;\n    }\n\n    <span class=\"hljs-comment\">/** Destructor */</span>\n    ~<span class=\"hljs-built_in\">stack</span>() {}\n\n    <span class=\"hljs-comment\">/** Determine whether the stack is empty */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isEmptyStack</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> (stackTop == <span class=\"hljs-literal\">nullptr</span>); }\n\n    <span class=\"hljs-comment\">/** Add new item to the stack */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(Type item)</span> </span>{\n        node&lt;Type&gt; *newNode;\n        newNode = <span class=\"hljs-keyword\">new</span> node&lt;Type&gt;;\n        newNode-&gt;data = item;\n        newNode-&gt;next = stackTop;\n        stackTop = newNode;\n        size++;\n    }\n\n    <span class=\"hljs-comment\">/** Return the top element of the stack */</span>\n    <span class=\"hljs-function\">Type <span class=\"hljs-title\">top</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-built_in\">assert</span>(stackTop != <span class=\"hljs-literal\">nullptr</span>);\n        <span class=\"hljs-keyword\">return</span> stackTop-&gt;data;\n    }\n\n    <span class=\"hljs-comment\">/** Remove the top element of the stack */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>{\n        node&lt;Type&gt; *temp;\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isEmptyStack</span>()) {\n            temp = stackTop;\n            stackTop = stackTop-&gt;next;\n            <span class=\"hljs-keyword\">delete</span> temp;\n            size--;\n        } <span class=\"hljs-keyword\">else</span> {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Stack is empty !&quot;</span> &lt;&lt; std::endl;\n        }\n    }\n\n    <span class=\"hljs-comment\">/** Clear stack */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span> </span>{ stackTop = <span class=\"hljs-literal\">nullptr</span>; }\n\n    <span class=\"hljs-comment\">/** Overload &quot;=&quot; the assignment operator */</span>\n    stack&lt;Type&gt; &amp;<span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-keyword\">const</span> stack&lt;Type&gt; &amp;otherStack) {\n        node&lt;Type&gt; *newNode, *current, *last;\n\n        <span class=\"hljs-comment\">/* If stack is no empty, make it empty */</span>\n        <span class=\"hljs-keyword\">if</span> (stackTop != <span class=\"hljs-literal\">nullptr</span>) {\n            stackTop = <span class=\"hljs-literal\">nullptr</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (otherStack.stackTop == <span class=\"hljs-literal\">nullptr</span>) {\n            stackTop = <span class=\"hljs-literal\">nullptr</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            current = otherStack.stackTop;\n            stackTop = <span class=\"hljs-keyword\">new</span> node&lt;Type&gt;;\n            stackTop-&gt;data = current-&gt;data;\n            stackTop-&gt;next = <span class=\"hljs-literal\">nullptr</span>;\n            last = stackTop;\n            current = current-&gt;next;\n            <span class=\"hljs-comment\">/* Copy the remaining stack */</span>\n            <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">nullptr</span>) {\n                newNode = <span class=\"hljs-keyword\">new</span> node&lt;Type&gt;;\n                newNode-&gt;data = current-&gt;data;\n                newNode-&gt;next = <span class=\"hljs-literal\">nullptr</span>;\n                last-&gt;next = newNode;\n                last = newNode;\n                current = current-&gt;next;\n            }\n        }\n        size = otherStack.size;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n <span class=\"hljs-keyword\">private</span>:\n    node&lt;Type&gt; *stackTop; <span class=\"hljs-comment\">/**&lt; Pointer to the stack */</span>\n    <span class=\"hljs-type\">int</span> size;             <span class=\"hljs-comment\">///&lt; size of stack</span>\n};\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span>  <span class=\"hljs-comment\">// DATA_STRUCTURES_STACK_H_</span></span>\n"
    },
    "c": {
      "dir": "data_structures/stack/stack_linked_list/stack.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/stack/stack_linked_list/stack.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;stack.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stddef.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> T Stack_T</span>\n\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">elem</span>\n{</span>\n    <span class=\"hljs-type\">void</span> *val;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">elem</span> *<span class=\"hljs-title\">next</span>;</span>\n} <span class=\"hljs-type\">elem_t</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">T</span>\n{</span>\n    <span class=\"hljs-type\">int</span> count;\n    <span class=\"hljs-type\">elem_t</span> *head;\n};\n\n<span class=\"hljs-comment\">/* Initial stack */</span>\nT <span class=\"hljs-title function_\">Stack_init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    T <span class=\"hljs-built_in\">stack</span>;\n    <span class=\"hljs-built_in\">stack</span> = (T)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(T));\n    <span class=\"hljs-built_in\">stack</span>-&gt;count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-built_in\">stack</span>-&gt;head = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stack</span>;\n}\n\n<span class=\"hljs-comment\">/* Check empty stack*/</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Stack_empty</span><span class=\"hljs-params\">(T <span class=\"hljs-built_in\">stack</span>)</span>\n{\n    assert(<span class=\"hljs-built_in\">stack</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stack</span>-&gt;count == <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/* Return size of the stack */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">Stack_size</span><span class=\"hljs-params\">(T <span class=\"hljs-built_in\">stack</span>)</span>\n{\n    assert(<span class=\"hljs-built_in\">stack</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stack</span>-&gt;count;\n}\n\n<span class=\"hljs-comment\">/* Push an element into the stack */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Stack_push</span><span class=\"hljs-params\">(T <span class=\"hljs-built_in\">stack</span>, <span class=\"hljs-type\">void</span> *val)</span>\n{\n    <span class=\"hljs-type\">elem_t</span> *t;\n\n    assert(<span class=\"hljs-built_in\">stack</span>);\n    t = (<span class=\"hljs-type\">elem_t</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">elem_t</span>));\n    t-&gt;val = val;\n    t-&gt;next = <span class=\"hljs-built_in\">stack</span>-&gt;head;\n    <span class=\"hljs-built_in\">stack</span>-&gt;head = t;\n    <span class=\"hljs-built_in\">stack</span>-&gt;count++;\n}\n\n<span class=\"hljs-comment\">/* Pop an element out of the stack */</span>\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">Stack_pop</span><span class=\"hljs-params\">(T <span class=\"hljs-built_in\">stack</span>)</span>\n{\n    <span class=\"hljs-type\">void</span> *val;\n    <span class=\"hljs-type\">elem_t</span> *t;\n\n    assert(<span class=\"hljs-built_in\">stack</span>);\n    assert(<span class=\"hljs-built_in\">stack</span>-&gt;count &gt; <span class=\"hljs-number\">0</span>);\n    t = <span class=\"hljs-built_in\">stack</span>-&gt;head;\n    <span class=\"hljs-built_in\">stack</span>-&gt;head = t-&gt;next;\n    <span class=\"hljs-built_in\">stack</span>-&gt;count--;\n    val = t-&gt;val;\n    <span class=\"hljs-built_in\">free</span>(t);\n    <span class=\"hljs-keyword\">return</span> val;\n}\n\n<span class=\"hljs-comment\">/* Print all elements in the stack */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Stack_print</span><span class=\"hljs-params\">(Stack_T <span class=\"hljs-built_in\">stack</span>)</span>\n{\n    assert(<span class=\"hljs-built_in\">stack</span>);\n\n    <span class=\"hljs-type\">int</span> i, size = Stack_size(<span class=\"hljs-built_in\">stack</span>);\n    <span class=\"hljs-type\">elem_t</span> *current_elem = <span class=\"hljs-built_in\">stack</span>-&gt;head;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Stack [Top --- Bottom]: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%p &quot;</span>, (<span class=\"hljs-type\">int</span> *)current_elem-&gt;val);\n        current_elem = current_elem-&gt;next;\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n"
    },
    "ruby": {
      "dir": "data_structures/stacks/stack.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/stacks/stack.rb",
      "code": "<span class=\"hljs-comment\"># A stack is an abstract data type that serves as a collection of</span>\n<span class=\"hljs-comment\"># elements with two principal operations: push() and pop(). push() adds an</span>\n<span class=\"hljs-comment\"># element to the top of the stack, and pop() removes an element from the top</span>\n<span class=\"hljs-comment\"># of a stack. The order in which elements come off of a stack are</span>\n<span class=\"hljs-comment\"># Last In, First Out (LIFO)</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StackOverflowError</span> &lt; StandardError;</span> <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(limit, stack = [])</span></span>\n    <span class=\"hljs-variable\">@stack</span> = stack\n    <span class=\"hljs-variable\">@limit</span> = limit\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:stack</span>, <span class=\"hljs-symbol\">:limit</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(item)</span></span>\n    raise StackOverflowError <span class=\"hljs-keyword\">unless</span> stack.count &lt; limit\n\n    stack &lt;&lt; item\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pop</span></span>\n    stack.pop\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">peek</span></span>\n    stack.last\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">empty?</span></span>\n    stack.count.zero?\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">full?</span></span>\n    stack.count == limit\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">size</span></span>\n    stack.count\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">contains?</span><span class=\"hljs-params\">(item)</span></span>\n    stack.<span class=\"hljs-keyword\">include</span>?(item)\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nstack = Stack.new(<span class=\"hljs-number\">10</span>, [])\n\nputs stack.empty?\n<span class=\"hljs-comment\"># =&gt; true</span>\n\nstack.push(<span class=\"hljs-number\">3</span>)\nstack.push(<span class=\"hljs-number\">5</span>)\nstack.push(<span class=\"hljs-number\">7</span>)\nstack.push(<span class=\"hljs-number\">9</span>)\n\nputs stack.full?\n<span class=\"hljs-comment\"># =&gt; false</span>\n\nputs stack.contains?(<span class=\"hljs-number\">5</span>)\n<span class=\"hljs-comment\"># =&gt; true</span>\n\nputs stack.pop\n<span class=\"hljs-comment\"># =&gt; 9</span>\n\nputs stack.peek\n<span class=\"hljs-comment\"># =&gt; 7</span>\n\nputs stack.size\n<span class=\"hljs-comment\"># =&gt; 3</span>\n\nputs stack.inspect\n<span class=\"hljs-comment\"># =&gt; #&lt;Stack:0x00007fceed83eb40 <span class=\"hljs-doctag\">@stack</span>=[3, 5, 7], <span class=\"hljs-doctag\">@limit</span>=10&gt;</span>\n\nstack.push(<span class=\"hljs-number\">13</span>)\nstack.push(<span class=\"hljs-number\">15</span>)\nstack.push(<span class=\"hljs-number\">17</span>)\nstack.push(<span class=\"hljs-number\">19</span>)\nstack.push(<span class=\"hljs-number\">23</span>)\nstack.push(<span class=\"hljs-number\">25</span>)\nstack.push(<span class=\"hljs-number\">27</span>)\n<span class=\"hljs-comment\"># At this point, the stack is full</span>\n\nstack.push(<span class=\"hljs-number\">29</span>)\n<span class=\"hljs-comment\"># =&gt; data_structures/stacks/stack.rb:18:in `push&#x27;: StackOverflowError (StackOverflowError)</span>\n<span class=\"hljs-comment\"># from data_structures/stacks/stack.rb:83:in `&lt;main&gt;&#x27;</span>\n"
    },
    "swift": {
      "dir": "data_structures/Stack/stack.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/data_structures/Stack/stack.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Stack</span>&lt;<span class=\"hljs-title class_\">T</span>&gt; {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> elements <span class=\"hljs-operator\">=</span> [<span class=\"hljs-type\">T</span>]()\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">element</span>: <span class=\"hljs-type\">T</span>) {\n        elements.append(element)\n    }\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">pop</span>() -&gt; <span class=\"hljs-type\">T</span>? {\n        <span class=\"hljs-keyword\">return</span> elements.popLast()\n    }\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> isEmpty: <span class=\"hljs-type\">Bool</span> {\n        <span class=\"hljs-keyword\">return</span> elements.isEmpty\n    }\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> count: <span class=\"hljs-type\">Int</span> {\n        <span class=\"hljs-keyword\">return</span> elements.count\n    }\n    \n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> peek: <span class=\"hljs-type\">T</span>? {\n        <span class=\"hljs-keyword\">return</span> elements.last\n    }\n}\n\n<span class=\"hljs-comment\">// The code below can be used for testing</span>\n\n<span class=\"hljs-keyword\">var</span> stack <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Stack</span>&lt;<span class=\"hljs-type\">Int</span>&gt;()\n\nstack.push(<span class=\"hljs-number\">10</span>)\nstack.push(<span class=\"hljs-number\">20</span>)\nstack.push(<span class=\"hljs-number\">30</span>)\n\n<span class=\"hljs-built_in\">print</span>(stack.count)\n<span class=\"hljs-built_in\">print</span>(stack.peek)\n<span class=\"hljs-built_in\">print</span>(stack.isEmpty)\n\n<span class=\"hljs-built_in\">print</span>(stack.pop())\n<span class=\"hljs-built_in\">print</span>(stack.pop())\n<span class=\"hljs-built_in\">print</span>(stack.pop())\n<span class=\"hljs-built_in\">print</span>(stack.isEmpty)\n<span class=\"hljs-built_in\">print</span>(stack.count)\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Harish sambasivam",
      "email": "39916450+harishsambasivam@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Juliano Nunes",
      "email": "julianomarquesnunes@gmail.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    },
    {
      "name": "Shezza221b",
      "email": "41204318+Shezza221b@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "megahertz66",
      "email": "38521608+megahertz66@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hert Zhao",
      "email": "zhao13836892152@foxmail.com",
      "commits": 1
    },
    {
      "name": "Rian Gallagher",
      "email": "rianogallagher@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Ahmed Haj Abdel Khaleq",
      "email": "31858489+AhmedHaj@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Akash",
      "email": "akash0babu0@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maxim Semenyuk",
      "email": "33791308+semenuk@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Chris McLennon",
      "email": "mclennon@indeed.com",
      "commits": 1
    },
    {
      "name": "Omkar Pathak",
      "email": "omkarpathak27@gmail.com",
      "commits": 1
    },
    {
      "name": "Gustavo Tiecker",
      "email": "gustavotiecker@gmail.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "KylerSmith",
      "email": "Kyler@macBookAir.local",
      "commits": 2
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 4
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 5
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
