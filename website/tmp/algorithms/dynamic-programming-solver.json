{
  "slug": "dynamic-programming-solver",
  "name": "Dynamic Programming solver",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Knapsack/DynamicProgrammingKnapsackSolver.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Knapsack/DynamicProgrammingKnapsackSolver.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Knapsack</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Dynamic Programming Knapsack solver.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of items in knapsack.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DynamicProgrammingKnapsackSolver</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns the knapsack containing the items that</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     maximize value while not exceeding weight capacity.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;items&quot;&gt;</span>The list of items from which we select ones to be in the knapsack.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;capacity&quot;&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The maximum weight capacity of the knapsack</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     to be filled. Only integer values of this capacity are tried. If</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     a greater resolution is needed, multiply the</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     weights/capacity by a factor of 10.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;weightSelector&quot;&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A function that returns the value of the specified item</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     from the <span class=\"hljs-doctag\">&lt;paramref name=&quot;items&quot;&gt;</span>items<span class=\"hljs-doctag\">&lt;/paramref&gt;</span> list.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;valueSelector&quot;&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A function that returns the weight of the specified item</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     from the <span class=\"hljs-doctag\">&lt;paramref name=&quot;items&quot;&gt;</span>items<span class=\"hljs-doctag\">&lt;/paramref&gt;</span> list.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The array of items that provides the maximum value of the</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     knapsack without exceeding the specified weight <span class=\"hljs-doctag\">&lt;paramref name=&quot;capacity&quot;&gt;</span>capacity<span class=\"hljs-doctag\">&lt;/paramref&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T[] <span class=\"hljs-title\">Solve</span>(<span class=\"hljs-params\">T[] items, <span class=\"hljs-built_in\">int</span> capacity, Func&lt;T, <span class=\"hljs-built_in\">int</span>&gt; weightSelector, Func&lt;T, <span class=\"hljs-built_in\">double</span>&gt; valueSelector</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> cache = Tabulate(items, weightSelector, valueSelector, capacity);\n            <span class=\"hljs-keyword\">return</span> GetOptimalItems(items, weightSelector, cache, capacity);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> T[] <span class=\"hljs-title\">GetOptimalItems</span>(<span class=\"hljs-params\">T[] items, Func&lt;T, <span class=\"hljs-built_in\">int</span>&gt; weightSelector, <span class=\"hljs-built_in\">double</span>[,] cache, <span class=\"hljs-built_in\">int</span> capacity</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> currentCapacity = capacity;\n\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> List&lt;T&gt;();\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = items.Length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)\n            {\n                <span class=\"hljs-keyword\">if</span> (cache[i + <span class=\"hljs-number\">1</span>, currentCapacity] &gt; cache[i, currentCapacity])\n                {\n                    <span class=\"hljs-keyword\">var</span> item = items[i];\n                    result.Add(item);\n                    currentCapacity -= weightSelector(item);\n                }\n            }\n\n            result.Reverse(); <span class=\"hljs-comment\">// we added items back to front</span>\n            <span class=\"hljs-keyword\">return</span> result.ToArray();\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span>[,] Tabulate(\n            T[] items,\n            Func&lt;T, <span class=\"hljs-built_in\">int</span>&gt; weightSelector,\n            Func&lt;T, <span class=\"hljs-built_in\">double</span>&gt; valueSelector,\n            <span class=\"hljs-built_in\">int</span> maxCapacity)\n        {\n            <span class=\"hljs-comment\">// Store the incremental results in a bottom up manner</span>\n            <span class=\"hljs-keyword\">var</span> n = items.Length;\n            <span class=\"hljs-keyword\">var</span> results = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[n + <span class=\"hljs-number\">1</span>, maxCapacity + <span class=\"hljs-number\">1</span>];\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt;= n; i++)\n            {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-number\">0</span>; w &lt;= maxCapacity; w++)\n                {\n                    <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || w == <span class=\"hljs-number\">0</span>)\n                    {\n                        <span class=\"hljs-comment\">// If we have no items to take, or</span>\n                        <span class=\"hljs-comment\">// if we have no capacity in our knapsack</span>\n                        <span class=\"hljs-comment\">// we cannot possibly have any value</span>\n                        results[i, w] = <span class=\"hljs-number\">0</span>;\n                    }\n                    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (weightSelector(items[i - <span class=\"hljs-number\">1</span>]) &lt;= w)\n                    {\n                        <span class=\"hljs-comment\">// Decide if it is better to take or not take this item</span>\n                        <span class=\"hljs-keyword\">var</span> iut = items[i - <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// iut = Item under test</span>\n                        <span class=\"hljs-keyword\">var</span> vut = valueSelector(iut); <span class=\"hljs-comment\">// vut = Value of item under test</span>\n                        <span class=\"hljs-keyword\">var</span> wut = weightSelector(iut); <span class=\"hljs-comment\">// wut = Weight of item under test</span>\n                        <span class=\"hljs-keyword\">var</span> valueIfTaken = vut + results[i - <span class=\"hljs-number\">1</span>, w - wut];\n                        <span class=\"hljs-keyword\">var</span> valueIfNotTaken = results[i - <span class=\"hljs-number\">1</span>, w];\n                        results[i, w] = Math.Max(valueIfTaken, valueIfNotTaken);\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        <span class=\"hljs-comment\">// There is not enough room to take this item</span>\n                        results[i, w] = results[i - <span class=\"hljs-number\">1</span>, w];\n                    }\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> results;\n        }\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
