{
  "slug": "qr-decomposition",
  "name": "Qr Decomposition",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/qr_decomposition.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/qr_decomposition.py",
      "code": "<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">qr_householder</span>(<span class=\"hljs-params\">A</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Return a QR-decomposition of the matrix A using Householder reflection.\n\n    The QR-decomposition decomposes the matrix A of shape (m, n) into an\n    orthogonal matrix Q of shape (m, m) and an upper triangular matrix R of\n    shape (m, n).  Note that the matrix A does not have to be square.  This\n    method of decomposing A uses the Householder reflection, which is\n    numerically stable and of complexity O(n^3).\n\n    https://en.wikipedia.org/wiki/QR_decomposition#Using_Householder_reflections\n\n    Arguments:\n    A -- a numpy.ndarray of shape (m, n)\n\n    Note: several optimizations can be made for numeric efficiency, but this is\n    intended to demonstrate how it would be represented in a mathematics\n    textbook.  In cases where efficiency is particularly important, an optimized\n    version from BLAS should be used.\n\n    &gt;&gt;&gt; A = np.array([[12, -51, 4], [6, 167, -68], [-4, 24, -41]], dtype=float)\n    &gt;&gt;&gt; Q, R = qr_householder(A)\n\n    &gt;&gt;&gt; # check that the decomposition is correct\n    &gt;&gt;&gt; np.allclose(Q@R, A)\n    True\n\n    &gt;&gt;&gt; # check that Q is orthogonal\n    &gt;&gt;&gt; np.allclose(Q@Q.T, np.eye(A.shape[0]))\n    True\n    &gt;&gt;&gt; np.allclose(Q.T@Q, np.eye(A.shape[0]))\n    True\n\n    &gt;&gt;&gt; # check that R is upper triangular\n    &gt;&gt;&gt; np.allclose(np.triu(R), R)\n    True\n    &quot;&quot;&quot;</span>\n    m, n = A.shape\n    t = <span class=\"hljs-built_in\">min</span>(m, n)\n    Q = np.eye(m)\n    R = A.copy()\n\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t - <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-comment\"># select a column of modified matrix A&#x27;:</span>\n        x = R[k:, [k]]\n        <span class=\"hljs-comment\"># construct first basis vector</span>\n        e1 = np.zeros_like(x)\n        e1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1.0</span>\n        <span class=\"hljs-comment\"># determine scaling factor</span>\n        alpha = np.linalg.norm(x)\n        <span class=\"hljs-comment\"># construct vector v for Householder reflection</span>\n        v = x + np.sign(x[<span class=\"hljs-number\">0</span>]) * alpha * e1\n        v /= np.linalg.norm(v)\n\n        <span class=\"hljs-comment\"># construct the Householder matrix</span>\n        Q_k = np.eye(m - k) - <span class=\"hljs-number\">2.0</span> * v @ v.T\n        <span class=\"hljs-comment\"># pad with ones and zeros as necessary</span>\n        Q_k = np.block([[np.eye(k), np.zeros((k, m - k))], [np.zeros((m - k, k)), Q_k]])\n\n        Q = Q @ Q_k.T\n        R = Q_k @ R\n\n    <span class=\"hljs-keyword\">return</span> Q, R\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "numerical_methods/qr_decomposition.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/qr_decomposition.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * \\brief Program to compute the [QR\n * decomposition](https://en.wikipedia.org/wiki/QR_decomposition) of a given\n * matrix.\n * \\author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;./qr_decompose.h&quot;</span></span>\n\n<span class=\"hljs-keyword\">using</span> qr_algorithm::qr_decompose;\n<span class=\"hljs-keyword\">using</span> qr_algorithm::<span class=\"hljs-keyword\">operator</span>&lt;&lt;;\n\n<span class=\"hljs-comment\">/**\n * main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span> </span>{\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> ROWS, COLUMNS;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number of rows and columns: &quot;</span>;\n    std::cin &gt;&gt; ROWS &gt;&gt; COLUMNS;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter matrix elements row-wise:\\n&quot;</span>;\n\n    std::valarray&lt;std::valarray&lt;<span class=\"hljs-type\">double</span>&gt;&gt; <span class=\"hljs-built_in\">A</span>(ROWS);\n    std::valarray&lt;std::valarray&lt;<span class=\"hljs-type\">double</span>&gt;&gt; <span class=\"hljs-built_in\">Q</span>(ROWS);\n    std::valarray&lt;std::valarray&lt;<span class=\"hljs-type\">double</span>&gt;&gt; <span class=\"hljs-built_in\">R</span>(COLUMNS);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; std::<span class=\"hljs-built_in\">max</span>(ROWS, COLUMNS); i++) {\n        <span class=\"hljs-keyword\">if</span> (i &lt; ROWS) {\n            A[i] = std::<span class=\"hljs-built_in\">valarray</span>&lt;<span class=\"hljs-type\">double</span>&gt;(COLUMNS);\n            Q[i] = std::<span class=\"hljs-built_in\">valarray</span>&lt;<span class=\"hljs-type\">double</span>&gt;(COLUMNS);\n        }\n        <span class=\"hljs-keyword\">if</span> (i &lt; COLUMNS) {\n            R[i] = std::<span class=\"hljs-built_in\">valarray</span>&lt;<span class=\"hljs-type\">double</span>&gt;(COLUMNS);\n        }\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; ROWS; i++)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; COLUMNS; j++) std::cin &gt;&gt; A[i][j];\n\n    std::cout &lt;&lt; A &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-type\">clock_t</span> t1 = <span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-built_in\">qr_decompose</span>(A, &amp;Q, &amp;R);\n    <span class=\"hljs-type\">double</span> dtime = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(<span class=\"hljs-built_in\">clock</span>() - t1) / CLOCKS_PER_SEC;\n\n    std::cout &lt;&lt; Q &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    std::cout &lt;&lt; R &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Time taken to compute: &quot;</span> &lt;&lt; dtime &lt;&lt; <span class=\"hljs-string\">&quot; sec\\n &quot;</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "numerical_methods/qr_decomposition.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/numerical_methods/qr_decomposition.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * \\brief Program to compute the [QR\n * decomposition](https://en.wikipedia.org/wiki/QR_decomposition) of a given\n * matrix.\n * \\author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;qr_decompose.h&quot;</span></span>\n\n<span class=\"hljs-comment\">/**\n * main function\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-type\">double</span> **A;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> ROWS, COLUMNS;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of rows and columns: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%u %u&quot;</span>, &amp;ROWS, &amp;COLUMNS);\n    <span class=\"hljs-keyword\">if</span> (ROWS &lt; COLUMNS)\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>,\n                <span class=\"hljs-string\">&quot;Number of rows must be greater than or equal to &quot;</span>\n                <span class=\"hljs-string\">&quot;number of columns.\\n&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter matrix elements row-wise:\\n&quot;</span>);\n\n    A = (<span class=\"hljs-type\">double</span> **)<span class=\"hljs-built_in\">malloc</span>(ROWS * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span> *));\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; ROWS; i++)\n        A[i] = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">malloc</span>(COLUMNS * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>));\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; ROWS; i++)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; COLUMNS; j++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lf&quot;</span>, &amp;A[i][j]);\n\n    print_matrix(A, ROWS, COLUMNS);\n\n    <span class=\"hljs-type\">double</span> **R = (<span class=\"hljs-type\">double</span> **)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span> *) * ROWS);\n    <span class=\"hljs-type\">double</span> **Q = (<span class=\"hljs-type\">double</span> **)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span> *) * ROWS);\n    <span class=\"hljs-keyword\">if</span> (!Q || !R)\n    {\n        perror(<span class=\"hljs-string\">&quot;Unable to allocate memory for Q &amp; R!&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; ROWS; i++)\n    {\n        R[i] = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>) * COLUMNS);\n        Q[i] = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>) * ROWS);\n        <span class=\"hljs-keyword\">if</span> (!Q[i] || !R[i])\n        {\n            perror(<span class=\"hljs-string\">&quot;Unable to allocate memory for Q &amp; R.&quot;</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n    }\n\n    <span class=\"hljs-type\">clock_t</span> t1 = clock();\n    qr_decompose(A, Q, R, ROWS, COLUMNS);\n    <span class=\"hljs-type\">double</span> dtime = (<span class=\"hljs-type\">double</span>)(clock() - t1) / CLOCKS_PER_SEC;\n\n    print_matrix(R, ROWS, COLUMNS);\n    print_matrix(Q, ROWS, COLUMNS);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Time taken to compute: %.4g sec\\n&quot;</span>, dtime);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; ROWS; i++)\n    {\n        <span class=\"hljs-built_in\">free</span>(A[i]);\n        <span class=\"hljs-built_in\">free</span>(R[i]);\n        <span class=\"hljs-built_in\">free</span>(Q[i]);\n    }\n    <span class=\"hljs-built_in\">free</span>(A);\n    <span class=\"hljs-built_in\">free</span>(R);\n    <span class=\"hljs-built_in\">free</span>(Q);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Stephen",
      "email": "24819660+infrontoftheforest@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 4
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}
