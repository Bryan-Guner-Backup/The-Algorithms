{
  "slug": "median",
  "name": "Median",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Maths/Median.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/Median.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-comment\">/** Wikipedia: https://en.wikipedia.org/wiki/Median */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Median</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">median</span><span class=\"hljs-params\">(new <span class=\"hljs-type\">int</span>[] {<span class=\"hljs-number\">0</span>})</span> == <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">median</span><span class=\"hljs-params\">(new <span class=\"hljs-type\">int</span>[] {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>})</span> == <span class=\"hljs-number\">1.5</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">median</span><span class=\"hljs-params\">(new <span class=\"hljs-type\">int</span>[] {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>})</span> == <span class=\"hljs-number\">2.5</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">median</span><span class=\"hljs-params\">(new <span class=\"hljs-type\">int</span>[] {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>})</span> == <span class=\"hljs-number\">6</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">median</span><span class=\"hljs-params\">(new <span class=\"hljs-type\">int</span>[] {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>})</span> == <span class=\"hljs-number\">4.5</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate average median\n   *\n   * <span class=\"hljs-doctag\">@param</span> values number series\n   * <span class=\"hljs-doctag\">@return</span> median of given {<span class=\"hljs-doctag\">@code</span> values}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">median</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] values)</span> {\n    Arrays.sort(values);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> values.length;\n    <span class=\"hljs-keyword\">return</span> length % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n        ? (values[length / <span class=\"hljs-number\">2</span>] + values[length / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>]) / <span class=\"hljs-number\">2.0</span>\n        : values[length / <span class=\"hljs-number\">2</span>];\n  }\n}\n"
    },
    "c": {
      "dir": "numerical_methods/median.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/numerical_methods/median.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">10</span>], n, i, j, temp;\n    <span class=\"hljs-type\">float</span> mean, median;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter no. for Random Numbers :&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        a[i] = rand() % <span class=\"hljs-number\">100</span>;\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Random Numbers Generated are :\\n&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n%d&quot;</span>, a[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSorted Data:&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; n; j++)\n        {\n            <span class=\"hljs-keyword\">if</span> (a[i] &lt; a[j])\n            {\n                temp = a[i];\n                a[i] = a[j];\n                a[j] = temp;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n%d&quot;</span>, a[i]);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n    {\n        median = (a[n / <span class=\"hljs-number\">2</span>] + a[(n / <span class=\"hljs-number\">2</span>) - <span class=\"hljs-number\">1</span>]) / <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        median = a[n / <span class=\"hljs-number\">2</span>];\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nMedian is : %f&quot;</span>, median);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/math/Median.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/math/Median.kt",
      "code": "<span class=\"hljs-keyword\">package</span> math\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays.sort\n\n<span class=\"hljs-comment\">/**\n * Calculates the median of an array of Int\n *\n * <span class=\"hljs-doctag\">@param</span> values is an array of Int\n * <span class=\"hljs-doctag\">@return</span> the middle number of the array\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">median</span><span class=\"hljs-params\">(values: <span class=\"hljs-type\">IntArray</span>)</span></span>: <span class=\"hljs-built_in\">Double</span> {\n    sort(values)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">when</span> {\n        values.size % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> -&gt; getHalfwayBetweenMiddleValues(values)\n        <span class=\"hljs-keyword\">else</span> -&gt; getMiddleValue(values)\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Calculates the middle number of an array when the size is an even number\n *\n * <span class=\"hljs-doctag\">@param</span> values is an array of Int\n * <span class=\"hljs-doctag\">@return</span> the middle number of the array\n */</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getHalfwayBetweenMiddleValues</span><span class=\"hljs-params\">(values: <span class=\"hljs-type\">IntArray</span>)</span></span>: <span class=\"hljs-built_in\">Double</span> {\n    <span class=\"hljs-keyword\">val</span> arraySize = values.size\n    <span class=\"hljs-keyword\">val</span> sumOfMiddleValues = (values[arraySize / <span class=\"hljs-number\">2</span>] + values[(arraySize / <span class=\"hljs-number\">2</span>) - <span class=\"hljs-number\">1</span> ])\n    <span class=\"hljs-keyword\">return</span> sumOfMiddleValues / <span class=\"hljs-number\">2.0</span>\n}\n\n<span class=\"hljs-comment\">/**\n * Calculates the middle number of an array when the size is an odd number\n *\n * <span class=\"hljs-doctag\">@param</span> values is an array of Int\n * <span class=\"hljs-doctag\">@return</span> the middle number of the array\n */</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">getMiddleValue</span><span class=\"hljs-params\">(values: <span class=\"hljs-type\">IntArray</span>)</span></span>: <span class=\"hljs-built_in\">Double</span> {\n    <span class=\"hljs-keyword\">return</span> values[values.size / <span class=\"hljs-number\">2</span>].toDouble()\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "KylerSmith",
      "email": "Kyler@macBookAir.local",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 2
    },
    {
      "name": "laurelr2020",
      "email": "reganlaurell@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
