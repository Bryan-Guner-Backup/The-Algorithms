{
  "slug": "dijkstra-bankers-algorithm",
  "name": "Dijkstra Bankers Algorithm",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/dijkstra_bankers_algorithm.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/dijkstra_bankers_algorithm.py",
      "code": "<span class=\"hljs-comment\"># A Python implementation of the Banker&#x27;s Algorithm in Operating Systems using</span>\n<span class=\"hljs-comment\"># Processes and Resources</span>\n<span class=\"hljs-comment\"># {</span>\n<span class=\"hljs-comment\"># &quot;Author: &quot;Biney Kingsley (bluedistro@github.io), bineykingsley36@gmail.com&quot;,</span>\n<span class=\"hljs-comment\"># &quot;Date&quot;: 28-10-2018</span>\n<span class=\"hljs-comment\"># }</span>\n<span class=\"hljs-string\">&quot;&quot;&quot;\nThe Banker&#x27;s algorithm is a resource allocation and deadlock avoidance algorithm\ndeveloped by Edsger Dijkstra that tests for safety by simulating the allocation of\npredetermined maximum possible amounts of all resources, and then makes a &quot;s-state&quot;\ncheck to test for possible deadlock conditions for all other pending activities,\nbefore deciding whether allocation should be allowed to continue.\n[Source] Wikipedia\n[Credit] Rosetta Code C implementation helped very much.\n (https://rosettacode.org/wiki/Banker%27s_algorithm)\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> time\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\ntest_claim_vector = [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>]\ntest_allocated_res_table = [\n    [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>],\n    [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>],\n]\ntest_maximum_claim_table = [\n    [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>],\n    [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>],\n]\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BankersAlgorithm</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">\n        self,\n        claim_vector: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>],\n        allocated_resources_table: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]],\n        maximum_claim_table: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]],\n    </span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :param claim_vector: A nxn/nxm list depicting the amount of each resources\n         (eg. memory, interface, semaphores, etc.) available.\n        :param allocated_resources_table: A nxn/nxm list depicting the amount of each\n         resource each process is currently holding\n        :param maximum_claim_table: A nxn/nxm list depicting how much of each resource\n         the system currently has available\n        &quot;&quot;&quot;</span>\n        self.__claim_vector = claim_vector\n        self.__allocated_resources_table = allocated_resources_table\n        self.__maximum_claim_table = maximum_claim_table\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__processes_resource_summation</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Check for allocated resources in line with each resource in the claim vector\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> [\n            <span class=\"hljs-built_in\">sum</span>(p_item[i] <span class=\"hljs-keyword\">for</span> p_item <span class=\"hljs-keyword\">in</span> self.__allocated_resources_table)\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(self.__allocated_resources_table[<span class=\"hljs-number\">0</span>]))\n        ]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__available_resources</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Check for available resources in line with each resource in the claim vector\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> np.array(self.__claim_vector) - np.array(\n            self.__processes_resource_summation()\n        )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__need</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Implement safety checker that calculates the needs by ensuring that\n        max_claim[i][j] - alloc_table[i][j] &lt;= avail[j]\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> [\n            <span class=\"hljs-built_in\">list</span>(np.array(self.__maximum_claim_table[i]) - np.array(allocated_resource))\n            <span class=\"hljs-keyword\">for</span> i, allocated_resource <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.__allocated_resources_table)\n        ]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__need_index_manager</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        This function builds an index control dictionary to track original ids/indices\n        of processes when altered during execution of method &quot;main&quot;\n            Return: {0: [a: int, b: int], 1: [c: int, d: int]}\n        &gt;&gt;&gt; (BankersAlgorithm(test_claim_vector, test_allocated_res_table,\n        ...     test_maximum_claim_table)._BankersAlgorithm__need_index_manager()\n        ...     )  # doctest: +NORMALIZE_WHITESPACE\n        {0: [1, 2, 0, 3], 1: [0, 1, 3, 1], 2: [1, 1, 0, 2], 3: [1, 3, 2, 0],\n         4: [2, 0, 0, 3]}\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> {self.__need().index(i): i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> self.__need()}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\">self, **kwargs</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Utilize various methods in this class to simulate the Banker&#x27;s algorithm\n        Return: None\n        &gt;&gt;&gt; BankersAlgorithm(test_claim_vector, test_allocated_res_table,\n        ...    test_maximum_claim_table).main(describe=True)\n                 Allocated Resource Table\n        P1       2        0        1        1\n        &lt;BLANKLINE&gt;\n        P2       0        1        2        1\n        &lt;BLANKLINE&gt;\n        P3       4        0        0        3\n        &lt;BLANKLINE&gt;\n        P4       0        2        1        0\n        &lt;BLANKLINE&gt;\n        P5       1        0        3        0\n        &lt;BLANKLINE&gt;\n                 System Resource Table\n        P1       3        2        1        4\n        &lt;BLANKLINE&gt;\n        P2       0        2        5        2\n        &lt;BLANKLINE&gt;\n        P3       5        1        0        5\n        &lt;BLANKLINE&gt;\n        P4       1        5        3        0\n        &lt;BLANKLINE&gt;\n        P5       3        0        3        3\n        &lt;BLANKLINE&gt;\n        Current Usage by Active Processes: 8 5 9 7\n        Initial Available Resources:       1 2 2 2\n        __________________________________________________\n        &lt;BLANKLINE&gt;\n        Process 3 is executing.\n        Updated available resource stack for processes: 5 2 2 5\n        The process is in a safe state.\n        &lt;BLANKLINE&gt;\n        Process 1 is executing.\n        Updated available resource stack for processes: 7 2 3 6\n        The process is in a safe state.\n        &lt;BLANKLINE&gt;\n        Process 2 is executing.\n        Updated available resource stack for processes: 7 3 5 7\n        The process is in a safe state.\n        &lt;BLANKLINE&gt;\n        Process 4 is executing.\n        Updated available resource stack for processes: 7 5 6 7\n        The process is in a safe state.\n        &lt;BLANKLINE&gt;\n        Process 5 is executing.\n        Updated available resource stack for processes: 8 5 9 7\n        The process is in a safe state.\n        &lt;BLANKLINE&gt;\n        &quot;&quot;&quot;</span>\n        need_list = self.__need()\n        alloc_resources_table = self.__allocated_resources_table\n        available_resources = self.__available_resources()\n        need_index_manager = self.__need_index_manager()\n        <span class=\"hljs-keyword\">for</span> kw, val <span class=\"hljs-keyword\">in</span> kwargs.items():\n            <span class=\"hljs-keyword\">if</span> kw <span class=\"hljs-keyword\">and</span> val <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\n                self.__pretty_data()\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;_&quot;</span> * <span class=\"hljs-number\">50</span> + <span class=\"hljs-string\">&quot;\\n&quot;</span>)\n        <span class=\"hljs-keyword\">while</span> need_list:\n            safe = <span class=\"hljs-literal\">False</span>\n            <span class=\"hljs-keyword\">for</span> each_need <span class=\"hljs-keyword\">in</span> need_list:\n                execution = <span class=\"hljs-literal\">True</span>\n                <span class=\"hljs-keyword\">for</span> index, need <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(each_need):\n                    <span class=\"hljs-keyword\">if</span> need &gt; available_resources[index]:\n                        execution = <span class=\"hljs-literal\">False</span>\n                        <span class=\"hljs-keyword\">break</span>\n                <span class=\"hljs-keyword\">if</span> execution:\n                    safe = <span class=\"hljs-literal\">True</span>\n                    <span class=\"hljs-comment\"># get the original index of the process from ind_ctrl db</span>\n                    <span class=\"hljs-keyword\">for</span> original_need_index, need_clone <span class=\"hljs-keyword\">in</span> need_index_manager.items():\n                        <span class=\"hljs-keyword\">if</span> each_need == need_clone:\n                            process_number = original_need_index\n                    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Process <span class=\"hljs-subst\">{process_number + <span class=\"hljs-number\">1</span>}</span> is executing.&quot;</span>)\n                    <span class=\"hljs-comment\"># remove the process run from stack</span>\n                    need_list.remove(each_need)\n                    <span class=\"hljs-comment\"># update available/freed resources stack</span>\n                    available_resources = np.array(available_resources) + np.array(\n                        alloc_resources_table[process_number]\n                    )\n                    <span class=\"hljs-built_in\">print</span>(\n                        <span class=\"hljs-string\">&quot;Updated available resource stack for processes: &quot;</span>\n                        + <span class=\"hljs-string\">&quot; &quot;</span>.join([<span class=\"hljs-built_in\">str</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> available_resources])\n                    )\n                    <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-keyword\">if</span> safe:\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The process is in a safe state.\\n&quot;</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;System in unsafe state. Aborting...\\n&quot;</span>)\n                <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__pretty_data</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Properly align display of the algorithm&#x27;s solution\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot; &quot;</span> * <span class=\"hljs-number\">9</span> + <span class=\"hljs-string\">&quot;Allocated Resource Table&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> self.__allocated_resources_table:\n            <span class=\"hljs-built_in\">print</span>(\n                <span class=\"hljs-string\">f&quot;P<span class=\"hljs-subst\">{self.__allocated_resources_table.index(item) + <span class=\"hljs-number\">1</span>}</span>&quot;</span>\n                + <span class=\"hljs-string\">&quot; &quot;</span>.join(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{it:&gt;<span class=\"hljs-number\">8</span>}</span>&quot;</span> <span class=\"hljs-keyword\">for</span> it <span class=\"hljs-keyword\">in</span> item)\n                + <span class=\"hljs-string\">&quot;\\n&quot;</span>\n            )\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot; &quot;</span> * <span class=\"hljs-number\">9</span> + <span class=\"hljs-string\">&quot;System Resource Table&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> self.__maximum_claim_table:\n            <span class=\"hljs-built_in\">print</span>(\n                <span class=\"hljs-string\">f&quot;P<span class=\"hljs-subst\">{self.__maximum_claim_table.index(item) + <span class=\"hljs-number\">1</span>}</span>&quot;</span>\n                + <span class=\"hljs-string\">&quot; &quot;</span>.join(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{it:&gt;<span class=\"hljs-number\">8</span>}</span>&quot;</span> <span class=\"hljs-keyword\">for</span> it <span class=\"hljs-keyword\">in</span> item)\n                + <span class=\"hljs-string\">&quot;\\n&quot;</span>\n            )\n        <span class=\"hljs-built_in\">print</span>(\n            <span class=\"hljs-string\">&quot;Current Usage by Active Processes: &quot;</span>\n            + <span class=\"hljs-string\">&quot; &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> self.__claim_vector)\n        )\n        <span class=\"hljs-built_in\">print</span>(\n            <span class=\"hljs-string\">&quot;Initial Available Resources:       &quot;</span>\n            + <span class=\"hljs-string\">&quot; &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> self.__available_resources())\n        )\n        time.sleep(<span class=\"hljs-number\">1</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
