{
  "slug": "heapelement",
  "name": "HeapElement",
  "categories": ["datastructures", "heaps"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Heaps/HeapElement.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Heaps/HeapElement.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Heaps;\n\n<span class=\"hljs-comment\">/**\n * Class for heap elements.&lt;br&gt;\n *\n * &lt;p&gt;A heap element contains two attributes: a key which will be used to build the tree (int or\n * double, either primitive type or object) and any kind of IMMUTABLE object the user sees fit to\n * carry any information he/she likes. Be aware that the use of a mutable object might jeopardize\n * the integrity of this information.\n *\n * <span class=\"hljs-doctag\">@author</span> Nicolas Renard\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HeapElement</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span> key;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Object additionalInfo;\n\n  <span class=\"hljs-comment\">// Constructors</span>\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> key : a number of primitive type &#x27;double&#x27;\n   * <span class=\"hljs-doctag\">@param</span> info : any kind of IMMUTABLE object. May be null, since the purpose is only to carry\n   *     additional information of use for the user\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HeapElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> key, Object info)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    <span class=\"hljs-built_in\">this</span>.additionalInfo = info;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> key : a number of primitive type &#x27;int&#x27;\n   * <span class=\"hljs-doctag\">@param</span> info : any kind of IMMUTABLE object. May be null, since the purpose is only to carry\n   *     additional information of use for the user\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HeapElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key, Object info)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    <span class=\"hljs-built_in\">this</span>.additionalInfo = info;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> key : a number of object type &#x27;Integer&#x27;\n   * <span class=\"hljs-doctag\">@param</span> info : any kind of IMMUTABLE object. May be null, since the purpose is only to carry\n   *     additional information of use for the user\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HeapElement</span><span class=\"hljs-params\">(Integer key, Object info)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    <span class=\"hljs-built_in\">this</span>.additionalInfo = info;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> key : a number of object type &#x27;Double&#x27;\n   * <span class=\"hljs-doctag\">@param</span> info : any kind of IMMUTABLE object. May be null, since the purpose is only to carry\n   *     additional information of use for the user\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HeapElement</span><span class=\"hljs-params\">(Double key, Object info)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    <span class=\"hljs-built_in\">this</span>.additionalInfo = info;\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@param</span> key : a number of primitive type &#x27;double&#x27; */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HeapElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> key)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    <span class=\"hljs-built_in\">this</span>.additionalInfo = <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@param</span> key : a number of primitive type &#x27;int&#x27; */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HeapElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    <span class=\"hljs-built_in\">this</span>.additionalInfo = <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@param</span> key : a number of object type &#x27;Integer&#x27; */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HeapElement</span><span class=\"hljs-params\">(Integer key)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    <span class=\"hljs-built_in\">this</span>.additionalInfo = <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@param</span> key : a number of object type &#x27;Double&#x27; */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HeapElement</span><span class=\"hljs-params\">(Double key)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    <span class=\"hljs-built_in\">this</span>.additionalInfo = <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-comment\">// Getters</span>\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@return</span> the object containing the additional info provided by the user. */</span>\n  <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getInfo</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> additionalInfo;\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@return</span> the key value of the element */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> key;\n  }\n\n  <span class=\"hljs-comment\">// Overridden object methods</span>\n\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Key: &quot;</span> + key + <span class=\"hljs-string\">&quot; - &quot;</span> + additionalInfo.toString();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> otherHeapElement\n   * <span class=\"hljs-doctag\">@return</span> true if the keys on both elements are identical and the additional info objects are\n   *     identical.\n   */</span>\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object o)</span> {\n    <span class=\"hljs-keyword\">if</span> (o != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">if</span> (!(o <span class=\"hljs-keyword\">instanceof</span> HeapElement)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-type\">HeapElement</span> <span class=\"hljs-variable\">otherHeapElement</span> <span class=\"hljs-operator\">=</span> (HeapElement) o;\n      <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">this</span>.key == otherHeapElement.key)\n          &amp;&amp; (<span class=\"hljs-built_in\">this</span>.additionalInfo.equals(otherHeapElement.additionalInfo));\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    result = <span class=\"hljs-number\">31</span> * result + (<span class=\"hljs-type\">int</span>) key;\n    result = <span class=\"hljs-number\">31</span> * result + (additionalInfo != <span class=\"hljs-literal\">null</span> ? additionalInfo.hashCode() : <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">return</span> result;\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Nicolas Renard",
      "email": "nicolas.renard.76@outlook.fr",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
