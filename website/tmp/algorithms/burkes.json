{
  "slug": "burkes",
  "name": "Burkes",
  "categories": ["digitalimageprocessing", "dithering"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "digital_image_processing/dithering/burkes.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/digital_image_processing/dithering/burkes.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nImplementation Burke&#x27;s algorithm (dithering)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">from</span> cv2 <span class=\"hljs-keyword\">import</span> destroyAllWindows, imread, imshow, waitKey\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Burkes</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Burke&#x27;s algorithm is using for converting grayscale image to black and white version\n    Source: Source: https://en.wikipedia.org/wiki/Dither\n\n    Note:\n        * Best results are given with threshold= ~1/2 * max greyscale value.\n        * This implementation get RGB image and converts it to greyscale in runtime.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, input_img, threshold: <span class=\"hljs-built_in\">int</span></span>):\n        self.min_threshold = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-comment\"># max greyscale value for #FFFFFF</span>\n        self.max_threshold = <span class=\"hljs-built_in\">int</span>(self.get_greyscale(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>))\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.min_threshold &lt; threshold &lt; self.max_threshold:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;Factor value should be from 0 to <span class=\"hljs-subst\">{self.max_threshold}</span>&quot;</span>)\n\n        self.input_img = input_img\n        self.threshold = threshold\n        self.width, self.height = self.input_img.shape[<span class=\"hljs-number\">1</span>], self.input_img.shape[<span class=\"hljs-number\">0</span>]\n\n        <span class=\"hljs-comment\"># error table size (+4 columns and +1 row) greater than input image because of</span>\n        <span class=\"hljs-comment\"># lack of if statements</span>\n        self.error_table = [\n            [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.height + <span class=\"hljs-number\">4</span>)] <span class=\"hljs-keyword\">for</span> __ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.width + <span class=\"hljs-number\">1</span>)\n        ]\n        self.output_img = np.ones((self.width, self.height, <span class=\"hljs-number\">3</span>), np.uint8) * <span class=\"hljs-number\">255</span>\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_greyscale</span>(<span class=\"hljs-params\">cls, blue: <span class=\"hljs-built_in\">int</span>, green: <span class=\"hljs-built_in\">int</span>, red: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; Burkes.get_greyscale(3, 4, 5)\n        3.753\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0.114</span> * blue + <span class=\"hljs-number\">0.587</span> * green + <span class=\"hljs-number\">0.2126</span> * red\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">process</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.height):\n            <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.width):\n                greyscale = <span class=\"hljs-built_in\">int</span>(self.get_greyscale(*self.input_img[y][x]))\n                <span class=\"hljs-keyword\">if</span> self.threshold &gt; greyscale + self.error_table[y][x]:\n                    self.output_img[y][x] = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n                    current_error = greyscale + self.error_table[x][y]\n                <span class=\"hljs-keyword\">else</span>:\n                    self.output_img[y][x] = (<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>)\n                    current_error = greyscale + self.error_table[x][y] - <span class=\"hljs-number\">255</span>\n                <span class=\"hljs-string\">&quot;&quot;&quot;\n                Burkes error propagation (`*` is current pixel):\n\n                                 *          8/32        4/32\n                2/32    4/32    8/32    4/32    2/32\n                &quot;&quot;&quot;</span>\n                self.error_table[y][x + <span class=\"hljs-number\">1</span>] += <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">8</span> / <span class=\"hljs-number\">32</span> * current_error)\n                self.error_table[y][x + <span class=\"hljs-number\">2</span>] += <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">32</span> * current_error)\n                self.error_table[y + <span class=\"hljs-number\">1</span>][x] += <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">8</span> / <span class=\"hljs-number\">32</span> * current_error)\n                self.error_table[y + <span class=\"hljs-number\">1</span>][x + <span class=\"hljs-number\">1</span>] += <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">32</span> * current_error)\n                self.error_table[y + <span class=\"hljs-number\">1</span>][x + <span class=\"hljs-number\">2</span>] += <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">32</span> * current_error)\n                self.error_table[y + <span class=\"hljs-number\">1</span>][x - <span class=\"hljs-number\">1</span>] += <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">4</span> / <span class=\"hljs-number\">32</span> * current_error)\n                self.error_table[y + <span class=\"hljs-number\">1</span>][x - <span class=\"hljs-number\">2</span>] += <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">32</span> * current_error)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-comment\"># create Burke&#x27;s instances with original images in greyscale</span>\n    burkes_instances = [\n        Burkes(imread(<span class=\"hljs-string\">&quot;image_data/lena.jpg&quot;</span>, <span class=\"hljs-number\">1</span>), threshold)\n        <span class=\"hljs-keyword\">for</span> threshold <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">126</span>, <span class=\"hljs-number\">130</span>, <span class=\"hljs-number\">140</span>)\n    ]\n\n    <span class=\"hljs-keyword\">for</span> burkes <span class=\"hljs-keyword\">in</span> burkes_instances:\n        burkes.process()\n\n    <span class=\"hljs-keyword\">for</span> burkes <span class=\"hljs-keyword\">in</span> burkes_instances:\n        imshow(\n            <span class=\"hljs-string\">f&quot;Original image with dithering threshold: <span class=\"hljs-subst\">{burkes.threshold}</span>&quot;</span>,\n            burkes.output_img,\n        )\n\n    waitKey(<span class=\"hljs-number\">0</span>)\n    destroyAllWindows()\n"
    }
  },
  "contributors": [
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
