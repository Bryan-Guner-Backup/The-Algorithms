{
  "slug": "double-factorial",
  "name": "Double Factorial",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/double_factorial.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/double_factorial.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Compute [double\n * factorial](https://en.wikipedia.org/wiki/Double_factorial): \\f$n!!\\f$\n *\n * Double factorial of a non-negative integer `n`, is defined as the product of\n * all the integers from 1 to n that have the same parity (odd or even) as n.\n * &lt;br/&gt;It is also called as semifactorial of a number and is denoted by\n * \\f$n!!\\f$\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Compute double factorial using iterative method\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">double_factorial_iterative</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> res = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = n;; i -= <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || i == <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">return</span> res;\n        res *= i;\n    }\n    <span class=\"hljs-keyword\">return</span> res;\n}\n\n<span class=\"hljs-comment\">/** Compute double factorial using resursive method.\n * &lt;br/&gt;Recursion can be costly for large numbers.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">double_factorial_recursive</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> n * <span class=\"hljs-built_in\">double_factorial_recursive</span>(n - <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">/** Wrapper to run tests using both recursive and iterative implementations.\n * The checks are only valid in debug builds due to the use of `assert()`\n * statements.\n * \\param [in] n number to check double factorial for\n * \\param [in] expected expected result\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n, <span class=\"hljs-type\">uint64_t</span> expected)</span> </span>{\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">double_factorial_iterative</span>(n) == expected);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">double_factorial_recursive</span>(n) == expected);\n}\n\n<span class=\"hljs-comment\">/**\n * Test implementations\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1:\\t n=5\\t...&quot;</span>;\n    <span class=\"hljs-built_in\">test</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">15</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2:\\t n=15\\t...&quot;</span>;\n    <span class=\"hljs-built_in\">test</span>(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">2027025</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3:\\t n=0\\t...&quot;</span>;\n    <span class=\"hljs-built_in\">test</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">tests</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
