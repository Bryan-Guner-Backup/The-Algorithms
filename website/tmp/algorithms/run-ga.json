{
  "slug": "run-ga",
  "name": "Run GA",
  "categories": ["geneticalgorithm", "minimizationofpolynomialfunction"],
  "body": {},
  "implementations": {
    "matlab-octave": {
      "dir": "algorithms/Genetic-Algorithm/Minimization of polynomial function/Run_GA.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/Genetic-Algorithm/Minimization of polynomial function/Run_GA.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">out</span> = <span class=\"hljs-title\">RunGA</span><span class=\"hljs-params\">(problem, params)</span></span>\n\n    <span class=\"hljs-comment\">% Problem</span>\n    CostFunction = problem.CostFunction;\n    nVar = problem.nVar;\n    \n    <span class=\"hljs-comment\">% Params</span>\n    MaxIt = params.MaxIt;\n    nPop = params.nPop;\n    <span class=\"hljs-built_in\">beta</span> = params.<span class=\"hljs-built_in\">beta</span>;\n    pC = params.pC;\n    nC = <span class=\"hljs-built_in\">round</span>(pC*nPop/<span class=\"hljs-number\">2</span>)*<span class=\"hljs-number\">2</span>;\n    mu = params.mu;\n    \n    <span class=\"hljs-comment\">% Template for Empty Individuals</span>\n    empty_individual.Position = [];\n    empty_individual.Cost = [];\n    \n    <span class=\"hljs-comment\">% Best Solution Ever Found</span>\n    bestsol.Cost = <span class=\"hljs-built_in\">inf</span>;\n    \n    <span class=\"hljs-comment\">% Initialization</span>\n    pop = <span class=\"hljs-built_in\">repmat</span>(empty_individual, nPop, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span>:nPop\n        \n        <span class=\"hljs-comment\">% Generate Random Solution</span>\n        pop(<span class=\"hljs-built_in\">i</span>).Position = randi([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">1</span>, nVar);\n        \n        <span class=\"hljs-comment\">% Evaluate Solution</span>\n        pop(<span class=\"hljs-built_in\">i</span>).Cost = CostFunction(pop(<span class=\"hljs-built_in\">i</span>).Position);\n        \n        <span class=\"hljs-comment\">% Compare Solution to Best Solution Ever Found</span>\n        <span class=\"hljs-keyword\">if</span> pop(<span class=\"hljs-built_in\">i</span>).Cost &lt; bestsol.Cost\n            bestsol = pop(<span class=\"hljs-built_in\">i</span>);\n        <span class=\"hljs-keyword\">end</span>\n        \n    <span class=\"hljs-keyword\">end</span>\n    \n    <span class=\"hljs-comment\">% Best Cost of Iterations</span>\n    bestcost = <span class=\"hljs-built_in\">nan</span>(MaxIt, <span class=\"hljs-number\">1</span>);\n    \n    <span class=\"hljs-comment\">% Main Loop</span>\n    <span class=\"hljs-keyword\">for</span> it = <span class=\"hljs-number\">1</span>:MaxIt\n        \n        <span class=\"hljs-comment\">% Selection Probabilities</span>\n        c = [pop.Cost];\n        avgc = <span class=\"hljs-built_in\">mean</span>(c);\n        <span class=\"hljs-keyword\">if</span> avgc ~= <span class=\"hljs-number\">0</span>\n            c = c/avgc;\n        <span class=\"hljs-keyword\">end</span>\n        probs = <span class=\"hljs-built_in\">exp</span>(-<span class=\"hljs-built_in\">beta</span>*c);\n        \n        <span class=\"hljs-comment\">% Initialize Offsprings Population</span>\n        popc = <span class=\"hljs-built_in\">repmat</span>(empty_individual, nC/<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);\n        \n        <span class=\"hljs-comment\">% Crossover</span>\n        <span class=\"hljs-keyword\">for</span> k = <span class=\"hljs-number\">1</span>:nC/<span class=\"hljs-number\">2</span>\n            \n            <span class=\"hljs-comment\">% Select Parents</span>\n            p1 = pop(RouletteWheelSelection(probs));\n            p2 = pop(RouletteWheelSelection(probs));\n            \n            <span class=\"hljs-comment\">% Perform Crossover</span>\n            [popc(k, <span class=\"hljs-number\">1</span>).Position, popc(k, <span class=\"hljs-number\">2</span>).Position] = ...\n                Crossover(p1.Position, p2.Position);\n            \n        <span class=\"hljs-keyword\">end</span>\n        \n        <span class=\"hljs-comment\">% Convert popc to Single-Column Matrix</span>\n        popc = popc(:);\n        \n        <span class=\"hljs-comment\">% Mutation</span>\n        <span class=\"hljs-keyword\">for</span> l = <span class=\"hljs-number\">1</span>:nC\n            \n            <span class=\"hljs-comment\">% Perform Mutation</span>\n            popc(l).Position = Mutate(popc(l).Position, mu);\n            \n            <span class=\"hljs-comment\">% Evaluation</span>\n            popc(l).Cost = CostFunction(popc(l).Position);\n            \n            <span class=\"hljs-comment\">% Compare Solution to Best Solution Ever Found</span>\n            <span class=\"hljs-keyword\">if</span> popc(l).Cost &lt; bestsol.Cost\n                bestsol = popc(l);\n            <span class=\"hljs-keyword\">end</span>\n            \n        <span class=\"hljs-keyword\">end</span>\n        \n        <span class=\"hljs-comment\">% Merge and Sort Populations</span>\n        pop = SortPopulation([pop; popc]);\n        \n        <span class=\"hljs-comment\">% Remove Extra Individuals</span>\n        pop = pop(<span class=\"hljs-number\">1</span>:nPop);\n        \n        <span class=\"hljs-comment\">% Update Best Cost of Iteration</span>\n        bestcost(it) = bestsol.Cost;\n\n        <span class=\"hljs-comment\">% Display Itertion Information</span>\n        <span class=\"hljs-built_in\">disp</span>([<span class=\"hljs-string\">&#x27;Iteration &#x27;</span> num2str(it) <span class=\"hljs-string\">&#x27;: Best Cost = &#x27;</span> num2str(bestcost(it))]);\n        \n    <span class=\"hljs-keyword\">end</span>\n    \n    \n    <span class=\"hljs-comment\">% Results</span>\n    out.pop = pop;\n    out.bestsol = bestsol;\n    out.bestcost = bestcost;\n    \n<span class=\"hljs-keyword\">end</span>"
    }
  },
  "contributors": [
    {
      "name": "Abhishek Maletha",
      "email": "67141747+Abhishek-photon@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
