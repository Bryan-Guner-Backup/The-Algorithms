{
  "slug": "carray",
  "name": "Carray",
  "categories": ["datastructures", "array"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/array/carray.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/array/carray.c",
      "code": "<span class=\"hljs-comment\">/*\n * CArray.c\n *\n * Author: Leonardo Vencovsky\n * Created on 19/03/2018\n *\n * Modified by: Leonardo Vencovsky\n * Last modified: 19/03/2018\n *\n * Array Implementations in C\n *\n * Compiled in Visual Studio 2017\n *\n */</span>\n\n<span class=\"hljs-comment\">/*\nReturn Codes\n\n-1 - Array Erased\n0 - Success\n1 - Invalid Position\n2 - Position already initialized (use update function)\n3 - Position not initialized (use insert function)\n4 - Position already empty\n5 - Array is full\n\n*/</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;carray.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position1, <span class=\"hljs-type\">int</span> position2)</span>;\n\nCArray *<span class=\"hljs-title function_\">getCArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span>\n{\n    CArray *<span class=\"hljs-built_in\">array</span> = (CArray *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(CArray));\n    <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span> = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * size);\n    <span class=\"hljs-built_in\">array</span>-&gt;size = size;\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] = <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">insertValueCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position, <span class=\"hljs-type\">int</span> value)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt; <span class=\"hljs-built_in\">array</span>-&gt;size)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] == <span class=\"hljs-number\">0</span>)\n        {\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] = value;\n            <span class=\"hljs-keyword\">return</span> SUCCESS;\n        }\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">return</span> POSITION_INIT;\n    }\n    <span class=\"hljs-keyword\">return</span> INVALID_POSITION;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">removeValueCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt; <span class=\"hljs-built_in\">array</span>-&gt;size)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] != <span class=\"hljs-number\">0</span>)\n        {\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] = <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">return</span> POSITION_EMPTY;\n    }\n    <span class=\"hljs-keyword\">return</span> INVALID_POSITION;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pushValueCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> value)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span> ok = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] == <span class=\"hljs-number\">0</span>)\n        {\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] = value;\n            ok = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">if</span> (ok == <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> SUCCESS;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> ARRAY_FULL;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">updateValueCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position, <span class=\"hljs-type\">int</span> value)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt; <span class=\"hljs-built_in\">array</span>-&gt;size)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position] != <span class=\"hljs-number\">0</span>)\n        {\n        }\n\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">return</span> POSITION_NOT_INIT;\n    }\n    <span class=\"hljs-keyword\">return</span> INVALID_POSITION;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">eraseCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\n    {\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] = <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">switchValuesCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position1, <span class=\"hljs-type\">int</span> position2)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (position1 &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position1 &lt; <span class=\"hljs-built_in\">array</span>-&gt;size &amp;&amp; position2 &gt;= <span class=\"hljs-number\">0</span> &amp;&amp;\n        position2 &lt; <span class=\"hljs-built_in\">array</span>-&gt;size)\n    {\n        <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position1];\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position1] = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position2];\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position2] = temp;\n    }\n    <span class=\"hljs-keyword\">return</span> INVALID_POSITION;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">reverseCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size / <span class=\"hljs-number\">2</span>; i++)\n    {\n        swap(<span class=\"hljs-built_in\">array</span>, i, <span class=\"hljs-built_in\">array</span>-&gt;size - i - <span class=\"hljs-number\">1</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> SUCCESS;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">displayCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nC ARRAY\\n&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">blenderCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    srand(time(<span class=\"hljs-literal\">NULL</span>) * <span class=\"hljs-built_in\">array</span>-&gt;size);\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span> total = <span class=\"hljs-built_in\">array</span>-&gt;size * <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; total; i++)\n    {\n        swap(<span class=\"hljs-built_in\">array</span>, rand() % <span class=\"hljs-built_in\">array</span>-&gt;size, rand() % <span class=\"hljs-built_in\">array</span>-&gt;size);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\nCArray *<span class=\"hljs-title function_\">getCopyCArray</span><span class=\"hljs-params\">(CArray *arr)</span>\n{\n    CArray *<span class=\"hljs-built_in\">array</span> = (CArray *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(CArray));\n    <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span> = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * arr-&gt;size);\n    <span class=\"hljs-built_in\">array</span>-&gt;size = arr-&gt;size;\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; arr-&gt;size; i++)\n    {\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] = arr-&gt;<span class=\"hljs-built_in\">array</span>[i];\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> position1, <span class=\"hljs-type\">int</span> position2)</span>\n{\n    <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position1];\n    <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position1] = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position2];\n    <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[position2] = temp;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bubbleSortCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i, j;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size - <span class=\"hljs-number\">1</span>; i++)\n    {\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">array</span>-&gt;size - i - <span class=\"hljs-number\">1</span>; j++)\n        {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j] &gt; <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j + <span class=\"hljs-number\">1</span>])\n            {\n                swap(<span class=\"hljs-built_in\">array</span>, j, j + <span class=\"hljs-number\">1</span>);\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">selectionSortCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i, j, min;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size - <span class=\"hljs-number\">1</span>; i++)\n    {\n        min = i;\n        <span class=\"hljs-keyword\">for</span> (j = i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; j++)\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j] &lt; <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[min])\n                min = j;\n        swap(<span class=\"hljs-built_in\">array</span>, min, i);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">insertionSortCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i, j, num;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\n    {\n        num = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i];\n        j = i - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j] &gt; num)\n        {\n            <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j];\n            j--;\n        }\n        <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[j + <span class=\"hljs-number\">1</span>] = num;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">valueOcurranceCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> value)</span>\n{\n    <span class=\"hljs-type\">int</span> i, total = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] == value)\n            total++;\n    }\n    <span class=\"hljs-keyword\">return</span> total;\n}\n\nCArray *<span class=\"hljs-title function_\">valuePositionsCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">int</span> value)</span>\n{\n    <span class=\"hljs-type\">int</span> i, j = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> total = valueOcurranceCArray(<span class=\"hljs-built_in\">array</span>, value);\n    CArray *resultArray = getCArray(total);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] == value)\n        {\n            <span class=\"hljs-comment\">// Hopefully this won&#x27;t overflow</span>\n            resultArray-&gt;<span class=\"hljs-built_in\">array</span>[j] = i;\n            j++;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> resultArray;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMinCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span> min = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] &lt; min)\n        {\n            min = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i];\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> min;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMaxCArray</span><span class=\"hljs-params\">(CArray *<span class=\"hljs-built_in\">array</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span> max = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">array</span>-&gt;size; i++)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i] &gt; max)\n        {\n            max = <span class=\"hljs-built_in\">array</span>-&gt;<span class=\"hljs-built_in\">array</span>[i];\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> max;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ravi Shankar Reddy B",
      "email": "ravishankarbommana@gmail.com",
      "commits": 1
    },
    {
      "name": "A Silent Cat",
      "email": "silentcat@protonmail.com",
      "commits": 2
    },
    {
      "name": "Leonardo",
      "email": "lvenk26@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
