{
  "slug": "rgb-hsv-conversion",
  "name": "Rgb Hsv Conversion",
  "categories": ["conversions"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions/rgb_hsv_conversion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions/rgb_hsv_conversion.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThe RGB color model is an additive color model in which red, green, and blue light\nare added together in various ways to reproduce a broad array of colors. The name\nof the model comes from the initials of the three additive primary colors, red,\ngreen, and blue. Meanwhile, the HSV representation models how colors appear under\nlight. In it, colors are represented using three components: hue, saturation and\n(brightness-)value. This file provides functions for converting colors from one\nrepresentation to the other.\n\n(description adapted from https://en.wikipedia.org/wiki/RGB_color_model and\nhttps://en.wikipedia.org/wiki/HSL_and_HSV).\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">hsv_to_rgb</span>(<span class=\"hljs-params\">hue: <span class=\"hljs-built_in\">float</span>, saturation: <span class=\"hljs-built_in\">float</span>, value: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Conversion from the HSV-representation to the RGB-representation.\n    Expected RGB-values taken from\n    https://www.rapidtables.com/convert/color/hsv-to-rgb.html\n\n    &gt;&gt;&gt; hsv_to_rgb(0, 0, 0)\n    [0, 0, 0]\n    &gt;&gt;&gt; hsv_to_rgb(0, 0, 1)\n    [255, 255, 255]\n    &gt;&gt;&gt; hsv_to_rgb(0, 1, 1)\n    [255, 0, 0]\n    &gt;&gt;&gt; hsv_to_rgb(60, 1, 1)\n    [255, 255, 0]\n    &gt;&gt;&gt; hsv_to_rgb(120, 1, 1)\n    [0, 255, 0]\n    &gt;&gt;&gt; hsv_to_rgb(240, 1, 1)\n    [0, 0, 255]\n    &gt;&gt;&gt; hsv_to_rgb(300, 1, 1)\n    [255, 0, 255]\n    &gt;&gt;&gt; hsv_to_rgb(180, 0.5, 0.5)\n    [64, 128, 128]\n    &gt;&gt;&gt; hsv_to_rgb(234, 0.14, 0.88)\n    [193, 196, 224]\n    &gt;&gt;&gt; hsv_to_rgb(330, 0.75, 0.5)\n    [128, 32, 80]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> hue &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> hue &gt; <span class=\"hljs-number\">360</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;hue should be between 0 and 360&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> saturation &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> saturation &gt; <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;saturation should be between 0 and 1&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> value &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> value &gt; <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;value should be between 0 and 1&quot;</span>)\n\n    chroma = value * saturation\n    hue_section = hue / <span class=\"hljs-number\">60</span>\n    second_largest_component = chroma * (<span class=\"hljs-number\">1</span> - <span class=\"hljs-built_in\">abs</span>(hue_section % <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>))\n    match_value = value - chroma\n\n    <span class=\"hljs-keyword\">if</span> hue_section &gt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> hue_section &lt;= <span class=\"hljs-number\">1</span>:\n        red = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (chroma + match_value))\n        green = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (second_largest_component + match_value))\n        blue = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (match_value))\n    <span class=\"hljs-keyword\">elif</span> hue_section &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> hue_section &lt;= <span class=\"hljs-number\">2</span>:\n        red = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (second_largest_component + match_value))\n        green = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (chroma + match_value))\n        blue = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (match_value))\n    <span class=\"hljs-keyword\">elif</span> hue_section &gt; <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> hue_section &lt;= <span class=\"hljs-number\">3</span>:\n        red = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (match_value))\n        green = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (chroma + match_value))\n        blue = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (second_largest_component + match_value))\n    <span class=\"hljs-keyword\">elif</span> hue_section &gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">and</span> hue_section &lt;= <span class=\"hljs-number\">4</span>:\n        red = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (match_value))\n        green = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (second_largest_component + match_value))\n        blue = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (chroma + match_value))\n    <span class=\"hljs-keyword\">elif</span> hue_section &gt; <span class=\"hljs-number\">4</span> <span class=\"hljs-keyword\">and</span> hue_section &lt;= <span class=\"hljs-number\">5</span>:\n        red = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (second_largest_component + match_value))\n        green = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (match_value))\n        blue = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (chroma + match_value))\n    <span class=\"hljs-keyword\">else</span>:\n        red = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (chroma + match_value))\n        green = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (match_value))\n        blue = <span class=\"hljs-built_in\">round</span>(<span class=\"hljs-number\">255</span> * (second_largest_component + match_value))\n\n    <span class=\"hljs-keyword\">return</span> [red, green, blue]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rgb_to_hsv</span>(<span class=\"hljs-params\">red: <span class=\"hljs-built_in\">int</span>, green: <span class=\"hljs-built_in\">int</span>, blue: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Conversion from the RGB-representation to the HSV-representation.\n    The tested values are the reverse values from the hsv_to_rgb-doctests.\n    Function &quot;approximately_equal_hsv&quot; is needed because of small deviations due to\n    rounding for the RGB-values.\n\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(0, 0, 0), [0, 0, 0])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(255, 255, 255), [0, 0, 1])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(255, 0, 0), [0, 1, 1])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(255, 255, 0), [60, 1, 1])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(0, 255, 0), [120, 1, 1])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(0, 0, 255), [240, 1, 1])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(255, 0, 255), [300, 1, 1])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(64, 128, 128), [180, 0.5, 0.5])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(193, 196, 224), [234, 0.14, 0.88])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv(rgb_to_hsv(128, 32, 80), [330, 0.75, 0.5])\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> red &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> red &gt; <span class=\"hljs-number\">255</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;red should be between 0 and 255&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> green &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> green &gt; <span class=\"hljs-number\">255</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;green should be between 0 and 255&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> blue &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> blue &gt; <span class=\"hljs-number\">255</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;blue should be between 0 and 255&quot;</span>)\n\n    float_red = red / <span class=\"hljs-number\">255</span>\n    float_green = green / <span class=\"hljs-number\">255</span>\n    float_blue = blue / <span class=\"hljs-number\">255</span>\n    value = <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">max</span>(float_red, float_green), float_blue)\n    chroma = value - <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-built_in\">min</span>(float_red, float_green), float_blue)\n    saturation = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> value == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> chroma / value\n\n    <span class=\"hljs-keyword\">if</span> chroma == <span class=\"hljs-number\">0</span>:\n        hue = <span class=\"hljs-number\">0.0</span>\n    <span class=\"hljs-keyword\">elif</span> value == float_red:\n        hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">0</span> + (float_green - float_blue) / chroma)\n    <span class=\"hljs-keyword\">elif</span> value == float_green:\n        hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">2</span> + (float_blue - float_red) / chroma)\n    <span class=\"hljs-keyword\">else</span>:\n        hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">4</span> + (float_red - float_green) / chroma)\n\n    hue = (hue + <span class=\"hljs-number\">360</span>) % <span class=\"hljs-number\">360</span>\n\n    <span class=\"hljs-keyword\">return</span> [hue, saturation, value]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">approximately_equal_hsv</span>(<span class=\"hljs-params\">hsv_1: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>], hsv_2: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Utility-function to check that two hsv-colors are approximately equal\n\n    &gt;&gt;&gt; approximately_equal_hsv([0, 0, 0], [0, 0, 0])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv([180, 0.5, 0.3], [179.9999, 0.500001, 0.30001])\n    True\n    &gt;&gt;&gt; approximately_equal_hsv([0, 0, 0], [1, 0, 0])\n    False\n    &gt;&gt;&gt; approximately_equal_hsv([180, 0.5, 0.3], [179.9999, 0.6, 0.30001])\n    False\n    &quot;&quot;&quot;</span>\n    check_hue = <span class=\"hljs-built_in\">abs</span>(hsv_1[<span class=\"hljs-number\">0</span>] - hsv_2[<span class=\"hljs-number\">0</span>]) &lt; <span class=\"hljs-number\">0.2</span>\n    check_saturation = <span class=\"hljs-built_in\">abs</span>(hsv_1[<span class=\"hljs-number\">1</span>] - hsv_2[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">0.002</span>\n    check_value = <span class=\"hljs-built_in\">abs</span>(hsv_1[<span class=\"hljs-number\">2</span>] - hsv_2[<span class=\"hljs-number\">2</span>]) &lt; <span class=\"hljs-number\">0.002</span>\n\n    <span class=\"hljs-keyword\">return</span> check_hue <span class=\"hljs-keyword\">and</span> check_saturation <span class=\"hljs-keyword\">and</span> check_value\n"
    },
    "javascript": {
      "dir": "Conversions/RgbHsvConversion.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Conversions/RgbHsvConversion.js",
      "code": "<span class=\"hljs-comment\">/**\n * The RGB color model is an additive color model in which red, green, and blue light are added\n * together in various ways to reproduce a broad array of colors. The name of the model comes from\n * the initials of the three additive primary colors, red, green, and blue. Meanwhile, the HSV\n * representation models how colors appear under light. In it, colors are represented using three\n * components: hue, saturation and (brightness-)value. This file provides functions for converting\n * colors from one representation to the other. (description adapted from\n * https://en.wikipedia.org/wiki/RGB_color_model and https://en.wikipedia.org/wiki/HSL_and_HSV).\n */</span>\n\n<span class=\"hljs-comment\">/*\nDoctests\nExpected RGB-values taken from https://www.rapidtables.com/convert/color/hsv-to-rgb.html\nTest hsvToRgb-method\n\n&gt; hsvToRgb(0, 0, 0)\n[0, 0, 0]\n&gt; hsvToRgb(0, 0, 1)\n[255, 255, 255]\n&gt; hsvToRgb(0, 1, 1)\n[255, 0, 0]\n&gt; hsvToRgb(60, 1, 1)\n[255, 255, 0]\n&gt; hsvToRgb(120, 1, 1)\n[0, 255, 0]\n&gt; hsvToRgb(240, 1, 1)\n[0, 0, 255]\n&gt; hsvToRgb(300, 1, 1)\n[255, 0, 255]\n&gt; hsvToRgb(180, 0.5, 0.5)\n[64, 128, 128]\n&gt; hsvToRgb(234, 0.14, 0.88)\n[193, 196, 224]\n&gt; hsvToRgb(330, 0.75, 0.5)\n[128, 32, 80]\n\nTest rgbToHsv-method\nfunction &quot;approximatelyEqualHsv&quot; needed because of small deviations due to rounding for the RGB-values.\n&gt; approximatelyEqualHsv(rgbToHsv(0, 0, 0), [0, 0, 0])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(255, 255, 255), [0, 0, 1])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(255, 0, 0), [0, 1, 1])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(255, 255, 0), [60, 1, 1])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(0, 255, 0), [120, 1, 1])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(0, 0, 255), [240, 1, 1])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(255, 0, 255), [300, 1, 1])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(64, 128, 128), [180, 0.5, 0.5])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(193, 196, 224), [234, 0.14, 0.88])\ntrue\n&gt; approximatelyEqualHsv(rgbToHsv(128, 32, 80), [330, 0.75, 0.5])\ntrue\n\n*/</span>\n\n<span class=\"hljs-comment\">/**\n * Conversion from the HSV-representation to the RGB-representation.\n *\n * <span class=\"hljs-doctag\">@param</span> hue Hue of the color.\n * <span class=\"hljs-doctag\">@param</span> saturation Saturation of the color.\n * <span class=\"hljs-doctag\">@param</span> value Brightness-value of the color.\n * <span class=\"hljs-doctag\">@return</span> The tuple of RGB-components.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hsvToRgb</span> (hue, saturation, value) { <span class=\"hljs-comment\">// eslint-disable-line no-unused-vars</span>\n  <span class=\"hljs-keyword\">if</span> (hue &lt; <span class=\"hljs-number\">0</span> || hue &gt; <span class=\"hljs-number\">360</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;hue should be between 0 and 360&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">if</span> (saturation &lt; <span class=\"hljs-number\">0</span> || saturation &gt; <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;saturation should be between 0 and 1&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">if</span> (value &lt; <span class=\"hljs-number\">0</span> || value &gt; <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;value should be between 0 and 1&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">const</span> chroma = value * saturation\n  <span class=\"hljs-keyword\">const</span> hueSection = hue / <span class=\"hljs-number\">60</span>\n  <span class=\"hljs-keyword\">const</span> secondLargestComponent = chroma * (<span class=\"hljs-number\">1</span> - <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(hueSection % <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>))\n  <span class=\"hljs-keyword\">const</span> matchValue = value - chroma\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">getRgbBySection</span>(hueSection, chroma, matchValue, secondLargestComponent)\n}\n\n<span class=\"hljs-comment\">/**\n * Conversion from the RGB-representation to the HSV-representation.\n *\n * <span class=\"hljs-doctag\">@param</span> red Red-component of the color.\n * <span class=\"hljs-doctag\">@param</span> green Green-component of the color.\n * <span class=\"hljs-doctag\">@param</span> blue Blue-component of the color.\n * <span class=\"hljs-doctag\">@return</span> The tuple of HSV-components.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">rgbToHsv</span> (red, green, blue) { <span class=\"hljs-comment\">// eslint-disable-line no-unused-vars</span>\n  <span class=\"hljs-keyword\">if</span> (red &lt; <span class=\"hljs-number\">0</span> || red &gt; <span class=\"hljs-number\">255</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;red should be between 0 and 255&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">if</span> (green &lt; <span class=\"hljs-number\">0</span> || green &gt; <span class=\"hljs-number\">255</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;green should be between 0 and 255&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">if</span> (blue &lt; <span class=\"hljs-number\">0</span> || blue &gt; <span class=\"hljs-number\">255</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;blue should be between 0 and 255&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">const</span> dRed = red / <span class=\"hljs-number\">255</span>\n  <span class=\"hljs-keyword\">const</span> dGreen = green / <span class=\"hljs-number\">255</span>\n  <span class=\"hljs-keyword\">const</span> dBlue = blue / <span class=\"hljs-number\">255</span>\n  <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(dRed, dGreen), dBlue)\n  <span class=\"hljs-keyword\">const</span> chroma = value - <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(dRed, dGreen), dBlue)\n  <span class=\"hljs-keyword\">const</span> saturation = value === <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : chroma / value\n  <span class=\"hljs-keyword\">let</span> hue\n\n  <span class=\"hljs-keyword\">if</span> (chroma === <span class=\"hljs-number\">0</span>) {\n    hue = <span class=\"hljs-number\">0</span>\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value === dRed) {\n    hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">0</span> + (dGreen - dBlue) / chroma)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value === dGreen) {\n    hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">2</span> + (dBlue - dRed) / chroma)\n  } <span class=\"hljs-keyword\">else</span> {\n    hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">4</span> + (dRed - dGreen) / chroma)\n  }\n\n  hue = (hue + <span class=\"hljs-number\">360</span>) % <span class=\"hljs-number\">360</span>\n\n  <span class=\"hljs-keyword\">return</span> [hue, saturation, value]\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span> (hsv1, hsv2) { <span class=\"hljs-comment\">// eslint-disable-line no-unused-vars</span>\n  <span class=\"hljs-keyword\">const</span> bHue = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(hsv1[<span class=\"hljs-number\">0</span>] - hsv2[<span class=\"hljs-number\">0</span>]) &lt; <span class=\"hljs-number\">0.2</span>\n  <span class=\"hljs-keyword\">const</span> bSaturation = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(hsv1[<span class=\"hljs-number\">1</span>] - hsv2[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">0.002</span>\n  <span class=\"hljs-keyword\">const</span> bValue = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(hsv1[<span class=\"hljs-number\">2</span>] - hsv2[<span class=\"hljs-number\">2</span>]) &lt; <span class=\"hljs-number\">0.002</span>\n\n  <span class=\"hljs-keyword\">return</span> bHue &amp;&amp; bSaturation &amp;&amp; bValue\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getRgbBySection</span> (\n  hueSection, chroma, matchValue, secondLargestComponent) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">convertToInt</span> (input) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(<span class=\"hljs-number\">255</span> * input)\n  }\n\n  <span class=\"hljs-keyword\">let</span> red\n  <span class=\"hljs-keyword\">let</span> green\n  <span class=\"hljs-keyword\">let</span> blue\n\n  <span class=\"hljs-keyword\">if</span> (hueSection &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">1</span>) {\n    red = <span class=\"hljs-title function_\">convertToInt</span>(chroma + matchValue)\n    green = <span class=\"hljs-title function_\">convertToInt</span>(secondLargestComponent + matchValue)\n    blue = <span class=\"hljs-title function_\">convertToInt</span>(matchValue)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">1</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">2</span>) {\n    red = <span class=\"hljs-title function_\">convertToInt</span>(secondLargestComponent + matchValue)\n    green = <span class=\"hljs-title function_\">convertToInt</span>(chroma + matchValue)\n    blue = <span class=\"hljs-title function_\">convertToInt</span>(matchValue)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">2</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">3</span>) {\n    red = <span class=\"hljs-title function_\">convertToInt</span>(matchValue)\n    green = <span class=\"hljs-title function_\">convertToInt</span>(chroma + matchValue)\n    blue = <span class=\"hljs-title function_\">convertToInt</span>(secondLargestComponent + matchValue)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">3</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">4</span>) {\n    red = <span class=\"hljs-title function_\">convertToInt</span>(matchValue)\n    green = <span class=\"hljs-title function_\">convertToInt</span>(secondLargestComponent + matchValue)\n    blue = <span class=\"hljs-title function_\">convertToInt</span>(chroma + matchValue)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">4</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">5</span>) {\n    red = <span class=\"hljs-title function_\">convertToInt</span>(secondLargestComponent + matchValue)\n    green = <span class=\"hljs-title function_\">convertToInt</span>(matchValue)\n    blue = <span class=\"hljs-title function_\">convertToInt</span>(chroma + matchValue)\n  } <span class=\"hljs-keyword\">else</span> {\n    red = <span class=\"hljs-title function_\">convertToInt</span>(chroma + matchValue)\n    green = <span class=\"hljs-title function_\">convertToInt</span>(matchValue)\n    blue = <span class=\"hljs-title function_\">convertToInt</span>(secondLargestComponent + matchValue)\n  }\n\n  <span class=\"hljs-keyword\">return</span> [red, green, blue]\n}\n"
    },
    "java": {
      "dir": "Conversions/RgbHsvConversion.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Conversions/RgbHsvConversion.java",
      "code": "<span class=\"hljs-keyword\">package</span> Conversions;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-comment\">/**\n * The RGB color model is an additive color model in which red, green, and blue light are added\n * together in various ways to reproduce a broad array of colors. The name of the model comes from\n * the initials of the three additive primary colors, red, green, and blue. Meanwhile, the HSV\n * representation models how colors appear under light. In it, colors are represented using three\n * components: hue, saturation and (brightness-)value. This class provides methods for converting\n * colors from one representation to the other. (description adapted from\n * https://en.wikipedia.org/wiki/RGB_color_model and https://en.wikipedia.org/wiki/HSL_and_HSV).\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RgbHsvConversion</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// Expected RGB-values taken from https://www.rapidtables.com/convert/color/hsv-to-rgb.html</span>\n\n    <span class=\"hljs-comment\">// Test hsvToRgb-method</span>\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">240</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">180</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.5</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">128</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">234</span>, <span class=\"hljs-number\">0.14</span>, <span class=\"hljs-number\">0.88</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">193</span>, <span class=\"hljs-number\">196</span>, <span class=\"hljs-number\">224</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(hsvToRgb(<span class=\"hljs-number\">330</span>, <span class=\"hljs-number\">0.75</span>, <span class=\"hljs-number\">0.5</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">80</span>});\n\n    <span class=\"hljs-comment\">// Test rgbToHsv-method</span>\n    <span class=\"hljs-comment\">// approximate-assertions needed because of small deviations due to converting between</span>\n    <span class=\"hljs-comment\">// int-values and double-values.</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">240</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">128</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">180</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.5</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">193</span>, <span class=\"hljs-number\">196</span>, <span class=\"hljs-number\">224</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">234</span>, <span class=\"hljs-number\">0.14</span>, <span class=\"hljs-number\">0.88</span>});\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(rgbToHsv(<span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">32</span>, <span class=\"hljs-number\">80</span>)</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {<span class=\"hljs-number\">330</span>, <span class=\"hljs-number\">0.75</span>, <span class=\"hljs-number\">0.5</span>});\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Conversion from the HSV-representation to the RGB-representation.\n   *\n   * <span class=\"hljs-doctag\">@param</span> hue Hue of the color.\n   * <span class=\"hljs-doctag\">@param</span> saturation Saturation of the color.\n   * <span class=\"hljs-doctag\">@param</span> value Brightness-value of the color.\n   * <span class=\"hljs-doctag\">@return</span> The tuple of RGB-components.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] hsvToRgb(<span class=\"hljs-type\">double</span> hue, <span class=\"hljs-type\">double</span> saturation, <span class=\"hljs-type\">double</span> value) {\n    <span class=\"hljs-keyword\">if</span> (hue &lt; <span class=\"hljs-number\">0</span> || hue &gt; <span class=\"hljs-number\">360</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;hue should be between 0 and 360&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (saturation &lt; <span class=\"hljs-number\">0</span> || saturation &gt; <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;saturation should be between 0 and 1&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (value &lt; <span class=\"hljs-number\">0</span> || value &gt; <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;value should be between 0 and 1&quot;</span>);\n    }\n\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">chroma</span> <span class=\"hljs-operator\">=</span> value * saturation;\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">hueSection</span> <span class=\"hljs-operator\">=</span> hue / <span class=\"hljs-number\">60</span>;\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">secondLargestComponent</span> <span class=\"hljs-operator\">=</span> chroma * (<span class=\"hljs-number\">1</span> - Math.abs(hueSection % <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>));\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">matchValue</span> <span class=\"hljs-operator\">=</span> value - chroma;\n\n    <span class=\"hljs-keyword\">return</span> getRgbBySection(hueSection, chroma, matchValue, secondLargestComponent);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Conversion from the RGB-representation to the HSV-representation.\n   *\n   * <span class=\"hljs-doctag\">@param</span> red Red-component of the color.\n   * <span class=\"hljs-doctag\">@param</span> green Green-component of the color.\n   * <span class=\"hljs-doctag\">@param</span> blue Blue-component of the color.\n   * <span class=\"hljs-doctag\">@return</span> The tuple of HSV-components.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span>[] rgbToHsv(<span class=\"hljs-type\">int</span> red, <span class=\"hljs-type\">int</span> green, <span class=\"hljs-type\">int</span> blue) {\n    <span class=\"hljs-keyword\">if</span> (red &lt; <span class=\"hljs-number\">0</span> || red &gt; <span class=\"hljs-number\">255</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;red should be between 0 and 255&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (green &lt; <span class=\"hljs-number\">0</span> || green &gt; <span class=\"hljs-number\">255</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;green should be between 0 and 255&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (blue &lt; <span class=\"hljs-number\">0</span> || blue &gt; <span class=\"hljs-number\">255</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;blue should be between 0 and 255&quot;</span>);\n    }\n\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">dRed</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">double</span>) red / <span class=\"hljs-number\">255</span>;\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">dGreen</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">double</span>) green / <span class=\"hljs-number\">255</span>;\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">dBlue</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">double</span>) blue / <span class=\"hljs-number\">255</span>;\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> Math.max(Math.max(dRed, dGreen), dBlue);\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">chroma</span> <span class=\"hljs-operator\">=</span> value - Math.min(Math.min(dRed, dGreen), dBlue);\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">saturation</span> <span class=\"hljs-operator\">=</span> value == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : chroma / value;\n    <span class=\"hljs-type\">double</span> hue;\n\n    <span class=\"hljs-keyword\">if</span> (chroma == <span class=\"hljs-number\">0</span>) {\n      hue = <span class=\"hljs-number\">0</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value == dRed) {\n      hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">0</span> + (dGreen - dBlue) / chroma);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (value == dGreen) {\n      hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">2</span> + (dBlue - dRed) / chroma);\n    } <span class=\"hljs-keyword\">else</span> {\n      hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">4</span> + (dRed - dGreen) / chroma);\n    }\n\n    hue = (hue + <span class=\"hljs-number\">360</span>) % <span class=\"hljs-number\">360</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[] {hue, saturation, value};\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">approximatelyEqualHsv</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span>[] hsv1, <span class=\"hljs-type\">double</span>[] hsv2)</span> {\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">bHue</span> <span class=\"hljs-operator\">=</span> Math.abs(hsv1[<span class=\"hljs-number\">0</span>] - hsv2[<span class=\"hljs-number\">0</span>]) &lt; <span class=\"hljs-number\">0.2</span>;\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">bSaturation</span> <span class=\"hljs-operator\">=</span> Math.abs(hsv1[<span class=\"hljs-number\">1</span>] - hsv2[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">0.002</span>;\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">bValue</span> <span class=\"hljs-operator\">=</span> Math.abs(hsv1[<span class=\"hljs-number\">2</span>] - hsv2[<span class=\"hljs-number\">2</span>]) &lt; <span class=\"hljs-number\">0.002</span>;\n\n    <span class=\"hljs-keyword\">return</span> bHue &amp;&amp; bSaturation &amp;&amp; bValue;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] getRgbBySection(\n      <span class=\"hljs-type\">double</span> hueSection, <span class=\"hljs-type\">double</span> chroma, <span class=\"hljs-type\">double</span> matchValue, <span class=\"hljs-type\">double</span> secondLargestComponent) {\n    <span class=\"hljs-type\">int</span> red;\n    <span class=\"hljs-type\">int</span> green;\n    <span class=\"hljs-type\">int</span> blue;\n\n    <span class=\"hljs-keyword\">if</span> (hueSection &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">1</span>) {\n      red = convertToInt(chroma + matchValue);\n      green = convertToInt(secondLargestComponent + matchValue);\n      blue = convertToInt(matchValue);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">1</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">2</span>) {\n      red = convertToInt(secondLargestComponent + matchValue);\n      green = convertToInt(chroma + matchValue);\n      blue = convertToInt(matchValue);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">2</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">3</span>) {\n      red = convertToInt(matchValue);\n      green = convertToInt(chroma + matchValue);\n      blue = convertToInt(secondLargestComponent + matchValue);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">3</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">4</span>) {\n      red = convertToInt(matchValue);\n      green = convertToInt(secondLargestComponent + matchValue);\n      blue = convertToInt(chroma + matchValue);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">4</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">5</span>) {\n      red = convertToInt(secondLargestComponent + matchValue);\n      green = convertToInt(matchValue);\n      blue = convertToInt(chroma + matchValue);\n    } <span class=\"hljs-keyword\">else</span> {\n      red = convertToInt(chroma + matchValue);\n      green = convertToInt(matchValue);\n      blue = convertToInt(secondLargestComponent + matchValue);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {red, green, blue};\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">convertToInt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> input)</span> {\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">int</span>) Math.round(<span class=\"hljs-number\">255</span> * input);\n  }\n}\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Other/RGBHSVConversion.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Other/RGBHSVConversion.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The RGB color model is an additive color model in which red, green, and</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     blue light are added together in various ways to reproduce a broad array of</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     colors. The name of the model comes from the initials of the three additive</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     primary colors, red, green, and blue. Meanwhile, the HSV representation</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     models how colors appear under light. In it, colors are represented using</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     three components: hue, saturation and (brightness-)value. This class</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     provides methods for converting colors from one representation to the other.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (description adapted from https://en.wikipedia.org/wiki/RGB_color_model and</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     https://en.wikipedia.org/wiki/HSL_and_HSV).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RgbHsvConversion</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Conversion from the HSV-representation to the RGB-representation.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;hue&quot;&gt;</span>Hue of the color.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;saturation&quot;&gt;</span>Saturation of the color.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;value&quot;&gt;</span>Brightness-value of the color.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The tuple of RGB-components.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">byte</span> red, <span class=\"hljs-built_in\">byte</span> green, <span class=\"hljs-built_in\">byte</span> blue</span>) <span class=\"hljs-title\">HsvToRgb</span>(<span class=\"hljs-params\">\n            <span class=\"hljs-built_in\">double</span> hue,\n            <span class=\"hljs-built_in\">double</span> saturation,\n            <span class=\"hljs-built_in\">double</span> <span class=\"hljs-keyword\">value</span></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (hue &lt; <span class=\"hljs-number\">0</span> || hue &gt; <span class=\"hljs-number\">360</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(hue), <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(hue)}</span> should be between 0 and 360&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (saturation &lt; <span class=\"hljs-number\">0</span> || saturation &gt; <span class=\"hljs-number\">1</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\n                    <span class=\"hljs-keyword\">nameof</span>(saturation),\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(saturation)}</span> should be between 0 and 1&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">value</span> &lt; <span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">value</span> &gt; <span class=\"hljs-number\">1</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(<span class=\"hljs-keyword\">value</span>), <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(<span class=\"hljs-keyword\">value</span>)}</span> should be between 0 and 1&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> chroma = <span class=\"hljs-keyword\">value</span> * saturation;\n            <span class=\"hljs-keyword\">var</span> hueSection = hue / <span class=\"hljs-number\">60</span>;\n            <span class=\"hljs-keyword\">var</span> secondLargestComponent = chroma * (<span class=\"hljs-number\">1</span> - Math.Abs(hueSection % <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>));\n            <span class=\"hljs-keyword\">var</span> matchValue = <span class=\"hljs-keyword\">value</span> - chroma;\n\n            <span class=\"hljs-keyword\">return</span> GetRgbBySection(hueSection, chroma, matchValue, secondLargestComponent);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Conversion from the RGB-representation to the HSV-representation.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;red&quot;&gt;</span>Red-component of the color.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;green&quot;&gt;</span>Green-component of the color.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;blue&quot;&gt;</span>Blue-component of the color.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The tuple of HSV-components.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> hue, <span class=\"hljs-built_in\">double</span> saturation, <span class=\"hljs-built_in\">double</span> <span class=\"hljs-keyword\">value</span></span>) <span class=\"hljs-title\">RgbToHsv</span>(<span class=\"hljs-params\">\n            <span class=\"hljs-built_in\">byte</span> red,\n            <span class=\"hljs-built_in\">byte</span> green,\n            <span class=\"hljs-built_in\">byte</span> blue</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> dRed = (<span class=\"hljs-built_in\">double</span>)red / <span class=\"hljs-number\">255</span>;\n            <span class=\"hljs-keyword\">var</span> dGreen = (<span class=\"hljs-built_in\">double</span>)green / <span class=\"hljs-number\">255</span>;\n            <span class=\"hljs-keyword\">var</span> dBlue = (<span class=\"hljs-built_in\">double</span>)blue / <span class=\"hljs-number\">255</span>;\n            <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">value</span> = Math.Max(Math.Max(dRed, dGreen), dBlue);\n            <span class=\"hljs-keyword\">var</span> chroma = <span class=\"hljs-keyword\">value</span> - Math.Min(Math.Min(dRed, dGreen), dBlue);\n            <span class=\"hljs-keyword\">var</span> saturation = <span class=\"hljs-keyword\">value</span>.Equals(<span class=\"hljs-number\">0</span>) ? <span class=\"hljs-number\">0</span> : chroma / <span class=\"hljs-keyword\">value</span>;\n            <span class=\"hljs-built_in\">double</span> hue;\n\n            <span class=\"hljs-keyword\">if</span> (chroma.Equals(<span class=\"hljs-number\">0</span>))\n            {\n                hue = <span class=\"hljs-number\">0</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">value</span>.Equals(dRed))\n            {\n                hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">0</span> + (dGreen - dBlue) / chroma);\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">value</span>.Equals(dGreen))\n            {\n                hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">2</span> + (dBlue - dRed) / chroma);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                hue = <span class=\"hljs-number\">60</span> * (<span class=\"hljs-number\">4</span> + (dRed - dGreen) / chroma);\n            }\n\n            hue = (hue + <span class=\"hljs-number\">360</span>) % <span class=\"hljs-number\">360</span>;\n\n            <span class=\"hljs-keyword\">return</span> (hue, saturation, <span class=\"hljs-keyword\">value</span>);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">byte</span> red, <span class=\"hljs-built_in\">byte</span> green, <span class=\"hljs-built_in\">byte</span> blue</span>) <span class=\"hljs-title\">GetRgbBySection</span>(<span class=\"hljs-params\">\n            <span class=\"hljs-built_in\">double</span> hueSection,\n            <span class=\"hljs-built_in\">double</span> chroma,\n            <span class=\"hljs-built_in\">double</span> matchValue,\n            <span class=\"hljs-built_in\">double</span> secondLargestComponent</span>)</span>\n        {\n            <span class=\"hljs-built_in\">byte</span> red;\n            <span class=\"hljs-built_in\">byte</span> green;\n            <span class=\"hljs-built_in\">byte</span> blue;\n\n            <span class=\"hljs-keyword\">if</span> (hueSection &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">1</span>)\n            {\n                red = ConvertToByte(chroma + matchValue);\n                green = ConvertToByte(secondLargestComponent + matchValue);\n                blue = ConvertToByte(matchValue);\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">1</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">2</span>)\n            {\n                red = ConvertToByte(secondLargestComponent + matchValue);\n                green = ConvertToByte(chroma + matchValue);\n                blue = ConvertToByte(matchValue);\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">2</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">3</span>)\n            {\n                red = ConvertToByte(matchValue);\n                green = ConvertToByte(chroma + matchValue);\n                blue = ConvertToByte(secondLargestComponent + matchValue);\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">3</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">4</span>)\n            {\n                red = ConvertToByte(matchValue);\n                green = ConvertToByte(secondLargestComponent + matchValue);\n                blue = ConvertToByte(chroma + matchValue);\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hueSection &gt; <span class=\"hljs-number\">4</span> &amp;&amp; hueSection &lt;= <span class=\"hljs-number\">5</span>)\n            {\n                red = ConvertToByte(secondLargestComponent + matchValue);\n                green = ConvertToByte(matchValue);\n                blue = ConvertToByte(chroma + matchValue);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                red = ConvertToByte(chroma + matchValue);\n                green = ConvertToByte(matchValue);\n                blue = ConvertToByte(secondLargestComponent + matchValue);\n            }\n\n            <span class=\"hljs-keyword\">return</span> (red, green, blue);\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-title\">ConvertToByte</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> input</span>)</span> =&gt; (<span class=\"hljs-built_in\">byte</span>)Math.Round(<span class=\"hljs-number\">255</span> * input);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}
