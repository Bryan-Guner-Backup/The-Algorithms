{
  "slug": "evaluate-postfix-notations",
  "name": "Evaluate Postfix Notations",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/evaluate_postfix_notations.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/evaluate_postfix_notations.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>, <span class=\"hljs-type\">List</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nThe Reverse Polish Nation also known as Polish postfix notation\nor simply postfix notation.\nhttps://en.wikipedia.org/wiki/Reverse_Polish_notation\nClassic examples of simple stack implementations\nValid operators are +, -, *, /.\nEach operand may be an integer or another expression.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">evaluate_postfix</span>(<span class=\"hljs-params\">postfix_notation: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; evaluate_postfix([&quot;2&quot;, &quot;1&quot;, &quot;+&quot;, &quot;3&quot;, &quot;*&quot;])\n    9\n    &gt;&gt;&gt; evaluate_postfix([&quot;4&quot;, &quot;13&quot;, &quot;5&quot;, &quot;/&quot;, &quot;+&quot;])\n    6\n    &gt;&gt;&gt; evaluate_postfix([])\n    0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> postfix_notation:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    operations = {<span class=\"hljs-string\">&quot;+&quot;</span>, <span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>}\n    stack: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Any</span>] = []\n\n    <span class=\"hljs-keyword\">for</span> token <span class=\"hljs-keyword\">in</span> postfix_notation:\n        <span class=\"hljs-keyword\">if</span> token <span class=\"hljs-keyword\">in</span> operations:\n            b, a = stack.pop(), stack.pop()\n            <span class=\"hljs-keyword\">if</span> token == <span class=\"hljs-string\">&quot;+&quot;</span>:\n                stack.append(a + b)\n            <span class=\"hljs-keyword\">elif</span> token == <span class=\"hljs-string\">&quot;-&quot;</span>:\n                stack.append(a - b)\n            <span class=\"hljs-keyword\">elif</span> token == <span class=\"hljs-string\">&quot;*&quot;</span>:\n                stack.append(a * b)\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">if</span> a * b &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> a % b != <span class=\"hljs-number\">0</span>:\n                    stack.append(a // b + <span class=\"hljs-number\">1</span>)\n                <span class=\"hljs-keyword\">else</span>:\n                    stack.append(a // b)\n        <span class=\"hljs-keyword\">else</span>:\n            stack.append(<span class=\"hljs-built_in\">int</span>(token))\n\n    <span class=\"hljs-keyword\">return</span> stack.pop()\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 1
    },
    {
      "name": "Ahmed Haj Abdel Khaleq",
      "email": "31858489+AhmedHaj@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
