{
  "slug": "singly-link-list-deletion",
  "name": "Singly Link List Deletion",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/linked_list/singly_link_list_deletion.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/linked_list/singly_link_list_deletion.c",
      "code": "<span class=\"hljs-comment\">/*Includes structure for a node which can be use to make new nodes of the Linked\n  List. It is assumed that the data in nodes will be an integer, though function\n  can be modified according to the data type, easily. deleteNode deletes a node\n  when passed with a key of the node.\n*/</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> info;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">link</span>;</span>\n};\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">start</span> =</span> <span class=\"hljs-literal\">NULL</span>;\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createnode</span><span class=\"hljs-params\">()</span>  <span class=\"hljs-comment\">// function to create node</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">t</span>;</span>\n    t = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-keyword\">return</span> (t);\n}\n<span class=\"hljs-comment\">////////////////////////////////////////////////////////</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">()</span>  <span class=\"hljs-comment\">// function to insert at first location</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span>;</span>\n    p = createnode();\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nenter the number to insert&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;p-&gt;info);\n    p-&gt;link = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-literal\">NULL</span>)\n    {\n        start = p;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        p-&gt;link = start;\n        start = p;\n    }\n}\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////////</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">deletion</span><span class=\"hljs-params\">()</span>  <span class=\"hljs-comment\">// function to delete from first position</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">t</span>;</span>\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nlist is empty&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-keyword\">struct</span> node *p;\n        p = start;\n        start = start-&gt;link;\n        <span class=\"hljs-built_in\">free</span>(p);\n    }\n}\n<span class=\"hljs-comment\">///////////////////////////////////////////////////////</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">viewlist</span><span class=\"hljs-params\">()</span>  <span class=\"hljs-comment\">// function to display values</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span>;</span>\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nlist is empty&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        p = start;\n        <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, p-&gt;info);\n            p = p-&gt;link;\n        }\n    }\n}\n<span class=\"hljs-comment\">//////////////////////////////////////////////////////////////////////</span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> n;\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n1.add value at first location&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n2.delete value from first location&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n3.view value&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nenter your choice&quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n        <span class=\"hljs-keyword\">switch</span> (n)\n        {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            insert();\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            deletion();\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            viewlist();\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">default</span>:\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\ninvalid choice&quot;</span>);\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>);\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Suraj Patil",
      "email": "srpatil@uci.edu",
      "commits": 1
    },
    {
      "name": "Rupeshiya",
      "email": "31209617+Rupeshiya@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "“prakamya-mishra”",
      "email": "“prakamya0608@gmail.com”",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
