{
  "slug": "graph-list",
  "name": "Graph List",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/graph_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/graph_list.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n\n<span class=\"hljs-comment\"># Author: OMKAR PATHAK, Nwachukwu Chidiebere</span>\n\n<span class=\"hljs-comment\"># Use a Python dictionary to construct the graph.</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> pprint <span class=\"hljs-keyword\">import</span> pformat\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, TypeVar\n\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphAdjacencyList</span>(<span class=\"hljs-type\">Generic</span>[T]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Adjacency List type Graph Data Structure that accounts for directed and undirected\n    Graphs.  Initialize graph object indicating whether it&#x27;s directed or undirected.\n\n    Directed graph example:\n    &gt;&gt;&gt; d_graph = GraphAdjacencyList()\n    &gt;&gt;&gt; d_graph\n    {}\n    &gt;&gt;&gt; d_graph.add_edge(0, 1)\n    {0: [1], 1: []}\n    &gt;&gt;&gt; d_graph.add_edge(1, 2).add_edge(1, 4).add_edge(1, 5)\n    {0: [1], 1: [2, 4, 5], 2: [], 4: [], 5: []}\n    &gt;&gt;&gt; d_graph.add_edge(2, 0).add_edge(2, 6).add_edge(2, 7)\n    {0: [1], 1: [2, 4, 5], 2: [0, 6, 7], 4: [], 5: [], 6: [], 7: []}\n    &gt;&gt;&gt; print(d_graph)\n    {0: [1], 1: [2, 4, 5], 2: [0, 6, 7], 4: [], 5: [], 6: [], 7: []}\n    &gt;&gt;&gt; print(repr(d_graph))\n    {0: [1], 1: [2, 4, 5], 2: [0, 6, 7], 4: [], 5: [], 6: [], 7: []}\n\n    Undirected graph example:\n    &gt;&gt;&gt; u_graph = GraphAdjacencyList(directed=False)\n    &gt;&gt;&gt; u_graph.add_edge(0, 1)\n    {0: [1], 1: [0]}\n    &gt;&gt;&gt; u_graph.add_edge(1, 2).add_edge(1, 4).add_edge(1, 5)\n    {0: [1], 1: [0, 2, 4, 5], 2: [1], 4: [1], 5: [1]}\n    &gt;&gt;&gt; u_graph.add_edge(2, 0).add_edge(2, 6).add_edge(2, 7)\n    {0: [1, 2], 1: [0, 2, 4, 5], 2: [1, 0, 6, 7], 4: [1], 5: [1], 6: [2], 7: [2]}\n    &gt;&gt;&gt; u_graph.add_edge(4, 5)\n    {0: [1, 2],\n     1: [0, 2, 4, 5],\n     2: [1, 0, 6, 7],\n     4: [1, 5],\n     5: [1, 4],\n     6: [2],\n     7: [2]}\n    &gt;&gt;&gt; print(u_graph)\n    {0: [1, 2],\n     1: [0, 2, 4, 5],\n     2: [1, 0, 6, 7],\n     4: [1, 5],\n     5: [1, 4],\n     6: [2],\n     7: [2]}\n    &gt;&gt;&gt; print(repr(u_graph))\n    {0: [1, 2],\n     1: [0, 2, 4, 5],\n     2: [1, 0, 6, 7],\n     4: [1, 5],\n     5: [1, 4],\n     6: [2],\n     7: [2]}\n     &gt;&gt;&gt; char_graph = GraphAdjacencyList(directed=False)\n     &gt;&gt;&gt; char_graph.add_edge(&#x27;a&#x27;, &#x27;b&#x27;)\n     {&#x27;a&#x27;: [&#x27;b&#x27;], &#x27;b&#x27;: [&#x27;a&#x27;]}\n     &gt;&gt;&gt; char_graph.add_edge(&#x27;b&#x27;, &#x27;c&#x27;).add_edge(&#x27;b&#x27;, &#x27;e&#x27;).add_edge(&#x27;b&#x27;, &#x27;f&#x27;)\n     {&#x27;a&#x27;: [&#x27;b&#x27;], &#x27;b&#x27;: [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;f&#x27;], &#x27;c&#x27;: [&#x27;b&#x27;], &#x27;e&#x27;: [&#x27;b&#x27;], &#x27;f&#x27;: [&#x27;b&#x27;]}\n     &gt;&gt;&gt; print(char_graph)\n     {&#x27;a&#x27;: [&#x27;b&#x27;], &#x27;b&#x27;: [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;f&#x27;], &#x27;c&#x27;: [&#x27;b&#x27;], &#x27;e&#x27;: [&#x27;b&#x27;], &#x27;f&#x27;: [&#x27;b&#x27;]}\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, directed: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">True</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Parameters:\n        directed: (bool) Indicates if graph is directed or undirected. Default is True.\n        &quot;&quot;&quot;</span>\n\n        self.adj_list: <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-built_in\">list</span>[T]] = {}  <span class=\"hljs-comment\"># dictionary of lists</span>\n        self.directed = directed\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_edge</span>(<span class=\"hljs-params\">\n        self, source_vertex: T, destination_vertex: T\n    </span>) -&gt; GraphAdjacencyList[T]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Connects vertices together. Creates and Edge from source vertex to destination\n        vertex.\n        Vertices will be created if not found in graph\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.directed:  <span class=\"hljs-comment\"># For undirected graphs</span>\n            <span class=\"hljs-comment\"># if both source vertex and destination vertex are both present in the</span>\n            <span class=\"hljs-comment\"># adjacency list, add destination vertex to source vertex list of adjacent</span>\n            <span class=\"hljs-comment\"># vertices and add source vertex to destination vertex list of adjacent</span>\n            <span class=\"hljs-comment\"># vertices.</span>\n            <span class=\"hljs-keyword\">if</span> source_vertex <span class=\"hljs-keyword\">in</span> self.adj_list <span class=\"hljs-keyword\">and</span> destination_vertex <span class=\"hljs-keyword\">in</span> self.adj_list:\n                self.adj_list[source_vertex].append(destination_vertex)\n                self.adj_list[destination_vertex].append(source_vertex)\n            <span class=\"hljs-comment\"># if only source vertex is present in adjacency list, add destination vertex</span>\n            <span class=\"hljs-comment\"># to source vertex list of adjacent vertices, then create a new vertex with</span>\n            <span class=\"hljs-comment\"># destination vertex as key and assign a list containing the source vertex</span>\n            <span class=\"hljs-comment\"># as it&#x27;s first adjacent vertex.</span>\n            <span class=\"hljs-keyword\">elif</span> source_vertex <span class=\"hljs-keyword\">in</span> self.adj_list:\n                self.adj_list[source_vertex].append(destination_vertex)\n                self.adj_list[destination_vertex] = [source_vertex]\n            <span class=\"hljs-comment\"># if only destination vertex is present in adjacency list, add source vertex</span>\n            <span class=\"hljs-comment\"># to destination vertex list of adjacent vertices, then create a new vertex</span>\n            <span class=\"hljs-comment\"># with source vertex as key and assign a list containing the source vertex</span>\n            <span class=\"hljs-comment\"># as it&#x27;s first adjacent vertex.</span>\n            <span class=\"hljs-keyword\">elif</span> destination_vertex <span class=\"hljs-keyword\">in</span> self.adj_list:\n                self.adj_list[destination_vertex].append(source_vertex)\n                self.adj_list[source_vertex] = [destination_vertex]\n            <span class=\"hljs-comment\"># if both source vertex and destination vertex are not present in adjacency</span>\n            <span class=\"hljs-comment\"># list, create a new vertex with source vertex as key and assign a list</span>\n            <span class=\"hljs-comment\"># containing the destination vertex as it&#x27;s first adjacent vertex also</span>\n            <span class=\"hljs-comment\"># create a new vertex with destination vertex as key and assign a list</span>\n            <span class=\"hljs-comment\"># containing the source vertex as it&#x27;s first adjacent vertex.</span>\n            <span class=\"hljs-keyword\">else</span>:\n                self.adj_list[source_vertex] = [destination_vertex]\n                self.adj_list[destination_vertex] = [source_vertex]\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># For directed graphs</span>\n            <span class=\"hljs-comment\"># if both source vertex and destination vertex are present in adjacency</span>\n            <span class=\"hljs-comment\"># list, add destination vertex to source vertex list of adjacent vertices.</span>\n            <span class=\"hljs-keyword\">if</span> source_vertex <span class=\"hljs-keyword\">in</span> self.adj_list <span class=\"hljs-keyword\">and</span> destination_vertex <span class=\"hljs-keyword\">in</span> self.adj_list:\n                self.adj_list[source_vertex].append(destination_vertex)\n            <span class=\"hljs-comment\"># if only source vertex is present in adjacency list, add destination</span>\n            <span class=\"hljs-comment\"># vertex to source vertex list of adjacent vertices and create a new vertex</span>\n            <span class=\"hljs-comment\"># with destination vertex as key, which has no adjacent vertex</span>\n            <span class=\"hljs-keyword\">elif</span> source_vertex <span class=\"hljs-keyword\">in</span> self.adj_list:\n                self.adj_list[source_vertex].append(destination_vertex)\n                self.adj_list[destination_vertex] = []\n            <span class=\"hljs-comment\"># if only destination vertex is present in adjacency list, create a new</span>\n            <span class=\"hljs-comment\"># vertex with source vertex as key and assign a list containing destination</span>\n            <span class=\"hljs-comment\"># vertex as first adjacent vertex</span>\n            <span class=\"hljs-keyword\">elif</span> destination_vertex <span class=\"hljs-keyword\">in</span> self.adj_list:\n                self.adj_list[source_vertex] = [destination_vertex]\n            <span class=\"hljs-comment\"># if both source vertex and destination vertex are not present in adjacency</span>\n            <span class=\"hljs-comment\"># list, create a new vertex with source vertex as key and a list containing</span>\n            <span class=\"hljs-comment\"># destination vertex as it&#x27;s first adjacent vertex. Then create a new vertex</span>\n            <span class=\"hljs-comment\"># with destination vertex as key, which has no adjacent vertex</span>\n            <span class=\"hljs-keyword\">else</span>:\n                self.adj_list[source_vertex] = [destination_vertex]\n                self.adj_list[destination_vertex] = []\n\n        <span class=\"hljs-keyword\">return</span> self\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> pformat(self.adj_list)\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "Nwachukwu Chidiebere Godwin",
      "email": "chidieberen1998@gmail.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anirudh Ajith",
      "email": "anirudh.ajith@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Francisco Matias",
      "email": "franciscomatias@alu.ufc.br",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
