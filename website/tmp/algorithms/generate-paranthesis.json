{
  "slug": "generate-paranthesis",
  "name": "Generate Paranthesis",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "backtracking/generate_paranthesis.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/backtracking/generate_paranthesis.rb",
      "code": "<span class=\"hljs-comment\"># Given n pairs of parentheses, write a function to generate all combinations</span>\n<span class=\"hljs-comment\"># of well-formed parentheses.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 1:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: n = 3</span>\n<span class=\"hljs-comment\"># Output: [&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span>\n<span class=\"hljs-comment\"># Example 2:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: n = 1</span>\n<span class=\"hljs-comment\"># Output: [&quot;()&quot;]</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Constraints:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 1 &lt;= n &lt;= 8</span>\n\n<span class=\"hljs-comment\"># Approach:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Let&#x27;s only add &#x27;(&#x27; or &#x27;)&#x27; when we know it will remain a valid sequence.</span>\n<span class=\"hljs-comment\"># We can do this by keeping track of the number of opening and closing brackets</span>\n<span class=\"hljs-comment\"># we have placed so far.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># We can start an opening bracket if we still have one (of n) left to place.</span>\n<span class=\"hljs-comment\"># And we could start a closing bracket if it&#x27;d not exceed the number of opening</span>\n<span class=\"hljs-comment\"># brackets.</span>\n\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-comment\"># Time Complexity: O(4^n/sqrt(n)). Each valid sequence has at most n steps during the backtracking procedure.</span>\n<span class=\"hljs-comment\"># Space Complexity: O(4^n/sqrt(n)), as described above, and using O(n) space to store the sequence.</span>\n\n<span class=\"hljs-comment\"># Refer to the attached diagram for recursion,</span>\n<span class=\"hljs-comment\"># The numbers next to each node are the counts of left and right parantheses</span>\n\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer} n</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {String[]}</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">generate_parenthesis</span><span class=\"hljs-params\">(n)</span></span>\n  parenthesis = []\n  backtrack(parenthesis, <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, n)\n  parenthesis\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">backtrack</span><span class=\"hljs-params\">(parenthesis, curr, open, close, max)</span></span>\n  <span class=\"hljs-keyword\">if</span> curr.length == max * <span class=\"hljs-number\">2</span>\n    parenthesis.push(curr)\n    <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">if</span> open &lt; max\n    backtrack(parenthesis, curr + <span class=\"hljs-string\">&quot;(&quot;</span>, open + <span class=\"hljs-number\">1</span>, close, max)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">if</span> close &lt; open\n    backtrack(parenthesis, curr + <span class=\"hljs-string\">&quot;)&quot;</span>, open, close + <span class=\"hljs-number\">1</span>, max)\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nn = <span class=\"hljs-number\">3</span>\nprint(generate_parenthesis(n))\n<span class=\"hljs-comment\"># Output: [&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span>\n\n<span class=\"hljs-comment\"># *** Example: n = 3 *** Space after each DFS instance</span>\n<span class=\"hljs-comment\"># backtrack called with  0 0 []</span>\n<span class=\"hljs-comment\">#   backtrack called with ( 1 0 []</span>\n<span class=\"hljs-comment\">#     backtrack called with (( 2 0 []</span>\n<span class=\"hljs-comment\">#       backtrack called with ((( 3 0 []</span>\n<span class=\"hljs-comment\">#         backtrack called with ((() 3 1 []</span>\n<span class=\"hljs-comment\">#           backtrack called with ((()) 3 2 []</span>\n<span class=\"hljs-comment\">#             backtrack called with ((())) 3 3 []</span>\n<span class=\"hljs-comment\">#           backtrack return with ((()) 3 2 [&quot;((()))&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack return with ((() 3 1 [&quot;((()))&quot;]</span>\n<span class=\"hljs-comment\">#       backtrack return with ((( 3 0 [&quot;((()))&quot;]</span>\n<span class=\"hljs-comment\">#       backtrack called with (() 2 1 [&quot;((()))&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack called with (()( 3 1 [&quot;((()))&quot;]</span>\n<span class=\"hljs-comment\">#           backtrack called with (()() 3 2 [&quot;((()))&quot;]</span>\n<span class=\"hljs-comment\">#             backtrack called with (()()) 3 3 [&quot;((()))&quot;]</span>\n<span class=\"hljs-comment\">#           backtrack return with (()() 3 2 [&quot;((()))&quot;, &quot;(()())&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack return with (()( 3 1 [&quot;((()))&quot;, &quot;(()())&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack called with (()) 2 2 [&quot;((()))&quot;, &quot;(()())&quot;]</span>\n<span class=\"hljs-comment\">#           backtrack called with (())( 3 2 [&quot;((()))&quot;, &quot;(()())&quot;]</span>\n<span class=\"hljs-comment\">#             backtrack called with (())() 3 3 [&quot;((()))&quot;, &quot;(()())&quot;]</span>\n<span class=\"hljs-comment\">#           backtrack return with (())( 3 2 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack return with (()) 2 2 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#       backtrack return with (() 2 1 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#     backtrack return with (( 2 0 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#     backtrack called with () 1 1 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#       backtrack called with ()( 2 1 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack called with ()(( 3 1 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#           backtrack called with ()(() 3 2 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#             backtrack called with ()(()) 3 3 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;]</span>\n<span class=\"hljs-comment\">#           backtrack return with ()(() 3 2 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack return with ()(( 3 1 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack called with ()() 2 2 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;]</span>\n<span class=\"hljs-comment\">#           backtrack called with ()()( 3 2 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;]</span>\n<span class=\"hljs-comment\">#             backtrack called with ()()() 3 3 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;]</span>\n<span class=\"hljs-comment\">#           backtrack return with ()()( 3 2 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;]</span>\n<span class=\"hljs-comment\">#         backtrack return with ()() 2 2 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;]</span>\n<span class=\"hljs-comment\">#       backtrack return with ()( 2 1 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;]</span>\n<span class=\"hljs-comment\">#     backtrack return with () 1 1 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;]</span>\n<span class=\"hljs-comment\">#   backtrack return with ( 1 0 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;]</span>\n<span class=\"hljs-comment\"># backtrack return with  0 0 [&quot;((()))&quot;, &quot;(()())&quot;, &quot;(())()&quot;, &quot;()(())&quot;, &quot;()()()&quot;]</span>\n\nn = <span class=\"hljs-number\">1</span>\nprint(generate_parenthesis(n))\n<span class=\"hljs-comment\"># Output: [&quot;()&quot;]</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
