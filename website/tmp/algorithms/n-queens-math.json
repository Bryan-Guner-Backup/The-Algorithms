{
  "slug": "n-queens-math",
  "name": "N Queens Math",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking/n_queens_math.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking/n_queens_math.py",
      "code": "<span class=\"hljs-string\">r&quot;&quot;&quot;\nProblem:\n\nThe n queens problem is of placing N queens on a N * N chess board such that no queen\ncan attack any other queens placed on that chess board.  This means that one queen\ncannot have any other queen on its horizontal, vertical and diagonal lines.\n\nSolution:\n\nTo solve this problem we will use simple math. First we know the queen can move in all\nthe possible ways, we can simplify it in this: vertical, horizontal, diagonal left and\n diagonal right.\n\nWe can visualize it like this:\n\nleft diagonal = \\\nright diagonal = /\n\nOn a chessboard vertical movement could be the rows and horizontal movement could be\nthe columns.\n\nIn programming we can use an array, and in this array each index could be the rows and\neach value in the array could be the column. For example:\n\n    . Q . .     We have this chessboard with one queen in each column and each queen\n    . . . Q     can&#x27;t attack to each other.\n    Q . . .     The array for this example would look like this: [1, 3, 0, 2]\n    . . Q .\n\nSo if we use an array and we verify that each value in the array is different to each\nother we know that at least the queens can&#x27;t attack each other in horizontal and\nvertical.\n\nAt this point we have that halfway completed and we will treat the chessboard as a\nCartesian plane.  Hereinafter we are going to remember basic math, so in the school we\nlearned this formula:\n\n    Slope of a line:\n\n           y2 - y1\n     m = ----------\n          x2 - x1\n\nThis formula allow us to get the slope. For the angles 45º (right diagonal) and 135º\n(left diagonal) this formula gives us m = 1, and m = -1 respectively.\n\nSee::\nhttps://www.enotes.com/homework-help/write-equation-line-that-hits-origin-45-degree-1474860\n\nThen we have this another formula:\n\nSlope intercept:\n\ny = mx + b\n\nb is where the line crosses the Y axis (to get more information see:\nhttps://www.mathsisfun.com/y_intercept.html), if we change the formula to solve for b\nwe would have:\n\ny - mx = b\n\nAnd like we already have the m values for the angles 45º and 135º, this formula would\nlook like this:\n\n45º: y - (1)x = b\n45º: y - x = b\n\n135º: y - (-1)x = b\n135º: y + x = b\n\ny = row\nx = column\n\nApplying this two formulas we can check if a queen in some position is being attacked\nfor another one or vice versa.\n\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depth_first_search</span>(<span class=\"hljs-params\">\n    possible_board: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>],\n    diagonal_right_collisions: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>],\n    diagonal_left_collisions: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>],\n    boards: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]],\n    n: <span class=\"hljs-built_in\">int</span>,\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; boards = []\n    &gt;&gt;&gt; depth_first_search([], [], [], boards, 4)\n    &gt;&gt;&gt; for board in boards:\n    ...     print(board)\n    [&#x27;. Q . . &#x27;, &#x27;. . . Q &#x27;, &#x27;Q . . . &#x27;, &#x27;. . Q . &#x27;]\n    [&#x27;. . Q . &#x27;, &#x27;Q . . . &#x27;, &#x27;. . . Q &#x27;, &#x27;. Q . . &#x27;]\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># Get next row in the current board (possible_board) to fill it with a queen</span>\n    row = <span class=\"hljs-built_in\">len</span>(possible_board)\n\n    <span class=\"hljs-comment\"># If row is equal to the size of the board it means there are a queen in each row in</span>\n    <span class=\"hljs-comment\"># the current board (possible_board)</span>\n    <span class=\"hljs-keyword\">if</span> row == n:\n        <span class=\"hljs-comment\"># We convert the variable possible_board that looks like this: [1, 3, 0, 2] to</span>\n        <span class=\"hljs-comment\"># this: [&#x27;. Q . . &#x27;, &#x27;. . . Q &#x27;, &#x27;Q . . . &#x27;, &#x27;. . Q . &#x27;]</span>\n        boards.append([<span class=\"hljs-string\">&quot;. &quot;</span> * i + <span class=\"hljs-string\">&quot;Q &quot;</span> + <span class=\"hljs-string\">&quot;. &quot;</span> * (n - <span class=\"hljs-number\">1</span> - i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> possible_board])\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-comment\"># We iterate each column in the row to find all possible results in each row</span>\n    <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n\n        <span class=\"hljs-comment\"># We apply that we learned previously. First we check that in the current board</span>\n        <span class=\"hljs-comment\"># (possible_board) there are not other same value because if there is it means</span>\n        <span class=\"hljs-comment\"># that there are a collision in vertical. Then we apply the two formulas we</span>\n        <span class=\"hljs-comment\"># learned before:</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\"># 45º: y - x = b or 45: row - col = b</span>\n        <span class=\"hljs-comment\"># 135º: y + x = b or row + col = b.</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\"># And we verify if the results of this two formulas not exist in their variables</span>\n        <span class=\"hljs-comment\"># respectively.  (diagonal_right_collisions, diagonal_left_collisions)</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\"># If any or these are True it means there is a collision so we continue to the</span>\n        <span class=\"hljs-comment\"># next value in the for loop.</span>\n        <span class=\"hljs-keyword\">if</span> (\n            col <span class=\"hljs-keyword\">in</span> possible_board\n            <span class=\"hljs-keyword\">or</span> row - col <span class=\"hljs-keyword\">in</span> diagonal_right_collisions\n            <span class=\"hljs-keyword\">or</span> row + col <span class=\"hljs-keyword\">in</span> diagonal_left_collisions\n        ):\n            <span class=\"hljs-keyword\">continue</span>\n\n        <span class=\"hljs-comment\"># If it is False we call dfs function again and we update the inputs</span>\n        depth_first_search(\n            possible_board + [col],\n            diagonal_right_collisions + [row - col],\n            diagonal_left_collisions + [row + col],\n            boards,\n            n,\n        )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">n_queens_solution</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    boards: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]] = []\n    depth_first_search([], [], [], boards, n)\n\n    <span class=\"hljs-comment\"># Print all the boards</span>\n    <span class=\"hljs-keyword\">for</span> board <span class=\"hljs-keyword\">in</span> boards:\n        <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> board:\n            <span class=\"hljs-built_in\">print</span>(column)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">len</span>(boards), <span class=\"hljs-string\">&quot;solutions were found.&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    n_queens_solution(<span class=\"hljs-number\">4</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "David Aaron Banda Gutierrez",
      "email": "44423937+DavidBanda@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
