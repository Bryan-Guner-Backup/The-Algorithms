{
  "slug": "redblackbst",
  "name": "RedBlackBST",
  "categories": ["datastructures", "tree"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Trees/RedBlackBST.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Trees/RedBlackBST.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Trees;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\r\n\r\n<span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@author</span> jack870131 */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedBlackBST</span> {\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">R</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">B</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>, color = B;\r\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> nil, right = nil, p = nil;\r\n\r\n    Node(<span class=\"hljs-type\">int</span> key) {\r\n      <span class=\"hljs-built_in\">this</span>.key = key;\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">nil</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(-<span class=\"hljs-number\">1</span>);\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> nil;\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printTree</span><span class=\"hljs-params\">(Node node)</span> {\r\n    <span class=\"hljs-keyword\">if</span> (node == nil) {\r\n      <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    printTree(node.left);\r\n    System.out.print(\r\n        ((node.color == R) ? <span class=\"hljs-string\">&quot; R &quot;</span> : <span class=\"hljs-string\">&quot; B &quot;</span>) + <span class=\"hljs-string\">&quot;Key: &quot;</span> + node.key + <span class=\"hljs-string\">&quot; Parent: &quot;</span> + node.p.key + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    printTree(node.right);\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printTreepre</span><span class=\"hljs-params\">(Node node)</span> {\r\n    <span class=\"hljs-keyword\">if</span> (node == nil) {\r\n      <span class=\"hljs-keyword\">return</span>;\r\n    }\r\n    System.out.print(\r\n        ((node.color == R) ? <span class=\"hljs-string\">&quot; R &quot;</span> : <span class=\"hljs-string\">&quot; B &quot;</span>) + <span class=\"hljs-string\">&quot;Key: &quot;</span> + node.key + <span class=\"hljs-string\">&quot; Parent: &quot;</span> + node.p.key + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n    printTree(node.left);\r\n    printTree(node.right);\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">findNode</span><span class=\"hljs-params\">(Node findNode, Node node)</span> {\r\n    <span class=\"hljs-keyword\">if</span> (root == nil) {\r\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (findNode.key &lt; node.key) {\r\n      <span class=\"hljs-keyword\">if</span> (node.left != nil) {\r\n        <span class=\"hljs-keyword\">return</span> findNode(findNode, node.left);\r\n      }\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (findNode.key &gt; node.key) {\r\n      <span class=\"hljs-keyword\">if</span> (node.right != nil) {\r\n        <span class=\"hljs-keyword\">return</span> findNode(findNode, node.right);\r\n      }\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (findNode.key == node.key) {\r\n      <span class=\"hljs-keyword\">return</span> node;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Node node)</span> {\r\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> root;\r\n    <span class=\"hljs-keyword\">if</span> (root == nil) {\r\n      root = node;\r\n      node.color = B;\r\n      node.p = nil;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      node.color = R;\r\n      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n        <span class=\"hljs-keyword\">if</span> (node.key &lt; temp.key) {\r\n          <span class=\"hljs-keyword\">if</span> (temp.left == nil) {\r\n            temp.left = node;\r\n            node.p = temp;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n          } <span class=\"hljs-keyword\">else</span> {\r\n            temp = temp.left;\r\n          }\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.key &gt;= temp.key) {\r\n          <span class=\"hljs-keyword\">if</span> (temp.right == nil) {\r\n            temp.right = node;\r\n            node.p = temp;\r\n            <span class=\"hljs-keyword\">break</span>;\r\n          } <span class=\"hljs-keyword\">else</span> {\r\n            temp = temp.right;\r\n          }\r\n        }\r\n      }\r\n      fixTree(node);\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fixTree</span><span class=\"hljs-params\">(Node node)</span> {\r\n    <span class=\"hljs-keyword\">while</span> (node.p.color == R) {\r\n      <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> nil;\r\n      <span class=\"hljs-keyword\">if</span> (node.p == node.p.p.left) {\r\n        y = node.p.p.right;\r\n\r\n        <span class=\"hljs-keyword\">if</span> (y != nil &amp;&amp; y.color == R) {\r\n          node.p.color = B;\r\n          y.color = B;\r\n          node.p.p.color = R;\r\n          node = node.p.p;\r\n          <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (node == node.p.right) {\r\n          node = node.p;\r\n          rotateLeft(node);\r\n        }\r\n        node.p.color = B;\r\n        node.p.p.color = R;\r\n        rotateRight(node.p.p);\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        y = node.p.p.left;\r\n        <span class=\"hljs-keyword\">if</span> (y != nil &amp;&amp; y.color == R) {\r\n          node.p.color = B;\r\n          y.color = B;\r\n          node.p.p.color = R;\r\n          node = node.p.p;\r\n          <span class=\"hljs-keyword\">continue</span>;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (node == node.p.left) {\r\n          node = node.p;\r\n          rotateRight(node);\r\n        }\r\n        node.p.color = B;\r\n        node.p.p.color = R;\r\n        rotateLeft(node.p.p);\r\n      }\r\n    }\r\n    root.color = B;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rotateLeft</span><span class=\"hljs-params\">(Node node)</span> {\r\n    <span class=\"hljs-keyword\">if</span> (node.p != nil) {\r\n      <span class=\"hljs-keyword\">if</span> (node == node.p.left) {\r\n        node.p.left = node.right;\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        node.p.right = node.right;\r\n      }\r\n      node.right.p = node.p;\r\n      node.p = node.right;\r\n      <span class=\"hljs-keyword\">if</span> (node.right.left != nil) {\r\n        node.right.left.p = node;\r\n      }\r\n      node.right = node.right.left;\r\n      node.p.left = node;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> root.right;\r\n      root.right = right.left;\r\n      right.left.p = root;\r\n      root.p = right;\r\n      right.left = root;\r\n      right.p = nil;\r\n      root = right;\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rotateRight</span><span class=\"hljs-params\">(Node node)</span> {\r\n    <span class=\"hljs-keyword\">if</span> (node.p != nil) {\r\n      <span class=\"hljs-keyword\">if</span> (node == node.p.left) {\r\n        node.p.left = node.left;\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        node.p.right = node.left;\r\n      }\r\n\r\n      node.left.p = node.p;\r\n      node.p = node.left;\r\n      <span class=\"hljs-keyword\">if</span> (node.left.right != nil) {\r\n        node.left.right.p = node;\r\n      }\r\n      node.left = node.left.right;\r\n      node.p.right = node;\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> root.left;\r\n      root.left = root.left.right;\r\n      left.right.p = root;\r\n      root.p = left;\r\n      left.right = root;\r\n      left.p = nil;\r\n      root = left;\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">transplant</span><span class=\"hljs-params\">(Node target, Node with)</span> {\r\n    <span class=\"hljs-keyword\">if</span> (target.p == nil) {\r\n      root = with;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target == target.p.left) {\r\n      target.p.left = with;\r\n    } <span class=\"hljs-keyword\">else</span> target.p.right = with;\r\n    with.p = target.p;\r\n  }\r\n\r\n  Node <span class=\"hljs-title function_\">treeMinimum</span><span class=\"hljs-params\">(Node subTreeRoot)</span> {\r\n    <span class=\"hljs-keyword\">while</span> (subTreeRoot.left != nil) {\r\n      subTreeRoot = subTreeRoot.left;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> subTreeRoot;\r\n  }\r\n\r\n  <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(Node z)</span> {\r\n    <span class=\"hljs-keyword\">if</span> ((z = findNode(z, root)) == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    Node x;\r\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> z;\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">yorigcolor</span> <span class=\"hljs-operator\">=</span> y.color;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (z.left == nil) {\r\n      x = z.right;\r\n      transplant(z, z.right);\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (z.right == nil) {\r\n      x = z.left;\r\n      transplant(z, z.left);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      y = treeMinimum(z.right);\r\n      yorigcolor = y.color;\r\n      x = y.right;\r\n      <span class=\"hljs-keyword\">if</span> (y.p == z) x.p = y;\r\n      <span class=\"hljs-keyword\">else</span> {\r\n        transplant(y, y.right);\r\n        y.right = z.right;\r\n        y.right.p = y;\r\n      }\r\n      transplant(z, y);\r\n      y.left = z.left;\r\n      y.left.p = y;\r\n      y.color = z.color;\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (yorigcolor == B) deleteFixup(x);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteFixup</span><span class=\"hljs-params\">(Node x)</span> {\r\n    <span class=\"hljs-keyword\">while</span> (x != root &amp;&amp; x.color == B) {\r\n      <span class=\"hljs-keyword\">if</span> (x == x.p.left) {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">=</span> x.p.right;\r\n        <span class=\"hljs-keyword\">if</span> (w.color == R) {\r\n          w.color = B;\r\n          x.p.color = R;\r\n          rotateLeft(x.p);\r\n          w = x.p.right;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (w.left.color == B &amp;&amp; w.right.color == B) {\r\n          w.color = R;\r\n          x = x.p;\r\n          <span class=\"hljs-keyword\">continue</span>;\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (w.right.color == B) {\r\n          w.left.color = B;\r\n          w.color = R;\r\n          rotateRight(w);\r\n          w = x.p.right;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (w.right.color == R) {\r\n          w.color = x.p.color;\r\n          x.p.color = B;\r\n          w.right.color = B;\r\n          rotateLeft(x.p);\r\n          x = root;\r\n        }\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">=</span> x.p.left;\r\n        <span class=\"hljs-keyword\">if</span> (w.color == R) {\r\n          w.color = B;\r\n          x.p.color = R;\r\n          rotateRight(x.p);\r\n          w = x.p.left;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (w.right.color == B &amp;&amp; w.left.color == B) {\r\n          w.color = R;\r\n          x = x.p;\r\n          <span class=\"hljs-keyword\">continue</span>;\r\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (w.left.color == B) {\r\n          w.right.color = B;\r\n          w.color = R;\r\n          rotateLeft(w);\r\n          w = x.p.left;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (w.left.color == R) {\r\n          w.color = x.p.color;\r\n          x.p.color = B;\r\n          w.left.color = B;\r\n          rotateRight(x.p);\r\n          x = root;\r\n        }\r\n      }\r\n    }\r\n    x.color = B;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertDemo</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\r\n      System.out.println(<span class=\"hljs-string\">&quot;Add items&quot;</span>);\r\n\r\n      <span class=\"hljs-type\">int</span> item;\r\n      Node node;\r\n\r\n      item = scan.nextInt();\r\n      <span class=\"hljs-keyword\">while</span> (item != -<span class=\"hljs-number\">999</span>) {\r\n        node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(item);\r\n        insert(node);\r\n        item = scan.nextInt();\r\n      }\r\n      printTree(root);\r\n      System.out.println(<span class=\"hljs-string\">&quot;Pre order&quot;</span>);\r\n      printTreepre(root);\r\n      <span class=\"hljs-keyword\">break</span>;\r\n    }\r\n    scan.close();\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteDemo</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\r\n    System.out.println(<span class=\"hljs-string\">&quot;Delete items&quot;</span>);\r\n    <span class=\"hljs-type\">int</span> item;\r\n    Node node;\r\n    item = scan.nextInt();\r\n    node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(item);\r\n    System.out.print(<span class=\"hljs-string\">&quot;Deleting item &quot;</span> + item);\r\n    <span class=\"hljs-keyword\">if</span> (delete(node)) {\r\n      System.out.print(<span class=\"hljs-string\">&quot;: deleted!&quot;</span>);\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      System.out.print(<span class=\"hljs-string\">&quot;: does not exist!&quot;</span>);\r\n    }\r\n\r\n    System.out.println();\r\n    printTree(root);\r\n    System.out.println(<span class=\"hljs-string\">&quot;Pre order&quot;</span>);\r\n    printTreepre(root);\r\n    scan.close();\r\n  }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Jack",
      "email": "34185019+jack870131@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
