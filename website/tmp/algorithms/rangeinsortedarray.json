{
  "slug": "rangeinsortedarray",
  "name": "RangeInSortedArray",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Misc/RangeInSortedArray.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Misc/RangeInSortedArray.java",
      "code": "<span class=\"hljs-keyword\">package</span> Misc;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RangeInSortedArray</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// Testcases</span>\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(sortedRange(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>}, <span class=\"hljs-number\">3</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(sortedRange(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>}, <span class=\"hljs-number\">4</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(sortedRange(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}, <span class=\"hljs-number\">3</span>), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>});\n  }\n\n  <span class=\"hljs-comment\">// Get the 1st and last occurrence index of a number &#x27;key&#x27; in a non-decreasing array &#x27;nums&#x27;</span>\n  <span class=\"hljs-comment\">// Gives [-1, -1] in case element doesn&#x27;t exist in array</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] sortedRange(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> key) {\n    <span class=\"hljs-type\">int</span>[] range = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>};\n    alteredBinSearchIter(nums, key, <span class=\"hljs-number\">0</span>, nums.length - <span class=\"hljs-number\">1</span>, range, <span class=\"hljs-literal\">true</span>);\n    alteredBinSearchIter(nums, key, <span class=\"hljs-number\">0</span>, nums.length - <span class=\"hljs-number\">1</span>, range, <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-keyword\">return</span> range;\n  }\n\n  <span class=\"hljs-comment\">// Recursive altered binary search which searches for leftmost as well as rightmost occurrence of</span>\n  <span class=\"hljs-comment\">// &#x27;key&#x27;</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">alteredBinSearch</span><span class=\"hljs-params\">(\n      <span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right, <span class=\"hljs-type\">int</span>[] range, <span class=\"hljs-type\">boolean</span> goLeft)</span> {\n    <span class=\"hljs-keyword\">if</span> (left &gt; right) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> (left + right) / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; key) alteredBinSearch(nums, key, left, mid - <span class=\"hljs-number\">1</span>, range, goLeft);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (nums[mid] &lt; key) alteredBinSearch(nums, key, mid + <span class=\"hljs-number\">1</span>, right, range, goLeft);\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (goLeft) {\n        <span class=\"hljs-keyword\">if</span> (mid == <span class=\"hljs-number\">0</span> || nums[mid - <span class=\"hljs-number\">1</span>] != key) range[<span class=\"hljs-number\">0</span>] = mid;\n        <span class=\"hljs-keyword\">else</span> alteredBinSearch(nums, key, left, mid - <span class=\"hljs-number\">1</span>, range, goLeft);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (mid == nums.length - <span class=\"hljs-number\">1</span> || nums[mid + <span class=\"hljs-number\">1</span>] != key) range[<span class=\"hljs-number\">1</span>] = mid;\n        <span class=\"hljs-keyword\">else</span> alteredBinSearch(nums, key, mid + <span class=\"hljs-number\">1</span>, right, range, goLeft);\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">// Iterative altered binary search which searches for leftmost as well as rightmost occurrence of</span>\n  <span class=\"hljs-comment\">// &#x27;key&#x27;</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">alteredBinSearchIter</span><span class=\"hljs-params\">(\n      <span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right, <span class=\"hljs-type\">int</span>[] range, <span class=\"hljs-type\">boolean</span> goLeft)</span> {\n    <span class=\"hljs-keyword\">while</span> (left &lt;= right) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> (left + right) / <span class=\"hljs-number\">2</span>;\n      <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; key) right = mid - <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (nums[mid] &lt; key) left = mid + <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (goLeft) {\n          <span class=\"hljs-keyword\">if</span> (mid == <span class=\"hljs-number\">0</span> || nums[mid - <span class=\"hljs-number\">1</span>] != key) {\n            range[<span class=\"hljs-number\">0</span>] = mid;\n            <span class=\"hljs-keyword\">return</span>;\n          } <span class=\"hljs-type\">else</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> mid - <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">if</span> (mid == nums.length - <span class=\"hljs-number\">1</span> || nums[mid + <span class=\"hljs-number\">1</span>] != key) {\n            range[<span class=\"hljs-number\">1</span>] = mid;\n            <span class=\"hljs-keyword\">return</span>;\n          } <span class=\"hljs-type\">else</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> mid + <span class=\"hljs-number\">1</span>;\n        }\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCountLessThan</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-keyword\">return</span> getLessThan(nums, key, <span class=\"hljs-number\">0</span>, nums.length - <span class=\"hljs-number\">1</span>);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getLessThan</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] nums, <span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (left &lt;= right) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> (left + right) / <span class=\"hljs-number\">2</span>;\n      <span class=\"hljs-keyword\">if</span> (nums[mid] &gt; key) right = mid - <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (nums[mid] &lt;= key) {\n        count = mid + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Atleast mid+1 elements exist which are &lt;= key</span>\n        left = mid + <span class=\"hljs-number\">1</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n  }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
