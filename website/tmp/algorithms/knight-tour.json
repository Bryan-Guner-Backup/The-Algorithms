{
  "slug": "knight-tour",
  "name": "Knight Tour",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking/knight_tour.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking/knight_tour.py",
      "code": "<span class=\"hljs-comment\"># Knight Tour Intro: https://www.youtube.com/watch?v=ab_dY3dZFHM</span>\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>, <span class=\"hljs-type\">Tuple</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_valid_pos</span>(<span class=\"hljs-params\">position: <span class=\"hljs-type\">Tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>], n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Find all the valid positions a knight can move to from the current position.\n\n    &gt;&gt;&gt; get_valid_pos((1, 3), 4)\n    [(2, 1), (0, 1), (3, 2)]\n    &quot;&quot;&quot;</span>\n\n    y, x = position\n    positions = [\n        (y + <span class=\"hljs-number\">1</span>, x + <span class=\"hljs-number\">2</span>),\n        (y - <span class=\"hljs-number\">1</span>, x + <span class=\"hljs-number\">2</span>),\n        (y + <span class=\"hljs-number\">1</span>, x - <span class=\"hljs-number\">2</span>),\n        (y - <span class=\"hljs-number\">1</span>, x - <span class=\"hljs-number\">2</span>),\n        (y + <span class=\"hljs-number\">2</span>, x + <span class=\"hljs-number\">1</span>),\n        (y + <span class=\"hljs-number\">2</span>, x - <span class=\"hljs-number\">1</span>),\n        (y - <span class=\"hljs-number\">2</span>, x + <span class=\"hljs-number\">1</span>),\n        (y - <span class=\"hljs-number\">2</span>, x - <span class=\"hljs-number\">1</span>),\n    ]\n    permissible_positions = []\n\n    <span class=\"hljs-keyword\">for</span> position <span class=\"hljs-keyword\">in</span> positions:\n        y_test, x_test = position\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= y_test &lt; n <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= x_test &lt; n:\n            permissible_positions.append(position)\n\n    <span class=\"hljs-keyword\">return</span> permissible_positions\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_complete</span>(<span class=\"hljs-params\">board: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]]</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Check if the board (matrix) has been completely filled with non-zero values.\n\n    &gt;&gt;&gt; is_complete([[1]])\n    True\n\n    &gt;&gt;&gt; is_complete([[1, 2], [3, 0]])\n    False\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">any</span>(elem == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> board <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> row)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">open_knight_tour_helper</span>(<span class=\"hljs-params\">\n    board: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]], pos: <span class=\"hljs-type\">Tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>], curr: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Helper function to solve knight tour problem.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> is_complete(board):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> position <span class=\"hljs-keyword\">in</span> get_valid_pos(pos, <span class=\"hljs-built_in\">len</span>(board)):\n        y, x = position\n\n        <span class=\"hljs-keyword\">if</span> board[y][x] == <span class=\"hljs-number\">0</span>:\n            board[y][x] = curr + <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> open_knight_tour_helper(board, position, curr + <span class=\"hljs-number\">1</span>):\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n            board[y][x] = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">open_knight_tour</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Find the solution for the knight tour problem for a board of size n. Raises\n    ValueError if the tour cannot be performed for the given size.\n\n    &gt;&gt;&gt; open_knight_tour(1)\n    [[1]]\n\n    &gt;&gt;&gt; open_knight_tour(2)\n    Traceback (most recent call last):\n    ...\n    ValueError: Open Kight Tour cannot be performed on a board of size 2\n    &quot;&quot;&quot;</span>\n\n    board = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n            board[i][j] = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> open_knight_tour_helper(board, (i, j), <span class=\"hljs-number\">1</span>):\n                <span class=\"hljs-keyword\">return</span> board\n            board[i][j] = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;Open Kight Tour cannot be performed on a board of size <span class=\"hljs-subst\">{n}</span>&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Backtracking/KnightTour.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Backtracking/KnightTour.js",
      "code": "<span class=\"hljs-comment\">// Wikipedia: https://en.wikipedia.org/wiki/Knight%27s_tour</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OpenKnightTour</span> {\n  <span class=\"hljs-title function_\">constructor</span> (size) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(size).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(size).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>))\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> = size\n  }\n\n  getMoves ([i, j]) {\n    <span class=\"hljs-comment\">// helper function to get the valid moves of the knight from the current position</span>\n    <span class=\"hljs-keyword\">const</span> moves = [\n      [i + <span class=\"hljs-number\">2</span>, j - <span class=\"hljs-number\">1</span>],\n      [i + <span class=\"hljs-number\">2</span>, j + <span class=\"hljs-number\">1</span>],\n      [i - <span class=\"hljs-number\">2</span>, j - <span class=\"hljs-number\">1</span>],\n      [i - <span class=\"hljs-number\">2</span>, j + <span class=\"hljs-number\">1</span>],\n      [i + <span class=\"hljs-number\">1</span>, j - <span class=\"hljs-number\">2</span>],\n      [i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">2</span>],\n      [i - <span class=\"hljs-number\">1</span>, j - <span class=\"hljs-number\">2</span>],\n      [i - <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">2</span>]\n    ]\n\n    <span class=\"hljs-keyword\">return</span> moves.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[y, x]</span>) =&gt;</span> y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> &amp;&amp; x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>)\n  }\n\n  isComplete () {\n    <span class=\"hljs-comment\">// helper function to check if the board is complete</span>\n    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row.<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-number\">0</span>)).<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-literal\">true</span>)\n  }\n\n  solve () {\n    <span class=\"hljs-comment\">// function to find the solution for the given board</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>; j++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">solveHelper</span>([i, j], <span class=\"hljs-number\">0</span>)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n\n  solveHelper ([i, j], curr) {\n    <span class=\"hljs-comment\">// helper function for the main computation</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isComplete</span>()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [y, x] <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getMoves</span>([i, j])) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>[y][x] === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>[y][x] = curr + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">solveHelper</span>([y, x], curr + <span class=\"hljs-number\">1</span>)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n        <span class=\"hljs-comment\">// backtracking</span>\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>[y][x] = <span class=\"hljs-number\">0</span>\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n\n  printBoard () {\n    <span class=\"hljs-comment\">// utility function to display the board</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> row <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">board</span>) {\n      <span class=\"hljs-keyword\">let</span> string = <span class=\"hljs-string\">&#x27;&#x27;</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> elem <span class=\"hljs-keyword\">of</span> row) {\n        string += elem + <span class=\"hljs-string\">&#x27;\\t&#x27;</span>\n      }\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(string)\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span> () {\n  <span class=\"hljs-keyword\">const</span> board = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OpenKnightTour</span>(<span class=\"hljs-number\">5</span>)\n\n  board.<span class=\"hljs-title function_\">printBoard</span>()\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n\n  board.<span class=\"hljs-title function_\">solve</span>()\n\n  board.<span class=\"hljs-title function_\">printBoard</span>()\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    },
    "c-plus-plus": {
      "dir": "backtracking/knight_tour.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/knight_tour.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Knight&#x27;s tour](https://en.wikipedia.org/wiki/Knight%27s_tour) algorithm\n *\n * @details\n * A knight&#x27;s tour is a sequence of moves of a knight on a chessboard\n * such that the knight visits every square only once. If the knight\n * ends on a square that is one knight&#x27;s move from the beginning\n * square (so that it could tour the board again immediately, following\n * the same path, the tour is closed; otherwise, it is open.\n *\n * @author [Nikhil Arora](https://github.com/nikhilarora068)\n * @author [David Leal](https://github.com/Panquesito7)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n    <span class=\"hljs-comment\">/**\n     * A utility function to check if i,j are valid indexes for N*N chessboard\n     * @tparam V number of vertices in array\n     * @param x current index in rows\n     * @param y current index in columns\n     * @param sol matrix where numbers are saved\n     * @returns `true` if ....\n     * @returns `false` if ....\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">issafe</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-keyword\">const</span> std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt;&amp; sol)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> (x &lt; V &amp;&amp; x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; V &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; sol[x][y] == <span class=\"hljs-number\">-1</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Knight&#x27;s tour algorithm\n     * @tparam V number of vertices in array\n     * @param x current index in rows\n     * @param y current index in columns\n     * @param mov movement to be done\n     * @param sol matrix where numbers are saved\n     * @param xmov next move of knight (x coordinate)\n     * @param ymov next move of knight (y coordinate)\n     * @returns `true` if solution exists\n     * @returns `false` if solution does not exist\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> mov, std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; &amp;sol,\n        <span class=\"hljs-keyword\">const</span> std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; &amp;xmov, std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; &amp;ymov)</span> </span>{\n        <span class=\"hljs-type\">int</span> k, xnext, ynext;\n\n        <span class=\"hljs-keyword\">if</span> (mov == V * V) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">0</span>; k &lt; V; k++) {\n            xnext = x + xmov[k];\n            ynext = y + ymov[k];\n\n            <span class=\"hljs-keyword\">if</span> (backtracking::<span class=\"hljs-built_in\">issafe</span>&lt;V&gt;(xnext, ynext, sol)) {\n                sol[xnext][ynext] = mov;\n\n                <span class=\"hljs-keyword\">if</span> (backtracking::<span class=\"hljs-built_in\">solve</span>&lt;V&gt;(xnext, ynext, mov + <span class=\"hljs-number\">1</span>, sol, xmov, ymov) == <span class=\"hljs-literal\">true</span>) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                }\n                <span class=\"hljs-keyword\">else</span> {\n                    sol[xnext][ynext] = <span class=\"hljs-number\">-1</span>;\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n} <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">8</span>;\n    std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; sol = { <span class=\"hljs-number\">0</span> };\n\n    <span class=\"hljs-type\">int</span> i, j;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) { sol[i][j] = <span class=\"hljs-number\">-1</span>; }\n    }\n\n    std::array &lt;<span class=\"hljs-type\">int</span>, n&gt; xmov = { <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> };\n    std::array &lt;<span class=\"hljs-type\">int</span>, n&gt; ymov = { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-1</span> };\n\n    sol[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-type\">bool</span> flag = backtracking::<span class=\"hljs-built_in\">solve</span>&lt;n&gt;(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, sol, xmov, ymov);\n    <span class=\"hljs-keyword\">if</span> (flag == <span class=\"hljs-literal\">false</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Error: Solution does not exist\\n&quot;</span>;\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) { std::cout &lt;&lt; sol[i][j] &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>; }\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nikhil Arora",
      "email": "nikhilarora068@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
