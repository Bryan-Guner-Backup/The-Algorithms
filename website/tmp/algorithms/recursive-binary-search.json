{
  "slug": "recursive-binary-search",
  "name": "Recursive Binary Search",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Search/RecursiveBinarySearcher.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Search/RecursiveBinarySearcher.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Search</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     RecursiveBinarySearcher.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of searcher target.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RecursiveBinarySearcher</span>&lt;<span class=\"hljs-title\">T</span>&gt; <span class=\"hljs-keyword\">where</span> <span class=\"hljs-title\">T</span> : <span class=\"hljs-title\">IComparable</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds index of item in collection that equals to item searched for,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(log(n)),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - collection size.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;collection&quot;&gt;</span>Sorted collection to search in.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>Item to search for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentNullException&quot;&gt;</span>Thrown if input collection is null.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Index of item that equals to item searched for or -1 if none found.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindIndex</span>(<span class=\"hljs-params\">IList&lt;T&gt;? collection, T item</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (collection <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentNullException(<span class=\"hljs-keyword\">nameof</span>(collection));\n            }\n\n            <span class=\"hljs-keyword\">var</span> leftIndex = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> rightIndex = collection.Count - <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-keyword\">return</span> FindIndex(collection, item, leftIndex, rightIndex);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds index of item in array that equals to item searched for,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(log(n)),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array size.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;collection&quot;&gt;</span>Sorted array to search in.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>Item to search for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;leftIndex&quot;&gt;</span>Minimum search range.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;rightIndex&quot;&gt;</span>Maximum search range.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Index of item that equals to item searched for or -1 if none found.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindIndex</span>(<span class=\"hljs-params\">IList&lt;T&gt; collection, T item, <span class=\"hljs-built_in\">int</span> leftIndex, <span class=\"hljs-built_in\">int</span> rightIndex</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (leftIndex &gt; rightIndex)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> middleIndex = leftIndex + (rightIndex - leftIndex) / <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-keyword\">var</span> result = item.CompareTo(collection[middleIndex]);\n\n            <span class=\"hljs-keyword\">return</span> result <span class=\"hljs-keyword\">switch</span>\n            {\n                <span class=\"hljs-keyword\">var</span> r <span class=\"hljs-keyword\">when</span> r == <span class=\"hljs-number\">0</span> =&gt; middleIndex,\n                <span class=\"hljs-keyword\">var</span> r <span class=\"hljs-keyword\">when</span> r &gt; <span class=\"hljs-number\">0</span> =&gt; FindIndex(collection, item, middleIndex + <span class=\"hljs-number\">1</span>, rightIndex),\n                <span class=\"hljs-keyword\">var</span> r <span class=\"hljs-keyword\">when</span> r &lt; <span class=\"hljs-number\">0</span> =&gt; FindIndex(collection, item, leftIndex, middleIndex - <span class=\"hljs-number\">1</span>),\n                _ =&gt; <span class=\"hljs-number\">-1</span>,\n            };\n        }\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
