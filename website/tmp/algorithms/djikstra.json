{
  "slug": "djikstra",
  "name": "Djikstra",
  "categories": ["greedyapproach"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "greedy_approach/djikstra.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/greedy_approach/djikstra.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 20</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INF 999</span>\n\n<span class=\"hljs-type\">int</span> mat[MAX][MAX];\n<span class=\"hljs-type\">int</span> V;\n\n<span class=\"hljs-type\">int</span> dist[MAX];\n\n<span class=\"hljs-type\">int</span> q[MAX];\n<span class=\"hljs-type\">int</span> qp = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span> { q[qp++] = v; }\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">cf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *a, <span class=\"hljs-type\">void</span> *b)</span>\n{\n    <span class=\"hljs-type\">int</span> *x = (<span class=\"hljs-type\">int</span> *)a;\n    <span class=\"hljs-type\">int</span> *y = (<span class=\"hljs-type\">int</span> *)b;\n    <span class=\"hljs-keyword\">return</span> *y - *x;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dequeue</span><span class=\"hljs-params\">()</span>\n{\n    qsort(q, qp, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>), cf);\n    <span class=\"hljs-keyword\">return</span> q[--qp];\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">queue_has_something</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-keyword\">return</span> (qp &gt; <span class=\"hljs-number\">0</span>); }\n\n<span class=\"hljs-type\">int</span> visited[MAX];\n<span class=\"hljs-type\">int</span> vp = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dijkstra</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> s)</span>\n{\n    dist[s] = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i)\n    {\n        <span class=\"hljs-keyword\">if</span> (i != s)\n        {\n            dist[i] = INF;\n        }\n        enqueue(i);\n    }\n    <span class=\"hljs-keyword\">while</span> (queue_has_something())\n    {\n        <span class=\"hljs-type\">int</span> u = dequeue();\n        visited[vp++] = u;\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i)\n        {\n            <span class=\"hljs-keyword\">if</span> (mat[u][i])\n            {\n                <span class=\"hljs-keyword\">if</span> (dist[i] &gt; dist[u] + mat[u][i])\n                {\n                    dist[i] = dist[u] + mat[u][i];\n                }\n            }\n        }\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-keyword\">const</span> *argv[])</span>\n{\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot; %d&quot;</span>, &amp;V);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the adj matrix: &quot;</span>);\n    <span class=\"hljs-type\">int</span> i, j;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i)\n    {\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; V; ++j)\n        {\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot; %d&quot;</span>, &amp;mat[i][j]);\n        }\n    }\n\n    dijkstra(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nNode\\tDist\\n&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\t%d\\n&quot;</span>, i, dist[i]);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "sagnik-chatterjee",
      "email": "chatterjeesagnik88@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
