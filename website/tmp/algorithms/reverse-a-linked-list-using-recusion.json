{
  "slug": "reverse-a-linked-list-using-recusion",
  "name": "Reverse a Linked List Using Recusion",
  "categories": ["operationsondatastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "operations_on_datastructures/reverse_a_linked_list_using_recusion.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/operations_on_datastructures/reverse_a_linked_list_using_recusion.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\n    <span class=\"hljs-type\">int</span> val;\n    node *next;\n};\n\nnode *start;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\n    node *t = start;\n    <span class=\"hljs-keyword\">if</span> (start != <span class=\"hljs-literal\">NULL</span>) {\n        <span class=\"hljs-keyword\">while</span> (t-&gt;next != <span class=\"hljs-literal\">NULL</span>) {\n            t = t-&gt;next;\n        }\n        node *n = <span class=\"hljs-keyword\">new</span> node;\n        t-&gt;next = n;\n        n-&gt;val = x;\n        n-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        node *n = <span class=\"hljs-keyword\">new</span> node;\n        n-&gt;val = x;\n        n-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n        start = n;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">reverse</span><span class=\"hljs-params\">(node *p, node *q)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (q-&gt;next == <span class=\"hljs-literal\">NULL</span>) {\n        q-&gt;next = p;\n        p-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n        start = q;\n        <span class=\"hljs-keyword\">return</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">reverse</span>(q, q-&gt;next);\n        q-&gt;next = p;\n        p-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span> </span>{\n    node *t = start;\n    <span class=\"hljs-keyword\">while</span> (t != <span class=\"hljs-literal\">NULL</span>) {\n        cout &lt;&lt; t-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\n        t = t-&gt;next;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">6</span>);\n\n    <span class=\"hljs-built_in\">reverse</span>(start, start-&gt;next);\n\n    <span class=\"hljs-built_in\">show</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
