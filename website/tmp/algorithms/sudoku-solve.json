{
  "slug": "sudoku-solve",
  "name": "Sudoku Solve",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "backtracking/sudoku_solve.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/sudoku_solve.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief [Sudoku Solver](https://en.wikipedia.org/wiki/Sudoku) algorithm.\r\n *\r\n * @details\r\n * Sudoku (数独, sūdoku, digit-single) (/suːˈdoʊkuː/, /-ˈdɒk-/, /sə-/, originally called\r\n * Number Place) is a logic-based, combinatorial number-placement puzzle. \r\n * In classic sudoku, the objective is to fill a 9×9 grid with digits so that each column,\r\n * each row, and each of the nine 3×3 subgrids that compose the grid (also called &quot;boxes&quot;, &quot;blocks&quot;, or &quot;regions&quot;)\r\n * contain all of the digits from 1 to 9. The puzzle setter provides a\r\n * partially completed grid, which for a well-posed puzzle has a single solution.\r\n *\r\n * @author [DarthCoder3200](https://github.com/DarthCoder3200)\r\n * @author [David Leal](https://github.com/Panquesito7)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace backtracking\r\n * @brief Backtracking algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> backtracking {\r\n    <span class=\"hljs-comment\">/**\r\n     * Checks if it&#x27;s possible to place a number &#x27;no&#x27;\r\n     * @tparam V number of vertices in the array\r\n     * @param mat matrix where numbers are saved\r\n     * @param i current index in rows\r\n     * @param j current index in columns\r\n     * @param no number to be added in matrix\r\n     * @param n number of times loop will run\r\n     * @returns `true` if &#x27;mat&#x27; is different from &#x27;no&#x27;\r\n     * @returns `false` if &#x27;mat&#x27; equals to &#x27;no&#x27;\r\n     */</span>\r\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isPossible</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; &amp;mat, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span> no, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n        <span class=\"hljs-comment\">/// &#x27;no&#x27; shouldn&#x27;t be present in either row i or column j</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>; x &lt; n; x++) {\r\n            <span class=\"hljs-keyword\">if</span> (mat[x][j] == no || mat[i][x] == no) {\r\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/// &#x27;no&#x27; shouldn&#x27;t be present in the 3*3 subgrid</span>\r\n        <span class=\"hljs-type\">int</span> sx = (i / <span class=\"hljs-number\">3</span>) * <span class=\"hljs-number\">3</span>;\r\n        <span class=\"hljs-type\">int</span> sy = (j / <span class=\"hljs-number\">3</span>) * <span class=\"hljs-number\">3</span>;\r\n\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> x = sx; x &lt; sx + <span class=\"hljs-number\">3</span>; x++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> y = sy; y &lt; sy + <span class=\"hljs-number\">3</span>; y++) {\r\n                <span class=\"hljs-keyword\">if</span> (mat[x][y] == no) {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n    }\r\n    <span class=\"hljs-comment\">/**\r\n     * Utility function to print matrix\r\n     * @tparam V number of vertices in array\r\n     * @param mat matrix where numbers are saved\r\n     * @param starting_mat copy of mat, required by printMat for highlighting the differences\r\n     * @param n number of times loop will run\r\n     * @return void\r\n     */</span>\r\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printMat</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; &amp;mat, <span class=\"hljs-keyword\">const</span> std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; &amp;starting_mat, <span class=\"hljs-type\">int</span> n)</span> </span>{\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\r\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\r\n                <span class=\"hljs-keyword\">if</span> (starting_mat[i][j] != mat[i][j]) {\r\n                    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\033[93m&quot;</span> &lt;&lt; mat[i][j] &lt;&lt; <span class=\"hljs-string\">&quot;\\033[0m&quot;</span> &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n                } <span class=\"hljs-keyword\">else</span> {\r\n                    std::cout &lt;&lt; mat[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\r\n                }\r\n                <span class=\"hljs-keyword\">if</span> ((j + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span>) {\r\n                    std::cout &lt;&lt; <span class=\"hljs-string\">&#x27;\\t&#x27;</span>;\r\n                }\r\n            }\r\n            <span class=\"hljs-keyword\">if</span> ((i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span>) {\r\n                std::cout &lt;&lt; std::endl;\r\n            }\r\n            std::cout &lt;&lt; std::endl;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Sudoku algorithm\r\n     * @tparam V number of vertices in array\r\n     * @param mat matrix where numbers are saved\r\n     * @param starting_mat copy of mat, required by printMat for highlighting the differences\r\n     * @param i current index in rows\r\n     * @param j current index in columns\r\n     * @returns `true` if &#x27;no&#x27; was placed\r\n     * @returns `false` if &#x27;no&#x27; was not placed\r\n     */</span>\r\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\r\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">solveSudoku</span><span class=\"hljs-params\">(std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; &amp;mat, <span class=\"hljs-keyword\">const</span> std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; &amp;starting_mat, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> </span>{\r\n        <span class=\"hljs-comment\">/// Base Case</span>\r\n        <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">9</span>) {\r\n            <span class=\"hljs-comment\">/// Solved for 9 rows already</span>\r\n            backtracking::<span class=\"hljs-built_in\">printMat</span>&lt;V&gt;(mat, starting_mat, <span class=\"hljs-number\">9</span>);\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/// Crossed the last  Cell in the row</span>\r\n        <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">9</span>) {\r\n            <span class=\"hljs-keyword\">return</span> backtracking::<span class=\"hljs-built_in\">solveSudoku</span>&lt;V&gt;(mat, starting_mat, i + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\r\n        }\r\n\r\n        <span class=\"hljs-comment\">/// Blue Cell - Skip</span>\r\n        <span class=\"hljs-keyword\">if</span> (mat[i][j] != <span class=\"hljs-number\">0</span>) {\r\n            <span class=\"hljs-keyword\">return</span> backtracking::<span class=\"hljs-built_in\">solveSudoku</span>&lt;V&gt;(mat, starting_mat, i, j + <span class=\"hljs-number\">1</span>);\r\n        }\r\n        <span class=\"hljs-comment\">/// White Cell</span>\r\n        <span class=\"hljs-comment\">/// Try to place every possible no</span>\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> no = <span class=\"hljs-number\">1</span>; no &lt;= <span class=\"hljs-number\">9</span>; no++) {\r\n            <span class=\"hljs-keyword\">if</span> (backtracking::<span class=\"hljs-built_in\">isPossible</span>&lt;V&gt;(mat, i, j, no, <span class=\"hljs-number\">9</span>)) {\r\n                <span class=\"hljs-comment\">/// Place the &#x27;no&#x27; - assuming a solution will exist</span>\r\n                mat[i][j] = no;\r\n                <span class=\"hljs-type\">bool</span> solution_found = backtracking::<span class=\"hljs-built_in\">solveSudoku</span>&lt;V&gt;(mat, starting_mat, i, j + <span class=\"hljs-number\">1</span>);\r\n                <span class=\"hljs-keyword\">if</span> (solution_found) {\r\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\r\n                }\r\n                <span class=\"hljs-comment\">/// Couldn&#x27;t find a solution</span>\r\n                <span class=\"hljs-comment\">/// loop will place the next no.</span>\r\n            }\r\n        }\r\n        <span class=\"hljs-comment\">/// Solution couldn&#x27;t be found for any of the numbers provided</span>\r\n        mat[i][j] = <span class=\"hljs-number\">0</span>;\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\r\n    }\r\n} <span class=\"hljs-comment\">// namespace backtracking</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> V = <span class=\"hljs-number\">9</span>;\r\n    std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; mat = { \r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>},\r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>},\r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>},\r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>},\r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>},\r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>},\r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>},\r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>},\r\n        std::array &lt;<span class=\"hljs-type\">int</span>, V&gt; {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>}\r\n    };\r\n\r\n    backtracking::<span class=\"hljs-built_in\">printMat</span>&lt;V&gt;(mat, mat, <span class=\"hljs-number\">9</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Solution &quot;</span> &lt;&lt; std::endl;\r\n    std::array &lt;std::array &lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; starting_mat = mat;\r\n    backtracking::<span class=\"hljs-built_in\">solveSudoku</span>&lt;V&gt;(mat, starting_mat, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Saurav Uppoor",
      "email": "41644947+sauravUppoor@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "harjot3200",
      "email": "harjot3200@gmail.com",
      "commits": 1
    },
    {
      "name": "Francesco Urbani",
      "email": "francescourbanidue@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
