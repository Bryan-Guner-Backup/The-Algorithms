{
  "slug": "hexadecimaltobinary",
  "name": "HexaDecimalToBinary",
  "categories": ["conversions"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Conversions/HexaDecimalToBinary.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Conversions/HexaDecimalToBinary.java",
      "code": "<span class=\"hljs-keyword\">package</span> Conversions;\r\n\r\n<span class=\"hljs-comment\">// Hex [0-9],[A-F] -&gt; Binary [0,1]</span>\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HexaDecimalToBinary</span> {\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">LONG_BITS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">8</span>;\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">convert</span><span class=\"hljs-params\">(String numHex)</span> {\r\n    <span class=\"hljs-comment\">// String a HexaDecimal:</span>\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">conHex</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(numHex, <span class=\"hljs-number\">16</span>);\r\n    <span class=\"hljs-comment\">// Hex a Binary:</span>\r\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">binary</span> <span class=\"hljs-operator\">=</span> Integer.toBinaryString(conHex);\r\n    <span class=\"hljs-comment\">// Output:</span>\r\n    System.out.println(numHex + <span class=\"hljs-string\">&quot; = &quot;</span> + completeDigits(binary));\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">completeDigits</span><span class=\"hljs-params\">(String binNum)</span> {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> binNum.length(); i &lt; LONG_BITS; i++) {\r\n      binNum = <span class=\"hljs-string\">&quot;0&quot;</span> + binNum;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> binNum;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n\r\n    <span class=\"hljs-comment\">// Testing Numbers:</span>\r\n    String[] hexNums = {<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;A1&quot;</span>, <span class=\"hljs-string\">&quot;ef&quot;</span>, <span class=\"hljs-string\">&quot;BA&quot;</span>, <span class=\"hljs-string\">&quot;AA&quot;</span>, <span class=\"hljs-string\">&quot;BB&quot;</span>, <span class=\"hljs-string\">&quot;19&quot;</span>, <span class=\"hljs-string\">&quot;01&quot;</span>, <span class=\"hljs-string\">&quot;02&quot;</span>, <span class=\"hljs-string\">&quot;03&quot;</span>, <span class=\"hljs-string\">&quot;04&quot;</span>};\r\n    <span class=\"hljs-type\">HexaDecimalToBinary</span> <span class=\"hljs-variable\">objConvert</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HexaDecimalToBinary</span>();\r\n\r\n    <span class=\"hljs-keyword\">for</span> (String num : hexNums) {\r\n      objConvert.convert(num);\r\n    }\r\n  }\r\n}\r\n"
    },
    "dart": {
      "dir": "conversions/hexadecimal_to_binary.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions/hexadecimal_to_binary.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-comment\">// hexadecimal number to binary number conversion</span>\n<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">String</span>&gt; bin_table = {\n  <span class=\"hljs-string\">&quot;0&quot;</span>: <span class=\"hljs-string\">&quot;0&quot;</span>,\n  <span class=\"hljs-string\">&quot;1&quot;</span>: <span class=\"hljs-string\">&quot;1&quot;</span>,\n  <span class=\"hljs-string\">&quot;2&quot;</span>: <span class=\"hljs-string\">&quot;10&quot;</span>,\n  <span class=\"hljs-string\">&quot;3&quot;</span>: <span class=\"hljs-string\">&quot;11&quot;</span>,\n  <span class=\"hljs-string\">&quot;4&quot;</span>: <span class=\"hljs-string\">&quot;100&quot;</span>,\n  <span class=\"hljs-string\">&quot;5&quot;</span>: <span class=\"hljs-string\">&quot;101&quot;</span>,\n  <span class=\"hljs-string\">&quot;6&quot;</span>: <span class=\"hljs-string\">&quot;110&quot;</span>,\n  <span class=\"hljs-string\">&quot;7&quot;</span>: <span class=\"hljs-string\">&quot;111&quot;</span>,\n  <span class=\"hljs-string\">&quot;8&quot;</span>: <span class=\"hljs-string\">&quot;1000&quot;</span>,\n  <span class=\"hljs-string\">&quot;9&quot;</span>: <span class=\"hljs-string\">&quot;1001&quot;</span>,\n  <span class=\"hljs-string\">&quot;A&quot;</span>: <span class=\"hljs-string\">&quot;1010&quot;</span>,\n  <span class=\"hljs-string\">&quot;B&quot;</span>: <span class=\"hljs-string\">&quot;1011&quot;</span>,\n  <span class=\"hljs-string\">&quot;C&quot;</span>: <span class=\"hljs-string\">&quot;1100&quot;</span>,\n  <span class=\"hljs-string\">&quot;D&quot;</span>: <span class=\"hljs-string\">&quot;1101&quot;</span>,\n  <span class=\"hljs-string\">&quot;E&quot;</span>: <span class=\"hljs-string\">&quot;1110&quot;</span>,\n  <span class=\"hljs-string\">&quot;F&quot;</span>: <span class=\"hljs-string\">&quot;1111&quot;</span>,\n};\n\n<span class=\"hljs-comment\">// function to take hex value as string and return binary value as string</span>\n<span class=\"hljs-built_in\">String</span> hexadecimal_to_binary(<span class=\"hljs-built_in\">String</span> hex_value) {\n  <span class=\"hljs-comment\">// checking for unexpected values</span>\n  hex_value = hex_value.trim();\n  <span class=\"hljs-keyword\">if</span> (hex_value == <span class=\"hljs-keyword\">null</span> || hex_value == <span class=\"hljs-string\">&quot;&quot;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An empty value was passed to the function&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">// negative number check</span>\n  <span class=\"hljs-built_in\">bool</span> is_negative = hex_value[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>;\n  <span class=\"hljs-keyword\">if</span> (is_negative) hex_value = hex_value.substring(<span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-comment\">// coverting the  hex to binary values by diving into substring</span>\n  <span class=\"hljs-built_in\">String</span> bin_val = <span class=\"hljs-string\">&quot;&quot;</span>;\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (i != hex_value.length) {\n    <span class=\"hljs-built_in\">String</span> hex_cur = hex_value.substring(i, i + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">if</span> (!bin_table.containsKey(hex_cur)) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\n    }\n    bin_val += bin_table[hex_cur];\n    i++;\n  }\n\n  <span class=\"hljs-comment\">// returning the value</span>\n  <span class=\"hljs-keyword\">if</span> (is_negative) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + bin_val;\n  }\n  <span class=\"hljs-keyword\">return</span> bin_val;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;hexadecimal_to_binary -F&quot;</span>, () {\n    expect(hexadecimal_to_binary(<span class=\"hljs-string\">&quot;-F&quot;</span>), equals(<span class=\"hljs-string\">&quot;-1111&quot;</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;hexadecimal_to_binaryl 2B&quot;</span>, () {\n    expect(hexadecimal_to_binary(<span class=\"hljs-string\">&quot;2B&quot;</span>), equals(<span class=\"hljs-string\">&quot;101011&quot;</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;hexadecimal_to_binary rasies error when number is invalid&quot;</span>, () {\n    expect(() =&gt; hexadecimal_to_binary(<span class=\"hljs-string\">&quot;AIO&quot;</span>), throwsFormatException);\n  });\n\n  test(<span class=\"hljs-string\">&quot;hexadecimal_to_binary of empty string raises error&quot;</span>, () {\n    expect(() =&gt; hexadecimal_to_binary(<span class=\"hljs-string\">&quot;&quot;</span>), throwsFormatException);\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Arogon1",
      "email": "40372809+Arogon1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "SeonJae",
      "email": "dbtjswo4733@naver.com",
      "commits": 1
    },
    {
      "name": "Harvey GÃ³mez",
      "email": "hygomezm@est.utn.ac.cr",
      "commits": 1
    },
    {
      "name": "Vishnu",
      "email": "vishnupothan2@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
