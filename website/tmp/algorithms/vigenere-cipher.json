{
  "slug": "vigenere-cipher",
  "name": "Vigenere Cipher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/vigenere_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/vigenere_cipher.py",
      "code": "LETTERS = <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    message = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter message: &quot;</span>)\n    key = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter key [alphanumeric]: &quot;</span>)\n    mode = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Encrypt/Decrypt [e/d]: &quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> mode.lower().startswith(<span class=\"hljs-string\">&quot;e&quot;</span>):\n        mode = <span class=\"hljs-string\">&quot;encrypt&quot;</span>\n        translated = encryptMessage(key, message)\n    <span class=\"hljs-keyword\">elif</span> mode.lower().startswith(<span class=\"hljs-string\">&quot;d&quot;</span>):\n        mode = <span class=\"hljs-string\">&quot;decrypt&quot;</span>\n        translated = decryptMessage(key, message)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n%sed message:&quot;</span> % mode.title())\n    <span class=\"hljs-built_in\">print</span>(translated)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encryptMessage</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span>, message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; encryptMessage(&#x27;HDarji&#x27;, &#x27;This is Harshil Darji from Dharmaj.&#x27;)\n    &#x27;Akij ra Odrjqqs Gaisq muod Mphumrs.&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> translateMessage(key, message, <span class=\"hljs-string\">&quot;encrypt&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decryptMessage</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span>, message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; decryptMessage(&#x27;HDarji&#x27;, &#x27;Akij ra Odrjqqs Gaisq muod Mphumrs.&#x27;)\n    &#x27;This is Harshil Darji from Dharmaj.&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> translateMessage(key, message, <span class=\"hljs-string\">&quot;decrypt&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">translateMessage</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span>, message: <span class=\"hljs-built_in\">str</span>, mode: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    translated = []\n    keyIndex = <span class=\"hljs-number\">0</span>\n    key = key.upper()\n\n    <span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> message:\n        num = LETTERS.find(symbol.upper())\n        <span class=\"hljs-keyword\">if</span> num != -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-string\">&quot;encrypt&quot;</span>:\n                num += LETTERS.find(key[keyIndex])\n            <span class=\"hljs-keyword\">elif</span> mode == <span class=\"hljs-string\">&quot;decrypt&quot;</span>:\n                num -= LETTERS.find(key[keyIndex])\n\n            num %= <span class=\"hljs-built_in\">len</span>(LETTERS)\n\n            <span class=\"hljs-keyword\">if</span> symbol.isupper():\n                translated.append(LETTERS[num])\n            <span class=\"hljs-keyword\">elif</span> symbol.islower():\n                translated.append(LETTERS[num].lower())\n\n            keyIndex += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> keyIndex == <span class=\"hljs-built_in\">len</span>(key):\n                keyIndex = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">else</span>:\n            translated.append(symbol)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(translated)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Ciphers/VigenereCipher.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Ciphers/VigenereCipher.js",
      "code": "<span class=\"hljs-comment\">/**\n * Check if the Character is letter or not\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">str</span> - character to check\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">object</span>} An array with the character or null if isn&#x27;t a letter\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isLetter</span> (str) {\n  <span class=\"hljs-keyword\">return</span> str.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span> &amp;&amp; str.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/[a-zA-Z]/i</span>)\n}\n\n<span class=\"hljs-comment\">/**\n * Check if is Uppercase or Lowercase\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">character</span> - character to check\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">Boolean</span>} result of the checking\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isUpperCase</span> (character) {\n  <span class=\"hljs-keyword\">if</span> (character === character.<span class=\"hljs-title function_\">toUpperCase</span>()) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-keyword\">if</span> (character === character.<span class=\"hljs-title function_\">toLowerCase</span>()) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * Encrypt a Vigenere cipher\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">message</span> - string to be encrypted\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">key</span> - key for encrypt\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">result</span> - encrypted string\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">encrypt</span> (message, key) {\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; message.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> c = message.<span class=\"hljs-title function_\">charAt</span>(i)\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isLetter</span>(c)) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isUpperCase</span>(c)) {\n        result += <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>((c.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>) + key.<span class=\"hljs-title function_\">toUpperCase</span>().<span class=\"hljs-title function_\">charCodeAt</span>(j) - <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">65</span>) % <span class=\"hljs-number\">26</span> + <span class=\"hljs-number\">65</span>) <span class=\"hljs-comment\">// A: 65</span>\n      } <span class=\"hljs-keyword\">else</span> {\n        result += <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>((c.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>) + key.<span class=\"hljs-title function_\">toLowerCase</span>().<span class=\"hljs-title function_\">charCodeAt</span>(j) - <span class=\"hljs-number\">2</span> * <span class=\"hljs-number\">97</span>) % <span class=\"hljs-number\">26</span> + <span class=\"hljs-number\">97</span>) <span class=\"hljs-comment\">// a: 97</span>\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      result += c\n    }\n    j = ++j % key.<span class=\"hljs-property\">length</span>\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-comment\">/**\n * Decrypt a Vigenere cipher\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">message</span> - string to be decrypted\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">key</span> - key for decrypt\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">result</span> - decrypted string\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">decrypt</span> (message, key) {\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; message.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> c = message.<span class=\"hljs-title function_\">charAt</span>(i)\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isLetter</span>(c)) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isUpperCase</span>(c)) {\n        result += <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(<span class=\"hljs-number\">90</span> - (<span class=\"hljs-number\">25</span> - (c.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>) - key.<span class=\"hljs-title function_\">toUpperCase</span>().<span class=\"hljs-title function_\">charCodeAt</span>(j))) % <span class=\"hljs-number\">26</span>)\n      } <span class=\"hljs-keyword\">else</span> {\n        result += <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(<span class=\"hljs-number\">122</span> - (<span class=\"hljs-number\">25</span> - (c.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>) - key.<span class=\"hljs-title function_\">toLowerCase</span>().<span class=\"hljs-title function_\">charCodeAt</span>(j))) % <span class=\"hljs-number\">26</span>)\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      result += c\n    }\n    j = ++j % key.<span class=\"hljs-property\">length</span>\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">const</span> messageEncrypt = <span class=\"hljs-title function_\">encrypt</span>(<span class=\"hljs-string\">&#x27;Hello World!&#x27;</span>, <span class=\"hljs-string\">&#x27;code&#x27;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(messageEncrypt) <span class=\"hljs-comment\">// &quot;Jhpnr Yrvng!&quot;</span>\n\n<span class=\"hljs-keyword\">const</span> messageDecrypt = <span class=\"hljs-title function_\">decrypt</span>(<span class=\"hljs-string\">&#x27;Jsopq Zstzg!&#x27;</span>, <span class=\"hljs-string\">&#x27;code&#x27;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(messageDecrypt) <span class=\"hljs-comment\">// &quot;Hello World!&quot;</span>\n"
    },
    "c-plus-plus": {
      "dir": "ciphers/vigenere_cipher.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers/vigenere_cipher.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file vigenere_cipher.cpp\n * @brief Implementation of [Vigenère cipher](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher) algorithm.\n *\n * @details\n * The Vigenère cipher is a method of encrypting alphabetic text by using a series of interwoven vigenere \n * ciphers, based on the letters of a keyword. It employs a form of polyalphabetic substitution. \n *\n * ### Algorithm\n * The encryption can also be represented using modular arithmetic by first transforming \n * the letters into numbers, according to the scheme, A → 0, B → 1, ..., Z → 25.\n * Encryption of \\f$i^{th}\\f$ character in Message M by key K can be described mathematically as,\n * \n * \\f[ E_{K}(M_{i}) = (M_{i} + K_{i})\\;\\mbox{mod}\\; 26\\f]\n * \n * while decryption of \\f$i^{th}\\f$ character in Cipher C by key K can be described mathematically as,\n *\n * \\f[ D_{k}(C_{i}) = (C_{i} - K_{i} + 26)\\;\\mbox{mod}\\; 26\\f]\n * \n * Where \\f$K_{i}\\f$ denotes corresponding character in key. If \\f$|key| &lt; |text|\\f$ than\n * same key is repeated untill their lengths are equal.\n * \n * For Example,\n * If M = &quot;ATTACKATDAWN&quot; and K = &quot;LEMON&quot; than K becomes &quot;LEMONLEMONLE&quot;.\n * \n * \\note Rather than creating new key of equal length this program does this by using modular index for key\n * (i.e. \\f$(j + 1) \\;\\mbox{mod}\\; |\\mbox{key}|\\f$)\n * \n * \\note This program implements Vigenère cipher for only uppercase English alphabet characters (i.e. A-Z). \n * \n * @author [Deep Raval](https://github.com/imdeep2905)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n\n<span class=\"hljs-comment\">/** \\namespace ciphers\n * \\brief Algorithms for encryption and decryption\n */</span>\n<span class=\"hljs-keyword\">namespace</span> ciphers {\n    <span class=\"hljs-comment\">/** \\namespace vigenere\n     * \\brief Functions for [vigenère cipher](https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher) algorithm.\n     */</span>\n    <span class=\"hljs-keyword\">namespace</span> vigenere {   \n        <span class=\"hljs-keyword\">namespace</span> {\n            <span class=\"hljs-comment\">/**\n             * This function finds character for given value (i.e.A-Z)\n             * @param x value for which we want character \n             * @return  corresponding character for perticular value\n             */</span>        \n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-title\">get_char</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> x)</span> </span>{\n                <span class=\"hljs-comment\">// By adding 65 we are scaling 0-25 to 65-90. </span>\n                <span class=\"hljs-comment\">// Which are in fact ASCII values of A-Z. </span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">char</span>(x + <span class=\"hljs-number\">65</span>); \n            }\n            <span class=\"hljs-comment\">/**\n             * This function finds value for given character (i.e.0-25)\n             * @param c character for which we want value\n             * @return returns corresponding value for perticular character\n             */</span>  \n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">get_value</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> c)</span> </span>{\n                <span class=\"hljs-comment\">// A-Z have ASCII values in range 65-90.</span>\n                <span class=\"hljs-comment\">// Hence subtracting 65 will scale them to 0-25.</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(c - <span class=\"hljs-number\">65</span>);\n            }\n        } <span class=\"hljs-comment\">// Unnamed namespace</span>\n        <span class=\"hljs-comment\">/**\n         * Encrypt given text using vigenere cipher.\n         * @param text text to be encrypted\n         * @param key to be used for encryption\n         * @return new encrypted text\n         */</span>\n        <span class=\"hljs-function\">std::string <span class=\"hljs-title\">encrypt</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;text, <span class=\"hljs-keyword\">const</span> std::string &amp;key)</span> </span>{\n            std::string encrypted_text = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// Empty string to store encrypted text</span>\n            <span class=\"hljs-comment\">// Going through each character of text and key</span>\n            <span class=\"hljs-comment\">// Note that key is visited in circular way hence  j = (j + 1) % |key|</span>\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; text.<span class=\"hljs-built_in\">length</span>(); i++, j = (j + <span class=\"hljs-number\">1</span>) % key.<span class=\"hljs-built_in\">length</span>()) {\n                <span class=\"hljs-type\">int</span> place_value_text = <span class=\"hljs-built_in\">get_value</span>(text[i]); <span class=\"hljs-comment\">// Getting value of character in text</span>\n                <span class=\"hljs-type\">int</span> place_value_key = <span class=\"hljs-built_in\">get_value</span>(key[j]); <span class=\"hljs-comment\">// Getting value of character in key</span>\n                place_value_text = (place_value_text + place_value_key) % <span class=\"hljs-number\">26</span>; <span class=\"hljs-comment\">// Applying encryption</span>\n                <span class=\"hljs-type\">char</span> encrypted_char = <span class=\"hljs-built_in\">get_char</span>(place_value_text); <span class=\"hljs-comment\">// Getting new character from encrypted value</span>\n                encrypted_text += encrypted_char; <span class=\"hljs-comment\">// Appending encrypted character</span>\n            }\n            <span class=\"hljs-keyword\">return</span> encrypted_text; <span class=\"hljs-comment\">// Returning encrypted text</span>\n        }\n        <span class=\"hljs-comment\">/**\n         * Decrypt given text using vigenere cipher.\n         * @param text text to be decrypted\n         * @param key key to be used for decryption\n         * @return new decrypted text\n         */</span>        \n        <span class=\"hljs-function\">std::string <span class=\"hljs-title\">decrypt</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;text, <span class=\"hljs-keyword\">const</span> std::string &amp;key)</span> </span>{\n            <span class=\"hljs-comment\">// Going through each character of text and key</span>\n            <span class=\"hljs-comment\">// Note that key is visited in circular way hence  j = (j + 1) % |key|</span>\n            std::string decrypted_text = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// Empty string to store decrypted text</span>\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; text.<span class=\"hljs-built_in\">length</span>(); i++, j = (j + <span class=\"hljs-number\">1</span>) % key.<span class=\"hljs-built_in\">length</span>()) {\n                <span class=\"hljs-type\">int</span> place_value_text = <span class=\"hljs-built_in\">get_value</span>(text[i]); <span class=\"hljs-comment\">// Getting value of character in text</span>\n                <span class=\"hljs-type\">int</span> place_value_key = <span class=\"hljs-built_in\">get_value</span>(key[j]); <span class=\"hljs-comment\">// Getting value of character in key</span>\n                place_value_text = (place_value_text - place_value_key + <span class=\"hljs-number\">26</span>) % <span class=\"hljs-number\">26</span>; <span class=\"hljs-comment\">// Applying decryption</span>\n                <span class=\"hljs-type\">char</span> decrypted_char = <span class=\"hljs-built_in\">get_char</span>(place_value_text); <span class=\"hljs-comment\">// Getting new character from decrypted value</span>\n                decrypted_text += decrypted_char; <span class=\"hljs-comment\">// Appending decrypted character</span>\n            }        \n            <span class=\"hljs-keyword\">return</span> decrypted_text; <span class=\"hljs-comment\">// Returning decrypted text</span>\n        }\n    } <span class=\"hljs-comment\">// namespace vigenere</span>\n} <span class=\"hljs-comment\">// namespace ciphers</span>\n\n<span class=\"hljs-comment\">/**\n * Function to test above algorithm\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Test 1</span>\n    std::string text1 = <span class=\"hljs-string\">&quot;NIKOLATESLA&quot;</span>;\n    std::string encrypted1 = ciphers::vigenere::<span class=\"hljs-built_in\">encrypt</span>(text1, <span class=\"hljs-string\">&quot;TESLA&quot;</span>);\n    std::string decrypted1 = ciphers::vigenere::<span class=\"hljs-built_in\">decrypt</span>(encrypted1, <span class=\"hljs-string\">&quot;TESLA&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(text1 == decrypted1);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text : &quot;</span> &lt;&lt; text1;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Encrypted text (with key = TESLA) : &quot;</span> &lt;&lt; encrypted1;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Decrypted text : &quot;</span>&lt;&lt; decrypted1 &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test 2</span>\n    std::string text2 = <span class=\"hljs-string\">&quot;GOOGLEIT&quot;</span>;\n    std::string encrypted2 = ciphers::vigenere::<span class=\"hljs-built_in\">encrypt</span>(text2, <span class=\"hljs-string\">&quot;REALLY&quot;</span>);\n    std::string decrypted2 = ciphers::vigenere::<span class=\"hljs-built_in\">decrypt</span>(encrypted2, <span class=\"hljs-string\">&quot;REALLY&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(text2 == decrypted2);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text : &quot;</span> &lt;&lt; text2;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Encrypted text (with key = REALLY) : &quot;</span> &lt;&lt; encrypted2;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Decrypted text : &quot;</span>&lt;&lt; decrypted2 &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Driver Code */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Testing</span>\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "aexolate",
      "email": "nexlenter@gmail.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "Jonathan Gómez",
      "email": "jonicgp97@gmail.com",
      "commits": 1
    },
    {
      "name": "Juliano Nunes",
      "email": "julianomarquesnunes@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Deep Raval",
      "email": "deepraval2905@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
