{
  "slug": "k-folds",
  "name": "K Folds",
  "categories": ["datapreprocessing"],
  "body": {},
  "implementations": {
    "r": {
      "dir": "Data-Preprocessing/K_Folds.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Data-Preprocessing/K_Folds.R",
      "code": "<span class=\"hljs-comment\"># K folds cross validation is essential for machine learning</span>\n<span class=\"hljs-comment\"># createFolds function in package caret is easy to use</span>\n<span class=\"hljs-comment\"># here we write our own function</span>\n\nget_k_folds<span class=\"hljs-operator\">&lt;-</span><span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>y <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">,</span>k <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span><span class=\"hljs-punctuation\">,</span> isList <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">,</span> seed <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">123</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n  set.seed<span class=\"hljs-punctuation\">(</span>seed<span class=\"hljs-punctuation\">)</span>\n  folds<span class=\"hljs-operator\">&lt;-</span>sample<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n  every_n<span class=\"hljs-operator\">&lt;-</span><span class=\"hljs-built_in\">ceiling</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">/</span>k<span class=\"hljs-punctuation\">)</span>\n  matFolds<span class=\"hljs-operator\">&lt;-</span>suppressWarnings<span class=\"hljs-punctuation\">(</span>matrix<span class=\"hljs-punctuation\">(</span>folds<span class=\"hljs-punctuation\">,</span> ncol<span class=\"hljs-operator\">=</span>every_n<span class=\"hljs-punctuation\">,</span> byrow <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">T</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n  \n  <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>isList<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n    value<span class=\"hljs-operator\">&lt;-</span><span class=\"hljs-literal\">NULL</span>\n    rownames<span class=\"hljs-punctuation\">(</span>matFolds<span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">&lt;-</span>paste<span class=\"hljs-punctuation\">(</span><span class=\"hljs-string\">&quot;Folds&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span>k<span class=\"hljs-punctuation\">,</span>sep<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-punctuation\">)</span>\n    value<span class=\"hljs-operator\">&lt;-</span>lapply<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span>k<span class=\"hljs-punctuation\">,</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>x<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>x <span class=\"hljs-operator\">==</span> k<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>matFolds<span class=\"hljs-punctuation\">[</span>x<span class=\"hljs-punctuation\">,</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">-</span>every_n<span class=\"hljs-operator\">*</span><span class=\"hljs-punctuation\">(</span>k<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n      <span class=\"hljs-punctuation\">}</span><span class=\"hljs-keyword\">else</span><span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>matFolds<span class=\"hljs-punctuation\">[</span>x<span class=\"hljs-punctuation\">,</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">)</span>\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-keyword\">else</span><span class=\"hljs-punctuation\">{</span>\n    value<span class=\"hljs-operator\">&lt;-</span><span class=\"hljs-built_in\">c</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-punctuation\">)</span>\n    <span class=\"hljs-keyword\">for</span><span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span><span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>y<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n      value<span class=\"hljs-punctuation\">[</span>i<span class=\"hljs-punctuation\">]</span><span class=\"hljs-operator\">&lt;-</span><span class=\"hljs-built_in\">ceiling</span><span class=\"hljs-punctuation\">(</span>i<span class=\"hljs-operator\">/</span>every_n<span class=\"hljs-punctuation\">)</span>\n    <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-punctuation\">}</span>\n  \n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>value<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Ron Lee",
      "email": "ronlee12355@outlook.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
