{
  "slug": "support-vector-machines",
  "name": "Support Vector Machines",
  "categories": ["machinelearning"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning/support_vector_machines.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning/support_vector_machines.py",
      "code": "<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> svm\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_iris\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\n\n\n<span class=\"hljs-comment\"># different functions implementing different types of SVM&#x27;s</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">NuSVC</span>(<span class=\"hljs-params\">train_x, train_y</span>):\n    svc_NuSVC = svm.NuSVC()\n    svc_NuSVC.fit(train_x, train_y)\n    <span class=\"hljs-keyword\">return</span> svc_NuSVC\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Linearsvc</span>(<span class=\"hljs-params\">train_x, train_y</span>):\n    svc_linear = svm.LinearSVC(tol=<span class=\"hljs-number\">10e-2</span>)\n    svc_linear.fit(train_x, train_y)\n    <span class=\"hljs-keyword\">return</span> svc_linear\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">SVC</span>(<span class=\"hljs-params\">train_x, train_y</span>):\n    <span class=\"hljs-comment\"># svm.SVC(C=1.0, kernel=&#x27;rbf&#x27;, degree=3, gamma=0.0, coef0=0.0, shrinking=True,</span>\n    <span class=\"hljs-comment\"># probability=False,tol=0.001, cache_size=200, class_weight=None, verbose=False,</span>\n    <span class=\"hljs-comment\"># max_iter=1000, random_state=None)</span>\n    <span class=\"hljs-comment\"># various parameters like &quot;kernel&quot;,&quot;gamma&quot;,&quot;C&quot; can effectively tuned for a given</span>\n    <span class=\"hljs-comment\"># machine learning model.</span>\n    SVC = svm.SVC(gamma=<span class=\"hljs-string\">&quot;auto&quot;</span>)\n    SVC.fit(train_x, train_y)\n    <span class=\"hljs-keyword\">return</span> SVC\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\">X_new</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    3 test cases to be passed\n    an array containing the sepal length (cm), sepal width (cm), petal length (cm),\n    petal width (cm) based on which  the target name will be predicted\n    &gt;&gt;&gt; test([1,2,1,4])\n    &#x27;virginica&#x27;\n    &gt;&gt;&gt; test([5, 2, 4, 1])\n    &#x27;versicolor&#x27;\n    &gt;&gt;&gt; test([6,3,4,1])\n    &#x27;versicolor&#x27;\n    &quot;&quot;&quot;</span>\n    iris = load_iris()\n    <span class=\"hljs-comment\"># splitting the dataset to test and train</span>\n    train_x, test_x, train_y, test_y = train_test_split(\n        iris[<span class=\"hljs-string\">&quot;data&quot;</span>], iris[<span class=\"hljs-string\">&quot;target&quot;</span>], random_state=<span class=\"hljs-number\">4</span>\n    )\n    <span class=\"hljs-comment\"># any of the 3 types of SVM can be used</span>\n    <span class=\"hljs-comment\"># current_model=SVC(train_x, train_y)</span>\n    <span class=\"hljs-comment\"># current_model=NuSVC(train_x, train_y)</span>\n    current_model = Linearsvc(train_x, train_y)\n    prediction = current_model.predict([X_new])\n    <span class=\"hljs-keyword\">return</span> iris[<span class=\"hljs-string\">&quot;target_names&quot;</span>][prediction][<span class=\"hljs-number\">0</span>]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
