{
  "slug": "brute-force-string-searching",
  "name": "Brute Force String Searching",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "strings/brute_force_string_searching.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/strings/brute_force_string_searching.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief          String pattern search - brute force\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>  <span class=\"hljs-comment\">// use this for MS Visucal C++</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> string_search {\n<span class=\"hljs-comment\">/**\n * Find a pattern in a string by comparing the pattern to every substring.\n * @param text     Any string that might contain the pattern.\n * @param pattern  String that we are searching for.\n * @return         Index where the pattern starts in the text\n * @return         -1 if the pattern was not found.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">brute_force</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;text, <span class=\"hljs-keyword\">const</span> std::string &amp;pattern)</span> </span>{\n    <span class=\"hljs-type\">size_t</span> pat_l = pattern.<span class=\"hljs-built_in\">length</span>();\n    <span class=\"hljs-type\">size_t</span> txt_l = text.<span class=\"hljs-built_in\">length</span>();\n    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">if</span> (pat_l &lt;= txt_l) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; txt_l - pat_l + <span class=\"hljs-number\">1</span>; i++) {\n            std::string s = text.<span class=\"hljs-built_in\">substr</span>(i, pat_l);\n            <span class=\"hljs-keyword\">if</span> (s == pattern) {\n                index = i;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> index;\n}\n}  <span class=\"hljs-comment\">// namespace string_search</span>\n\n<span class=\"hljs-keyword\">using</span> string_search::brute_force;\n\n<span class=\"hljs-comment\">/** set of test cases */</span>\n<span class=\"hljs-keyword\">const</span> std::vector&lt;std::vector&lt;std::string&gt;&gt; test_set = {\n    <span class=\"hljs-comment\">// {text, pattern, expected output}</span>\n    {<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;aa&quot;</span>, <span class=\"hljs-string\">&quot;-1&quot;</span>},  {<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;0&quot;</span>},    {<span class=\"hljs-string\">&quot;ba&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;0&quot;</span>},\n    {<span class=\"hljs-string\">&quot;bba&quot;</span>, <span class=\"hljs-string\">&quot;bb&quot;</span>, <span class=\"hljs-string\">&quot;0&quot;</span>}, {<span class=\"hljs-string\">&quot;bbca&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>}, {<span class=\"hljs-string\">&quot;ab&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>}};\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; test_set.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-type\">int</span> output = <span class=\"hljs-built_in\">brute_force</span>(test_set[i][<span class=\"hljs-number\">0</span>], test_set[i][<span class=\"hljs-number\">1</span>]);\n\n        <span class=\"hljs-keyword\">if</span> (std::<span class=\"hljs-built_in\">to_string</span>(output) == test_set[i][<span class=\"hljs-number\">2</span>])\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;success\\n&quot;</span>;\n        <span class=\"hljs-keyword\">else</span>\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;failure\\n&quot;</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "1pierres1u",
      "email": "1pierres1u@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
