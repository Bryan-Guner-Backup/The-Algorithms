{
  "slug": "rod-cutting",
  "name": "Rod Cutting",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming/rod_cutting.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/rod_cutting.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis module provides two implementations for the rod-cutting problem:\n1. A naive recursive implementation which has an exponential runtime\n2. Two dynamic programming implementations which have quadratic runtime\n\nThe rod-cutting problem is the problem of finding the maximum possible revenue\nobtainable from a rod of length ``n`` given a list of prices for each integral piece\nof the rod. The maximum revenue can thus be obtained by cutting the rod and selling the\npieces separately or not cutting it at all if the price of it is the maximum obtainable.\n\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">naive_cut_rod_recursive</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, prices: <span class=\"hljs-built_in\">list</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Solves the rod-cutting problem via naively without using the benefit of dynamic\n    programming. The results is the same sub-problems are solved several times\n    leading to an exponential runtime\n\n    Runtime: O(2^n)\n\n    Arguments\n    -------\n    n: int, the length of the rod\n    prices: list, the prices for each piece of rod. ``p[i-i]`` is the\n    price for a rod of length ``i``\n\n    Returns\n    -------\n    The maximum revenue obtainable for a rod of length n given the list of prices\n    for each piece.\n\n    Examples\n    --------\n    &gt;&gt;&gt; naive_cut_rod_recursive(4, [1, 5, 8, 9])\n    10\n    &gt;&gt;&gt; naive_cut_rod_recursive(10, [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])\n    30\n    &quot;&quot;&quot;</span>\n\n    _enforce_args(n, prices)\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    max_revue = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;-inf&quot;</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n        max_revue = <span class=\"hljs-built_in\">max</span>(\n            max_revue, prices[i - <span class=\"hljs-number\">1</span>] + naive_cut_rod_recursive(n - i, prices)\n        )\n\n    <span class=\"hljs-keyword\">return</span> max_revue\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top_down_cut_rod</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, prices: <span class=\"hljs-built_in\">list</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Constructs a top-down dynamic programming solution for the rod-cutting\n    problem via memoization. This function serves as a wrapper for\n    _top_down_cut_rod_recursive\n\n    Runtime: O(n^2)\n\n    Arguments\n    --------\n    n: int, the length of the rod\n    prices: list, the prices for each piece of rod. ``p[i-i]`` is the\n    price for a rod of length ``i``\n\n    Note\n    ----\n    For convenience and because Python&#x27;s lists using 0-indexing, length(max_rev) =\n    n + 1, to accommodate for the revenue obtainable from a rod of length 0.\n\n    Returns\n    -------\n    The maximum revenue obtainable for a rod of length n given the list of prices\n    for each piece.\n\n    Examples\n    -------\n    &gt;&gt;&gt; top_down_cut_rod(4, [1, 5, 8, 9])\n    10\n    &gt;&gt;&gt; top_down_cut_rod(10, [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])\n    30\n    &quot;&quot;&quot;</span>\n    _enforce_args(n, prices)\n    max_rev = [<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;-inf&quot;</span>) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\n    <span class=\"hljs-keyword\">return</span> _top_down_cut_rod_recursive(n, prices, max_rev)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_top_down_cut_rod_recursive</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, prices: <span class=\"hljs-built_in\">list</span>, max_rev: <span class=\"hljs-built_in\">list</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Constructs a top-down dynamic programming solution for the rod-cutting problem\n    via memoization.\n\n    Runtime: O(n^2)\n\n    Arguments\n    --------\n    n: int, the length of the rod\n    prices: list, the prices for each piece of rod. ``p[i-i]`` is the\n    price for a rod of length ``i``\n    max_rev: list, the computed maximum revenue for a piece of rod.\n    ``max_rev[i]`` is the maximum revenue obtainable for a rod of length ``i``\n\n    Returns\n    -------\n    The maximum revenue obtainable for a rod of length n given the list of prices\n    for each piece.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> max_rev[n] &gt;= <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> max_rev[n]\n    <span class=\"hljs-keyword\">elif</span> n == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        max_revenue = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;-inf&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n            max_revenue = <span class=\"hljs-built_in\">max</span>(\n                max_revenue,\n                prices[i - <span class=\"hljs-number\">1</span>] + _top_down_cut_rod_recursive(n - i, prices, max_rev),\n            )\n\n        max_rev[n] = max_revenue\n\n    <span class=\"hljs-keyword\">return</span> max_rev[n]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bottom_up_cut_rod</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, prices: <span class=\"hljs-built_in\">list</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Constructs a bottom-up dynamic programming solution for the rod-cutting problem\n\n    Runtime: O(n^2)\n\n    Arguments\n    ----------\n    n: int, the maximum length of the rod.\n    prices: list, the prices for each piece of rod. ``p[i-i]`` is the\n    price for a rod of length ``i``\n\n    Returns\n    -------\n    The maximum revenue obtainable from cutting a rod of length n given\n    the prices for each piece of rod p.\n\n    Examples\n    -------\n    &gt;&gt;&gt; bottom_up_cut_rod(4, [1, 5, 8, 9])\n    10\n    &gt;&gt;&gt; bottom_up_cut_rod(10, [1, 5, 8, 9, 10, 17, 17, 20, 24, 30])\n    30\n    &quot;&quot;&quot;</span>\n    _enforce_args(n, prices)\n\n    <span class=\"hljs-comment\"># length(max_rev) = n + 1, to accommodate for the revenue obtainable from a rod of</span>\n    <span class=\"hljs-comment\"># length 0.</span>\n    max_rev = [<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;-inf&quot;</span>) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\n    max_rev[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n        max_revenue_i = max_rev[i]\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, i + <span class=\"hljs-number\">1</span>):\n            max_revenue_i = <span class=\"hljs-built_in\">max</span>(max_revenue_i, prices[j - <span class=\"hljs-number\">1</span>] + max_rev[i - j])\n\n        max_rev[i] = max_revenue_i\n\n    <span class=\"hljs-keyword\">return</span> max_rev[n]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_enforce_args</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, prices: <span class=\"hljs-built_in\">list</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Basic checks on the arguments to the rod-cutting algorithms\n\n    n: int, the length of the rod\n    prices: list, the price list for each piece of rod.\n\n    Throws ValueError:\n\n    if n is negative or there are fewer items in the price list than the length of\n    the rod\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;n must be greater than or equal to 0. Got n = <span class=\"hljs-subst\">{n}</span>&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-built_in\">len</span>(prices):\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;Each integral piece of rod must have a corresponding &quot;</span>\n            <span class=\"hljs-string\">f&quot;price. Got n = <span class=\"hljs-subst\">{n}</span> but length of prices = <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(prices)}</span>&quot;</span>\n        )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    prices = [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">23</span>]\n    n = <span class=\"hljs-built_in\">len</span>(prices)\n\n    <span class=\"hljs-comment\"># the best revenue comes from cutting the rod into 6 pieces, each</span>\n    <span class=\"hljs-comment\"># of length 1 resulting in a revenue of 6 * 6 = 36.</span>\n    expected_max_revenue = <span class=\"hljs-number\">36</span>\n\n    max_rev_top_down = top_down_cut_rod(n, prices)\n    max_rev_bottom_up = bottom_up_cut_rod(n, prices)\n    max_rev_naive = naive_cut_rod_recursive(n, prices)\n\n    <span class=\"hljs-keyword\">assert</span> expected_max_revenue == max_rev_top_down\n    <span class=\"hljs-keyword\">assert</span> max_rev_top_down == max_rev_bottom_up\n    <span class=\"hljs-keyword\">assert</span> max_rev_bottom_up == max_rev_naive\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "java": {
      "dir": "DynamicProgramming/RodCutting.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/RodCutting.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-comment\">/**\n * A DynamicProgramming solution for Rod cutting problem Returns the best obtainable price for a rod\n * of length n and price[] as prices of different pieces\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RodCutting</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">cutRod</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] price, <span class=\"hljs-type\">int</span> n)</span> {\n    <span class=\"hljs-type\">int</span> val[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];\n    val[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= n; i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max_val</span> <span class=\"hljs-operator\">=</span> Integer.MIN_VALUE;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; i; j++) max_val = Math.max(max_val, price[j] + val[i - j - <span class=\"hljs-number\">1</span>]);\n\n      val[i] = max_val;\n    }\n\n    <span class=\"hljs-keyword\">return</span> val[n];\n  }\n\n  <span class=\"hljs-comment\">// main function to test</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n    <span class=\"hljs-type\">int</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">20</span>};\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> cutRod(arr, arr.length);\n    System.out.println(<span class=\"hljs-string\">&quot;Maximum Obtainable Value is &quot;</span> + result);\n  }\n}\n"
    },
    "go": {
      "dir": "dynamicprogramming/rod-cutting.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamicprogramming/rod-cutting.go",
      "code": "<span class=\"hljs-comment\">// Solution to Rod cutting problem</span>\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Cutting_stock_problem</span>\n<span class=\"hljs-comment\">// http://www.geeksforgeeks.org/dynamic-programming-set-13-cutting-a-rod/</span>\n\n<span class=\"hljs-keyword\">package</span> dynamicprogramming\n\n<span class=\"hljs-comment\">// CutRodRec solve the problem recursively: initial approach</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CutRodRec</span><span class=\"hljs-params\">(price []<span class=\"hljs-keyword\">int</span>, length <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">if</span> length == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\t}\n\n\tq := <span class=\"hljs-number\">-1</span>\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= length; i++ {\n\t\tq = Max(q, price[i]+CutRodRec(price, length-i))\n\t}\n\t<span class=\"hljs-keyword\">return</span> q\n}\n\n<span class=\"hljs-comment\">// CutRodDp solve the same problem using dynamic programming</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CutRodDp</span><span class=\"hljs-params\">(price []<span class=\"hljs-keyword\">int</span>, length <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\tr := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, length+<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// a.k.a the memoization array</span>\n\tr[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// cost of 0 length rod is 0</span>\n\n\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">1</span>; j &lt;= length; j++ { <span class=\"hljs-comment\">// for each length (subproblem)</span>\n\t\tq := <span class=\"hljs-number\">-1</span>\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt;= j; i++ {\n\t\t\tq = Max(q, price[i]+r[j-i]) <span class=\"hljs-comment\">// avoiding recursive call</span>\n\t\t}\n\t\tr[j] = q\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> r[length]\n}\n\n<span class=\"hljs-comment\">/*\nfunc main() {\n\tlength := 10\n\tprice := []int{0, 1, 5, 8, 9, 17, 17, 17, 20, 24, 30}\n\t// price := []int{0, 10, 5, 8, 9, 17, 17, 17, 20, 24, 30}\n\n\t// fmt.Print(price[5]+price[length-5], &quot;\\n&quot;)\n\n\tfmt.Print(cutRodRec(price, length), &quot;\\n&quot;)\n\tfmt.Print(cutRodDp(price, length), &quot;\\n&quot;)\n}\n*/</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Himanshu Shekhar",
      "email": "himanshushekharb16@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Serwio YK",
      "email": "56473255+Serwios@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "salonilakhotia",
      "email": "salonilakhotia242@gmail.com",
      "commits": 1
    },
    {
      "name": "Kenneth Nero",
      "email": "kbn1798@rit.edu",
      "commits": 1
    },
    {
      "name": "Deepak",
      "email": "deepakkumar180997@gmail.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maxwell Aladago",
      "email": "maxwell.aladago@gmail.com",
      "commits": 1
    },
    {
      "name": "Anthony Marakis",
      "email": "antmarakis@programmers.gr",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
