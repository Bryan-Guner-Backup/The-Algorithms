{
  "slug": "prime-seive",
  "name": "Prime Seive",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/prime_seive.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/prime_seive.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Prime Seive](https://leetcode.com/problems/count-primes/)\n * algorithm implementation.\n * @author [Divyansh Kushwaha](https://github.com/webdesignbydivyansh)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>\t<span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>\t<span class=\"hljs-comment\">/// for standard input output</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>\t<span class=\"hljs-comment\">/// for general purpose standard library</span></span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> MAX_SIZE = <span class=\"hljs-number\">1000000</span>;  <span class=\"hljs-comment\">/// variable upto which prime numbers are to be found out</span>\n<span class=\"hljs-comment\">/**\n * @addtogroup misc\n * @{\n */</span>\n<span class=\"hljs-comment\">/**\n * @brief Prime Sieve works in O(nlogn) time\n * @param p array to be updated\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">prime</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *p)</span>\n{\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">3</span>;i&lt;=MAX_SIZE;i+=<span class=\"hljs-number\">2</span>) { p[i]=<span class=\"hljs-number\">1</span>; }\n\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">3</span>;i&lt;=MAX_SIZE;i+=<span class=\"hljs-number\">2</span>)\n\t{\n\t\t<span class=\"hljs-keyword\">if</span>(p[i]==<span class=\"hljs-number\">1</span>) {\n\t\t    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> j=i*i;j&lt;=MAX_SIZE;j+=i) {\n\t\t\tp[j]=<span class=\"hljs-number\">0</span>;\n\t\t    }\n\t\t}\n\t}\n\tp[<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">1</span>;\n\tp[<span class=\"hljs-number\">0</span>]=p[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;    \n}\n<span class=\"hljs-comment\">/**\n * @brief Count func counts the number of \n * prime numbers.\n * @param arr contains the prime numbers\n * @param size denotes upto which prime numbers are to be found out\n * @returns count of prime numbers\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> size)</span>{\n  <span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=size;i++){\n    <span class=\"hljs-keyword\">if</span>(arr[i]==<span class=\"hljs-number\">1</span>){\n      k++;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> k;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">// Test Case 1</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> size = <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">/* array size */</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test Case 1...&quot;</span>);\n    <span class=\"hljs-type\">int</span> arr[<span class=\"hljs-number\">1000005</span>]={<span class=\"hljs-number\">0</span>};   <span class=\"hljs-comment\">/* array to store prime numbers */</span>\n    prime(arr);\n    assert(count(arr,size)==<span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Passed\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/** \n * @brief Main function\n * @param argc commandline argument count (ignored)\n * @param argv commandline array of arguments (ignored)\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    test();\t<span class=\"hljs-comment\">// execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
