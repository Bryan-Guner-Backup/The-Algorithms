{
  "slug": "merge-linked-lists",
  "name": "Merge Linked Lists",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/linked_list/merge_linked_lists.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/linked_list/merge_linked_lists.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\n};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">head1</span> =</span> <span class=\"hljs-literal\">NULL</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">head2</span> =</span> <span class=\"hljs-literal\">NULL</span>;\n\n<span class=\"hljs-comment\">///// MAIN ALGORITHMIC FUNCTION to MERGE the two input linked lists ///////</span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp1</span> =</span> head1;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp2</span> =</span> head2;\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">holder1</span> =</span> <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">holder2</span> =</span> <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-comment\">// Temporary pointer variables to store the address of next node of the two</span>\n    <span class=\"hljs-comment\">// input linked list</span>\n\n    <span class=\"hljs-keyword\">while</span> (temp1 != <span class=\"hljs-literal\">NULL</span> &amp;&amp; temp2 != <span class=\"hljs-literal\">NULL</span>)\n    {\n        holder1 = temp1-&gt;next;\n        <span class=\"hljs-comment\">// Storing the address of next node of first linked list</span>\n        temp1-&gt;next = temp2;\n        <span class=\"hljs-comment\">// Making the first node of first linked list point to first node of</span>\n        <span class=\"hljs-comment\">// second linked list</span>\n\n        <span class=\"hljs-keyword\">if</span> (holder1 != <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-comment\">// Making the first node of second linked list point to second node</span>\n            <span class=\"hljs-comment\">// of first linked list</span>\n            holder2 = temp2-&gt;next;\n            temp2-&gt;next = holder1;\n        }\n        temp1 = holder1;\n        temp2 = holder2;\n        <span class=\"hljs-comment\">// Updating the address location of two pointer variables temp1 and</span>\n        <span class=\"hljs-comment\">// temp2</span>\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printlist</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *temp)</span>\n{\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, temp-&gt;data);\n    temp = temp-&gt;next;\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;-&gt;%d&quot;</span>, temp-&gt;data);\n        temp = temp-&gt;next;\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">// Linked List 1: 1-&gt;3-&gt;5-&gt;7   :   Linked List 2: 2-&gt;4-&gt;6</span>\n    <span class=\"hljs-comment\">//  making lists</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">one</span> =</span> (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">two</span> =</span> (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">three</span> =</span> (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">four</span> =</span> (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">five</span> =</span> (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">six</span> =</span> (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">seven</span> =</span> (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-comment\">// Seven nodes are created</span>\n\n    head1 = one;\n    head2 = two;\n    <span class=\"hljs-comment\">// head1 points to first node of first linked list</span>\n    <span class=\"hljs-comment\">// head2 points to first node of second linked list</span>\n\n    one-&gt;data = <span class=\"hljs-number\">1</span>;\n    one-&gt;next = three;\n\n    two-&gt;data = <span class=\"hljs-number\">2</span>;\n    two-&gt;next = four;\n\n    three-&gt;data = <span class=\"hljs-number\">3</span>;\n    three-&gt;next = five;\n\n    four-&gt;data = <span class=\"hljs-number\">4</span>;\n    four-&gt;next = six;\n\n    five-&gt;data = <span class=\"hljs-number\">5</span>;\n    five-&gt;next = seven;\n\n    six-&gt;data = <span class=\"hljs-number\">6</span>;\n    six-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-comment\">// Last node of second input linked list</span>\n\n    seven-&gt;data = <span class=\"hljs-number\">7</span>;\n    seven-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-comment\">// Last node of first input linked list</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Linked List 1: &quot;</span>);\n    printlist(head1);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nLinked List 2: &quot;</span>);\n    printlist(head2);\n\n    <span class=\"hljs-comment\">// Merging the two linked list into single linked list</span>\n    merge();\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nMerged Linked List: &quot;</span>);\n    printlist(head1);  <span class=\"hljs-comment\">// list one has been modified</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "agnimish",
      "email": "31532652+agnimish@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
