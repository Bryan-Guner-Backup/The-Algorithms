{
  "slug": "generictree",
  "name": "GenericTree",
  "categories": ["datastructures", "tree"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Trees/GenericTree.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Trees/GenericTree.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Trees;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * A generic tree is a tree which can have as many children as it can be It might be possible that\n * every node present is directly connected to root node.\n *\n * &lt;p&gt;In this code Every function has two copies: one function is helper function which can be\n * called from main and from that function a private function is called which will do the actual\n * work. I have done this, while calling from main one have to give minimum parameters.\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GenericTree</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">int</span> data;\n    ArrayList&lt;Node&gt; child = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n  }\n\n  <span class=\"hljs-keyword\">private</span> Node root;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">GenericTree</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-comment\">// Constructor</span>\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scn</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    root = create_treeG(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">0</span>, scn);\n  }\n\n  <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">create_treeG</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> childindx, Scanner scn)</span> {\n    <span class=\"hljs-comment\">// display</span>\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n      System.out.println(<span class=\"hljs-string\">&quot;Enter root&#x27;s data&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Enter data of parent of index &quot;</span> + node.data + <span class=\"hljs-string\">&quot; &quot;</span> + childindx);\n    }\n    <span class=\"hljs-comment\">// input</span>\n    node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\n    node.data = scn.nextInt();\n    System.out.println(<span class=\"hljs-string\">&quot;number of children&quot;</span>);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">number</span> <span class=\"hljs-operator\">=</span> scn.nextInt();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; number; i++) {\n      <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">child</span> <span class=\"hljs-operator\">=</span> create_treeG(node, i, scn);\n      size++;\n      node.child.add(child);\n    }\n    <span class=\"hljs-keyword\">return</span> node;\n  }\n\n  <span class=\"hljs-comment\">/** Function to display the generic tree */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-comment\">// Helper function</span>\n    display_1(root);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">display_1</span><span class=\"hljs-params\">(Node parent)</span> {\n    System.out.print(parent.data + <span class=\"hljs-string\">&quot;=&gt;&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; parent.child.size(); i++) {\n      System.out.print(parent.child.get(i).data + <span class=\"hljs-string\">&quot; &quot;</span>);\n    }\n    System.out.println(<span class=\"hljs-string\">&quot;.&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; parent.child.size(); i++) {\n      display_1(parent.child.get(i));\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * One call store the size directly but if you are asked compute size this function to calculate\n   * size goes as follows\n   *\n   * <span class=\"hljs-doctag\">@return</span> size\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size2call</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> size2(root);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size2</span><span class=\"hljs-params\">(Node roott)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sz</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; roott.child.size(); i++) {\n      sz += size2(roott.child.get(i));\n    }\n    <span class=\"hljs-keyword\">return</span> sz + <span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Function to compute maximum value in the generic tree\n   *\n   * <span class=\"hljs-doctag\">@return</span> maximum value\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">maxcall</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxi</span> <span class=\"hljs-operator\">=</span> root.data;\n    <span class=\"hljs-keyword\">return</span> max(root, maxi);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(Node roott, <span class=\"hljs-type\">int</span> maxi)</span> {\n    <span class=\"hljs-keyword\">if</span> (maxi &lt; roott.data) maxi = roott.data;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; roott.child.size(); i++) {\n      maxi = max(roott.child.get(i), maxi);\n    }\n\n    <span class=\"hljs-keyword\">return</span> maxi;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Function to compute HEIGHT of the generic tree\n   *\n   * <span class=\"hljs-doctag\">@return</span> height\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">heightcall</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> height(root) - <span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">height</span><span class=\"hljs-params\">(Node node)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">h</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> height(node.child.get(i));\n      <span class=\"hljs-keyword\">if</span> (k &gt; h) h = k;\n    }\n    <span class=\"hljs-keyword\">return</span> h + <span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Function to find whether a number is present in the generic tree or not\n   *\n   * <span class=\"hljs-doctag\">@param</span> info number\n   * <span class=\"hljs-doctag\">@return</span> present or not\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">findcall</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> info)</span> {\n    <span class=\"hljs-keyword\">return</span> find(root, info);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> info)</span> {\n    <span class=\"hljs-keyword\">if</span> (node.data == info) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\n      <span class=\"hljs-keyword\">if</span> (find(node.child.get(i), info)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Function to calculate depth of generic tree\n   *\n   * <span class=\"hljs-doctag\">@param</span> dep depth\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">depthcaller</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> dep)</span> {\n    depth(root, dep);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">depth</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> dep)</span> {\n    <span class=\"hljs-keyword\">if</span> (dep == <span class=\"hljs-number\">0</span>) {\n      System.out.println(node.data);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) depth(node.child.get(i), dep - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-comment\">/** Function to print generic tree in pre-order */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preordercall</span><span class=\"hljs-params\">()</span> {\n    preorder(root);\n    System.out.println(<span class=\"hljs-string\">&quot;.&quot;</span>);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preorder</span><span class=\"hljs-params\">(Node node)</span> {\n    System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) preorder(node.child.get(i));\n  }\n\n  <span class=\"hljs-comment\">/** Function to print generic tree in post-order */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postordercall</span><span class=\"hljs-params\">()</span> {\n    postorder(root);\n    System.out.println(<span class=\"hljs-string\">&quot;.&quot;</span>);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postorder</span><span class=\"hljs-params\">(Node node)</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) postorder(node.child.get(i));\n    System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">/** Function to print generic tree in level-order */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">levelorder</span><span class=\"hljs-params\">()</span> {\n    LinkedList&lt;Node&gt; q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();\n    q.addLast(root);\n    <span class=\"hljs-keyword\">while</span> (!q.isEmpty()) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> q.getFirst().data;\n      System.out.print(k + <span class=\"hljs-string\">&quot; &quot;</span>);\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; q.getFirst().child.size(); i++) {\n        q.addLast(q.getFirst().child.get(i));\n      }\n      q.removeFirst();\n    }\n    System.out.println(<span class=\"hljs-string\">&quot;.&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">/** Function to remove all leaves of generic tree */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeleavescall</span><span class=\"hljs-params\">()</span> {\n    removeleaves(root);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeleaves</span><span class=\"hljs-params\">(Node node)</span> {\n    ArrayList&lt;Integer&gt; arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; node.child.size(); i++) {\n      <span class=\"hljs-keyword\">if</span> (node.child.get(i).child.size() == <span class=\"hljs-number\">0</span>) {\n        arr.add(i);\n        <span class=\"hljs-comment\">// node.child.remove(i);</span>\n        <span class=\"hljs-comment\">// i--;</span>\n      } <span class=\"hljs-keyword\">else</span> removeleaves(node.child.get(i));\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> arr.size() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n      node.child.remove(arr.get(i) + <span class=\"hljs-number\">0</span>);\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "JayH2018",
      "email": "42029911+JayH2018@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "ParitoshAggarwal",
      "email": "paritoshmait@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
