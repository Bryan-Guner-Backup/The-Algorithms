{
  "slug": "skylinealgorithm",
  "name": "SkylineAlgorithm",
  "categories": ["divideandconquer"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "divideconquer/SkylineAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/divideconquer/SkylineAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> divideconquer;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.Comparator;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * <span class=\"hljs-doctag\">@author</span> dimgrichr\r\n *     &lt;p&gt;Space complexity: O(n) Time complexity: O(nlogn), because it is a divide and conquer\r\n *     algorithm\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SkylineAlgorithm</span> {\r\n  <span class=\"hljs-keyword\">private</span> ArrayList&lt;Point&gt; points;\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Main constructor of the application. ArrayList points gets created, which represents the sum of\r\n   * all edges.\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SkylineAlgorithm</span><span class=\"hljs-params\">()</span> {\r\n    points = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@return</span> points, the ArrayList that includes all points. */</span>\r\n  <span class=\"hljs-keyword\">public</span> ArrayList&lt;Point&gt; <span class=\"hljs-title function_\">getPoints</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-keyword\">return</span> points;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * The main divide and conquer, and also recursive algorithm. It gets an ArrayList full of points\r\n   * as an argument. If the size of that ArrayList is 1 or 2, the ArrayList is returned as it is, or\r\n   * with one less point (if the initial size is 2 and one of it&#x27;s points, is dominated by the other\r\n   * one). On the other hand, if the ArrayList&#x27;s size is bigger than 2, the function is called\r\n   * again, twice, with arguments the corresponding half of the initial ArrayList each time. Once\r\n   * the flashback has ended, the function produceFinalSkyLine gets called, in order to produce the\r\n   * final skyline, and return it.\r\n   *\r\n   * <span class=\"hljs-doctag\">@param</span> list, the initial list of points\r\n   * <span class=\"hljs-doctag\">@return</span> leftSkyLine, the combination of first half&#x27;s and second half&#x27;s skyline\r\n   * <span class=\"hljs-doctag\">@see</span> Point\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> ArrayList&lt;Point&gt; <span class=\"hljs-title function_\">produceSubSkyLines</span><span class=\"hljs-params\">(ArrayList&lt;Point&gt; list)</span> {\r\n\r\n    <span class=\"hljs-comment\">// part where function exits flashback</span>\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> list.size();\r\n    <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">1</span>) {\r\n      <span class=\"hljs-keyword\">return</span> list;\r\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">2</span>) {\r\n      <span class=\"hljs-keyword\">if</span> (list.get(<span class=\"hljs-number\">0</span>).dominates(list.get(<span class=\"hljs-number\">1</span>))) {\r\n        list.remove(<span class=\"hljs-number\">1</span>);\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        <span class=\"hljs-keyword\">if</span> (list.get(<span class=\"hljs-number\">1</span>).dominates(list.get(<span class=\"hljs-number\">0</span>))) {\r\n          list.remove(<span class=\"hljs-number\">0</span>);\r\n        }\r\n      }\r\n      <span class=\"hljs-keyword\">return</span> list;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// recursive part of the function</span>\r\n    ArrayList&lt;Point&gt; leftHalf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    ArrayList&lt;Point&gt; rightHalf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; list.size(); i++) {\r\n      <span class=\"hljs-keyword\">if</span> (i &lt; list.size() / <span class=\"hljs-number\">2</span>) {\r\n        leftHalf.add(list.get(i));\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        rightHalf.add(list.get(i));\r\n      }\r\n    }\r\n    ArrayList&lt;Point&gt; leftSubSkyLine = produceSubSkyLines(leftHalf);\r\n    ArrayList&lt;Point&gt; rightSubSkyLine = produceSubSkyLines(rightHalf);\r\n\r\n    <span class=\"hljs-comment\">// skyline is produced</span>\r\n    <span class=\"hljs-keyword\">return</span> produceFinalSkyLine(leftSubSkyLine, rightSubSkyLine);\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * The first half&#x27;s skyline gets cleared from some points that are not part of the final skyline\r\n   * (Points with same x-value and different y=values. The point with the smallest y-value is kept).\r\n   * Then, the minimum y-value of the points of first half&#x27;s skyline is found. That helps us to\r\n   * clear the second half&#x27;s skyline, because, the points of second half&#x27;s skyline that have greater\r\n   * y-value of the minimum y-value that we found before, are dominated, so they are not part of the\r\n   * final skyline. Finally, the &quot;cleaned&quot; first half&#x27;s and second half&#x27;s skylines, are combined,\r\n   * producing the final skyline, which is returned.\r\n   *\r\n   * <span class=\"hljs-doctag\">@param</span> left the skyline of the left part of points\r\n   * <span class=\"hljs-doctag\">@param</span> right the skyline of the right part of points\r\n   * <span class=\"hljs-doctag\">@return</span> left the final skyline\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> ArrayList&lt;Point&gt; <span class=\"hljs-title function_\">produceFinalSkyLine</span><span class=\"hljs-params\">(ArrayList&lt;Point&gt; left, ArrayList&lt;Point&gt; right)</span> {\r\n\r\n    <span class=\"hljs-comment\">// dominated points of ArrayList left are removed</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; left.size() - <span class=\"hljs-number\">1</span>; i++) {\r\n      <span class=\"hljs-keyword\">if</span> (left.get(i).x == left.get(i + <span class=\"hljs-number\">1</span>).x &amp;&amp; left.get(i).y &gt; left.get(i + <span class=\"hljs-number\">1</span>).y) {\r\n        left.remove(i);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// minimum y-value is found</span>\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> left.get(<span class=\"hljs-number\">0</span>).y;\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; left.size(); i++) {\r\n      <span class=\"hljs-keyword\">if</span> (min &gt; left.get(i).y) {\r\n        min = left.get(i).y;\r\n        <span class=\"hljs-keyword\">if</span> (min == <span class=\"hljs-number\">1</span>) {\r\n          i = left.size();\r\n        }\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// dominated points of ArrayList right are removed</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; right.size(); i++) {\r\n      <span class=\"hljs-keyword\">if</span> (right.get(i).y &gt;= min) {\r\n        right.remove(i);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// final skyline found and returned</span>\r\n    left.addAll(right);\r\n    <span class=\"hljs-keyword\">return</span> left;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Point</span> {\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> x;\r\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> y;\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * The main constructor of Point Class, used to represent the 2 Dimension points.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> x the point&#x27;s x-value.\r\n     * <span class=\"hljs-doctag\">@param</span> y the point&#x27;s y-value.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Point</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> {\r\n      <span class=\"hljs-built_in\">this</span>.x = x;\r\n      <span class=\"hljs-built_in\">this</span>.y = y;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@return</span> x, the x-value */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getX</span><span class=\"hljs-params\">()</span> {\r\n      <span class=\"hljs-keyword\">return</span> x;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@return</span> y, the y-value */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getY</span><span class=\"hljs-params\">()</span> {\r\n      <span class=\"hljs-keyword\">return</span> y;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/**\r\n     * Based on the skyline theory, it checks if the point that calls the function dominates the\r\n     * argument point.\r\n     *\r\n     * <span class=\"hljs-doctag\">@param</span> p1 the point that is compared\r\n     * <span class=\"hljs-doctag\">@return</span> true if the point wich calls the function dominates p1 false otherwise.\r\n     */</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">dominates</span><span class=\"hljs-params\">(Point p1)</span> {\r\n      <span class=\"hljs-comment\">// checks if p1 is dominated</span>\r\n      <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">this</span>.x &lt; p1.x &amp;&amp; <span class=\"hljs-built_in\">this</span>.y &lt;= p1.y) || (<span class=\"hljs-built_in\">this</span>.x &lt;= p1.x &amp;&amp; <span class=\"hljs-built_in\">this</span>.y &lt; p1.y);\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * It is used to compare the 2 Dimension points, based on their x-values, in order get sorted\r\n   * later.\r\n   */</span>\r\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">XComparator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Point&gt; {\r\n    <span class=\"hljs-meta\">@Override</span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Point a, Point b)</span> {\r\n      <span class=\"hljs-keyword\">return</span> Integer.compare(a.x, b.x);\r\n    }\r\n  }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "dimgrichr",
      "email": "32580033+dimgrichr@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
