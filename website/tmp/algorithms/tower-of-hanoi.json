{
  "slug": "tower-of-hanoi",
  "name": "Tower of Hanoi",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/tower_of_hanoi.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/tower_of_hanoi.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">moveTower</span>(<span class=\"hljs-params\">height, fromPole, toPole, withPole</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; moveTower(3, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;)\n    moving disk from A to B\n    moving disk from A to C\n    moving disk from B to C\n    moving disk from A to B\n    moving disk from C to A\n    moving disk from C to B\n    moving disk from A to B\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> height &gt;= <span class=\"hljs-number\">1</span>:\n        moveTower(height - <span class=\"hljs-number\">1</span>, fromPole, withPole, toPole)\n        moveDisk(fromPole, toPole)\n        moveTower(height - <span class=\"hljs-number\">1</span>, withPole, toPole, fromPole)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">moveDisk</span>(<span class=\"hljs-params\">fp, tp</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;moving disk from&quot;</span>, fp, <span class=\"hljs-string\">&quot;to&quot;</span>, tp)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    height = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Height of hanoi: &quot;</span>).strip())\n    moveTower(height, <span class=\"hljs-string\">&quot;A&quot;</span>, <span class=\"hljs-string\">&quot;B&quot;</span>, <span class=\"hljs-string\">&quot;C&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Recursive/TowerOfHanoi.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Recursive/TowerOfHanoi.js",
      "code": "<span class=\"hljs-comment\">// wiki - https://en.wikipedia.org/wiki/Tower_of_Hanoi</span>\n<span class=\"hljs-comment\">// Recursive Javascript function to solve tower of hanoi</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TowerOfHanoi</span> (n, fromRod, toRod, auxRod) {\n  <span class=\"hljs-keyword\">if</span> (n === <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Move disk 1 from rod <span class=\"hljs-subst\">${fromRod}</span> to rod <span class=\"hljs-subst\">${toRod}</span>`</span>)\n    <span class=\"hljs-keyword\">return</span>\n  }\n  <span class=\"hljs-title class_\">TowerOfHanoi</span>(n - <span class=\"hljs-number\">1</span>, fromRod, auxRod, toRod)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Move disk <span class=\"hljs-subst\">${n}</span> from rod <span class=\"hljs-subst\">${fromRod}</span> to rod <span class=\"hljs-subst\">${toRod}</span>`</span>)\n  <span class=\"hljs-title class_\">TowerOfHanoi</span>(n - <span class=\"hljs-number\">1</span>, auxRod, toRod, fromRod)\n}\n<span class=\"hljs-comment\">// Driver code</span>\n<span class=\"hljs-keyword\">const</span> n = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-title class_\">TowerOfHanoi</span>(n, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>)\n<span class=\"hljs-comment\">// A, C, B are the name of rods</span>\n"
    },
    "c-plus-plus": {
      "dir": "others/tower_of_hanoi.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others/tower_of_hanoi.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Solve the [Tower of\n * Hanoi](https://en.wikipedia.org/wiki/Tower_of_Hanoi) problem.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Define the state of tower\n */</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">tower</span> {\n    <span class=\"hljs-comment\">//! Values in the tower</span>\n    <span class=\"hljs-type\">int</span> values[<span class=\"hljs-number\">10</span>];\n    <span class=\"hljs-comment\">//! top tower ID</span>\n    <span class=\"hljs-type\">int</span> top;\n};\n\n<span class=\"hljs-comment\">/** Display the towers */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> tower *<span class=\"hljs-keyword\">const</span> F, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> tower *<span class=\"hljs-keyword\">const</span> T,\n          <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> tower *<span class=\"hljs-keyword\">const</span> U)</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\n\\tF : &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; F-&gt;top; i++) {\n        std::cout &lt;&lt; F-&gt;values[i] &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\tU : &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; U-&gt;top; i++) {\n        std::cout &lt;&lt; U-&gt;values[i] &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\tT : &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; T-&gt;top; i++) {\n        std::cout &lt;&lt; T-&gt;values[i] &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/** Move one disc from one tower to another\n * \\param [in,out] From tower to move disk *from*\n * \\param [in,out] To  tower to move disk *to*\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">mov</span><span class=\"hljs-params\">(tower *From, tower *To)</span> </span>{\n    --From-&gt;top;\n    To-&gt;values[To-&gt;top] = From-&gt;values[From-&gt;top];\n    ++To-&gt;top;\n}\n\n<span class=\"hljs-comment\">/**\n * Recursive algorithm to solve the puzzle\n * \\param [in] n starting number of disks\n * \\param [in,out] From  tower to move disks from\n * \\param [in,out] Using temporary tower for the puzzle\n * \\param [in,out] To  tower to move disk to\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">TH</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n, tower *From, tower *Using, tower *To)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-built_in\">mov</span>(From, To);\n        <span class=\"hljs-built_in\">show</span>(From, To, Using);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">TH</span>(n - <span class=\"hljs-number\">1</span>, From, To, Using);\n        <span class=\"hljs-built_in\">mov</span>(From, To);\n        <span class=\"hljs-built_in\">show</span>(From, To, Using);\n        <span class=\"hljs-built_in\">TH</span>(n - <span class=\"hljs-number\">1</span>, Using, From, To);\n    }\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">tower</span> F, U, T;\n\n    F.top = <span class=\"hljs-number\">0</span>;\n    U.top = <span class=\"hljs-number\">0</span>;\n    T.top = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-type\">int</span> no;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter number of discs : &quot;</span>;\n    std::cin &gt;&gt; no;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = no; i &gt; <span class=\"hljs-number\">0</span>; i--) {\n        F.values[F.top++] = i;\n    }\n\n    <span class=\"hljs-built_in\">show</span>(&amp;F, &amp;T, &amp;U);\n    <span class=\"hljs-built_in\">TH</span>(no, &amp;F, &amp;U, &amp;T);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Others/TowerOfHanoi.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/TowerOfHanoi.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TowerOfHanoi</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">shift</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n, String startPole, String intermediatePole, String endPole)</span> {\n    <span class=\"hljs-comment\">// if n becomes zero the program returns thus ending the loop.</span>\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">// Shift function is called in recursion for swapping the n-1 disc from the startPole to the</span>\n      <span class=\"hljs-comment\">// intermediatePole</span>\n      shift(n - <span class=\"hljs-number\">1</span>, startPole, endPole, intermediatePole);\n      System.out.format(<span class=\"hljs-string\">&quot;Move %d from %s to %s\\n&quot;</span>, n, startPole, endPole); <span class=\"hljs-comment\">// Result Printing</span>\n      <span class=\"hljs-comment\">// Shift function is called in recursion for swapping the n-1 disc from the intermediatePole</span>\n      <span class=\"hljs-comment\">// to the endPole</span>\n      shift(n - <span class=\"hljs-number\">1</span>, intermediatePole, startPole, endPole);\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    System.out.print(<span class=\"hljs-string\">&quot;Enter number of discs on Pole 1: &quot;</span>);\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">numberOfDiscs</span> <span class=\"hljs-operator\">=</span> scanner.nextInt(); <span class=\"hljs-comment\">// input of number of discs on pole 1</span>\n    shift(numberOfDiscs, <span class=\"hljs-string\">&quot;Pole1&quot;</span>, <span class=\"hljs-string\">&quot;Pole2&quot;</span>, <span class=\"hljs-string\">&quot;Pole3&quot;</span>); <span class=\"hljs-comment\">// Shift function called</span>\n    scanner.close();\n  }\n}\n"
    },
    "c": {
      "dir": "misc/tower_of_hanoi.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/tower_of_hanoi.c",
      "code": "\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Function for Tower of Hanoi algorithm</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">hanoi</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> noOfDisks, <span class=\"hljs-type\">char</span> where, <span class=\"hljs-type\">char</span> to, <span class=\"hljs-type\">char</span> extra)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (noOfDisks != <span class=\"hljs-number\">0</span>)\n    {\n        hanoi(noOfDisks - <span class=\"hljs-number\">1</span>, where, extra, to);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Move disk : %d from %c to %c\\n&quot;</span>, noOfDisks, where, to);\n        hanoi(noOfDisks - <span class=\"hljs-number\">1</span>, extra, to, where);\n    }\n}\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> noOfDisks;\n\n    <span class=\"hljs-comment\">// Asks the number of disks in the tower</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of disks: \\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;noOfDisks);\n\n    hanoi(noOfDisks, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "dart": {
      "dir": "other/tower_of_hanoi.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/other/tower_of_hanoi.dart",
      "code": "moveDisk(<span class=\"hljs-built_in\">String</span> fp, <span class=\"hljs-built_in\">String</span> tp) {\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;moving disk from &#x27;</span> + fp + <span class=\"hljs-string\">&#x27; to &#x27;</span> + tp);\r\n}\r\n\r\nmoveTower(<span class=\"hljs-built_in\">int</span> height, <span class=\"hljs-keyword\">var</span> fromPole, <span class=\"hljs-keyword\">var</span> toPole, <span class=\"hljs-keyword\">var</span> withPole) {\r\n  <span class=\"hljs-keyword\">if</span> (height &gt;= <span class=\"hljs-number\">1</span>) {\r\n    moveTower(height - <span class=\"hljs-number\">1</span>, fromPole, withPole, fromPole);\r\n    moveDisk(fromPole, toPole);\r\n    moveTower(height - <span class=\"hljs-number\">1</span>, withPole, toPole, fromPole);\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-built_in\">int</span> height = <span class=\"hljs-number\">3</span>;\r\n  moveTower(height, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>);\r\n  <span class=\"hljs-comment\">/*\r\n  moving disk from A to A\r\n  moving disk from A to C\r\n  moving disk from A to C\r\n  moving disk from A to B\r\n  moving disk from C to A\r\n  moving disk from C to B\r\n  moving disk from A to B\r\n  */</span>\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "Aayush2011",
      "email": "72185339+Aayush2011@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
