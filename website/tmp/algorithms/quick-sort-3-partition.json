{
  "slug": "quick-sort-3-partition",
  "name": "Quick Sort 3 Partition",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/quick_sort_3_partition.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/quick_sort_3_partition.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort_3partition</span>(<span class=\"hljs-params\">sorting: <span class=\"hljs-built_in\">list</span>, left: <span class=\"hljs-built_in\">int</span>, right: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-keyword\">if</span> right &lt;= left:\n        <span class=\"hljs-keyword\">return</span>\n    a = i = left\n    b = right\n    pivot = sorting[left]\n    <span class=\"hljs-keyword\">while</span> i &lt;= b:\n        <span class=\"hljs-keyword\">if</span> sorting[i] &lt; pivot:\n            sorting[a], sorting[i] = sorting[i], sorting[a]\n            a += <span class=\"hljs-number\">1</span>\n            i += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">elif</span> sorting[i] &gt; pivot:\n            sorting[b], sorting[i] = sorting[i], sorting[b]\n            b -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            i += <span class=\"hljs-number\">1</span>\n    quick_sort_3partition(sorting, left, a - <span class=\"hljs-number\">1</span>)\n    quick_sort_3partition(sorting, b + <span class=\"hljs-number\">1</span>, right)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort_lomuto_partition</span>(<span class=\"hljs-params\">sorting: <span class=\"hljs-built_in\">list</span>, left: <span class=\"hljs-built_in\">int</span>, right: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A pure Python implementation of quick sort algorithm(in-place)\n    with Lomuto partition scheme:\n    https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme\n\n    :param sorting: sort list\n    :param left: left endpoint of sorting\n    :param right: right endpoint of sorting\n    :return: None\n\n    Examples:\n    &gt;&gt;&gt; nums1 = [0, 5, 3, 1, 2]\n    &gt;&gt;&gt; quick_sort_lomuto_partition(nums1, 0, 4)\n    &gt;&gt;&gt; nums1\n    [0, 1, 2, 3, 5]\n    &gt;&gt;&gt; nums2 = []\n    &gt;&gt;&gt; quick_sort_lomuto_partition(nums2, 0, 0)\n    &gt;&gt;&gt; nums2\n    []\n    &gt;&gt;&gt; nums3 = [-2, 5, 0, -4]\n    &gt;&gt;&gt; quick_sort_lomuto_partition(nums3, 0, 3)\n    &gt;&gt;&gt; nums3\n    [-4, -2, 0, 5]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> left &lt; right:\n        pivot_index = lomuto_partition(sorting, left, right)\n        quick_sort_lomuto_partition(sorting, left, pivot_index - <span class=\"hljs-number\">1</span>)\n        quick_sort_lomuto_partition(sorting, pivot_index + <span class=\"hljs-number\">1</span>, right)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lomuto_partition</span>(<span class=\"hljs-params\">sorting: <span class=\"hljs-built_in\">list</span>, left: <span class=\"hljs-built_in\">int</span>, right: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Example:\n    &gt;&gt;&gt; lomuto_partition([1,5,7,6], 0, 3)\n    2\n    &quot;&quot;&quot;</span>\n    pivot = sorting[right]\n    store_index = left\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(left, right):\n        <span class=\"hljs-keyword\">if</span> sorting[i] &lt; pivot:\n            sorting[store_index], sorting[i] = sorting[i], sorting[store_index]\n            store_index += <span class=\"hljs-number\">1</span>\n    sorting[right], sorting[store_index] = sorting[store_index], sorting[right]\n    <span class=\"hljs-keyword\">return</span> store_index\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">three_way_radix_quicksort</span>(<span class=\"hljs-params\">sorting: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Three-way radix quicksort:\n    https://en.wikipedia.org/wiki/Quicksort#Three-way_radix_quicksort\n    First divide the list into three parts.\n    Then recursively sort the &quot;less than&quot; and &quot;greater than&quot; partitions.\n\n    &gt;&gt;&gt; three_way_radix_quicksort([])\n    []\n    &gt;&gt;&gt; three_way_radix_quicksort([1])\n    [1]\n    &gt;&gt;&gt; three_way_radix_quicksort([-5, -2, 1, -2, 0, 1])\n    [-5, -2, -2, 0, 1, 1]\n    &gt;&gt;&gt; three_way_radix_quicksort([1, 2, 5, 1, 2, 0, 0, 5, 2, -1])\n    [-1, 0, 0, 1, 1, 2, 2, 2, 5, 5]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sorting) &lt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> sorting\n    <span class=\"hljs-keyword\">return</span> (\n        three_way_radix_quicksort([i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> sorting <span class=\"hljs-keyword\">if</span> i &lt; sorting[<span class=\"hljs-number\">0</span>]])\n        + [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> sorting <span class=\"hljs-keyword\">if</span> i == sorting[<span class=\"hljs-number\">0</span>]]\n        + three_way_radix_quicksort([i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> sorting <span class=\"hljs-keyword\">if</span> i &gt; sorting[<span class=\"hljs-number\">0</span>]])\n    )\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod(verbose=<span class=\"hljs-literal\">True</span>)\n\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    quick_sort_3partition(unsorted, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(unsorted) - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(unsorted)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "MarineJoker",
      "email": "hellowjbb@gmail.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hyuntae",
      "email": "hytae1993@hanamil.net",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
