{
  "slug": "matrixgraphs",
  "name": "MatrixGraphs",
  "categories": ["datastructures", "graphs"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Graphs/MatrixGraphs.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Graphs/MatrixGraphs.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Graphs;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MatrixGraphs</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n    <span class=\"hljs-type\">AdjacencyMatrixGraph</span> <span class=\"hljs-variable\">graph</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AdjacencyMatrixGraph</span>(<span class=\"hljs-number\">10</span>);\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>);\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);\n    graph.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n    graph.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n    graph.addEdge(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>);\n    graph.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n    System.out.println(graph);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AdjacencyMatrixGraph</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> _numberOfVertices;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> _numberOfEdges;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[][] _adjacency;\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">EDGE_EXIST</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">EDGE_NONE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AdjacencyMatrixGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> givenNumberOfVertices)</span> {\n    <span class=\"hljs-built_in\">this</span>.setNumberOfVertices(givenNumberOfVertices);\n    <span class=\"hljs-built_in\">this</span>.setNumberOfEdges(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">this</span>.setAdjacency(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[givenNumberOfVertices][givenNumberOfVertices]);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; givenNumberOfVertices; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; givenNumberOfVertices; j++) {\n        <span class=\"hljs-built_in\">this</span>.adjacency()[i][j] = AdjacencyMatrixGraph.EDGE_NONE;\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNumberOfVertices</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> newNumberOfVertices)</span> {\n    <span class=\"hljs-built_in\">this</span>._numberOfVertices = newNumberOfVertices;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfVertices</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._numberOfVertices;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setNumberOfEdges</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> newNumberOfEdges)</span> {\n    <span class=\"hljs-built_in\">this</span>._numberOfEdges = newNumberOfEdges;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfEdges</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._numberOfEdges;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAdjacency</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] newAdjacency)</span> {\n    <span class=\"hljs-built_in\">this</span>._adjacency = newAdjacency;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[][] adjacency() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._adjacency;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">adjacencyOfEdgeDoesExist</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">this</span>.adjacency()[from][to] != AdjacencyMatrixGraph.EDGE_NONE);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">vertexDoesExist</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> aVertex)</span> {\n    <span class=\"hljs-keyword\">if</span> (aVertex &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; aVertex &lt; <span class=\"hljs-built_in\">this</span>.numberOfVertices()) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">edgeDoesExist</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.vertexDoesExist(from) &amp;&amp; <span class=\"hljs-built_in\">this</span>.vertexDoesExist(to)) {\n      <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">this</span>.adjacencyOfEdgeDoesExist(from, to));\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * This method adds an edge to the graph between two specified vertices\n   *\n   * <span class=\"hljs-doctag\">@param</span> from the data of the vertex the edge is from\n   * <span class=\"hljs-doctag\">@param</span> to the data of the vertex the edge is going to\n   * <span class=\"hljs-doctag\">@return</span> returns true if the edge did not exist, return false if it already did\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.vertexDoesExist(from) &amp;&amp; <span class=\"hljs-built_in\">this</span>.vertexDoesExist(to)) {\n      <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.adjacencyOfEdgeDoesExist(from, to)) {\n        <span class=\"hljs-built_in\">this</span>.adjacency()[from][to] = AdjacencyMatrixGraph.EDGE_EXIST;\n        <span class=\"hljs-built_in\">this</span>.adjacency()[to][from] = AdjacencyMatrixGraph.EDGE_EXIST;\n        <span class=\"hljs-built_in\">this</span>.setNumberOfEdges(<span class=\"hljs-built_in\">this</span>.numberOfEdges() + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * this method removes an edge from the graph between two specified vertices\n   *\n   * <span class=\"hljs-doctag\">@param</span> from the data of the vertex the edge is from\n   * <span class=\"hljs-doctag\">@param</span> to the data of the vertex the edge is going to\n   * <span class=\"hljs-doctag\">@return</span> returns false if the edge doesn&#x27;t exist, returns true if the edge exists and is removed\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeEdge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.vertexDoesExist(from) || !<span class=\"hljs-built_in\">this</span>.vertexDoesExist(to)) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.adjacencyOfEdgeDoesExist(from, to)) {\n        <span class=\"hljs-built_in\">this</span>.adjacency()[from][to] = AdjacencyMatrixGraph.EDGE_NONE;\n        <span class=\"hljs-built_in\">this</span>.adjacency()[to][from] = AdjacencyMatrixGraph.EDGE_NONE;\n        <span class=\"hljs-built_in\">this</span>.setNumberOfEdges(<span class=\"hljs-built_in\">this</span>.numberOfEdges() - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * this gives a list of vertices in the graph and their adjacencies\n   *\n   * <span class=\"hljs-doctag\">@return</span> returns a string describing this graph\n   */</span>\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;    &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.numberOfVertices(); i++) {\n      s = s + String.valueOf(i) + <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    s = s + <span class=\"hljs-string\">&quot; \\n&quot;</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.numberOfVertices(); i++) {\n      s = s + String.valueOf(i) + <span class=\"hljs-string\">&quot; : &quot;</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-built_in\">this</span>.numberOfVertices(); j++) {\n        s = s + String.valueOf(<span class=\"hljs-built_in\">this</span>._adjacency[i][j]) + <span class=\"hljs-string\">&quot; &quot;</span>;\n      }\n      s = s + <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> s;\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "JeonSeongBae",
      "email": "tjdqo6042@naver.com",
      "commits": 1
    },
    {
      "name": "cnuhoya",
      "email": "dk00426@naver.com",
      "commits": 1
    },
    {
      "name": "Harsha",
      "email": "Harsha@Harshas-MacBook-Pro.local",
      "commits": 1
    },
    {
      "name": "MaengMaeng",
      "email": "maybe0728@nate.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
