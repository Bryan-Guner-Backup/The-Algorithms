{
  "slug": "rabin-karp-search",
  "name": "Rabin Karp Search",
  "categories": ["searches", "patternsearch"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "searching/pattern_search/rabin_karp_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching/pattern_search/rabin_karp_search.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/* Kabin-Karp algorithm for pattern searching\n   d: radix-d notation. Ex. number from 0-&gt;9, d = 10\n   q: prime number for hashing */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">rabin_karp_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">char</span> *pattern, <span class=\"hljs-type\">int</span> d, <span class=\"hljs-type\">int</span> q)</span>\n{\n    <span class=\"hljs-type\">int</span> len_str = <span class=\"hljs-built_in\">strlen</span>(str);\n    <span class=\"hljs-type\">int</span> len_pat = <span class=\"hljs-built_in\">strlen</span>(pattern);\n    <span class=\"hljs-type\">int</span> i, h = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> hash_s = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* hash value for string text */</span>\n    <span class=\"hljs-type\">int</span> hash_p = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* hash value for pattern */</span>\n\n    <span class=\"hljs-comment\">/* h = pow(d, len_pat - 1) % q */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len_pat - <span class=\"hljs-number\">1</span>; i++) h = d * h % q;\n    <span class=\"hljs-comment\">/* Calculating hashing of pattern and the 1st window of text */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len_pat; i++)\n    {\n        hash_p = (d * hash_p + pattern[i]) % q;\n        hash_s = (d * hash_s + str[i]) % q;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= len_str - len_pat; i++)\n    {\n        <span class=\"hljs-comment\">/* Check hash value of current window of text, and pattern\n           If it is match, check each character to make sure pattern\n           is match with current window of text */</span>\n        <span class=\"hljs-keyword\">if</span> (hash_p == hash_s)\n        {\n            <span class=\"hljs-type\">int</span> j;\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; len_pat; j++)\n            {\n                <span class=\"hljs-keyword\">if</span> (pattern[j] != str[i + j])\n                    <span class=\"hljs-keyword\">break</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (len_pat == j)\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;--Pattern is found at: %d\\n&quot;</span>, i);\n        }\n        <span class=\"hljs-comment\">/* Calculate hash value for next window by removing the leading\n           element of current window text, and adding its trailing */</span>\n        hash_s = (d * (hash_s - str[i] * h) + str[i + len_pat]) % q;\n        <span class=\"hljs-comment\">/* Converting hash value to positive when it is negative */</span>\n        <span class=\"hljs-keyword\">if</span> (hash_s &lt; <span class=\"hljs-number\">0</span>)\n            hash_s = hash_s + q;\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">char</span> str[] = <span class=\"hljs-string\">&quot;AABCAB12AFAABCABFFEGABCAB&quot;</span>;\n    <span class=\"hljs-type\">char</span> pat1[] = <span class=\"hljs-string\">&quot;ABCAB&quot;</span>;\n    <span class=\"hljs-type\">char</span> pat2[] = <span class=\"hljs-string\">&quot;FFF&quot;</span>; <span class=\"hljs-comment\">/* not found */</span>\n    <span class=\"hljs-type\">char</span> pat3[] = <span class=\"hljs-string\">&quot;CAB&quot;</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;String test: %s\\n&quot;</span>, str);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test1: search pattern %s\\n&quot;</span>, pat1);\n    rabin_karp_search(str, pat1, <span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">29</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test2: search pattern %s\\n&quot;</span>, pat2);\n    rabin_karp_search(str, pat2, <span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">29</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test3: search pattern %s\\n&quot;</span>, pat3);\n    rabin_karp_search(str, pat3, <span class=\"hljs-number\">256</span>, <span class=\"hljs-number\">29</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
