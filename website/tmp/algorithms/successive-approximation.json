{
  "slug": "successive-approximation",
  "name": "Successive Approximation",
  "categories": ["numericalmethods"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods/successive_approximation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/successive_approximation.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief Method of successive approximations using [fixed-point\n * iteration](https://en.wikipedia.org/wiki/Fixed-point_iteration) method\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** equation 1\n * \\f[f(y) = 3y - \\cos y -2\\f]\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-title\">eq</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> y)</span> </span>{ <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">3</span> * y) - <span class=\"hljs-built_in\">cos</span>(y) - <span class=\"hljs-number\">2</span>; }\n\n<span class=\"hljs-comment\">/** equation 2\n * \\f[f(y) = \\frac{\\cos y+2}{2}\\f]\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-title\">eqd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> y)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0.5</span> * (<span class=\"hljs-built_in\">cos</span>(y) + <span class=\"hljs-number\">2</span>); }\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">float</span> y, x1, x2, x3, sum, s, a, f1, f2, gd;\n    <span class=\"hljs-type\">int</span> i, n;\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n        sum = <span class=\"hljs-built_in\">eq</span>(y);\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;value of equation at &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; sum &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        y++;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;enter the x1-&gt;&quot;</span>;\n    std::cin &gt;&gt; x1;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;enter the no iteration to perform-&gt;\\n&quot;</span>;\n    std::cin &gt;&gt; n;\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\n        x2 = <span class=\"hljs-built_in\">eqd</span>(x1);\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nenter the x2-&gt;&quot;</span> &lt;&lt; x2;\n        x1 = x2;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
