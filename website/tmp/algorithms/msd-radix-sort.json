{
  "slug": "msd-radix-sort",
  "name": "Msd Radix Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/msd_radix_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/msd_radix_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nPython implementation of the MSD radix sort algorithm.\nIt used the binary representation of the integers to sort\nthem.\nhttps://en.wikipedia.org/wiki/Radix_sort\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">msd_radix_sort</span>(<span class=\"hljs-params\">list_of_ints: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Implementation of the MSD radix sort algorithm. Only works\n    with positive integers\n    :param list_of_ints: A list of integers\n    :return: Returns the sorted list\n    &gt;&gt;&gt; msd_radix_sort([40, 12, 1, 100, 4])\n    [1, 4, 12, 40, 100]\n    &gt;&gt;&gt; msd_radix_sort([])\n    []\n    &gt;&gt;&gt; msd_radix_sort([123, 345, 123, 80])\n    [80, 123, 123, 345]\n    &gt;&gt;&gt; msd_radix_sort([1209, 834598, 1, 540402, 45])\n    [1, 45, 1209, 540402, 834598]\n    &gt;&gt;&gt; msd_radix_sort([-1, 34, 45])\n    Traceback (most recent call last):\n    ...\n    ValueError: All numbers must be positive\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> list_of_ints:\n        <span class=\"hljs-keyword\">return</span> []\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">min</span>(list_of_ints) &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;All numbers must be positive&quot;</span>)\n\n    most_bits = <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">bin</span>(x)[<span class=\"hljs-number\">2</span>:]) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> list_of_ints)\n    <span class=\"hljs-keyword\">return</span> _msd_radix_sort(list_of_ints, most_bits)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_msd_radix_sort</span>(<span class=\"hljs-params\">list_of_ints: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], bit_position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Sort the given list based on the bit at bit_position. Numbers with a\n    0 at that position will be at the start of the list, numbers with a\n    1 at the end.\n    :param list_of_ints: A list of integers\n    :param bit_position: the position of the bit that gets compared\n    :return: Returns a partially sorted list\n    &gt;&gt;&gt; _msd_radix_sort([45, 2, 32], 1)\n    [2, 32, 45]\n    &gt;&gt;&gt; _msd_radix_sort([10, 4, 12], 2)\n    [4, 12, 10]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> bit_position == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(list_of_ints) <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]:\n        <span class=\"hljs-keyword\">return</span> list_of_ints\n\n    zeros = <span class=\"hljs-built_in\">list</span>()\n    ones = <span class=\"hljs-built_in\">list</span>()\n    <span class=\"hljs-comment\"># Split numbers based on bit at bit_position from the right</span>\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> list_of_ints:\n        <span class=\"hljs-keyword\">if</span> (number &gt;&gt; (bit_position - <span class=\"hljs-number\">1</span>)) &amp; <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-comment\"># number has a one at bit bit_position</span>\n            ones.append(number)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># number has a zero at bit bit_position</span>\n            zeros.append(number)\n\n    <span class=\"hljs-comment\"># recursively split both lists further</span>\n    zeros = _msd_radix_sort(zeros, bit_position - <span class=\"hljs-number\">1</span>)\n    ones = _msd_radix_sort(ones, bit_position - <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-comment\"># recombine lists</span>\n    res = zeros\n    res.extend(ones)\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">msd_radix_sort_inplace</span>(<span class=\"hljs-params\">list_of_ints: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Inplace implementation of the MSD radix sort algorithm.\n    Sorts based on the binary representation of the integers.\n    &gt;&gt;&gt; lst = [1, 345, 23, 89, 0, 3]\n    &gt;&gt;&gt; msd_radix_sort_inplace(lst)\n    &gt;&gt;&gt; lst == sorted(lst)\n    True\n    &gt;&gt;&gt; lst = [1, 43, 0, 0, 0, 24, 3, 3]\n    &gt;&gt;&gt; msd_radix_sort_inplace(lst)\n    &gt;&gt;&gt; lst == sorted(lst)\n    True\n    &gt;&gt;&gt; lst = []\n    &gt;&gt;&gt; msd_radix_sort_inplace(lst)\n    &gt;&gt;&gt; lst == []\n    True\n    &gt;&gt;&gt; lst = [-1, 34, 23, 4, -42]\n    &gt;&gt;&gt; msd_radix_sort_inplace(lst)\n    Traceback (most recent call last):\n    ...\n    ValueError: All numbers must be positive\n    &quot;&quot;&quot;</span>\n\n    length = <span class=\"hljs-built_in\">len</span>(list_of_ints)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> list_of_ints <span class=\"hljs-keyword\">or</span> length == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">min</span>(list_of_ints) &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;All numbers must be positive&quot;</span>)\n\n    most_bits = <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">bin</span>(x)[<span class=\"hljs-number\">2</span>:]) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> list_of_ints)\n    _msd_radix_sort_inplace(list_of_ints, most_bits, <span class=\"hljs-number\">0</span>, length)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_msd_radix_sort_inplace</span>(<span class=\"hljs-params\">\n    list_of_ints: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], bit_position: <span class=\"hljs-built_in\">int</span>, begin_index: <span class=\"hljs-built_in\">int</span>, end_index: <span class=\"hljs-built_in\">int</span>\n</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Sort the given list based on the bit at bit_position. Numbers with a\n    0 at that position will be at the start of the list, numbers with a\n    1 at the end.\n    &gt;&gt;&gt; lst = [45, 2, 32, 24, 534, 2932]\n    &gt;&gt;&gt; _msd_radix_sort_inplace(lst, 1, 0, 3)\n    &gt;&gt;&gt; lst == [32, 2, 45, 24, 534, 2932]\n    True\n    &gt;&gt;&gt; lst = [0, 2, 1, 3, 12, 10, 4, 90, 54, 2323, 756]\n    &gt;&gt;&gt; _msd_radix_sort_inplace(lst, 2, 4, 7)\n    &gt;&gt;&gt; lst == [0, 2, 1, 3, 12, 4, 10, 90, 54, 2323, 756]\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> bit_position == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> end_index - begin_index &lt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span>\n\n    bit_position -= <span class=\"hljs-number\">1</span>\n\n    i = begin_index\n    j = end_index - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> i &lt;= j:\n        changed = <span class=\"hljs-literal\">False</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> ((list_of_ints[i] &gt;&gt; bit_position) &amp; <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-comment\"># found zero at the beginning</span>\n            i += <span class=\"hljs-number\">1</span>\n            changed = <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">if</span> (list_of_ints[j] &gt;&gt; bit_position) &amp; <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-comment\"># found one at the end</span>\n            j -= <span class=\"hljs-number\">1</span>\n            changed = <span class=\"hljs-literal\">True</span>\n\n        <span class=\"hljs-keyword\">if</span> changed:\n            <span class=\"hljs-keyword\">continue</span>\n\n        list_of_ints[i], list_of_ints[j] = list_of_ints[j], list_of_ints[i]\n        j -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> j == i:\n            i += <span class=\"hljs-number\">1</span>\n\n    _msd_radix_sort_inplace(list_of_ints, bit_position, begin_index, i)\n    _msd_radix_sort_inplace(list_of_ints, bit_position, i, end_index)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Sorters/String/MsdRadixStringSorter.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/String/MsdRadixStringSorter.cs",
      "code": "<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.String</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Radix sort is a non-comparative sorting algorithm. It avoids comparison by creating</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and distributing elements into buckets according to their radix.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Radix sorts can be implemented to start at either the most significant digit (MSD)</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     or least significant digit (LSD).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     MSD radix sorts are most suitable for sorting array of strings with variable length</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     in lexicographical order.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MsdRadixStringSorter</span> : <span class=\"hljs-title\">IStringSorter</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sort array of strings using MSD radix sort algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span>[] array</span>)</span> =&gt; Sort(array, <span class=\"hljs-number\">0</span>, array.Length - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[array.Length]);\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span>[] array, <span class=\"hljs-built_in\">int</span> l, <span class=\"hljs-built_in\">int</span> r, <span class=\"hljs-built_in\">int</span> d, <span class=\"hljs-built_in\">string</span>[] temp</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (l &gt;= r)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> k = <span class=\"hljs-number\">256</span>;\n\n            <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[k + <span class=\"hljs-number\">2</span>];\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = l; i &lt;= r; i++)\n            {\n                <span class=\"hljs-keyword\">var</span> j = Key(array[i]);\n                count[j + <span class=\"hljs-number\">2</span>]++;\n            }\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; count.Length; i++)\n            {\n                count[i] += count[i - <span class=\"hljs-number\">1</span>];\n            }\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = l; i &lt;= r; i++)\n            {\n                <span class=\"hljs-keyword\">var</span> j = Key(array[i]);\n                temp[count[j + <span class=\"hljs-number\">1</span>]++] = array[i];\n            }\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = l; i &lt;= r; i++)\n            {\n                array[i] = temp[i - l];\n            }\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; k; i++)\n            {\n                Sort(array, l + count[i], l + count[i + <span class=\"hljs-number\">1</span>] - <span class=\"hljs-number\">1</span>, d + <span class=\"hljs-number\">1</span>, temp);\n            }\n\n            <span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Key</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s</span>)</span> =&gt; d &gt;= s.Length ? <span class=\"hljs-number\">-1</span> : s[d];\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Tobias",
      "email": "38182275+Txbias@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
