{
  "slug": "vector3-for-2d-rendering",
  "name": "Vector3 for 2d Rendering",
  "categories": ["graphics"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphics/vector3_for_2d_rendering.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphics/vector3_for_2d_rendering.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nrender 3d points for 2d surfaces.\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> math\n\n__version__ = <span class=\"hljs-string\">&quot;2020.9.26&quot;</span>\n__author__ = <span class=\"hljs-string\">&quot;xcodz-dot, cclaus, dhruvmanila&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">convert_to_2d</span>(<span class=\"hljs-params\">\n    x: <span class=\"hljs-built_in\">float</span>, y: <span class=\"hljs-built_in\">float</span>, z: <span class=\"hljs-built_in\">float</span>, scale: <span class=\"hljs-built_in\">float</span>, distance: <span class=\"hljs-built_in\">float</span>\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Converts 3d point to a 2d drawable point\n\n    &gt;&gt;&gt; convert_to_2d(1.0, 2.0, 3.0, 10.0, 10.0)\n    (7.6923076923076925, 15.384615384615385)\n\n    &gt;&gt;&gt; convert_to_2d(1, 2, 3, 10, 10)\n    (7.6923076923076925, 15.384615384615385)\n\n    &gt;&gt;&gt; convert_to_2d(&quot;1&quot;, 2, 3, 10, 10)  # &#x27;1&#x27; is str\n    Traceback (most recent call last):\n        ...\n    TypeError: Input values must either be float or int: [&#x27;1&#x27;, 2, 3, 10, 10]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>(<span class=\"hljs-built_in\">isinstance</span>(val, (<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">int</span>)) <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">locals</span>().values()):\n        <span class=\"hljs-keyword\">raise</span> TypeError(\n            <span class=\"hljs-string\">&quot;Input values must either be float or int: &quot;</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">locals</span>().values())}</span>&quot;</span>\n        )\n    projected_x = ((x * distance) / (z + distance)) * scale\n    projected_y = ((y * distance) / (z + distance)) * scale\n    <span class=\"hljs-keyword\">return</span> projected_x, projected_y\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rotate</span>(<span class=\"hljs-params\">\n    x: <span class=\"hljs-built_in\">float</span>, y: <span class=\"hljs-built_in\">float</span>, z: <span class=\"hljs-built_in\">float</span>, axis: <span class=\"hljs-built_in\">str</span>, angle: <span class=\"hljs-built_in\">float</span>\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    rotate a point around a certain axis with a certain angle\n    angle can be any integer between 1, 360 and axis can be any one of\n    &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;\n\n    &gt;&gt;&gt; rotate(1.0, 2.0, 3.0, &#x27;y&#x27;, 90.0)\n    (3.130524675073759, 2.0, 0.4470070007889556)\n\n    &gt;&gt;&gt; rotate(1, 2, 3, &quot;z&quot;, 180)\n    (0.999736015495891, -2.0001319704760485, 3)\n\n    &gt;&gt;&gt; rotate(&#x27;1&#x27;, 2, 3, &quot;z&quot;, 90.0)  # &#x27;1&#x27; is str\n    Traceback (most recent call last):\n        ...\n    TypeError: Input values except axis must either be float or int: [&#x27;1&#x27;, 2, 3, 90.0]\n\n    &gt;&gt;&gt; rotate(1, 2, 3, &quot;n&quot;, 90)  # &#x27;n&#x27; is not a valid axis\n    Traceback (most recent call last):\n        ...\n    ValueError: not a valid axis, choose one of &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;\n\n    &gt;&gt;&gt; rotate(1, 2, 3, &quot;x&quot;, -90)\n    (1, -2.5049096187183877, -2.5933429780983657)\n\n    &gt;&gt;&gt; rotate(1, 2, 3, &quot;x&quot;, 450)  # 450 wrap around to 90\n    (1, 3.5776792428178217, -0.44744970165427644)\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(axis, <span class=\"hljs-built_in\">str</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Axis must be a str&quot;</span>)\n    input_variables = <span class=\"hljs-built_in\">locals</span>()\n    <span class=\"hljs-keyword\">del</span> input_variables[<span class=\"hljs-string\">&quot;axis&quot;</span>]\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">all</span>(<span class=\"hljs-built_in\">isinstance</span>(val, (<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">int</span>)) <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> input_variables.values()):\n        <span class=\"hljs-keyword\">raise</span> TypeError(\n            <span class=\"hljs-string\">&quot;Input values except axis must either be float or int: &quot;</span>\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">list</span>(input_variables.values())}</span>&quot;</span>\n        )\n    angle = (angle % <span class=\"hljs-number\">360</span>) / <span class=\"hljs-number\">450</span> * <span class=\"hljs-number\">180</span> / math.pi\n    <span class=\"hljs-keyword\">if</span> axis == <span class=\"hljs-string\">&quot;z&quot;</span>:\n        new_x = x * math.cos(angle) - y * math.sin(angle)\n        new_y = y * math.cos(angle) + x * math.sin(angle)\n        new_z = z\n    <span class=\"hljs-keyword\">elif</span> axis == <span class=\"hljs-string\">&quot;x&quot;</span>:\n        new_y = y * math.cos(angle) - z * math.sin(angle)\n        new_z = z * math.cos(angle) + y * math.sin(angle)\n        new_x = x\n    <span class=\"hljs-keyword\">elif</span> axis == <span class=\"hljs-string\">&quot;y&quot;</span>:\n        new_x = x * math.cos(angle) - z * math.sin(angle)\n        new_z = z * math.cos(angle) + x * math.sin(angle)\n        new_y = y\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;not a valid axis, choose one of &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;&quot;</span>)\n\n    <span class=\"hljs-keyword\">return</span> new_x, new_y, new_z\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{convert_to_2d(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-number\">10.0</span>, <span class=\"hljs-number\">10.0</span>) = }</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{rotate(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">3.0</span>, <span class=\"hljs-string\">&#x27;y&#x27;</span>, <span class=\"hljs-number\">90.0</span>) = }</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "xcodz-dot",
      "email": "71920621+xcodz-dot@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
