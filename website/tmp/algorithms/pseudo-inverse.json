{
  "slug": "pseudo-inverse",
  "name": "Pseudo-Inverse",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Numeric/Pseudoinverse/PseudoInverse.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Numeric/Pseudoinverse/PseudoInverse.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> Algorithms.Numeric.Decomposition;\n<span class=\"hljs-keyword\">using</span> Utilities.Extensions;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric.Pseudoinverse</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The Moore–Penrose pseudo-inverse A+ of a matrix A,</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is a general way to find the solution to the following system of linear equations:</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     ~b = A ~y. ~b e R^m; ~y e R^n; A e Rm×n.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     There are varios methods for construction the pseudo-inverse.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This one is based on Singular Value Decomposition (SVD).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PseudoInverse</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Return the pseudoinverse of a matrix based on the Moore-Penrose Algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     using Singular Value Decomposition (SVD).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;inMat&quot;&gt;</span>Input matrix to find its inverse to.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The inverse matrix approximation of the input matrix.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span>[,] PInv(<span class=\"hljs-built_in\">double</span>[,] inMat)\n        {\n            <span class=\"hljs-comment\">// To compute the SVD of the matrix to find Sigma.</span>\n            <span class=\"hljs-keyword\">var</span> (u, s, v) = ThinSvd.Decompose(inMat);\n\n            <span class=\"hljs-comment\">// To take the reciprocal of each non-zero element on the diagonal.</span>\n            <span class=\"hljs-keyword\">var</span> len = s.Length;\n\n            <span class=\"hljs-keyword\">var</span> sigma = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[len];\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++)\n            {\n                sigma[i] = Math.Abs(s[i]) &lt; <span class=\"hljs-number\">0.0001</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span> / s[i];\n            }\n\n            <span class=\"hljs-comment\">// To construct a diagonal matrix based on the vector result.</span>\n            <span class=\"hljs-keyword\">var</span> diag = sigma.ToDiagonalMatrix();\n\n            <span class=\"hljs-comment\">// To construct the pseudo-inverse using the computed information above.</span>\n            <span class=\"hljs-keyword\">var</span> matinv = u.Multiply(diag).Multiply(v.Transpose());\n\n            <span class=\"hljs-comment\">// To Transpose the result matrix.</span>\n            <span class=\"hljs-keyword\">return</span> matinv.Transpose();\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
