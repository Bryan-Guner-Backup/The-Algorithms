{
  "slug": "password-generator",
  "name": "Password Generator",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/password_generator.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/password_generator.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Password generator allows you to generate a random password of length N.&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> choice, shuffle\n<span class=\"hljs-keyword\">from</span> string <span class=\"hljs-keyword\">import</span> ascii_letters, digits, punctuation\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">password_generator</span>(<span class=\"hljs-params\">length=<span class=\"hljs-number\">8</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; len(password_generator())\n    8\n    &gt;&gt;&gt; len(password_generator(length=16))\n    16\n    &gt;&gt;&gt; len(password_generator(257))\n    257\n    &gt;&gt;&gt; len(password_generator(length=0))\n    0\n    &gt;&gt;&gt; len(password_generator(-1))\n    0\n    &quot;&quot;&quot;</span>\n    chars = ascii_letters + digits + punctuation\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(choice(chars) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length))\n\n\n<span class=\"hljs-comment\"># ALTERNATIVE METHODS</span>\n<span class=\"hljs-comment\"># ctbi= characters that must be in password</span>\n<span class=\"hljs-comment\"># i= how many letters or characters the password length will be</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">alternative_password_generator</span>(<span class=\"hljs-params\">ctbi, i</span>):\n    <span class=\"hljs-comment\"># Password generator = full boot with random_number, random_letters, and</span>\n    <span class=\"hljs-comment\"># random_character FUNCTIONS</span>\n    <span class=\"hljs-comment\"># Put your code here...</span>\n    i = i - <span class=\"hljs-built_in\">len</span>(ctbi)\n    quotient = <span class=\"hljs-built_in\">int</span>(i / <span class=\"hljs-number\">3</span>)\n    remainder = i % <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-comment\"># chars = ctbi + random_letters(ascii_letters, i / 3 + remainder) +</span>\n    <span class=\"hljs-comment\">#     random_number(digits, i / 3) + random_characters(punctuation, i / 3)</span>\n    chars = (\n        ctbi\n        + random(ascii_letters, quotient + remainder)\n        + random(digits, quotient)\n        + random(punctuation, quotient)\n    )\n    chars = <span class=\"hljs-built_in\">list</span>(chars)\n    shuffle(chars)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(chars)\n\n    <span class=\"hljs-comment\"># random is a generalised function for letters, characters and numbers</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random</span>(<span class=\"hljs-params\">ctbi, i</span>):\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(choice(ctbi) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_number</span>(<span class=\"hljs-params\">ctbi, i</span>):\n    <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># Put your code here...</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_letters</span>(<span class=\"hljs-params\">ctbi, i</span>):\n    <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># Put your code here...</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_characters</span>(<span class=\"hljs-params\">ctbi, i</span>):\n    <span class=\"hljs-keyword\">pass</span>  <span class=\"hljs-comment\"># Put your code here...</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    length = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Please indicate the max length of your password: &quot;</span>).strip())\n    ctbi = <span class=\"hljs-built_in\">input</span>(\n        <span class=\"hljs-string\">&quot;Please indicate the characters that must be in your password: &quot;</span>\n    ).strip()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Password generated:&quot;</span>, password_generator(length))\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;Alternative Password generated:&quot;</span>, alternative_password_generator(ctbi, length)\n    )\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;[If you are thinking of using this passsword, You better save it.]&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "go": {
      "dir": "other/passwordgenerator/passwordgenerator.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/other/passwordgenerator/passwordgenerator.go",
      "code": "<span class=\"hljs-comment\">// This program generates a password from a list of possible chars</span>\n<span class=\"hljs-comment\">// You must provide a minimum length and a maximum length</span>\n<span class=\"hljs-comment\">// This length is not fixed if you generate multiple passwords for the same range</span>\n\n<span class=\"hljs-keyword\">package</span> passwordgenerator\n\n<span class=\"hljs-keyword\">import</span> (\n\tcrand <span class=\"hljs-string\">&quot;crypto/rand&quot;</span>\n\t<span class=\"hljs-string\">&quot;io&quot;</span>\n\t<span class=\"hljs-string\">&quot;math/rand&quot;</span>\n)\n\n<span class=\"hljs-comment\">// GeneratePassword returns a newly generated password</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GeneratePassword</span><span class=\"hljs-params\">(minLength <span class=\"hljs-keyword\">int</span>, maxLength <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">var</span> chars = []<span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()-_=+,.?/:;{}[]`~&quot;</span>)\n\n\t<span class=\"hljs-keyword\">var</span> length = rand.Intn(maxLength-minLength) + minLength\n\n\tnewPassword := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">byte</span>, length)\n\trandomData := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">byte</span>, length+(length/<span class=\"hljs-number\">4</span>))\n\tclen := <span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-built_in\">len</span>(chars))\n\tmaxrb := <span class=\"hljs-keyword\">byte</span>(<span class=\"hljs-number\">256</span> - (<span class=\"hljs-number\">256</span> % <span class=\"hljs-built_in\">len</span>(chars)))\n\ti := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> {\n\t\t<span class=\"hljs-keyword\">if</span> _, err := io.ReadFull(crand.Reader, randomData); err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-built_in\">panic</span>(err)\n\t\t}\n\t\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> randomData {\n\t\t\t<span class=\"hljs-keyword\">if</span> c &gt;= maxrb {\n\t\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t\t}\n\t\t\tnewPassword[i] = chars[c%clen]\n\t\t\ti++\n\t\t\t<span class=\"hljs-keyword\">if</span> i == length {\n\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">string</span>(newPassword)\n\t\t\t}\n\t\t}\n\t}\n}\n\n<span class=\"hljs-comment\">// func main() {</span>\n<span class=\"hljs-comment\">// \trand.Seed(time.Now().Unix())</span>\n\n<span class=\"hljs-comment\">// \tfmt.Print(&quot;Please specify a minimum length: &quot;)</span>\n<span class=\"hljs-comment\">// \tvar minLength int</span>\n<span class=\"hljs-comment\">// \tfmt.Scanf(&quot;%d&quot;, &amp;minLength)</span>\n\n<span class=\"hljs-comment\">// \tfmt.Print(&quot;Please specify a maximum length: &quot;)</span>\n<span class=\"hljs-comment\">// \tvar maxLength int</span>\n<span class=\"hljs-comment\">// \tfmt.Scanf(&quot;%d&quot;, &amp;maxLength)</span>\n\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;Your generated password is %v\\n&quot;, generatePassword(minLength, maxLength))</span>\n<span class=\"hljs-comment\">// }</span>\n"
    }
  },
  "contributors": [
    {
      "name": "CodeB9",
      "email": "codeb38@gmail.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "Hector S",
      "email": "hfsam88@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "akankshamahajan99",
      "email": "47140026+akankshamahajan99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Ridiculous Ate",
      "email": "programmingdedication@gmail.com",
      "commits": 1
    },
    {
      "name": "edawine",
      "email": "sutanto.maxedwin@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
