{
  "slug": "fenwick-tree",
  "name": "Fenwick Tree",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/fenwick_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/fenwick_tree.py",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FenwickTree</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, SIZE</span>):  <span class=\"hljs-comment\"># create fenwick tree with size SIZE</span>\n        self.Size = SIZE\n        self.ft = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, SIZE)]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">self, i, val</span>):  <span class=\"hljs-comment\"># update data (adding) in index i in O(lg N)</span>\n        <span class=\"hljs-keyword\">while</span> i &lt; self.Size:\n            self.ft[i] += val\n            i += i &amp; (-i)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">query</span>(<span class=\"hljs-params\">self, i</span>):  <span class=\"hljs-comment\"># query cumulative data from index 0 to i in O(lg N)</span>\n        ret = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span> i &gt; <span class=\"hljs-number\">0</span>:\n            ret += self.ft[i]\n            i -= i &amp; (-i)\n        <span class=\"hljs-keyword\">return</span> ret\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    f = FenwickTree(<span class=\"hljs-number\">100</span>)\n    f.update(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>)\n    f.update(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">1</span>))\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">3</span>))\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">4</span>))\n    f.update(<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">5</span>)\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">1</span>))\n    <span class=\"hljs-built_in\">print</span>(f.query(<span class=\"hljs-number\">3</span>))\n"
    },
    "c-plus-plus": {
      "dir": "range_queries/fenwick_tree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/range_queries/fenwick_tree.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Fenwick tree\n *\n * A Fenwick tree or binary indexed tree is a data structure\n * that can efficiently update elements and calculate\n * prefix sums in a table of numbers.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * n --&gt; No. of elements present in input array.\n * bit[0..n] --&gt; Array that represents Binary Indexed Tree.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FenwickTree</span> {\n    <span class=\"hljs-type\">int</span> n;\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; bit;\n\n    <span class=\"hljs-comment\">/** Returns the highest power of two which is not more than x */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">offset</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{ <span class=\"hljs-keyword\">return</span> (x &amp; (-x)); }\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/** Constructor\n     * \\param[in] arr --&gt; Input array for which prefix sum is evaluated.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">FenwickTree</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&amp; arr)</span> </span>{\n        n = arr.<span class=\"hljs-built_in\">size</span>();\n        bit.<span class=\"hljs-built_in\">assign</span>(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n            <span class=\"hljs-built_in\">update</span>(i, arr[i]);\n        }\n    }\n\n    <span class=\"hljs-comment\">/** Constructor\n     * \\param[in] x --&gt; Size of array that represents Binary Indexed Tree.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">FenwickTree</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\n        n = x;\n        bit.<span class=\"hljs-built_in\">assign</span>(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n    }\n\n    <span class=\"hljs-comment\">/** Add val at id */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id, <span class=\"hljs-type\">int</span> val)</span> </span>{\n        id++;\n        <span class=\"hljs-keyword\">while</span> (id &lt;= n) {\n            bit[id] += val;\n            id += <span class=\"hljs-built_in\">offset</span>(id);\n        }\n    }\n\n    <span class=\"hljs-comment\">/** Get prefix sum upto id */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span> </span>{\n        id++;\n        <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">while</span> (id &gt; <span class=\"hljs-number\">0</span>) {\n            res += bit[id];\n            id -= <span class=\"hljs-built_in\">offset</span>(id);\n        }\n        <span class=\"hljs-keyword\">return</span> res;\n    }\n\n    <span class=\"hljs-comment\">/** Returns the prefix sum in range from l to r */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum_range</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(r) - <span class=\"hljs-built_in\">sum</span>(l - <span class=\"hljs-number\">1</span>); }\n};\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">5</span>;\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; arr = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>};\n    <span class=\"hljs-function\">FenwickTree <span class=\"hljs-title\">fenwick_tree</span><span class=\"hljs-params\">(arr)</span></span>;\n\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">6</span>);\n    fenwick_tree.<span class=\"hljs-built_in\">update</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">8</span>);\n    <span class=\"hljs-built_in\">assert</span>(fenwick_tree.<span class=\"hljs-built_in\">sum_range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">11</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "DDullahan",
      "email": "DDullahan@163.com",
      "commits": 1
    },
    {
      "name": "matgrz1993",
      "email": "matgrz1993@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Sarot Busala",
      "email": "sabuza97@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
