{
  "slug": "shell-sort",
  "name": "Shell Sort",
  "categories": ["sorts"],
  "body": {
    "es": "<h4>Declaración de problema</h4>\n<p>Dada una matriz no ordenada de <code>n</code> elementos, escriba una función para ordenar la matriz.</p>\n<h4>Enfoque</h4>\n<ul>\n<li>Empezar con la brecha inicial, <code>g</code></li>\n<li>Ir a través de los primeros <code>(n - g)</code> elementos en la matriz</li>\n<li>Comparar el elemento con el siguiente elemento que está a una distancia <code>g</code></li>\n<li>Intercambiar los dos elementos si el primer elemento es más grande</li>\n<li>Disminuir la brecha y repetir hasta la brecha = 1</li>\n</ul>\n<h4>Complejidad horaria</h4>\n<p>La complejidad del tiempo depende de las secuencias de separación.\nLas complejidades de tiempo inferior se basan en las secuencias de separación de <code>n/2^k</code>.</p>\n<p><code>O(n^2)</code> Peor rendimiento en el caso</p>\n<p><code>O(n)</code> Mejor actuación en el caso</p>\n<p><code>O(n^2)</code> Rendimiento medio</p>\n<h4>Complejidad espacial</h4>\n<p><code>O(1)</code> El peor caso</p>\n<h4>Nombre del Fundador</h4>\n<p>Donald Shell</p>\n<h4>Ejemplo</h4>\n<pre><code class=\"hljs language-markdown\">arr[] = {61, 109, 149, 111, 34, 2, 24, 119}\nBrecha inicial: 4   \n\n<span class=\"hljs-bullet\">1.</span> Índice = 0, Siguiente índice de elementos = 4\n<span class=\"hljs-bullet\">2.</span> 61 > 34, swap 61 y 34\n<span class=\"hljs-bullet\">3.</span> La matriz es ahora {34, 109, 149, 111, 61, 2, 24, 119}\n\n<span class=\"hljs-bullet\">4.</span> Índice = 1, Siguiente índice de elementos = 5\n<span class=\"hljs-bullet\">5.</span> 109 > 2, swap 109 y 2\n<span class=\"hljs-bullet\">6.</span> La matriz es ahora {34, 2, 149, 111, 61, 109, 24, 119}\n\n<span class=\"hljs-bullet\">7.</span> Índice = 2, Siguiente índice de elementos = 6\n<span class=\"hljs-bullet\">8.</span> 149 > 24, swap 149 y 24\n<span class=\"hljs-bullet\">9.</span> La matriz es ahora {34, 2, 24, 111, 61, 109, 149, 119}\n\n<span class=\"hljs-bullet\">10.</span> Índice = 3, Siguiente índice de elementos = 7\n<span class=\"hljs-bullet\">11.</span> 111 &#x3C; 119, no hagan nada y continúen\n\n<span class=\"hljs-bullet\">12.</span> Divida la brecha por 2 y repita hasta la brecha = 1\n</code></pre>\n<h4>Enlaces de implementación de código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/ShellSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Sorting/Shell%20Sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/shell_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/sorts/shell_sort.cs\">C-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/sorts/shell_sort.go\">Ir</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/Sorting/shell_sort.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/shellSort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Sorts/shellSort.js\">Javascript</a></li>\n</ul>\n<h4>Explicación de vídeo</h4>\n<p><a href=\"https://www.youtube.com/watch?v=H8NiFkGu2PY\">Un vídeo explicando el algoritmo del ordenamiento de Shell</a></p>\n<h4>Otros</h4>\n<p>La ordenación del shell también se conoce como clasificación de incremento de disminución.</p>",
    "en": "<h4>Problem Statement</h4>\n<p>Given an unsorted array of n elements, write a function to sort the array</p>\n<h4>Approach</h4>\n<ul>\n<li>start with the initial gap, g</li>\n<li>go through the first (n - g) elements in the array</li>\n<li>compare the element with the next element that is g distance away</li>\n<li>swap the two elements if the first element is bigger</li>\n<li>decrease the gap and repeat until gap = 1</li>\n</ul>\n<h4>Time Complexity</h4>\n<p>Time complexity is dependent on the gap sequences.\nBelow time complexities are based on the gap sequences of n/2^k.</p>\n<p><code>O(n^2)</code> Worst case performance</p>\n<p><code>O(n)</code> Best-case performance</p>\n<p><code>O(n^2)</code> Average performance</p>\n<h4>Space Complexity</h4>\n<p><code>O(1)</code> Worst case</p>\n<h4>Founder's Name</h4>\n<p>Donald Shell</p>\n<h4>Example</h4>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">109</span>, <span class=\"hljs-number\">149</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">119</span>}\n<span class=\"hljs-attribute\">Initial</span> Gap: <span class=\"hljs-number\">4</span>   \n\n<span class=\"hljs-attribute\">1</span>.  Index = <span class=\"hljs-number\">0</span>, Next element index = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-attribute\">2</span>.  <span class=\"hljs-number\">61</span> > <span class=\"hljs-number\">34</span>, swap <span class=\"hljs-number\">61</span> and <span class=\"hljs-number\">34</span>\n<span class=\"hljs-attribute\">3</span>.  The array is now {<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">109</span>, <span class=\"hljs-number\">149</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">119</span>}\n\n<span class=\"hljs-attribute\">4</span>.  Index = <span class=\"hljs-number\">1</span>, Next element index = <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">5</span>.  <span class=\"hljs-number\">109</span> > <span class=\"hljs-number\">2</span>, swap <span class=\"hljs-number\">109</span> and <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">6</span>.  The array is now {<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">149</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">109</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">119</span>}\n\n<span class=\"hljs-attribute\">7</span>.  Index = <span class=\"hljs-number\">2</span>, Next element index = <span class=\"hljs-number\">6</span>\n<span class=\"hljs-attribute\">8</span>.  <span class=\"hljs-number\">149</span> > <span class=\"hljs-number\">24</span>, swap <span class=\"hljs-number\">149</span> and <span class=\"hljs-number\">24</span>\n<span class=\"hljs-attribute\">9</span>.  The array is now {<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">109</span>, <span class=\"hljs-number\">149</span>, <span class=\"hljs-number\">119</span>}\n\n<span class=\"hljs-attribute\">10</span>. Index = <span class=\"hljs-number\">3</span>, Next element index = <span class=\"hljs-number\">7</span>\n<span class=\"hljs-attribute\">11</span>. <span class=\"hljs-number\">111</span> &#x3C; <span class=\"hljs-number\">119</span>, do nothing and continue\n\n<span class=\"hljs-attribute\">12</span>. Divide the gap by <span class=\"hljs-number\">2</span> and repeat until gap = <span class=\"hljs-number\">1</span>\n</code></pre>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/ShellSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Sorting/Shell%20Sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/shell_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Sharp/blob/master/sorts/shell_sort.cs\">C-Sharp</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/sorts/shell_sort.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/Sorting/shell_sort.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/shellSort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Sorts/shellSort.js\">Javascript</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=H8NiFkGu2PY\">A video explaining the Shell Sort Algorithm</a></p>\n<h4>Others</h4>\n<p>Shell sort is also known as diminishing increment sort.</p>"
  },
  "implementations": {
    "python": {
      "dir": "sorts/shell_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/shell_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://en.wikipedia.org/wiki/Shellsort#Pseudocode\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">shell_sort</span>(<span class=\"hljs-params\">collection</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of shell sort algorithm in Python\n    :param collection:  Some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return:  the same collection ordered by ascending\n\n    &gt;&gt;&gt; shell_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n    &gt;&gt;&gt; shell_sort([])\n    []\n    &gt;&gt;&gt; shell_sort([-2, -5, -45])\n    [-45, -5, -2]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Marcin Ciura&#x27;s gap sequence</span>\n\n    gaps = [<span class=\"hljs-number\">701</span>, <span class=\"hljs-number\">301</span>, <span class=\"hljs-number\">132</span>, <span class=\"hljs-number\">57</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">for</span> gap <span class=\"hljs-keyword\">in</span> gaps:\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(gap, <span class=\"hljs-built_in\">len</span>(collection)):\n            insert_value = collection[i]\n            j = i\n            <span class=\"hljs-keyword\">while</span> j &gt;= gap <span class=\"hljs-keyword\">and</span> collection[j - gap] &gt; insert_value:\n                collection[j] = collection[j - gap]\n                j -= gap\n            <span class=\"hljs-keyword\">if</span> j != i:\n                collection[j] = insert_value\n    <span class=\"hljs-keyword\">return</span> collection\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-built_in\">print</span>(shell_sort(unsorted))\n"
    },
    "javascript": {
      "dir": "Sorts/ShellSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/ShellSort.js",
      "code": "<span class=\"hljs-comment\">/*\n * Shell Sort sorts an array based on  insertion sort algorithm\n * more information: https://en.wikipedia.org/wiki/Shellsort\n *\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shellSort</span> (items) {\n  <span class=\"hljs-keyword\">let</span> interval = <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">while</span> (interval &lt; items.<span class=\"hljs-property\">length</span> / <span class=\"hljs-number\">3</span>) {\n    interval = interval * <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-keyword\">while</span> (interval &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> outer = interval; outer &lt; items.<span class=\"hljs-property\">length</span>; outer++) {\n      <span class=\"hljs-keyword\">const</span> value = items[outer]\n      <span class=\"hljs-keyword\">let</span> inner = outer\n\n      <span class=\"hljs-keyword\">while</span> (inner &gt; interval - <span class=\"hljs-number\">1</span> &amp;&amp; items[inner - interval] &gt;= value) {\n        items[inner] = items[inner - interval]\n        inner = inner - interval\n      }\n      items[inner] = value\n    }\n    interval = (interval - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">3</span>\n  }\n  <span class=\"hljs-keyword\">return</span> items\n}\n\n<span class=\"hljs-comment\">// Implementation of shellSort</span>\n\n<span class=\"hljs-keyword\">const</span> ar = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>]\n<span class=\"hljs-comment\">// Array before Sort</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ar)\n<span class=\"hljs-title function_\">shellSort</span>(ar)\n<span class=\"hljs-comment\">// Array after sort</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ar)\n"
    },
    "c-plus-plus": {
      "dir": "sorting/shell_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/shell_sort.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> size = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-type\">int</span>* array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[size];\n    <span class=\"hljs-comment\">// Input</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nHow many numbers do want to enter in unsorted array : &quot;</span>;\n    std::cin &gt;&gt; size;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the numbers for unsorted array : &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n        std::cin &gt;&gt; array[i];\n    }\n\n    <span class=\"hljs-comment\">// Sorting</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = size / <span class=\"hljs-number\">2</span>; i &gt; <span class=\"hljs-number\">0</span>; i = i / <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i; j &lt; size; j++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = j - i; k &gt;= <span class=\"hljs-number\">0</span>; k = k - i) {\n                <span class=\"hljs-keyword\">if</span> (array[k] &lt; array[k + i]) {\n                    <span class=\"hljs-keyword\">break</span>;\n                } <span class=\"hljs-keyword\">else</span> {\n                    <span class=\"hljs-type\">int</span> temp = array[k + i];\n                    array[k + i] = array[k];\n                    array[k] = temp;\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">// Output</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nSorted array : &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\n        std::cout &lt;&lt; array[i] &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\n    }\n\n    <span class=\"hljs-keyword\">delete</span>[] array;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Sorts/ShellSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Sorts/ShellSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> Sorts;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> Sorts.SortUtils.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShellSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\n\n  <span class=\"hljs-comment\">/**\n   * Implements generic shell sort.\n   *\n   * <span class=\"hljs-doctag\">@param</span> array the array to be sorted.\n   * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; the type of elements in the array.\n   * <span class=\"hljs-doctag\">@return</span> the sorted array.\n   */</span>\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] array) {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> array.length;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">gap</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/* Calculate gap for optimization purpose */</span>\n    <span class=\"hljs-keyword\">while</span> (gap &lt; length / <span class=\"hljs-number\">3</span>) {\n      gap = <span class=\"hljs-number\">3</span> * gap + <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (; gap &gt; <span class=\"hljs-number\">0</span>; gap /= <span class=\"hljs-number\">3</span>) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> gap; i &lt; length; i++) {\n        <span class=\"hljs-type\">int</span> j;\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> array[i];\n        <span class=\"hljs-keyword\">for</span> (j = i; j &gt;= gap &amp;&amp; less(temp, array[j - gap]); j -= gap) {\n          array[j] = array[j - gap];\n        }\n        array[j] = temp;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> array;\n  }\n\n  <span class=\"hljs-comment\">/* Driver Code */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    Integer[] toSort = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\n\n    <span class=\"hljs-type\">ShellSort</span> <span class=\"hljs-variable\">sort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShellSort</span>();\n    sort.sort(toSort);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; toSort.length - <span class=\"hljs-number\">1</span>; ++i) {\n      <span class=\"hljs-keyword\">assert</span> toSort[i] &lt;= toSort[i + <span class=\"hljs-number\">1</span>];\n    }\n    print(toSort);\n  }\n}\n"
    },
    "c": {
      "dir": "sorting/shell_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/shell_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ELEMENT_NR 20000</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ARRAY_LEN(x) (sizeof(x) / sizeof((x)[0]))</span>\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *notation =\r\n    <span class=\"hljs-string\">&quot;Shell Sort Big O Notation:\\\r\n\t\t\t\t\t\t\\n--&gt; Best Case: O(n log(n)) \\\r\n\t\t\t\t\t\t\\n--&gt; Average Case: depends on gap sequence \\\r\n\t\t\t\t\t\t\\n--&gt; Worst Case: O(n)&quot;</span>;\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">show_data</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> len)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d &quot;</span>, arr[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> *b)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> tmp;\r\n\r\n    tmp = *a;\r\n    *a = *b;\r\n    *b = tmp;\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">shellSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[], <span class=\"hljs-type\">int</span> len)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, j, gap;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (gap = len / <span class=\"hljs-number\">2</span>; gap &gt; <span class=\"hljs-number\">0</span>; gap = gap / <span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">for</span> (i = gap; i &lt; len; i++)\r\n            <span class=\"hljs-keyword\">for</span> (j = i - gap; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-built_in\">array</span>[j] &gt; <span class=\"hljs-built_in\">array</span>[j + gap]; j = j - gap)\r\n                swap(&amp;<span class=\"hljs-built_in\">array</span>[j], &amp;<span class=\"hljs-built_in\">array</span>[j + gap]);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[ELEMENT_NR];\r\n    <span class=\"hljs-type\">int</span> range = <span class=\"hljs-number\">500</span>;\r\n    <span class=\"hljs-type\">int</span> size;\r\n    <span class=\"hljs-type\">clock_t</span> start, end;\r\n    <span class=\"hljs-type\">double</span> time_spent;\r\n\r\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; ELEMENT_NR; i++) <span class=\"hljs-built_in\">array</span>[i] = rand() % range + <span class=\"hljs-number\">1</span>;\r\n\r\n    size = ARRAY_LEN(<span class=\"hljs-built_in\">array</span>);\r\n\r\n    show_data(<span class=\"hljs-built_in\">array</span>, size);\r\n    start = clock();\r\n    shellSort(<span class=\"hljs-built_in\">array</span>, size);\r\n    end = clock();\r\n    time_spent = (<span class=\"hljs-type\">double</span>)(end - start) / CLOCKS_PER_SEC;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Data Sorted\\n&quot;</span>);\r\n    show_data(<span class=\"hljs-built_in\">array</span>, size);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, notation);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Time spent sorting: %.4g ms\\n&quot;</span>, time_spent * <span class=\"hljs-number\">1e3</span>);\r\n\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "haskell": {
      "dir": "src/Sorts/ShellSort.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Sorts/ShellSort.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Sorts.ShellSort <span class=\"hljs-keyword\">where</span>\n<span class=\"hljs-comment\">-- Shell sort uses insertion sort for sorting individual sublists</span>\n<span class=\"hljs-keyword\">import</span> Sorts.InsertionSort\n\n<span class=\"hljs-comment\">-- Produces the sequence of gaps to use for sorting a list of size n</span>\n<span class=\"hljs-title\">gaps</span> :: <span class=\"hljs-type\">Int</span> -&gt; [<span class=\"hljs-type\">Int</span>]\n<span class=\"hljs-title\">gaps</span> n = reverse (takeWhile (&lt; n) tokuda)\n\n<span class=\"hljs-comment\">-- Produces Tokuda&#x27;s sequence</span>\n<span class=\"hljs-title\">tokuda</span> :: [<span class=\"hljs-type\">Int</span>]\n<span class=\"hljs-title\">tokuda</span> = [gap n | n &lt;- [<span class=\"hljs-number\">1</span>..]]\n\n<span class=\"hljs-comment\">-- Computes term k in Tokuda&#x27;s sequence</span>\n<span class=\"hljs-title\">gap</span> :: (<span class=\"hljs-type\">Integral</span> a) =&gt; a -&gt; a\n<span class=\"hljs-title\">gap</span> k = ceiling (gap&#x27; k)\n\n<span class=\"hljs-comment\">-- Recursize helper function for gap</span>\n<span class=\"hljs-title\">gap&#x27;</span> :: (<span class=\"hljs-type\">Integral</span> a) =&gt; a -&gt; <span class=\"hljs-type\">Double</span>\n<span class=\"hljs-title\">gap&#x27;</span> <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-title\">gap&#x27;</span> k = <span class=\"hljs-number\">2.25</span> * gap&#x27; (k - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-comment\">-- Sort an input sequence using the shell sort algorithm</span>\n<span class=\"hljs-title\">shellSort</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">shellSort</span> xs = shellSort&#x27; xs (gaps (length xs))\n\n<span class=\"hljs-comment\">-- Recursive helper function for shellSort</span>\n<span class=\"hljs-title\">shellSort&#x27;</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [<span class=\"hljs-type\">Int</span>] -&gt; [a]\n<span class=\"hljs-title\">shellSort&#x27;</span> [] _ = []\n<span class=\"hljs-title\">shellSort&#x27;</span> [x] _ = [x]\n<span class=\"hljs-title\">shellSort&#x27;</span> l [] = l\n<span class=\"hljs-title\">shellSort&#x27;</span> l (g:gs) = shellSort&#x27; (combine [insertionSort (getSub l g i) | i &lt;- [<span class=\"hljs-number\">0</span>..g-<span class=\"hljs-number\">1</span>]]) gs\n\n<span class=\"hljs-comment\">-- Get the sublist of l formed by taking elements with gap g between them, starting at index i</span>\n<span class=\"hljs-title\">getSub</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">Int</span> -&gt; [a]\n<span class=\"hljs-title\">getSub</span> [] _ _ = []\n<span class=\"hljs-title\">getSub</span> l g i = [l !! e | e &lt;- [i, i+g..length l - <span class=\"hljs-number\">1</span>]] \n\n\n<span class=\"hljs-comment\">-- Combine a list of sublists into a single list in the correct order</span>\n<span class=\"hljs-comment\">-- Required after individual sublists have been sorted, to rebuild the main list</span>\n<span class=\"hljs-title\">combine</span> :: [[a]] -&gt; [a]\n<span class=\"hljs-title\">combine</span> [] = []\n<span class=\"hljs-title\">combine</span> l@(xs:_)\n        | length xs == <span class=\"hljs-number\">0</span> = []\n        | otherwise = [x | (x:_) &lt;- l] ++ combine (map (drop <span class=\"hljs-number\">1</span>) l)\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    putStrLn $ <span class=\"hljs-string\">&quot;Unsorted: &quot;</span> ++ show listToSort\n    putStrLn $ <span class=\"hljs-string\">&quot;Sorted: &quot;</span> ++ show (shellSort listToSort)"
    },
    "go": {
      "dir": "sorts/shellsort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sorts/shellsort.go",
      "code": "<span class=\"hljs-comment\">//Package sorts a package for demonstrating sorting algorithms in Go</span>\n<span class=\"hljs-keyword\">package</span> sorts\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ShellSort</span><span class=\"hljs-params\">(arr []<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">for</span> d := <span class=\"hljs-keyword\">int</span>(<span class=\"hljs-built_in\">len</span>(arr) / <span class=\"hljs-number\">2</span>); d &gt; <span class=\"hljs-number\">0</span>; d /= <span class=\"hljs-number\">2</span> {\n\t\t<span class=\"hljs-keyword\">for</span> i := d; i &lt; <span class=\"hljs-built_in\">len</span>(arr); i++ {\n\t\t\t<span class=\"hljs-keyword\">for</span> j := i; j &gt;= d &amp;&amp; arr[j-d] &gt; arr[j]; j -= d {\n\t\t\t\tarr[j], arr[j-d] = arr[j-d], arr[j]\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> arr\n}\n"
    },
    "rust": {
      "dir": "src/sorting/shell_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/shell_sort.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">shell_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(values: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;T&gt;) {\n    <span class=\"hljs-comment\">// shell sort works by swiping the value at a given gap and decreasing the gap to 1</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insertion</span>&lt;T: <span class=\"hljs-built_in\">Ord</span> + <span class=\"hljs-built_in\">Copy</span>&gt;(values: &amp;<span class=\"hljs-keyword\">mut</span> <span class=\"hljs-type\">Vec</span>&lt;T&gt;, start: <span class=\"hljs-type\">usize</span>, gap: <span class=\"hljs-type\">usize</span>) {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> ((start + gap)..values.<span class=\"hljs-title function_ invoke__\">len</span>()).<span class=\"hljs-title function_ invoke__\">step_by</span>(gap) {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">val_current</span> = values[i];\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">pos</span> = i;\n            <span class=\"hljs-comment\">// make swaps</span>\n            <span class=\"hljs-keyword\">while</span> pos &gt;= gap &amp;&amp; values[pos - gap] &gt; val_current {\n                values[pos] = values[pos - gap];\n                pos = pos - gap;\n            }\n            values[pos] = val_current;\n        }\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">count_sublist</span> = values.<span class=\"hljs-title function_ invoke__\">len</span>() / <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// makes gap as long as half of the array</span>\n    <span class=\"hljs-keyword\">while</span> count_sublist &gt; <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">pos_start</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..count_sublist {\n            <span class=\"hljs-title function_ invoke__\">insertion</span>(values, pos_start, count_sublist);\n        }\n        count_sublist /= <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// makes gap as half of previous</span>\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">vec</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>];\n        <span class=\"hljs-title function_ invoke__\">shell_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve3);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..ve3.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">assert!</span>(ve3[i] &lt;= ve3[i + <span class=\"hljs-number\">1</span>]);\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">vec</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">i32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n        <span class=\"hljs-title function_ invoke__\">shell_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> vec);\n        <span class=\"hljs-built_in\">assert_eq!</span>(vec, <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">reverse</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">vec</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-title function_ invoke__\">shell_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve1);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..ve1.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">assert!</span>(ve1[i] &lt;= ve1[i + <span class=\"hljs-number\">1</span>]);\n        }\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">already_sorted</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">vec</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n        <span class=\"hljs-title function_ invoke__\">shell_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> ve2);\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..ve2.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span> {\n            <span class=\"hljs-built_in\">assert!</span>(ve2[i] &lt;= ve2[i + <span class=\"hljs-number\">1</span>]);\n        }\n    }\n}\n"
    },
    "aarch64_assembly": {
      "dir": "sorters/shell_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters/shell_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program shellSort64.s   */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly*/</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  :  @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">TableNumber:</span>      .quad   <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">7</span>\n<span class=\"hljs-comment\">//TableNumber:     .quad   10,9,8,7,6,5,4,3,2,1</span>\n                   <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>              <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                             <span class=\"hljs-comment\">// entry of program </span>\n \n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                        <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>                                      <span class=\"hljs-comment\">// not use in routine</span>\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                             <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> shellSort\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                        <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">bl</span> displayTable\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                        <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>                            <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> isSorted                                   <span class=\"hljs-comment\">// control sort</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>                                     <span class=\"hljs-comment\">// sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                      <span class=\"hljs-comment\">// no !! error sort</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">2</span>:                                                <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:                                              <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                      <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                   <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                         <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\n<span class=\"hljs-symbol\">isSorted:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!            <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\n    <span class=\"hljs-keyword\">mov</span> x4,x3\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">98</span>:\n   <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                        <span class=\"hljs-comment\">// error not sorted</span>\n   <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/***************************************************/</span>\n<span class=\"hljs-comment\">/*   shell Sort                                    */</span>\n<span class=\"hljs-comment\">/***************************************************/</span>\n \n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the first element but not use !!   */</span>\n<span class=\"hljs-comment\">/*   this routine use first element at index zero !!!  */</span>\n<span class=\"hljs-comment\">/* x2 contains the number of element */</span>\n<span class=\"hljs-symbol\">shellSort:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">sub</span> x2,x2,<span class=\"hljs-number\">1</span>                  <span class=\"hljs-comment\">// index last item</span>\n    <span class=\"hljs-keyword\">mov</span> x1,x2                    <span class=\"hljs-comment\">// init gap = last item</span>\n<span class=\"hljs-number\">1</span>:                               <span class=\"hljs-comment\">// start loop 1</span>\n    <span class=\"hljs-keyword\">lsr</span> x1,x1,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// gap = gap / 2</span>\n    <span class=\"hljs-keyword\">cbz</span> x1,<span class=\"hljs-number\">100</span>f                  <span class=\"hljs-comment\">// if gap = 0 -&gt; end</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x1                    <span class=\"hljs-comment\">// init loop indice 1 </span>\n<span class=\"hljs-number\">2</span>:                               <span class=\"hljs-comment\">// start loop 2</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]        <span class=\"hljs-comment\">// load first value</span>\n    <span class=\"hljs-keyword\">mov</span> x5,x3                    <span class=\"hljs-comment\">// init loop indice 2</span>\n<span class=\"hljs-number\">3</span>:                               <span class=\"hljs-comment\">// start loop 3</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,x1                    <span class=\"hljs-comment\">// indice &lt; gap</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">4</span>f                       <span class=\"hljs-comment\">// yes -&gt; end loop 2</span>\n    <span class=\"hljs-keyword\">sub</span> x6,x5,x1                 <span class=\"hljs-comment\">// index = indice - gap</span>\n    <span class=\"hljs-keyword\">ldr</span> x7,[x0,x6,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]         <span class=\"hljs-comment\">// load second value</span>\n    <span class=\"hljs-keyword\">cmp</span> x4,x7                    <span class=\"hljs-comment\">// compare values</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">4</span>f\n    <span class=\"hljs-keyword\">str</span> x7,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]         <span class=\"hljs-comment\">// store if &lt;</span>\n    <span class=\"hljs-keyword\">sub</span> x5,x5,x1                    <span class=\"hljs-comment\">// indice = indice - gap</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">3</span>b                         <span class=\"hljs-comment\">// and loop</span>\n<span class=\"hljs-number\">4</span>:                               <span class=\"hljs-comment\">// end loop 3</span>\n    <span class=\"hljs-keyword\">str</span> x4,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]         <span class=\"hljs-comment\">// store value 1 at indice 2</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>                  <span class=\"hljs-comment\">// increment indice 1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,x2                    <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">2</span>b                       <span class=\"hljs-comment\">// no -&gt; loop 2</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b                         <span class=\"hljs-comment\">// yes loop for new gap</span>\n \n<span class=\"hljs-number\">100</span>:                             <span class=\"hljs-comment\">// end function</span>\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                          <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-symbol\">displayTable:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                    <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>:                               <span class=\"hljs-comment\">// loop display table</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv         <span class=\"hljs-comment\">// display value</span>\n    <span class=\"hljs-keyword\">bl</span> conversion10              <span class=\"hljs-comment\">// call function</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc        <span class=\"hljs-comment\">// insert result at @ character</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess             <span class=\"hljs-comment\">// display message</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,<span class=\"hljs-symbol\">#NBELEMENTS</span> - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                          <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    },
    "dart": {
      "dir": "sort/shell_Sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort/shell_Sort.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span> <span class=\"hljs-keyword\">show</span> Random;\r\n\r\n<span class=\"hljs-keyword\">void</span> main() {\r\n  <span class=\"hljs-keyword\">final</span> seed = <span class=\"hljs-number\">100</span>, rnd = Random(), length = <span class=\"hljs-number\">100</span>;\r\n  <span class=\"hljs-keyword\">var</span> list =\r\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;.generate(length, (i) =&gt; rnd.nextInt(seed), growable: <span class=\"hljs-keyword\">false</span>);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;before sorting:&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;----------------------------------------------&#x27;</span>);\r\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;After sorting:&#x27;</span>);\r\n  shellSort(list);\r\n  <span class=\"hljs-built_in\">print</span>(list);\r\n}\r\n\r\n<span class=\"hljs-keyword\">void</span> shellSort&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">Comparable</span>&gt;(<span class=\"hljs-built_in\">List</span>&lt;E&gt; a) {\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = _initInterval(a); i &gt; <span class=\"hljs-number\">0</span>; i = (i - <span class=\"hljs-number\">1</span>) ~/ <span class=\"hljs-number\">3</span>) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> g = <span class=\"hljs-number\">0</span>; g &lt; i; g++) {\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = i + g; j &lt; a.length; j += i) {\r\n        <span class=\"hljs-keyword\">var</span> k = j - i, t = a[j];\r\n        <span class=\"hljs-keyword\">while</span> (k &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; t.compareTo(a[k]) &lt; <span class=\"hljs-number\">0</span>) {\r\n          a[k + i] = a[k];\r\n          k -= i;\r\n        }\r\n        <span class=\"hljs-keyword\">if</span> (k &lt; j - i) a[k + i] = t;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-built_in\">int</span> _initInterval&lt;E&gt;(<span class=\"hljs-built_in\">List</span>&lt;E&gt; a) {\r\n  <span class=\"hljs-keyword\">var</span> interval = <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-keyword\">while</span> (interval &lt; a.length ~/ <span class=\"hljs-number\">3</span>) interval = interval * <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>;\r\n  <span class=\"hljs-keyword\">return</span> interval;\r\n}\r\n"
    },
    "ruby": {
      "dir": "sorting/shell_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/shell_sort.rb",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">shell_sort</span><span class=\"hljs-params\">(a)</span></span>\n  n = a.length\n  h = <span class=\"hljs-number\">1</span>\n\n  h = (<span class=\"hljs-number\">3</span> * h) + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">while</span> h &lt; n / <span class=\"hljs-number\">3</span>\n\n  <span class=\"hljs-keyword\">while</span> h &gt;= <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-comment\"># Logic of insertion sort with inrement steps of &quot;h&quot;</span>\n    (h...n).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\n      j = i\n      <span class=\"hljs-keyword\">while</span> j &gt;= h\n        <span class=\"hljs-keyword\">if</span> a[j - h] &gt; a[j]\n          temp = a[j]\n          a[j] = a[j - h]\n          a[j - h] = temp\n        <span class=\"hljs-keyword\">end</span>\n        j -= h\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    h /= <span class=\"hljs-number\">3</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  a\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "matlab-octave": {
      "dir": "algorithms/sorting/shell_sort.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/sorting/shell_sort.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">list</span> = <span class=\"hljs-title\">shellSort</span><span class=\"hljs-params\">(list)</span></span>\n \n    N = <span class=\"hljs-built_in\">numel</span>(list);\n    increment = <span class=\"hljs-built_in\">round</span>(N/<span class=\"hljs-number\">2</span>);\n \n    <span class=\"hljs-keyword\">while</span> increment &gt; <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\">%loop until increment becomes 0</span>\n \n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = (increment+<span class=\"hljs-number\">1</span>:N)\n            temp = list(<span class=\"hljs-built_in\">i</span>);\n            <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-built_in\">i</span>;\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">j</span> &gt;= increment+<span class=\"hljs-number\">1</span>) &amp;&amp; (list(<span class=\"hljs-built_in\">j</span>-increment) &gt; temp)\n                list(<span class=\"hljs-built_in\">j</span>) = list(<span class=\"hljs-built_in\">j</span>-increment);\n                <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-built_in\">j</span> - increment;\n            <span class=\"hljs-keyword\">end</span>\n \n            list(<span class=\"hljs-built_in\">j</span>) = temp;\n \n        <span class=\"hljs-keyword\">end</span> <span class=\"hljs-comment\">%for</span>\n \n        <span class=\"hljs-keyword\">if</span> increment == <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">%This case causes shell sort to become insertion sort</span>\n            increment = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">else</span>\n            increment = <span class=\"hljs-built_in\">round</span>(increment/<span class=\"hljs-number\">2.2</span>);\n        <span class=\"hljs-keyword\">end</span>        \n    <span class=\"hljs-keyword\">end</span> <span class=\"hljs-comment\">%while</span>\n<span class=\"hljs-keyword\">end</span> <span class=\"hljs-comment\">%shellSort</span>\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Sorters/Comparison/ShellSorter.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/ShellSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>TODO. 2.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ShellSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     based on bubble sort,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place, unstable,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     worst-case time complexity: O(n^2),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> step = array.Length / <span class=\"hljs-number\">2</span>; step &gt; <span class=\"hljs-number\">0</span>; step /= <span class=\"hljs-number\">2</span>)\n            {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; step; i++)\n                {\n                    GappedBubbleSort(array, comparer, i, step);\n                }\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">GappedBubbleSort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer, <span class=\"hljs-built_in\">int</span> start, <span class=\"hljs-built_in\">int</span> step</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = start; j &lt; array.Length - step; j += step)\n            {\n                <span class=\"hljs-keyword\">var</span> wasChanged = <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k = start; k &lt; array.Length - j - step; k += step)\n                {\n                    <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[k], array[k + step]) &gt; <span class=\"hljs-number\">0</span>)\n                    {\n                        <span class=\"hljs-keyword\">var</span> temp = array[k];\n                        array[k] = array[k + step];\n                        array[k + step] = temp;\n                        wasChanged = <span class=\"hljs-literal\">true</span>;\n                    }\n                }\n\n                <span class=\"hljs-keyword\">if</span> (!wasChanged)\n                {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 1
    },
    {
      "name": "Siddharth Naithani",
      "email": "42946112+sn99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Abhishek Mehra",
      "email": "52788025+Triaro@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mattan",
      "email": "mattany@gmali.com",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KuLi",
      "email": "KuLi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "zeroway",
      "email": "M_O_Bz@163.com",
      "commits": 1
    },
    {
      "name": "littleFoot1",
      "email": "52392154+littleFoot1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "LittleFoot",
      "email": "2059416370@qq.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "Dusan Punosevac",
      "email": "dusan.punosevac@sbgenomics.com",
      "commits": 1
    },
    {
      "name": "KDH",
      "email": "ehdgua01@naver.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Sharma",
      "email": "akshay.sharma09695@gmail.com",
      "commits": 1
    },
    {
      "name": "JakeBonek",
      "email": "jake.bonek@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    },
    {
      "name": "Sam Jones",
      "email": "sam.jones240699@gmail.com",
      "commits": 2
    },
    {
      "name": "Connor Bottum",
      "email": "cbb692@gmail.com",
      "commits": 2
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 4
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 4
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 5
    }
  ],
  "explanationUrl": {
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Algoritmos de Ordenamiento/Ordenamiento Shell.md",
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Sorting Algorithms/Shell Sort.md"
  }
}
