{
  "slug": "segmented-sieve",
  "name": "Segmented Sieve",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/segmented_sieve.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/segmented_sieve.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Segmented Sieve.&quot;&quot;&quot;</span>\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sieve</span>(<span class=\"hljs-params\">n</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Segmented Sieve.&quot;&quot;&quot;</span>\r\n    in_prime = []\r\n    start = <span class=\"hljs-number\">2</span>\r\n    end = <span class=\"hljs-built_in\">int</span>(math.sqrt(n))  <span class=\"hljs-comment\"># Size of every segment</span>\r\n    temp = [<span class=\"hljs-literal\">True</span>] * (end + <span class=\"hljs-number\">1</span>)\r\n    prime = []\r\n\r\n    <span class=\"hljs-keyword\">while</span> start &lt;= end:\r\n        <span class=\"hljs-keyword\">if</span> temp[start] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n            in_prime.append(start)\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(start * start, end + <span class=\"hljs-number\">1</span>, start):\r\n                <span class=\"hljs-keyword\">if</span> temp[i] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n                    temp[i] = <span class=\"hljs-literal\">False</span>\r\n        start += <span class=\"hljs-number\">1</span>\r\n    prime += in_prime\r\n\r\n    low = end + <span class=\"hljs-number\">1</span>\r\n    high = low + end - <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">if</span> high &gt; n:\r\n        high = n\r\n\r\n    <span class=\"hljs-keyword\">while</span> low &lt;= n:\r\n        temp = [<span class=\"hljs-literal\">True</span>] * (high - low + <span class=\"hljs-number\">1</span>)\r\n        <span class=\"hljs-keyword\">for</span> each <span class=\"hljs-keyword\">in</span> in_prime:\r\n\r\n            t = math.floor(low / each) * each\r\n            <span class=\"hljs-keyword\">if</span> t &lt; low:\r\n                t += each\r\n\r\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(t, high + <span class=\"hljs-number\">1</span>, each):\r\n                temp[j - low] = <span class=\"hljs-literal\">False</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(temp)):\r\n            <span class=\"hljs-keyword\">if</span> temp[j] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n                prime.append(j + low)\r\n\r\n        low = high + <span class=\"hljs-number\">1</span>\r\n        high = low + end - <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> high &gt; n:\r\n            high = n\r\n\r\n    <span class=\"hljs-keyword\">return</span> prime\r\n\r\n\r\n<span class=\"hljs-built_in\">print</span>(sieve(<span class=\"hljs-number\">10</span> ** <span class=\"hljs-number\">6</span>))\r\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Farhan",
      "email": "farhankasmani956@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
