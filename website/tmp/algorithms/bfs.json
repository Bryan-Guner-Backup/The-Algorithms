{
  "slug": "bfs",
  "name": "Bfs",
  "categories": ["datastructures", "graphs"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/graphs/bfs.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/graphs/bfs.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> SIZE 40</span>\n<span class=\"hljs-comment\">// Assume max size of graph is 40 nodes</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">queue</span>\n{</span>\n    <span class=\"hljs-type\">int</span> items[SIZE];\n    <span class=\"hljs-type\">int</span> front;\n    <span class=\"hljs-type\">int</span> rear;\n};\n\n<span class=\"hljs-comment\">// Some declarations</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *<span class=\"hljs-title function_\">createQueue</span><span class=\"hljs-params\">()</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q, <span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dequeue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pollQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>;\n\n<span class=\"hljs-comment\">// Structure to create a graph node</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> vertex;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\n};\n\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span>;\n\n<span class=\"hljs-comment\">// Graph data structure</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span>\n{</span>\n    <span class=\"hljs-type\">int</span> numVertices;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> **<span class=\"hljs-title\">adjLists</span>;</span>\n    <span class=\"hljs-type\">int</span> *visited;\n};\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertices)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dest)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> startVertex)</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> vertices, edges, source, i, src, dst;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;vertices);\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> createGraph(vertices);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of edges\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;edges);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; edges; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Edge %d \\nEnter source: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination: &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dst);\n        addEdge(graph, src, dst);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter source of bfs\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;source);\n    bfs(graph, source);\n\n    <span class=\"hljs-comment\">// Uncomment below part to get a ready-made example</span>\n    <span class=\"hljs-comment\">/*struct Graph* graph = createGraph(6);\n    addEdge(graph, 0, 1);\n    addEdge(graph, 0, 2);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 1, 4);\n    addEdge(graph, 1, 3);\n    addEdge(graph, 2, 4);\n    addEdge(graph, 3, 4);\n    bfs(graph,0);*/</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> startVertex)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">queue</span> *<span class=\"hljs-title\">q</span> =</span> createQueue();\n\n    <span class=\"hljs-comment\">// Add to visited list and put in queue</span>\n    graph-&gt;visited[startVertex] = <span class=\"hljs-number\">1</span>;\n    enqueue(q, startVertex);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Breadth first traversal from vertex %d is:\\n&quot;</span>, startVertex);\n\n    <span class=\"hljs-comment\">// Iterate while queue not empty</span>\n    <span class=\"hljs-keyword\">while</span> (!isEmpty(q))\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, pollQueue(q));\n        <span class=\"hljs-type\">int</span> currentVertex = dequeue(q);\n\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> graph-&gt;adjLists[currentVertex];\n        <span class=\"hljs-comment\">// Add all unvisited neighbours of current vertex to queue to be printed</span>\n        <span class=\"hljs-comment\">// next</span>\n        <span class=\"hljs-keyword\">while</span> (temp)\n        {\n            <span class=\"hljs-type\">int</span> adjVertex = temp-&gt;vertex;\n            <span class=\"hljs-comment\">// Only add if neighbour is unvisited</span>\n            <span class=\"hljs-keyword\">if</span> (graph-&gt;visited[adjVertex] == <span class=\"hljs-number\">0</span>)\n            {\n                graph-&gt;visited[adjVertex] = <span class=\"hljs-number\">1</span>;\n                enqueue(q, adjVertex);\n            }\n            temp = temp-&gt;next;\n        }\n    }\n}\n<span class=\"hljs-comment\">// Memory for a graph node</span>\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    newNode-&gt;vertex = v;\n    newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> newNode;\n}\n<span class=\"hljs-comment\">// Allocates memory for graph data structure, in adjacency list format</span>\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertices)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Graph));\n    graph-&gt;numVertices = vertices;\n\n    graph-&gt;adjLists = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node *));\n    graph-&gt;visited = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; vertices; i++)\n    {\n        graph-&gt;adjLists[i] = <span class=\"hljs-literal\">NULL</span>;\n        graph-&gt;visited[i] = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> graph;\n}\n<span class=\"hljs-comment\">// Adds bidirectional edge to graph</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dest)</span>\n{\n    <span class=\"hljs-comment\">// Add edge from src to dest</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> createNode(dest);\n    newNode-&gt;next = graph-&gt;adjLists[src];\n    graph-&gt;adjLists[src] = newNode;\n\n    <span class=\"hljs-comment\">// Add edge from dest to src; comment it out for directed graph</span>\n    newNode = createNode(src);\n    newNode-&gt;next = graph-&gt;adjLists[dest];\n    graph-&gt;adjLists[dest] = newNode;\n}\n<span class=\"hljs-comment\">// Allocates memory for our queue data structure</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *<span class=\"hljs-title function_\">createQueue</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">queue</span> *<span class=\"hljs-title\">q</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span>));\n    q-&gt;front = <span class=\"hljs-number\">-1</span>;\n    q-&gt;rear = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">return</span> q;\n}\n<span class=\"hljs-comment\">// Checks for empty queue</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (q-&gt;rear == <span class=\"hljs-number\">-1</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-comment\">// Inserts item at start of queue</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q, <span class=\"hljs-type\">int</span> value)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (q-&gt;rear == SIZE - <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nQueue is Full!!&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (q-&gt;front == <span class=\"hljs-number\">-1</span>)\n            q-&gt;front = <span class=\"hljs-number\">0</span>;\n        q-&gt;rear++;\n        q-&gt;items[q-&gt;rear] = value;\n    }\n}\n<span class=\"hljs-comment\">// Returns item at front of queue and removes it from queue</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dequeue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span>\n{\n    <span class=\"hljs-type\">int</span> item;\n    <span class=\"hljs-keyword\">if</span> (isEmpty(q))\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Queue is empty&quot;</span>);\n        item = <span class=\"hljs-number\">-1</span>;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        item = q-&gt;items[q-&gt;front];\n        q-&gt;front++;\n        <span class=\"hljs-keyword\">if</span> (q-&gt;front &gt; q-&gt;rear)\n        {\n            q-&gt;front = q-&gt;rear = <span class=\"hljs-number\">-1</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> item;\n}\n\n<span class=\"hljs-comment\">// Returns element at front of queue</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pollQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-built_in\">queue</span> *q)</span> { <span class=\"hljs-keyword\">return</span> q-&gt;items[q-&gt;front]; }\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "PalAditya",
      "email": "adityapal.nghss@gmail.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "cnddhks846@naver.com",
      "commits": 1
    },
    {
      "name": "sangjun2",
      "email": "sj27294626@gmail.com",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 1
    },
    {
      "name": "pkdism",
      "email": "pawan.dwivedi94@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Harshit Kumar",
      "email": "kumar_harshit@outlook.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
