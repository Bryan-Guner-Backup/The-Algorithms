{
  "slug": "palindromenumber",
  "name": "PalindromeNumber",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Maths/PalindromeNumber.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/PalindromeNumber.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PalindromeNumber</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(<span class=\"hljs-number\">12321</span>)</span>;\n    <span class=\"hljs-keyword\">assert</span> !isPalindrome(<span class=\"hljs-number\">1234</span>);\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if {<span class=\"hljs-doctag\">@code</span> n} is palindrome number or not\n   *\n   * <span class=\"hljs-doctag\">@param</span> number the number\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if {<span class=\"hljs-doctag\">@code</span> n} is palindrome number, otherwise {<span class=\"hljs-doctag\">@code</span> false}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n    <span class=\"hljs-keyword\">if</span> (number &lt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(number + <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">numberCopy</span> <span class=\"hljs-operator\">=</span> number;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">reverseNumber</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (numberCopy != <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">remainder</span> <span class=\"hljs-operator\">=</span> numberCopy % <span class=\"hljs-number\">10</span>;\n      reverseNumber = reverseNumber * <span class=\"hljs-number\">10</span> + remainder;\n      numberCopy /= <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">number</span> <span class=\"hljs-operator\">=</span>= reverseNumber;\n  }\n}\n"
    },
    "dart": {
      "dir": "maths/palindrome_number.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/palindrome_number.dart",
      "code": "<span class=\"hljs-comment\">/* Driver */</span>\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-keyword\">assert</span>(isPalindrome(<span class=\"hljs-number\">12321</span>) == <span class=\"hljs-keyword\">true</span>);\n  <span class=\"hljs-keyword\">assert</span>(isPalindrome(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-keyword\">true</span>);\n  <span class=\"hljs-keyword\">assert</span>(isPalindrome(<span class=\"hljs-number\">1</span>) == <span class=\"hljs-keyword\">true</span>);\n  <span class=\"hljs-keyword\">assert</span>(isPalindrome(<span class=\"hljs-number\">123322</span>) == <span class=\"hljs-keyword\">false</span>);\n}\n\n<span class=\"hljs-comment\"><span class=\"language-markdown\">/<span class=\"hljs-strong\">**\n <span class=\"hljs-emphasis\">*</span></span></span> Return true if <span class=\"language-markdown\"><span class=\"hljs-strong\"><span class=\"hljs-emphasis\">[n] is palindrome number, otherwise false\n *</span> Throws [ArgumentError] if [n] is negative\n <span class=\"hljs-emphasis\">*/</span></span></span></span>\n<span class=\"hljs-built_in\">bool</span> isPalindrome(<span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentError(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$n</span> is negative&quot;</span>);\n  }\n  <span class=\"hljs-keyword\">var</span> copy = n;\n  <span class=\"hljs-keyword\">var</span> reverseNumber = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\n    reverseNumber = reverseNumber * <span class=\"hljs-number\">10</span> + n % <span class=\"hljs-number\">10</span>;\n    n = n ~/ <span class=\"hljs-number\">10</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> copy == reverseNumber;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
