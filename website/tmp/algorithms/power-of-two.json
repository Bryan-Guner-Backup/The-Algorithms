{
  "slug": "power-of-two",
  "name": "Power of Two",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/power_of_two.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/power_of_two.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation to check whether a number is a power of 2 or not.\n *\n * @details\n * This algorithm uses bit manipulation to check if a number is a power of 2 or\n * not.\n *\n * ### Algorithm\n * Let the input number be n, then the bitwise and between n and n-1 will let us\n * know whether the number is power of 2 or not\n *\n * For Example,\n * If N= 32 then N-1 is 31, if we perform bitwise and of these two numbers then\n * the result will be zero, which indicates that it is the power of 2\n * If N=23 then N-1 is 22, if we perform bitwise and of these two numbers then\n * the result will not be zero , which indicates that it is not the power of 2\n * \\note This implementation is better than naive recursive or iterative\n * approach.\n *\n * @author [Neha Hasija](https://github.com/neha-hasija17)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for std::cout</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * @brief Function to test above algorithm\n * @param n description\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">power_of_two</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-comment\">/**\n     * This function finds whether a number is power of 2 or not\n     * @param n value for which we want to check\n     * prints the result, as &quot;Yes, the number n is a power of 2&quot; or\n     * &quot;No, the number is not a power of 2&quot; without quotes\n     */</span>\n    <span class=\"hljs-comment\">/// result stores the</span>\n    <span class=\"hljs-comment\">/// bitwise and of n and n-1</span>\n    <span class=\"hljs-type\">int</span> result = n &amp; (n - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-number\">0</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Yes, the number &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; is a power of 2&quot;</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;No, the number &quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; is not a power of 2&quot;</span>;\n    }\n}\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-comment\">/// n stores the input from the user</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;enter a number &quot;</span> &lt;&lt; std::endl;\n    std::cin &gt;&gt; n;\n    <span class=\"hljs-comment\">/// function call with @param n</span>\n    math::<span class=\"hljs-built_in\">power_of_two</span>(n);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "dart": {
      "dir": "maths/power_of_two.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/power_of_two.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-built_in\">bool</span> power_of_two(<span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n\n  <span class=\"hljs-keyword\">return</span> (n &amp; (n - <span class=\"hljs-number\">1</span>)) == <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 0 returns false&quot;</span>, () {\n    expect(power_of_two(<span class=\"hljs-number\">0</span>), isFalse);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 1 returns true&quot;</span>, () {\n    expect(power_of_two(<span class=\"hljs-number\">1</span>), isTrue);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 10 returns false&quot;</span>, () {\n    expect(power_of_two(<span class=\"hljs-number\">10</span>), isFalse);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 10 returns false&quot;</span>, () {\n    expect(power_of_two(<span class=\"hljs-number\">10</span>), isFalse);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 23 returns false&quot;</span>, () {\n    expect(power_of_two(<span class=\"hljs-number\">23</span>), isFalse);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 32 returns true&quot;</span>, () {\n    expect(power_of_two(<span class=\"hljs-number\">32</span>), isTrue);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 2234 returns false&quot;</span>, () {\n    expect(power_of_two(<span class=\"hljs-number\">2234</span>), isFalse);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Test power_of_two 2048 returns true&quot;</span>, () {\n    expect(power_of_two(<span class=\"hljs-number\">2048</span>), isTrue);\n  });\n}\n"
    },
    "ruby": {
      "dir": "maths/power_of_two.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/power_of_two.rb",
      "code": "<span class=\"hljs-comment\"># Power of 2</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given an integer n, return true if it is a power of two. Otherwise, return false.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># An integer n is a power of two, if there exists an integer x such that n == 2^x.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 1:</span>\n<span class=\"hljs-comment\"># Input: n = 1</span>\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: 2^0 = 1</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 2:</span>\n<span class=\"hljs-comment\"># Input: n = 16</span>\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: 2^4 = 16</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 3:</span>\n<span class=\"hljs-comment\"># Input: n = 3</span>\n<span class=\"hljs-comment\"># Output: false</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 4:</span>\n<span class=\"hljs-comment\"># Input: n = 4</span>\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 5:</span>\n<span class=\"hljs-comment\"># Input: n = 5</span>\n<span class=\"hljs-comment\"># Output: false</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Constraints: -231 &lt;= n &lt;= 231 - 1</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer} n</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Boolean}</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Approach 1: Recursion</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(logn)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_power_of_two</span><span class=\"hljs-params\">(n)</span></span>\n  <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-literal\">true</span>\n  <span class=\"hljs-keyword\">elsif</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n    is_power_of_two(n / <span class=\"hljs-number\">2</span>)\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nn = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">16</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-comment\"># Output: false</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">5</span>\n<span class=\"hljs-comment\"># Output: false</span>\nputs is_power_of_two(n)\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: Without recursion</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_power_of_two</span><span class=\"hljs-params\">(n)</span></span>\n  <span class=\"hljs-keyword\">while</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> &amp;&amp; n != <span class=\"hljs-number\">0</span>\n    n /= <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">end</span>\n  n == <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">end</span>\n\nn = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">16</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-comment\"># Output: false</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">5</span>\n<span class=\"hljs-comment\"># Output: false</span>\nputs is_power_of_two(n)\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 3: Using Math library</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(1)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_power_of_two</span><span class=\"hljs-params\">(n)</span></span>\n  result_exponent = Math.log(n) / Math.log(<span class=\"hljs-number\">2</span>)\n  result_exponent % <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">end</span>\n\nn = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">16</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-comment\"># Output: false</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\"># Output: true</span>\nputs is_power_of_two(n)\nn = <span class=\"hljs-number\">5</span>\n<span class=\"hljs-comment\"># Output: false</span>\nputs is_power_of_two(n)\n"
    }
  },
  "contributors": [
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 2
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 4
    },
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 4
    },
    {
      "name": "Neha Hasija",
      "email": "nehahasija9@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
