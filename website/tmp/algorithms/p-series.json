{
  "slug": "p-series",
  "name": "P Series",
  "categories": ["math", "series"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/series/p_series.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/series/p_series.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is a pure Python implementation of the P-Series algorithm\nhttps://en.wikipedia.org/wiki/Harmonic_series_(mathematics)#P-series\n\nFor doctests run following command:\npython -m doctest -v p_series.py\nor\npython3 -m doctest -v p_series.py\n\nFor manual testing run:\npython3 p_series.py\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">p_series</span>(<span class=\"hljs-params\">nth_term: <span class=\"hljs-built_in\">int</span>, power: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure Python implementation of P-Series algorithm\n\n    :return: The P-Series starting from 1 to last (nth) term\n\n    Examples:\n    &gt;&gt;&gt; p_series(5, 2)\n    [1, &#x27;1/4&#x27;, &#x27;1/9&#x27;, &#x27;1/16&#x27;, &#x27;1/25&#x27;]\n    &gt;&gt;&gt; p_series(-5, 2)\n    []\n    &gt;&gt;&gt; p_series(5, -2)\n    [1, &#x27;1/0.25&#x27;, &#x27;1/0.1111111111111111&#x27;, &#x27;1/0.0625&#x27;, &#x27;1/0.04&#x27;]\n    &gt;&gt;&gt; p_series(&quot;&quot;, 1000)\n    &#x27;&#x27;\n    &gt;&gt;&gt; p_series(0, 0)\n    []\n    &gt;&gt;&gt; p_series(1, 1)\n    [1]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> nth_term == <span class=\"hljs-string\">&quot;&quot;</span>:\n        <span class=\"hljs-keyword\">return</span> nth_term\n    nth_term = <span class=\"hljs-built_in\">int</span>(nth_term)\n    power = <span class=\"hljs-built_in\">int</span>(power)\n    series = []\n    <span class=\"hljs-keyword\">for</span> temp <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">int</span>(nth_term)):\n        series.append(<span class=\"hljs-string\">f&quot;1/<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">pow</span>(temp + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">int</span>(power))}</span>&quot;</span> <span class=\"hljs-keyword\">if</span> series <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">return</span> series\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    nth_term = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the last number (nth term) of the P-Series&quot;</span>)\n    power = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the power for  P-Series&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Formula of P-Series =&gt; 1+1/2^p+1/3^p ..... 1/n^p&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(p_series(nth_term, power))\n"
    }
  },
  "contributors": [
    {
      "name": "Muhammad Ibtihaj Naeem",
      "email": "i.ibtihajnaeem@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
