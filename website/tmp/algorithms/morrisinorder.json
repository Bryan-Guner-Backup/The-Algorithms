{
  "slug": "morrisinorder",
  "name": "Morrisinorder",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/morrisinorder.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/morrisinorder.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span>\n\n<span class=\"hljs-comment\">/**************************\n    @author shrutisheoran\n**************************/</span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Btree</span> {\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Btree</span> *left;   <span class=\"hljs-comment\">// Pointer to left subtree</span>\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Btree</span> *right;  <span class=\"hljs-comment\">// Pointer to right subtree</span>\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Btree **root, <span class=\"hljs-type\">int</span> d)</span> </span>{\n    Btree *nn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Btree</span>();  <span class=\"hljs-comment\">// Creating new node</span>\n    nn-&gt;data = d;\n    nn-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n    nn-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">if</span> (*root == <span class=\"hljs-literal\">NULL</span>) {\n        *root = nn;\n        <span class=\"hljs-keyword\">return</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        queue&lt;Btree *&gt; q;\n        <span class=\"hljs-comment\">// Adding root node to queue</span>\n        q.<span class=\"hljs-built_in\">push</span>(*root);\n        <span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>()) {\n            Btree *node = q.<span class=\"hljs-built_in\">front</span>();\n            <span class=\"hljs-comment\">// Removing parent node from queue</span>\n            q.<span class=\"hljs-built_in\">pop</span>();\n            <span class=\"hljs-keyword\">if</span> (node-&gt;left)\n                <span class=\"hljs-comment\">// Adding left child of removed node to queue</span>\n                q.<span class=\"hljs-built_in\">push</span>(node-&gt;left);\n            <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// Adding new node if no left child is present</span>\n                node-&gt;left = nn;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (node-&gt;right)\n                <span class=\"hljs-comment\">// Adding right child of removed node to queue</span>\n                q.<span class=\"hljs-built_in\">push</span>(node-&gt;right);\n            <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// Adding new node if no right child is present</span>\n                node-&gt;right = nn;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">morrisInorder</span><span class=\"hljs-params\">(Btree *root)</span> </span>{\n    Btree *curr = root;\n    Btree *temp;\n    <span class=\"hljs-keyword\">while</span> (curr) {\n        <span class=\"hljs-keyword\">if</span> (curr-&gt;left == <span class=\"hljs-literal\">NULL</span>) {\n            cout &lt;&lt; curr-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n            <span class=\"hljs-comment\">// If left of current node is NULL then curr is shifted to right</span>\n            curr = curr-&gt;right;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Left of current node is stored in temp</span>\n            temp = curr-&gt;left;\n            <span class=\"hljs-comment\">// Moving to extreme right of temp</span>\n            <span class=\"hljs-keyword\">while</span> (temp-&gt;right &amp;&amp; temp-&gt;right != curr) temp = temp-&gt;right;\n            <span class=\"hljs-comment\">// If extreme right is null it is made to point to currrent node</span>\n            <span class=\"hljs-comment\">// (will be used for backtracking)</span>\n            <span class=\"hljs-keyword\">if</span> (temp-&gt;right == <span class=\"hljs-literal\">NULL</span>) {\n                temp-&gt;right = curr;\n                <span class=\"hljs-comment\">// current node is made to point its left subtree</span>\n                curr = curr-&gt;left;\n            }\n            <span class=\"hljs-comment\">// If extreme right already points to currrent node it it set to</span>\n            <span class=\"hljs-comment\">// null</span>\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp-&gt;right == curr) {\n                cout &lt;&lt; curr-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n                temp-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n                <span class=\"hljs-comment\">// current node is made to point its right subtree</span>\n                curr = curr-&gt;right;\n            }\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Testing morrisInorder funtion</span>\n    Btree *root = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">7</span>; i++) <span class=\"hljs-built_in\">insert</span>(&amp;root, i);\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Morris Inorder: &quot;</span>;\n    <span class=\"hljs-built_in\">morrisInorder</span>(root);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shruti Sheoran",
      "email": "shruti.sheoran03@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
