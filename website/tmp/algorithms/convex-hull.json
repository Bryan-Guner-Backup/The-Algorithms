{
  "slug": "convex-hull",
  "name": "Convex Hull",
  "categories": ["divideandconquer"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer/convex_hull.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer/convex_hull.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThe convex hull problem is problem of finding all the vertices of convex polygon, P of\na set of points in a plane such that all the points are either on the vertices of P or\ninside P. TH convex hull problem has several applications in geometrical problems,\ncomputer graphics and game development.\n\nTwo algorithms have been implemented for the convex hull problem here.\n1. A brute-force algorithm which runs in O(n^3)\n2. A divide-and-conquer algorithm which runs in O(n log(n))\n\nThere are other several other algorithms for the convex hull problem\nwhich have not been implemented here, yet.\n\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Iterable, <span class=\"hljs-type\">List</span>, <span class=\"hljs-type\">Set</span>, <span class=\"hljs-type\">Union</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Point</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Defines a 2-d point for use by all convex-hull algorithms.\n\n    Parameters\n    ----------\n    x: an int or a float, the x-coordinate of the 2-d point\n    y: an int or a float, the y-coordinate of the 2-d point\n\n    Examples\n    --------\n    &gt;&gt;&gt; Point(1, 2)\n    (1.0, 2.0)\n    &gt;&gt;&gt; Point(&quot;1&quot;, &quot;2&quot;)\n    (1.0, 2.0)\n    &gt;&gt;&gt; Point(1, 2) &gt; Point(0, 1)\n    True\n    &gt;&gt;&gt; Point(1, 1) == Point(1, 1)\n    True\n    &gt;&gt;&gt; Point(-0.5, 1) == Point(0.5, 1)\n    False\n    &gt;&gt;&gt; Point(&quot;pi&quot;, &quot;e&quot;)\n    Traceback (most recent call last):\n        ...\n    ValueError: could not convert string to float: &#x27;pi&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, x, y</span>):\n        self.x, self.y = <span class=\"hljs-built_in\">float</span>(x), <span class=\"hljs-built_in\">float</span>(y)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">return</span> self.x == other.x <span class=\"hljs-keyword\">and</span> self.y == other.y\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__ne__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> self == other\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__gt__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">if</span> self.x &gt; other.x:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">elif</span> self.x == other.x:\n            <span class=\"hljs-keyword\">return</span> self.y &gt; other.y\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__lt__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> self &gt; other\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__ge__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">if</span> self.x &gt; other.x:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">elif</span> self.x == other.x:\n            <span class=\"hljs-keyword\">return</span> self.y &gt;= other.y\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__le__</span>(<span class=\"hljs-params\">self, other</span>):\n        <span class=\"hljs-keyword\">if</span> self.x &lt; other.x:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">elif</span> self.x == other.x:\n            <span class=\"hljs-keyword\">return</span> self.y &lt;= other.y\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;(<span class=\"hljs-subst\">{self.x}</span>, <span class=\"hljs-subst\">{self.y}</span>)&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__hash__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">hash</span>(self.x)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_construct_points</span>(<span class=\"hljs-params\">\n    list_of_tuples: <span class=\"hljs-type\">Union</span>[<span class=\"hljs-type\">List</span>[Point], <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">float</span>]], Iterable[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">float</span>]]]\n</span>) -&gt; <span class=\"hljs-type\">List</span>[Point]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    constructs a list of points from an array-like object of numbers\n\n    Arguments\n    ---------\n\n    list_of_tuples: array-like object of type numbers. Acceptable types so far\n    are lists, tuples and sets.\n\n    Returns\n    --------\n    points: a list where each item is of type Point. This contains only objects\n    which can be converted into a Point.\n\n    Examples\n    -------\n    &gt;&gt;&gt; _construct_points([[1, 1], [2, -1], [0.3, 4]])\n    [(1.0, 1.0), (2.0, -1.0), (0.3, 4.0)]\n    &gt;&gt;&gt; _construct_points([1, 2])\n    Ignoring deformed point 1. All points must have at least 2 coordinates.\n    Ignoring deformed point 2. All points must have at least 2 coordinates.\n    []\n    &gt;&gt;&gt; _construct_points([])\n    []\n    &gt;&gt;&gt; _construct_points(None)\n    []\n    &quot;&quot;&quot;</span>\n\n    points: <span class=\"hljs-type\">List</span>[Point] = []\n    <span class=\"hljs-keyword\">if</span> list_of_tuples:\n        <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> list_of_tuples:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(p, Point):\n                points.append(p)\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">try</span>:\n                    points.append(Point(p[<span class=\"hljs-number\">0</span>], p[<span class=\"hljs-number\">1</span>]))\n                <span class=\"hljs-keyword\">except</span> (IndexError, TypeError):\n                    <span class=\"hljs-built_in\">print</span>(\n                        <span class=\"hljs-string\">f&quot;Ignoring deformed point <span class=\"hljs-subst\">{p}</span>. All points&quot;</span>\n                        <span class=\"hljs-string\">&quot; must have at least 2 coordinates.&quot;</span>\n                    )\n    <span class=\"hljs-keyword\">return</span> points\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_validate_input</span>(<span class=\"hljs-params\">points: <span class=\"hljs-type\">Union</span>[<span class=\"hljs-type\">List</span>[Point], <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">float</span>]]]</span>) -&gt; <span class=\"hljs-type\">List</span>[Point]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    validates an input instance before a convex-hull algorithms uses it\n\n    Parameters\n    ---------\n    points: array-like, the 2d points to validate before using with\n    a convex-hull algorithm. The elements of points must be either lists, tuples or\n    Points.\n\n    Returns\n    -------\n    points: array_like, an iterable of all well-defined Points constructed passed in.\n\n\n    Exception\n    ---------\n    ValueError: if points is empty or None, or if a wrong data structure like a scalar\n                 is passed\n\n    TypeError: if an iterable but non-indexable object (eg. dictionary) is passed.\n                The exception to this a set which we&#x27;ll convert to a list before using\n\n\n    Examples\n    -------\n    &gt;&gt;&gt; _validate_input([[1, 2]])\n    [(1.0, 2.0)]\n    &gt;&gt;&gt; _validate_input([(1, 2)])\n    [(1.0, 2.0)]\n    &gt;&gt;&gt; _validate_input([Point(2, 1), Point(-1, 2)])\n    [(2.0, 1.0), (-1.0, 2.0)]\n    &gt;&gt;&gt; _validate_input([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Expecting a list of points but got []\n    &gt;&gt;&gt; _validate_input(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Expecting an iterable object but got an non-iterable type 1\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">hasattr</span>(points, <span class=\"hljs-string\">&quot;__iter__&quot;</span>):\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;Expecting an iterable object but got an non-iterable type <span class=\"hljs-subst\">{points}</span>&quot;</span>\n        )\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> points:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;Expecting a list of points but got <span class=\"hljs-subst\">{points}</span>&quot;</span>)\n\n    <span class=\"hljs-keyword\">return</span> _construct_points(points)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_det</span>(<span class=\"hljs-params\">a: Point, b: Point, c: Point</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Computes the sign perpendicular distance of a 2d point c from a line segment\n    ab. The sign indicates the direction of c relative to ab.\n    A Positive value means c is above ab (to the left), while a negative value\n    means c is below ab (to the right). 0 means all three points are on a straight line.\n\n    As a side note, 0.5 * abs|det| is the area of triangle abc\n\n    Parameters\n    ----------\n    a: point, the point on the left end of line segment ab\n    b: point, the point on the right end of line segment ab\n    c: point, the point for which the direction and location is desired.\n\n    Returns\n    --------\n    det: float, abs(det) is the distance of c from ab. The sign\n    indicates which side of line segment ab c is. det is computed as\n    (a_xb_y + c_xa_y + b_xc_y) - (a_yb_x + c_ya_x + b_yc_x)\n\n    Examples\n    ----------\n    &gt;&gt;&gt; _det(Point(1, 1), Point(1, 2), Point(1, 5))\n    0.0\n    &gt;&gt;&gt; _det(Point(0, 0), Point(10, 0), Point(0, 10))\n    100.0\n    &gt;&gt;&gt; _det(Point(0, 0), Point(10, 0), Point(0, -10))\n    -100.0\n    &quot;&quot;&quot;</span>\n\n    det = (a.x * b.y + b.x * c.y + c.x * a.y) - (a.y * b.x + b.y * c.x + c.y * a.x)\n    <span class=\"hljs-keyword\">return</span> det\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">convex_hull_bf</span>(<span class=\"hljs-params\">points: <span class=\"hljs-type\">List</span>[Point]</span>) -&gt; <span class=\"hljs-type\">List</span>[Point]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Constructs the convex hull of a set of 2D points using a brute force algorithm.\n    The algorithm basically considers all combinations of points (i, j) and uses the\n    definition of convexity to determine whether (i, j) is part of the convex hull or\n    not.  (i, j) is part of the convex hull if and only iff there are no points on both\n    sides of the line segment connecting the ij, and there is no point k such that k is\n    on either end of the ij.\n\n    Runtime: O(n^3) - definitely horrible\n\n    Parameters\n    ---------\n    points: array-like of object of Points, lists or tuples.\n    The set of  2d points for which the convex-hull is needed\n\n    Returns\n    ------\n    convex_set: list, the convex-hull of points sorted in non-decreasing order.\n\n    See Also\n    --------\n    convex_hull_recursive,\n\n     Examples\n     ---------\n     &gt;&gt;&gt; convex_hull_bf([[0, 0], [1, 0], [10, 1]])\n     [(0.0, 0.0), (1.0, 0.0), (10.0, 1.0)]\n     &gt;&gt;&gt; convex_hull_bf([[0, 0], [1, 0], [10, 0]])\n     [(0.0, 0.0), (10.0, 0.0)]\n     &gt;&gt;&gt; convex_hull_bf([[-1, 1],[-1, -1], [0, 0], [0.5, 0.5], [1, -1], [1, 1],\n     ...                 [-0.75, 1]])\n     [(-1.0, -1.0), (-1.0, 1.0), (1.0, -1.0), (1.0, 1.0)]\n     &gt;&gt;&gt; convex_hull_bf([(0, 3), (2, 2), (1, 1), (2, 1), (3, 0), (0, 0), (3, 3),\n     ...                 (2, -1), (2, -4), (1, -3)])\n     [(0.0, 0.0), (0.0, 3.0), (1.0, -3.0), (2.0, -4.0), (3.0, 0.0), (3.0, 3.0)]\n    &quot;&quot;&quot;</span>\n\n    points = <span class=\"hljs-built_in\">sorted</span>(_validate_input(points))\n    n = <span class=\"hljs-built_in\">len</span>(points)\n    convex_set = <span class=\"hljs-built_in\">set</span>()\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, n):\n            points_left_of_ij = points_right_of_ij = <span class=\"hljs-literal\">False</span>\n            ij_part_of_convex_hull = <span class=\"hljs-literal\">True</span>\n            <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n                <span class=\"hljs-keyword\">if</span> k != i <span class=\"hljs-keyword\">and</span> k != j:\n                    det_k = _det(points[i], points[j], points[k])\n\n                    <span class=\"hljs-keyword\">if</span> det_k &gt; <span class=\"hljs-number\">0</span>:\n                        points_left_of_ij = <span class=\"hljs-literal\">True</span>\n                    <span class=\"hljs-keyword\">elif</span> det_k &lt; <span class=\"hljs-number\">0</span>:\n                        points_right_of_ij = <span class=\"hljs-literal\">True</span>\n                    <span class=\"hljs-keyword\">else</span>:\n                        <span class=\"hljs-comment\"># point[i], point[j], point[k] all lie on a straight line</span>\n                        <span class=\"hljs-comment\"># if point[k] is to the left of point[i] or it&#x27;s to the</span>\n                        <span class=\"hljs-comment\"># right of point[j], then point[i], point[j] cannot be</span>\n                        <span class=\"hljs-comment\"># part of the convex hull of A</span>\n                        <span class=\"hljs-keyword\">if</span> points[k] &lt; points[i] <span class=\"hljs-keyword\">or</span> points[k] &gt; points[j]:\n                            ij_part_of_convex_hull = <span class=\"hljs-literal\">False</span>\n                            <span class=\"hljs-keyword\">break</span>\n\n                <span class=\"hljs-keyword\">if</span> points_left_of_ij <span class=\"hljs-keyword\">and</span> points_right_of_ij:\n                    ij_part_of_convex_hull = <span class=\"hljs-literal\">False</span>\n                    <span class=\"hljs-keyword\">break</span>\n\n            <span class=\"hljs-keyword\">if</span> ij_part_of_convex_hull:\n                convex_set.update([points[i], points[j]])\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>(convex_set)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">convex_hull_recursive</span>(<span class=\"hljs-params\">points: <span class=\"hljs-type\">List</span>[Point]</span>) -&gt; <span class=\"hljs-type\">List</span>[Point]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Constructs the convex hull of a set of 2D points using a divide-and-conquer strategy\n    The algorithm exploits the geometric properties of the problem by repeatedly\n    partitioning the set of points into smaller hulls, and finding the convex hull of\n    these smaller hulls.  The union of the convex hull from smaller hulls is the\n    solution to the convex hull of the larger problem.\n\n    Parameter\n    ---------\n    points: array-like of object of Points, lists or tuples.\n    The set of  2d points for which the convex-hull is needed\n\n    Runtime: O(n log n)\n\n    Returns\n    -------\n    convex_set: list, the convex-hull of points sorted in non-decreasing order.\n\n    Examples\n    ---------\n    &gt;&gt;&gt; convex_hull_recursive([[0, 0], [1, 0], [10, 1]])\n    [(0.0, 0.0), (1.0, 0.0), (10.0, 1.0)]\n    &gt;&gt;&gt; convex_hull_recursive([[0, 0], [1, 0], [10, 0]])\n    [(0.0, 0.0), (10.0, 0.0)]\n    &gt;&gt;&gt; convex_hull_recursive([[-1, 1],[-1, -1], [0, 0], [0.5, 0.5], [1, -1], [1, 1],\n    ...                        [-0.75, 1]])\n    [(-1.0, -1.0), (-1.0, 1.0), (1.0, -1.0), (1.0, 1.0)]\n    &gt;&gt;&gt; convex_hull_recursive([(0, 3), (2, 2), (1, 1), (2, 1), (3, 0), (0, 0), (3, 3),\n    ...                        (2, -1), (2, -4), (1, -3)])\n    [(0.0, 0.0), (0.0, 3.0), (1.0, -3.0), (2.0, -4.0), (3.0, 0.0), (3.0, 3.0)]\n\n    &quot;&quot;&quot;</span>\n    points = <span class=\"hljs-built_in\">sorted</span>(_validate_input(points))\n    n = <span class=\"hljs-built_in\">len</span>(points)\n\n    <span class=\"hljs-comment\"># divide all the points into an upper hull and a lower hull</span>\n    <span class=\"hljs-comment\"># the left most point and the right most point are definitely</span>\n    <span class=\"hljs-comment\"># members of the convex hull by definition.</span>\n    <span class=\"hljs-comment\"># use these two anchors to divide all the points into two hulls,</span>\n    <span class=\"hljs-comment\"># an upper hull and a lower hull.</span>\n\n    <span class=\"hljs-comment\"># all points to the left (above) the line joining the extreme points belong to the</span>\n    <span class=\"hljs-comment\"># upper hull</span>\n    <span class=\"hljs-comment\"># all points to the right (below) the line joining the extreme points below to the</span>\n    <span class=\"hljs-comment\"># lower hull</span>\n    <span class=\"hljs-comment\"># ignore all points on the line joining the extreme points since they cannot be</span>\n    <span class=\"hljs-comment\"># part of the convex hull</span>\n\n    left_most_point = points[<span class=\"hljs-number\">0</span>]\n    right_most_point = points[n - <span class=\"hljs-number\">1</span>]\n\n    convex_set = {left_most_point, right_most_point}\n    upper_hull = []\n    lower_hull = []\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>):\n        det = _det(left_most_point, right_most_point, points[i])\n\n        <span class=\"hljs-keyword\">if</span> det &gt; <span class=\"hljs-number\">0</span>:\n            upper_hull.append(points[i])\n        <span class=\"hljs-keyword\">elif</span> det &lt; <span class=\"hljs-number\">0</span>:\n            lower_hull.append(points[i])\n\n    _construct_hull(upper_hull, left_most_point, right_most_point, convex_set)\n    _construct_hull(lower_hull, right_most_point, left_most_point, convex_set)\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>(convex_set)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_construct_hull</span>(<span class=\"hljs-params\">\n    points: <span class=\"hljs-type\">List</span>[Point], left: Point, right: Point, convex_set: <span class=\"hljs-type\">Set</span>[Point]\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n\n    Parameters\n    ---------\n    points: list or None, the hull of points from which to choose the next convex-hull\n        point\n    left: Point, the point to the left  of line segment joining left and right\n    right: The point to the right of the line segment joining left and right\n    convex_set: set, the current convex-hull. The state of convex-set gets updated by\n        this function\n\n    Note\n    ----\n    For the line segment &#x27;ab&#x27;, &#x27;a&#x27; is on the left and &#x27;b&#x27; on the right.\n    but the reverse is true for the line segment &#x27;ba&#x27;.\n\n    Returns\n    -------\n    Nothing, only updates the state of convex-set\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> points:\n        extreme_point = <span class=\"hljs-literal\">None</span>\n        extreme_point_distance = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;-inf&quot;</span>)\n        candidate_points = []\n\n        <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> points:\n            det = _det(left, right, p)\n\n            <span class=\"hljs-keyword\">if</span> det &gt; <span class=\"hljs-number\">0</span>:\n                candidate_points.append(p)\n\n                <span class=\"hljs-keyword\">if</span> det &gt; extreme_point_distance:\n                    extreme_point_distance = det\n                    extreme_point = p\n\n        <span class=\"hljs-keyword\">if</span> extreme_point:\n            _construct_hull(candidate_points, left, extreme_point, convex_set)\n            convex_set.add(extreme_point)\n            _construct_hull(candidate_points, extreme_point, right, convex_set)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">convex_hull_melkman</span>(<span class=\"hljs-params\">points: <span class=\"hljs-type\">List</span>[Point]</span>) -&gt; <span class=\"hljs-type\">List</span>[Point]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Constructs the convex hull of a set of 2D points using the melkman algorithm.\n    The algorithm works by iteratively inserting points of a simple polygonal chain\n    (meaning that no line segments between two consecutive points cross each other).\n    Sorting the points yields such a polygonal chain.\n\n    For a detailed description, see http://cgm.cs.mcgill.ca/~athens/cs601/Melkman.html\n\n    Runtime: O(n log n) - O(n) if points are already sorted in the input\n\n    Parameters\n    ---------\n    points: array-like of object of Points, lists or tuples.\n    The set of 2d points for which the convex-hull is needed\n\n    Returns\n    ------\n    convex_set: list, the convex-hull of points sorted in non-decreasing order.\n\n    See Also\n    --------\n\n    Examples\n    ---------\n    &gt;&gt;&gt; convex_hull_melkman([[0, 0], [1, 0], [10, 1]])\n    [(0.0, 0.0), (1.0, 0.0), (10.0, 1.0)]\n    &gt;&gt;&gt; convex_hull_melkman([[0, 0], [1, 0], [10, 0]])\n    [(0.0, 0.0), (10.0, 0.0)]\n    &gt;&gt;&gt; convex_hull_melkman([[-1, 1],[-1, -1], [0, 0], [0.5, 0.5], [1, -1], [1, 1],\n    ...                 [-0.75, 1]])\n    [(-1.0, -1.0), (-1.0, 1.0), (1.0, -1.0), (1.0, 1.0)]\n    &gt;&gt;&gt; convex_hull_melkman([(0, 3), (2, 2), (1, 1), (2, 1), (3, 0), (0, 0), (3, 3),\n    ...                 (2, -1), (2, -4), (1, -3)])\n    [(0.0, 0.0), (0.0, 3.0), (1.0, -3.0), (2.0, -4.0), (3.0, 0.0), (3.0, 3.0)]\n    &quot;&quot;&quot;</span>\n    points = <span class=\"hljs-built_in\">sorted</span>(_validate_input(points))\n    n = <span class=\"hljs-built_in\">len</span>(points)\n\n    convex_hull = points[:<span class=\"hljs-number\">2</span>]\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, n):\n        det = _det(convex_hull[<span class=\"hljs-number\">1</span>], convex_hull[<span class=\"hljs-number\">0</span>], points[i])\n        <span class=\"hljs-keyword\">if</span> det &gt; <span class=\"hljs-number\">0</span>:\n            convex_hull.insert(<span class=\"hljs-number\">0</span>, points[i])\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">elif</span> det &lt; <span class=\"hljs-number\">0</span>:\n            convex_hull.append(points[i])\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">else</span>:\n            convex_hull[<span class=\"hljs-number\">1</span>] = points[i]\n    i += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i, n):\n        <span class=\"hljs-keyword\">if</span> (\n            _det(convex_hull[<span class=\"hljs-number\">0</span>], convex_hull[-<span class=\"hljs-number\">1</span>], points[i]) &gt; <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">and</span> _det(convex_hull[-<span class=\"hljs-number\">1</span>], convex_hull[<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">1</span>]) &lt; <span class=\"hljs-number\">0</span>\n        ):\n            <span class=\"hljs-comment\"># The point lies within the convex hull</span>\n            <span class=\"hljs-keyword\">continue</span>\n\n        convex_hull.insert(<span class=\"hljs-number\">0</span>, points[i])\n        convex_hull.append(points[i])\n        <span class=\"hljs-keyword\">while</span> _det(convex_hull[<span class=\"hljs-number\">0</span>], convex_hull[<span class=\"hljs-number\">1</span>], convex_hull[<span class=\"hljs-number\">2</span>]) &gt;= <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">del</span> convex_hull[<span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">while</span> _det(convex_hull[-<span class=\"hljs-number\">1</span>], convex_hull[-<span class=\"hljs-number\">2</span>], convex_hull[-<span class=\"hljs-number\">3</span>]) &lt;= <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">del</span> convex_hull[-<span class=\"hljs-number\">2</span>]\n\n    <span class=\"hljs-comment\"># `convex_hull` is contains the convex hull in circular order</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>(convex_hull[<span class=\"hljs-number\">1</span>:] <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(convex_hull) &gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-keyword\">else</span> convex_hull)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    points = [\n        (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>),\n        (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>),\n        (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>),\n        (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>),\n        (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>),\n        (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),\n        (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>),\n        (<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>),\n        (<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">4</span>),\n        (<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">3</span>),\n    ]\n    <span class=\"hljs-comment\"># the convex set of points is</span>\n    <span class=\"hljs-comment\"># [(0, 0), (0, 3), (1, -3), (2, -4), (3, 0), (3, 3)]</span>\n    results_bf = convex_hull_bf(points)\n\n    results_recursive = convex_hull_recursive(points)\n    <span class=\"hljs-keyword\">assert</span> results_bf == results_recursive\n\n    results_melkman = convex_hull_melkman(points)\n    <span class=\"hljs-keyword\">assert</span> results_bf == results_melkman\n\n    <span class=\"hljs-built_in\">print</span>(results_bf)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "rust": {
      "dir": "src/general/convex_hull.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/general/convex_hull.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp::Ordering::Equal;\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">sort_by_min_angle</span>(pts: &amp;[(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)], min: &amp;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)&gt; {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">points</span>: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>, (<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>))&gt; = pts\n        .<span class=\"hljs-title function_ invoke__\">iter</span>()\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|x| {\n            (\n                ((x.<span class=\"hljs-number\">1</span> - min.<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>).<span class=\"hljs-title function_ invoke__\">atan2</span>((x.<span class=\"hljs-number\">0</span> - min.<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>),\n                <span class=\"hljs-comment\">// angle</span>\n                ((x.<span class=\"hljs-number\">1</span> - min.<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>).<span class=\"hljs-title function_ invoke__\">hypot</span>((x.<span class=\"hljs-number\">0</span> - min.<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">f64</span>),\n                <span class=\"hljs-comment\">// distance (we want the closest to be first)</span>\n                *x,\n            )\n        })\n        .<span class=\"hljs-title function_ invoke__\">collect</span>();\n    points.<span class=\"hljs-title function_ invoke__\">sort_by</span>(|a, b| a.<span class=\"hljs-title function_ invoke__\">partial_cmp</span>(b).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(Equal));\n    points.<span class=\"hljs-title function_ invoke__\">into_iter</span>().<span class=\"hljs-title function_ invoke__\">map</span>(|x| x.<span class=\"hljs-number\">2</span>).<span class=\"hljs-title function_ invoke__\">collect</span>()\n}\n\n<span class=\"hljs-comment\">// calculates the z coordinate of the vector product of vectors ab and ac</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">calc_z_coord_vector_product</span>(a: &amp;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>), b: &amp;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>), c: &amp;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">f64</span> {\n    (b.<span class=\"hljs-number\">0</span> - a.<span class=\"hljs-number\">0</span>) * (c.<span class=\"hljs-number\">1</span> - a.<span class=\"hljs-number\">1</span>) - (c.<span class=\"hljs-number\">0</span> - a.<span class=\"hljs-number\">0</span>) * (b.<span class=\"hljs-number\">1</span> - a.<span class=\"hljs-number\">1</span>)\n}\n\n<span class=\"hljs-comment\">/*\n    If three points are aligned and are part of the convex hull then the three are kept.\n    If one doesn&#x27;t want to keep those points, it is easy to iterate the answer and remove them.\n\n    The first point is the one with the lowest y-coordinate and the lowest x-coordinate.\n    Points are then given counter-clockwise, and the closest one is given first if needed.\n*/</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">convex_hull_graham</span>(pts: &amp;[(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)&gt; {\n    <span class=\"hljs-keyword\">if</span> pts.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">vec!</span>[];\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">stack</span>: <span class=\"hljs-type\">Vec</span>&lt;(<span class=\"hljs-type\">f64</span>, <span class=\"hljs-type\">f64</span>)&gt; = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">min</span> = pts\n        .<span class=\"hljs-title function_ invoke__\">iter</span>()\n        .<span class=\"hljs-title function_ invoke__\">min_by</span>(|a, b| {\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ord</span> = a.<span class=\"hljs-number\">1</span>.<span class=\"hljs-title function_ invoke__\">partial_cmp</span>(&amp;b.<span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(Equal);\n            <span class=\"hljs-keyword\">match</span> ord {\n                Equal =&gt; a.<span class=\"hljs-number\">0</span>.<span class=\"hljs-title function_ invoke__\">partial_cmp</span>(&amp;b.<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_ invoke__\">unwrap_or</span>(Equal),\n                o =&gt; o,\n            }\n        })\n        .<span class=\"hljs-title function_ invoke__\">unwrap</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">points</span> = <span class=\"hljs-title function_ invoke__\">sort_by_min_angle</span>(pts, &amp;min);\n\n    <span class=\"hljs-keyword\">if</span> points.<span class=\"hljs-title function_ invoke__\">len</span>() &lt;= <span class=\"hljs-number\">3</span> {\n        <span class=\"hljs-keyword\">return</span> points;\n    }\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">point</span> <span class=\"hljs-keyword\">in</span> points {\n        <span class=\"hljs-keyword\">while</span> stack.<span class=\"hljs-title function_ invoke__\">len</span>() &gt; <span class=\"hljs-number\">1</span>\n            &amp;&amp; <span class=\"hljs-title function_ invoke__\">calc_z_coord_vector_product</span>(&amp;stack[stack.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">2</span>], &amp;stack[stack.<span class=\"hljs-title function_ invoke__\">len</span>() - <span class=\"hljs-number\">1</span>], &amp;point)\n                &lt; <span class=\"hljs-number\">0</span>.\n        {\n            stack.<span class=\"hljs-title function_ invoke__\">pop</span>();\n        }\n        stack.<span class=\"hljs-title function_ invoke__\">push</span>(point);\n    }\n\n    stack\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">convex_hull_graham</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[]), <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not_enough_points</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">list</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">0f64</span>, <span class=\"hljs-number\">0f64</span>)];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">convex_hull_graham</span>(&amp;list), list);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not_enough_points1</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">list</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">2f64</span>, <span class=\"hljs-number\">2f64</span>), (<span class=\"hljs-number\">1f64</span>, <span class=\"hljs-number\">1f64</span>), (<span class=\"hljs-number\">0f64</span>, <span class=\"hljs-number\">0f64</span>)];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ans</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">0f64</span>, <span class=\"hljs-number\">0f64</span>), (<span class=\"hljs-number\">1f64</span>, <span class=\"hljs-number\">1f64</span>), (<span class=\"hljs-number\">2f64</span>, <span class=\"hljs-number\">2f64</span>)];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">convex_hull_graham</span>(&amp;list), ans);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not_enough_points2</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">list</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">2f64</span>, <span class=\"hljs-number\">2f64</span>), (<span class=\"hljs-number\">1f64</span>, <span class=\"hljs-number\">2f64</span>), (<span class=\"hljs-number\">0f64</span>, <span class=\"hljs-number\">0f64</span>)];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ans</span> = <span class=\"hljs-built_in\">vec!</span>[(<span class=\"hljs-number\">0f64</span>, <span class=\"hljs-number\">0f64</span>), (<span class=\"hljs-number\">2f64</span>, <span class=\"hljs-number\">2f64</span>), (<span class=\"hljs-number\">1f64</span>, <span class=\"hljs-number\">2f64</span>)];\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">convex_hull_graham</span>(&amp;list), ans);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-comment\">// from https://codegolf.stackexchange.com/questions/11035/find-the-convex-hull-of-a-set-of-2d-points</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">lots_of_points</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">list</span> = <span class=\"hljs-built_in\">vec!</span>[\n            (<span class=\"hljs-number\">4.4</span>, <span class=\"hljs-number\">14</span>.),\n            (<span class=\"hljs-number\">6.7</span>, <span class=\"hljs-number\">15.25</span>),\n            (<span class=\"hljs-number\">6.9</span>, <span class=\"hljs-number\">12.8</span>),\n            (<span class=\"hljs-number\">2.1</span>, <span class=\"hljs-number\">11.1</span>),\n            (<span class=\"hljs-number\">9.5</span>, <span class=\"hljs-number\">14.9</span>),\n            (<span class=\"hljs-number\">13.2</span>, <span class=\"hljs-number\">11.9</span>),\n            (<span class=\"hljs-number\">10.3</span>, <span class=\"hljs-number\">12.3</span>),\n            (<span class=\"hljs-number\">6.8</span>, <span class=\"hljs-number\">9.5</span>),\n            (<span class=\"hljs-number\">3.3</span>, <span class=\"hljs-number\">7.7</span>),\n            (<span class=\"hljs-number\">0.6</span>, <span class=\"hljs-number\">5.1</span>),\n            (<span class=\"hljs-number\">5.3</span>, <span class=\"hljs-number\">2.4</span>),\n            (<span class=\"hljs-number\">8.45</span>, <span class=\"hljs-number\">4.7</span>),\n            (<span class=\"hljs-number\">11.5</span>, <span class=\"hljs-number\">9.6</span>),\n            (<span class=\"hljs-number\">13.8</span>, <span class=\"hljs-number\">7.3</span>),\n            (<span class=\"hljs-number\">12.9</span>, <span class=\"hljs-number\">3.1</span>),\n            (<span class=\"hljs-number\">11</span>., <span class=\"hljs-number\">1.1</span>),\n        ];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ans</span> = <span class=\"hljs-built_in\">vec!</span>[\n            (<span class=\"hljs-number\">11</span>., <span class=\"hljs-number\">1.1</span>),\n            (<span class=\"hljs-number\">12.9</span>, <span class=\"hljs-number\">3.1</span>),\n            (<span class=\"hljs-number\">13.8</span>, <span class=\"hljs-number\">7.3</span>),\n            (<span class=\"hljs-number\">13.2</span>, <span class=\"hljs-number\">11.9</span>),\n            (<span class=\"hljs-number\">9.5</span>, <span class=\"hljs-number\">14.9</span>),\n            (<span class=\"hljs-number\">6.7</span>, <span class=\"hljs-number\">15.25</span>),\n            (<span class=\"hljs-number\">4.4</span>, <span class=\"hljs-number\">14</span>.),\n            (<span class=\"hljs-number\">2.1</span>, <span class=\"hljs-number\">11.1</span>),\n            (<span class=\"hljs-number\">0.6</span>, <span class=\"hljs-number\">5.1</span>),\n            (<span class=\"hljs-number\">5.3</span>, <span class=\"hljs-number\">2.4</span>),\n        ];\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">convex_hull_graham</span>(&amp;list), ans);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-comment\">// from https://codegolf.stackexchange.com/questions/11035/find-the-convex-hull-of-a-set-of-2d-points</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">lots_of_points2</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">list</span> = <span class=\"hljs-built_in\">vec!</span>[\n            (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">0</span>.),\n            (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">1</span>.),\n            (<span class=\"hljs-number\">1</span>., -<span class=\"hljs-number\">1</span>.),\n            (<span class=\"hljs-number\">0.68957</span>, <span class=\"hljs-number\">0.283647</span>),\n            (<span class=\"hljs-number\">0.909487</span>, <span class=\"hljs-number\">0.644276</span>),\n            (<span class=\"hljs-number\">0.0361877</span>, <span class=\"hljs-number\">0.803816</span>),\n            (<span class=\"hljs-number\">0.583004</span>, <span class=\"hljs-number\">0.91555</span>),\n            (-<span class=\"hljs-number\">0.748169</span>, <span class=\"hljs-number\">0.210483</span>),\n            (-<span class=\"hljs-number\">0.553528</span>, -<span class=\"hljs-number\">0.967036</span>),\n            (<span class=\"hljs-number\">0.316709</span>, -<span class=\"hljs-number\">0.153861</span>),\n            (-<span class=\"hljs-number\">0.79267</span>, <span class=\"hljs-number\">0.585945</span>),\n            (-<span class=\"hljs-number\">0.700164</span>, -<span class=\"hljs-number\">0.750994</span>),\n            (<span class=\"hljs-number\">0.452273</span>, -<span class=\"hljs-number\">0.604434</span>),\n            (-<span class=\"hljs-number\">0.79134</span>, -<span class=\"hljs-number\">0.249902</span>),\n            (-<span class=\"hljs-number\">0.594918</span>, -<span class=\"hljs-number\">0.397574</span>),\n            (-<span class=\"hljs-number\">0.547371</span>, -<span class=\"hljs-number\">0.434041</span>),\n            (<span class=\"hljs-number\">0.958132</span>, -<span class=\"hljs-number\">0.499614</span>),\n            (<span class=\"hljs-number\">0.039941</span>, <span class=\"hljs-number\">0.0990732</span>),\n            (-<span class=\"hljs-number\">0.891471</span>, -<span class=\"hljs-number\">0.464943</span>),\n            (<span class=\"hljs-number\">0.513187</span>, -<span class=\"hljs-number\">0.457062</span>),\n            (-<span class=\"hljs-number\">0.930053</span>, <span class=\"hljs-number\">0.60341</span>),\n            (<span class=\"hljs-number\">0.656995</span>, <span class=\"hljs-number\">0.854205</span>),\n        ];\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">ans</span> = <span class=\"hljs-built_in\">vec!</span>[\n            (<span class=\"hljs-number\">1</span>., -<span class=\"hljs-number\">1</span>.),\n            (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">0</span>.),\n            (<span class=\"hljs-number\">1</span>., <span class=\"hljs-number\">1</span>.),\n            (<span class=\"hljs-number\">0.583004</span>, <span class=\"hljs-number\">0.91555</span>),\n            (<span class=\"hljs-number\">0.0361877</span>, <span class=\"hljs-number\">0.803816</span>),\n            (-<span class=\"hljs-number\">0.930053</span>, <span class=\"hljs-number\">0.60341</span>),\n            (-<span class=\"hljs-number\">0.891471</span>, -<span class=\"hljs-number\">0.464943</span>),\n            (-<span class=\"hljs-number\">0.700164</span>, -<span class=\"hljs-number\">0.750994</span>),\n            (-<span class=\"hljs-number\">0.553528</span>, -<span class=\"hljs-number\">0.967036</span>),\n        ];\n\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">convex_hull_graham</span>(&amp;list), ans);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Simon Lammer",
      "email": "lammer.simon@gmail.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "ELNS",
      "email": "57490926+EverLookNeverSee@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Denis Trofimov",
      "email": "silaradost@yandex.ru",
      "commits": 1
    },
    {
      "name": "Pierre Gimalac",
      "email": "pierre.gimalac@gmail.com",
      "commits": 2
    },
    {
      "name": "Maxwell Aladago",
      "email": "maxwell.aladago@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
