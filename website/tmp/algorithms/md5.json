{
  "slug": "md5",
  "name": "Md5",
  "categories": ["hashing"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "hashes/md5.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/hashes/md5.py",
      "code": "<span class=\"hljs-keyword\">import</span> math\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rearrange</span>(<span class=\"hljs-params\">bitString32</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\n    Regroups the given binary string.\n\n    Arguments:\n        bitString32 {[string]} -- [32 bit binary]\n\n    Raises:\n    ValueError -- [if the given string not are 32 bit binary string]\n\n    Returns:\n        [string] -- [32 bit binary string]\n    &gt;&gt;&gt; rearrange(&#x27;1234567890abcdfghijklmnopqrstuvw&#x27;)\n    &#x27;pqrstuvwhijklmno90abcdfg12345678&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(bitString32) != <span class=\"hljs-number\">32</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Need length 32&quot;</span>)\n    newString = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]:\n        newString += bitString32[<span class=\"hljs-number\">8</span> * i : <span class=\"hljs-number\">8</span> * i + <span class=\"hljs-number\">8</span>]\n    <span class=\"hljs-keyword\">return</span> newString\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reformatHex</span>(<span class=\"hljs-params\">i</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\n    Converts the given integer into 8-digit hex number.\n\n    Arguments:\n            i {[int]} -- [integer]\n    &gt;&gt;&gt; reformatHex(666)\n    &#x27;9a020000&#x27;\n    &quot;&quot;&quot;</span>\n\n    hexrep = <span class=\"hljs-built_in\">format</span>(i, <span class=\"hljs-string\">&quot;08x&quot;</span>)\n    thing = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]:\n        thing += hexrep[<span class=\"hljs-number\">2</span> * i : <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>]\n    <span class=\"hljs-keyword\">return</span> thing\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pad</span>(<span class=\"hljs-params\">bitString</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\n    Fills up the binary string to a 512 bit binary string\n\n    Arguments:\n            bitString {[string]} -- [binary string]\n\n    Returns:\n            [string] -- [binary string]\n    &quot;&quot;&quot;</span>\n    startLength = <span class=\"hljs-built_in\">len</span>(bitString)\n    bitString += <span class=\"hljs-string\">&quot;1&quot;</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(bitString) % <span class=\"hljs-number\">512</span> != <span class=\"hljs-number\">448</span>:\n        bitString += <span class=\"hljs-string\">&quot;0&quot;</span>\n    lastPart = <span class=\"hljs-built_in\">format</span>(startLength, <span class=\"hljs-string\">&quot;064b&quot;</span>)\n    bitString += rearrange(lastPart[<span class=\"hljs-number\">32</span>:]) + rearrange(lastPart[:<span class=\"hljs-number\">32</span>])\n    <span class=\"hljs-keyword\">return</span> bitString\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getBlock</span>(<span class=\"hljs-params\">bitString</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\n    Iterator:\n            Returns by each call a list of length 16 with the 32 bit\n            integer blocks.\n\n    Arguments:\n            bitString {[string]} -- [binary string &gt;= 512]\n    &quot;&quot;&quot;</span>\n\n    currPos = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> currPos &lt; <span class=\"hljs-built_in\">len</span>(bitString):\n        currPart = bitString[currPos : currPos + <span class=\"hljs-number\">512</span>]\n        mySplits = []\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">16</span>):\n            mySplits.append(<span class=\"hljs-built_in\">int</span>(rearrange(currPart[<span class=\"hljs-number\">32</span> * i : <span class=\"hljs-number\">32</span> * i + <span class=\"hljs-number\">32</span>]), <span class=\"hljs-number\">2</span>))\n        <span class=\"hljs-keyword\">yield</span> mySplits\n        currPos += <span class=\"hljs-number\">512</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">not32</span>(<span class=\"hljs-params\">i</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; not32(34)\n    4294967261\n    &quot;&quot;&quot;</span>\n    i_str = <span class=\"hljs-built_in\">format</span>(i, <span class=\"hljs-string\">&quot;032b&quot;</span>)\n    new_str = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> i_str:\n        new_str += <span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-keyword\">if</span> c == <span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;0&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(new_str, <span class=\"hljs-number\">2</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sum32</span>(<span class=\"hljs-params\">a, b</span>):\n    <span class=\"hljs-keyword\">return</span> (a + b) % <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">32</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">leftrot32</span>(<span class=\"hljs-params\">i, s</span>):\n    <span class=\"hljs-keyword\">return</span> (i &lt;&lt; s) ^ (i &gt;&gt; (<span class=\"hljs-number\">32</span> - s))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">md5me</span>(<span class=\"hljs-params\">testString</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;[summary]\n    Returns a 32-bit hash code of the string &#x27;testString&#x27;\n\n    Arguments:\n            testString {[string]} -- [message]\n    &quot;&quot;&quot;</span>\n\n    bs = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> testString:\n        bs += <span class=\"hljs-built_in\">format</span>(<span class=\"hljs-built_in\">ord</span>(i), <span class=\"hljs-string\">&quot;08b&quot;</span>)\n    bs = pad(bs)\n\n    tvals = [<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">32</span> * <span class=\"hljs-built_in\">abs</span>(math.sin(i + <span class=\"hljs-number\">1</span>))) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">64</span>)]\n\n    a0 = <span class=\"hljs-number\">0x67452301</span>\n    b0 = <span class=\"hljs-number\">0xEFCDAB89</span>\n    c0 = <span class=\"hljs-number\">0x98BADCFE</span>\n    d0 = <span class=\"hljs-number\">0x10325476</span>\n\n    s = [\n        <span class=\"hljs-number\">7</span>,\n        <span class=\"hljs-number\">12</span>,\n        <span class=\"hljs-number\">17</span>,\n        <span class=\"hljs-number\">22</span>,\n        <span class=\"hljs-number\">7</span>,\n        <span class=\"hljs-number\">12</span>,\n        <span class=\"hljs-number\">17</span>,\n        <span class=\"hljs-number\">22</span>,\n        <span class=\"hljs-number\">7</span>,\n        <span class=\"hljs-number\">12</span>,\n        <span class=\"hljs-number\">17</span>,\n        <span class=\"hljs-number\">22</span>,\n        <span class=\"hljs-number\">7</span>,\n        <span class=\"hljs-number\">12</span>,\n        <span class=\"hljs-number\">17</span>,\n        <span class=\"hljs-number\">22</span>,\n        <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-number\">9</span>,\n        <span class=\"hljs-number\">14</span>,\n        <span class=\"hljs-number\">20</span>,\n        <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-number\">9</span>,\n        <span class=\"hljs-number\">14</span>,\n        <span class=\"hljs-number\">20</span>,\n        <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-number\">9</span>,\n        <span class=\"hljs-number\">14</span>,\n        <span class=\"hljs-number\">20</span>,\n        <span class=\"hljs-number\">5</span>,\n        <span class=\"hljs-number\">9</span>,\n        <span class=\"hljs-number\">14</span>,\n        <span class=\"hljs-number\">20</span>,\n        <span class=\"hljs-number\">4</span>,\n        <span class=\"hljs-number\">11</span>,\n        <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-number\">23</span>,\n        <span class=\"hljs-number\">4</span>,\n        <span class=\"hljs-number\">11</span>,\n        <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-number\">23</span>,\n        <span class=\"hljs-number\">4</span>,\n        <span class=\"hljs-number\">11</span>,\n        <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-number\">23</span>,\n        <span class=\"hljs-number\">4</span>,\n        <span class=\"hljs-number\">11</span>,\n        <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-number\">23</span>,\n        <span class=\"hljs-number\">6</span>,\n        <span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-number\">15</span>,\n        <span class=\"hljs-number\">21</span>,\n        <span class=\"hljs-number\">6</span>,\n        <span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-number\">15</span>,\n        <span class=\"hljs-number\">21</span>,\n        <span class=\"hljs-number\">6</span>,\n        <span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-number\">15</span>,\n        <span class=\"hljs-number\">21</span>,\n        <span class=\"hljs-number\">6</span>,\n        <span class=\"hljs-number\">10</span>,\n        <span class=\"hljs-number\">15</span>,\n        <span class=\"hljs-number\">21</span>,\n    ]\n\n    <span class=\"hljs-keyword\">for</span> m <span class=\"hljs-keyword\">in</span> getBlock(bs):\n        A = a0\n        B = b0\n        C = c0\n        D = d0\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">64</span>):\n            <span class=\"hljs-keyword\">if</span> i &lt;= <span class=\"hljs-number\">15</span>:\n                <span class=\"hljs-comment\"># f = (B &amp; C) | (not32(B) &amp; D)</span>\n                f = D ^ (B &amp; (C ^ D))\n                g = i\n            <span class=\"hljs-keyword\">elif</span> i &lt;= <span class=\"hljs-number\">31</span>:\n                <span class=\"hljs-comment\"># f = (D &amp; B) | (not32(D) &amp; C)</span>\n                f = C ^ (D &amp; (B ^ C))\n                g = (<span class=\"hljs-number\">5</span> * i + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">16</span>\n            <span class=\"hljs-keyword\">elif</span> i &lt;= <span class=\"hljs-number\">47</span>:\n                f = B ^ C ^ D\n                g = (<span class=\"hljs-number\">3</span> * i + <span class=\"hljs-number\">5</span>) % <span class=\"hljs-number\">16</span>\n            <span class=\"hljs-keyword\">else</span>:\n                f = C ^ (B | not32(D))\n                g = (<span class=\"hljs-number\">7</span> * i) % <span class=\"hljs-number\">16</span>\n            dtemp = D\n            D = C\n            C = B\n            B = sum32(B, leftrot32((A + f + tvals[i] + m[g]) % <span class=\"hljs-number\">2</span> ** <span class=\"hljs-number\">32</span>, s[i]))\n            A = dtemp\n        a0 = sum32(a0, A)\n        b0 = sum32(b0, B)\n        c0 = sum32(c0, C)\n        d0 = sum32(d0, D)\n\n    digest = reformatHex(a0) + reformatHex(b0) + reformatHex(c0) + reformatHex(d0)\n    <span class=\"hljs-keyword\">return</span> digest\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test</span>():\n    <span class=\"hljs-keyword\">assert</span> md5me(<span class=\"hljs-string\">&quot;&quot;</span>) == <span class=\"hljs-string\">&quot;d41d8cd98f00b204e9800998ecf8427e&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        md5me(<span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>)\n        == <span class=\"hljs-string\">&quot;9e107d9d372bb6826bd81d3542a419d6&quot;</span>\n    )\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Success.&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    test()\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "naveenarun",
      "email": "notatroll.troll@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
