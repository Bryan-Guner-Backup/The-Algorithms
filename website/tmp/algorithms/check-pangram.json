{
  "slug": "check-pangram",
  "name": "Check Pangram",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/check_pangram.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/check_pangram.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nwiki: https://en.wikipedia.org/wiki/Pangram\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_pangram</span>(<span class=\"hljs-params\">\n    input_str: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A Pangram String contains all the alphabets at least once.\n    &gt;&gt;&gt; check_pangram(&quot;The quick brown fox jumps over the lazy dog&quot;)\n    True\n    &gt;&gt;&gt; check_pangram(&quot;Waltz, bad nymph, for quick jigs vex.&quot;)\n    True\n    &gt;&gt;&gt; check_pangram(&quot;Jived fox nymph grabs quick waltz.&quot;)\n    True\n    &gt;&gt;&gt; check_pangram(&quot;My name is Unknown&quot;)\n    False\n    &gt;&gt;&gt; check_pangram(&quot;The quick brown fox jumps over the la_y dog&quot;)\n    False\n    &gt;&gt;&gt; check_pangram()\n    True\n    &quot;&quot;&quot;</span>\n    frequency = <span class=\"hljs-built_in\">set</span>()\n    input_str = input_str.replace(\n        <span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>\n    )  <span class=\"hljs-comment\"># Replacing all the Whitespaces in our sentence</span>\n    <span class=\"hljs-keyword\">for</span> alpha <span class=\"hljs-keyword\">in</span> input_str:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&quot;a&quot;</span> &lt;= alpha.lower() &lt;= <span class=\"hljs-string\">&quot;z&quot;</span>:\n            frequency.add(alpha.lower())\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(frequency) == <span class=\"hljs-number\">26</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_pangram_faster</span>(<span class=\"hljs-params\">\n    input_str: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; check_pangram_faster(&quot;The quick brown fox jumps over the lazy dog&quot;)\n    True\n    &gt;&gt;&gt; check_pangram_faster(&quot;Waltz, bad nymph, for quick jigs vex.&quot;)\n    True\n    &gt;&gt;&gt; check_pangram_faster(&quot;Jived fox nymph grabs quick waltz.&quot;)\n    True\n    &gt;&gt;&gt; check_pangram_faster(&quot;The quick brown fox jumps over the la_y dog&quot;)\n    False\n    &gt;&gt;&gt; check_pangram_faster()\n    True\n    &quot;&quot;&quot;</span>\n    flag = [<span class=\"hljs-literal\">False</span>] * <span class=\"hljs-number\">26</span>\n    <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> input_str:\n        <span class=\"hljs-keyword\">if</span> char.islower():\n            flag[<span class=\"hljs-built_in\">ord</span>(char) - <span class=\"hljs-number\">97</span>] = <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">elif</span> char.isupper():\n            flag[<span class=\"hljs-built_in\">ord</span>(char) - <span class=\"hljs-number\">65</span>] = <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">all</span>(flag)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">benchmark</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Benchmark code comparing different version.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\n\n    setup = <span class=\"hljs-string\">&quot;from __main__ import check_pangram, check_pangram_faster&quot;</span>\n    <span class=\"hljs-built_in\">print</span>(timeit(<span class=\"hljs-string\">&quot;check_pangram()&quot;</span>, setup=setup))\n    <span class=\"hljs-built_in\">print</span>(timeit(<span class=\"hljs-string\">&quot;check_pangram_faster()&quot;</span>, setup=setup))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    benchmark()\n"
    },
    "javascript": {
      "dir": "String/CheckPangram.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String/CheckPangram.js",
      "code": "<span class=\"hljs-comment\">/*\n  Pangram is a sentence that contains all the letters in the alphabet\n  https://en.wikipedia.org/wiki/Pangram\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">checkPangram</span> = (<span class=\"hljs-params\">string</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> string !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;The given value is not a string&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">const</span> frequency = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> letter <span class=\"hljs-keyword\">of</span> string.<span class=\"hljs-title function_\">toLowerCase</span>()) {\n    <span class=\"hljs-keyword\">if</span> (letter &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; letter &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>) {\n      frequency.<span class=\"hljs-title function_\">add</span>(letter)\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> frequency.<span class=\"hljs-property\">size</span> === <span class=\"hljs-number\">26</span>\n}\n\n<span class=\"hljs-keyword\">export</span> { checkPangram }\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/CheckPangram.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/CheckPangram.fs",
      "code": "ï»¿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\n\n<span class=\"hljs-comment\">/// wiki: https://en.wikipedia.org/wiki/Pangram</span>\n<span class=\"hljs-keyword\">module</span> CheckPangram =\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">System</span>.<span class=\"hljs-title\">Char</span> <span class=\"hljs-title\">with</span></span>\n        <span class=\"hljs-keyword\">member</span> this.IsUpper(): bool =\n            <span class=\"hljs-keyword\">match</span> this <span class=\"hljs-keyword\">with</span>\n            | c <span class=\"hljs-keyword\">when</span> c &gt;= <span class=\"hljs-symbol\">&#x27;A</span>&#x27; &amp;&amp; c &lt;= <span class=\"hljs-symbol\">&#x27;Z</span>&#x27; -&gt; <span class=\"hljs-keyword\">true</span>\n            | _ -&gt; <span class=\"hljs-keyword\">false</span>\n\n        <span class=\"hljs-keyword\">member</span> this.IsLower(): bool =\n            <span class=\"hljs-keyword\">match</span> this <span class=\"hljs-keyword\">with</span>\n            | c <span class=\"hljs-keyword\">when</span> c &gt;= <span class=\"hljs-symbol\">&#x27;a</span>&#x27; &amp;&amp; c &lt;= <span class=\"hljs-symbol\">&#x27;z</span>&#x27; -&gt; <span class=\"hljs-keyword\">true</span>\n            | _ -&gt; <span class=\"hljs-keyword\">false</span>\n\n        <span class=\"hljs-keyword\">member</span> this.Lower(): char =\n            <span class=\"hljs-keyword\">match</span> this <span class=\"hljs-keyword\">with</span>\n            | c <span class=\"hljs-keyword\">when</span> c &gt;= <span class=\"hljs-symbol\">&#x27;A</span>&#x27; &amp;&amp; c &lt;= <span class=\"hljs-symbol\">&#x27;Z</span>&#x27; -&gt; (char) ((int) this + <span class=\"hljs-number\">32</span>)\n            | _ -&gt; this\n\n        <span class=\"hljs-keyword\">member</span> this.Upper(): char =\n            <span class=\"hljs-keyword\">match</span> this <span class=\"hljs-keyword\">with</span>\n            | c <span class=\"hljs-keyword\">when</span> c &gt;= <span class=\"hljs-symbol\">&#x27;a</span>&#x27; &amp;&amp; c &lt;= <span class=\"hljs-symbol\">&#x27;z</span>&#x27; -&gt; (char) ((int) this - <span class=\"hljs-number\">32</span>)\n            | _ -&gt; this\n\n    <span class=\"hljs-keyword\">let</span> checkPangram (inputString: string): bool =\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> frequency = Set.empty\n        <span class=\"hljs-keyword\">let</span> inputStr = inputString.Replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-comment\">// Replacing all the whitespace in our sentence</span>\n\n        <span class=\"hljs-keyword\">for</span> alpha <span class=\"hljs-keyword\">in</span> inputStr <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-symbol\">&#x27;a</span>&#x27; &lt;= alpha.Lower() &amp;&amp; alpha.Lower() &lt;= <span class=\"hljs-symbol\">&#x27;z</span>&#x27; <span class=\"hljs-keyword\">then</span>\n                frequency &lt;- frequency.Add(alpha.Lower())\n\n        <span class=\"hljs-keyword\">match</span> frequency.Count <span class=\"hljs-keyword\">with</span>\n        | <span class=\"hljs-number\">26</span> -&gt; <span class=\"hljs-keyword\">true</span>\n        | _ -&gt; <span class=\"hljs-keyword\">if</span> inputStr = <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">then</span> <span class=\"hljs-keyword\">true</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">false</span>\n\n    <span class=\"hljs-keyword\">let</span> checkPangramFaster (inputString: string): bool =\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> flag = [| <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> .. <span class=\"hljs-number\">26</span> -&gt; <span class=\"hljs-keyword\">false</span> |]\n\n        <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> inputString <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">if</span> char.IsLower() <span class=\"hljs-keyword\">then</span>\n                flag.SetValue(<span class=\"hljs-keyword\">true</span>, (int) char - (int) <span class=\"hljs-symbol\">&#x27;a</span>&#x27;)\n\n        flag |&gt; Array.forall (id)\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "ngxingyu",
      "email": "ng.xingyu@dhs.sg",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "garifullin_aa",
      "email": "garifullin_aa@astral.ru",
      "commits": 2
    },
    {
      "name": "Askar Garifullin",
      "email": "askar.payment@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
