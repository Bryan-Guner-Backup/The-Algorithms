{
  "slug": "random-forest-regressor",
  "name": "Random Forest Regressor",
  "categories": ["machinelearning"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning/random_forest_regressor.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning/random_forest_regressor.py",
      "code": "<span class=\"hljs-comment\"># Random Forest Regressor Example</span>\n<span class=\"hljs-keyword\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> load_boston\n<span class=\"hljs-keyword\">from</span> sklearn.ensemble <span class=\"hljs-keyword\">import</span> RandomForestRegressor\n<span class=\"hljs-keyword\">from</span> sklearn.metrics <span class=\"hljs-keyword\">import</span> mean_absolute_error, mean_squared_error\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Random Forest Regressor Example using sklearn function.\n    Boston house price dataset is used to demonstrate the algorithm.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># Load Boston house price dataset</span>\n    boston = load_boston()\n    <span class=\"hljs-built_in\">print</span>(boston.keys())\n\n    <span class=\"hljs-comment\"># Split dataset into train and test data</span>\n    X = boston[<span class=\"hljs-string\">&quot;data&quot;</span>]  <span class=\"hljs-comment\"># features</span>\n    Y = boston[<span class=\"hljs-string\">&quot;target&quot;</span>]\n    x_train, x_test, y_train, y_test = train_test_split(\n        X, Y, test_size=<span class=\"hljs-number\">0.3</span>, random_state=<span class=\"hljs-number\">1</span>\n    )\n\n    <span class=\"hljs-comment\"># Random Forest Regressor</span>\n    rand_for = RandomForestRegressor(random_state=<span class=\"hljs-number\">42</span>, n_estimators=<span class=\"hljs-number\">300</span>)\n    rand_for.fit(x_train, y_train)\n\n    <span class=\"hljs-comment\"># Predict target for test data</span>\n    predictions = rand_for.predict(x_test)\n    predictions = predictions.reshape(<span class=\"hljs-built_in\">len</span>(predictions), <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-comment\"># Error printing</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Mean Absolute Error:\\t <span class=\"hljs-subst\">{mean_absolute_error(y_test, predictions)}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Mean Square Error  :\\t <span class=\"hljs-subst\">{mean_squared_error(y_test, predictions)}</span>&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Prince Gangurde",
      "email": "50592495+Prince326@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Miggelito",
      "email": "a.bidakowski@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
