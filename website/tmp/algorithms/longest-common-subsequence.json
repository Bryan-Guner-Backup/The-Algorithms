{
  "slug": "longest-common-subsequence",
  "name": "Longest Common Subsequence",
  "categories": ["dynamicprogramming"],
  "body": {
    "en": "<h4>Problem Statement</h4>\n<p>Given two strings <code>S</code> and <code>T</code>, find the length of the longest common subsequence (LCS).</p>\n<h4>Approach</h4>\n<p>Let the <code>dp[i][j]</code> be the length of the longest common subsequence of prefixes <code>S[1..i]</code> and <code>T[1..j]</code>. Our answer (the length of LCS) is <code>dp[|S|][|T|]</code> since the prefix of the length of string is the string itself.</p>\n<p>Both <code>dp[0][i]</code> and <code>dp[i][0]</code> are <code>0</code> for any <code>i</code> since the LCS of empty prefix and anything else is an empty string.</p>\n<p>Now let's try to calculate <code>dp[i][j]</code> for any <code>i</code>, <code>j</code>. Let's say <code>S[1..i] = *A</code> and <code>T[1..j] = *B</code> where <code>*</code> stands for any sequence of letters (could be different for <code>S</code> and <code>T</code>), <code>A</code> stands for any letter and <code>B</code> stands for any letter different from <code>A</code>. Since <code>A != B</code>, our LCS doesn't include <code>A</code> or <code>B</code> as a last character. So we could try to throw away <code>A</code> or <code>B</code> character. If we throw <code>A</code>, our LCS length will be <code>dp[i - 1][j]</code> (since we have prefixes <code>S[1..i - 1]</code> and <code>T[1..j]</code>). If we try to throw <code>B</code> character, we will have prefixes <code>S[1..i]</code> and <code>T[1..j - 1]</code> so the length of LCS will be <code>dp[i][j - 1]</code>. As we are looking for the Longest common subsequence, we will pick the maximum value from <code>dp[i][j - 1]</code> and <code>dp[i - 1][j]</code>.</p>\n<p>But what if <code>S[1..i] = *A</code> and <code>T[1..j] = *A</code>? We could say that the LCS of our prefixes is LCS of prefixes <code>S[1..i - 1]</code> and <code>T[1..j - 1]</code> plus the letter <code>A</code>. So <code>dp[i][j] = dp[i - 1][j - 1] + 1</code> if <code>S[i] = T[j]</code>.</p>\n<p>We could see that we can fill our <code>dp</code> table row by row, column by column. So our algorithm will be like:</p>\n<ul>\n<li>Let's say that we have strings <code>S</code> of the length N and <code>T</code> of the length M (numbered from 1). Let's create the table <code>dp</code> of size <code>(N + 1) x (M + 1)</code> numbered from 0.</li>\n<li>Let's fill the 0th row and the 0th column of <code>dp</code> with 0.</li>\n<li>Then, we follow the algorithm:</li>\n</ul>\n<pre><code class=\"hljs language-json\">for i in range(<span class=\"hljs-number\">1.</span>.N):\n    for j in range(<span class=\"hljs-number\">1.</span>.M):\n        if(S[i] == T[j])\n            dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>\n        else\n            dp[i][j] = max(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i][j - <span class=\"hljs-number\">1</span>])\n</code></pre>\n<h4>Time Complexity</h4>\n<p><code>O(N * M)</code> In any case</p>\n<h4>Space Complexity</h4>\n<p><code>O(N * M)</code> - simple implementation\n<code>O(min {N, M})</code> - two-layers implementation (as <code>dp[i][j]</code> depends on only i-th and i-th layers, we coudld store only two layers).</p>\n<h4>Example</h4>\n<p>Let's say we have strings <code>ABCB</code> and <code>BBCB</code>. We will build such a table:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-comment\"># # A B C B</span>\n<span class=\"hljs-comment\"># 0 0 0 0 0</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">C</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n</code></pre>\n<p>Now we will start to fill our table from 1st row. Since <code>S[1] = A</code> and <code>T[1] = B</code>, the <code>dp[1][1]</code> will be tha maximal value of <code>dp[0][1] = 0</code> and <code>dp[1][0] = 0</code>. So <code>dp[1][1] = 0</code>. But now <code>S[2] = B = T[1]</code>, so <code>dp[1][2] = dp[0][1] + 1 = 1</code>. <code>dp[1][3]</code> is <code>1</code> since <code>A != C</code> and we pick <code>max{dp[1][2], dp[0][3]}</code>. And <code>dp[1][4] = dp[0][3] + 1 = 1</code>.</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-comment\"># # A B C B</span>\n<span class=\"hljs-comment\"># 0 0 0 0 0</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">C</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n</code></pre>\n<p>Now let's fill the other part of the table:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-comment\"># # A B C B</span>\n<span class=\"hljs-comment\"># 0 0 0 0 0</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">C</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>So the length of LCS is <code>dp[4][4] = 3</code>.</p>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Dynamic%20Programming/LongestCommonSubsequence.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/dynamic_programming/longest_common_subsequence.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Dynamic%20Programming/Longest%20Common%20Subsequence.cpp\">C++</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://youtu.be/NnD96abizww\">Video explanation by Tushar Roy</a></p>",
    "es": "<h4>Declaración de problema</h4>\n<p>Dadas dos cadenas <code>S</code> y <code>T</code>, busque la longitud de la subsecuencia común más larga (LCS).</p>\n<h4>Enfoque</h4>\n<p>Que el <code>dp[i][j]</code> sea la longitud de la subsecuencia común más larga de los prefijos <code>S[1..i]</code> y <code>T[1..j]</code>. Nuestra respuesta (la longitud de LCS) es <code>dp[| S|] [| T|]</code>, ya que el prefijo de la longitud de la cadena es la propia cadena.</p>\n<p>Tanto <code>dp[0][i]</code> como <code>dp[i][0]</code> son <code>0</code> para cualquier <code>i</code>, desde el LCS de prefijo vacío y cualquier otra cosa es una cadena vacía.</p>\n<p>Ahora, vamos a tratar de calcular <code>dp[i][j]</code> para cualquier <code>i</code>, <code>j</code>. Digamos <code>S[1..i] = *A</code> y <code>T[1..j] = *B</code> donde <code>*</code> significa cualquier secuencia de letras (podría ser diferente para <code>S</code> y <code>T</code>), <code>A</code> significa cualquier letra y <code>B</code> significa cualquier letra diferente de <code>A</code>. Dado que <code>A != B</code>, nuestro LCS no incluye <code>A</code> o <code>B</code> como último carácter. Así que podríamos tratar de tirar a la distancia el personaje <code>A</code> o <code>B</code>. Si lanzamos <code>A</code>, nuestra longitud LCS será <code>dp[i - 1][j]</code> (ya que tenemos prefijos <code>S[1..i - 1]</code> y <code>T[1..j]</code>). Si intentamos lanzar el carácter <code>B</code>, tendremos prefijos <code>S[1..i]</code> y <code>T[1..j - 1]</code>, por lo que la longitud de LCS será <code>dp[i][j - 1]</code>. Mientras buscamos la subsecuencia común más larga, elegiremos el valor máximo de <code>dp[i][j - 1]</code> y <code>dp[i - 1] [j]</code>.</p>\n<p>¿Pero qué pasa si <code>S[1..i] = *A</code> y <code>T[1..j] = *A</code>? Podríamos decir que el LCS de nuestros prefijos es LCS de prefijos <code>S[1..i - 1]</code> y <code>T[1..j - 1]</code> más la letra <code>A</code>. Así que <code>dp[i][j] = dp[i - 1][j - 1] + 1</code> es igual a <code>S[i] = T[j]</code>.</p>\n<p>Pudimos ver que podemos llenar nuestra tabla <code>dp</code> fila por fila, columna por columna. Así que nuestro algoritmo será como:</p>\n<ul>\n<li>Digamos que tenemos cuerdas <code>S</code> de la longitud N y <code>T</code> de la longitud M (numeradas a partir de 1). Vamos a crear la tabla <code>dp</code> de tamaño <code>(N + 1) x (M + 1)</code> numerada a partir de 0.</li>\n<li>Vamos a llenar la 0ª fila y la 0ª columna de <code>dp</code> con 0.</li>\n<li>A continuación, seguimos el algoritmo:</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1.</span>.N):\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1.</span>.M):\n        <span class=\"hljs-keyword\">if</span>(S[i] == T[j])\n            dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>\n            dp[i][j] = <span class=\"hljs-built_in\">max</span>(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i][j - <span class=\"hljs-number\">1</span>])\n</code></pre>\n<h4>Complejidad horaria</h4>\n<p><code>O(N * M)</code> - En cualquier caso</p>\n<h4>Complejidad espacial</h4>\n<p><code>O(N * M)</code> - implementación simple\n<code>O(min {N, M})</code> - implementación de dos capas (como <code>dp[i][j]</code> depende sólo de las capas i-th e i-th, coudld almacenamos sólo dos capas).</p>\n<h4>Ejemplo</h4>\n<p>Digamos que tenemos cuerdas <code>ABCB</code> y <code>BBCB</code>. Construiremos una mesa de este tipo:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-comment\"># # Una B C B</span>\n<span class=\"hljs-comment\"># 0 0 0 0 0</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">C</span> <span class=\"hljs-number\">0</span> ? ? ?\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n</code></pre>\n<p>Ahora empezaremos a llenar nuestra mesa desde la 1ª fila. Puesto que <code>S[1] = A</code> y <code>T[1] = B</code>, <code>dp[1] [1]</code> será el valor máximo de <code>dp[0] [1] = 0</code> y <code>dp[1] [0] = 0</code>. Así que <code>dp[1] [1] = 0</code>. Pero ahora <code>S[2] = B = T[1]</code>, así que <code>dp[1] [2] = dp[0] [1] + 1 = 1</code>. <code>dp[1] [3]</code> es <code>1</code> desde <code>A != C</code> y elegimos <code>max{dp[1] [2], dp[0] [3]}</code>. Y <code>dp[1] [4] = dp[0] [3] + 1 = 1</code>.</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-comment\"># # A B C B</span>\n<span class=\"hljs-comment\"># 0 0 0 0 0</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">C</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> ? ? ? ?\n</code></pre>\n<p>Ahora vamos a llenar la otra parte de la tabla:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-comment\"># # A B C B</span>\n<span class=\"hljs-comment\"># 0 0 0 0 0</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">C</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-attribute\">B</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span>\n</code></pre>\n<p>Así que la longitud de LCS es <code>dp[4] [4] = 3</code>.</p>\n<h4>Enlaces de implementación de código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Dynamic%20Programming/LongestCommonSubsequence.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/dynamic_programming/longest_common_subsequence.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Dynamic%20Programming/Longest%20Common%20Subsequence.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Dynamic-Programming/LongestCommonSubsequence.js\">JavaScript</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/dynamicprogramming/longestCommonSubsequence.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Rust/blob/master/src/dynamic_programming/longest_common_subsequence.rs\">Rust</a></li>\n</ul>\n<h4>Explicación en YouTube</h4>\n<p><a href=\"https://youtu.be/NnD96abizww\">Explicación en YouTube de Tushar Roy</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "dynamic_programming/longest_common_subsequence.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/longest_common_subsequence.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nLCS Problem Statement: Given two sequences, find the length of longest subsequence\npresent in both of them.  A subsequence is a sequence that appears in the same relative\norder, but not necessarily continuous.\nExample:&quot;abc&quot;, &quot;abg&quot; are subsequences of &quot;abcdefgh&quot;.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">longest_common_subsequence</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">str</span>, y: <span class=\"hljs-built_in\">str</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Finds the longest common subsequence between two strings. Also returns the\n    The subsequence found\n\n    Parameters\n    ----------\n\n    x: str, one of the strings\n    y: str, the other string\n\n    Returns\n    -------\n    L[m][n]: int, the length of the longest subsequence. Also equal to len(seq)\n    Seq: str, the subsequence found\n\n    &gt;&gt;&gt; longest_common_subsequence(&quot;programming&quot;, &quot;gaming&quot;)\n    (6, &#x27;gaming&#x27;)\n    &gt;&gt;&gt; longest_common_subsequence(&quot;physics&quot;, &quot;smartphone&quot;)\n    (2, &#x27;ph&#x27;)\n    &gt;&gt;&gt; longest_common_subsequence(&quot;computer&quot;, &quot;food&quot;)\n    (1, &#x27;o&#x27;)\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># find the length of strings</span>\n\n    <span class=\"hljs-keyword\">assert</span> x <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> y <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n\n    m = <span class=\"hljs-built_in\">len</span>(x)\n    n = <span class=\"hljs-built_in\">len</span>(y)\n\n    <span class=\"hljs-comment\"># declaring the array for storing the dp values</span>\n    L = [[<span class=\"hljs-number\">0</span>] * (n + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m + <span class=\"hljs-number\">1</span>)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, m + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> x[i - <span class=\"hljs-number\">1</span>] == y[j - <span class=\"hljs-number\">1</span>]:\n                match = <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                match = <span class=\"hljs-number\">0</span>\n\n            L[i][j] = <span class=\"hljs-built_in\">max</span>(L[i - <span class=\"hljs-number\">1</span>][j], L[i][j - <span class=\"hljs-number\">1</span>], L[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + match)\n\n    seq = <span class=\"hljs-string\">&quot;&quot;</span>\n    i, j = m, n\n    <span class=\"hljs-keyword\">while</span> i &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> j &gt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">if</span> x[i - <span class=\"hljs-number\">1</span>] == y[j - <span class=\"hljs-number\">1</span>]:\n            match = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            match = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-keyword\">if</span> L[i][j] == L[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + match:\n            <span class=\"hljs-keyword\">if</span> match == <span class=\"hljs-number\">1</span>:\n                seq = x[i - <span class=\"hljs-number\">1</span>] + seq\n            i -= <span class=\"hljs-number\">1</span>\n            j -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">elif</span> L[i][j] == L[i - <span class=\"hljs-number\">1</span>][j]:\n            i -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            j -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> L[m][n], seq\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    a = <span class=\"hljs-string\">&quot;AGGTAB&quot;</span>\n    b = <span class=\"hljs-string\">&quot;GXTXAYB&quot;</span>\n    expected_ln = <span class=\"hljs-number\">4</span>\n    expected_subseq = <span class=\"hljs-string\">&quot;GTAB&quot;</span>\n\n    ln, subseq = longest_common_subsequence(a, b)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;len =&quot;</span>, ln, <span class=\"hljs-string\">&quot;, sub-sequence =&quot;</span>, subseq)\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Dynamic-Programming/LongestCommonSubsequence.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/LongestCommonSubsequence.js",
      "code": "<span class=\"hljs-comment\">/*\n    * Given two sequences, find the length of longest subsequence present in both of them.\n    * A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.\n    * For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences of “abcdefg”\n*/</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">longestCommonSubsequence</span> (x, y, str1, str2, dp) {\n  <span class=\"hljs-keyword\">if</span> (x === -<span class=\"hljs-number\">1</span> || y === -<span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">if</span> (dp[x][y] !== <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> dp[x][y]\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (str1[x] === str2[y]) {\n        dp[x][y] = <span class=\"hljs-number\">1</span> + <span class=\"hljs-title function_\">longestCommonSubsequence</span>(x - <span class=\"hljs-number\">1</span>, y - <span class=\"hljs-number\">1</span>, str1, str2, dp)\n        <span class=\"hljs-keyword\">return</span> dp[x][y]\n      } <span class=\"hljs-keyword\">else</span> {\n        dp[x][y] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-title function_\">longestCommonSubsequence</span>(x - <span class=\"hljs-number\">1</span>, y, str1, str2, dp), <span class=\"hljs-title function_\">longestCommonSubsequence</span>(x, y - <span class=\"hljs-number\">1</span>, str1, str2, dp))\n        <span class=\"hljs-keyword\">return</span> dp[x][y]\n      }\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span> () {\n  <span class=\"hljs-keyword\">const</span> str1 = <span class=\"hljs-string\">&#x27;ABCDGH&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> str2 = <span class=\"hljs-string\">&#x27;AEDFHR&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(str1.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(str2.<span class=\"hljs-property\">length</span> + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>))\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-title function_\">longestCommonSubsequence</span>(str1.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>, str2.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>, str1, str2, dp)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res)\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming/longest_common_subsequence.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/longest_common_subsequence.cpp",
      "code": "<span class=\"hljs-comment\">// Longest common subsequence - Dynamic Programming</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> trace[<span class=\"hljs-number\">20</span>][<span class=\"hljs-number\">20</span>], <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n, string a)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (m == <span class=\"hljs-number\">0</span> || n == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (trace[m][n] == <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-built_in\">Print</span>(trace, m - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>, a);\n        cout &lt;&lt; a[m - <span class=\"hljs-number\">1</span>];\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (trace[m][n] == <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-built_in\">Print</span>(trace, m - <span class=\"hljs-number\">1</span>, n, a);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (trace[m][n] == <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-built_in\">Print</span>(trace, m, n - <span class=\"hljs-number\">1</span>, a);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">lcs</span><span class=\"hljs-params\">(string a, string b)</span> </span>{\n    <span class=\"hljs-type\">int</span> m = a.<span class=\"hljs-built_in\">length</span>(), n = b.<span class=\"hljs-built_in\">length</span>();\n    <span class=\"hljs-type\">int</span> res[m + <span class=\"hljs-number\">1</span>][n + <span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-type\">int</span> trace[<span class=\"hljs-number\">20</span>][<span class=\"hljs-number\">20</span>];\n\n    <span class=\"hljs-comment\">// fills up the arrays with zeros.</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m + <span class=\"hljs-number\">1</span>; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n + <span class=\"hljs-number\">1</span>; j++) {\n            res[i][j] = <span class=\"hljs-number\">0</span>;\n            trace[i][j] = <span class=\"hljs-number\">0</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m + <span class=\"hljs-number\">1</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n + <span class=\"hljs-number\">1</span>; ++j) {\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || j == <span class=\"hljs-number\">0</span>) {\n                res[i][j] = <span class=\"hljs-number\">0</span>;\n                trace[i][j] = <span class=\"hljs-number\">0</span>;\n            }\n\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[i - <span class=\"hljs-number\">1</span>] == b[j - <span class=\"hljs-number\">1</span>]) {\n                res[i][j] = <span class=\"hljs-number\">1</span> + res[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];\n                trace[i][j] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// 1 means trace the matrix in upper left</span>\n                                  <span class=\"hljs-comment\">// diagonal direction.</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">if</span> (res[i - <span class=\"hljs-number\">1</span>][j] &gt; res[i][j - <span class=\"hljs-number\">1</span>]) {\n                    res[i][j] = res[i - <span class=\"hljs-number\">1</span>][j];\n                    trace[i][j] =\n                        <span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">// 2 means trace the matrix in upwards direction.</span>\n                } <span class=\"hljs-keyword\">else</span> {\n                    res[i][j] = res[i][j - <span class=\"hljs-number\">1</span>];\n                    trace[i][j] =\n                        <span class=\"hljs-number\">3</span>;  <span class=\"hljs-comment\">//  means trace the matrix in left direction.</span>\n                }\n            }\n        }\n    }\n    <span class=\"hljs-built_in\">Print</span>(trace, m, n, a);\n    <span class=\"hljs-keyword\">return</span> res[m][n];\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    string a, b;\n    cin &gt;&gt; a &gt;&gt; b;\n    cout &lt;&lt; <span class=\"hljs-built_in\">lcs</span>(a, b);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "DynamicProgramming/LongestCommonSubsequence.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/LongestCommonSubsequence.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LongestCommonSubsequence</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getLCS</span><span class=\"hljs-params\">(String str1, String str2)</span> {\n\n    <span class=\"hljs-comment\">// At least one string is null</span>\n    <span class=\"hljs-keyword\">if</span> (str1 == <span class=\"hljs-literal\">null</span> || str2 == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n\n    <span class=\"hljs-comment\">// At least one string is empty</span>\n    <span class=\"hljs-keyword\">if</span> (str1.length() == <span class=\"hljs-number\">0</span> || str2.length() == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n    String[] arr1 = str1.split(<span class=\"hljs-string\">&quot;&quot;</span>);\n    String[] arr2 = str2.split(<span class=\"hljs-string\">&quot;&quot;</span>);\n\n    <span class=\"hljs-comment\">// lcsMatrix[i][j]  = LCS of first i elements of arr1 and first j characters of arr2</span>\n    <span class=\"hljs-type\">int</span>[][] lcsMatrix = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[arr1.length + <span class=\"hljs-number\">1</span>][arr2.length + <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr1.length + <span class=\"hljs-number\">1</span>; i++) lcsMatrix[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; arr2.length + <span class=\"hljs-number\">1</span>; j++) lcsMatrix[<span class=\"hljs-number\">0</span>][j] = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; arr1.length + <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; arr2.length + <span class=\"hljs-number\">1</span>; j++) {\n        <span class=\"hljs-keyword\">if</span> (arr1[i - <span class=\"hljs-number\">1</span>].equals(arr2[j - <span class=\"hljs-number\">1</span>])) {\n          lcsMatrix[i][j] = lcsMatrix[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n          lcsMatrix[i][j] =\n              lcsMatrix[i - <span class=\"hljs-number\">1</span>][j] &gt; lcsMatrix[i][j - <span class=\"hljs-number\">1</span>] ? lcsMatrix[i - <span class=\"hljs-number\">1</span>][j] : lcsMatrix[i][j - <span class=\"hljs-number\">1</span>];\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> lcsString(str1, str2, lcsMatrix);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">lcsString</span><span class=\"hljs-params\">(String str1, String str2, <span class=\"hljs-type\">int</span>[][] lcsMatrix)</span> {\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">lcs</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> str1.length(), j = str2.length();\n    <span class=\"hljs-keyword\">while</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; j &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">if</span> (str1.charAt(i - <span class=\"hljs-number\">1</span>) == str2.charAt(j - <span class=\"hljs-number\">1</span>)) {\n        lcs.append(str1.charAt(i - <span class=\"hljs-number\">1</span>));\n        i--;\n        j--;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (lcsMatrix[i - <span class=\"hljs-number\">1</span>][j] &gt; lcsMatrix[i][j - <span class=\"hljs-number\">1</span>]) {\n        i--;\n      } <span class=\"hljs-keyword\">else</span> {\n        j--;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> lcs.reverse().toString();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;DSGSHSRGSRHTRD&quot;</span>;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;DATRGAGTSHS&quot;</span>;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">lcs</span> <span class=\"hljs-operator\">=</span> getLCS(str1, str2);\n\n    <span class=\"hljs-comment\">// Print LCS</span>\n    <span class=\"hljs-keyword\">if</span> (lcs != <span class=\"hljs-literal\">null</span>) {\n      System.out.println(<span class=\"hljs-string\">&quot;String 1: &quot;</span> + str1);\n      System.out.println(<span class=\"hljs-string\">&quot;String 2: &quot;</span> + str2);\n      System.out.println(<span class=\"hljs-string\">&quot;LCS: &quot;</span> + lcs);\n      System.out.println(<span class=\"hljs-string\">&quot;LCS length: &quot;</span> + lcs.length());\n    }\n  }\n}\n"
    },
    "go": {
      "dir": "dynamicprogramming/longestCommonSubsequence.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamicprogramming/longestCommonSubsequence.go",
      "code": "<span class=\"hljs-comment\">// LONGEST COMMON SUBSEQUENCE</span>\n<span class=\"hljs-comment\">// DP - 4</span>\n<span class=\"hljs-comment\">// https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/</span>\n\n<span class=\"hljs-keyword\">package</span> dynamicprogramming\n\n<span class=\"hljs-comment\">// LongestCommonSubsequence function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LongestCommonSubsequence</span><span class=\"hljs-params\">(a <span class=\"hljs-keyword\">string</span>, b <span class=\"hljs-keyword\">string</span>, m <span class=\"hljs-keyword\">int</span>, n <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">// m is the length of string a and n is the length of string b</span>\n\n\t<span class=\"hljs-comment\">// here we are making a 2d slice of size (m+1)*(n+1)</span>\n\tlcs := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-keyword\">int</span>, m+<span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= m; i++ {\n\t\tlcs[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, n+<span class=\"hljs-number\">1</span>)\n\t}\n\n\t<span class=\"hljs-comment\">// block that implements LCS</span>\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt;= m; i++ {\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt;= n; j++ {\n\t\t\t<span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> || j == <span class=\"hljs-number\">0</span> {\n\t\t\t\tlcs[i][j] = <span class=\"hljs-number\">0</span>\n\t\t\t} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> a[i<span class=\"hljs-number\">-1</span>] == b[j<span class=\"hljs-number\">-1</span>] {\n\t\t\t\tlcs[i][j] = lcs[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>] + <span class=\"hljs-number\">1</span>\n\t\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t\tlcs[i][j] = Max(lcs[i<span class=\"hljs-number\">-1</span>][j], lcs[i][j<span class=\"hljs-number\">-1</span>])\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"hljs-comment\">// returning the length of longest common subsequence</span>\n\t<span class=\"hljs-keyword\">return</span> lcs[m][n]\n}\n\n<span class=\"hljs-comment\">// func main(){</span>\n<span class=\"hljs-comment\">// \t// declaring two strings and asking for input</span>\n\n<span class=\"hljs-comment\">// \tvar a,b string</span>\n<span class=\"hljs-comment\">// \tfmt.Scan(&amp;a, &amp;b)</span>\n<span class=\"hljs-comment\">// \t// calling the LCS function</span>\n<span class=\"hljs-comment\">// \tfmt.Println(&quot;The length of longest common subsequence is:&quot;, longestCommonSubsequence(a,b, len(a), len(b)))</span>\n<span class=\"hljs-comment\">// }</span>\n"
    },
    "rust": {
      "dir": "src/dynamic_programming/longest_common_subsequence.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/longest_common_subsequence.rs",
      "code": "<span class=\"hljs-comment\">/// Longest common subsequence via Dynamic Programming</span>\n\n<span class=\"hljs-comment\">/// longest_common_subsequence(a, b) returns the longest common subsequence</span>\n<span class=\"hljs-comment\">/// between the strings a and b.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">longest_common_subsequence</span>(a: &amp;<span class=\"hljs-type\">str</span>, b: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">a</span>: <span class=\"hljs-type\">Vec</span>&lt;_&gt; = a.<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">collect</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">b</span>: <span class=\"hljs-type\">Vec</span>&lt;_&gt; = b.<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">collect</span>();\n    <span class=\"hljs-keyword\">let</span> (na, nb) = (a.<span class=\"hljs-title function_ invoke__\">len</span>(), b.<span class=\"hljs-title function_ invoke__\">len</span>());\n\n    <span class=\"hljs-comment\">// solutions[i][j] is the length of the longest common subsequence</span>\n    <span class=\"hljs-comment\">// between a[0..i-1] and b[0..j-1]</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">solutions</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; nb + <span class=\"hljs-number\">1</span>]; na + <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-title function_ invoke__\">for</span> (i, ci) <span class=\"hljs-keyword\">in</span> a.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n        <span class=\"hljs-title function_ invoke__\">for</span> (j, cj) <span class=\"hljs-keyword\">in</span> b.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n            <span class=\"hljs-comment\">// if ci == cj, there is a new common character;</span>\n            <span class=\"hljs-comment\">// otherwise, take the best of the two solutions</span>\n            <span class=\"hljs-comment\">// at (i-1,j) and (i,j-1)</span>\n            solutions[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">if</span> ci == cj {\n                solutions[i][j] + <span class=\"hljs-number\">1</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                solutions[i][j + <span class=\"hljs-number\">1</span>].<span class=\"hljs-title function_ invoke__\">max</span>(solutions[i + <span class=\"hljs-number\">1</span>][j])\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">// reconstitute the solution string from the lengths</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">char</span>&gt; = Vec::<span class=\"hljs-title function_ invoke__\">new</span>();\n    <span class=\"hljs-keyword\">let</span> (<span class=\"hljs-keyword\">mut</span> i, <span class=\"hljs-keyword\">mut</span> j) = (na, nb);\n    <span class=\"hljs-keyword\">while</span> i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; j &gt; <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">if</span> a[i - <span class=\"hljs-number\">1</span>] == b[j - <span class=\"hljs-number\">1</span>] {\n            result.<span class=\"hljs-title function_ invoke__\">push</span>(a[i - <span class=\"hljs-number\">1</span>]);\n            i -= <span class=\"hljs-number\">1</span>;\n            j -= <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> solutions[i - <span class=\"hljs-number\">1</span>][j] &gt; solutions[i][j - <span class=\"hljs-number\">1</span>] {\n            i -= <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            j -= <span class=\"hljs-number\">1</span>;\n        }\n    }\n\n    result.<span class=\"hljs-title function_ invoke__\">reverse</span>();\n    result.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">collect</span>()\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::longest_common_subsequence;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_longest_common_subsequence</span>() {\n        <span class=\"hljs-comment\">// empty case</span>\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;abcd&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;abcd&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n\n        <span class=\"hljs-comment\">// simple cases</span>\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;abcd&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>), <span class=\"hljs-string\">&quot;c&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;abcd&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>), <span class=\"hljs-string\">&quot;d&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;abcd&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;abcdefghi&quot;</span>, <span class=\"hljs-string\">&quot;acegi&quot;</span>), <span class=\"hljs-string\">&quot;acegi&quot;</span>);\n\n        <span class=\"hljs-comment\">// less simple cases</span>\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;abcdgh&quot;</span>, <span class=\"hljs-string\">&quot;aedfhr&quot;</span>), <span class=\"hljs-string\">&quot;adh&quot;</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(&amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;aggtab&quot;</span>, <span class=\"hljs-string\">&quot;gxtxayb&quot;</span>), <span class=\"hljs-string\">&quot;gtab&quot;</span>);\n\n        <span class=\"hljs-comment\">// unicode</span>\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            &amp;<span class=\"hljs-title function_ invoke__\">longest_common_subsequence</span>(<span class=\"hljs-string\">&quot;你好，世界&quot;</span>, <span class=\"hljs-string\">&quot;再见世界&quot;</span>),\n            <span class=\"hljs-string\">&quot;世界&quot;</span>\n        );\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Boyd Johnson",
      "email": "boydjohnson@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nathan Moreau",
      "email": "nathan.moreau@m4x.org",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rajneesh44",
      "email": "rajneeshsharma338@gmail.com",
      "commits": 1
    },
    {
      "name": "rahul1995",
      "email": "jainrahul6620@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mayank Kumar Jha",
      "email": "mk9440@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "pkdism",
      "email": "pawan.dwivedi94@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jigyasa G",
      "email": "jigsgandhi97@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maxwell Aladago",
      "email": "maxwell.aladago@gmail.com",
      "commits": 1
    },
    {
      "name": "Rwithik Manoj",
      "email": "thoriumnitride@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Erdenezul",
      "email": "erdenezul@shine.mn",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "dhruvsaini",
      "email": "dhruv_saini@outlook.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 4
    },
    {
      "name": "Omkarnath Parida",
      "email": "pomkarnath98@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Dynamic Programming/Longest Common Subsequence.md",
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Programación dinamica/Subsecuencia común más larga.md"
  }
}
