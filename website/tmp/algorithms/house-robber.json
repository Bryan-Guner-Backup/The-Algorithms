{
  "slug": "house-robber",
  "name": "House Robber",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming/house_robber.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/house_robber.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [House Robber\n * Problem](https://labuladong.gitbook.io/algo-en/i.-dynamic-programming/houserobber)\n * algorithm\n * @details\n * Solution of House robber problem uses a dynamic programming concept that\n * works in \\f$O(n)\\f$ time and works in \\f$O(1)\\f$ space.\n * @author [Swastika Gupta](https://github.com/Swastyy)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span>   <span class=\"hljs-comment\">/// for std::max</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace dynamic_programming\n * @brief Dynamic Programming algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\n<span class=\"hljs-comment\">/**\n * @namespace house_robber\n * @brief Functions for the [House\n * Robber](https://labuladong.gitbook.io/algo-en/i.-dynamic-programming/houserobber)\n * algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> house_robber {\n<span class=\"hljs-comment\">/**\n * @brief The main function that implements the House Robber algorithm using\n * dynamic programming\n * @param money array containing money in the ith house\n * @param n size of array\n * @returns maximum amount of money that can be robbed\n */</span>\n<span class=\"hljs-function\">std::<span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">houseRobber</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; &amp;money,\n                          <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint32_t</span> &amp;n)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {  <span class=\"hljs-comment\">// if there is no house</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>) {  <span class=\"hljs-comment\">// if there is only one house</span>\n        <span class=\"hljs-keyword\">return</span> money[<span class=\"hljs-number\">0</span>];\n    }\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">2</span>) {  <span class=\"hljs-comment\">// if there are two houses, one with the maximum amount of</span>\n                   <span class=\"hljs-comment\">// money will be robbed</span>\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">max</span>(money[<span class=\"hljs-number\">0</span>], money[<span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-type\">uint32_t</span> max_value = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// contains maximum stolen value at the end</span>\n    <span class=\"hljs-type\">uint32_t</span> value1 = money[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-type\">uint32_t</span> value2 = std::<span class=\"hljs-built_in\">max</span>(money[<span class=\"hljs-number\">0</span>], money[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">2</span>; i &lt; n; i++) {\n        max_value = std::<span class=\"hljs-built_in\">max</span>(money[i] + value1, value2);\n        value1 = value2;\n        value2 = max_value;\n    }\n\n    <span class=\"hljs-keyword\">return</span> max_value;\n}\n}  <span class=\"hljs-comment\">// namespace house_robber</span>\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Test 1</span>\n    <span class=\"hljs-comment\">// [1, 2, 3, 1] return 4</span>\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array1 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1... &quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(\n        dynamic_programming::house_robber::<span class=\"hljs-built_in\">houseRobber</span>(array1, array1.<span class=\"hljs-built_in\">size</span>()) ==\n        <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// here the two non-adjacent houses that are robbed are first and</span>\n             <span class=\"hljs-comment\">// third with total sum money as 4</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// Test 2</span>\n    <span class=\"hljs-comment\">// [6, 7, 1, 3, 8, 2, 4] return 19</span>\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array2 = {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2... &quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(\n        dynamic_programming::house_robber::<span class=\"hljs-built_in\">houseRobber</span>(array2, array2.<span class=\"hljs-built_in\">size</span>()) ==\n        <span class=\"hljs-number\">19</span>);  <span class=\"hljs-comment\">// here the four non-adjacent houses that are robbed are first,</span>\n              <span class=\"hljs-comment\">// third, fifth and seventh with total sum money as 19</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// Test 3</span>\n    <span class=\"hljs-comment\">// [] return 0</span>\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array3 = {};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3... &quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(\n        dynamic_programming::house_robber::<span class=\"hljs-built_in\">houseRobber</span>(array3, array3.<span class=\"hljs-built_in\">size</span>()) ==\n        <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// since there is no house no money can be robbed</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// Test 4</span>\n    <span class=\"hljs-comment\">// [2,7,9,3,1] return 12</span>\n    std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; array4 = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4... &quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(\n        dynamic_programming::house_robber::<span class=\"hljs-built_in\">houseRobber</span>(array4, array4.<span class=\"hljs-built_in\">size</span>()) ==\n        <span class=\"hljs-number\">12</span>);  <span class=\"hljs-comment\">// here the three non-adjacent houses that are robbed are first,</span>\n              <span class=\"hljs-comment\">// third and fifth with total sum money as 12</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
