{
  "slug": "sum-of-subsets",
  "name": "Sum of Subsets",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking/sum_of_subsets.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking/sum_of_subsets.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n        The sum-of-subsetsproblem states that a set of non-negative integers, and a\n        value M, determine all possible subsets of the given set whose summation sum\n        equal to given M.\n\n        Summation of the chosen numbers must be equal to given number M and one number\n        can be used only once.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_sum_of_subsets_soln</span>(<span class=\"hljs-params\">nums: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], max_sum: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]]:\n    result: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]] = []\n    path: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>] = []\n    num_index = <span class=\"hljs-number\">0</span>\n    remaining_nums_sum = <span class=\"hljs-built_in\">sum</span>(nums)\n    create_state_space_tree(nums, max_sum, num_index, path, result, remaining_nums_sum)\n    <span class=\"hljs-keyword\">return</span> result\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_state_space_tree</span>(<span class=\"hljs-params\">\n    nums: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>],\n    max_sum: <span class=\"hljs-built_in\">int</span>,\n    num_index: <span class=\"hljs-built_in\">int</span>,\n    path: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>],\n    result: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]],\n    remaining_nums_sum: <span class=\"hljs-built_in\">int</span>,\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Creates a state space tree to iterate through each branch using DFS.\n    It terminates the branching of a node when any of the two conditions\n    given below satisfy.\n    This algorithm follows depth-fist-search and backtracks when the node is not\n    branchable.\n\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">sum</span>(path) &gt; max_sum <span class=\"hljs-keyword\">or</span> (remaining_nums_sum + <span class=\"hljs-built_in\">sum</span>(path)) &lt; max_sum:\n        <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">sum</span>(path) == max_sum:\n        result.append(path)\n        <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">for</span> num_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num_index, <span class=\"hljs-built_in\">len</span>(nums)):\n        create_state_space_tree(\n            nums,\n            max_sum,\n            num_index + <span class=\"hljs-number\">1</span>,\n            path + [nums[num_index]],\n            result,\n            remaining_nums_sum - nums[num_index],\n        )\n\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nremove the comment to take an input from the user\n\nprint(&quot;Enter the elements&quot;)\nnums = list(map(int, input().split()))\nprint(&quot;Enter max_sum sum&quot;)\nmax_sum = int(input())\n\n&quot;&quot;&quot;</span>\nnums = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>]\nmax_sum = <span class=\"hljs-number\">9</span>\nresult = generate_sum_of_subsets_soln(nums, max_sum)\n<span class=\"hljs-built_in\">print</span>(*result)\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "John Law",
      "email": "johnlaw.po@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hetal Kuvadia",
      "email": "hetal.kuvadia@somaiya.edu",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
