{
  "slug": "minimum-cut",
  "name": "Minimum Cut",
  "categories": ["networkingflow"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "networking_flow/minimum_cut.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/networking_flow/minimum_cut.py",
      "code": "<span class=\"hljs-comment\"># Minimum cut on Ford_Fulkerson algorithm.</span>\n\ntest_graph = [\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">BFS</span>(<span class=\"hljs-params\">graph, s, t, parent</span>):\n    <span class=\"hljs-comment\"># Return True if there is node that has not iterated.</span>\n    visited = [<span class=\"hljs-literal\">False</span>] * <span class=\"hljs-built_in\">len</span>(graph)\n    queue = [s]\n    visited[s] = <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">while</span> queue:\n        u = queue.pop(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">for</span> ind <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(graph[u])):\n            <span class=\"hljs-keyword\">if</span> visited[ind] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">and</span> graph[u][ind] &gt; <span class=\"hljs-number\">0</span>:\n                queue.append(ind)\n                visited[ind] = <span class=\"hljs-literal\">True</span>\n                parent[ind] = u\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">if</span> visited[t] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">mincut</span>(<span class=\"hljs-params\">graph, source, sink</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;This array is filled by BFS and to store path\n    &gt;&gt;&gt; mincut(test_graph, source=0, sink=5)\n    [(1, 3), (4, 3), (4, 5)]\n    &quot;&quot;&quot;</span>\n    parent = [-<span class=\"hljs-number\">1</span>] * (<span class=\"hljs-built_in\">len</span>(graph))\n    max_flow = <span class=\"hljs-number\">0</span>\n    res = []\n    temp = [i[:] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> graph]  <span class=\"hljs-comment\"># Record original cut, copy.</span>\n    <span class=\"hljs-keyword\">while</span> BFS(graph, source, sink, parent):\n        path_flow = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;Inf&quot;</span>)\n        s = sink\n\n        <span class=\"hljs-keyword\">while</span> s != source:\n            <span class=\"hljs-comment\"># Find the minimum value in select path</span>\n            path_flow = <span class=\"hljs-built_in\">min</span>(path_flow, graph[parent[s]][s])\n            s = parent[s]\n\n        max_flow += path_flow\n        v = sink\n\n        <span class=\"hljs-keyword\">while</span> v != source:\n            u = parent[v]\n            graph[u][v] -= path_flow\n            graph[v][u] += path_flow\n            v = parent[v]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(graph)):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(graph[<span class=\"hljs-number\">0</span>])):\n            <span class=\"hljs-keyword\">if</span> graph[i][j] == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> temp[i][j] &gt; <span class=\"hljs-number\">0</span>:\n                res.append((i, j))\n\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(mincut(test_graph, source=<span class=\"hljs-number\">0</span>, sink=<span class=\"hljs-number\">5</span>))\n"
    }
  },
  "contributors": [
    {
      "name": "Sichen Liu",
      "email": "sl2947@cornell.edu",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
