{
  "slug": "large-factorial",
  "name": "Large Factorial",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/large_factorial.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/large_factorial.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Compute factorial of any arbitratily large number/\n *\n * \\author [Krishna Vedala](https://github.com/kvedala)\n * @see factorial.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;./large_number.h&quot;</span></span>\n\n<span class=\"hljs-comment\">/** Test implementation for 10! Result must be 3628800.\n * @returns True if test pass else False\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;---- Check 1\\t&quot;</span>;\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> i, number = <span class=\"hljs-number\">10</span>;\n    large_number result;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= number; i++) <span class=\"hljs-comment\">/* Multiply every number from 2 thru N */</span>\n        result *= i;\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *known_reslt = <span class=\"hljs-string\">&quot;3628800&quot;</span>;\n\n    <span class=\"hljs-comment\">/* check 1 */</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strlen</span>(known_reslt) != result.<span class=\"hljs-built_in\">num_digits</span>()) {\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Result lengths dont match! &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">strlen</span>(known_reslt)\n                  &lt;&lt; <span class=\"hljs-string\">&quot; != &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">num_digits</span>() &lt;&lt; std::endl;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">size_t</span> N = result.<span class=\"hljs-built_in\">num_digits</span>();\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n        <span class=\"hljs-keyword\">if</span> (known_reslt[i] != result.<span class=\"hljs-built_in\">digit_char</span>(i)) {\n            std::cerr &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;^th digit mismatch! &quot;</span> &lt;&lt; known_reslt[i]\n                      &lt;&lt; <span class=\"hljs-string\">&quot; != &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">digit_char</span>(i) &lt;&lt; std::endl;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/** Test implementation for 100! The result is the 156 digit number:\n * ```\n * 9332621544394415268169923885626670049071596826438162146859296389521759\n * 9993229915608941463976156518286253697920827223758251185210916864000000\n * 000000000000000000\n * ```\n * @returns True if test pass else False\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;---- Check 2\\t&quot;</span>;\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> i, number = <span class=\"hljs-number\">100</span>;\n    large_number result;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= number; i++) <span class=\"hljs-comment\">/* Multiply every number from 2 thru N */</span>\n        result *= i;\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *known_reslt =\n        <span class=\"hljs-string\">&quot;9332621544394415268169923885626670049071596826438162146859296389521759&quot;</span>\n        <span class=\"hljs-string\">&quot;9993229915608941463976156518286253697920827223758251185210916864000000&quot;</span>\n        <span class=\"hljs-string\">&quot;000000000000000000&quot;</span>;\n\n    <span class=\"hljs-comment\">/* check 1 */</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strlen</span>(known_reslt) != result.<span class=\"hljs-built_in\">num_digits</span>()) {\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Result lengths dont match! &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">strlen</span>(known_reslt)\n                  &lt;&lt; <span class=\"hljs-string\">&quot; != &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">num_digits</span>() &lt;&lt; std::endl;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">size_t</span> N = result.<span class=\"hljs-built_in\">num_digits</span>();\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n        <span class=\"hljs-keyword\">if</span> (known_reslt[i] != result.<span class=\"hljs-built_in\">digit_char</span>(i)) {\n            std::cerr &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;^th digit mismatch! &quot;</span> &lt;&lt; known_reslt[i]\n                      &lt;&lt; <span class=\"hljs-string\">&quot; != &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">digit_char</span>(i) &lt;&lt; std::endl;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed!&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Main program\n **/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\n    <span class=\"hljs-type\">int</span> number, i;\n\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">2</span>) {\n        number = <span class=\"hljs-built_in\">atoi</span>(argv[<span class=\"hljs-number\">1</span>]);\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the value of n(n starts from 0 ): &quot;</span>;\n        std::cin &gt;&gt; number;\n    }\n\n    large_number result;\n\n    std::<span class=\"hljs-type\">clock_t</span> start_time = std::<span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= number; i++) <span class=\"hljs-comment\">/* Multiply every number from 2 thru N */</span>\n        result *= i;\n    std::<span class=\"hljs-type\">clock_t</span> end_time = std::<span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-type\">double</span> time_taken =\n        <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(end_time - start_time) / CLOCKS_PER_SEC;\n\n    std::cout &lt;&lt; number &lt;&lt; <span class=\"hljs-string\">&quot;! = &quot;</span> &lt;&lt; result &lt;&lt; std::endl\n              &lt;&lt; <span class=\"hljs-string\">&quot;Number of digits: &quot;</span> &lt;&lt; result.<span class=\"hljs-built_in\">num_digits</span>() &lt;&lt; std::endl\n              &lt;&lt; <span class=\"hljs-string\">&quot;Time taken: &quot;</span> &lt;&lt; std::scientific &lt;&lt; time_taken &lt;&lt; <span class=\"hljs-string\">&quot; s&quot;</span>\n              &lt;&lt; std::endl;\n\n    <span class=\"hljs-built_in\">test1</span>();\n    <span class=\"hljs-built_in\">test2</span>();\n    result.<span class=\"hljs-built_in\">test</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
