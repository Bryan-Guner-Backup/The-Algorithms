{
  "slug": "numeric-string-sort",
  "name": "Numeric String Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/numeric_string_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/numeric_string_sort.cpp",
      "code": "<span class=\"hljs-comment\">// Using general algorithms to sort a collection of strings results in</span>\n<span class=\"hljs-comment\">// alphanumeric sort. If it is a numeric string, it leads to unnatural sorting</span>\n\n<span class=\"hljs-comment\">// eg, an array of strings 1,10,100,2,20,200,3,30,300</span>\n<span class=\"hljs-comment\">// would be sorted in that same order by using conventional sorting,</span>\n<span class=\"hljs-comment\">// even though we know the correct sorting order is 1,2,3,10,20,30,100,200,300</span>\n\n<span class=\"hljs-comment\">// This Programme uses a comparator to sort the array in Numerical order instead</span>\n<span class=\"hljs-comment\">// of Alphanumeric order</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">NumericSort</span><span class=\"hljs-params\">(std::string a, std::string b)</span> </span>{\n    <span class=\"hljs-keyword\">while</span> (a[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&#x27;0&#x27;</span>) {\n        a.<span class=\"hljs-built_in\">erase</span>(a.<span class=\"hljs-built_in\">begin</span>());\n    }\n    <span class=\"hljs-keyword\">while</span> (b[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&#x27;0&#x27;</span>) {\n        b.<span class=\"hljs-built_in\">erase</span>(b.<span class=\"hljs-built_in\">begin</span>());\n    }\n    <span class=\"hljs-type\">int</span> n = a.<span class=\"hljs-built_in\">length</span>();\n    <span class=\"hljs-type\">int</span> m = b.<span class=\"hljs-built_in\">length</span>();\n    <span class=\"hljs-keyword\">if</span> (n == m)\n        <span class=\"hljs-keyword\">return</span> a &lt; b;\n    <span class=\"hljs-keyword\">return</span> n &lt; m;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> n;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number of elements to be sorted Numerically\\n&quot;</span>;\n    std::cin &gt;&gt; n;\n\n    <span class=\"hljs-function\">std::vector&lt;std::string&gt; <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(n)</span></span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the string of Numbers\\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cin &gt;&gt; v[i];\n    }\n\n    <span class=\"hljs-built_in\">sort</span>(v.<span class=\"hljs-built_in\">begin</span>(), v.<span class=\"hljs-built_in\">end</span>());\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Elements sorted normally \\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cout &lt;&lt; v[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    std::<span class=\"hljs-built_in\">sort</span>(v.<span class=\"hljs-built_in\">begin</span>(), v.<span class=\"hljs-built_in\">end</span>(), NumericSort);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Elements sorted Numerically \\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cout &lt;&lt; v[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
