{
  "slug": "spiral-print",
  "name": "Spiral Print",
  "categories": ["matrix"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "matrix/spiral_print.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/matrix/spiral_print.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis program print the matrix in spiral form.\nThis problem has been solved through recursive way.\n\n      Matrix must satisfy below conditions\n        i) matrix should be only one or two dimensional\n        ii)column of all the row should be equal\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">checkMatrix</span>(<span class=\"hljs-params\">a</span>):\n    <span class=\"hljs-comment\"># must be</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(a) == <span class=\"hljs-built_in\">list</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(a) &gt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(a[<span class=\"hljs-number\">0</span>]) == <span class=\"hljs-built_in\">list</span>:\n            prevLen = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> a:\n                <span class=\"hljs-keyword\">if</span> prevLen == <span class=\"hljs-number\">0</span>:\n                    prevLen = <span class=\"hljs-built_in\">len</span>(i)\n                    result = <span class=\"hljs-literal\">True</span>\n                <span class=\"hljs-keyword\">elif</span> prevLen == <span class=\"hljs-built_in\">len</span>(i):\n                    result = <span class=\"hljs-literal\">True</span>\n                <span class=\"hljs-keyword\">else</span>:\n                    result = <span class=\"hljs-literal\">False</span>\n        <span class=\"hljs-keyword\">else</span>:\n            result = <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">else</span>:\n        result = <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">return</span> result\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">spiralPrint</span>(<span class=\"hljs-params\">a</span>):\n\n    <span class=\"hljs-keyword\">if</span> checkMatrix(a) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(a) &gt; <span class=\"hljs-number\">0</span>:\n\n        matRow = <span class=\"hljs-built_in\">len</span>(a)\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(a[<span class=\"hljs-number\">0</span>]) == <span class=\"hljs-built_in\">list</span>:\n            matCol = <span class=\"hljs-built_in\">len</span>(a[<span class=\"hljs-number\">0</span>])\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">for</span> dat <span class=\"hljs-keyword\">in</span> a:\n                <span class=\"hljs-built_in\">print</span>(dat),\n            <span class=\"hljs-keyword\">return</span>\n\n        <span class=\"hljs-comment\"># horizotal printing increasing</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, matCol):\n            <span class=\"hljs-built_in\">print</span>(a[<span class=\"hljs-number\">0</span>][i]),\n        <span class=\"hljs-comment\"># vertical printing down</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, matRow):\n            <span class=\"hljs-built_in\">print</span>(a[i][matCol - <span class=\"hljs-number\">1</span>]),\n        <span class=\"hljs-comment\"># horizotal printing decreasing</span>\n        <span class=\"hljs-keyword\">if</span> matRow &gt; <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(matCol - <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\n                <span class=\"hljs-built_in\">print</span>(a[matRow - <span class=\"hljs-number\">1</span>][i]),\n        <span class=\"hljs-comment\"># vertical printing up</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(matRow - <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-built_in\">print</span>(a[i][<span class=\"hljs-number\">0</span>]),\n        remainMat = [row[<span class=\"hljs-number\">1</span> : matCol - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> a[<span class=\"hljs-number\">1</span> : matRow - <span class=\"hljs-number\">1</span>]]\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(remainMat) &gt; <span class=\"hljs-number\">0</span>:\n            spiralPrint(remainMat)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Not a valid matrix&quot;</span>)\n        <span class=\"hljs-keyword\">return</span>\n\n\n<span class=\"hljs-comment\"># driver code</span>\na = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>], [<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>]]\nspiralPrint(a)\n"
    },
    "c-plus-plus": {
      "dir": "others/spiral_print.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others/spiral_print.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Print the elements of a matrix traversing it spirally\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Arrange sequence of numbers from &#x27;1&#x27; in a matrix form\n * \\param [out] a matrix to fill\n * \\param [in] r number of rows\n * \\param [in] c number of columns\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">genArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **a, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> c)</span> </span>{\n    <span class=\"hljs-type\">int</span> value = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; r; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; c; j++) {\n            a[i][j] = value;\n            std::cout &lt;&lt; a[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n            value++;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n}\n\n<span class=\"hljs-comment\">/** Traverse the matrix spirally and print the sequence of elements\n * \\param [in] a matrix to read from\n * \\param [in] r number of rows\n * \\param [in] c number of columns\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">spiralPrint</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **a, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> c)</span> </span>{\n    <span class=\"hljs-type\">int</span> startRow = <span class=\"hljs-number\">0</span>, endRow = r - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> startCol = <span class=\"hljs-number\">0</span>, endCol = c - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> cnt = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">while</span> (startRow &lt;= endRow &amp;&amp; startCol &lt;= endCol) {\n        <span class=\"hljs-comment\">/// Print start row</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = startCol; i &lt;= endCol; i++, cnt++) {\n            std::cout &lt;&lt; a[startRow][i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        startRow++;\n\n        <span class=\"hljs-comment\">/// Print the end col</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = startRow; i &lt;= endRow; i++, cnt++) {\n            std::cout &lt;&lt; a[i][endCol] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        endCol--;\n\n        <span class=\"hljs-comment\">/// Print the end row</span>\n        <span class=\"hljs-keyword\">if</span> (cnt == r * c) {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = endCol; i &gt;= startCol; i--, cnt++) {\n            std::cout &lt;&lt; a[endRow][i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        endRow--;\n\n        <span class=\"hljs-comment\">/// Print the start Col</span>\n        <span class=\"hljs-keyword\">if</span> (cnt == r * c) {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = endRow; i &gt;= startRow; i--, cnt++) {\n            std::cout &lt;&lt; a[i][startCol] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        startCol++;\n    }\n}\n\n<span class=\"hljs-comment\">/** main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> r, c;\n    std::cin &gt;&gt; r &gt;&gt; c;\n    <span class=\"hljs-type\">int</span> **a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span> *[r];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; r; i++) a[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[c];\n\n    <span class=\"hljs-built_in\">genArray</span>(a, r, c);\n    <span class=\"hljs-built_in\">spiralPrint</span>(a, r, c);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; r; i++) <span class=\"hljs-keyword\">delete</span>[] a[i];\n    <span class=\"hljs-keyword\">delete</span>[] a;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "brajesh-rit",
      "email": "brajesh_rit@yahoo.co.in",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
