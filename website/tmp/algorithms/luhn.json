{
  "slug": "luhn",
  "name": "Luhn",
  "categories": ["hashing"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "hashes/luhn.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/hashes/luhn.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; Luhn Algorithm &quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_luhn</span>(<span class=\"hljs-params\">string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Perform Luhn validation on input string\n    Algorithm:\n    * Double every other digit starting from 2nd last digit.\n    * Subtract 9 if number is greater than 9.\n    * Sum the numbers\n    *\n    &gt;&gt;&gt; test_cases = [79927398710, 79927398711, 79927398712, 79927398713,\n    ...     79927398714, 79927398715, 79927398716, 79927398717, 79927398718,\n    ...     79927398719]\n    &gt;&gt;&gt; test_cases = list(map(str, test_cases))\n    &gt;&gt;&gt; list(map(is_luhn, test_cases))\n    [False, False, False, True, False, False, False, False, False, False]\n    &quot;&quot;&quot;</span>\n    check_digit: <span class=\"hljs-built_in\">int</span>\n    _vector: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>] = <span class=\"hljs-built_in\">list</span>(string)\n    __vector, check_digit = _vector[:-<span class=\"hljs-number\">1</span>], <span class=\"hljs-built_in\">int</span>(_vector[-<span class=\"hljs-number\">1</span>])\n    vector: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>] = [*<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">int</span>, __vector)]\n\n    vector.reverse()\n    <span class=\"hljs-keyword\">for</span> idx, i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(vector):\n\n        <span class=\"hljs-keyword\">if</span> idx &amp; <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">0</span>:\n            doubled: <span class=\"hljs-built_in\">int</span> = vector[idx] * <span class=\"hljs-number\">2</span>\n            <span class=\"hljs-keyword\">if</span> doubled &gt; <span class=\"hljs-number\">9</span>:\n                doubled -= <span class=\"hljs-number\">9</span>\n\n            check_digit += doubled\n        <span class=\"hljs-keyword\">else</span>:\n            check_digit += i\n\n    <span class=\"hljs-keyword\">if</span> (check_digit) % <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    <span class=\"hljs-keyword\">assert</span> is_luhn(<span class=\"hljs-string\">&quot;79927398713&quot;</span>)\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Other/Luhn.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Other/Luhn.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Luhn algorithm is a simple</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     checksum formula used to validate</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     a variety of identification numbers,</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     such as credit card numbers.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     More information on the link:</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     https://en.wikipedia.org/wiki/Luhn_algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Luhn</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checking the validity of a sequence of numbers.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>The number that will be checked for validity.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     True: Number is valid.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     False: Number isn`t valid.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Validate</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> number</span>)</span> =&gt; GetSum(number) % <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This algorithm only finds one number.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     In place of the unknown digit, put &quot;x&quot;.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>The number in which to find the missing digit.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Missing digit.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetLostNum</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> number</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> lostIndex = number.Length - <span class=\"hljs-number\">1</span> - number.LastIndexOf(<span class=\"hljs-string\">&quot;x&quot;</span>, StringComparison.CurrentCultureIgnoreCase);\n            <span class=\"hljs-keyword\">var</span> lostNum = GetSum(number.Replace(<span class=\"hljs-string\">&quot;x&quot;</span>, <span class=\"hljs-string\">&quot;0&quot;</span>, StringComparison.CurrentCultureIgnoreCase)) * <span class=\"hljs-number\">9</span> % <span class=\"hljs-number\">10</span>;\n\n            <span class=\"hljs-comment\">// Case 1: If the index of the lost digit is even.</span>\n            <span class=\"hljs-keyword\">if</span> (lostIndex % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> lostNum;\n            }\n\n            <span class=\"hljs-keyword\">var</span> tempLostNum = lostNum / <span class=\"hljs-number\">2</span>;\n\n            <span class=\"hljs-comment\">// Case 2: if the index of the lost digit isn`t even and that number &lt;= 4.</span>\n            <span class=\"hljs-comment\">// Case 3: if the index of the lost digit isn`t even and that number &gt; 4.</span>\n            <span class=\"hljs-keyword\">return</span> Validate(number.Replace(<span class=\"hljs-string\">&quot;x&quot;</span>, tempLostNum.ToString())) ? tempLostNum : (lostNum + <span class=\"hljs-number\">9</span>) / <span class=\"hljs-number\">2</span>;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Computes the sum found by the algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;number&quot;&gt;</span>The number for which the sum will be found.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Sum.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetSum</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> number</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; number.Length; i++)\n            {\n                <span class=\"hljs-keyword\">var</span> d = number[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n                d = (i + number.Length) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n                    ? <span class=\"hljs-number\">2</span> * d\n                    : d;\n                <span class=\"hljs-keyword\">if</span> (d &gt; <span class=\"hljs-number\">9</span>)\n                {\n                    d -= <span class=\"hljs-number\">9</span>;\n                }\n\n                sum += d;\n            }\n\n            <span class=\"hljs-keyword\">return</span> sum;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "NikitaYermak",
      "email": "50529884+NikitaYermak@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
