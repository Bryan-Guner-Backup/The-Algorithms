{
  "slug": "magic-number",
  "name": "Magic Number",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/magic_number.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/magic_number.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief A simple program to check if the given number is a magic number or\n * not. A number is said to be a magic number, if the sum of its digits are\n * calculated till a single digit recursively by adding the sum of the digits\n * after every addition. If the single digit comes out to be 1,then the number\n * is a magic number.\n *\n * This is a shortcut method to verify Magic Number.\n * On dividing the input by 9, if the remainder is 1 then the number is a magic\n * number else not. The divisibility rule of 9 says that a number is divisible\n * by 9 if the sum of its digits are also divisible by 9. Therefore, if a number\n * is divisible by 9, then, recursively, all the digit sums are also divisible\n * by 9. The final digit sum is always 9. An increase of 1 in the original\n * number will increase the ultimate value by 1, making it 10 and the ultimate\n * sum will be 1, thus verifying that it is a magic number.\n * @author [Neha Hasija](https://github.com/neha-hasija17)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * Function to check if the given number is magic number or not.\n * @param n number to be checked.\n * @return if number is a magic number, returns true, else false.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">magic_number</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;n)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-comment\">// result stores the modulus of @param n with 9</span>\n    <span class=\"hljs-type\">uint64_t</span> result = n % <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-comment\">// if result is 1 then the number is a magic number else not</span>\n    <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test function\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1:\\t n=60\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(math::<span class=\"hljs-built_in\">magic_number</span>(<span class=\"hljs-number\">60</span>) == <span class=\"hljs-literal\">false</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2:\\t n=730\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(math::<span class=\"hljs-built_in\">magic_number</span>(<span class=\"hljs-number\">730</span>) == <span class=\"hljs-literal\">true</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3:\\t n=0\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(math::<span class=\"hljs-built_in\">magic_number</span>(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-literal\">false</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4:\\t n=479001600\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(math::<span class=\"hljs-built_in\">magic_number</span>(<span class=\"hljs-number\">479001600</span>) == <span class=\"hljs-literal\">false</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 5:\\t n=-35\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(math::<span class=\"hljs-built_in\">magic_number</span>(<span class=\"hljs-number\">-35</span>) == <span class=\"hljs-literal\">false</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">tests</span>();  <span class=\"hljs-comment\">// execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "dart": {
      "dir": "other/magic_number.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/other/magic_number.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-built_in\">bool</span> Magic_no(<span class=\"hljs-keyword\">var</span> x) {\n  <span class=\"hljs-keyword\">var</span> result = x % <span class=\"hljs-number\">9</span>;\n  <span class=\"hljs-keyword\">return</span> result == <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;Test Magic_no returns false for non-magic numbers&quot;</span>, () {\n    expect(Magic_no(<span class=\"hljs-number\">0</span>), isFalse);\n    expect(Magic_no(<span class=\"hljs-number\">371</span>), isFalse);\n    expect(Magic_no(<span class=\"hljs-number\">509</span>), isFalse);\n    expect(Magic_no(<span class=\"hljs-number\">501</span>), isFalse);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Test Magic_no returns true for magic numbers&quot;</span>, () {\n    expect(Magic_no(<span class=\"hljs-number\">10</span>), isTrue);\n    expect(Magic_no(<span class=\"hljs-number\">370</span>), isTrue);\n  });\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
