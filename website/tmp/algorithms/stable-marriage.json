{
  "slug": "stable-marriage",
  "name": "Stable Marriage",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Problems/StableMarriage/GaleShapley.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Problems/StableMarriage/GaleShapley.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Problems.StableMarriage</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GaleShapley</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds a stable matching between two equal sets of elements (fills EngagedTo properties).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n^2), where n - array size.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Guarantees:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     - Everyone is matched</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     - Matches are stable (there is no better accepter, for any given proposer, which would accept a new match).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Presented and proven by David Gale and Lloyd Shapley in 1962.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Match</span>(<span class=\"hljs-params\">Proposer[] proposers, Accepter[] accepters</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (proposers.Length != accepters.Length)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Collections must have equal count&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">while</span> (proposers.Any(m =&gt; !IsEngaged(m)))\n            {\n                DoSingleMatchingRound(proposers.Where(m =&gt; !IsEngaged(m)));\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsEngaged</span>(<span class=\"hljs-params\">Proposer proposer</span>)</span> =&gt; proposer.EngagedTo <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>;\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DoSingleMatchingRound</span>(<span class=\"hljs-params\">IEnumerable&lt;Proposer&gt; proposers</span>)</span>\n        {\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> newProposer <span class=\"hljs-keyword\">in</span> proposers)\n            {\n                <span class=\"hljs-keyword\">var</span> accepter = newProposer.PreferenceOrder.First!.Value;\n\n                <span class=\"hljs-keyword\">if</span> (accepter.EngagedTo <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n                {\n                    Engage(newProposer, accepter);\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-keyword\">if</span> (accepter.PrefersOverCurrent(newProposer))\n                    {\n                        Free(accepter.EngagedTo);\n                        Engage(newProposer, accepter);\n                    }\n                }\n\n                newProposer.PreferenceOrder.RemoveFirst();\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Free</span>(<span class=\"hljs-params\">Proposer proposer</span>)</span>\n        {\n            proposer.EngagedTo = <span class=\"hljs-literal\">null</span>;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Engage</span>(<span class=\"hljs-params\">Proposer proposer, Accepter accepter</span>)</span>\n        {\n            proposer.EngagedTo = accepter;\n            accepter.EngagedTo = proposer;\n        }\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
