{
  "slug": "quine-mc-cluskey",
  "name": "Quine Mc Cluskey",
  "categories": ["booleanalgebra"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "boolean_algebra/quine_mc_cluskey.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/boolean_algebra/quine_mc_cluskey.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">compare_string</span>(<span class=\"hljs-params\">string1: <span class=\"hljs-built_in\">str</span>, string2: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; compare_string(&#x27;0010&#x27;,&#x27;0110&#x27;)\n    &#x27;0_10&#x27;\n\n    &gt;&gt;&gt; compare_string(&#x27;0110&#x27;,&#x27;1101&#x27;)\n    &#x27;X&#x27;\n    &quot;&quot;&quot;</span>\n    l1 = <span class=\"hljs-built_in\">list</span>(string1)\n    l2 = <span class=\"hljs-built_in\">list</span>(string2)\n    count = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(l1)):\n        <span class=\"hljs-keyword\">if</span> l1[i] != l2[i]:\n            count += <span class=\"hljs-number\">1</span>\n            l1[i] = <span class=\"hljs-string\">&quot;_&quot;</span>\n    <span class=\"hljs-keyword\">if</span> count &gt; <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;X&quot;</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(l1)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check</span>(<span class=\"hljs-params\">binary: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; check([&#x27;0.00.01.5&#x27;])\n    [&#x27;0.00.01.5&#x27;]\n    &quot;&quot;&quot;</span>\n    pi = []\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-number\">1</span>:\n        check1 = [<span class=\"hljs-string\">&quot;$&quot;</span>] * <span class=\"hljs-built_in\">len</span>(binary)\n        temp = []\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(binary)):\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(binary)):\n                k = compare_string(binary[i], binary[j])\n                <span class=\"hljs-keyword\">if</span> k != <span class=\"hljs-string\">&quot;X&quot;</span>:\n                    check1[i] = <span class=\"hljs-string\">&quot;*&quot;</span>\n                    check1[j] = <span class=\"hljs-string\">&quot;*&quot;</span>\n                    temp.append(k)\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(binary)):\n            <span class=\"hljs-keyword\">if</span> check1[i] == <span class=\"hljs-string\">&quot;$&quot;</span>:\n                pi.append(binary[i])\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(temp) == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> pi\n        binary = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">set</span>(temp))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decimal_to_binary</span>(<span class=\"hljs-params\">no_of_variable: <span class=\"hljs-built_in\">int</span>, minterms: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; decimal_to_binary(3,[1.5])\n    [&#x27;0.00.01.5&#x27;]\n    &quot;&quot;&quot;</span>\n    temp = []\n    s = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> m <span class=\"hljs-keyword\">in</span> minterms:\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(no_of_variable):\n            s = <span class=\"hljs-built_in\">str</span>(m % <span class=\"hljs-number\">2</span>) + s\n            m //= <span class=\"hljs-number\">2</span>\n        temp.append(s)\n        s = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> temp\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_for_table</span>(<span class=\"hljs-params\">string1: <span class=\"hljs-built_in\">str</span>, string2: <span class=\"hljs-built_in\">str</span>, count: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; is_for_table(&#x27;__1&#x27;,&#x27;011&#x27;,2)\n    True\n\n    &gt;&gt;&gt; is_for_table(&#x27;01_&#x27;,&#x27;001&#x27;,1)\n    False\n    &quot;&quot;&quot;</span>\n    l1 = <span class=\"hljs-built_in\">list</span>(string1)\n    l2 = <span class=\"hljs-built_in\">list</span>(string2)\n    count_n = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(l1)):\n        <span class=\"hljs-keyword\">if</span> l1[i] != l2[i]:\n            count_n += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> count_n == count:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">selection</span>(<span class=\"hljs-params\">chart: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]], prime_implicants: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; selection([[1]],[&#x27;0.00.01.5&#x27;])\n    [&#x27;0.00.01.5&#x27;]\n\n    &gt;&gt;&gt; selection([[1]],[&#x27;0.00.01.5&#x27;])\n    [&#x27;0.00.01.5&#x27;]\n    &quot;&quot;&quot;</span>\n    temp = []\n    select = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">len</span>(chart)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(chart[<span class=\"hljs-number\">0</span>])):\n        count = <span class=\"hljs-number\">0</span>\n        rem = -<span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(chart)):\n            <span class=\"hljs-keyword\">if</span> chart[j][i] == <span class=\"hljs-number\">1</span>:\n                count += <span class=\"hljs-number\">1</span>\n                rem = j\n        <span class=\"hljs-keyword\">if</span> count == <span class=\"hljs-number\">1</span>:\n            select[rem] = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(select)):\n        <span class=\"hljs-keyword\">if</span> select[i] == <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(chart[<span class=\"hljs-number\">0</span>])):\n                <span class=\"hljs-keyword\">if</span> chart[i][j] == <span class=\"hljs-number\">1</span>:\n                    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(chart)):\n                        chart[k][j] = <span class=\"hljs-number\">0</span>\n            temp.append(prime_implicants[i])\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-number\">1</span>:\n        max_n = <span class=\"hljs-number\">0</span>\n        rem = -<span class=\"hljs-number\">1</span>\n        count_n = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(chart)):\n            count_n = chart[i].count(<span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">if</span> count_n &gt; max_n:\n                max_n = count_n\n                rem = i\n\n        <span class=\"hljs-keyword\">if</span> max_n == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> temp\n\n        temp.append(prime_implicants[rem])\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(chart[<span class=\"hljs-number\">0</span>])):\n            <span class=\"hljs-keyword\">if</span> chart[rem][i] == <span class=\"hljs-number\">1</span>:\n                <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(chart)):\n                    chart[j][i] = <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prime_implicant_chart</span>(<span class=\"hljs-params\">\n    prime_implicants: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>], binary: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]\n</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; prime_implicant_chart([&#x27;0.00.01.5&#x27;],[&#x27;0.00.01.5&#x27;])\n    [[1]]\n    &quot;&quot;&quot;</span>\n    chart = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(binary))] <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(prime_implicants))]\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(prime_implicants)):\n        count = prime_implicants[i].count(<span class=\"hljs-string\">&quot;_&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(binary)):\n            <span class=\"hljs-keyword\">if</span> is_for_table(prime_implicants[i], binary[j], count):\n                chart[i][j] = <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> chart\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    no_of_variable = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the no. of variables\\n&quot;</span>))\n    minterms = [\n        <span class=\"hljs-built_in\">int</span>(x)\n        <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">input</span>(\n            <span class=\"hljs-string\">&quot;Enter the decimal representation of Minterms &#x27;Spaces Separated&#x27;\\n&quot;</span>\n        ).split()\n    ]\n    binary = decimal_to_binary(no_of_variable, minterms)\n\n    prime_implicants = check(binary)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Prime Implicants are:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(prime_implicants)\n    chart = prime_implicant_chart(prime_implicants, binary)\n\n    essential_prime_implicants = selection(chart, prime_implicants)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Essential Prime Implicants are:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(essential_prime_implicants)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "shivg7706",
      "email": "shivamgupta7706@gmail.com",
      "commits": 1
    },
    {
      "name": "Ayush Raj",
      "email": "rajayush213@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hasenn",
      "email": "eliottarloveyrier@live.fr",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Marvin M. Michum",
      "email": "mrvnmchm@gmail.com",
      "commits": 1
    },
    {
      "name": "pathak-deep15",
      "email": "44609019+pathak-deep15@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
