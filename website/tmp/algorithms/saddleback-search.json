{
  "slug": "saddleback-search",
  "name": "Saddleback Search",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "search/saddleback_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search/saddleback_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Saddleback Algorithm](https://www.geeksforgeeks.org/saddleback-search-algorithm-in-a-2d-array) for 2D arrays.\n *\n * @details\n * Saddleback Algorithm is an algorithm that searches 2D array in linear time,\n * i.e, O(m + n), where m is number of rows and n is number of columns of 2D array. Also, each row and\n * column of the matrix should be sorted beforehand for this algorithm to work.\n *\n * @author [Hashir Niazi](https://github.com/HashirGJ8842)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>      <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>     <span class=\"hljs-comment\">/// for io operations, and std::pair</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>       <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/** \\namespace search\n * \\brief Algorithms for searching\n */</span>\n<span class=\"hljs-keyword\">namespace</span> search {\n<span class=\"hljs-comment\">/** \\namespace saddleback\n * \\brief Function for implementing [Saddleback Algorithm](https://www.geeksforgeeks.org/saddleback-search-algorithm-in-a-2d-array).\n */</span>\n<span class=\"hljs-keyword\">namespace</span> saddleback {\n<span class=\"hljs-comment\">/**\n * This function implements [Saddleback Algorithm](https://www.geeksforgeeks.org/saddleback-search-algorithm-in-a-2d-array),\n * on a sorted 2D array, and finds the location of the element needed to search\n * @param matrix 2D matrix which is sorted on the basis of rows and columns\n * @param element element to be searched\n * @return An std::pair of with row and column populated within it, if the\n * element is present.\n * @return An std::pair with (0, 0), if the element is not present.\n */</span>\n<span class=\"hljs-function\">std::pair&lt;<span class=\"hljs-type\">uint32_t</span>, <span class=\"hljs-type\">uint32_t</span>&gt; <span class=\"hljs-title\">saddleback</span><span class=\"hljs-params\">(std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt;&gt; matrix,\n                               <span class=\"hljs-type\">int32_t</span> element)</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> left_index = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">uint32_t</span> right_index = matrix[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// Start from top right corner</span>\n    <span class=\"hljs-keyword\">while</span> (left_index &lt; matrix.<span class=\"hljs-built_in\">size</span>()) {  <span class=\"hljs-comment\">// Exit once the value of indexes get out of range.</span>\n        <span class=\"hljs-keyword\">if</span> (element ==\n            matrix[left_index]\n                  [right_index]) {  <span class=\"hljs-comment\">// If value on this position of matrix is</span>\n                                    <span class=\"hljs-comment\">// equal to element, return (row, column).</span>\n            <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">make_pair</span>(left_index+<span class=\"hljs-number\">1</span>, right_index+<span class=\"hljs-number\">1</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (element &gt;\n                   matrix[left_index]\n                         [right_index]) {  <span class=\"hljs-comment\">// Else if value on this position of</span>\n                                           <span class=\"hljs-comment\">// matrix is less than the element,</span>\n                                           <span class=\"hljs-comment\">// move left.</span>\n            ++left_index;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (element &lt;\n                   matrix[left_index]\n                         [right_index]) {  <span class=\"hljs-comment\">// Else if value on this position of</span>\n                                           <span class=\"hljs-comment\">// matrix is greater than the</span>\n                                           <span class=\"hljs-comment\">// element, move down.</span>\n            <span class=\"hljs-keyword\">if</span>(!right_index)\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">else</span> --right_index;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">make_pair</span>(\n        <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// If the program reaches here, that means one of the index</span>\n                  <span class=\"hljs-comment\">// went out of index, hence no element present.</span>\n}\n}  <span class=\"hljs-comment\">// namespace saddleback</span>\n}  <span class=\"hljs-comment\">// namespace search</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt;&gt; matrix = {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">10000</span>},\n                                            {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">2000</span>, <span class=\"hljs-number\">20000</span>},\n                                            {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">3000</span>, <span class=\"hljs-number\">30000</span>},\n                                            {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">4000</span>, <span class=\"hljs-number\">40000</span>},\n                                            {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">5000</span>, <span class=\"hljs-number\">50000</span>}};\n\n    std::pair&lt;<span class=\"hljs-type\">uint32_t</span>, <span class=\"hljs-type\">uint32_t</span>&gt; not_found = std::<span class=\"hljs-built_in\">make_pair</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n    std::pair&lt;<span class=\"hljs-type\">uint32_t</span>, <span class=\"hljs-type\">uint32_t</span>&gt; test_answer;\n    <span class=\"hljs-comment\">// Test 1</span>\n    std::pair&lt;<span class=\"hljs-type\">uint32_t</span>, <span class=\"hljs-type\">uint32_t</span>&gt; answer1 = search::saddleback::<span class=\"hljs-built_in\">saddleback</span>(matrix, <span class=\"hljs-number\">123</span>);\n    <span class=\"hljs-built_in\">assert</span>(not_found == answer1);\n    <span class=\"hljs-comment\">// Test 2</span>\n    answer1 = search::saddleback::<span class=\"hljs-built_in\">saddleback</span>(matrix, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(not_found == answer1);\n    <span class=\"hljs-comment\">// Test 3</span>\n    answer1 = search::saddleback::<span class=\"hljs-built_in\">saddleback</span>(matrix, <span class=\"hljs-number\">1</span>);\n    test_answer = std::<span class=\"hljs-built_in\">make_pair</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_answer == answer1);\n    <span class=\"hljs-comment\">// Test 4</span>\n    answer1 = search::saddleback::<span class=\"hljs-built_in\">saddleback</span>(matrix, <span class=\"hljs-number\">50000</span>);\n    test_answer = std::<span class=\"hljs-built_in\">make_pair</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_answer == answer1);\n    <span class=\"hljs-comment\">// Test 5</span>\n    answer1 = search::saddleback::<span class=\"hljs-built_in\">saddleback</span>(matrix, <span class=\"hljs-number\">300</span>);\n    test_answer = std::<span class=\"hljs-built_in\">make_pair</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_answer == answer1);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();     <span class=\"hljs-comment\">// execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Searches/SaddlebackSearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Searches/SaddlebackSearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> Searches;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * Program to perform Saddleback Search Given a sorted 2D array(elements are sorted across every row\n * and column, assuming ascending order) of size n*m we can search a given element in O(n+m)\n *\n * &lt;p&gt;we start from bottom left corner if the current element is greater than the given element then\n * we move up else we move right Sample Input: 5 5 -&gt;Dimensions -10 -5 -3 4 9 -6 -2 0 5 10 -4 -1 1 6\n * 12 2 3 7 8 13 100 120 130 140 150 140 -&gt;element to be searched output: 4 3 // first value is row,\n * second one is column\n *\n * <span class=\"hljs-doctag\">@author</span> Nishita Aggarwal\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SaddlebackSearch</span> {\n\n  <span class=\"hljs-comment\">/**\n   * This method performs Saddleback Search\n   *\n   * <span class=\"hljs-doctag\">@param</span> arr The **Sorted** array in which we will search the element.\n   * <span class=\"hljs-doctag\">@param</span> row the current row.\n   * <span class=\"hljs-doctag\">@param</span> col the current column.\n   * <span class=\"hljs-doctag\">@param</span> key the element that we want to search for.\n   * <span class=\"hljs-doctag\">@return</span> The index(row and column) of the element if found. Else returns -1 -1.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] find(<span class=\"hljs-type\">int</span> arr[][], <span class=\"hljs-type\">int</span> row, <span class=\"hljs-type\">int</span> col, <span class=\"hljs-type\">int</span> key) {\n\n    <span class=\"hljs-comment\">// array to store the answer row and column</span>\n    <span class=\"hljs-type\">int</span> ans[] = {-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-keyword\">if</span> (row &lt; <span class=\"hljs-number\">0</span> || col &gt;= arr[row].length) {\n      <span class=\"hljs-keyword\">return</span> ans;\n    }\n    <span class=\"hljs-keyword\">if</span> (arr[row][col] == key) {\n      ans[<span class=\"hljs-number\">0</span>] = row;\n      ans[<span class=\"hljs-number\">1</span>] = col;\n      <span class=\"hljs-keyword\">return</span> ans;\n    }\n    <span class=\"hljs-comment\">// if the current element is greater than the given element then we move up</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[row][col] &gt; key) {\n      <span class=\"hljs-keyword\">return</span> find(arr, row - <span class=\"hljs-number\">1</span>, col, key);\n    }\n    <span class=\"hljs-comment\">// else we move right</span>\n    <span class=\"hljs-keyword\">return</span> find(arr, row, col + <span class=\"hljs-number\">1</span>, key);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Main method\n   *\n   * <span class=\"hljs-doctag\">@param</span> args Command line arguments\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// TODO Auto-generated method stub</span>\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    <span class=\"hljs-type\">int</span> arr[][];\n    <span class=\"hljs-type\">int</span> i, j, rows = sc.nextInt(), col = sc.nextInt();\n    arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[rows][col];\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; rows; i++) {\n      <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; col; j++) {\n        arr[i][j] = sc.nextInt();\n      }\n    }\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ele</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n    <span class=\"hljs-comment\">// we start from bottom left corner</span>\n    <span class=\"hljs-type\">int</span> ans[] = find(arr, rows - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, ele);\n    System.out.println(ans[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">&quot; &quot;</span> + ans[<span class=\"hljs-number\">1</span>]);\n    sc.close();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "Nishita Aggarwal",
      "email": "naggarwal97@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Hashir Hameed Niazi",
      "email": "56411583+HashirGJ8842@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
