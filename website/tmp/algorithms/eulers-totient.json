{
  "slug": "eulers-totient",
  "name": "Eulers Totient",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/eulers_totient.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/eulers_totient.py",
      "code": "<span class=\"hljs-comment\"># Eulers Totient function finds the number of relative primes of a number n from 1 to n</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">totient</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    is_prime = [<span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\n    totients = [i - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)]\n    primes = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, n + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">if</span> is_prime[i]:\n            primes.append(i)\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(primes)):\n            <span class=\"hljs-keyword\">if</span> i * primes[j] &gt;= n:\n                <span class=\"hljs-keyword\">break</span>\n            is_prime[i * primes[j]] = <span class=\"hljs-literal\">False</span>\n\n            <span class=\"hljs-keyword\">if</span> i % primes[j] == <span class=\"hljs-number\">0</span>:\n                totients[i * primes[j]] = totients[i] * primes[j]\n                <span class=\"hljs-keyword\">break</span>\n\n            totients[i * primes[j]] = totients[i] * (primes[j] - <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">return</span> totients\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_totient</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; n = 10\n    &gt;&gt;&gt; totient_calculation = totient(n)\n    &gt;&gt;&gt; for i in range(1, n):\n    ...     print(f&quot;{i} has {totient_calculation[i]} relative primes.&quot;)\n    1 has 0 relative primes.\n    2 has 1 relative primes.\n    3 has 2 relative primes.\n    4 has 2 relative primes.\n    5 has 4 relative primes.\n    6 has 2 relative primes.\n    7 has 6 relative primes.\n    8 has 4 relative primes.\n    9 has 6 relative primes.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">pass</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Maths/EulersTotient.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/EulersTotient.js",
      "code": "<span class=\"hljs-comment\">/*\n  Source:\n    https://en.wikipedia.org/wiki/Euler%27s_totient_function\n\n  EulersTotient(n) = n * product(1 - 1/p for all prime p dividing n)\n\n  Complexity:\n    O(sqrt(n))\n*/</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">EulersTotient</span> = (<span class=\"hljs-params\">n</span>) =&gt; {\n  <span class=\"hljs-comment\">// input: n: int</span>\n  <span class=\"hljs-comment\">// output: phi(n): count of numbers b/w 1 and n that are coprime to n</span>\n  <span class=\"hljs-keyword\">let</span> res = n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i * i &lt;= n; i++) {\n    <span class=\"hljs-keyword\">if</span> (n % i === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">while</span> (n % i === <span class=\"hljs-number\">0</span>) {\n        n = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(n / i)\n      }\n      <span class=\"hljs-comment\">// i is a prime diving n, multiply res by 1 - 1/i</span>\n      <span class=\"hljs-comment\">// res = res * (1 - 1/i) = res - (res / i)</span>\n      res = res - <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(res / i)\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">1</span>) {\n    res = res - <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(res / n)\n  }\n  <span class=\"hljs-keyword\">return</span> res\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-comment\">// EulersTotient(9) = 6 as 1, 2, 4, 5, 7, and 8 are coprime to 9</span>\n  <span class=\"hljs-comment\">// &gt; 6</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">EulersTotient</span>(<span class=\"hljs-number\">9</span>))\n  <span class=\"hljs-comment\">// EulersTotient(10) = 4 as 1, 3, 7, 9 are coprime to 10</span>\n  <span class=\"hljs-comment\">// &gt; 4</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">EulersTotient</span>(<span class=\"hljs-number\">10</span>))\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    },
    "dart": {
      "dir": "maths/eulers_totient.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/eulers_totient.dart",
      "code": "<span class=\"hljs-comment\">/* Source:\n *   https://en.wikipedia.org/wiki/Euler%27s_totient_function\n * \n * Description:\n *   eulers_totient(n) = n * product(1 - 1/p for all prime p dividing n)\n * \n * Time Complexity:\n *   O(sqrt(n))\n */</span>\n\n<span class=\"hljs-built_in\">int</span> eulers_totient(<span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-comment\">// Input: n: int</span>\n  <span class=\"hljs-comment\">// Output: phi(n): count of numbers b/w 1 and n that are coprime to n</span>\n  <span class=\"hljs-built_in\">int</span> res = n;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span>; i * i &lt;= n; i++) {\n    <span class=\"hljs-keyword\">if</span> (n % i == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">while</span> (n % i == <span class=\"hljs-number\">0</span>) {\n        n = n ~/ i;\n      }\n      <span class=\"hljs-comment\">// i is a prime dividing n, multiply res bu 1 - 1/i</span>\n      <span class=\"hljs-comment\">// res = res * (1 - 1/i) = res - (res/i)</span>\n      res = res - (res ~/ i);\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">1</span>) {\n    res = res - (res ~/ n);\n  }\n  <span class=\"hljs-keyword\">return</span> res;\n}\n\nmain() {\n  <span class=\"hljs-comment\">// eulers_totient(9) = 6 as 1, 2, 4, 5, 6, 7, 8 are coprime to 9</span>\n  <span class=\"hljs-comment\">// &gt; 6</span>\n  <span class=\"hljs-built_in\">print</span>(eulers_totient(<span class=\"hljs-number\">9</span>));\n  <span class=\"hljs-comment\">// eulers_totient(10) = 4 as 1, 3, 7, 9 are coprime to 10</span>\n  <span class=\"hljs-comment\">// &gt; 4</span>\n  <span class=\"hljs-built_in\">print</span>(eulers_totient(<span class=\"hljs-number\">10</span>));\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Abhijit Patil",
      "email": "abhi175668@gmail.com",
      "commits": 1
    },
    {
      "name": "utkarsh",
      "email": "ucponia@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
