{
  "slug": "heaps-algorithm-iterative",
  "name": "Heaps Algorithm Iterative",
  "categories": ["divideandconquer"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer/heaps_algorithm_iterative.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer/heaps_algorithm_iterative.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nHeap&#x27;s (iterative) algorithm returns the list of all permutations possible from a list.\nIt minimizes movement by generating each permutation from the previous one\nby swapping only two elements.\nMore information:\nhttps://en.wikipedia.org/wiki/Heap%27s_algorithm.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heaps</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Pure python implementation of the iterative Heap&#x27;s algorithm,\n    returning all permutations of a list.\n    &gt;&gt;&gt; heaps([])\n    [()]\n    &gt;&gt;&gt; heaps([0])\n    [(0,)]\n    &gt;&gt;&gt; heaps([-1, 1])\n    [(-1, 1), (1, -1)]\n    &gt;&gt;&gt; heaps([1, 2, 3])\n    [(1, 2, 3), (2, 1, 3), (3, 1, 2), (1, 3, 2), (2, 3, 1), (3, 2, 1)]\n    &gt;&gt;&gt; from itertools import permutations\n    &gt;&gt;&gt; sorted(heaps([1,2,3])) == sorted(permutations([1,2,3]))\n    True\n    &gt;&gt;&gt; all(sorted(heaps(x)) == sorted(permutations(x))\n    ...     for x in ([], [0], [-1, 1], [1, 2, 3]))\n    True\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) &lt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">tuple</span>(arr)]\n\n    res = []\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span>, arr: <span class=\"hljs-built_in\">list</span></span>):\n        c = [<span class=\"hljs-number\">0</span>] * n\n        res.append(<span class=\"hljs-built_in\">tuple</span>(arr))\n\n        i = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span> i &lt; n:\n            <span class=\"hljs-keyword\">if</span> c[i] &lt; i:\n                <span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\n                    arr[<span class=\"hljs-number\">0</span>], arr[i] = arr[i], arr[<span class=\"hljs-number\">0</span>]\n                <span class=\"hljs-keyword\">else</span>:\n                    arr[c[i]], arr[i] = arr[i], arr[c[i]]\n                res.append(<span class=\"hljs-built_in\">tuple</span>(arr))\n                c[i] += <span class=\"hljs-number\">1</span>\n                i = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">else</span>:\n                c[i] = <span class=\"hljs-number\">0</span>\n                i += <span class=\"hljs-number\">1</span>\n\n    generate(<span class=\"hljs-built_in\">len</span>(arr), arr)\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    arr = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-built_in\">print</span>(heaps(arr))\n"
    }
  },
  "contributors": [
    {
      "name": "Guillaume Rochedix",
      "email": "33205665+grochedix@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
