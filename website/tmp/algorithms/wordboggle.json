{
  "slug": "wordboggle",
  "name": "WordBoggle",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Misc/WordBoggle.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Misc/WordBoggle.java",
      "code": "<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WordBoggle</span> {\n\n  <span class=\"hljs-comment\">/**\n   * O(nm * 8^s + ws) time where n=width of boggle board, m=height of boggle board, s=length of\n   * longest word in string array, w= length of string array, 8 is due to 8 explorable neighbours\n   * O(nm + ws) space.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;String&gt; <span class=\"hljs-title function_\">boggleBoard</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>[][] board, String[] words)</span> {\n    <span class=\"hljs-type\">Trie</span> <span class=\"hljs-variable\">trie</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Trie</span>();\n    <span class=\"hljs-keyword\">for</span> (String word : words) trie.add(word);\n    Set&lt;String&gt; finalWords = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();\n    <span class=\"hljs-type\">boolean</span>[][] visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[board.length][board.length];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; board.length; i++)\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; board[i].length; j++)\n        explore(i, j, board, trie.root, visited, finalWords);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(finalWords);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// Testcase</span>\n    List&lt;String&gt; ans =\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(\n            Arrays.asList(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;boggle&quot;</span>, <span class=\"hljs-string\">&quot;this&quot;</span>, <span class=\"hljs-string\">&quot;NOTRE_PEATED&quot;</span>, <span class=\"hljs-string\">&quot;is&quot;</span>, <span class=\"hljs-string\">&quot;simple&quot;</span>, <span class=\"hljs-string\">&quot;board&quot;</span>));\n    <span class=\"hljs-keyword\">assert</span> (boggleBoard(\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">char</span>[][] {\n              {<span class=\"hljs-string\">&#x27;t&#x27;</span>, <span class=\"hljs-string\">&#x27;h&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;s&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;s&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>},\n              {<span class=\"hljs-string\">&#x27;s&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;m&#x27;</span>, <span class=\"hljs-string\">&#x27;p&#x27;</span>, <span class=\"hljs-string\">&#x27;l&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>},\n              {<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>},\n              {<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;o&#x27;</span>, <span class=\"hljs-string\">&#x27;g&#x27;</span>, <span class=\"hljs-string\">&#x27;g&#x27;</span>, <span class=\"hljs-string\">&#x27;l&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;o&#x27;</span>},\n              {<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;T&#x27;</span>, <span class=\"hljs-string\">&#x27;r&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>},\n              {<span class=\"hljs-string\">&#x27;R&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;P&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>},\n              {<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>},\n              {<span class=\"hljs-string\">&#x27;N&#x27;</span>, <span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27;T&#x27;</span>, <span class=\"hljs-string\">&#x27;R&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;_&#x27;</span>, <span class=\"hljs-string\">&#x27;P&#x27;</span>},\n              {<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;T&#x27;</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;E&#x27;</span>},\n            },\n            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[] {\n              <span class=\"hljs-string\">&quot;this&quot;</span>,\n              <span class=\"hljs-string\">&quot;is&quot;</span>,\n              <span class=\"hljs-string\">&quot;not&quot;</span>,\n              <span class=\"hljs-string\">&quot;a&quot;</span>,\n              <span class=\"hljs-string\">&quot;simple&quot;</span>,\n              <span class=\"hljs-string\">&quot;test&quot;</span>,\n              <span class=\"hljs-string\">&quot;boggle&quot;</span>,\n              <span class=\"hljs-string\">&quot;board&quot;</span>,\n              <span class=\"hljs-string\">&quot;REPEATED&quot;</span>,\n              <span class=\"hljs-string\">&quot;NOTRE_PEATED&quot;</span>,\n            })\n        .equals(ans));\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">explore</span><span class=\"hljs-params\">(\n      <span class=\"hljs-type\">int</span> i,\n      <span class=\"hljs-type\">int</span> j,\n      <span class=\"hljs-type\">char</span>[][] board,\n      TrieNode trieNode,\n      <span class=\"hljs-type\">boolean</span>[][] visited,\n      Set&lt;String&gt; finalWords)</span> {\n    <span class=\"hljs-keyword\">if</span> (visited[i][j]) <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">letter</span> <span class=\"hljs-operator\">=</span> board[i][j];\n    <span class=\"hljs-keyword\">if</span> (!trieNode.children.containsKey(letter)) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    visited[i][j] = <span class=\"hljs-literal\">true</span>;\n    trieNode = trieNode.children.get(letter);\n    <span class=\"hljs-keyword\">if</span> (trieNode.children.containsKey(<span class=\"hljs-string\">&#x27;*&#x27;</span>)) finalWords.add(trieNode.word);\n\n    List&lt;Integer[]&gt; neighbors = getNeighbors(i, j, board);\n    <span class=\"hljs-keyword\">for</span> (Integer[] neighbor : neighbors)\n      explore(neighbor[<span class=\"hljs-number\">0</span>], neighbor[<span class=\"hljs-number\">1</span>], board, trieNode, visited, finalWords);\n\n    visited[i][j] = <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Integer[]&gt; getNeighbors(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">char</span>[][] board) {\n    List&lt;Integer[]&gt; neighbors = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; j &gt; <span class=\"hljs-number\">0</span>) neighbors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[] {i - <span class=\"hljs-number\">1</span>, j - <span class=\"hljs-number\">1</span>});\n\n    <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; j &lt; board[<span class=\"hljs-number\">0</span>].length - <span class=\"hljs-number\">1</span>) neighbors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[] {i - <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>});\n\n    <span class=\"hljs-keyword\">if</span> (i &lt; board.length - <span class=\"hljs-number\">1</span> &amp;&amp; j &lt; board[<span class=\"hljs-number\">0</span>].length - <span class=\"hljs-number\">1</span>)\n      neighbors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[] {i + <span class=\"hljs-number\">1</span>, j + <span class=\"hljs-number\">1</span>});\n\n    <span class=\"hljs-keyword\">if</span> (i &lt; board.length - <span class=\"hljs-number\">1</span> &amp;&amp; j &gt; <span class=\"hljs-number\">0</span>) neighbors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[] {i + <span class=\"hljs-number\">1</span>, j - <span class=\"hljs-number\">1</span>});\n\n    <span class=\"hljs-keyword\">if</span> (i &gt; <span class=\"hljs-number\">0</span>) neighbors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[] {i - <span class=\"hljs-number\">1</span>, j});\n\n    <span class=\"hljs-keyword\">if</span> (i &lt; board.length - <span class=\"hljs-number\">1</span>) neighbors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[] {i + <span class=\"hljs-number\">1</span>, j});\n\n    <span class=\"hljs-keyword\">if</span> (j &gt; <span class=\"hljs-number\">0</span>) neighbors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[] {i, j - <span class=\"hljs-number\">1</span>});\n\n    <span class=\"hljs-keyword\">if</span> (j &lt; board[<span class=\"hljs-number\">0</span>].length - <span class=\"hljs-number\">1</span>) neighbors.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[] {i, j + <span class=\"hljs-number\">1</span>});\n\n    <span class=\"hljs-keyword\">return</span> neighbors;\n  }\n}\n\n<span class=\"hljs-comment\">// Trie used to optimize string search</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TrieNode</span> {\n\n  Map&lt;Character, TrieNode&gt; children = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n  <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">word</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Trie</span> {\n\n  TrieNode root;\n  <span class=\"hljs-type\">char</span> endSymbol;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Trie</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-built_in\">this</span>.root = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>();\n    <span class=\"hljs-built_in\">this</span>.endSymbol = <span class=\"hljs-string\">&#x27;*&#x27;</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(String str)</span> {\n    <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.root;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; str.length(); i++) {\n      <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">letter</span> <span class=\"hljs-operator\">=</span> str.charAt(i);\n      <span class=\"hljs-keyword\">if</span> (!node.children.containsKey(letter)) {\n        <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">newNode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>();\n        node.children.put(letter, newNode);\n      }\n      node = node.children.get(letter);\n    }\n    node.children.put(<span class=\"hljs-built_in\">this</span>.endSymbol, <span class=\"hljs-literal\">null</span>);\n    node.word = str;\n  }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
