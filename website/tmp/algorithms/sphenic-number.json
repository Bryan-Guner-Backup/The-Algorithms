{
  "slug": "sphenic-number",
  "name": "Sphenic Number",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "dart": {
      "dir": "maths/sphenic_number.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/sphenic_number.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt;.filled(<span class=\"hljs-number\">1001</span>, <span class=\"hljs-keyword\">true</span>, growable: <span class=\"hljs-keyword\">false</span>);\n<span class=\"hljs-keyword\">void</span> simple_seive() {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> p = <span class=\"hljs-number\">2</span>; p * p &lt; <span class=\"hljs-number\">1001</span>; p++) {\n    <span class=\"hljs-keyword\">if</span> (arr[p]) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = p * <span class=\"hljs-number\">2</span>; i &lt; <span class=\"hljs-number\">1001</span>; i = i + p) arr[i] = <span class=\"hljs-keyword\">false</span>;\n    }\n  }\n}\n\n<span class=\"hljs-built_in\">bool</span> sphenic_number(<span class=\"hljs-built_in\">int</span> N) {\n  <span class=\"hljs-keyword\">var</span> arr1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;.filled(<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>, growable: <span class=\"hljs-keyword\">false</span>);\n\n  <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= N; i++) {\n    <span class=\"hljs-keyword\">if</span> (N % i == <span class=\"hljs-number\">0</span> &amp;&amp; count &lt; <span class=\"hljs-number\">9</span>) {\n      count++;\n      arr1[j] = i;\n      j++;\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> (count == <span class=\"hljs-number\">8</span> &amp;&amp; arr[arr1[<span class=\"hljs-number\">0</span>]] &amp;&amp; arr[arr1[<span class=\"hljs-number\">1</span>]] &amp;&amp; arr[arr1[<span class=\"hljs-number\">2</span>]]);\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  simple_seive();\n  test(<span class=\"hljs-string\">&quot;Test Sphenic_no returns false for non-sphenic numbers&quot;</span>, () {\n    expect(sphenic_number(<span class=\"hljs-number\">0</span>), isFalse);\n    expect(sphenic_number(<span class=\"hljs-number\">371</span>), isFalse);\n    expect(sphenic_number(<span class=\"hljs-number\">509</span>), isFalse);\n    expect(sphenic_number(<span class=\"hljs-number\">501</span>), isFalse);\n  });\n  test(<span class=\"hljs-string\">&quot;Test sphenic_no returns true for sphenic numbers&quot;</span>, () {\n    expect(sphenic_number(<span class=\"hljs-number\">370</span>), isTrue);\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Neha Hasija",
      "email": "nehahasija9@gmail.com",
      "commits": 12
    }
  ],
  "explanationUrl": {}
}
