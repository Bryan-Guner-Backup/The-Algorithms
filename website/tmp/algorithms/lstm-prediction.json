{
  "slug": "lstm-prediction",
  "name": "Lstm Prediction",
  "categories": ["machinelearning", "lstm"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning/lstm/lstm_prediction.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning/lstm/lstm_prediction.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    Create a Long Short Term Memory (LSTM) network model\n    An LSTM is a type of Recurrent Neural Network (RNN) as discussed at:\n    * http://colah.github.io/posts/2015-08-Understanding-LSTMs\n    * https://en.wikipedia.org/wiki/Long_short-term_memory\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> MinMaxScaler\n<span class=\"hljs-keyword\">from</span> tensorflow.keras.layers <span class=\"hljs-keyword\">import</span> LSTM, Dense\n<span class=\"hljs-keyword\">from</span> tensorflow.keras.models <span class=\"hljs-keyword\">import</span> Sequential\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    First part of building a model is to get the data and prepare\n    it for our model. You can use any dataset for stock prediction\n    make sure you set the price column on line number 21.  Here we\n    use a dataset which have the price on 3rd column.\n    &quot;&quot;&quot;</span>\n    df = pd.read_csv(<span class=\"hljs-string\">&quot;sample_data.csv&quot;</span>, header=<span class=\"hljs-literal\">None</span>)\n    len_data = df.shape[:<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-comment\"># If you&#x27;re using some other dataset input the target column</span>\n    actual_data = df.iloc[:, <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">2</span>]\n    actual_data = actual_data.values.reshape(len_data, <span class=\"hljs-number\">1</span>)\n    actual_data = MinMaxScaler().fit_transform(actual_data)\n    look_back = <span class=\"hljs-number\">10</span>\n    forward_days = <span class=\"hljs-number\">5</span>\n    periods = <span class=\"hljs-number\">20</span>\n    division = len_data - periods * look_back\n    train_data = actual_data[:division]\n    test_data = actual_data[division - look_back :]\n    train_x, train_y = [], []\n    test_x, test_y = [], []\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(train_data) - forward_days - look_back + <span class=\"hljs-number\">1</span>):\n        train_x.append(train_data[i : i + look_back])\n        train_y.append(train_data[i + look_back : i + look_back + forward_days])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(test_data) - forward_days - look_back + <span class=\"hljs-number\">1</span>):\n        test_x.append(test_data[i : i + look_back])\n        test_y.append(test_data[i + look_back : i + look_back + forward_days])\n    x_train = np.array(train_x)\n    x_test = np.array(test_x)\n    y_train = np.array([<span class=\"hljs-built_in\">list</span>(i.ravel()) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> train_y])\n    y_test = np.array([<span class=\"hljs-built_in\">list</span>(i.ravel()) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> test_y])\n\n    model = Sequential()\n    model.add(LSTM(<span class=\"hljs-number\">128</span>, input_shape=(look_back, <span class=\"hljs-number\">1</span>), return_sequences=<span class=\"hljs-literal\">True</span>))\n    model.add(LSTM(<span class=\"hljs-number\">64</span>, input_shape=(<span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">1</span>)))\n    model.add(Dense(forward_days))\n    model.<span class=\"hljs-built_in\">compile</span>(loss=<span class=\"hljs-string\">&quot;mean_squared_error&quot;</span>, optimizer=<span class=\"hljs-string\">&quot;adam&quot;</span>)\n    history = model.fit(\n        x_train, y_train, epochs=<span class=\"hljs-number\">150</span>, verbose=<span class=\"hljs-number\">1</span>, shuffle=<span class=\"hljs-literal\">True</span>, batch_size=<span class=\"hljs-number\">4</span>\n    )\n    pred = model.predict(x_test)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Jeffin Francis",
      "email": "francisjeffin07@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
