{
  "slug": "reversestackusingrecursion",
  "name": "ReverseStackUsingRecursion",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/ReverseStackUsingRecursion.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/ReverseStackUsingRecursion.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-comment\">/* Program to reverse a Stack using Recursion*/</span>\n\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ReverseStackUsingRecursion</span> {\n\n  <span class=\"hljs-comment\">// Stack</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Stack&lt;Integer&gt; stack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\n\n  <span class=\"hljs-comment\">// Main function</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// To Create a Dummy Stack containing integers from 0-9</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n      stack.push(i);\n    }\n    System.out.println(<span class=\"hljs-string\">&quot;STACK&quot;</span>);\n\n    <span class=\"hljs-comment\">// To print that dummy Stack</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">9</span>; k &gt;= <span class=\"hljs-number\">0</span>; k--) {\n      System.out.println(k);\n    }\n\n    <span class=\"hljs-comment\">// Reverse Function called</span>\n    reverseUsingRecursion(stack);\n\n    System.out.println(<span class=\"hljs-string\">&quot;REVERSED STACK : &quot;</span>);\n    <span class=\"hljs-comment\">// To print reversed  stack</span>\n    <span class=\"hljs-keyword\">while</span> (!stack.isEmpty()) {\n      System.out.println(stack.pop());\n    }\n  }\n\n  <span class=\"hljs-comment\">// Function Used to reverse Stack Using Recursion</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reverseUsingRecursion</span><span class=\"hljs-params\">(Stack&lt;Integer&gt; stack)</span> {\n    <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) <span class=\"hljs-comment\">// If stack is empty then return</span>\n    {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-comment\">/* All items are stored in call stack until we reach the end*/</span>\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temptop</span> <span class=\"hljs-operator\">=</span> stack.peek();\n    stack.pop();\n    reverseUsingRecursion(stack); <span class=\"hljs-comment\">// Recursion call</span>\n    insertAtEnd(temptop); <span class=\"hljs-comment\">// Insert items held in call stack one by one into stack</span>\n  }\n\n  <span class=\"hljs-comment\">// Function used to insert element at the end of stack</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertAtEnd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> temptop)</span> {\n    <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n      stack.push(temptop); <span class=\"hljs-comment\">// If stack is empty push the element</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> stack.peek(); <span class=\"hljs-comment\">/* All the items are stored in call stack until we reach end*/</span>\n      stack.pop();\n\n      insertAtEnd(temptop); <span class=\"hljs-comment\">// Recursive call</span>\n\n      stack.push(temp);\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Kenneth Nero",
      "email": "kbn1798@rit.edu",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
