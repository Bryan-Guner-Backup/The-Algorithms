{
  "slug": "collatz-sequence",
  "name": "Collatz Sequence",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/collatz_sequence.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/collatz_sequence.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">collatz_sequence</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Collatz conjecture: start with any positive integer n. The next term is\n    obtained as follows:\n        If n term is even, the next term is: n / 2 .\n        If n is odd, the next term is: 3 * n + 1.\n\n    The conjecture states the sequence will always reach 1 for any starting value n.\n    Example:\n    &gt;&gt;&gt; collatz_sequence(2.1)\n    Traceback (most recent call last):\n        ...\n    Exception: Sequence only defined for natural numbers\n    &gt;&gt;&gt; collatz_sequence(0)\n    Traceback (most recent call last):\n        ...\n    Exception: Sequence only defined for natural numbers\n    &gt;&gt;&gt; collatz_sequence(43)  # doctest: +NORMALIZE_WHITESPACE\n    [43, 130, 65, 196, 98, 49, 148, 74, 37, 112, 56, 28, 14, 7,\n     22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> n &lt; <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Sequence only defined for natural numbers&quot;</span>)\n\n    sequence = [n]\n    <span class=\"hljs-keyword\">while</span> n != <span class=\"hljs-number\">1</span>:\n        n = <span class=\"hljs-number\">3</span> * n + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> n &amp; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> n // <span class=\"hljs-number\">2</span>\n        sequence.append(n)\n    <span class=\"hljs-keyword\">return</span> sequence\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    n = <span class=\"hljs-number\">43</span>\n    sequence = collatz_sequence(n)\n    <span class=\"hljs-built_in\">print</span>(sequence)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;collatz sequence from <span class=\"hljs-subst\">{n}</span> took <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(sequence)}</span> steps.&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "julia": {
      "dir": "src/math/collatz_sequence.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/collatz_sequence.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    collatz_sequence(n)\n\nCollatz conjecture: start with any positive integer n. The next term is\nobtained as follows:\n\tIf n term is even, the next term is: n / 2 .\n\tIf n is odd, the next term is: 3 * n + 1.\nThe conjecture states the sequence will always reach 1 for any starting value n.\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">function</span> collatz_sequence(n::N)<span class=\"hljs-keyword\">where</span> N&lt;:<span class=\"hljs-built_in\">Integer</span>\n\tsequence = [n]\n\t<span class=\"hljs-keyword\">while</span> n != <span class=\"hljs-number\">1</span>\n\t\tn = n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> ? <span class=\"hljs-number\">3</span> * n + <span class=\"hljs-number\">1</span> : div(n, <span class=\"hljs-number\">2</span>)\n\t\tappend!(sequence, n)\n\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">return</span> sequence\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Jean-Francois Baffier",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "Rratic@163.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "TheSuperNoob",
      "email": "larsthorland@gmail.com",
      "commits": 1
    },
    {
      "name": "ArjunwadkarAjay",
      "email": "41279300+ArjunwadkarAjay@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
