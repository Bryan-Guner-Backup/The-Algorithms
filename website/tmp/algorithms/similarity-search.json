{
  "slug": "similarity-search",
  "name": "Similarity Search",
  "categories": ["machinelearning"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning/similarity_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning/similarity_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nSimilarity Search : https://en.wikipedia.org/wiki/Similarity_search\nSimilarity search is a search algorithm for finding the nearest vector from\nvectors, used in natural language processing.\nIn this algorithm, it calculates distance with euclidean distance and\nreturns a list containing two data for each vector:\n    1. the nearest vector\n    2. distance between the vector and the nearest vector (float)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> math\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>, <span class=\"hljs-type\">Union</span>\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidean</span>(<span class=\"hljs-params\">input_a: np.ndarray, input_b: np.ndarray</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculates euclidean distance between two data.\n    :param input_a: ndarray of first vector.\n    :param input_b: ndarray of second vector.\n    :return: Euclidean distance of input_a and input_b. By using math.sqrt(),\n             result will be float.\n\n    &gt;&gt;&gt; euclidean(np.array([0]), np.array([1]))\n    1.0\n    &gt;&gt;&gt; euclidean(np.array([0, 1]), np.array([1, 1]))\n    1.0\n    &gt;&gt;&gt; euclidean(np.array([0, 0, 0]), np.array([0, 0, 1]))\n    1.0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> math.sqrt(<span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-built_in\">pow</span>(a - b, <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">for</span> a, b <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(input_a, input_b)))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">similarity_search</span>(<span class=\"hljs-params\">\n    dataset: np.ndarray, value_array: np.ndarray\n</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Union</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">float</span>], <span class=\"hljs-built_in\">float</span>]]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    :param dataset: Set containing the vectors. Should be ndarray.\n    :param value_array: vector/vectors we want to know the nearest vector from dataset.\n    :return: Result will be a list containing\n            1. the nearest vector\n            2. distance from the vector\n\n    &gt;&gt;&gt; dataset = np.array([[0], [1], [2]])\n    &gt;&gt;&gt; value_array = np.array([[0]])\n    &gt;&gt;&gt; similarity_search(dataset, value_array)\n    [[[0], 0.0]]\n\n    &gt;&gt;&gt; dataset = np.array([[0, 0], [1, 1], [2, 2]])\n    &gt;&gt;&gt; value_array = np.array([[0, 1]])\n    &gt;&gt;&gt; similarity_search(dataset, value_array)\n    [[[0, 0], 1.0]]\n\n    &gt;&gt;&gt; dataset = np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2]])\n    &gt;&gt;&gt; value_array = np.array([[0, 0, 1]])\n    &gt;&gt;&gt; similarity_search(dataset, value_array)\n    [[[0, 0, 0], 1.0]]\n\n    &gt;&gt;&gt; dataset = np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2]])\n    &gt;&gt;&gt; value_array = np.array([[0, 0, 0], [0, 0, 1]])\n    &gt;&gt;&gt; similarity_search(dataset, value_array)\n    [[[0, 0, 0], 0.0], [[0, 0, 0], 1.0]]\n\n    These are the errors that might occur:\n\n    1. If dimensions are different.\n    For example, dataset has 2d array and value_array has 1d array:\n    &gt;&gt;&gt; dataset = np.array([[1]])\n    &gt;&gt;&gt; value_array = np.array([1])\n    &gt;&gt;&gt; similarity_search(dataset, value_array)\n    Traceback (most recent call last):\n    ...\n    ValueError: Wrong input data&#x27;s dimensions... dataset : 2, value_array : 1\n\n    2. If data&#x27;s shapes are different.\n    For example, dataset has shape of (3, 2) and value_array has (2, 3).\n    We are expecting same shapes of two arrays, so it is wrong.\n    &gt;&gt;&gt; dataset = np.array([[0, 0], [1, 1], [2, 2]])\n    &gt;&gt;&gt; value_array = np.array([[0, 0, 0], [0, 0, 1]])\n    &gt;&gt;&gt; similarity_search(dataset, value_array)\n    Traceback (most recent call last):\n    ...\n    ValueError: Wrong input data&#x27;s shape... dataset : 2, value_array : 3\n\n    3. If data types are different.\n    When trying to compare, we are expecting same types so they should be same.\n    If not, it&#x27;ll come up with errors.\n    &gt;&gt;&gt; dataset = np.array([[0, 0], [1, 1], [2, 2]], dtype=np.float32)\n    &gt;&gt;&gt; value_array = np.array([[0, 0], [0, 1]], dtype=np.int32)\n    &gt;&gt;&gt; similarity_search(dataset, value_array)  # doctest: +NORMALIZE_WHITESPACE\n    Traceback (most recent call last):\n    ...\n    TypeError: Input data have different datatype...\n    dataset : float32, value_array : int32\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> dataset.ndim != value_array.ndim:\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;Wrong input data&#x27;s dimensions... dataset : <span class=\"hljs-subst\">{dataset.ndim}</span>, &quot;</span>\n            <span class=\"hljs-string\">f&quot;value_array : <span class=\"hljs-subst\">{value_array.ndim}</span>&quot;</span>\n        )\n\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">if</span> dataset.shape[<span class=\"hljs-number\">1</span>] != value_array.shape[<span class=\"hljs-number\">1</span>]:\n            <span class=\"hljs-keyword\">raise</span> ValueError(\n                <span class=\"hljs-string\">f&quot;Wrong input data&#x27;s shape... dataset : <span class=\"hljs-subst\">{dataset.shape[<span class=\"hljs-number\">1</span>]}</span>, &quot;</span>\n                <span class=\"hljs-string\">f&quot;value_array : <span class=\"hljs-subst\">{value_array.shape[<span class=\"hljs-number\">1</span>]}</span>&quot;</span>\n            )\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">if</span> dataset.ndim != value_array.ndim:\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Wrong shape&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> dataset.dtype != value_array.dtype:\n        <span class=\"hljs-keyword\">raise</span> TypeError(\n            <span class=\"hljs-string\">f&quot;Input data have different datatype... dataset : <span class=\"hljs-subst\">{dataset.dtype}</span>, &quot;</span>\n            <span class=\"hljs-string\">f&quot;value_array : <span class=\"hljs-subst\">{value_array.dtype}</span>&quot;</span>\n        )\n\n    answer = []\n\n    <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> value_array:\n        dist = euclidean(value, dataset[<span class=\"hljs-number\">0</span>])\n        vector = dataset[<span class=\"hljs-number\">0</span>].tolist()\n\n        <span class=\"hljs-keyword\">for</span> dataset_value <span class=\"hljs-keyword\">in</span> dataset[<span class=\"hljs-number\">1</span>:]:\n            temp_dist = euclidean(value, dataset_value)\n\n            <span class=\"hljs-keyword\">if</span> dist &gt; temp_dist:\n                dist = temp_dist\n                vector = dataset_value.tolist()\n\n        answer.append([vector, dist])\n\n    <span class=\"hljs-keyword\">return</span> answer\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Steve Kim",
      "email": "54872857+SteveKimSR@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
