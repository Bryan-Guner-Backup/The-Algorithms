{
  "slug": "subset-sum",
  "name": "Subset Sum",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "backtracking/subset_sum.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/subset_sum.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of the [Subset\n * Sum](https://en.wikipedia.org/wiki/Subset_sum_problem) problem.\n * @details\n * We are given an array and a sum value. The algorithm finds all\n * the subsets of that array with sum equal to the given sum and return such\n * subsets count. This approach will have exponential time complexity.\n * @author [Swastika Gupta](https://github.com/Swastyy)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n<span class=\"hljs-comment\">/**\n * @namespace Subsets\n * @brief Functions for the [Subset\n * Sum](https://en.wikipedia.org/wiki/Subset_sum_problem) problem.\n */</span>\n<span class=\"hljs-keyword\">namespace</span> subset_sum {\n<span class=\"hljs-comment\">/**\n * @brief The main function implements count of subsets\n * @param sum is the required sum of any subset\n * @param in_arr is the input array\n * @returns count of the number of subsets with required sum\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">number_of_subsets</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int32_t</span> sum, <span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; &amp;in_arr)</span> </span>{\n    <span class=\"hljs-type\">int32_t</span> nelement = in_arr.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-type\">uint64_t</span> count_of_subset = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; (<span class=\"hljs-number\">1</span> &lt;&lt; (nelement)); i++) {\n        <span class=\"hljs-type\">int32_t</span> check = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int32_t</span> j = <span class=\"hljs-number\">0</span>; j &lt; nelement; j++) {\n            <span class=\"hljs-keyword\">if</span> (i &amp; (<span class=\"hljs-number\">1</span> &lt;&lt; j)) {\n                check += (in_arr[j]);\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (check == sum) {\n            count_of_subset++;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> count_of_subset;\n}\n}  <span class=\"hljs-comment\">// namespace subset_sum</span>\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 1st test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; array1 = {<span class=\"hljs-number\">-7</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>};  <span class=\"hljs-comment\">// input array</span>\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subset_sum::<span class=\"hljs-built_in\">number_of_subsets</span>(<span class=\"hljs-number\">0</span>, array1) ==\n           <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// first argument in subset_sum function is the required sum and</span>\n                <span class=\"hljs-comment\">// second is the input array</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 2nd test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; array2 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subset_sum::<span class=\"hljs-built_in\">number_of_subsets</span>(<span class=\"hljs-number\">6</span>, array2) ==\n           <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">// here we are expecting 3 subsets which sum up to 6 i.e.</span>\n                <span class=\"hljs-comment\">// {(1,2,3),(1,2,3),(3,3)}</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 3rd test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; array3 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subset_sum::<span class=\"hljs-built_in\">number_of_subsets</span>(<span class=\"hljs-number\">1</span>, array3) ==\n           <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// here we are expecting 4 subsets which sum up to 1 i.e.</span>\n                <span class=\"hljs-comment\">// {(1),(1),(1),(1)}</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 4th test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4th test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; array4 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subset_sum::<span class=\"hljs-built_in\">number_of_subsets</span>(<span class=\"hljs-number\">6</span>, array4) ==\n           <span class=\"hljs-number\">6</span>);  <span class=\"hljs-comment\">// here we are expecting 6 subsets which sum up to 6 i.e.</span>\n                <span class=\"hljs-comment\">// {(3,3),(3,3),(3,3),(3,3),(3,3),(3,3)}</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// Test 5</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;5th test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int32_t</span>&gt; array5 = {};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subset_sum::<span class=\"hljs-built_in\">number_of_subsets</span>(<span class=\"hljs-number\">6</span>, array5) ==\n           <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// here we are expecting 0 subsets which sum up to 6 i.e. we</span>\n                <span class=\"hljs-comment\">// cannot select anything from an empty array</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "DynamicProgramming/SubsetSum.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/SubsetSum.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SubsetSum</span> {\n\n  <span class=\"hljs-comment\">/** Driver Code */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">int</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">34</span>};\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">subsetSum</span><span class=\"hljs-params\">(arr, <span class=\"hljs-number\">64</span>)</span>; <span class=\"hljs-comment\">/* 4 + 10 + 15 + 34 = 64 */</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">subsetSum</span><span class=\"hljs-params\">(arr, <span class=\"hljs-number\">99</span>)</span>; <span class=\"hljs-comment\">/* 50 + 15 + 34 = 99 */</span>\n    <span class=\"hljs-keyword\">assert</span> !subsetSum(arr, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">assert</span> !subsetSum(arr, <span class=\"hljs-number\">66</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Test if a set of integers contains a subset that sum to a given integer.\n   *\n   * <span class=\"hljs-doctag\">@param</span> arr the array contains integers.\n   * <span class=\"hljs-doctag\">@param</span> sum target sum of subset.\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if subset exists, otherwise {<span class=\"hljs-doctag\">@code</span> false}.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">subsetSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> sum)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> arr.length;\n    <span class=\"hljs-type\">boolean</span>[][] isSum = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[n + <span class=\"hljs-number\">2</span>][sum + <span class=\"hljs-number\">1</span>];\n\n    isSum[n + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= sum; i++) {\n      isSum[n + <span class=\"hljs-number\">1</span>][i] = <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> n; i &gt; <span class=\"hljs-number\">0</span>; i--) {\n      isSum[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-literal\">true</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt;= arr[i - <span class=\"hljs-number\">1</span>] - <span class=\"hljs-number\">1</span>; j++) {\n        <span class=\"hljs-keyword\">if</span> (j &lt;= sum) {\n          isSum[i][j] = isSum[i + <span class=\"hljs-number\">1</span>][j];\n        }\n      }\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> arr[i - <span class=\"hljs-number\">1</span>]; j &lt;= sum; j++) {\n        isSum[i][j] = (isSum[i + <span class=\"hljs-number\">1</span>][j] || isSum[i + <span class=\"hljs-number\">1</span>][j - arr[i - <span class=\"hljs-number\">1</span>]]);\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> isSum[<span class=\"hljs-number\">1</span>][sum];\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jesse Adams",
      "email": "jda170001@utdallas.edu",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
