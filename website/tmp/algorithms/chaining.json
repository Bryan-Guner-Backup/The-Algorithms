{
  "slug": "chaining",
  "name": "Chaining",
  "categories": ["hashing"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "hashing/chaining.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/hashing/chaining.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file chaining.cpp\n * @author [vasutomar](https://github.com/vasutomar)\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @brief Implementation of [hash\n * chains](https://en.wikipedia.org/wiki/Hash_chain).\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Chain class with a given modulus\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">hash_chain</span> {\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Define a linked node\n     */</span>\n    <span class=\"hljs-keyword\">using</span> Node = <span class=\"hljs-keyword\">struct</span> Node {\n        <span class=\"hljs-type\">int</span> data{};                         <span class=\"hljs-comment\">///&lt; data stored in the node</span>\n        std::shared_ptr&lt;<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span>&gt; next;  <span class=\"hljs-comment\">///&lt; pointer to the next node</span>\n    };\n\n    std::vector&lt;std::shared_ptr&lt;Node&gt;&gt; head;  <span class=\"hljs-comment\">///&lt; array of nodes</span>\n    <span class=\"hljs-type\">int</span> _mod;                                        <span class=\"hljs-comment\">///&lt; modulus of the class</span>\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Construct a new chain object\n     *\n     * @param mod modulus of the chain\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">hash_chain</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> mod)</span> : _mod(mod) {</span>\n        <span class=\"hljs-keyword\">while</span> (mod--) head.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-literal\">nullptr</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief create and add a new node with a give value and at a given height\n     *\n     * @param x value at the new node\n     * @param h height of the node\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> h)</span> </span>{\n        std::shared_ptr&lt;Node&gt; curr;\n        <span class=\"hljs-function\">std::shared_ptr&lt;Node&gt; <span class=\"hljs-title\">temp</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">new</span> Node)</span></span>;\n        temp-&gt;data = x;\n        temp-&gt;next = <span class=\"hljs-literal\">nullptr</span>;\n        <span class=\"hljs-keyword\">if</span> (!head[h]) {\n            head[h] = temp;\n            curr = head[h];\n        } <span class=\"hljs-keyword\">else</span> {\n            curr = head[h];\n            <span class=\"hljs-keyword\">while</span> (curr-&gt;next) curr = curr-&gt;next;\n            curr-&gt;next = temp;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Display the chain\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> </span>{\n        std::shared_ptr&lt;Node&gt; temp = <span class=\"hljs-literal\">nullptr</span>;\n        <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; _mod; i++) {\n            <span class=\"hljs-keyword\">if</span> (!head[i]) {\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Key &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot; is empty&quot;</span> &lt;&lt; std::endl;\n            } <span class=\"hljs-keyword\">else</span> {\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Key &quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot; has values = &quot;</span>;\n                temp = head[i];\n                <span class=\"hljs-keyword\">while</span> (temp-&gt;next) {\n                    std::cout &lt;&lt; temp-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n                    temp = temp-&gt;next;\n                }\n                std::cout &lt;&lt; temp-&gt;data;\n                std::cout &lt;&lt; std::endl;\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Compute the hash of a value for current chain\n     *\n     * @param x value to compute modulus of\n     * @return modulus of `x`\n     * @note declared as a\n     * [`virtual`](https://en.cppreference.com/w/cpp/language/virtual) so that\n     * custom implementations of the class can modify the hash function.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">virtual</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> x % _mod; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Find if a value and corresponding hash exist\n     *\n     * @param x value to search for\n     * @param h corresponding hash key\n     * @returns `true` if element found\n     * @returns `false` if element not found\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> h)</span> <span class=\"hljs-keyword\">const</span> </span>{\n        std::shared_ptr&lt;Node&gt; temp = head[h];\n        <span class=\"hljs-keyword\">if</span> (!head[h]) {\n            <span class=\"hljs-comment\">// index does not exist!</span>\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Element not found&quot;</span>;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n\n        <span class=\"hljs-comment\">// scan for data value</span>\n        <span class=\"hljs-keyword\">while</span> (temp-&gt;data != x &amp;&amp; temp-&gt;next) temp = temp-&gt;next;\n\n        <span class=\"hljs-keyword\">if</span> (temp-&gt;next) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Element found&quot;</span>;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-comment\">// implicit else condition</span>\n        <span class=\"hljs-comment\">// i.e., temp-&gt;next == nullptr</span>\n        <span class=\"hljs-keyword\">if</span> (temp-&gt;data == x) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Element found&quot;</span>;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-comment\">// further implicit else condition</span>\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Element not found&quot;</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n};\n\n<span class=\"hljs-comment\">/** Main function\n * @returns `0` always\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>, x = <span class=\"hljs-number\">0</span>, mod = <span class=\"hljs-number\">0</span>, h = <span class=\"hljs-number\">0</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the size of Hash Table. = &quot;</span>;\n    std::cin &gt;&gt; mod;\n\n    <span class=\"hljs-function\">hash_chain <span class=\"hljs-title\">mychain</span><span class=\"hljs-params\">(mod)</span></span>;\n\n    <span class=\"hljs-type\">bool</span> loop = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">while</span> (loop) {\n        std::cout &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;PLEASE CHOOSE -&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1. Add element.&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2. Find element.&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3. Generate Hash.&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4. Display Hash table.&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;5. Exit.&quot;</span> &lt;&lt; std::endl;\n        std::cin &gt;&gt; c;\n        <span class=\"hljs-built_in\">switch</span> (c) {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter element to add = &quot;</span>;\n                std::cin &gt;&gt; x;\n                h = mychain.<span class=\"hljs-built_in\">hash</span>(x);\n                h = std::<span class=\"hljs-built_in\">abs</span>(h);\n                mychain.<span class=\"hljs-built_in\">add</span>(x, h);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter element to search = &quot;</span>;\n                std::cin &gt;&gt; x;\n                h = mychain.<span class=\"hljs-built_in\">hash</span>(x);\n                mychain.<span class=\"hljs-built_in\">find</span>(x, h);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter element to generate hash = &quot;</span>;\n                std::cin &gt;&gt; x;\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hash of &quot;</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot; is = &quot;</span> &lt;&lt; mychain.<span class=\"hljs-built_in\">hash</span>(x);\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n                mychain.<span class=\"hljs-built_in\">display</span>();\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">default</span>:\n                loop = <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">break</span>;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n    <span class=\"hljs-comment\">/*add(1,&amp;head1);\n    add(2,&amp;head1);\n    add(3,&amp;head2);\n    add(5,&amp;head1);\n    display(&amp;head1);\n    display(&amp;head2);*/</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Vasu Tomar",
      "email": "vasutomar26@gmail.com",
      "commits": 3
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}
