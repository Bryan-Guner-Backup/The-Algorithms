{
  "slug": "markov-chain",
  "name": "Markov Chain",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/markov_chain.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/markov_chain.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> random\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MarkovChainGraphUndirectedUnweighted</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Undirected Unweighted Graph for running Markov Chain Algorithm\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.connections = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_node</span>(<span class=\"hljs-params\">self, node: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.connections[node] = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_transition_probability</span>(<span class=\"hljs-params\">\n        self, node1: <span class=\"hljs-built_in\">str</span>, node2: <span class=\"hljs-built_in\">str</span>, probability: <span class=\"hljs-built_in\">float</span>\n    </span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> node1 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.connections:\n            self.add_node(node1)\n        <span class=\"hljs-keyword\">if</span> node2 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.connections:\n            self.add_node(node2)\n        self.connections[node1][node2] = probability\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_nodes</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>(self.connections)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">transition</span>(<span class=\"hljs-params\">self, node: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        current_probability = <span class=\"hljs-number\">0</span>\n        random_value = random()\n\n        <span class=\"hljs-keyword\">for</span> dest <span class=\"hljs-keyword\">in</span> self.connections[node]:\n            current_probability += self.connections[node][dest]\n            <span class=\"hljs-keyword\">if</span> current_probability &gt; random_value:\n                <span class=\"hljs-keyword\">return</span> dest\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_transitions</span>(<span class=\"hljs-params\">\n    start: <span class=\"hljs-built_in\">str</span>, transitions: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">float</span>]], steps: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Running Markov Chain algorithm and calculating the number of times each node is\n    visited\n\n    &gt;&gt;&gt; transitions = [\n    ... (&#x27;a&#x27;, &#x27;a&#x27;, 0.9),\n    ... (&#x27;a&#x27;, &#x27;b&#x27;, 0.075),\n    ... (&#x27;a&#x27;, &#x27;c&#x27;, 0.025),\n    ... (&#x27;b&#x27;, &#x27;a&#x27;, 0.15),\n    ... (&#x27;b&#x27;, &#x27;b&#x27;, 0.8),\n    ... (&#x27;b&#x27;, &#x27;c&#x27;, 0.05),\n    ... (&#x27;c&#x27;, &#x27;a&#x27;, 0.25),\n    ... (&#x27;c&#x27;, &#x27;b&#x27;, 0.25),\n    ... (&#x27;c&#x27;, &#x27;c&#x27;, 0.5)\n    ... ]\n\n    &gt;&gt;&gt; result = get_transitions(&#x27;a&#x27;, transitions, 5000)\n\n    &gt;&gt;&gt; result[&#x27;a&#x27;] &gt; result[&#x27;b&#x27;] &gt; result[&#x27;c&#x27;]\n    True\n    &quot;&quot;&quot;</span>\n\n    graph = MarkovChainGraphUndirectedUnweighted()\n\n    <span class=\"hljs-keyword\">for</span> node1, node2, probability <span class=\"hljs-keyword\">in</span> transitions:\n        graph.add_transition_probability(node1, node2, probability)\n\n    visited = Counter(graph.get_nodes())\n    node = start\n\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(steps):\n        node = graph.transition(node)\n        visited[node] += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> visited\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
