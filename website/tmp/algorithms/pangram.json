{
  "slug": "pangram",
  "name": "Pangram",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "strings/Pangram.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/strings/Pangram.java",
      "code": "<span class=\"hljs-keyword\">package</span> strings;\n\n<span class=\"hljs-comment\">/** Wikipedia: https://en.wikipedia.org/wiki/Pangram */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pangram</span> {\n\n  <span class=\"hljs-comment\">/** Driver Code */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isPangram</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;The quick brown fox jumps over the lazy dog&quot;</span>)</span>;\n    <span class=\"hljs-keyword\">assert</span> !isPangram(<span class=\"hljs-string\">&quot;The quick brown fox jumps over the azy dog&quot;</span>); <span class=\"hljs-comment\">/* not exists l character */</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if a string is a pangram string or not\n   *\n   * <span class=\"hljs-doctag\">@param</span> s string to check\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if given string is pangram, otherwise {<span class=\"hljs-doctag\">@code</span> false}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPangram</span><span class=\"hljs-params\">(String s)</span> {\n    <span class=\"hljs-type\">boolean</span>[] marked = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">boolean</span>[<span class=\"hljs-number\">26</span>]; <span class=\"hljs-comment\">/* by default all letters don&#x27;t exists */</span>\n    <span class=\"hljs-type\">char</span>[] values = s.toCharArray();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> value : values) {\n      <span class=\"hljs-keyword\">if</span> (Character.isLetter(value)) {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> Character.isUpperCase(value) ? value - <span class=\"hljs-string\">&#x27;A&#x27;</span> : value - <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n        marked[index] = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">/* mark current character exists */</span>\n      }\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">boolean</span> b : marked) {\n      <span class=\"hljs-keyword\">if</span> (!b) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
