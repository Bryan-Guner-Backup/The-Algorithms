{
  "slug": "porta-cipher",
  "name": "Porta Cipher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/porta_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/porta_cipher.py",
      "code": "alphabet = {\n    <span class=\"hljs-string\">&quot;A&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;NOPQRSTUVWXYZ&quot;</span>),\n    <span class=\"hljs-string\">&quot;B&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;NOPQRSTUVWXYZ&quot;</span>),\n    <span class=\"hljs-string\">&quot;C&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;ZNOPQRSTUVWXY&quot;</span>),\n    <span class=\"hljs-string\">&quot;D&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;ZNOPQRSTUVWXY&quot;</span>),\n    <span class=\"hljs-string\">&quot;E&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;YZNOPQRSTUVWX&quot;</span>),\n    <span class=\"hljs-string\">&quot;F&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;YZNOPQRSTUVWX&quot;</span>),\n    <span class=\"hljs-string\">&quot;G&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;XYZNOPQRSTUVW&quot;</span>),\n    <span class=\"hljs-string\">&quot;H&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;XYZNOPQRSTUVW&quot;</span>),\n    <span class=\"hljs-string\">&quot;I&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;WXYZNOPQRSTUV&quot;</span>),\n    <span class=\"hljs-string\">&quot;J&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;WXYZNOPQRSTUV&quot;</span>),\n    <span class=\"hljs-string\">&quot;K&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;VWXYZNOPQRSTU&quot;</span>),\n    <span class=\"hljs-string\">&quot;L&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;VWXYZNOPQRSTU&quot;</span>),\n    <span class=\"hljs-string\">&quot;M&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;UVWXYZNOPQRST&quot;</span>),\n    <span class=\"hljs-string\">&quot;N&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;UVWXYZNOPQRST&quot;</span>),\n    <span class=\"hljs-string\">&quot;O&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;TUVWXYZNOPQRS&quot;</span>),\n    <span class=\"hljs-string\">&quot;P&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;TUVWXYZNOPQRS&quot;</span>),\n    <span class=\"hljs-string\">&quot;Q&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;STUVWXYZNOPQR&quot;</span>),\n    <span class=\"hljs-string\">&quot;R&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;STUVWXYZNOPQR&quot;</span>),\n    <span class=\"hljs-string\">&quot;S&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;RSTUVWXYZNOPQ&quot;</span>),\n    <span class=\"hljs-string\">&quot;T&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;RSTUVWXYZNOPQ&quot;</span>),\n    <span class=\"hljs-string\">&quot;U&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;QRSTUVWXYZNOP&quot;</span>),\n    <span class=\"hljs-string\">&quot;V&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;QRSTUVWXYZNOP&quot;</span>),\n    <span class=\"hljs-string\">&quot;W&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;PQRSTUVWXYZNO&quot;</span>),\n    <span class=\"hljs-string\">&quot;X&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;PQRSTUVWXYZNO&quot;</span>),\n    <span class=\"hljs-string\">&quot;Y&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;OPQRSTUVWXYZN&quot;</span>),\n    <span class=\"hljs-string\">&quot;Z&quot;</span>: (<span class=\"hljs-string\">&quot;ABCDEFGHIJKLM&quot;</span>, <span class=\"hljs-string\">&quot;OPQRSTUVWXYZN&quot;</span>),\n}\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_table</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; generate_table(&#x27;marvin&#x27;)  # doctest: +NORMALIZE_WHITESPACE\n    [(&#x27;ABCDEFGHIJKLM&#x27;, &#x27;UVWXYZNOPQRST&#x27;), (&#x27;ABCDEFGHIJKLM&#x27;, &#x27;NOPQRSTUVWXYZ&#x27;),\n     (&#x27;ABCDEFGHIJKLM&#x27;, &#x27;STUVWXYZNOPQR&#x27;), (&#x27;ABCDEFGHIJKLM&#x27;, &#x27;QRSTUVWXYZNOP&#x27;),\n     (&#x27;ABCDEFGHIJKLM&#x27;, &#x27;WXYZNOPQRSTUV&#x27;), (&#x27;ABCDEFGHIJKLM&#x27;, &#x27;UVWXYZNOPQRST&#x27;)]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> [alphabet[char] <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> key.upper()]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encrypt</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span>, words: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; encrypt(&#x27;marvin&#x27;, &#x27;jessica&#x27;)\n    &#x27;QRACRWU&#x27;\n    &quot;&quot;&quot;</span>\n    cipher = <span class=\"hljs-string\">&quot;&quot;</span>\n    count = <span class=\"hljs-number\">0</span>\n    table = generate_table(key)\n    <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> words.upper():\n        cipher += get_opponent(table[count], char)\n        count = (count + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-built_in\">len</span>(table)\n    <span class=\"hljs-keyword\">return</span> cipher\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span>, words: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; decrypt(&#x27;marvin&#x27;, &#x27;QRACRWU&#x27;)\n    &#x27;JESSICA&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> encrypt(key, words)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_position</span>(<span class=\"hljs-params\">table: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>], char: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; get_position(generate_table(&#x27;marvin&#x27;)[0], &#x27;M&#x27;)\n    (0, 12)\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># `char` is either in the 0th row or the 1st row</span>\n    row = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">in</span> table[<span class=\"hljs-number\">0</span>] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1</span>\n    col = table[row].index(char)\n    <span class=\"hljs-keyword\">return</span> row, col\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_opponent</span>(<span class=\"hljs-params\">table: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>], char: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; get_opponent(generate_table(&#x27;marvin&#x27;)[0], &#x27;M&#x27;)\n    &#x27;T&#x27;\n    &quot;&quot;&quot;</span>\n    row, col = get_position(table, char.upper())\n    <span class=\"hljs-keyword\">if</span> row == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> table[<span class=\"hljs-number\">0</span>][col]\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> table[<span class=\"hljs-number\">1</span>][col] <span class=\"hljs-keyword\">if</span> row == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> char\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()  <span class=\"hljs-comment\"># Fist ensure that all our tests are passing...</span>\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Demo:\n\n    Enter key: marvin\n    Enter text to encrypt: jessica\n    Encrypted: QRACRWU\n    Decrypted with key: JESSICA\n    &quot;&quot;&quot;</span>\n    key = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter key: &quot;</span>).strip()\n    text = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter text to encrypt: &quot;</span>).strip()\n    cipher_text = encrypt(key, text)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Encrypted: <span class=\"hljs-subst\">{cipher_text}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Decrypted with key: <span class=\"hljs-subst\">{decrypt(key, cipher_text)}</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Marvin M. Michum",
      "email": "11682032+mrvnmchm@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
