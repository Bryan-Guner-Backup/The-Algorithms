{
  "slug": "least-recently-used",
  "name": "Least Recently Used",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/least_recently_used.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/least_recently_used.py",
      "code": "<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">from</span> abc <span class=\"hljs-keyword\">import</span> abstractmethod\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> deque\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LRUCache</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Page Replacement Algorithm, Least Recently Used (LRU) Caching.&quot;&quot;&quot;</span>\n\n    dq_store = <span class=\"hljs-built_in\">object</span>()  <span class=\"hljs-comment\"># Cache store of keys</span>\n    key_reference_map = <span class=\"hljs-built_in\">object</span>()  <span class=\"hljs-comment\"># References of the keys in cache</span>\n    _MAX_CAPACITY: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">10</span>  <span class=\"hljs-comment\"># Maximum capacity of cache</span>\n\n<span class=\"hljs-meta\">    @abstractmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, n: <span class=\"hljs-built_in\">int</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;Creates an empty store and map for the keys.\n        The LRUCache is set the size n.\n        &quot;&quot;&quot;</span>\n        self.dq_store = deque()\n        self.key_reference_map = <span class=\"hljs-built_in\">set</span>()\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> n:\n            LRUCache._MAX_CAPACITY = sys.maxsize\n        <span class=\"hljs-keyword\">elif</span> n &lt; <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;n should be an integer greater than 0.&quot;</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            LRUCache._MAX_CAPACITY = n\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">refer</span>(<span class=\"hljs-params\">self, x</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Looks for a page in the cache store and adds reference to the set.\n        Remove the least recently used key if the store is full.\n        Update store to reflect recent access.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> x <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.key_reference_map:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.dq_store) == LRUCache._MAX_CAPACITY:\n                last_element = self.dq_store.pop()\n                self.key_reference_map.remove(last_element)\n        <span class=\"hljs-keyword\">else</span>:\n            index_remove = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">for</span> idx, key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.dq_store):\n                <span class=\"hljs-keyword\">if</span> key == x:\n                    index_remove = idx\n                    <span class=\"hljs-keyword\">break</span>\n            self.dq_store.remove(index_remove)\n\n        self.dq_store.appendleft(x)\n        self.key_reference_map.add(x)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">display</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Prints all the elements in the store.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> self.dq_store:\n            <span class=\"hljs-built_in\">print</span>(k)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    lru_cache = LRUCache(<span class=\"hljs-number\">4</span>)\n    lru_cache.refer(<span class=\"hljs-number\">1</span>)\n    lru_cache.refer(<span class=\"hljs-number\">2</span>)\n    lru_cache.refer(<span class=\"hljs-number\">3</span>)\n    lru_cache.refer(<span class=\"hljs-number\">1</span>)\n    lru_cache.refer(<span class=\"hljs-number\">4</span>)\n    lru_cache.refer(<span class=\"hljs-number\">5</span>)\n    lru_cache.display()\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Phileas",
      "email": "phileas.hocquard@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
