{
  "slug": "boardpath",
  "name": "BoardPath",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DynamicProgramming/BoardPath.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/BoardPath.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n<span class=\"hljs-comment\">/*\n* this is an important Algo in which\n* we have starting and ending of board and we have to reach\n* we have to count no. of ways\n* that help to reach end point i.e number by rolling dice\n* which have 1 to 6 digits\n\nTest Case:\nhere target is 10\n\nint n=10;\n\t\tstartAlgo();\n\t\tSystem.out.println(bpR(0,n));\n\t\tSystem.out.println(endAlgo()+&quot;ms&quot;);\n\t\tint[] strg=new int [n+1];\n\t\tstartAlgo();\n\t\tSystem.out.println(bpRS(0,n,strg));\n\t\tSystem.out.println(endAlgo()+&quot;ms&quot;);\n\t\tstartAlgo();\n\t\tSystem.out.println(bpIS(0,n,strg));\n\t\tSystem.out.println(endAlgo()+&quot;ms&quot;);\n\n\n\n*/</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BoardPath</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> startTime;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> endTime;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">startAlgo</span><span class=\"hljs-params\">()</span> {\n    startTime = System.currentTimeMillis();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">endAlgo</span><span class=\"hljs-params\">()</span> {\n    endTime = System.currentTimeMillis();\n    <span class=\"hljs-keyword\">return</span> endTime - startTime;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bpR</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> start, <span class=\"hljs-type\">int</span> end)</span> {\n    <span class=\"hljs-keyword\">if</span> (start == end) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (start &gt; end) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dice</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; dice &lt;= <span class=\"hljs-number\">6</span>; dice++) {\n      count += bpR(start + dice, end);\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bpRS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> curr, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-type\">int</span> strg[])</span> {\n    <span class=\"hljs-keyword\">if</span> (curr == end) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (curr &gt; end) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> (strg[curr] != <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> strg[curr];\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dice</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; dice &lt;= <span class=\"hljs-number\">6</span>; dice++) {\n      count += bpRS(curr + dice, end, strg);\n    }\n    strg[curr] = count;\n    <span class=\"hljs-keyword\">return</span> count;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">bpIS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> curr, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-type\">int</span>[] strg)</span> {\n    strg[end] = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> end - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dice</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; dice &lt;= <span class=\"hljs-number\">6</span> &amp;&amp; dice + i &lt; strg.length; dice++) {\n        count += strg[i + dice];\n      }\n      strg[i] = count;\n    }\n    <span class=\"hljs-keyword\">return</span> strg[<span class=\"hljs-number\">0</span>];\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ritik2604",
      "email": "49342895+Ritik2604@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
