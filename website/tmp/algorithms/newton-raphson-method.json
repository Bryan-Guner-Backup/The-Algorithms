{
  "slug": "newton-raphson-method",
  "name": "Newton Raphson Method",
  "categories": ["numericalmethods"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods/newton_raphson_method.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/newton_raphson_method.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief Solve the equation \\f$f(x)=0\\f$ using [Newton-Raphson\n * method](https://en.wikipedia.org/wiki/Newton%27s_method) for both real and\n * complex solutions\n *\n * The \\f$(i+1)^\\text{th}\\f$ approximation is given by:\n * \\f[\n * x_{i+1} = x_i - \\frac{f(x_i)}{f&#x27;(x_i)}\n * \\f]\n *\n * \\author [Krishna Vedala](https://github.com/kvedala)\n * \\see bisection_method.cpp, false_position.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits&gt;</span></span>\n\n<span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-type\">double</span> EPSILON = <span class=\"hljs-number\">1e-10</span>;              <span class=\"hljs-comment\">///&lt; system accuracy limit</span>\n<span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-type\">int16_t</span> MAX_ITERATIONS = INT16_MAX;  <span class=\"hljs-comment\">///&lt; Maximum number of iterations</span>\n\n<span class=\"hljs-comment\">/** define \\f$f(x)\\f$ to find root for.\n * Currently defined as:\n * \\f[\n * f(x) = x^3 - 4x - 9\n * \\f]\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title\">eq</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> i)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (std::<span class=\"hljs-built_in\">pow</span>(i, <span class=\"hljs-number\">3</span>) - (<span class=\"hljs-number\">4</span> * i) - <span class=\"hljs-number\">9</span>);  <span class=\"hljs-comment\">// original equation</span>\n}\n\n<span class=\"hljs-comment\">/** define the derivative function \\f$f&#x27;(x)\\f$\n * For the current problem, it is:\n * \\f[\n * f&#x27;(x) = 3x^2 - 4\n * \\f]\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title\">eq_der</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> i)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> ((<span class=\"hljs-number\">3</span> * std::<span class=\"hljs-built_in\">pow</span>(i, <span class=\"hljs-number\">2</span>)) - <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// derivative of equation</span>\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));  <span class=\"hljs-comment\">// initialize randomizer</span>\n\n    <span class=\"hljs-type\">double</span> z = NAN, c = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">100</span>, m = NAN, n = NAN;\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nInitial approximation: &quot;</span> &lt;&lt; c;\n\n    <span class=\"hljs-comment\">// start iterations</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; MAX_ITERATIONS; i++) {\n        m = <span class=\"hljs-built_in\">eq</span>(c);\n        n = <span class=\"hljs-built_in\">eq_der</span>(c);\n\n        z = c - (m / n);\n        c = z;\n\n        <span class=\"hljs-keyword\">if</span> (std::<span class=\"hljs-built_in\">abs</span>(m) &lt; EPSILON) {  <span class=\"hljs-comment\">// stoping criteria</span>\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nRoot: &quot;</span> &lt;&lt; z &lt;&lt; <span class=\"hljs-string\">&quot;\\t\\tSteps: &quot;</span> &lt;&lt; i &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shubham garg",
      "email": "42842217+shubhamgarg2000@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "phaluch",
      "email": "43946597+phaluch@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Syed Haseeb Shah",
      "email": "yesiamhasi@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
