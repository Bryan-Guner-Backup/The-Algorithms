{
  "slug": "find-max-recursion",
  "name": "Find Max Recursion",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/find_max_recursion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/find_max_recursion.py",
      "code": "<span class=\"hljs-comment\"># Divide and Conquer algorithm</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_max</span>(<span class=\"hljs-params\">nums, left, right</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    find max value in list\n    :param nums: contains elements\n    :param left: index of first element\n    :param right: index of last element\n    :return: max in nums\n\n    &gt;&gt;&gt; nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10]\n    &gt;&gt;&gt; find_max(nums, 0, len(nums) - 1) == max(nums)\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> left == right:\n        <span class=\"hljs-keyword\">return</span> nums[left]\n    mid = (left + right) &gt;&gt; <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># the middle</span>\n    left_max = find_max(nums, left, mid)  <span class=\"hljs-comment\"># find max in range[left, mid]</span>\n    right_max = find_max(nums, mid + <span class=\"hljs-number\">1</span>, right)  <span class=\"hljs-comment\"># find max in range[mid + 1, right]</span>\n\n    <span class=\"hljs-keyword\">return</span> left_max <span class=\"hljs-keyword\">if</span> left_max &gt;= right_max <span class=\"hljs-keyword\">else</span> right_max\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    nums = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>]\n    <span class=\"hljs-keyword\">assert</span> find_max(nums, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">10</span>\n"
    },
    "java": {
      "dir": "Maths/FindMaxRecursion.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/FindMaxRecursion.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FindMaxRecursion</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n\n    <span class=\"hljs-comment\">/* rand size */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> rand.nextInt(<span class=\"hljs-number\">100</span>) + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span>[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\n\n    <span class=\"hljs-comment\">/* init array with rand numbers */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n      array[i] = rand.nextInt() % <span class=\"hljs-number\">100</span>;\n    }\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(array, array.length)</span> == Arrays.stream(array).max().getAsInt();\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(array, <span class=\"hljs-number\">0</span>, array.length - <span class=\"hljs-number\">1</span>)</span> == Arrays.stream(array).max().getAsInt();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Get max of array using divide and conquer algorithm\n   *\n   * <span class=\"hljs-doctag\">@param</span> array contains elements\n   * <span class=\"hljs-doctag\">@param</span> low the index of the first element\n   * <span class=\"hljs-doctag\">@param</span> high the index of the last element\n   * <span class=\"hljs-doctag\">@return</span> max of {<span class=\"hljs-doctag\">@code</span> array}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array, <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> {\n    <span class=\"hljs-keyword\">if</span> (low == high) {\n      <span class=\"hljs-keyword\">return</span> array[low]; <span class=\"hljs-comment\">// or array[high]</span>\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> (low + high) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftMax</span> <span class=\"hljs-operator\">=</span> max(array, low, mid); <span class=\"hljs-comment\">// get max in [low, mid]</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightMax</span> <span class=\"hljs-operator\">=</span> max(array, mid + <span class=\"hljs-number\">1</span>, high); <span class=\"hljs-comment\">// get max in [mid+1, high]</span>\n\n    <span class=\"hljs-keyword\">return</span> Math.max(leftMax, rightMax);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Get max of array using recursion algorithm\n   *\n   * <span class=\"hljs-doctag\">@param</span> array contains elements\n   * <span class=\"hljs-doctag\">@param</span> len length of given array\n   * <span class=\"hljs-doctag\">@return</span> max value of {<span class=\"hljs-doctag\">@code</span> array}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array, <span class=\"hljs-type\">int</span> len)</span> {\n    <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">1</span> ? array[<span class=\"hljs-number\">0</span>] : Math.max(max(array, len - <span class=\"hljs-number\">1</span>), array[len - <span class=\"hljs-number\">1</span>]);\n  }\n}\n"
    },
    "dart": {
      "dir": "maths/find_max_recursion.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/find_max_recursion.dart",
      "code": "<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-built_in\">List</span> numbers = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>];\n  <span class=\"hljs-built_in\">int</span> max = find_max_recursion(numbers, <span class=\"hljs-number\">0</span>, numbers.length - <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;max = <span class=\"hljs-subst\">$max</span>&quot;</span>);\n}\n\n<span class=\"hljs-comment\"><span class=\"language-markdown\">/<span class=\"hljs-strong\">**\n <span class=\"hljs-emphasis\">*</span></span></span> find min using <span class=\"language-markdown\"><span class=\"hljs-strong\"><span class=\"hljs-emphasis\">divide-and-conquer algorithm\n *</span>/</span></span></span>\n<span class=\"hljs-built_in\">int</span> find_max_recursion(<span class=\"hljs-built_in\">List</span> numbers, <span class=\"hljs-built_in\">int</span> low, <span class=\"hljs-built_in\">int</span> high) {\n  <span class=\"hljs-keyword\">if</span> (low == high) {\n    <span class=\"hljs-keyword\">return</span> numbers[low]; <span class=\"hljs-comment\">// or numbers[high]</span>\n  }\n  <span class=\"hljs-built_in\">int</span> mid = (low + high) &gt;&gt; <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-built_in\">int</span> leftMax =\n      find_max_recursion(numbers, low, mid); <span class=\"hljs-comment\">/* max in range [low mid] */</span>\n  <span class=\"hljs-built_in\">int</span> rightMax = find_max_recursion(\n      numbers, mid + <span class=\"hljs-number\">1</span>, high); <span class=\"hljs-comment\">/* max in range [mid + 1, high] */</span>\n  <span class=\"hljs-keyword\">return</span> leftMax &gt;= rightMax ? leftMax : rightMax;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
