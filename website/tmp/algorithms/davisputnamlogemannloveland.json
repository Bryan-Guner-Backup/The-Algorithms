{
  "slug": "davisputnamlogemannloveland",
  "name": "Davis–Putnam–Logemann–Loveland",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/davis–putnam–logemann–loveland.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/davis–putnam–logemann–loveland.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nDavis–Putnam–Logemann–Loveland (DPLL) algorithm is a complete, backtracking-based\nsearch algorithm for deciding the satisfiability of propositional logic formulae in\nconjunctive normal form, i.e, for solving the Conjunctive Normal Form SATisfiability\n(CNF-SAT) problem.\n\nFor more information about the algorithm: https://en.wikipedia.org/wiki/DPLL_algorithm\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Dict</span>, <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Clause</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A clause represented in Conjunctive Normal Form.\n    A clause is a set of literals, either complemented or otherwise.\n    For example:\n        {A1, A2, A3&#x27;} is the clause (A1 v A2 v A3&#x27;)\n        {A5&#x27;, A2&#x27;, A1} is the clause (A5&#x27; v A2&#x27; v A1)\n\n    Create model\n    &gt;&gt;&gt; clause = Clause([&quot;A1&quot;, &quot;A2&#x27;&quot;, &quot;A3&quot;])\n    &gt;&gt;&gt; clause.evaluate({&quot;A1&quot;: True})\n    True\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, literals: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Represent the literals and an assignment in a clause.&quot;\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-comment\"># Assign all literals to None initially</span>\n        self.literals = {literal: <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">for</span> literal <span class=\"hljs-keyword\">in</span> literals}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        To print a clause as in Conjunctive Normal Form.\n        &gt;&gt;&gt; str(Clause([&quot;A1&quot;, &quot;A2&#x27;&quot;, &quot;A3&quot;]))\n        &quot;{A1 , A2&#x27; , A3}&quot;\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;{&quot;</span> + <span class=\"hljs-string\">&quot; , &quot;</span>.join(self.literals) + <span class=\"hljs-string\">&quot;}&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        To print a clause as in Conjunctive Normal Form.\n        &gt;&gt;&gt; len(Clause([]))\n        0\n        &gt;&gt;&gt; len(Clause([&quot;A1&quot;, &quot;A2&#x27;&quot;, &quot;A3&quot;]))\n        3\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.literals)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">assign</span>(<span class=\"hljs-params\">self, model: <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">bool</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Assign values to literals of the clause as given by model.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> literal <span class=\"hljs-keyword\">in</span> self.literals:\n            symbol = literal[:<span class=\"hljs-number\">2</span>]\n            <span class=\"hljs-keyword\">if</span> symbol <span class=\"hljs-keyword\">in</span> model:\n                value = model[symbol]\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">continue</span>\n            <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n                <span class=\"hljs-comment\"># Complement assignment if literal is in complemented form</span>\n                <span class=\"hljs-keyword\">if</span> literal.endswith(<span class=\"hljs-string\">&quot;&#x27;&quot;</span>):\n                    value = <span class=\"hljs-keyword\">not</span> value\n            self.literals[literal] = value\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">evaluate</span>(<span class=\"hljs-params\">self, model: <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">bool</span>]</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Evaluates the clause with the assignments in model.\n        This has the following steps:\n        1. Return True if both a literal and its complement exist in the clause.\n        2. Return True if a single literal has the assignment True.\n        3. Return None(unable to complete evaluation) if a literal has no assignment.\n        4. Compute disjunction of all values assigned in clause.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> literal <span class=\"hljs-keyword\">in</span> self.literals:\n            symbol = literal.rstrip(<span class=\"hljs-string\">&quot;&#x27;&quot;</span>) <span class=\"hljs-keyword\">if</span> literal.endswith(<span class=\"hljs-string\">&quot;&#x27;&quot;</span>) <span class=\"hljs-keyword\">else</span> literal + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>\n            <span class=\"hljs-keyword\">if</span> symbol <span class=\"hljs-keyword\">in</span> self.literals:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n        self.assign(model)\n        <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> self.literals.values():\n            <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-literal\">True</span>, <span class=\"hljs-literal\">None</span>):\n                <span class=\"hljs-keyword\">return</span> value\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">any</span>(self.literals.values())\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Formula</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A formula represented in Conjunctive Normal Form.\n    A formula is a set of clauses.\n    For example,\n        {{A1, A2, A3&#x27;}, {A5&#x27;, A2&#x27;, A1}} is ((A1 v A2 v A3&#x27;) and (A5&#x27; v A2&#x27; v A1))\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, clauses: <span class=\"hljs-type\">List</span>[Clause]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Represent the number of clauses and the clauses themselves.\n        &quot;&quot;&quot;</span>\n        self.clauses = <span class=\"hljs-built_in\">list</span>(clauses)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        To print a formula as in Conjunctive Normal Form.\n        str(Formula([Clause([&quot;A1&quot;, &quot;A2&#x27;&quot;, &quot;A3&quot;]), Clause([&quot;A5&#x27;&quot;, &quot;A2&#x27;&quot;, &quot;A1&quot;])]))\n        &quot;{{A1 , A2&#x27; , A3} , {A5&#x27; , A2&#x27; , A1}}&quot;\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;{&quot;</span> + <span class=\"hljs-string\">&quot; , &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(clause) <span class=\"hljs-keyword\">for</span> clause <span class=\"hljs-keyword\">in</span> self.clauses) + <span class=\"hljs-string\">&quot;}&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_clause</span>() -&gt; Clause:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Randomly generate a clause.\n    All literals have the name Ax, where x is an integer from 1 to 5.\n    &quot;&quot;&quot;</span>\n    literals = []\n    no_of_literals = random.randint(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n    base_var = <span class=\"hljs-string\">&quot;A&quot;</span>\n    i = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> i &lt; no_of_literals:\n        var_no = random.randint(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n        var_name = base_var + <span class=\"hljs-built_in\">str</span>(var_no)\n        var_complement = random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">if</span> var_complement == <span class=\"hljs-number\">1</span>:\n            var_name += <span class=\"hljs-string\">&quot;&#x27;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> var_name <span class=\"hljs-keyword\">in</span> literals:\n            i -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            literals.append(var_name)\n        i += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> Clause(literals)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_formula</span>() -&gt; Formula:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Randomly generate a formula.\n    &quot;&quot;&quot;</span>\n    clauses = <span class=\"hljs-built_in\">set</span>()\n    no_of_clauses = random.randint(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>)\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(clauses) &lt; no_of_clauses:\n        clauses.add(generate_clause())\n    <span class=\"hljs-keyword\">return</span> Formula(<span class=\"hljs-built_in\">set</span>(clauses))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_parameters</span>(<span class=\"hljs-params\">formula: Formula</span>) -&gt; (<span class=\"hljs-type\">List</span>[Clause], <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return the clauses and symbols from a formula.\n    A symbol is the uncomplemented form of a literal.\n    For example,\n        Symbol of A3 is A3.\n        Symbol of A5&#x27; is A5.\n\n    &gt;&gt;&gt; formula = Formula([Clause([&quot;A1&quot;, &quot;A2&#x27;&quot;, &quot;A3&quot;]), Clause([&quot;A5&#x27;&quot;, &quot;A2&#x27;&quot;, &quot;A1&quot;])])\n    &gt;&gt;&gt; clauses, symbols = generate_parameters(formula)\n    &gt;&gt;&gt; clauses_list = [str(i) for i in clauses]\n    &gt;&gt;&gt; clauses_list\n    [&quot;{A1 , A2&#x27; , A3}&quot;, &quot;{A5&#x27; , A2&#x27; , A1}&quot;]\n    &gt;&gt;&gt; symbols\n    [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;, &#x27;A5&#x27;]\n    &quot;&quot;&quot;</span>\n    clauses = formula.clauses\n    symbols_set = []\n    <span class=\"hljs-keyword\">for</span> clause <span class=\"hljs-keyword\">in</span> formula.clauses:\n        <span class=\"hljs-keyword\">for</span> literal <span class=\"hljs-keyword\">in</span> clause.literals:\n            symbol = literal[:<span class=\"hljs-number\">2</span>]\n            <span class=\"hljs-keyword\">if</span> symbol <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> symbols_set:\n                symbols_set.append(symbol)\n    <span class=\"hljs-keyword\">return</span> clauses, symbols_set\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_pure_symbols</span>(<span class=\"hljs-params\">\n    clauses: <span class=\"hljs-type\">List</span>[Clause], symbols: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>], model: <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">bool</span>]\n</span>) -&gt; (<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>], <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">bool</span>]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return pure symbols and their values to satisfy clause.\n    Pure symbols are symbols in a formula that exist only\n    in one form, either complemented or otherwise.\n    For example,\n        { { A4 , A3 , A5&#x27; , A1 , A3&#x27; } , { A4 } , { A3 } } has\n        pure symbols A4, A5&#x27; and A1.\n    This has the following steps:\n    1. Ignore clauses that have already evaluated to be True.\n    2. Find symbols that occur only in one form in the rest of the clauses.\n    3. Assign value True or False depending on whether the symbols occurs\n    in normal or complemented form respectively.\n\n    &gt;&gt;&gt; formula = Formula([Clause([&quot;A1&quot;, &quot;A2&#x27;&quot;, &quot;A3&quot;]), Clause([&quot;A5&#x27;&quot;, &quot;A2&#x27;&quot;, &quot;A1&quot;])])\n    &gt;&gt;&gt; clauses, symbols = generate_parameters(formula)\n\n    &gt;&gt;&gt; pure_symbols, values = find_pure_symbols(clauses, symbols, {})\n    &gt;&gt;&gt; pure_symbols\n    [&#x27;A1&#x27;, &#x27;A2&#x27;, &#x27;A3&#x27;, &#x27;A5&#x27;]\n    &gt;&gt;&gt; values\n    {&#x27;A1&#x27;: True, &#x27;A2&#x27;: False, &#x27;A3&#x27;: True, &#x27;A5&#x27;: False}\n    &quot;&quot;&quot;</span>\n    pure_symbols = []\n    assignment = <span class=\"hljs-built_in\">dict</span>()\n    literals = []\n\n    <span class=\"hljs-keyword\">for</span> clause <span class=\"hljs-keyword\">in</span> clauses:\n        <span class=\"hljs-keyword\">if</span> clause.evaluate(model) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\n            <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">for</span> literal <span class=\"hljs-keyword\">in</span> clause.literals:\n            literals.append(literal)\n\n    <span class=\"hljs-keyword\">for</span> s <span class=\"hljs-keyword\">in</span> symbols:\n        sym = s + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> (s <span class=\"hljs-keyword\">in</span> literals <span class=\"hljs-keyword\">and</span> sym <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> literals) <span class=\"hljs-keyword\">or</span> (\n            s <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> literals <span class=\"hljs-keyword\">and</span> sym <span class=\"hljs-keyword\">in</span> literals\n        ):\n            pure_symbols.append(s)\n    <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> pure_symbols:\n        assignment[p] = <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">for</span> s <span class=\"hljs-keyword\">in</span> pure_symbols:\n        sym = s + <span class=\"hljs-string\">&quot;&#x27;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> s <span class=\"hljs-keyword\">in</span> literals:\n            assignment[s] = <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">elif</span> sym <span class=\"hljs-keyword\">in</span> literals:\n            assignment[s] = <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">return</span> pure_symbols, assignment\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_unit_clauses</span>(<span class=\"hljs-params\">\n    clauses: <span class=\"hljs-type\">List</span>[Clause], model: <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">bool</span>]\n</span>) -&gt; (<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>], <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">bool</span>]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the unit symbols and their values to satisfy clause.\n    Unit symbols are symbols in a formula that are:\n    - Either the only symbol in a clause\n    - Or all other literals in that clause have been assigned False\n    This has the following steps:\n    1. Find symbols that are the only occurrences in a clause.\n    2. Find symbols in a clause where all other literals are assigned False.\n    3. Assign True or False depending on whether the symbols occurs in\n    normal or complemented form respectively.\n\n    &gt;&gt;&gt; clause1 = Clause([&quot;A4&quot;, &quot;A3&quot;, &quot;A5&#x27;&quot;, &quot;A1&quot;, &quot;A3&#x27;&quot;])\n    &gt;&gt;&gt; clause2 = Clause([&quot;A4&quot;])\n    &gt;&gt;&gt; clause3 = Clause([&quot;A3&quot;])\n    &gt;&gt;&gt; clauses, symbols = generate_parameters(Formula([clause1, clause2, clause3]))\n\n    &gt;&gt;&gt; unit_clauses, values = find_unit_clauses(clauses, {})\n    &gt;&gt;&gt; unit_clauses\n    [&#x27;A4&#x27;, &#x27;A3&#x27;]\n    &gt;&gt;&gt; values\n    {&#x27;A4&#x27;: True, &#x27;A3&#x27;: True}\n    &quot;&quot;&quot;</span>\n    unit_symbols = []\n    <span class=\"hljs-keyword\">for</span> clause <span class=\"hljs-keyword\">in</span> clauses:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(clause) == <span class=\"hljs-number\">1</span>:\n            unit_symbols.append(<span class=\"hljs-built_in\">list</span>(clause.literals.keys())[<span class=\"hljs-number\">0</span>])\n        <span class=\"hljs-keyword\">else</span>:\n            Fcount, Ncount = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">for</span> literal, value <span class=\"hljs-keyword\">in</span> clause.literals.items():\n                <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>:\n                    Fcount += <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">elif</span> value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    sym = literal\n                    Ncount += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> Fcount == <span class=\"hljs-built_in\">len</span>(clause) - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> Ncount == <span class=\"hljs-number\">1</span>:\n                unit_symbols.append(sym)\n    assignment = <span class=\"hljs-built_in\">dict</span>()\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> unit_symbols:\n        symbol = i[:<span class=\"hljs-number\">2</span>]\n        assignment[symbol] = <span class=\"hljs-built_in\">len</span>(i) == <span class=\"hljs-number\">2</span>\n    unit_symbols = [i[:<span class=\"hljs-number\">2</span>] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> unit_symbols]\n\n    <span class=\"hljs-keyword\">return</span> unit_symbols, assignment\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dpll_algorithm</span>(<span class=\"hljs-params\">\n    clauses: <span class=\"hljs-type\">List</span>[Clause], symbols: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>], model: <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">bool</span>]\n</span>) -&gt; (<span class=\"hljs-built_in\">bool</span>, <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">bool</span>]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the model if the formula is satisfiable, else None\n    This has the following steps:\n    1. If every clause in clauses is True, return True.\n    2. If some clause in clauses is False, return False.\n    3. Find pure symbols.\n    4. Find unit symbols.\n\n    &gt;&gt;&gt; formula = Formula([Clause([&quot;A4&quot;, &quot;A3&quot;, &quot;A5&#x27;&quot;, &quot;A1&quot;, &quot;A3&#x27;&quot;]), Clause([&quot;A4&quot;])])\n    &gt;&gt;&gt; clauses, symbols = generate_parameters(formula)\n\n    &gt;&gt;&gt; soln, model = dpll_algorithm(clauses, symbols, {})\n    &gt;&gt;&gt; soln\n    True\n    &gt;&gt;&gt; model\n    {&#x27;A4&#x27;: True}\n    &quot;&quot;&quot;</span>\n    check_clause_all_true = <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">for</span> clause <span class=\"hljs-keyword\">in</span> clauses:\n        clause_check = clause.evaluate(model)\n        <span class=\"hljs-keyword\">if</span> clause_check <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>, <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">elif</span> clause_check <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            check_clause_all_true = <span class=\"hljs-literal\">False</span>\n            <span class=\"hljs-keyword\">continue</span>\n\n    <span class=\"hljs-keyword\">if</span> check_clause_all_true:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>, model\n\n    <span class=\"hljs-keyword\">try</span>:\n        pure_symbols, assignment = find_pure_symbols(clauses, symbols, model)\n    <span class=\"hljs-keyword\">except</span> RecursionError:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;raises a RecursionError and is&quot;</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>, {}\n    P = <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(pure_symbols) &gt; <span class=\"hljs-number\">0</span>:\n        P, value = pure_symbols[<span class=\"hljs-number\">0</span>], assignment[pure_symbols[<span class=\"hljs-number\">0</span>]]\n\n    <span class=\"hljs-keyword\">if</span> P:\n        tmp_model = model\n        tmp_model[P] = value\n        tmp_symbols = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> symbols]\n        <span class=\"hljs-keyword\">if</span> P <span class=\"hljs-keyword\">in</span> tmp_symbols:\n            tmp_symbols.remove(P)\n        <span class=\"hljs-keyword\">return</span> dpll_algorithm(clauses, tmp_symbols, tmp_model)\n\n    unit_symbols, assignment = find_unit_clauses(clauses, model)\n    P = <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(unit_symbols) &gt; <span class=\"hljs-number\">0</span>:\n        P, value = unit_symbols[<span class=\"hljs-number\">0</span>], assignment[unit_symbols[<span class=\"hljs-number\">0</span>]]\n    <span class=\"hljs-keyword\">if</span> P:\n        tmp_model = model\n        tmp_model[P] = value\n        tmp_symbols = [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> symbols]\n        <span class=\"hljs-keyword\">if</span> P <span class=\"hljs-keyword\">in</span> tmp_symbols:\n            tmp_symbols.remove(P)\n        <span class=\"hljs-keyword\">return</span> dpll_algorithm(clauses, tmp_symbols, tmp_model)\n    P = symbols[<span class=\"hljs-number\">0</span>]\n    rest = symbols[<span class=\"hljs-number\">1</span>:]\n    tmp1, tmp2 = model, model\n    tmp1[P], tmp2[P] = <span class=\"hljs-literal\">True</span>, <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">return</span> dpll_algorithm(clauses, rest, tmp1) <span class=\"hljs-keyword\">or</span> dpll_algorithm(clauses, rest, tmp2)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n\n    formula = generate_formula()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;The formula <span class=\"hljs-subst\">{formula}</span> is&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\n\n    clauses, symbols = generate_parameters(formula)\n    solution, model = dpll_algorithm(clauses, symbols, {})\n\n    <span class=\"hljs-keyword\">if</span> solution:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;satisfiable with the assignment <span class=\"hljs-subst\">{model}</span>.&quot;</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;not satisfiable.&quot;</span>)\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
