{
  "slug": "prims-minimum-spanning-tree",
  "name": "Prims Minimum Spanning Tree",
  "categories": ["greedyalgorithms"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "greedy_algorithms/prims_minimum_spanning_tree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/greedy_algorithms/prims_minimum_spanning_tree.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> V 4</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INFINITY 99999</span>\n\n<span class=\"hljs-type\">int</span> graph[V][V] = {{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>}, {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>}};\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">mst</span> {\n    <span class=\"hljs-type\">bool</span> visited;\n    <span class=\"hljs-type\">int</span> key;\n    <span class=\"hljs-type\">int</span> near;\n};\n\nmst MST_Array[V];\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">initilize</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n        MST_Array[i].visited = <span class=\"hljs-literal\">false</span>;\n        MST_Array[i].key = INFINITY;  <span class=\"hljs-comment\">// considering INFINITY as inifinity</span>\n        MST_Array[i].near = i;\n    }\n\n    MST_Array[<span class=\"hljs-number\">0</span>].key = <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">updateNear</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> v = <span class=\"hljs-number\">0</span>; v &lt; V; v++) {\n        <span class=\"hljs-type\">int</span> min = INFINITY;\n        <span class=\"hljs-type\">int</span> minIndex = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n            <span class=\"hljs-keyword\">if</span> (MST_Array[i].key &lt; min &amp;&amp; MST_Array[i].visited == <span class=\"hljs-literal\">false</span> &amp;&amp;\n                MST_Array[i].key != INFINITY) {\n                min = MST_Array[i].key;\n                minIndex = i;\n            }\n        }\n\n        MST_Array[minIndex].visited = <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n            <span class=\"hljs-keyword\">if</span> (graph[minIndex][i] != <span class=\"hljs-number\">0</span> &amp;&amp; graph[minIndex][i] &lt; INFINITY) {\n                <span class=\"hljs-keyword\">if</span> (graph[minIndex][i] &lt; MST_Array[i].key) {\n                    MST_Array[i].key = graph[minIndex][i];\n                    MST_Array[i].near = minIndex;\n                }\n            }\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n        cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;  -  &quot;</span> &lt;&lt; MST_Array[i].near &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>\n             &lt;&lt; graph[i][MST_Array[i].near] &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">initilize</span>();\n    <span class=\"hljs-built_in\">updateNear</span>();\n    <span class=\"hljs-built_in\">show</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
