{
  "slug": "newton-method",
  "name": "Newton Method",
  "categories": ["numericalanalysis"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "arithmetic_analysis/newton_method.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/arithmetic_analysis/newton_method.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Newton&#x27;s Method.&quot;&quot;&quot;</span>\n\n<span class=\"hljs-comment\"># Newton&#x27;s Method - https://en.wikipedia.org/wiki/Newton%27s_method</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>\n\nRealFunc = <span class=\"hljs-type\">Callable</span>[[<span class=\"hljs-built_in\">float</span>], <span class=\"hljs-built_in\">float</span>]  <span class=\"hljs-comment\"># type alias for a real -&gt; real function</span>\n\n\n<span class=\"hljs-comment\"># function is the f(x) and derivative is the f&#x27;(x)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">newton</span>(<span class=\"hljs-params\">\n    function: RealFunc,\n    derivative: RealFunc,\n    starting_int: <span class=\"hljs-built_in\">int</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; newton(lambda x: x ** 3 - 2 * x - 5, lambda x: 3 * x ** 2 - 2, 3)\n    2.0945514815423474\n    &gt;&gt;&gt; newton(lambda x: x ** 3 - 1, lambda x: 3 * x ** 2, -2)\n    1.0\n    &gt;&gt;&gt; newton(lambda x: x ** 3 - 1, lambda x: 3 * x ** 2, -4)\n    1.0000000000000102\n    &gt;&gt;&gt; import math\n    &gt;&gt;&gt; newton(math.sin, math.cos, 1)\n    0.0\n    &gt;&gt;&gt; newton(math.sin, math.cos, 2)\n    3.141592653589793\n    &gt;&gt;&gt; newton(math.cos, lambda x: -math.sin(x), 2)\n    1.5707963267948966\n    &gt;&gt;&gt; newton(math.cos, lambda x: -math.sin(x), 0)\n    Traceback (most recent call last):\n    ...\n    ZeroDivisionError: Could not find root\n    &quot;&quot;&quot;</span>\n    prev_guess = <span class=\"hljs-built_in\">float</span>(starting_int)\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">try</span>:\n            next_guess = prev_guess - function(prev_guess) / derivative(prev_guess)\n        <span class=\"hljs-keyword\">except</span> ZeroDivisionError:\n            <span class=\"hljs-keyword\">raise</span> ZeroDivisionError(<span class=\"hljs-string\">&quot;Could not find root&quot;</span>) <span class=\"hljs-keyword\">from</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">abs</span>(prev_guess - next_guess) &lt; <span class=\"hljs-number\">10</span> ** -<span class=\"hljs-number\">5</span>:\n            <span class=\"hljs-keyword\">return</span> next_guess\n        prev_guess = next_guess\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-keyword\">return</span> (x ** <span class=\"hljs-number\">3</span>) - (<span class=\"hljs-number\">2</span> * x) - <span class=\"hljs-number\">5</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f1</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span> * (x ** <span class=\"hljs-number\">2</span>) - <span class=\"hljs-number\">2</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(newton(f, f1, <span class=\"hljs-number\">3</span>))\n"
    },
    "dart": {
      "dir": "maths/newton_method.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/newton_method.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\n\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Approximate derivative of [f] at [x]</span></span>\n<span class=\"hljs-built_in\">double</span> derivative(<span class=\"hljs-built_in\">double</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-built_in\">double</span>) f, <span class=\"hljs-built_in\">double</span> x, [<span class=\"hljs-built_in\">double</span> h = <span class=\"hljs-number\">1e-10</span>]) {\n  <span class=\"hljs-keyword\">return</span> (f(x + h) - f(x - h)) / (<span class=\"hljs-number\">2</span> * h);\n}\n\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Find root of given [f] (x where [f(x)] == 0)</span></span>\n<span class=\"hljs-built_in\">double</span> findRoot(<span class=\"hljs-built_in\">double</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-built_in\">double</span>) f,\n    [<span class=\"hljs-built_in\">double</span> initialValue = <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">int</span> iterations = <span class=\"hljs-number\">10</span>, <span class=\"hljs-built_in\">double</span> h = <span class=\"hljs-number\">1e-10</span>]) {\n  <span class=\"hljs-built_in\">double</span> currentValue = initialValue;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; iterations; i++) {\n    currentValue -= f(currentValue) / derivative(f, currentValue);\n  }\n\n  <span class=\"hljs-keyword\">return</span> currentValue;\n}\n\n<span class=\"hljs-built_in\">double</span> f(x) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * x + <span class=\"hljs-number\">4</span>;\n}\n\n<span class=\"hljs-built_in\">double</span> g(x) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * pow(x, <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">7</span> * x + <span class=\"hljs-number\">1</span>;\n}\n\nmain() {\n  <span class=\"hljs-built_in\">double</span> fRoot = findRoot(f);\n  <span class=\"hljs-built_in\">double</span> gRoot = findRoot(g);\n  <span class=\"hljs-built_in\">double</span> sinRoot = findRoot(sin, <span class=\"hljs-number\">10</span>);\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;f(x) = 2x + 4, f(<span class=\"hljs-subst\">$fRoot</span>) = <span class=\"hljs-subst\">${f(fRoot)}</span>&quot;</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;g(x) = 2x^2 + 7x + 1, g(<span class=\"hljs-subst\">$gRoot</span>) = <span class=\"hljs-subst\">${g(gRoot)}</span>&quot;</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;sin(<span class=\"hljs-subst\">${sinRoot / pi}</span> * pi) = <span class=\"hljs-subst\">${sin(sinRoot)}</span>&quot;</span>);\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "spamegg",
      "email": "4255997+spamegg1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sven",
      "email": "69042800+Svn-Sp@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rafael García Cuéllar",
      "email": "r.gc@hotmail.es",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
