{
  "slug": "mode",
  "name": "Mode",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Maths/Mode.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/Mode.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n<span class=\"hljs-keyword\">import</span> java.util.HashMap;\n\n<span class=\"hljs-comment\">/*\n * Find the mode of an array of numbers\n *\n * The mode of an array of numbers is the most frequently occurring number in the array,\n * or the most frequently occurring numbers if there are multiple numbers with the same frequency\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Mode</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    <span class=\"hljs-comment\">/* Test array of integers */</span>\n    <span class=\"hljs-keyword\">assert</span> (mode(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {})) == <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(mode(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">5</span>}), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">5</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(mode(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>}), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(mode(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>}), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">7</span>});\n    <span class=\"hljs-keyword\">assert</span> Arrays.equals(mode(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>}), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>});\n  }\n\n  <span class=\"hljs-comment\">/*\n   * Find the mode of an array of integers\n   *\n   * @param numbers array of integers\n   * @return mode of the array\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] mode(<span class=\"hljs-type\">int</span>[] numbers) {\n\n    <span class=\"hljs-keyword\">if</span> (numbers.length == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n\n    HashMap&lt;Integer, Integer&gt; count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> num : numbers) {\n      <span class=\"hljs-keyword\">if</span> (count.containsKey(num)) {\n\n        count.put(num, count.get(num) + <span class=\"hljs-number\">1</span>);\n\n      } <span class=\"hljs-keyword\">else</span> {\n\n        count.put(num, <span class=\"hljs-number\">1</span>);\n      }\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> Collections.max(count.values());\n    ArrayList&lt;Integer&gt; modes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> num : count.keySet()) {\n      <span class=\"hljs-keyword\">if</span> (count.get(num) == max) {\n        modes.add(num);\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> modes.stream().mapToInt(n -&gt; n).toArray();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "gijsh21",
      "email": "69896881+gijsh21@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
