{
  "slug": "integral-approximation",
  "name": "Integral Approximation",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/integral_approximation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/integral_approximation.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Compute integral approximation of the function using [Riemann sum](https://en.wikipedia.org/wiki/Riemann_sum)\r\n * @details In mathematics, a Riemann sum is a certain kind of approximation of an integral by a finite sum. It is named after nineteenth-century German mathematician Bernhard Riemann.\r\n * One very common application is approximating the area of functions or lines on a graph and the length of curves and other approximations.\r\n * The sum is calculated by partitioning the region into shapes (rectangles, trapezoids, parabolas, or cubics) that form a region similar to the region being measured, then calculating the area for each of these shapes, and finally adding all of these small areas together.\r\n * This approach can be used to find a numerical approximation for a definite integral even if the fundamental theorem of calculus does not make it easy to find a closed-form solution.\r\n * Because the region filled by the small shapes is usually not the same shape as the region being measured, the Riemann sum will differ from the area being measured.\r\n * This error can be reduced by dividing up the region more finely, using smaller and smaller shapes. As the shapes get smaller and smaller, the sum approaches the Riemann integral.\r\n * \\author [Benjamin Walton](https://github.com/bwalton24)\r\n * \\author [Shiqi Sheng](https://github.com/shiqisheng00)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>        <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>         <span class=\"hljs-comment\">/// for mathematical functions</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;functional&gt;</span>   <span class=\"hljs-comment\">/// for passing in functions</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>    <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace math\r\n * @brief Mathematical functions\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> math {\r\n<span class=\"hljs-comment\">/**\r\n * @brief Computes integral approximation\r\n * @param lb lower bound\r\n * @param ub upper bound\r\n * @param func function passed in\r\n * @param delta\r\n * @returns integral approximation of function from [lb, ub]\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">integral_approx</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> lb, <span class=\"hljs-type\">double</span> ub,\r\n                       <span class=\"hljs-keyword\">const</span> std::function&lt;<span class=\"hljs-type\">double</span>(<span class=\"hljs-type\">double</span>)&gt;&amp; func,\r\n                       <span class=\"hljs-type\">double</span> delta = <span class=\"hljs-number\">.0001</span>)</span> </span>{\r\n    <span class=\"hljs-type\">double</span> result = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-type\">uint64_t</span> numDeltas = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;((ub - lb) / delta);\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; numDeltas; i++) {\r\n        <span class=\"hljs-type\">double</span> begin = lb + i * delta;\r\n        <span class=\"hljs-type\">double</span> end = lb + (i + <span class=\"hljs-number\">1</span>) * delta;\r\n        result += delta * (<span class=\"hljs-built_in\">func</span>(begin) + <span class=\"hljs-built_in\">func</span>(end)) / <span class=\"hljs-number\">2</span>;\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Wrapper to evaluate if the approximated\r\n * value is within `.XX%` threshold of the exact value.\r\n * @param approx aprroximate value\r\n * @param exact expected value\r\n * @param threshold values from [0, 1)\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_eval</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> approx, <span class=\"hljs-type\">double</span> expected, <span class=\"hljs-type\">double</span> threshold)</span> </span>{\r\n    <span class=\"hljs-built_in\">assert</span>(approx &gt;= expected * (<span class=\"hljs-number\">1</span> - threshold));\r\n    <span class=\"hljs-built_in\">assert</span>(approx &lt;= expected * (<span class=\"hljs-number\">1</span> + threshold));\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations to\r\n * test the `integral_approx` function.\r\n *\r\n * @returns `void`\r\n */</span>\r\n}  <span class=\"hljs-comment\">// namespace math</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">double</span> test_1 = math::<span class=\"hljs-built_in\">integral_approx</span>(\r\n        <span class=\"hljs-number\">3.24</span>, <span class=\"hljs-number\">7.56</span>, [](<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> x) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">log</span>(x) + <span class=\"hljs-built_in\">exp</span>(x) + x; });\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test Case 1&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;function: log(x) + e^x + x&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;range: [3.24, 7.56]&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;value: &quot;</span> &lt;&lt; test_1 &lt;&lt; std::endl;\r\n    math::<span class=\"hljs-built_in\">test_eval</span>(test_1, <span class=\"hljs-number\">1924.80384023549</span>, <span class=\"hljs-number\">.001</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 Passed!&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;=====================&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">double</span> test_2 = math::<span class=\"hljs-built_in\">integral_approx</span>(<span class=\"hljs-number\">0.023</span>, <span class=\"hljs-number\">3.69</span>, [](<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> x) {\r\n        <span class=\"hljs-keyword\">return</span> x * x + <span class=\"hljs-built_in\">cos</span>(x) + <span class=\"hljs-built_in\">exp</span>(x) + <span class=\"hljs-built_in\">log</span>(x) * <span class=\"hljs-built_in\">log</span>(x);\r\n    });\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test Case 2&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;function: x^2 + cos(x) + e^x + log^2(x)&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;range: [.023, 3.69]&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;value: &quot;</span> &lt;&lt; test_2 &lt;&lt; std::endl;\r\n    math::<span class=\"hljs-built_in\">test_eval</span>(test_2, <span class=\"hljs-number\">58.71291345202729</span>, <span class=\"hljs-number\">.001</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 Passed!&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;=====================&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">double</span> test_3 = math::<span class=\"hljs-built_in\">integral_approx</span>(\r\n        <span class=\"hljs-number\">10.78</span>, <span class=\"hljs-number\">24.899</span>, [](<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> x) { <span class=\"hljs-keyword\">return</span> x * x * x - x * x + <span class=\"hljs-number\">378</span>; });\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test Case 3&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;function: x^3 - x^2 + 378&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;range: [10.78, 24.899]&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;value: &quot;</span> &lt;&lt; test_3 &lt;&lt; std::endl;\r\n    math::<span class=\"hljs-built_in\">test_eval</span>(test_3, <span class=\"hljs-number\">93320.65915078377</span>, <span class=\"hljs-number\">.001</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3 Passed!&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;=====================&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">double</span> test_4 = math::<span class=\"hljs-built_in\">integral_approx</span>(\r\n        <span class=\"hljs-number\">.101</span>, <span class=\"hljs-number\">.505</span>,\r\n        [](<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> x) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">cos</span>(x) * <span class=\"hljs-built_in\">tan</span>(x) * x * x + <span class=\"hljs-built_in\">exp</span>(x); },\r\n        <span class=\"hljs-number\">.00001</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test Case 4&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;function: cos(x)*tan(x)*x^2 + e^x&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;range: [.101, .505]&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;value: &quot;</span> &lt;&lt; test_4 &lt;&lt; std::endl;\r\n    math::<span class=\"hljs-built_in\">test_eval</span>(test_4, <span class=\"hljs-number\">0.566485986311631</span>, <span class=\"hljs-number\">.001</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4 Passed!&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;=====================&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">double</span> test_5 = math::<span class=\"hljs-built_in\">integral_approx</span>(\r\n        <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, [](<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> x) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">exp</span>(<span class=\"hljs-number\">-1</span> / (x * x)); });\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test Case 5&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;function: e^(-1/x^2)&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;range: [-1, 1]&quot;</span> &lt;&lt; std::endl;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;value: &quot;</span> &lt;&lt; test_5 &lt;&lt; std::endl;\r\n    math::<span class=\"hljs-built_in\">test_eval</span>(test_5, <span class=\"hljs-number\">0.1781477117815607</span>, <span class=\"hljs-number\">.001</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 5 Passed!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
