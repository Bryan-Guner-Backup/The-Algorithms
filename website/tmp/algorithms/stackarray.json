{
  "slug": "stackarray",
  "name": "StackArray",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Stacks/StackArray.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Stacks/StackArray.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Stacks;\n\n<span class=\"hljs-comment\">/**\n * This class implements a Stack using a regular array.\n *\n * &lt;p&gt;A stack is exactly what it sounds like. An element gets added to the top of the stack and only\n * the element on the top may be removed. This is an example of an array implementation of a Stack.\n * So an element can only be added/removed from the end of the array. In theory stack have no fixed\n * size, but with an array implementation it does.\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StackArray</span> {\n\n  <span class=\"hljs-comment\">/** Driver Code */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// Declare a stack of maximum size 4</span>\n    <span class=\"hljs-type\">StackArray</span> <span class=\"hljs-variable\">myStackArray</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StackArray</span>(<span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-keyword\">assert</span> myStackArray.isEmpty();\n    <span class=\"hljs-keyword\">assert</span> !myStackArray.isFull();\n\n    <span class=\"hljs-comment\">// Populate the stack</span>\n    myStackArray.push(<span class=\"hljs-number\">5</span>);\n    myStackArray.push(<span class=\"hljs-number\">8</span>);\n    myStackArray.push(<span class=\"hljs-number\">2</span>);\n    myStackArray.push(<span class=\"hljs-number\">9</span>);\n\n    <span class=\"hljs-keyword\">assert</span> !myStackArray.isEmpty();\n    <span class=\"hljs-keyword\">assert</span> myStackArray.isFull();\n    <span class=\"hljs-keyword\">assert</span> myStackArray.peek() == <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-keyword\">assert</span> myStackArray.pop() == <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-keyword\">assert</span> myStackArray.peek() == <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">assert</span> myStackArray.size() == <span class=\"hljs-number\">3</span>;\n  }\n\n  <span class=\"hljs-comment\">/** Default initial capacity. */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n\n  <span class=\"hljs-comment\">/** The max size of the Stack */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> maxSize;\n\n  <span class=\"hljs-comment\">/** The array representation of the Stack */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] stackArray;\n\n  <span class=\"hljs-comment\">/** The top of the stack */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> top;\n\n  <span class=\"hljs-comment\">/** init Stack with DEFAULT_CAPACITY */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">StackArray</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-built_in\">this</span>(DEFAULT_CAPACITY);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Constructor\n   *\n   * <span class=\"hljs-doctag\">@param</span> size Size of the Stack\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">StackArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\n    maxSize = size;\n    stackArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[maxSize];\n    top = -<span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Adds an element to the top of the stack\n   *\n   * <span class=\"hljs-doctag\">@param</span> value The element added\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> {\n    <span class=\"hljs-keyword\">if</span> (!isFull()) { <span class=\"hljs-comment\">// Checks for a full stack</span>\n      top++;\n      stackArray[top] = value;\n    } <span class=\"hljs-keyword\">else</span> {\n      resize(maxSize * <span class=\"hljs-number\">2</span>);\n      push(value); <span class=\"hljs-comment\">// don&#x27;t forget push after resizing</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Removes the top element of the stack and returns the value you&#x27;ve removed\n   *\n   * <span class=\"hljs-doctag\">@return</span> value popped off the Stack\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (!isEmpty()) { <span class=\"hljs-comment\">// Checks for an empty stack</span>\n      <span class=\"hljs-keyword\">return</span> stackArray[top--];\n    }\n\n    <span class=\"hljs-keyword\">if</span> (top &lt; maxSize / <span class=\"hljs-number\">4</span>) {\n      resize(maxSize / <span class=\"hljs-number\">2</span>);\n      <span class=\"hljs-keyword\">return</span> pop(); <span class=\"hljs-comment\">// don&#x27;t forget pop after resizing</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;The stack is already empty&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns the element at the top of the stack\n   *\n   * <span class=\"hljs-doctag\">@return</span> element at the top of the stack\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (!isEmpty()) { <span class=\"hljs-comment\">// Checks for an empty stack</span>\n      <span class=\"hljs-keyword\">return</span> stackArray[top];\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;The stack is empty, cant peek&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">resize</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> newSize)</span> {\n    <span class=\"hljs-type\">int</span>[] transferArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[newSize];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; stackArray.length; i++) {\n      transferArray[i] = stackArray[i];\n    }\n    <span class=\"hljs-comment\">// This reference change might be nice in here</span>\n    stackArray = transferArray;\n    maxSize = newSize;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns true if the stack is empty\n   *\n   * <span class=\"hljs-doctag\">@return</span> true if the stack is empty\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> (top == -<span class=\"hljs-number\">1</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns true if the stack is full\n   *\n   * <span class=\"hljs-doctag\">@return</span> true if the stack is full\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> (top + <span class=\"hljs-number\">1</span> == maxSize);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Deletes everything in the Stack\n   *\n   * &lt;p&gt;Doesn&#x27;t delete elements in the array but if you call push method after calling makeEmpty it\n   * will overwrite previous values\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">makeEmpty</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-comment\">// Doesn&#x27;t delete elements in the array but if you call</span>\n    top = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// push method after calling makeEmpty it will overwrite previous values</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Return size of stack\n   *\n   * <span class=\"hljs-doctag\">@return</span> size of stack\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> top + <span class=\"hljs-number\">1</span>;\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "yeongmo-j",
      "email": "yeongmoj94@gmail.com",
      "commits": 1
    },
    {
      "name": "Hayder Hassan",
      "email": "hayderh@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
