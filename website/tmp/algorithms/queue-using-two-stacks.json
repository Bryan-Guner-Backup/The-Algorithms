{
  "slug": "queue-using-two-stacks",
  "name": "Queue Using Two Stacks",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/queue_using_two_stacks.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/queue_using_two_stacks.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @author [shoniavika](https://github.com/shoniavika)\n * @file\n *\n * Implementation of a Queue using two Stacks.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stack&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> {\n<span class=\"hljs-comment\">/**\n * @brief Queue data structure. Stores elements in FIFO\n * (first-in-first-out) manner.\n * @tparam T datatype to store in the queue\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyQueue</span> {\n <span class=\"hljs-keyword\">private</span>:\n    std::stack&lt;T&gt; s1, s2;\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * Constructor for queue.\n     */</span>\n    <span class=\"hljs-built_in\">MyQueue</span>() = <span class=\"hljs-keyword\">default</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Pushes x to the back of queue.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(T x)</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * Removes an element from the front of the queue.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> T&amp; <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * Returns first element, without removing it.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> T&amp; <span class=\"hljs-title\">peek</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>;\n\n    <span class=\"hljs-comment\">/**\n     * Returns whether the queue is empty.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">empty</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>;\n};\n\n<span class=\"hljs-comment\">/**\n * Appends element to the end of the queue\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-type\">void</span> MyQueue&lt;T&gt;::<span class=\"hljs-built_in\">push</span>(T x) {\n    <span class=\"hljs-keyword\">while</span> (!s2.<span class=\"hljs-built_in\">empty</span>()) {\n        s1.<span class=\"hljs-built_in\">push</span>(s2.<span class=\"hljs-built_in\">top</span>());\n        s2.<span class=\"hljs-built_in\">pop</span>();\n    }\n    s2.<span class=\"hljs-built_in\">push</span>(x);\n    <span class=\"hljs-keyword\">while</span> (!s1.<span class=\"hljs-built_in\">empty</span>()) {\n        s2.<span class=\"hljs-built_in\">push</span>(s1.<span class=\"hljs-built_in\">top</span>());\n        s1.<span class=\"hljs-built_in\">pop</span>();\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Removes element from the front of the queue\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-keyword\">const</span> T&amp; MyQueue&lt;T&gt;::<span class=\"hljs-built_in\">pop</span>() {\n    <span class=\"hljs-keyword\">const</span> T&amp; temp = MyQueue::<span class=\"hljs-built_in\">peek</span>();\n    s2.<span class=\"hljs-built_in\">pop</span>();\n    <span class=\"hljs-keyword\">return</span> temp;\n}\n\n<span class=\"hljs-comment\">/**\n * Returns element in the front.\n * Does not remove it.\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-keyword\">const</span> T&amp; MyQueue&lt;T&gt;::<span class=\"hljs-built_in\">peek</span>() <span class=\"hljs-keyword\">const</span> {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">empty</span>()) {\n        <span class=\"hljs-keyword\">return</span> s2.<span class=\"hljs-built_in\">top</span>();\n    }\n    std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Queue is empty&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * Checks whether a queue is empty\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-type\">bool</span> MyQueue&lt;T&gt;::<span class=\"hljs-built_in\">empty</span>() <span class=\"hljs-keyword\">const</span> {\n    <span class=\"hljs-keyword\">return</span> s2.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; s1.<span class=\"hljs-built_in\">empty</span>();\n}\n}  <span class=\"hljs-comment\">// namespace</span>\n\n<span class=\"hljs-comment\">/**\n * Testing function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">queue_test</span><span class=\"hljs-params\">()</span> </span>{\n    MyQueue&lt;<span class=\"hljs-type\">int</span>&gt; que;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test #1\\n&quot;</span>;\n    que.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">2</span>);\n    que.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">5</span>);\n    que.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">peek</span>() == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">pop</span>() == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">peek</span>() == <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">pop</span>() == <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">peek</span>() == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">pop</span>() == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">empty</span>() == <span class=\"hljs-literal\">true</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;PASSED\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test #2\\n&quot;</span>;\n    que.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">-1</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">empty</span>() == <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">peek</span>() == <span class=\"hljs-number\">-1</span>);\n    <span class=\"hljs-built_in\">assert</span>(que.<span class=\"hljs-built_in\">pop</span>() == <span class=\"hljs-number\">-1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;PASSED\\n&quot;</span>;\n\n    MyQueue&lt;<span class=\"hljs-type\">double</span>&gt; que2;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test #3\\n&quot;</span>;\n    que2.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">2.31223</span>);\n    que2.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">3.1415926</span>);\n    que2.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-number\">2.92</span>);\n\n    <span class=\"hljs-built_in\">assert</span>(que2.<span class=\"hljs-built_in\">peek</span>() == <span class=\"hljs-number\">2.31223</span>);\n    <span class=\"hljs-built_in\">assert</span>(que2.<span class=\"hljs-built_in\">pop</span>() == <span class=\"hljs-number\">2.31223</span>);\n    <span class=\"hljs-built_in\">assert</span>(que2.<span class=\"hljs-built_in\">peek</span>() == <span class=\"hljs-number\">3.1415926</span>);\n    <span class=\"hljs-built_in\">assert</span>(que2.<span class=\"hljs-built_in\">pop</span>() == <span class=\"hljs-number\">3.1415926</span>);\n    <span class=\"hljs-built_in\">assert</span>(que2.<span class=\"hljs-built_in\">peek</span>() == <span class=\"hljs-number\">2.92</span>);\n    <span class=\"hljs-built_in\">assert</span>(que2.<span class=\"hljs-built_in\">pop</span>() == <span class=\"hljs-number\">2.92</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;PASSED\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Main function, calls testing function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">queue_test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Others/QueueUsingTwoStacks.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/QueueUsingTwoStacks.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\n\n<span class=\"hljs-comment\">/**\n * This implements Queue using two Stacks.\n *\n * &lt;p&gt;Big O Runtime: insert(): O(1) remove(): O(1) amortized isEmpty(): O(1)\n *\n * &lt;p&gt;A queue data structure functions the same as a real world queue. The elements that are added\n * first are the first to be removed. New elements are added to the back/rear of the queue.\n *\n * <span class=\"hljs-doctag\">@author</span> sahilb2 (https://www.github.com/sahilb2)\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">QueueWithStack</span> {\n\n  <span class=\"hljs-comment\">// Stack to keep track of elements inserted into the queue</span>\n  <span class=\"hljs-keyword\">private</span> Stack inStack;\n  <span class=\"hljs-comment\">// Stack to keep track of elements to be removed next in queue</span>\n  <span class=\"hljs-keyword\">private</span> Stack outStack;\n\n  <span class=\"hljs-comment\">/** Constructor */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">QueueWithStack</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-built_in\">this</span>.inStack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>();\n    <span class=\"hljs-built_in\">this</span>.outStack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Inserts an element at the rear of the queue\n   *\n   * <span class=\"hljs-doctag\">@param</span> x element to be added\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Object x)</span> {\n    <span class=\"hljs-comment\">// Insert element into inStack</span>\n    <span class=\"hljs-built_in\">this</span>.inStack.push(x);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Remove an element from the front of the queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> the new front of the queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.outStack.isEmpty()) {\n      <span class=\"hljs-comment\">// Move all elements from inStack to outStack (preserving the order)</span>\n      <span class=\"hljs-keyword\">while</span> (!<span class=\"hljs-built_in\">this</span>.inStack.isEmpty()) {\n        <span class=\"hljs-built_in\">this</span>.outStack.push(<span class=\"hljs-built_in\">this</span>.inStack.pop());\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.outStack.pop();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Peek at the element from the front of the queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> the front element of the queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">peekFront</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.outStack.isEmpty()) {\n      <span class=\"hljs-comment\">// Move all elements from inStack to outStack (preserving the order)</span>\n      <span class=\"hljs-keyword\">while</span> (!<span class=\"hljs-built_in\">this</span>.inStack.isEmpty()) {\n        <span class=\"hljs-built_in\">this</span>.outStack.push(<span class=\"hljs-built_in\">this</span>.inStack.pop());\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.outStack.peek();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Peek at the element from the back of the queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> the back element of the queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">peekBack</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.inStack.peek();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns true if the queue is empty\n   *\n   * <span class=\"hljs-doctag\">@return</span> true if the queue is empty\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">this</span>.inStack.isEmpty() &amp;&amp; <span class=\"hljs-built_in\">this</span>.outStack.isEmpty());\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * This class is the example for the Queue class\n *\n * <span class=\"hljs-doctag\">@author</span> sahilb2 (https://www.github.com/sahilb2)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">QueueUsingTwoStacks</span> {\n\n  <span class=\"hljs-comment\">/**\n   * Main method\n   *\n   * <span class=\"hljs-doctag\">@param</span> args Command line arguments\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n    <span class=\"hljs-type\">QueueWithStack</span> <span class=\"hljs-variable\">myQueue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QueueWithStack</span>();\n    myQueue.insert(<span class=\"hljs-number\">1</span>);\n    System.out.println(myQueue.peekBack()); <span class=\"hljs-comment\">// Will print 1</span>\n    <span class=\"hljs-comment\">// instack: [(top) 1]</span>\n    <span class=\"hljs-comment\">// outStack: []</span>\n    myQueue.insert(<span class=\"hljs-number\">2</span>);\n    System.out.println(myQueue.peekBack()); <span class=\"hljs-comment\">// Will print 2</span>\n    <span class=\"hljs-comment\">// instack: [(top) 2, 1]</span>\n    <span class=\"hljs-comment\">// outStack: []</span>\n    myQueue.insert(<span class=\"hljs-number\">3</span>);\n    System.out.println(myQueue.peekBack()); <span class=\"hljs-comment\">// Will print 3</span>\n    <span class=\"hljs-comment\">// instack: [(top) 3, 2, 1]</span>\n    <span class=\"hljs-comment\">// outStack: []</span>\n    myQueue.insert(<span class=\"hljs-number\">4</span>);\n    System.out.println(myQueue.peekBack()); <span class=\"hljs-comment\">// Will print 4</span>\n    <span class=\"hljs-comment\">// instack: [(top) 4, 3, 2, 1]</span>\n    <span class=\"hljs-comment\">// outStack: []</span>\n\n    System.out.println(myQueue.isEmpty()); <span class=\"hljs-comment\">// Will print false</span>\n\n    System.out.println(myQueue.remove()); <span class=\"hljs-comment\">// Will print 1</span>\n    System.out.println(myQueue.peekBack()); <span class=\"hljs-comment\">// Will print NULL</span>\n    <span class=\"hljs-comment\">// instack: []</span>\n    <span class=\"hljs-comment\">// outStack: [(top) 2, 3, 4]</span>\n\n    myQueue.insert(<span class=\"hljs-number\">5</span>);\n    System.out.println(myQueue.peekFront()); <span class=\"hljs-comment\">// Will print 2</span>\n    <span class=\"hljs-comment\">// instack: [(top) 5]</span>\n    <span class=\"hljs-comment\">// outStack: [(top) 2, 3, 4]</span>\n\n    myQueue.remove();\n    System.out.println(myQueue.peekFront()); <span class=\"hljs-comment\">// Will print 3</span>\n    <span class=\"hljs-comment\">// instack: [(top) 5]</span>\n    <span class=\"hljs-comment\">// outStack: [(top) 3, 4]</span>\n    myQueue.remove();\n    System.out.println(myQueue.peekFront()); <span class=\"hljs-comment\">// Will print 4</span>\n    <span class=\"hljs-comment\">// instack: [(top) 5]</span>\n    <span class=\"hljs-comment\">// outStack: [(top) 4]</span>\n    myQueue.remove();\n    <span class=\"hljs-comment\">// instack: [(top) 5]</span>\n    <span class=\"hljs-comment\">// outStack: []</span>\n    System.out.println(myQueue.peekFront()); <span class=\"hljs-comment\">// Will print 5</span>\n    <span class=\"hljs-comment\">// instack: []</span>\n    <span class=\"hljs-comment\">// outStack: [(top) 5]</span>\n    myQueue.remove();\n    <span class=\"hljs-comment\">// instack: []</span>\n    <span class=\"hljs-comment\">// outStack: []</span>\n\n    System.out.println(myQueue.isEmpty()); <span class=\"hljs-comment\">// Will print true</span>\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shoniavika",
      "email": "48753228+shoniavika@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "sahilb2",
      "email": "sahilbhatt@hotmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
