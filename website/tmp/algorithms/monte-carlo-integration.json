{
  "slug": "monte-carlo-integration",
  "name": "Monte Carlo Integration",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "julia": {
      "dir": "src/math/monte_carlo_integration.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/monte_carlo_integration.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nMonte carlo integration is a very easy and scalable way to do multidimentional integrals.\nHowever, only single variable integrals are considered.\n\n\nThis function takes three outputs:\n\t- `f`: the function to integrate. (at the momment only single variable is suported)\n\t- `N`: Number of points to sample. For most simple functions, 1000 to 10,000 should be okay.\n\t- `span`: a tuple (start, end) for the integration limits\n\nExamples:\n```julia\njulia&gt; monte_carlo_integration(x-&gt;3*x^2,100000,(0,1)) # integrate a polynomial\n1.0000037602209\n\njulia&gt; monte_carlo_integration(x-&gt;sin(x),1000,(0,pi)) # integrate the sin function\n2.0018927826323756\n\n```\n\tRefereces:\n-https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/monte-carlo-methods-in-practice/monte-carlo-integration\n-https://kingaa.github.io/sbied/pfilter/monteCarlo.html\n\nContributed By-: [Ved Mahajan](https://github.com/Ved-Mahajan)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> monte_carlo_integration(f,N,span)\n\tx_start,x_end = span\n\trand_array = rand(x_start:<span class=\"hljs-number\">0.0001</span>:x_end,N)\n\t<span class=\"hljs-keyword\">return</span> sum(f.(rand_array))*(x_end - x_start)/float(N)\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Ved Mahajan",
      "email": "74182892+Ved-Mahajan@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
