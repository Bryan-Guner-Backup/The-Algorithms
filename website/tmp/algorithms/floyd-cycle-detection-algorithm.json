{
  "slug": "floyd-cycle-detection-algorithm",
  "name": "Floyd Cycle Detection Algorithm",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "searching/floyd_cycle_detection_algorithm.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching/floyd_cycle_detection_algorithm.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Floyd&#x27;s Cycle\n * Detection](https://en.wikipedia.org/wiki/Cycle_detection) algorithm\n * @details\n * Given an array of integers containing `n + 1` integers, where each\n * integer is in the range [1, n] inclusive. If there is only one duplicate\n * number in the input array, this algorithm returns the duplicate number in\n * O(1) space and the time complexity is less than O(n^2) without modifying the\n * original array, otherwise, it returns -1.\n * @author [Swastika Gupta](https://github.com/Swastyy)\n */</span>\n \n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span> <span class=\"hljs-comment\">/// for uint32_t</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>    <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief The main function implements the search algorithm\n * @tparam T type of array\n * @param in_arr the input array\n * @param n size of the array\n * @returns the duplicate number\n */</span>\n<span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title function_\">duplicateNumber</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint32_t</span> *in_arr, <span class=\"hljs-type\">size_t</span> n)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>) {  <span class=\"hljs-comment\">// to find duplicate in an array its size should be atleast 2</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n    <span class=\"hljs-type\">uint32_t</span> tortoise = in_arr[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">///&lt; variable tortoise is used for the longer</span>\n                                    <span class=\"hljs-comment\">///&lt; jumps in the array</span>\n    <span class=\"hljs-type\">uint32_t</span> hare = in_arr[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">///&lt; variable hare is used for shorter jumps in the array</span>\n    <span class=\"hljs-keyword\">do</span> {                                   <span class=\"hljs-comment\">// loop to enter the cycle</span>\n        tortoise = in_arr[tortoise];       <span class=\"hljs-comment\">// tortoise is moving by one step</span>\n        hare = in_arr[in_arr[hare]];       <span class=\"hljs-comment\">// hare is moving by two steps</span>\n    } <span class=\"hljs-keyword\">while</span> (tortoise != hare);\n    tortoise = in_arr[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">while</span> (tortoise != hare) {             <span class=\"hljs-comment\">// loop to find the entry point of cycle</span>\n        tortoise = in_arr[tortoise];\n        hare = in_arr[hare];\n    }\n    <span class=\"hljs-keyword\">return</span> tortoise;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">uint32_t</span> arr[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">144</span>, <span class=\"hljs-number\">233</span>, <span class=\"hljs-number\">377</span>, <span class=\"hljs-number\">610</span>}; <span class=\"hljs-comment\">// input array</span>\n    <span class=\"hljs-type\">size_t</span> n = <span class=\"hljs-keyword\">sizeof</span>(arr) / <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1st test... &quot;</span>);\n    <span class=\"hljs-type\">uint32_t</span> index = duplicateNumber(arr, n); <span class=\"hljs-comment\">// calling the duplicateNumber function to check which number occurs twice in the array</span>\n    assert(index == <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// the number which occurs twice is 1 or not</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    test();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
