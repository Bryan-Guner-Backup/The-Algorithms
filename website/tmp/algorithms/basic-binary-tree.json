{
  "slug": "basic-binary-tree",
  "name": "Basic Binary Tree",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/basic_binary_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/basic_binary_tree.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Optional</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A Node has data variable and pointers to Nodes to its left and right.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.data = data\n        self.left: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n        self.right: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">display</span>(<span class=\"hljs-params\">tree: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># In Order traversal of the tree</span>\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; root = Node(1)\n    &gt;&gt;&gt; root.left = Node(0)\n    &gt;&gt;&gt; root.right = Node(2)\n    &gt;&gt;&gt; display(root)\n    0\n    1\n    2\n    &gt;&gt;&gt; display(root.right)\n    2\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> tree:\n        display(tree.left)\n        <span class=\"hljs-built_in\">print</span>(tree.data)\n        display(tree.right)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depth_of_tree</span>(<span class=\"hljs-params\">tree: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Recursive function that returns the depth of a binary tree.\n\n    &gt;&gt;&gt; root = Node(0)\n    &gt;&gt;&gt; depth_of_tree(root)\n    1\n    &gt;&gt;&gt; root.left = Node(0)\n    &gt;&gt;&gt; depth_of_tree(root)\n    2\n    &gt;&gt;&gt; root.right = Node(0)\n    &gt;&gt;&gt; depth_of_tree(root)\n    2\n    &gt;&gt;&gt; root.left.right = Node(0)\n    &gt;&gt;&gt; depth_of_tree(root)\n    3\n    &gt;&gt;&gt; depth_of_tree(root.left)\n    2\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">max</span>(depth_of_tree(tree.left), depth_of_tree(tree.right)) <span class=\"hljs-keyword\">if</span> tree <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_full_binary_tree</span>(<span class=\"hljs-params\">tree: Node</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns True if this is a full binary tree\n\n    &gt;&gt;&gt; root = Node(0)\n    &gt;&gt;&gt; is_full_binary_tree(root)\n    True\n    &gt;&gt;&gt; root.left = Node(0)\n    &gt;&gt;&gt; is_full_binary_tree(root)\n    False\n    &gt;&gt;&gt; root.right = Node(0)\n    &gt;&gt;&gt; is_full_binary_tree(root)\n    True\n    &gt;&gt;&gt; root.left.left = Node(0)\n    &gt;&gt;&gt; is_full_binary_tree(root)\n    False\n    &gt;&gt;&gt; root.right.right = Node(0)\n    &gt;&gt;&gt; is_full_binary_tree(root)\n    False\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> tree:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">if</span> tree.left <span class=\"hljs-keyword\">and</span> tree.right:\n        <span class=\"hljs-keyword\">return</span> is_full_binary_tree(tree.left) <span class=\"hljs-keyword\">and</span> is_full_binary_tree(tree.right)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> tree.left <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> tree.right\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># Main function for testing.</span>\n    tree = Node(<span class=\"hljs-number\">1</span>)\n    tree.left = Node(<span class=\"hljs-number\">2</span>)\n    tree.right = Node(<span class=\"hljs-number\">3</span>)\n    tree.left.left = Node(<span class=\"hljs-number\">4</span>)\n    tree.left.right = Node(<span class=\"hljs-number\">5</span>)\n    tree.left.right.left = Node(<span class=\"hljs-number\">6</span>)\n    tree.right.left = Node(<span class=\"hljs-number\">7</span>)\n    tree.right.left.left = Node(<span class=\"hljs-number\">8</span>)\n    tree.right.left.left.right = Node(<span class=\"hljs-number\">9</span>)\n\n    <span class=\"hljs-built_in\">print</span>(is_full_binary_tree(tree))\n    <span class=\"hljs-built_in\">print</span>(depth_of_tree(tree))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Tree is: &quot;</span>)\n    display(tree)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "dart": {
      "dir": "data_structures/binary_tree/basic_binary_tree.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures/binary_tree/basic_binary_tree.dart",
      "code": "<span class=\"hljs-comment\">//Author:Shawn</span>\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\n\n<span class=\"hljs-comment\">/*This is Class Node with constructor that contains\n * data variable to type data and left,right pointers\n*/</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n  <span class=\"hljs-keyword\">var</span> data;\n  <span class=\"hljs-keyword\">var</span> left;\n  <span class=\"hljs-keyword\">var</span> right;\n\n  Node(<span class=\"hljs-keyword\">var</span> data) {\n    <span class=\"hljs-keyword\">this</span>.data = data;\n    <span class=\"hljs-keyword\">this</span>.left = <span class=\"hljs-keyword\">null</span>;\n    <span class=\"hljs-keyword\">this</span>.right = <span class=\"hljs-keyword\">null</span>;\n  }\n}\n\n<span class=\"hljs-comment\">/*In order traversal of the tree*/</span>\n<span class=\"hljs-keyword\">void</span> display(<span class=\"hljs-keyword\">var</span> tree) {\n  <span class=\"hljs-keyword\">if</span> (tree == <span class=\"hljs-keyword\">null</span>) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-keyword\">if</span> (tree.left != <span class=\"hljs-keyword\">null</span>) {\n    display(tree.left);\n  }\n\n  <span class=\"hljs-built_in\">print</span>(tree.data);\n\n  <span class=\"hljs-keyword\">if</span> (tree.right != <span class=\"hljs-keyword\">null</span>) {\n    display(tree.right);\n  }\n\n  <span class=\"hljs-keyword\">return</span>;\n}\n\n<span class=\"hljs-comment\">/*\n *This is the recursive function to find the depth of\n * binary tree.\n*/</span>\n<span class=\"hljs-built_in\">double</span> depth_of_tree(<span class=\"hljs-keyword\">var</span> tree) {\n  <span class=\"hljs-keyword\">if</span> (tree == <span class=\"hljs-keyword\">null</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">var</span> depth_l_tree = depth_of_tree(tree.left);\n    <span class=\"hljs-keyword\">var</span> depth_r_tree = depth_of_tree(tree.right);\n\n    <span class=\"hljs-keyword\">if</span> (depth_l_tree &gt; depth_r_tree) {\n      <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span> + depth_l_tree);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span> + depth_r_tree);\n    }\n  }\n}\n\n<span class=\"hljs-comment\">/*This function returns that is it full binary tree or not*/</span>\n<span class=\"hljs-built_in\">bool</span> is_full_binary_tree(<span class=\"hljs-keyword\">var</span> tree) {\n  <span class=\"hljs-keyword\">if</span> (tree == <span class=\"hljs-keyword\">null</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (tree.left == <span class=\"hljs-keyword\">null</span> &amp;&amp; tree.right == <span class=\"hljs-keyword\">null</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (tree.left != <span class=\"hljs-keyword\">null</span> &amp;&amp; tree.right != <span class=\"hljs-keyword\">null</span>) {\n    <span class=\"hljs-keyword\">return</span> (is_full_binary_tree(tree.left) &amp;&amp; is_full_binary_tree(tree.right));\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n  }\n}\n\n<span class=\"hljs-comment\">//Main function for testing</span>\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-keyword\">var</span> tree = Node(<span class=\"hljs-number\">1</span>);\n  tree.left = Node(<span class=\"hljs-number\">2</span>);\n  tree.right = Node(<span class=\"hljs-number\">3</span>);\n  tree.left.left = Node(<span class=\"hljs-number\">4</span>);\n  tree.left.right = Node(<span class=\"hljs-number\">5</span>);\n  tree.left.right.left = Node(<span class=\"hljs-number\">6</span>);\n  tree.right.left = Node(<span class=\"hljs-number\">7</span>);\n  tree.right.left.left = Node(<span class=\"hljs-number\">8</span>);\n  tree.right.left.left.right = Node(<span class=\"hljs-number\">9</span>);\n\n  <span class=\"hljs-built_in\">print</span>(is_full_binary_tree(tree));\n  <span class=\"hljs-built_in\">print</span>(depth_of_tree(tree));\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Tree is:\\n&quot;</span>);\n  display(tree);\n}\n"
    },
    "julia": {
      "dir": "src/data_structures/binary_tree/basic_binary_tree.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/data_structures/binary_tree/basic_binary_tree.jl",
      "code": "<span class=\"hljs-keyword\">abstract type</span> AbstractBinaryTree <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-string\">&quot;&quot;&quot;\narray-based binary tree\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">abstract type</span> AbstractBinaryTree_arr&lt;:AbstractBinaryTree <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">mutable struct</span> BinaryTree{T}&lt;:AbstractBinaryTree_arr <span class=\"hljs-keyword\">where</span> T\n    n::<span class=\"hljs-built_in\">Int</span>\n    root::<span class=\"hljs-built_in\">Int</span>\n    par::<span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>}\n    lch::<span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>}\n    rch::<span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>}\n    val::<span class=\"hljs-built_in\">Vector</span>{T}\n<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">function</span> BinaryTree{T}(size::<span class=\"hljs-built_in\">Int</span>,rootval::T)<span class=\"hljs-keyword\">where</span> T\n    x=BinaryTree(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,zeros(T,size),zeros(T,size),zeros(T,size),<span class=\"hljs-built_in\">Vector</span>{T}(<span class=\"hljs-literal\">undef</span>,size))\n    x.val[<span class=\"hljs-number\">1</span>]=rootval\n    <span class=\"hljs-keyword\">return</span> x\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> Base.insert!(tree::BinaryTree,from::<span class=\"hljs-built_in\">Int</span>,value,place::<span class=\"hljs-built_in\">Bool</span>)\n    tree.n+=<span class=\"hljs-number\">1</span>\n    tree.par[tree.n]=from\n    <span class=\"hljs-keyword\">if</span> place\n        tree.rch[from]=tree.n\n    <span class=\"hljs-keyword\">else</span>\n        tree.lch[from]=tree.n\n    <span class=\"hljs-keyword\">end</span>\n    tree.val[tree.n]=value\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> Base.insert!(tree::BinaryTree,from::<span class=\"hljs-built_in\">Int</span>,value)\n    <span class=\"hljs-keyword\">if</span> tree.lch[from]==<span class=\"hljs-number\">0</span>\n        insert!(tree,from,value,<span class=\"hljs-literal\">false</span>)\n    <span class=\"hljs-keyword\">elseif</span> tree.rch[from]==<span class=\"hljs-number\">0</span>\n        insert!(tree,from,value,<span class=\"hljs-literal\">true</span>)\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># for AbstractBinaryTree_arr</span>\n<span class=\"hljs-keyword\">function</span> isleaf(tree::Tree,from::<span class=\"hljs-built_in\">Int</span>)::<span class=\"hljs-built_in\">Bool</span> <span class=\"hljs-keyword\">where</span> Tree&lt;:AbstractBinaryTree_arr\n    <span class=\"hljs-keyword\">return</span> tree.lch[from]==<span class=\"hljs-number\">0</span>&amp;&amp;tree.rch[from]==<span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> ch(tree::Tree,from::<span class=\"hljs-built_in\">Int</span>,select::<span class=\"hljs-built_in\">Bool</span>)<span class=\"hljs-keyword\">where</span> Tree&lt;:AbstractBinaryTree_arr\n    <span class=\"hljs-keyword\">if</span> select <span class=\"hljs-keyword\">return</span> tree.rch[from]\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> tree.lch[from]\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> set_ch(tree::Tree,from::<span class=\"hljs-built_in\">Int</span>,select::<span class=\"hljs-built_in\">Bool</span>,value::T)<span class=\"hljs-keyword\">where</span> {Tree&lt;:AbstractBinaryTree_arr,T}\n    <span class=\"hljs-keyword\">if</span> select tree.rch[from]=value\n    <span class=\"hljs-keyword\">else</span> tree.lch[from]=value\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> height(tree::Tree,from::<span class=\"hljs-built_in\">Int</span>=tree.root)<span class=\"hljs-keyword\">where</span> Tree&lt;:AbstractBinaryTree_arr\n    count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span> tree.lch[from]!=<span class=\"hljs-number\">0</span> count=height(tree,tree.lch[from])+<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">if</span> tree.rch[from]!=<span class=\"hljs-number\">0</span> count=max(height(tree,tree.rch[from])+<span class=\"hljs-number\">1</span>,count) <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> count\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> depth(tree::Tree,from::<span class=\"hljs-built_in\">Int</span>)<span class=\"hljs-keyword\">where</span> Tree&lt;:AbstractBinaryTree_arr\n    count=<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> from!=tree.root\n        count+=<span class=\"hljs-number\">1</span>\n        from=tree.par[from]\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> count\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> left(tree::Tree,from::<span class=\"hljs-built_in\">Int</span>=tree.root)<span class=\"hljs-keyword\">where</span> Tree&lt;:AbstractBinaryTree_arr\n    <span class=\"hljs-keyword\">if</span> tree.lch[from]==<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">return</span> from\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> left(tree,tree.lch[from])\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> right(tree::Tree,from::<span class=\"hljs-built_in\">Int</span>=tree.root)<span class=\"hljs-keyword\">where</span> Tree&lt;:AbstractBinaryTree_arr\n    <span class=\"hljs-keyword\">if</span> tree.rch[from]==<span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">return</span> from\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> right(tree,tree.rch[from])\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "Rratic@163.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "73381027+Rratic@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "kanthuc",
      "email": "srikanthuchavali@gmail.com",
      "commits": 1
    },
    {
      "name": "Prince Gangurde",
      "email": "50592495+Prince326@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ahish",
      "email": "ahishjayant9009@gmail.com",
      "commits": 1
    },
    {
      "name": "Akash Ali",
      "email": "45498607+AkashAli506@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shivam Arora",
      "email": "shivam.arora@inficold.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
