{
  "slug": "binary-search-tree-recursive",
  "name": "Binary Search Tree Recursive",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/binary_search_tree_recursive.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/binary_search_tree_recursive.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is a python3 implementation of binary search tree using recursion\n\nTo run tests:\npython -m unittest binary_search_tree_recursive.py\n\nTo run an example:\npython binary_search_tree_recursive.py\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> unittest\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Iterator, <span class=\"hljs-type\">Optional</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span>, parent: <span class=\"hljs-type\">Optional</span>[<span class=\"hljs-string\">&quot;Node&quot;</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.label = label\n        self.parent = parent\n        self.left: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n        self.right: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinarySearchTree</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.root: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Empties the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; assert t.root is None\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; assert t.root is not None\n        &quot;&quot;&quot;</span>\n        self.root = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Checks if the tree is empty\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; t.is_empty()\n        True\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; t.is_empty()\n        False\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">put</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Put a new node in the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; assert t.root.parent is None\n        &gt;&gt;&gt; assert t.root.label == 8\n\n        &gt;&gt;&gt; t.put(10)\n        &gt;&gt;&gt; assert t.root.right.parent == t.root\n        &gt;&gt;&gt; assert t.root.right.label == 10\n\n        &gt;&gt;&gt; t.put(3)\n        &gt;&gt;&gt; assert t.root.left.parent == t.root\n        &gt;&gt;&gt; assert t.root.left.label == 3\n        &quot;&quot;&quot;</span>\n        self.root = self._put(self.root, label)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_put</span>(<span class=\"hljs-params\">\n        self, node: <span class=\"hljs-type\">Optional</span>[Node], label: <span class=\"hljs-built_in\">int</span>, parent: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n    </span>) -&gt; Node:\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            node = Node(label, parent)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">if</span> label &lt; node.label:\n                node.left = self._put(node.left, label, node)\n            <span class=\"hljs-keyword\">elif</span> label &gt; node.label:\n                node.right = self._put(node.right, label, node)\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;Node with label <span class=\"hljs-subst\">{label}</span> already exists&quot;</span>)\n\n        <span class=\"hljs-keyword\">return</span> node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; Node:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Searches a node in the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; t.put(10)\n        &gt;&gt;&gt; node = t.search(8)\n        &gt;&gt;&gt; assert node.label == 8\n\n        &gt;&gt;&gt; node = t.search(3)\n        Traceback (most recent call last):\n            ...\n        Exception: Node with label 3 does not exist\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self._search(self.root, label)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_search</span>(<span class=\"hljs-params\">self, node: <span class=\"hljs-type\">Optional</span>[Node], label: <span class=\"hljs-built_in\">int</span></span>) -&gt; Node:\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;Node with label <span class=\"hljs-subst\">{label}</span> does not exist&quot;</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">if</span> label &lt; node.label:\n                node = self._search(node.left, label)\n            <span class=\"hljs-keyword\">elif</span> label &gt; node.label:\n                node = self._search(node.right, label)\n\n        <span class=\"hljs-keyword\">return</span> node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Removes a node in the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; t.put(10)\n        &gt;&gt;&gt; t.remove(8)\n        &gt;&gt;&gt; assert t.root.label == 10\n\n        &gt;&gt;&gt; t.remove(3)\n        Traceback (most recent call last):\n            ...\n        Exception: Node with label 3 does not exist\n        &quot;&quot;&quot;</span>\n        node = self.search(label)\n        <span class=\"hljs-keyword\">if</span> node.right <span class=\"hljs-keyword\">and</span> node.left:\n            lowest_node = self._get_lowest_node(node.right)\n            lowest_node.left = node.left\n            lowest_node.right = node.right\n            node.left.parent = lowest_node\n            <span class=\"hljs-keyword\">if</span> node.right:\n                node.right.parent = lowest_node\n            self._reassign_nodes(node, lowest_node)\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-keyword\">not</span> node.right <span class=\"hljs-keyword\">and</span> node.left:\n            self._reassign_nodes(node, node.left)\n        <span class=\"hljs-keyword\">elif</span> node.right <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> node.left:\n            self._reassign_nodes(node, node.right)\n        <span class=\"hljs-keyword\">else</span>:\n            self._reassign_nodes(node, <span class=\"hljs-literal\">None</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_reassign_nodes</span>(<span class=\"hljs-params\">self, node: Node, new_children: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> new_children:\n            new_children.parent = node.parent\n\n        <span class=\"hljs-keyword\">if</span> node.parent:\n            <span class=\"hljs-keyword\">if</span> node.parent.right == node:\n                node.parent.right = new_children\n            <span class=\"hljs-keyword\">else</span>:\n                node.parent.left = new_children\n        <span class=\"hljs-keyword\">else</span>:\n            self.root = new_children\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_get_lowest_node</span>(<span class=\"hljs-params\">self, node: Node</span>) -&gt; Node:\n        <span class=\"hljs-keyword\">if</span> node.left:\n            lowest_node = self._get_lowest_node(node.left)\n        <span class=\"hljs-keyword\">else</span>:\n            lowest_node = node\n            self._reassign_nodes(node, node.right)\n\n        <span class=\"hljs-keyword\">return</span> lowest_node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">exists</span>(<span class=\"hljs-params\">self, label: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Checks if a node exists in the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; t.put(10)\n        &gt;&gt;&gt; t.exists(8)\n        True\n\n        &gt;&gt;&gt; t.exists(3)\n        False\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">try</span>:\n            self.search(label)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">except</span> Exception:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_max_label</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Gets the max label inserted in the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; t.get_max_label()\n        Traceback (most recent call last):\n            ...\n        Exception: Binary search tree is empty\n\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; t.put(10)\n        &gt;&gt;&gt; t.get_max_label()\n        10\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Binary search tree is empty&quot;</span>)\n\n        node = self.root\n        <span class=\"hljs-keyword\">while</span> node.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            node = node.right\n\n        <span class=\"hljs-keyword\">return</span> node.label\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_min_label</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Gets the min label inserted in the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; t.get_min_label()\n        Traceback (most recent call last):\n            ...\n        Exception: Binary search tree is empty\n\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; t.put(10)\n        &gt;&gt;&gt; t.get_min_label()\n        8\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Binary search tree is empty&quot;</span>)\n\n        node = self.root\n        <span class=\"hljs-keyword\">while</span> node.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            node = node.left\n\n        <span class=\"hljs-keyword\">return</span> node.label\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inorder_traversal</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[Node]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the inorder traversal of the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; [i.label for i in t.inorder_traversal()]\n        []\n\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; t.put(10)\n        &gt;&gt;&gt; t.put(9)\n        &gt;&gt;&gt; [i.label for i in t.inorder_traversal()]\n        [8, 9, 10]\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self._inorder_traversal(self.root)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_inorder_traversal</span>(<span class=\"hljs-params\">self, node: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; Iterator[Node]:\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self._inorder_traversal(node.left)\n            <span class=\"hljs-keyword\">yield</span> node\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self._inorder_traversal(node.right)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">preorder_traversal</span>(<span class=\"hljs-params\">self</span>) -&gt; Iterator[Node]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the preorder traversal of the tree\n\n        &gt;&gt;&gt; t = BinarySearchTree()\n        &gt;&gt;&gt; [i.label for i in t.preorder_traversal()]\n        []\n\n        &gt;&gt;&gt; t.put(8)\n        &gt;&gt;&gt; t.put(10)\n        &gt;&gt;&gt; t.put(9)\n        &gt;&gt;&gt; [i.label for i in t.preorder_traversal()]\n        [8, 10, 9]\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self._preorder_traversal(self.root)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_preorder_traversal</span>(<span class=\"hljs-params\">self, node: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; Iterator[Node]:\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">yield</span> node\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self._preorder_traversal(node.left)\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> self._preorder_traversal(node.right)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinarySearchTreeTest</span>(unittest.TestCase):\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_get_binary_search_tree</span>() -&gt; BinarySearchTree:\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            3   10\n           / \\    \\\n          1   6    14\n             / \\   /\n            4   7 13\n             \\\n              5\n        &quot;&quot;&quot;</span>\n        t = BinarySearchTree()\n        t.put(<span class=\"hljs-number\">8</span>)\n        t.put(<span class=\"hljs-number\">3</span>)\n        t.put(<span class=\"hljs-number\">6</span>)\n        t.put(<span class=\"hljs-number\">1</span>)\n        t.put(<span class=\"hljs-number\">10</span>)\n        t.put(<span class=\"hljs-number\">14</span>)\n        t.put(<span class=\"hljs-number\">13</span>)\n        t.put(<span class=\"hljs-number\">4</span>)\n        t.put(<span class=\"hljs-number\">7</span>)\n        t.put(<span class=\"hljs-number\">5</span>)\n\n        <span class=\"hljs-keyword\">return</span> t\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_put</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = BinarySearchTree()\n        <span class=\"hljs-keyword\">assert</span> t.is_empty()\n\n        t.put(<span class=\"hljs-number\">8</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.label == <span class=\"hljs-number\">8</span>\n\n        t.put(<span class=\"hljs-number\">10</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n               \\\n                10\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.right.parent == t.root\n        <span class=\"hljs-keyword\">assert</span> t.root.right.label == <span class=\"hljs-number\">10</span>\n\n        t.put(<span class=\"hljs-number\">3</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            3   10\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.parent == t.root\n        <span class=\"hljs-keyword\">assert</span> t.root.left.label == <span class=\"hljs-number\">3</span>\n\n        t.put(<span class=\"hljs-number\">6</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            3   10\n             \\\n              6\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.parent == t.root.left\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.label == <span class=\"hljs-number\">6</span>\n\n        t.put(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            3   10\n           / \\\n          1   6\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(Exception):\n            t.put(<span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_search</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n\n        node = t.search(<span class=\"hljs-number\">6</span>)\n        <span class=\"hljs-keyword\">assert</span> node.label == <span class=\"hljs-number\">6</span>\n\n        node = t.search(<span class=\"hljs-number\">13</span>)\n        <span class=\"hljs-keyword\">assert</span> node.label == <span class=\"hljs-number\">13</span>\n\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(Exception):\n            t.search(<span class=\"hljs-number\">2</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_remove</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n\n        t.remove(<span class=\"hljs-number\">13</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            3   10\n           / \\    \\\n          1   6    14\n             / \\\n            4   7\n             \\\n              5\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.right.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.right.right.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n        t.remove(<span class=\"hljs-number\">7</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            3   10\n           / \\    \\\n          1   6    14\n             /\n            4\n             \\\n              5\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left.label == <span class=\"hljs-number\">4</span>\n\n        t.remove(<span class=\"hljs-number\">6</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            3   10\n           / \\    \\\n          1   4    14\n               \\\n                5\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.label == <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right.label == <span class=\"hljs-number\">5</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.parent == t.root.left\n\n        t.remove(<span class=\"hljs-number\">3</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            4   10\n           / \\    \\\n          1   5    14\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.label == <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.label == <span class=\"hljs-number\">5</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.parent == t.root\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.parent == t.root.left\n\n        t.remove(<span class=\"hljs-number\">4</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            5   10\n           /      \\\n          1        14\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.label == <span class=\"hljs-number\">5</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.parent == t.root\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_remove_2</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n\n        t.remove(<span class=\"hljs-number\">3</span>)\n        <span class=\"hljs-string\">r&quot;&quot;&quot;\n              8\n             / \\\n            4   10\n           / \\    \\\n          1   6    14\n             / \\   /\n            5   7 13\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.label == <span class=\"hljs-number\">4</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.label == <span class=\"hljs-number\">6</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.label == <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.right.label == <span class=\"hljs-number\">7</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left.label == <span class=\"hljs-number\">5</span>\n        <span class=\"hljs-keyword\">assert</span> t.root.left.parent == t.root\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.parent == t.root.left\n        <span class=\"hljs-keyword\">assert</span> t.root.left.left.parent == t.root.left\n        <span class=\"hljs-keyword\">assert</span> t.root.left.right.left.parent == t.root.left.right\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n        t.empty()\n        <span class=\"hljs-keyword\">assert</span> t.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> t.is_empty()\n\n        t.empty()\n        <span class=\"hljs-keyword\">assert</span> t.is_empty()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_exists</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n\n        <span class=\"hljs-keyword\">assert</span> t.exists(<span class=\"hljs-number\">6</span>)\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> t.exists(-<span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_get_max_label</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n\n        <span class=\"hljs-keyword\">assert</span> t.get_max_label() == <span class=\"hljs-number\">14</span>\n\n        t.empty()\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(Exception):\n            t.get_max_label()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_get_min_label</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n\n        <span class=\"hljs-keyword\">assert</span> t.get_min_label() == <span class=\"hljs-number\">1</span>\n\n        t.empty()\n        <span class=\"hljs-keyword\">with</span> self.assertRaises(Exception):\n            t.get_min_label()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_inorder_traversal</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n\n        inorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.inorder_traversal()]\n        <span class=\"hljs-keyword\">assert</span> inorder_traversal_nodes == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_preorder_traversal</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        t = self._get_binary_search_tree()\n\n        preorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.preorder_traversal()]\n        <span class=\"hljs-keyword\">assert</span> preorder_traversal_nodes == [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">13</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search_tree_example</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">r&quot;&quot;&quot;\n    Example\n                  8\n                 / \\\n                3   10\n               / \\    \\\n              1   6    14\n                 / \\   /\n                4   7 13\n                \\\n                5\n\n    Example After Deletion\n                  4\n                 / \\\n                1   7\n                     \\\n                      5\n\n    &quot;&quot;&quot;</span>\n\n    t = BinarySearchTree()\n    t.put(<span class=\"hljs-number\">8</span>)\n    t.put(<span class=\"hljs-number\">3</span>)\n    t.put(<span class=\"hljs-number\">6</span>)\n    t.put(<span class=\"hljs-number\">1</span>)\n    t.put(<span class=\"hljs-number\">10</span>)\n    t.put(<span class=\"hljs-number\">14</span>)\n    t.put(<span class=\"hljs-number\">13</span>)\n    t.put(<span class=\"hljs-number\">4</span>)\n    t.put(<span class=\"hljs-number\">7</span>)\n    t.put(<span class=\"hljs-number\">5</span>)\n\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n            8\n           / \\\\\n          3   10\n         / \\\\    \\\\\n        1   6    14\n           / \\\\   /\n          4   7 13\n           \\\\\n            5\n        &quot;&quot;&quot;</span>\n    )\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Label 6 exists:&quot;</span>, t.exists(<span class=\"hljs-number\">6</span>))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Label 13 exists:&quot;</span>, t.exists(<span class=\"hljs-number\">13</span>))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Label -1 exists:&quot;</span>, t.exists(-<span class=\"hljs-number\">1</span>))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Label 12 exists:&quot;</span>, t.exists(<span class=\"hljs-number\">12</span>))\n\n    <span class=\"hljs-comment\"># Prints all the elements of the list in inorder traversal</span>\n    inorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.inorder_traversal()]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Inorder traversal:&quot;</span>, inorder_traversal_nodes)\n\n    <span class=\"hljs-comment\"># Prints all the elements of the list in preorder traversal</span>\n    preorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.preorder_traversal()]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Preorder traversal:&quot;</span>, preorder_traversal_nodes)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Max. label:&quot;</span>, t.get_max_label())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Min. label:&quot;</span>, t.get_min_label())\n\n    <span class=\"hljs-comment\"># Delete elements</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nDeleting elements 13, 10, 8, 3, 6, 14&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n          4\n         / \\\\\n        1   7\n             \\\\\n              5\n        &quot;&quot;&quot;</span>\n    )\n    t.remove(<span class=\"hljs-number\">13</span>)\n    t.remove(<span class=\"hljs-number\">10</span>)\n    t.remove(<span class=\"hljs-number\">8</span>)\n    t.remove(<span class=\"hljs-number\">3</span>)\n    t.remove(<span class=\"hljs-number\">6</span>)\n    t.remove(<span class=\"hljs-number\">14</span>)\n\n    <span class=\"hljs-comment\"># Prints all the elements of the list in inorder traversal after delete</span>\n    inorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.inorder_traversal()]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Inorder traversal after delete:&quot;</span>, inorder_traversal_nodes)\n\n    <span class=\"hljs-comment\"># Prints all the elements of the list in preorder traversal after delete</span>\n    preorder_traversal_nodes = [i.label <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> t.preorder_traversal()]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Preorder traversal after delete:&quot;</span>, preorder_traversal_nodes)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Max. label:&quot;</span>, t.get_max_label())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Min. label:&quot;</span>, t.get_min_label())\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    binary_search_tree_example()\n"
    }
  },
  "contributors": [
    {
      "name": "Hao LI",
      "email": "8520588+Leo-LiHao@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Joan Martin Miralles",
      "email": "JoanMartin@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
