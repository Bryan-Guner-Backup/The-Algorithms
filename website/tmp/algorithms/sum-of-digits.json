{
  "slug": "sum-of-digits",
  "name": "Sum of Digits",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/sum_of_digits.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/sum_of_digits.py",
      "code": "<span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sum_of_digits</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Find the sum of digits of a number.\n\n    &gt;&gt;&gt; sum_of_digits(12345)\n    15\n    &gt;&gt;&gt; sum_of_digits(123)\n    6\n    &gt;&gt;&gt; sum_of_digits(-123)\n    6\n    &gt;&gt;&gt; sum_of_digits(0)\n    0\n    &quot;&quot;&quot;</span>\n    n = -n <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> n\n    res = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> n &gt; <span class=\"hljs-number\">0</span>:\n        res += n % <span class=\"hljs-number\">10</span>\n        n = n // <span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sum_of_digits_recursion</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Find the sum of digits of a number using recursion\n\n    &gt;&gt;&gt; sum_of_digits_recursion(12345)\n    15\n    &gt;&gt;&gt; sum_of_digits_recursion(123)\n    6\n    &gt;&gt;&gt; sum_of_digits_recursion(-123)\n    6\n    &gt;&gt;&gt; sum_of_digits_recursion(0)\n    0\n    &quot;&quot;&quot;</span>\n    n = -n <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> n\n    <span class=\"hljs-keyword\">return</span> n <span class=\"hljs-keyword\">if</span> n &lt; <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">else</span> n % <span class=\"hljs-number\">10</span> + sum_of_digits(n // <span class=\"hljs-number\">10</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sum_of_digits_compact</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Find the sum of digits of a number\n\n    &gt;&gt;&gt; sum_of_digits_compact(12345)\n    15\n    &gt;&gt;&gt; sum_of_digits_compact(123)\n    6\n    &gt;&gt;&gt; sum_of_digits_compact(-123)\n    6\n    &gt;&gt;&gt; sum_of_digits_compact(0)\n    0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-built_in\">int</span>(c) <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">abs</span>(n)))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">benchmark</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Benchmark code for comparing 3 functions,\n    with 3 different length int values.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nFor small_num = &quot;</span>, small_num, <span class=\"hljs-string\">&quot;:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\t\\tans =&quot;</span>,\n        sum_of_digits(small_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits(z.small_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits_recursion()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\n        sum_of_digits_recursion(small_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits_recursion(z.small_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits_compact()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\n        sum_of_digits_compact(small_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits_compact(z.small_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nFor medium_num = &quot;</span>, medium_num, <span class=\"hljs-string\">&quot;:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\t\\tans =&quot;</span>,\n        sum_of_digits(medium_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits(z.medium_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits_recursion()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\n        sum_of_digits_recursion(medium_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits_recursion(z.medium_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits_compact()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\n        sum_of_digits_compact(medium_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits_compact(z.medium_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nFor large_num = &quot;</span>, large_num, <span class=\"hljs-string\">&quot;:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\t\\tans =&quot;</span>,\n        sum_of_digits(large_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits(z.large_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits_recursion()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\n        sum_of_digits_recursion(large_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits_recursion(z.large_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; sum_of_digits_compact()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\n        sum_of_digits_compact(large_num),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(<span class=\"hljs-string\">&quot;z.sum_of_digits_compact(z.large_num)&quot;</span>, setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    small_num = <span class=\"hljs-number\">262144</span>\n    medium_num = <span class=\"hljs-number\">1125899906842624</span>\n    large_num = <span class=\"hljs-number\">1267650600228229401496703205376</span>\n    benchmark()\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "math/sum_of_digits.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/sum_of_digits.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * Copyright 2020 @author iamnambiar\n *\n * @file\n * \\brief A C++ Program to find the Sum of Digits of input integer.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Function to find the sum of the digits of an integer.\n * @param num The integer.\n * @return Sum of the digits of the integer.\n *\n * \\detail\n * First the algorithm check whether the num is negative or positive,\n * if it is negative, then we neglect the negative sign.\n * Next, the algorithm extract the last digit of num by dividing by 10\n * and extracting the remainder and this is added to the sum.\n * The number is then divided by 10 to remove the last digit.\n * This loop continues until num becomes 0.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sum_of_digits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num)</span> </span>{\n    <span class=\"hljs-comment\">// If num is negative then negative sign is neglected.</span>\n    <span class=\"hljs-keyword\">if</span> (num &lt; <span class=\"hljs-number\">0</span>) {\n        num = <span class=\"hljs-number\">-1</span> * num;\n    }\n    <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (num &gt; <span class=\"hljs-number\">0</span>) {\n        sum = sum + (num % <span class=\"hljs-number\">10</span>);\n        num = num / <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n\n<span class=\"hljs-comment\">/**\n * Function for testing the sum_of_digits() function with a\n * first test case of 119765 and assert statement.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> test_case_1 = <span class=\"hljs-built_in\">sum_of_digits</span>(<span class=\"hljs-number\">119765</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_1 == <span class=\"hljs-number\">29</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * Function for testing the sum_of_digits() function with a\n * second test case of -12256 and assert statement.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> test_case_2 = <span class=\"hljs-built_in\">sum_of_digits</span>(<span class=\"hljs-number\">-12256</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_2 == <span class=\"hljs-number\">16</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * Function for testing the sum_of_digits() with\n * all the test cases.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// First test.</span>\n    <span class=\"hljs-built_in\">test1</span>();\n    <span class=\"hljs-comment\">// Second test.</span>\n    <span class=\"hljs-built_in\">test2</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * Main Function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Success.&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Maths/SumOfDigits.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/SumOfDigits.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SumOfDigits</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">sumOfDigits</span><span class=\"hljs-params\">(-<span class=\"hljs-number\">123</span>)</span> == <span class=\"hljs-number\">6</span> &amp;&amp; sumOfDigitsRecursion(-<span class=\"hljs-number\">123</span>) == <span class=\"hljs-number\">6</span> &amp;&amp; sumOfDigitsFast(-<span class=\"hljs-number\">123</span>) == <span class=\"hljs-number\">6</span>;\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">sumOfDigits</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span> == <span class=\"hljs-number\">0</span> &amp;&amp; sumOfDigitsRecursion(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">0</span> &amp;&amp; sumOfDigitsFast(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">sumOfDigits</span><span class=\"hljs-params\">(<span class=\"hljs-number\">12345</span>)</span> == <span class=\"hljs-number\">15</span>\n        &amp;&amp; sumOfDigitsRecursion(<span class=\"hljs-number\">12345</span>) == <span class=\"hljs-number\">15</span>\n        &amp;&amp; sumOfDigitsFast(<span class=\"hljs-number\">12345</span>) == <span class=\"hljs-number\">15</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the sum of digits of a number\n   *\n   * <span class=\"hljs-doctag\">@param</span> number the number contains digits\n   * <span class=\"hljs-doctag\">@return</span> sum of digits of given {<span class=\"hljs-doctag\">@code</span> number}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sumOfDigits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n    number = number &lt; <span class=\"hljs-number\">0</span> ? -number : number; <span class=\"hljs-comment\">/* calculate abs value */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (number != <span class=\"hljs-number\">0</span>) {\n      sum += number % <span class=\"hljs-number\">10</span>;\n      number /= <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> sum;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the sum of digits of a number using recursion\n   *\n   * <span class=\"hljs-doctag\">@param</span> number the number contains digits\n   * <span class=\"hljs-doctag\">@return</span> sum of digits of given {<span class=\"hljs-doctag\">@code</span> number}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sumOfDigitsRecursion</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n    number = number &lt; <span class=\"hljs-number\">0</span> ? -number : number; <span class=\"hljs-comment\">/* calculate abs value */</span>\n    <span class=\"hljs-keyword\">return</span> number &lt; <span class=\"hljs-number\">10</span> ? number : number % <span class=\"hljs-number\">10</span> + sumOfDigitsRecursion(number / <span class=\"hljs-number\">10</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the sum of digits of a number using char array\n   *\n   * <span class=\"hljs-doctag\">@param</span> number the number contains digits\n   * <span class=\"hljs-doctag\">@return</span> sum of digits of given {<span class=\"hljs-doctag\">@code</span> number}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sumOfDigitsFast</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n    number = number &lt; <span class=\"hljs-number\">0</span> ? -number : number; <span class=\"hljs-comment\">/* calculate abs value */</span>\n    <span class=\"hljs-type\">char</span>[] digits = (number + <span class=\"hljs-string\">&quot;&quot;</span>).toCharArray();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; digits.length; ++i) {\n      sum += digits[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> sum;\n  }\n}\n"
    },
    "ruby": {
      "dir": "maths/sum_of_digits.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/sum_of_digits.rb",
      "code": "<span class=\"hljs-comment\"># Given a number, find sum of its digits.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">digits_sum</span><span class=\"hljs-params\">(n)</span></span>\n  a = <span class=\"hljs-number\">0</span>\n  sum = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">until</span> n.zero?\n    a = n % <span class=\"hljs-number\">10</span>\n    sum += a\n    n /= <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-keyword\">end</span>\n  sum\n<span class=\"hljs-keyword\">end</span>\n\nputs <span class=\"hljs-string\">&#x27;Sum of digits of 3456 is &#x27;</span> + digits_sum(<span class=\"hljs-number\">3456</span>).to_s\n<span class=\"hljs-comment\"># Sum of digits of 3456 is 18</span>\nputs <span class=\"hljs-string\">&#x27;Sum of digits of 1234 is &#x27;</span> + digits_sum(<span class=\"hljs-number\">1234</span>).to_s\n<span class=\"hljs-comment\"># Sum of digits of 1234 is 10</span>\nputs <span class=\"hljs-string\">&#x27;Sum of digits of 9251321 is &#x27;</span> + digits_sum(<span class=\"hljs-number\">9_251_321</span>).to_s\n<span class=\"hljs-comment\"># Sum of digits of 9251321 is 23</span>\n"
    },
    "matlab-octave": {
      "dir": "algorithms/maths/sum_of_digits.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/maths/sum_of_digits.m",
      "code": "<span class=\"hljs-comment\">%% Sum of digits</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span> = <span class=\"hljs-title\">sum_of_digits</span><span class=\"hljs-params\">(number)</span></span>\n<span class=\"hljs-comment\">%if someone input a negative no then it will make it positive</span>\n<span class=\"hljs-keyword\">if</span>(number&lt;<span class=\"hljs-number\">0</span>)    \n    number=(<span class=\"hljs-number\">-1</span>)*number;\n<span class=\"hljs-keyword\">end</span> <span class=\"hljs-comment\">%end of &quot;if&quot;</span>\nsum=<span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">while</span>(number&gt;<span class=\"hljs-number\">0</span>)\n    sum=sum+<span class=\"hljs-built_in\">rem</span>(number,<span class=\"hljs-number\">10</span>);\n    number=<span class=\"hljs-built_in\">fix</span>(number/<span class=\"hljs-number\">10</span>);\n<span class=\"hljs-keyword\">end</span>     <span class=\"hljs-comment\">% end for &quot;while&quot;</span>\n<span class=\"hljs-keyword\">end</span>     <span class=\"hljs-comment\">%end of </span>\n\n\n"
    }
  },
  "contributors": [
    {
      "name": "kNOzone",
      "email": "72206118+kNOzone@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Abhinav Anand",
      "email": "manasgmishra@gmail.com",
      "commits": 1
    },
    {
      "name": "Vignesh",
      "email": "ravivignesh2000@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
