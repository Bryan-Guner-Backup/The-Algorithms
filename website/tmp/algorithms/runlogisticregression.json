{
  "slug": "runlogisticregression",
  "name": "runLogisticRegression",
  "categories": ["machinelearning", "logisticregression"],
  "body": {},
  "implementations": {
    "matlab-octave": {
      "dir": "algorithms/machine_learning/Logistic-Regression/runLogisticRegression.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/machine_learning/Logistic-Regression/runLogisticRegression.m",
      "code": "clear; close all; clc;\n\nData = load(<span class=\"hljs-string\">&#x27;data.txt&#x27;</span>);\nx = Data(:, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]); Y = Data(:, <span class=\"hljs-number\">3</span>);\n\nfprintf([<span class=\"hljs-string\">&#x27;Plotting data with + indicating (Y = 1) examples and o &#x27;</span> ...\n         <span class=\"hljs-string\">&#x27;indicating (Y = 0) examples.\\n&#x27;</span>]);\n\nplotdata(x, Y);\n \n<span class=\"hljs-built_in\">hold</span> on;\n\nxlabel(<span class=\"hljs-string\">&#x27;Exam 1 score&#x27;</span>);\nylabel(<span class=\"hljs-string\">&#x27;Exam 2 score&#x27;</span>);\n\n<span class=\"hljs-built_in\">legend</span>(<span class=\"hljs-string\">&#x27;Admitted&#x27;</span>, <span class=\"hljs-string\">&#x27;Not admitted&#x27;</span>);\n<span class=\"hljs-built_in\">hold</span> off;\n\nfprintf(<span class=\"hljs-string\">&#x27;\\nProgram paused, press enter to continue.\\n&#x27;</span>);\npause;\n\n[m, n] = <span class=\"hljs-built_in\">size</span>(x);\n\nX = [<span class=\"hljs-built_in\">ones</span>(m, <span class=\"hljs-number\">1</span>) x];\n\nInitial_Theta = <span class=\"hljs-built_in\">zeros</span>(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n\n[Cost, Grad] = costfunction(Initial_Theta, X, Y);\n\nfprintf(<span class=\"hljs-string\">&#x27;Cost at initial theta (zeros): %f\\n&#x27;</span>, Cost);\nfprintf(<span class=\"hljs-string\">&#x27;Expected cost (approx): 0.693\\n&#x27;</span>);\nfprintf(<span class=\"hljs-string\">&#x27;Gradient at initial theta (zeros): \\n&#x27;</span>);\nfprintf(<span class=\"hljs-string\">&#x27; %f \\n&#x27;</span>, Grad);\nfprintf(<span class=\"hljs-string\">&#x27;Expected gradients (approx):\\n -0.1000\\n -12.0092\\n -11.2628\\n&#x27;</span>);\n\nTest_Theta = [<span class=\"hljs-number\">-24</span>; <span class=\"hljs-number\">0.2</span>; <span class=\"hljs-number\">0.2</span>];\n[Cost, Grad] = costfunction(Test_Theta, X, Y);\n\nfprintf(<span class=\"hljs-string\">&#x27;\\nCost at test theta: %f\\n&#x27;</span>, Cost);\nfprintf(<span class=\"hljs-string\">&#x27;Expected cost (approx): 0.218\\n&#x27;</span>);\nfprintf(<span class=\"hljs-string\">&#x27;Gradient at test theta: \\n&#x27;</span>);\nfprintf(<span class=\"hljs-string\">&#x27; %f \\n&#x27;</span>, Grad);\nfprintf(<span class=\"hljs-string\">&#x27;Expected gradients (approx):\\n 0.043\\n 2.566\\n 2.647\\n&#x27;</span>);\n\nfprintf(<span class=\"hljs-string\">&#x27;\\nProgram paused, press enter to continue.\\n&#x27;</span>);\npause;\n\nOptions = optimset(<span class=\"hljs-string\">&#x27;GradObj&#x27;</span>, <span class=\"hljs-string\">&#x27;on&#x27;</span>, <span class=\"hljs-string\">&#x27;MaxIter&#x27;</span>, <span class=\"hljs-number\">400</span>);\n \n[Theta, Cost] = ...\n\tfminunc(@(t)(costfunction(t, X, Y)), Initial_Theta, Options);\n\nfprintf(<span class=\"hljs-string\">&#x27;Cost at theta found by fminunc: %f\\n&#x27;</span>, Cost);\nfprintf(<span class=\"hljs-string\">&#x27;Expected cost (approx): 0.203\\n&#x27;</span>);\nfprintf(<span class=\"hljs-string\">&#x27;theta: \\n&#x27;</span>);\nfprintf(<span class=\"hljs-string\">&#x27; %f \\n&#x27;</span>, Theta);\nfprintf(<span class=\"hljs-string\">&#x27;Expected theta (approx):\\n&#x27;</span>);\nfprintf(<span class=\"hljs-string\">&#x27; -25.161\\n 0.206\\n 0.201\\n&#x27;</span>);\n\nplotdecisionboundary(Theta, X, Y);\n \n<span class=\"hljs-built_in\">hold</span> on;\n\nxlabel(<span class=\"hljs-string\">&#x27;Exam 1 score&#x27;</span>);\nylabel(<span class=\"hljs-string\">&#x27;Exam 2 score&#x27;</span>);\n\n<span class=\"hljs-built_in\">legend</span>(<span class=\"hljs-string\">&#x27;Admitted&#x27;</span>, <span class=\"hljs-string\">&#x27;Not admitted&#x27;</span>);\n<span class=\"hljs-built_in\">hold</span> off;\n\nfprintf(<span class=\"hljs-string\">&#x27;\\nProgram paused, press enter to continue.\\n&#x27;</span>);\npause; \n\nProb = Sigmoid([<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">45</span> <span class=\"hljs-number\">85</span>] * Theta);\nfprintf([<span class=\"hljs-string\">&#x27;For a student with scores 45 and 85, we predict an admission &#x27;</span> ...\n         <span class=\"hljs-string\">&#x27;probability of %f\\n&#x27;</span>], Prob);\nfprintf(<span class=\"hljs-string\">&#x27;Expected value: 0.775 +/- 0.002\\n\\n&#x27;</span>);\n\nP = Predict(Theta, X);\n\nfprintf(<span class=\"hljs-string\">&#x27;Train accuracy: %f\\n&#x27;</span>, <span class=\"hljs-built_in\">mean</span>(double(P == Y)) * <span class=\"hljs-number\">100</span>);\nfprintf(<span class=\"hljs-string\">&#x27;Expected accuracy (approx): 89.0\\n&#x27;</span>);\nfprintf(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);"
    }
  },
  "contributors": [
    {
      "name": "Anesh Kaul",
      "email": "aneshkaul@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
