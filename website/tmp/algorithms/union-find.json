{
  "slug": "union-find",
  "name": "Union Find",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/union_find.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/union_find.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file union_find.c\n * @brief [Union\n * find](https://en.wikipedia.org/wiki/Disjoint-set_data_structure) algorithm.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_SIZE 1000 <span class=\"hljs-comment\">/**&lt; maximum number of elements in the set */</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Find index of or value in an array\n *\n * @param [in,out] p array to search and update\n * @param x value to search\n * @return value at the index `x`\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *p, <span class=\"hljs-type\">int</span> x)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (x &gt;= MAX_SIZE)\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Out-of bounds value\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (p[x] == x)\n    {\n        <span class=\"hljs-keyword\">return</span> x;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        p[x] = find(p, p[x]);\n        <span class=\"hljs-keyword\">return</span> p[x];\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to join\n * @param [in,out] p array to join in\n * @param x value or index to join to\n * @param y value or index to join from\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">join</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *p, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> { p[find(p, x)] = find(p, y); }\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> union_set[MAX_SIZE];\n\n    <span class=\"hljs-comment\">// Have all array indexes that you need to use reference themselves</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n    {\n        union_set[i] = i;\n    }\n    <span class=\"hljs-comment\">// p = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</span>\n\n    join(union_set, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The array is now: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, union_set[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    <span class=\"hljs-comment\">// Now 3 and 5 are groupped together, that is find(3) = find(5)</span>\n    <span class=\"hljs-comment\">// p = {0, 1, 2, 5, 4, 5, 6, 7, 8, 9}</span>\n\n    join(union_set, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The array is now: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, union_set[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">// Now 3, 5 and are groupped together, find(3) = find(5) = find(8)</span>\n    <span class=\"hljs-comment\">// p = {0, 1, 2, 5, 4, 8, 6, 7, 8, 9}</span>\n    join(union_set, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-keyword\">if</span> (find(union_set, <span class=\"hljs-number\">0</span>) == find(union_set, <span class=\"hljs-number\">3</span>))\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;0 and 3 are groupped together\\n&quot;</span>);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The array is now: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, union_set[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "swift": {
      "dir": "data_structures/union_find/union_find.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/data_structures/union_find/union_find.swift",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UnionFindNode</span> {\n    <span class=\"hljs-keyword\">var</span> rank <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> parent: <span class=\"hljs-type\">UnionFindNode</span>? <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">nil</span>\n\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">findRoot</span>() -&gt; <span class=\"hljs-type\">UnionFindNode</span> {\n        <span class=\"hljs-keyword\">var</span> x <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> parent <span class=\"hljs-operator\">=</span> x.parent {\n            x.parent <span class=\"hljs-operator\">=</span> parent.parent <span class=\"hljs-operator\">??</span> parent\n            x <span class=\"hljs-operator\">=</span> parent\n        }\n        <span class=\"hljs-keyword\">return</span> x\n    }\n\n    <span class=\"hljs-keyword\">@discardableResult</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">union</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">x</span>: <span class=\"hljs-type\">UnionFindNode</span>, <span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">y</span>: <span class=\"hljs-type\">UnionFindNode</span>) -&gt; <span class=\"hljs-type\">UnionFindNode</span> {\n        <span class=\"hljs-keyword\">var</span> x <span class=\"hljs-operator\">=</span> x.findRoot()\n        <span class=\"hljs-keyword\">var</span> y <span class=\"hljs-operator\">=</span> y.findRoot()\n\n        <span class=\"hljs-keyword\">guard</span> x <span class=\"hljs-operator\">!==</span> y <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> x }\n\n        <span class=\"hljs-keyword\">if</span> x.rank <span class=\"hljs-operator\">&lt;</span> y.rank {\n            <span class=\"hljs-built_in\">swap</span>(<span class=\"hljs-operator\">&amp;</span>x, <span class=\"hljs-operator\">&amp;</span>y)\n        }\n\n        y.parent <span class=\"hljs-operator\">=</span> x\n        <span class=\"hljs-keyword\">if</span> x.rank <span class=\"hljs-operator\">==</span> y.rank {\n            x.rank <span class=\"hljs-operator\">=</span> y.rank <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n        }\n        \n        <span class=\"hljs-keyword\">return</span> x\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">inSameSet</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">x</span>: <span class=\"hljs-type\">UnionFindNode</span>, <span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">y</span>: <span class=\"hljs-type\">UnionFindNode</span>) -&gt; <span class=\"hljs-type\">Bool</span> {\n        <span class=\"hljs-keyword\">return</span> x.findRoot() <span class=\"hljs-operator\">===</span> y.findRoot()\n    }\n}\n\n\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">testUnionFind</span>() {\n    <span class=\"hljs-keyword\">let</span> a <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UnionFindNode</span>()\n    <span class=\"hljs-keyword\">let</span> b <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UnionFindNode</span>()\n    <span class=\"hljs-keyword\">let</span> c <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UnionFindNode</span>()\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, b&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, b))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;b, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(b, c))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, c))\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Joining a, b&quot;</span>)\n\n    <span class=\"hljs-type\">UnionFindNode</span>.union(a, b)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, b&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, b))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;b, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(b, c))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, c))\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Joining b, c&quot;</span>)\n\n    <span class=\"hljs-type\">UnionFindNode</span>.union(b, c)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, b&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, b))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;b, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(b, c))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, c&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, c))\n\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;New node d&quot;</span>)\n    <span class=\"hljs-keyword\">let</span> d <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">UnionFindNode</span>()\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, d&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, d))\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Joining d, c&quot;</span>)\n    <span class=\"hljs-type\">UnionFindNode</span>.union(d, c)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a, d&quot;</span>, <span class=\"hljs-type\">UnionFindNode</span>.inSameSet(a, d))\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Sven Weidauer",
      "email": "sven@5sw.de",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Gilberto Alexandre dos Santos",
      "email": "gilberto.alexsantos@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
