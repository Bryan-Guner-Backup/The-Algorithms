{
  "slug": "prefix-function",
  "name": "Prefix Function",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/prefix_function.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/prefix_function.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://cp-algorithms.com/string/prefix-function.html\n\nPrefix function Knuth–Morris–Pratt algorithm\n\nDifferent algorithm than Knuth-Morris-Pratt pattern finding\n\nE.x. Finding longest prefix which is also suffix\n\nTime Complexity: O(n) - where n is the length of the string\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prefix_function</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    For the given string this function computes value for each index(i),\n    which represents the longest coincidence of prefix and sufix\n    for given substring (input_str[0...i])\n\n    For the value of the first element the algorithm always returns 0\n\n    &gt;&gt;&gt; prefix_function(&quot;aabcdaabc&quot;)\n    [0, 1, 0, 0, 0, 1, 2, 3, 4]\n    &gt;&gt;&gt; prefix_function(&quot;asdasdad&quot;)\n    [0, 0, 0, 1, 2, 3, 4, 0]\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># list for the result values</span>\n    prefix_result = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">len</span>(input_string)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(input_string)):\n\n        <span class=\"hljs-comment\"># use last results for better performance - dynamic programming</span>\n        j = prefix_result[i - <span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">while</span> j &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> input_string[i] != input_string[j]:\n            j = prefix_result[j - <span class=\"hljs-number\">1</span>]\n\n        <span class=\"hljs-keyword\">if</span> input_string[i] == input_string[j]:\n            j += <span class=\"hljs-number\">1</span>\n        prefix_result[i] = j\n\n    <span class=\"hljs-keyword\">return</span> prefix_result\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">longest_prefix</span>(<span class=\"hljs-params\">input_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Prefix-function use case\n    Finding longest prefix which is sufix as well\n\n    &gt;&gt;&gt; longest_prefix(&quot;aabcdaabc&quot;)\n    4\n    &gt;&gt;&gt; longest_prefix(&quot;asdasdad&quot;)\n    4\n    &gt;&gt;&gt; longest_prefix(&quot;abcab&quot;)\n    2\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># just returning maximum value of the array gives us answer</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(prefix_function(input_str))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/PrefixFunction.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/PrefixFunction.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\n\n<span class=\"hljs-comment\">/// https://cp-algorithms.com/string/prefix-function.html</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Prefix function Knuth–Morris–Pratt algorithm</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Different algorithm than Knuth-Morris-Pratt pattern finding</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// E.x. Finding longest prefix which is also suffix</span>\n<span class=\"hljs-comment\">/// Time Complexity: O(n) - where n is the length of the string</span>\n<span class=\"hljs-keyword\">module</span> PrefixFunction =\n\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\n    <span class=\"hljs-comment\">/// For the given string this function computes value for each &lt;c&gt;index(i)&lt;/c&gt;,</span>\n    <span class=\"hljs-comment\">/// which represents the longest coincidence of prefix and suffix</span>\n    <span class=\"hljs-comment\">/// for given substring &lt;c&gt;inputString[0...i]&lt;/c&gt;.</span>\n    <span class=\"hljs-comment\">/// For the value of the first element the algorithm always returns 0</span>\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;example&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;code&gt;</span>\n    <span class=\"hljs-comment\">/// prefix_function &quot;aabcdaabc&quot;</span>\n    <span class=\"hljs-comment\">/// [0, 1, 0, 0, 0, 1, 2, 3, 4]</span>\n    <span class=\"hljs-comment\">///</span>\n    <span class=\"hljs-comment\">/// prefix_function(&quot;asdasdad&quot;)</span>\n    <span class=\"hljs-comment\">/// [0, 0, 0, 1, 2, 3, 4, 0]</span>\n    <span class=\"hljs-comment\">/// &lt;/code&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;/example&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;inputString&quot;&gt;&lt;/param&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;returns&gt;A string of &lt;c&gt;int&lt;/c&gt;&lt;/returns&gt;</span>\n    <span class=\"hljs-keyword\">let</span> prefixFunction (inputString: string): list&lt;int&gt; =\n\n        <span class=\"hljs-comment\">// List for the result values</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> prefixResult =\n            [| <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span> .. (inputString.Length - <span class=\"hljs-number\">1</span>) -&gt; <span class=\"hljs-number\">0</span> |]\n\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">to</span> (inputString.Length - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-comment\">// Use last results for better performance - dynamic programming</span>\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> j = prefixResult.[i - <span class=\"hljs-number\">1</span>]\n\n            <span class=\"hljs-keyword\">while</span> j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; inputString.[i] &lt;&gt; inputString.[j] <span class=\"hljs-keyword\">do</span>\n                j &lt;- prefixResult.[j - <span class=\"hljs-number\">1</span>]\n\n            <span class=\"hljs-keyword\">if</span> inputString.[i] = inputString.[j] <span class=\"hljs-keyword\">then</span>\n                j &lt;- j + <span class=\"hljs-number\">1</span>\n\n            prefixResult.SetValue(j, i)\n\n        prefixResult |&gt; List.ofArray\n\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\n    <span class=\"hljs-comment\">/// Prefix-function use case</span>\n    <span class=\"hljs-comment\">/// Finding longest prefix which is suffix as well</span>\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;example&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;code&gt;</span>\n    <span class=\"hljs-comment\">/// longest_prefix &quot;aabcdaabc&quot;</span>\n    <span class=\"hljs-comment\">/// 4</span>\n    <span class=\"hljs-comment\">/// longest_prefix &quot;asdasdad&quot;</span>\n    <span class=\"hljs-comment\">/// 4</span>\n    <span class=\"hljs-comment\">/// longest_prefix &quot;abcab&quot;</span>\n    <span class=\"hljs-comment\">/// 2</span>\n    <span class=\"hljs-comment\">/// &lt;/code&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;/example&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;inputString&quot;&gt;&lt;/param&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;returns&gt;Returns &lt;c&gt;int&lt;/c&gt;&lt;/returns&gt;</span>\n    <span class=\"hljs-keyword\">let</span> longestPrefix (inputString: string): int =\n        <span class=\"hljs-comment\">// Just returning maximum value of the array gives us answer</span>\n        prefixFunction (inputString)\n        |&gt; System.Linq.Enumerable.Max\n"
    }
  },
  "contributors": [
    {
      "name": "Nika Losaberidze",
      "email": "nlosa16@freeuni.edu.ge",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
