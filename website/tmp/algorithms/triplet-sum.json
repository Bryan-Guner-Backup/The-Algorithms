{
  "slug": "triplet-sum",
  "name": "Triplet Sum",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/triplet_sum.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/triplet_sum.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nGiven an array of integers and another integer target,\nwe are required to find a triplet from the array such that it&#x27;s sum is equal to\nthe target.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> itertools <span class=\"hljs-keyword\">import</span> permutations\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> randint\n<span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> repeat\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_dataset</span>() -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], <span class=\"hljs-built_in\">int</span>]:\n    arr = [randint(-<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">1000</span>) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>)]\n    r = randint(-<span class=\"hljs-number\">5000</span>, <span class=\"hljs-number\">5000</span>)\n    <span class=\"hljs-keyword\">return</span> (arr, r)\n\n\ndataset = make_dataset()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">triplet_sum1</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns a triplet in the array with sum equal to target,\n    else (0, 0, 0).\n    &gt;&gt;&gt; triplet_sum1([13, 29, 7, 23, 5], 35)\n    (5, 7, 23)\n    &gt;&gt;&gt; triplet_sum1([37, 9, 19, 50, 44], 65)\n    (9, 19, 37)\n    &gt;&gt;&gt; arr = [6, 47, 27, 1, 15]\n    &gt;&gt;&gt; target = 11\n    &gt;&gt;&gt; triplet_sum1(arr, target)\n    (0, 0, 0)\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> triplet <span class=\"hljs-keyword\">in</span> permutations(arr, <span class=\"hljs-number\">3</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">sum</span>(triplet) == target:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">sorted</span>(triplet))\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">triplet_sum2</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns a triplet in the array with sum equal to target,\n    else (0, 0, 0).\n    &gt;&gt;&gt; triplet_sum2([13, 29, 7, 23, 5], 35)\n    (5, 7, 23)\n    &gt;&gt;&gt; triplet_sum2([37, 9, 19, 50, 44], 65)\n    (9, 19, 37)\n    &gt;&gt;&gt; arr = [6, 47, 27, 1, 15]\n    &gt;&gt;&gt; target = 11\n    &gt;&gt;&gt; triplet_sum2(arr, target)\n    (0, 0, 0)\n    &quot;&quot;&quot;</span>\n    arr.sort()\n    n = <span class=\"hljs-built_in\">len</span>(arr)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>):\n        left, right = i + <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span> left &lt; right:\n            <span class=\"hljs-keyword\">if</span> arr[i] + arr[left] + arr[right] == target:\n                <span class=\"hljs-keyword\">return</span> (arr[i], arr[left], arr[right])\n            <span class=\"hljs-keyword\">elif</span> arr[i] + arr[left] + arr[right] &lt; target:\n                left += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">elif</span> arr[i] + arr[left] + arr[right] &gt; target:\n                right -= <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">solution_times</span>() -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">float</span>]:\n    setup_code = <span class=\"hljs-string\">&quot;&quot;&quot;\nfrom __main__ import dataset, triplet_sum1, triplet_sum2\n&quot;&quot;&quot;</span>\n    test_code1 = <span class=\"hljs-string\">&quot;&quot;&quot;\ntriplet_sum1(*dataset)\n&quot;&quot;&quot;</span>\n    test_code2 = <span class=\"hljs-string\">&quot;&quot;&quot;\ntriplet_sum2(*dataset)\n&quot;&quot;&quot;</span>\n    times1 = repeat(setup=setup_code, stmt=test_code1, repeat=<span class=\"hljs-number\">5</span>, number=<span class=\"hljs-number\">10000</span>)\n    times2 = repeat(setup=setup_code, stmt=test_code2, repeat=<span class=\"hljs-number\">5</span>, number=<span class=\"hljs-number\">10000</span>)\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">min</span>(times1), <span class=\"hljs-built_in\">min</span>(times2))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n    times = solution_times()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;The time for naive implementation is <span class=\"hljs-subst\">{times[<span class=\"hljs-number\">0</span>]}</span>.&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;The time for optimized implementation is <span class=\"hljs-subst\">{times[<span class=\"hljs-number\">1</span>]}</span>.&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Kushagra Bansal",
      "email": "kushagrabansalajmer@gmail.com",
      "commits": 1
    },
    {
      "name": "Hasenn",
      "email": "eliottarloveyrier@live.fr",
      "commits": 1
    },
    {
      "name": "NEERAJ ADITYANANTH POLAMPALLI",
      "email": "65017645+NEERAJAP2001@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
