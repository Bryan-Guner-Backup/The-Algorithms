{
  "slug": "fast-power",
  "name": "Fast Power",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/fast_power.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/fast_power.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Faster computation for \\f$a^b\\f$\n *\n * Program that computes \\f$a^b\\f$ in \\f$O(logN)\\f$ time.\n * It is based on formula that:\n * 1. if \\f$b\\f$ is even:\n *  \\f$a^b = a^\\frac{b}{2} \\cdot a^\\frac{b}{2} = {a^\\frac{b}{2}}^2\\f$\n * 2. if \\f$b\\f$ is odd: \\f$a^b = a^\\frac{b-1}{2}\n *  \\cdot a^\\frac{b-1}{2} \\cdot a = {a^\\frac{b-1}{2}}^2 \\cdot a\\f$\n *\n * We can compute \\f$a^b\\f$ recursively using above algorithm.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * algorithm implementation for \\f$a^b\\f$\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">fast_power_recursive</span><span class=\"hljs-params\">(T a, T b)</span> </span>{\n    <span class=\"hljs-comment\">// negative power. a^b = 1 / (a^-b)</span>\n    <span class=\"hljs-keyword\">if</span> (b &lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1.0</span> / <span class=\"hljs-built_in\">fast_power_recursive</span>(a, -b);\n\n    <span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    T bottom = <span class=\"hljs-built_in\">fast_power_recursive</span>(a, b &gt;&gt; <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">// Since it is integer division b/2 = (b-1)/2 where b is odd.</span>\n    <span class=\"hljs-comment\">// Therefore, case2 is easily solved by integer division.</span>\n\n    <span class=\"hljs-type\">double</span> result;\n    <span class=\"hljs-keyword\">if</span> ((b &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// case1</span>\n        result = bottom * bottom;\n    <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// case2</span>\n        result = bottom * bottom * a;\n    <span class=\"hljs-keyword\">return</span> result;\n}\n\n<span class=\"hljs-comment\">/**\n    Same algorithm with little different formula.\n    It still calculates in \\f$O(\\log N)\\f$\n*/</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">fast_power_linear</span><span class=\"hljs-params\">(T a, T b)</span> </span>{\n    <span class=\"hljs-comment\">// negative power. a^b = 1 / (a^-b)</span>\n    <span class=\"hljs-keyword\">if</span> (b &lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1.0</span> / <span class=\"hljs-built_in\">fast_power_linear</span>(a, -b);\n\n    <span class=\"hljs-type\">double</span> result = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (b) {\n        <span class=\"hljs-keyword\">if</span> (b &amp; <span class=\"hljs-number\">1</span>)\n            result = result * a;\n        a = a * a;\n        b = b &gt;&gt; <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> result;\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));\n    std::ios_base::<span class=\"hljs-built_in\">sync_with_stdio</span>(<span class=\"hljs-literal\">false</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Testing...&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) {\n        <span class=\"hljs-type\">int</span> a = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">20</span> - <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-type\">int</span> b = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">20</span> - <span class=\"hljs-number\">10</span>;\n        std::cout &lt;&lt; std::endl &lt;&lt; <span class=\"hljs-string\">&quot;Calculating &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; b &lt;&lt; std::endl;\n        <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fast_power_recursive</span>(a, b) == std::<span class=\"hljs-built_in\">pow</span>(a, b));\n        <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fast_power_linear</span>(a, b) == std::<span class=\"hljs-built_in\">pow</span>(a, b));\n\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;------ &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; = &quot;</span>\n                  &lt;&lt; <span class=\"hljs-built_in\">fast_power_recursive</span>(a, b) &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-type\">int64_t</span> a, b;\n    std::cin &gt;&gt; a &gt;&gt; b;\n\n    std::cout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; = &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">fast_power_recursive</span>(a, b)\n              &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot;^&quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; = &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">fast_power_linear</span>(a, b) &lt;&lt; std::endl;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
