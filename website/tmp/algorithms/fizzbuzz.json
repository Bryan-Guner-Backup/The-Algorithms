{
  "slug": "fizzbuzz",
  "name": "FizzBuzz",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "dart": {
      "dir": "other/FizzBuzz.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/other/FizzBuzz.dart",
      "code": "<span class=\"hljs-comment\">//Title:FizzBuzz</span>\n<span class=\"hljs-comment\">// Author:ShivamVerma</span>\n<span class=\"hljs-comment\">// Email:shivamthegreat.sv@gmail.com</span>\n\n<span class=\"hljs-comment\">// Write a program that prints the numbers from 1 to 100. But for multiples of three print &quot;Fizz&quot; instead of the number and for the multiples of five print &quot;Buzz&quot;. For numbers which are multiples of both three and five print &quot;FizzBuzz&quot;.</span>\n\n<span class=\"hljs-keyword\">void</span> main() {\n  fizzBuzz();\n}\n\n<span class=\"hljs-keyword\">void</span> fizzBuzz() {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">100</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span> &amp;&amp; i % <span class=\"hljs-number\">5</span> == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;FizzBuzz&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Fizz&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">5</span> == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Buzz&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">print</span>(i);\n    }\n  }\n}\n"
    },
    "ruby": {
      "dir": "data_structures/arrays/fizz_buzz.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/fizz_buzz.rb",
      "code": "<span class=\"hljs-comment\"># Write a program that outputs the string representation of numbers</span>\n<span class=\"hljs-comment\"># from 1 to n. But for multiples of three it should output “Fizz”</span>\n<span class=\"hljs-comment\"># instead of the number and for the multiples of five output “Buzz”.</span>\n<span class=\"hljs-comment\"># For numbers which are multiples of both three and five output</span>\n<span class=\"hljs-comment\"># “FizzBuzz”.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 1: Naive Approach</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n\n<span class=\"hljs-comment\"># Time Complexity: O(N)</span>\n<span class=\"hljs-comment\"># Space Complexity: O(1)</span>\n\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer} n</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {String[]}</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fizz_buzz</span><span class=\"hljs-params\">(n)</span></span>\n  str = []\n\n  n.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\n    i += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">5</span> == <span class=\"hljs-number\">0</span> &amp;&amp; i % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span>\n      str.push(<span class=\"hljs-string\">&#x27;FizzBuzz&#x27;</span>)\n    <span class=\"hljs-keyword\">elsif</span> i % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span>\n      str.push(<span class=\"hljs-string\">&#x27;Fizz&#x27;</span>)\n    <span class=\"hljs-keyword\">elsif</span> i % <span class=\"hljs-number\">5</span> == <span class=\"hljs-number\">0</span>\n      str.push(<span class=\"hljs-string\">&#x27;Buzz&#x27;</span>)\n    <span class=\"hljs-keyword\">else</span>\n      str.push(i.to_s)\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  str\n<span class=\"hljs-keyword\">end</span>\n\nn = <span class=\"hljs-number\">15</span>\nfizz_buzz(n)\n<span class=\"hljs-comment\"># =&gt; [</span>\n<span class=\"hljs-comment\">#     &quot;1&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;2&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;Fizz&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;4&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;Buzz&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;Fizz&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;7&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;8&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;Fizz&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;Buzz&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;11&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;Fizz&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;13&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;14&quot;,</span>\n<span class=\"hljs-comment\">#     &quot;FizzBuzz&quot;</span>\n<span class=\"hljs-comment\"># ]</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: String Concatenation</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Algorithm</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Instead of checking for every combination of these conditions,</span>\n<span class=\"hljs-comment\"># check for divisibility by given numbers i.e. 3, 5 as given in the</span>\n<span class=\"hljs-comment\"># problem. If the number is divisible, concatenate the corresponding</span>\n<span class=\"hljs-comment\"># string mapping Fizz or Buzz to the current answer string.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># For eg. If we are checking for the number 15, the steps would be:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Condition 1: 15 % 3 == 0 , num_ans_str = &quot;Fizz&quot;</span>\n<span class=\"hljs-comment\"># Condition 2: 15 % 5 == 0 , num_ans_str += &quot;Buzz&quot;</span>\n<span class=\"hljs-comment\"># =&gt; num_ans_str = &quot;FizzBuzz&quot;</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(N)</span>\n<span class=\"hljs-comment\"># Space Complexity: O(1)</span>\n\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer} n</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {String[]}</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fizz_buzz</span><span class=\"hljs-params\">(n)</span></span>\n  str = []\n\n  n.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\n    i += <span class=\"hljs-number\">1</span>\n    num_str = <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n    num_str += <span class=\"hljs-string\">&#x27;Fizz&#x27;</span> <span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">3</span> == <span class=\"hljs-number\">0</span>\n    num_str += <span class=\"hljs-string\">&#x27;Buzz&#x27;</span> <span class=\"hljs-keyword\">if</span> i % <span class=\"hljs-number\">5</span> == <span class=\"hljs-number\">0</span>\n\n    num_str = i.to_s <span class=\"hljs-keyword\">if</span> num_str == <span class=\"hljs-string\">&#x27;&#x27;</span>\n\n    str.push(num_str)\n  <span class=\"hljs-keyword\">end</span>\n\n  str\n<span class=\"hljs-keyword\">end</span>\n\nn = <span class=\"hljs-number\">15</span>\nputs(fizz_buzz(n))\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Shivam Verma",
      "email": "50954641+sarcastic-verma@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
