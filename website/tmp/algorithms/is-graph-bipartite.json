{
  "slug": "is-graph-bipartite",
  "name": "Is Graph Bipartite",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "graph/is_graph_bipartite.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph/is_graph_bipartite.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n *\n * @brief Algorithm to check whether a graph is\n * [bipartite](https://en.wikipedia.org/wiki/Bipartite_graph)\n *\n * @details\n * A graph is a collection of nodes also called vertices and these vertices\n * are connected by edges. A graph is bipartite if its vertices can be\n * divided into two disjoint and independent sets U and V such that every edge\n * connects a vertex in U to one in V.\n *\n * The algorithm implemented in this file determines whether the given graph\n * is bipartite or not.\n *\n * &lt;pre&gt;\n *  Example - Here is a graph g1 with 5 vertices and is bipartite\n *\n *     1   4\n *    / \\ / \\\n *   2   3   5\n *\n * Example - Here is a graph G2 with 3 vertices and is not bipartite\n *\n *   1 --- 2\n *    \\   /\n *      3\n *\n * &lt;/pre&gt;\n *\n * @author [Akshat Vaya](https://github.com/AkVaya)\n *\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace graph\n * @brief Graph algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> graph {\n<span class=\"hljs-comment\">/**\n * @namespace is_graph_bipartite\n * @brief Functions for checking whether a graph is bipartite or not\n */</span>\n<span class=\"hljs-keyword\">namespace</span> is_graph_bipartite {\n<span class=\"hljs-comment\">/**\n * @brief Class for representing graph as an adjacency list.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-type\">int</span> n;  <span class=\"hljs-comment\">///&lt; size of the graph</span>\n\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt;\n        adj;  <span class=\"hljs-comment\">///&lt; adj stores the graph as an adjacency list</span>\n\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; side;  <span class=\"hljs-comment\">///&lt; stores the side of the vertex</span>\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Constructor that initializes the graph on creation\n     * @param size number of vertices of the graph\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> </span>{\n        n = size;\n        adj.<span class=\"hljs-built_in\">resize</span>(n);\n        side.<span class=\"hljs-built_in\">resize</span>(n, <span class=\"hljs-number\">-1</span>);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> v)</span></span>;  <span class=\"hljs-comment\">/// function to add edges to our graph</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span>\n    <span class=\"hljs-title\">is_bipartite</span><span class=\"hljs-params\">()</span></span>;  <span class=\"hljs-comment\">/// function to check whether the graph is bipartite or not</span>\n};\n\n<span class=\"hljs-comment\">/**\n * @brief Function that add an edge between two nodes or vertices of graph\n *\n * @param u is a node or vertex of graph\n * @param v is a node or vertex of graph\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Graph::addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> u, <span class=\"hljs-type\">int</span> v)</span> </span>{\n    adj[u - <span class=\"hljs-number\">1</span>].<span class=\"hljs-built_in\">push_back</span>(v - <span class=\"hljs-number\">1</span>);\n    adj[v - <span class=\"hljs-number\">1</span>].<span class=\"hljs-built_in\">push_back</span>(u - <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief function that checks whether the graph is bipartite or not\n * the function returns true if the graph is a bipartite graph\n * the function returns false if the graph is not a bipartite graph\n *\n * @details\n * Here, side refers to the two disjoint subsets of the bipartite graph.\n * Initially, the values of side are set to -1 which is an unassigned state. A\n * for loop is run for every vertex of the graph. If the current edge has no\n * side assigned to it, then a Breadth First Search operation is performed. If\n * two neighbours have the same side then the graph will not be bipartite and\n * the value of check becomes false. If and only if each pair of neighbours have\n * different sides, the value of check will be true and hence the graph\n * bipartite.\n *\n * @returns `true` if th graph is bipartite\n * @returns `false` otherwise\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">Graph::is_bipartite</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">bool</span> check = <span class=\"hljs-literal\">true</span>;\n    std::queue&lt;<span class=\"hljs-type\">int</span>&gt; q;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> current_edge = <span class=\"hljs-number\">0</span>; current_edge &lt; n; ++current_edge) {\n        <span class=\"hljs-keyword\">if</span> (side[current_edge] == <span class=\"hljs-number\">-1</span>) {\n            q.<span class=\"hljs-built_in\">push</span>(current_edge);\n            side[current_edge] = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">while</span> (q.<span class=\"hljs-built_in\">size</span>()) {\n                <span class=\"hljs-type\">int</span> current = q.<span class=\"hljs-built_in\">front</span>();\n                q.<span class=\"hljs-built_in\">pop</span>();\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> neighbour : adj[current]) {\n                    <span class=\"hljs-keyword\">if</span> (side[neighbour] == <span class=\"hljs-number\">-1</span>) {\n                        side[neighbour] = (<span class=\"hljs-number\">1</span> ^ side[current]);\n                        q.<span class=\"hljs-built_in\">push</span>(neighbour);\n                    } <span class=\"hljs-keyword\">else</span> {\n                        check &amp;= (side[neighbour] != side[current]);\n                    }\n                }\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> check;\n}\n}  <span class=\"hljs-comment\">// namespace is_graph_bipartite</span>\n}  <span class=\"hljs-comment\">// namespace graph</span>\n\n<span class=\"hljs-comment\">/**\n * Function to test the above algorithm\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    graph::<span class=\"hljs-function\">is_graph_bipartite::Graph <span class=\"hljs-title\">G1</span><span class=\"hljs-params\">(\n        <span class=\"hljs-number\">5</span>)</span></span>;  <span class=\"hljs-comment\">/// creating graph G1 with 5 vertices</span>\n    <span class=\"hljs-comment\">/// adding edges to the graphs as per the illustrated example</span>\n    G1.<span class=\"hljs-built_in\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n    G1.<span class=\"hljs-built_in\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);\n    G1.<span class=\"hljs-built_in\">addEdge</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>);\n    G1.<span class=\"hljs-built_in\">addEdge</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>);\n\n    graph::<span class=\"hljs-function\">is_graph_bipartite::Graph <span class=\"hljs-title\">G2</span><span class=\"hljs-params\">(\n        <span class=\"hljs-number\">3</span>)</span></span>;  <span class=\"hljs-comment\">/// creating graph G2 with 3 vertices</span>\n    <span class=\"hljs-comment\">/// adding edges to the graphs as per the illustrated example</span>\n    G2.<span class=\"hljs-built_in\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n    G2.<span class=\"hljs-built_in\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);\n    G2.<span class=\"hljs-built_in\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n\n    <span class=\"hljs-comment\">/// checking whether the graphs are bipartite or not</span>\n    <span class=\"hljs-keyword\">if</span> (G1.<span class=\"hljs-built_in\">is_bipartite</span>()) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The given graph G1 is a bipartite graph\\n&quot;</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The given graph G1 is not a bipartite graph\\n&quot;</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (G2.<span class=\"hljs-built_in\">is_bipartite</span>()) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The given graph G2 is a bipartite graph\\n&quot;</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The given graph G2 is not a bipartite graph\\n&quot;</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">/// Testing</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 1
    },
    {
      "name": "AkVaya",
      "email": "akshat.18je0072@am.iitism.ac.in",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}
