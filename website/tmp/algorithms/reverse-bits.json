{
  "slug": "reverse-bits",
  "name": "Reverse Bits",
  "categories": ["bitmanipulation"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "bit_manipulation/reverse_bits.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/bit_manipulation/reverse_bits.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_reverse_bit_string</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    return the bit string of an integer\n\n    &gt;&gt;&gt; get_reverse_bit_string(9)\n    &#x27;10010000000000000000000000000000&#x27;\n    &gt;&gt;&gt; get_reverse_bit_string(43)\n    &#x27;11010100000000000000000000000000&#x27;\n    &gt;&gt;&gt; get_reverse_bit_string(2873)\n    &#x27;10011100110100000000000000000000&#x27;\n    &gt;&gt;&gt; get_reverse_bit_string(&quot;this is not a number&quot;)\n    Traceback (most recent call last):\n        ...\n    TypeError: operation can not be conducted on a object of type str\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(\n            <span class=\"hljs-string\">&quot;operation can not be conducted on a object of type &quot;</span>\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">type</span>(number).__name__}</span>&quot;</span>\n        )\n    bit_string = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">32</span>):\n        bit_string += <span class=\"hljs-built_in\">str</span>(number % <span class=\"hljs-number\">2</span>)\n        number = number &gt;&gt; <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> bit_string\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reverse_bit</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Take in an 32 bit integer, reverse its bits,\n    return a string of reverse bits\n\n    result of a reverse_bit and operation on the integer provided.\n\n    &gt;&gt;&gt; reverse_bit(25)\n    &#x27;00000000000000000000000000011001&#x27;\n    &gt;&gt;&gt; reverse_bit(37)\n    &#x27;00000000000000000000000000100101&#x27;\n    &gt;&gt;&gt; reverse_bit(21)\n    &#x27;00000000000000000000000000010101&#x27;\n    &gt;&gt;&gt; reverse_bit(58)\n    &#x27;00000000000000000000000000111010&#x27;\n    &gt;&gt;&gt; reverse_bit(0)\n    &#x27;00000000000000000000000000000000&#x27;\n    &gt;&gt;&gt; reverse_bit(256)\n    &#x27;00000000000000000000000100000000&#x27;\n    &gt;&gt;&gt; reverse_bit(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: the value of input must be positive\n\n    &gt;&gt;&gt; reverse_bit(1.1)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input value must be a &#x27;int&#x27; type\n\n    &gt;&gt;&gt; reverse_bit(&quot;0&quot;)\n    Traceback (most recent call last):\n        ...\n    TypeError: &#x27;&lt;&#x27; not supported between instances of &#x27;str&#x27; and &#x27;int&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> number &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;the value of input must be positive&quot;</span>)\n    <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">float</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Input value must be a &#x27;int&#x27; type&quot;</span>)\n    <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">str</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;&#x27;&lt;&#x27; not supported between instances of &#x27;str&#x27; and &#x27;int&#x27;&quot;</span>)\n    result = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\"># iterator over [1 to 32],since we are dealing with 32 bit integer</span>\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">33</span>):\n        <span class=\"hljs-comment\"># left shift the bits by unity</span>\n        result = result &lt;&lt; <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-comment\"># get the end bit</span>\n        end_bit = number % <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-comment\"># right shift the bits by unity</span>\n        number = number &gt;&gt; <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-comment\"># add that bit to our ans</span>\n        result = result | end_bit\n    <span class=\"hljs-keyword\">return</span> get_reverse_bit_string(result)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Ayush Bisht",
      "email": "61404154+ayushbisht2001@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
