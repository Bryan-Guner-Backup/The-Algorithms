{
  "slug": "perfect-numbers",
  "name": "Perfect Numbers",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "f-sharp": {
      "dir": "Algorithms/Math/Perfect_Numbers.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Math/Perfect_Numbers.fs",
      "code": "<span class=\"hljs-keyword\">namespace</span> Algorithms.Math\n\n<span class=\"hljs-keyword\">module</span> Perfect_Numbers =\n    <span class=\"hljs-keyword\">let</span> IsPerfect (number: int) =\n        <span class=\"hljs-keyword\">match</span> number <span class=\"hljs-keyword\">with</span>\n        | number <span class=\"hljs-keyword\">when</span> number &lt;= <span class=\"hljs-number\">0</span> -&gt; <span class=\"hljs-keyword\">false</span>\n        | number -&gt;\n            <span class=\"hljs-keyword\">let</span> total =\n                seq { <span class=\"hljs-number\">1</span> .. number - <span class=\"hljs-number\">1</span> }\n                |&gt; Seq.filter (<span class=\"hljs-keyword\">fun</span> n -&gt; number % n = <span class=\"hljs-number\">0</span>)\n                |&gt; Seq.sum\n\n            total = number\n"
    },
    "aarch64_assembly": {
      "dir": "misc/perfect_numbers.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/misc/perfect_numbers.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program perfectNumber64.s   */</span>\n<span class=\"hljs-comment\">/* use Euclide Formula : if M=(2puis p)-1 is prime M * (M+1)/2 is perfect see Wikipedia  */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-symbol\">.equ</span> MAXI,      <span class=\"hljs-number\">63</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Perfect  : @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szMessOverflow:</span>     <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Overflow in function isPrime.\\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>  \n<span class=\"hljs-symbol\">sZoneConv:</span>                  <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                               <span class=\"hljs-comment\">// entry of program </span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">2</span>                        <span class=\"hljs-comment\">// start 2</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">1</span>                        <span class=\"hljs-comment\">// counter 2 power</span>\n<span class=\"hljs-number\">1</span>:                                  <span class=\"hljs-comment\">// begin loop</span>\n    <span class=\"hljs-keyword\">lsl</span> x4,x4,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// 2 power</span>\n    <span class=\"hljs-keyword\">sub</span> x0,x4,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// - 1 </span>\n    <span class=\"hljs-keyword\">bl</span> isPrime                      <span class=\"hljs-comment\">// is prime ?</span>\n    <span class=\"hljs-keyword\">cbz</span> x0,<span class=\"hljs-number\">2</span>f                       <span class=\"hljs-comment\">// no</span>\n    <span class=\"hljs-keyword\">sub</span> x0,x4,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">mul</span> x1,x0,x4                    <span class=\"hljs-comment\">// multiply m by m-1</span>\n    <span class=\"hljs-keyword\">lsr</span> x0,x1,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// divide by 2</span>\n    <span class=\"hljs-keyword\">bl</span> displayPerfect               <span class=\"hljs-comment\">// and display</span>\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>                     <span class=\"hljs-comment\">// next power of 2</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,MAXI\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b\n \n<span class=\"hljs-number\">100</span>:                                <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                        <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                     <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                           <span class=\"hljs-comment\">// perform the system call</span>\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>    .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>         .quad sMessResult\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display perfect number                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the number */</span>\n<span class=\"hljs-symbol\">displayPerfect:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion10                 <span class=\"hljs-comment\">// call d√©cimal conversion</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv            <span class=\"hljs-comment\">// insert conversion in message</span>\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc\n    <span class=\"hljs-keyword\">bl</span> affichageMess                <span class=\"hljs-comment\">// display message</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>                   .quad sZoneConv\n \n<span class=\"hljs-comment\">/***************************************************/</span>\n<span class=\"hljs-comment\">/*   is a number prime ?         */</span>\n<span class=\"hljs-comment\">/***************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the number */</span>\n<span class=\"hljs-comment\">/* x0 return 1 if prime  else 0  */</span>\n<span class=\"hljs-comment\">//2147483647  OK</span>\n<span class=\"hljs-comment\">//4294967297  NOK</span>\n<span class=\"hljs-comment\">//131071       OK</span>\n<span class=\"hljs-comment\">//1000003    OK </span>\n<span class=\"hljs-comment\">//10001363   OK</span>\n<span class=\"hljs-symbol\">isPrime:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0\n    <span class=\"hljs-keyword\">sub</span> x1,x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// return zero</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">2</span>                   <span class=\"hljs-comment\">// for 1 and 2 return 1</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#2</span>\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// no prime </span>\n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">3</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#3</span>\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f\n \n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">5</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#5</span>\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// Pas premier</span>\n \n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">7</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#7</span>\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// Pas premier</span>\n \n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">11</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#11</span>\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// Pas premier</span>\n \n    <span class=\"hljs-keyword\">cmp</span> x2,<span class=\"hljs-number\">13</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#13</span>\n    <span class=\"hljs-keyword\">bl</span> moduloPuR64\n    <span class=\"hljs-keyword\">bcs</span> <span class=\"hljs-number\">100</span>f                   <span class=\"hljs-comment\">// error overflow</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">99</span>f                    <span class=\"hljs-comment\">// Pas premier</span>\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">cmn</span> x0,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// carry √† zero no error</span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// prime</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">cmn</span> x0,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// carry √† zero no error</span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// prime</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ret\n \n \n<span class=\"hljs-comment\">/**************************************************************/</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*   Compute modulo de b power e modulo m  */</span>\n<span class=\"hljs-comment\">/*    Exemple 4 puissance 13 modulo 497 = 445         */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* x0  number  */</span>\n<span class=\"hljs-comment\">/* x1 exposant */</span>\n<span class=\"hljs-comment\">/* x2 modulo   */</span>\n<span class=\"hljs-symbol\">moduloPuR64:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    stp x5,x6,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    stp x7,x8,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    stp x9,x10,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!       <span class=\"hljs-comment\">// save  registres</span>\n    <span class=\"hljs-keyword\">cbz</span> x0,<span class=\"hljs-number\">100</span>f\n    <span class=\"hljs-keyword\">cbz</span> x1,<span class=\"hljs-number\">100</span>f\n    <span class=\"hljs-keyword\">mov</span> x8,x0\n    <span class=\"hljs-keyword\">mov</span> x7,x1\n    <span class=\"hljs-keyword\">mov</span> x6,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// result</span>\n    udiv x4,x8,x2\n    msub x9,x4,x2,x8           <span class=\"hljs-comment\">// remainder</span>\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">tst</span> x7,<span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">// if bit = 1</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">mul</span> x4,x9,x6\n    umulh x5,x9,x6\n    <span class=\"hljs-keyword\">mov</span> x6,x4\n    <span class=\"hljs-keyword\">mov</span> x0,x6\n    <span class=\"hljs-keyword\">mov</span> x1,x5\n    <span class=\"hljs-keyword\">bl</span> divisionReg128U         <span class=\"hljs-comment\">// division 128 bits</span>\n    <span class=\"hljs-keyword\">cbnz</span> x1,<span class=\"hljs-number\">99</span>f                <span class=\"hljs-comment\">// overflow</span>\n    <span class=\"hljs-keyword\">mov</span> x6,x3                  <span class=\"hljs-comment\">// remainder</span>\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">mul</span> x8,x9,x9\n    umulh x5,x9,x9\n    <span class=\"hljs-keyword\">mov</span> x0,x8\n    <span class=\"hljs-keyword\">mov</span> x1,x5\n    <span class=\"hljs-keyword\">bl</span> divisionReg128U\n    <span class=\"hljs-keyword\">cbnz</span> x1,<span class=\"hljs-number\">99</span>f                <span class=\"hljs-comment\">// overflow</span>\n    <span class=\"hljs-keyword\">mov</span> x9,x3\n    <span class=\"hljs-keyword\">lsr</span> x7,x7,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cbnz</span> x7,<span class=\"hljs-number\">1</span>b\n    <span class=\"hljs-keyword\">mov</span> x0,x6                  <span class=\"hljs-comment\">// result</span>\n    <span class=\"hljs-keyword\">cmn</span> x0,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// carry √† zero no error</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessOverflow\n    <span class=\"hljs-keyword\">bl</span>  affichageMess          <span class=\"hljs-comment\">// display error message</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">0</span>                   <span class=\"hljs-comment\">// carry set error</span>\n    <span class=\"hljs-keyword\">mov</span> x0,-<span class=\"hljs-number\">1</span>                  <span class=\"hljs-comment\">// code erreur</span>\n \n<span class=\"hljs-number\">100</span>:\n    ldp x9,x10,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x7,x8,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x5,x6,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ret                        <span class=\"hljs-comment\">// retour adresse lr x30</span>\n<span class=\"hljs-symbol\">qAdrszMessOverflow:</span>         .quad  szMessOverflow\n<span class=\"hljs-comment\">/***************************************************/</span>\n<span class=\"hljs-comment\">/*   division d un nombre de 128 bits par un nombre de 64 bits */</span>\n<span class=\"hljs-comment\">/***************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contient partie basse dividende */</span>\n<span class=\"hljs-comment\">/* x1 contient partie haute dividente */</span>\n<span class=\"hljs-comment\">/* x2 contient le diviseur */</span>\n<span class=\"hljs-comment\">/* x0 retourne partie basse quotient */</span>\n<span class=\"hljs-comment\">/* x1 retourne partie haute quotient */</span>\n<span class=\"hljs-comment\">/* x3 retourne le reste */</span>\n<span class=\"hljs-symbol\">divisionReg128U:</span>\n    stp x6,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!        <span class=\"hljs-comment\">// save  registres</span>\n    <span class=\"hljs-keyword\">mov</span> x5,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// raz du reste R</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">#128</span>                <span class=\"hljs-comment\">// compteur de boucle</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// dernier bit</span>\n<span class=\"hljs-number\">1</span>:    \n    <span class=\"hljs-keyword\">lsl</span> x5,x5,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// on decale le reste de 1</span>\n    <span class=\"hljs-keyword\">tst</span> x1,<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">63</span>               <span class=\"hljs-comment\">// test du bit le plus √† gauche</span>\n    <span class=\"hljs-keyword\">lsl</span> x1,x1,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// on decale la partie haute du quotient de 1</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">orr</span>  x5,x5,<span class=\"hljs-number\">#1</span>              <span class=\"hljs-comment\">// et on le pousse dans le reste R</span>\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">tst</span> x0,<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">63</span>\n    <span class=\"hljs-keyword\">lsl</span> x0,x0,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// puis on decale la partie basse </span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">3</span>f\n    <span class=\"hljs-keyword\">orr</span> x1,x1,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// et on pousse le bit de gauche dans la partie haute</span>\n<span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">orr</span> x0,x0,x4               <span class=\"hljs-comment\">// position du dernier bit du quotient</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0</span>                  <span class=\"hljs-comment\">// raz du bit</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,x2\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">4</span>f\n    <span class=\"hljs-keyword\">sub</span> x5,x5,x2               <span class=\"hljs-comment\">// on enleve le diviseur du reste</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#1</span>                  <span class=\"hljs-comment\">// dernier bit √† 1</span>\n<span class=\"hljs-number\">4</span>:\n                               <span class=\"hljs-comment\">// et boucle</span>\n    <span class=\"hljs-keyword\">subs</span> x3,x3,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">bgt</span> <span class=\"hljs-number\">1</span>b    \n    <span class=\"hljs-keyword\">lsl</span> x1,x1,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// on decale le quotient de 1</span>\n    <span class=\"hljs-keyword\">tst</span> x0,<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">63</span>\n    <span class=\"hljs-keyword\">lsl</span> x0,x0,<span class=\"hljs-number\">#1</span>               <span class=\"hljs-comment\">// puis on decale la partie basse </span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">5</span>f\n    <span class=\"hljs-keyword\">orr</span> x1,x1,<span class=\"hljs-number\">#1</span>\n<span class=\"hljs-number\">5</span>:\n    <span class=\"hljs-keyword\">orr</span> x0,x0,x4               <span class=\"hljs-comment\">// position du dernier bit du quotient</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x5\n<span class=\"hljs-number\">100</span>:\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ldp x6,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>          <span class=\"hljs-comment\">// restaur des  2 registres</span>\n    ret                        <span class=\"hljs-comment\">// retour adresse lr x30</span>\n \n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Idrek",
      "email": "Idrek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
