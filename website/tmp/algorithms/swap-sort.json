{
  "slug": "swap-sort",
  "name": "Swap Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/swap_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/swap_sort.cpp",
      "code": "<span class=\"hljs-comment\">// C++ program to find minimum number of swaps required to sort an array</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;utility&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">// Function returns the minimum number of swaps</span>\n<span class=\"hljs-comment\">// required to sort the array</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minSwaps</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-comment\">// Create an array of pairs where first</span>\n    <span class=\"hljs-comment\">// element is array element and second element</span>\n    <span class=\"hljs-comment\">// is position of first element</span>\n    std::pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt; *arrPos = <span class=\"hljs-keyword\">new</span> std::pair&lt;<span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>&gt;[n];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        arrPos[i].first = arr[i];\n        arrPos[i].second = i;\n    }\n\n    <span class=\"hljs-comment\">// Sort the array by array element values to</span>\n    <span class=\"hljs-comment\">// get right position of every element as second</span>\n    <span class=\"hljs-comment\">// element of pair.</span>\n    std::<span class=\"hljs-built_in\">sort</span>(arrPos, arrPos + n);\n\n    <span class=\"hljs-comment\">// To keep track of visited elements. Initialize</span>\n    <span class=\"hljs-comment\">// all elements as not visited or false.</span>\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">vis</span><span class=\"hljs-params\">(n, <span class=\"hljs-literal\">false</span>)</span></span>;\n\n    <span class=\"hljs-comment\">// Initialize result</span>\n    <span class=\"hljs-type\">int</span> ans = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// Traverse array elements</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-comment\">// already swapped and corrected or</span>\n        <span class=\"hljs-comment\">// already present at correct pos</span>\n        <span class=\"hljs-keyword\">if</span> (vis[i] || arrPos[i].second == i)\n            <span class=\"hljs-keyword\">continue</span>;\n\n        <span class=\"hljs-comment\">// find out the number of node in</span>\n        <span class=\"hljs-comment\">// this cycle and add in ans</span>\n        <span class=\"hljs-type\">int</span> cycle_size = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int</span> j = i;\n        <span class=\"hljs-keyword\">while</span> (!vis[j]) {\n            vis[j] = <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-comment\">// move to next node</span>\n            j = arrPos[j].second;\n            cycle_size++;\n        }\n\n        <span class=\"hljs-comment\">// Update answer by adding current cycle.</span>\n        <span class=\"hljs-keyword\">if</span> (cycle_size &gt; <span class=\"hljs-number\">0</span>) {\n            ans += (cycle_size - <span class=\"hljs-number\">1</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">delete</span>[] arrPos;\n\n    <span class=\"hljs-comment\">// Return result</span>\n    <span class=\"hljs-keyword\">return</span> ans;\n}\n\n<span class=\"hljs-comment\">// program to test</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\n    <span class=\"hljs-type\">int</span> n = (<span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n    std::cout &lt;&lt; <span class=\"hljs-built_in\">minSwaps</span>(arr, n);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Abhinn Mishra",
      "email": "49574460+mishraabhinn@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
