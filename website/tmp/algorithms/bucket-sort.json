{
  "slug": "bucket-sort",
  "name": "Bucket Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/bucket_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/bucket_sort.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n<span class=\"hljs-string\">&quot;&quot;&quot;\nIllustrate how to implement bucket sort algorithm.\n\nAuthor: OMKAR PATHAK\nThis program will illustrate how to implement bucket sort algorithm\n\nWikipedia says: Bucket sort, or bin sort, is a sorting algorithm that works\nby distributing the elements of an array into a number of buckets.\nEach bucket is then sorted individually, either using a different sorting\nalgorithm, or by recursively applying the bucket sorting algorithm. It is a\ndistribution sort, and is a cousin of radix sort in the most to least\nsignificant digit flavour.\nBucket sort is a generalization of pigeonhole sort. Bucket sort can be\nimplemented with comparisons and therefore can also be considered a\ncomparison sort algorithm. The computational complexity estimates involve the\nnumber of buckets.\n\nTime Complexity of Solution:\nWorst case scenario occurs when all the elements are placed in a single bucket.\nThe overall performance would then be dominated by the algorithm used to sort each\nbucket. In this case, O(n log n), because of TimSort\n\nAverage Case O(n + (n^2)/k + k), where k is the number of buckets\n\nIf k = O(n), time complexity is O(n)\n\nSource: https://en.wikipedia.org/wiki/Bucket_sort\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bucket_sort</span>(<span class=\"hljs-params\">my_list: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; data = [-1, 2, -5, 0]\n    &gt;&gt;&gt; bucket_sort(data) == sorted(data)\n    True\n    &gt;&gt;&gt; data = [9, 8, 7, 6, -12]\n    &gt;&gt;&gt; bucket_sort(data) == sorted(data)\n    True\n    &gt;&gt;&gt; data = [.4, 1.2, .1, .2, -.9]\n    &gt;&gt;&gt; bucket_sort(data) == sorted(data)\n    True\n    &gt;&gt;&gt; bucket_sort([]) == sorted([])\n    True\n    &gt;&gt;&gt; import random\n    &gt;&gt;&gt; collection = random.sample(range(-50, 50), 50)\n    &gt;&gt;&gt; bucket_sort(collection) == sorted(collection)\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(my_list) == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> []\n    min_value, max_value = <span class=\"hljs-built_in\">min</span>(my_list), <span class=\"hljs-built_in\">max</span>(my_list)\n    bucket_count = <span class=\"hljs-built_in\">int</span>(max_value - min_value) + <span class=\"hljs-number\">1</span>\n    buckets: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">list</span>] = [[] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(bucket_count)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(my_list)):\n        buckets[(<span class=\"hljs-built_in\">int</span>(my_list[i] - min_value) // bucket_count)].append(my_list[i])\n\n    <span class=\"hljs-keyword\">return</span> [v <span class=\"hljs-keyword\">for</span> bucket <span class=\"hljs-keyword\">in</span> buckets <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">sorted</span>(bucket)]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n    <span class=\"hljs-keyword\">assert</span> bucket_sort([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]) == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n    <span class=\"hljs-keyword\">assert</span> bucket_sort([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">2</span>]) == [-<span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">15</span>]\n"
    },
    "javascript": {
      "dir": "Sorts/BucketSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/BucketSort.js",
      "code": "<span class=\"hljs-comment\">/*\nWikipedia says: Bucket sort, or bin sort, is a sorting algorithm that works by distributing the\nelements of an array into a number of buckets. Each bucket is then sorted individually, either using\na different sorting algorithm, or by recursively applying the bucket sorting algorithm. It is a\ndistribution sort, and is a cousin of radix sort in the most to least significant digit flavour.\nBucket sort is a generalization of pigeonhole sort. Bucket sort can be implemented with comparisons\nand therefore can also be considered a comparison sort algorithm. The computational complexity estimates\ninvolve the number of buckets.\n\nTime Complexity of Solution:\nBest Case O(n); Average Case O(n); Worst Case O(n)\n\n*/</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bucketSort</span> (list, size) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">undefined</span> === size) {\n    size = <span class=\"hljs-number\">5</span>\n  }\n  <span class=\"hljs-keyword\">if</span> (list.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> list\n  }\n  <span class=\"hljs-keyword\">let</span> min = list[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> max = list[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-comment\">// find min and max</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> iList = <span class=\"hljs-number\">0</span>; iList &lt; list.<span class=\"hljs-property\">length</span>; iList++) {\n    <span class=\"hljs-keyword\">if</span> (list[iList] &lt; min) {\n      min = list[iList]\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (list[iList] &gt; max) {\n      max = list[iList]\n    }\n  }\n  <span class=\"hljs-comment\">// how many buckets we need</span>\n  <span class=\"hljs-keyword\">const</span> count = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((max - min) / size) + <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\">// create buckets</span>\n  <span class=\"hljs-keyword\">const</span> buckets = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> iCount = <span class=\"hljs-number\">0</span>; iCount &lt; count; iCount++) {\n    buckets.<span class=\"hljs-title function_\">push</span>([])\n  }\n\n  <span class=\"hljs-comment\">// bucket fill</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> iBucket = <span class=\"hljs-number\">0</span>; iBucket &lt; list.<span class=\"hljs-property\">length</span>; iBucket++) {\n    <span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((list[iBucket] - min) / size)\n    buckets[key].<span class=\"hljs-title function_\">push</span>(list[iBucket])\n  }\n  <span class=\"hljs-keyword\">const</span> sorted = []\n  <span class=\"hljs-comment\">// now sort every bucket and merge it to the sorted list</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> iBucket = <span class=\"hljs-number\">0</span>; iBucket &lt; buckets.<span class=\"hljs-property\">length</span>; iBucket++) {\n    <span class=\"hljs-keyword\">const</span> arr = buckets[iBucket].<span class=\"hljs-title function_\">sort</span>()\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> iSorted = <span class=\"hljs-number\">0</span>; iSorted &lt; arr.<span class=\"hljs-property\">length</span>; iSorted++) {\n      sorted.<span class=\"hljs-title function_\">push</span>(arr[iSorted])\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> sorted\n}\n\n<span class=\"hljs-comment\">// Testing</span>\n<span class=\"hljs-keyword\">const</span> arrOrignal = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>]\n<span class=\"hljs-comment\">// &gt; bucketSort(arrOrignal)</span>\n<span class=\"hljs-comment\">// [1, 2, 5, 6, 7, 8, 12, 14]</span>\n<span class=\"hljs-comment\">// Array before Sort</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arrOrignal)\n<span class=\"hljs-keyword\">const</span> arrSorted = <span class=\"hljs-title function_\">bucketSort</span>(arrOrignal)\n<span class=\"hljs-comment\">// Array after sort</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arrSorted)\n"
    },
    "c-plus-plus": {
      "dir": "sorting/bucket_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/bucket_sort.cpp",
      "code": "<span class=\"hljs-comment\">// C++ program to sort an array using bucket sort</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">// Function to sort arr[] of size n using bucket sort</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bucketSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> arr[], <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-comment\">// 1) Create n empty buckets</span>\n    std::vector&lt;<span class=\"hljs-type\">float</span>&gt; *b = <span class=\"hljs-keyword\">new</span> std::vector&lt;<span class=\"hljs-type\">float</span>&gt;[n];\n\n    <span class=\"hljs-comment\">// 2) Put array elements in different buckets</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-type\">int</span> bi = n * arr[i];  <span class=\"hljs-comment\">// Index in bucket</span>\n        b[bi].<span class=\"hljs-built_in\">push_back</span>(arr[i]);\n    }\n\n    <span class=\"hljs-comment\">// 3) Sort individual buckets</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) std::<span class=\"hljs-built_in\">sort</span>(b[i].<span class=\"hljs-built_in\">begin</span>(), b[i].<span class=\"hljs-built_in\">end</span>());\n\n    <span class=\"hljs-comment\">// 4) Concatenate all buckets into arr[]</span>\n    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; b[i].<span class=\"hljs-built_in\">size</span>(); j++) arr[index++] = b[i][j];\n    <span class=\"hljs-keyword\">delete</span>[] b;\n}\n\n<span class=\"hljs-comment\">/* Driver program to test above funtion */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">float</span> arr[] = {<span class=\"hljs-number\">0.897</span>, <span class=\"hljs-number\">0.565</span>, <span class=\"hljs-number\">0.656</span>, <span class=\"hljs-number\">0.1234</span>, <span class=\"hljs-number\">0.665</span>, <span class=\"hljs-number\">0.3434</span>};\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-built_in\">bucketSort</span>(arr, n);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array is \\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Sorts/BucketSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Sorts/BucketSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> Sorts;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n\n<span class=\"hljs-comment\">/** Wikipedia: https://en.wikipedia.org/wiki/Bucket_sort */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BucketSort</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">int</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>];\n\n    <span class=\"hljs-comment\">/* generate 10 random numbers from -50 to 49 */</span>\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; arr.length; ++i) {\n      arr[i] = random.nextInt(<span class=\"hljs-number\">100</span>) - <span class=\"hljs-number\">50</span>;\n    }\n\n    bucketSort(arr);\n\n    <span class=\"hljs-comment\">/* check array is sorted or not */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, limit = arr.length - <span class=\"hljs-number\">1</span>; i &lt; limit; ++i) {\n      <span class=\"hljs-keyword\">assert</span> arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>];\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * BucketSort algorithms implements\n   *\n   * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bucketSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr)</span> {\n    <span class=\"hljs-comment\">/* get max value of arr */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> max(arr);\n\n    <span class=\"hljs-comment\">/* get min value of arr */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> min(arr);\n\n    <span class=\"hljs-comment\">/* number of buckets */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">numberOfBuckets</span> <span class=\"hljs-operator\">=</span> max - min + <span class=\"hljs-number\">1</span>;\n\n    List&lt;List&lt;Integer&gt;&gt; buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(numberOfBuckets);\n\n    <span class=\"hljs-comment\">/* init buckets */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; numberOfBuckets; ++i) {\n      buckets.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;());\n    }\n\n    <span class=\"hljs-comment\">/* store elements to buckets */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : arr) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hash(value, min, numberOfBuckets);\n      buckets.get(hash).add(value);\n    }\n\n    <span class=\"hljs-comment\">/* sort individual bucket */</span>\n    <span class=\"hljs-keyword\">for</span> (List&lt;Integer&gt; bucket : buckets) {\n      Collections.sort(bucket);\n    }\n\n    <span class=\"hljs-comment\">/* concatenate buckets to origin array */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (List&lt;Integer&gt; bucket : buckets) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : bucket) {\n        arr[index++] = value;\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Get index of bucket which of our elements gets placed into it.\n   *\n   * <span class=\"hljs-doctag\">@param</span> elem the element of array to be sorted\n   * <span class=\"hljs-doctag\">@param</span> min min value of array\n   * <span class=\"hljs-doctag\">@param</span> numberOfBucket the number of bucket\n   * <span class=\"hljs-doctag\">@return</span> index of bucket\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elem, <span class=\"hljs-type\">int</span> min, <span class=\"hljs-type\">int</span> numberOfBucket)</span> {\n    <span class=\"hljs-keyword\">return</span> (elem - min) / numberOfBucket;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate max value of array\n   *\n   * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\n   * <span class=\"hljs-doctag\">@return</span> max value of given array\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">max</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> arr[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : arr) {\n      <span class=\"hljs-keyword\">if</span> (value &gt; max) {\n        max = value;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> max;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate min value of array\n   *\n   * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\n   * <span class=\"hljs-doctag\">@return</span> min value of given array\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> arr[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : arr) {\n      <span class=\"hljs-keyword\">if</span> (value &lt; min) {\n        min = value;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> min;\n  }\n}\n"
    },
    "c": {
      "dir": "sorting/bucket_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/bucket_sort.c",
      "code": "<span class=\"hljs-comment\">/*\n * Algorithm : Bucket Sort\n * Time-Complexity : O(n)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NARRAY 8    <span class=\"hljs-comment\">/* array size */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NBUCKET 5   <span class=\"hljs-comment\">/* bucket size */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INTERVAL 10 <span class=\"hljs-comment\">/* bucket range */</span></span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">next</span>;</span>\n};\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">BucketSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span>;\n<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-title function_\">InsertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-built_in\">list</span>)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printBuckets</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-built_in\">list</span>)</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getBucketIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span>;\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">BucketSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span>\n{\n    <span class=\"hljs-type\">int</span> i, j;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> **<span class=\"hljs-title\">buckets</span>;</span>\n\n    <span class=\"hljs-comment\">/* allocate memory for array of pointers to the buckets */</span>\n    buckets = (<span class=\"hljs-keyword\">struct</span> Node **)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node *) * NBUCKET);\n\n    <span class=\"hljs-comment\">/* initialize pointers to the buckets */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; ++i)\n    {\n        buckets[i] = <span class=\"hljs-literal\">NULL</span>;\n    }\n\n    <span class=\"hljs-comment\">/* put items into the buckets */</span>\n    <span class=\"hljs-comment\">/* creates a link list in each bucket slot */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NARRAY; ++i)\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">current</span>;</span>\n        <span class=\"hljs-type\">int</span> pos = getBucketIndex(arr[i]);\n        current = (<span class=\"hljs-keyword\">struct</span> Node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));\n        current-&gt;data = arr[i];\n        current-&gt;next = buckets[pos];\n        buckets[pos] = current;\n    }\n\n    <span class=\"hljs-comment\">/* check what&#x27;s in each bucket */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Bucket[\\&quot;%d\\&quot;] : &quot;</span>, i);\n        printBuckets(buckets[i]);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/* sorting bucket using Insertion Sort */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; ++i)\n    {\n        buckets[i] = InsertionSort(buckets[i]);\n    }\n\n    <span class=\"hljs-comment\">/* check what&#x27;s in each bucket */</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;--------------\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Buckets after sorted\\n&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Bucket[\\&quot;%d\\&quot;] : &quot;</span>, i);\n        printBuckets(buckets[i]);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/* put items back to original array */</span>\n    <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; ++i)\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">node</span>;</span>\n        node = buckets[i];\n        <span class=\"hljs-keyword\">while</span> (node)\n        {\n            <span class=\"hljs-comment\">// precondition for avoiding out of bounds by the array</span>\n            assert(j &lt; NARRAY);\n            arr[j++] = node-&gt;data;\n            node = node-&gt;next;\n        }\n    }\n\n    <span class=\"hljs-comment\">/* free memory */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NBUCKET; ++i)\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">node</span>;</span>\n        node = buckets[i];\n        <span class=\"hljs-keyword\">while</span> (node)\n        {\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">tmp</span>;</span>\n            tmp = node;\n            node = node-&gt;next;\n            <span class=\"hljs-built_in\">free</span>(tmp);\n        }\n    }\n    <span class=\"hljs-built_in\">free</span>(buckets);\n    <span class=\"hljs-keyword\">return</span>;\n}\n\n<span class=\"hljs-comment\">/* Insertion Sort */</span>\n<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-title function_\">InsertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-built_in\">list</span>)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">k</span>, *<span class=\"hljs-title\">nodeList</span>;</span>\n    <span class=\"hljs-comment\">/* need at least two items to sort */</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">list</span> == <span class=\"hljs-literal\">NULL</span> || <span class=\"hljs-built_in\">list</span>-&gt;next == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\n    }\n\n    nodeList = <span class=\"hljs-built_in\">list</span>;\n    k = <span class=\"hljs-built_in\">list</span>-&gt;next;\n    nodeList-&gt;next = <span class=\"hljs-literal\">NULL</span>; <span class=\"hljs-comment\">/* 1st node is new list */</span>\n    <span class=\"hljs-keyword\">while</span> (k != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">ptr</span>;</span>\n        <span class=\"hljs-comment\">/* check if insert before first */</span>\n        <span class=\"hljs-keyword\">if</span> (nodeList-&gt;data &gt; k-&gt;data)\n        {\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">tmp</span>;</span>\n            tmp = k;\n            k = k-&gt;next;  <span class=\"hljs-comment\">// important for the while</span>\n            tmp-&gt;next = nodeList;\n            nodeList = tmp;\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n\n        <span class=\"hljs-comment\">// from begin up to end</span>\n        <span class=\"hljs-comment\">// finds [i] &gt; [i+1]</span>\n        <span class=\"hljs-keyword\">for</span> (ptr = nodeList; ptr-&gt;next != <span class=\"hljs-literal\">NULL</span>; ptr = ptr-&gt;next)\n        {\n            <span class=\"hljs-keyword\">if</span> (ptr-&gt;next-&gt;data &gt; k-&gt;data)\n                <span class=\"hljs-keyword\">break</span>;\n        }\n\n        <span class=\"hljs-comment\">// if found (above)</span>\n        <span class=\"hljs-keyword\">if</span> (ptr-&gt;next != <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">tmp</span>;</span>\n            tmp = k;\n            k = k-&gt;next;  <span class=\"hljs-comment\">// important for the while</span>\n            tmp-&gt;next = ptr-&gt;next;\n            ptr-&gt;next = tmp;\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            ptr-&gt;next = k;\n            k = k-&gt;next;  <span class=\"hljs-comment\">// important for the while</span>\n            ptr-&gt;next-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> nodeList;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getBucketIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> { <span class=\"hljs-keyword\">return</span> value / INTERVAL; }\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> ar[])</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NARRAY; ++i)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, ar[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printBuckets</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-built_in\">list</span>)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">cur</span> =</span> <span class=\"hljs-built_in\">list</span>;\n    <span class=\"hljs-keyword\">while</span> (cur)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, cur-&gt;data);\n        cur = cur-&gt;next;\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-built_in\">array</span>[NARRAY] = {<span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">43</span>};\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Initial array\\n&quot;</span>);\n    print(<span class=\"hljs-built_in\">array</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;------------\\n&quot;</span>);\n\n    BucketSort(<span class=\"hljs-built_in\">array</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;------------\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array\\n&quot;</span>);\n    print(<span class=\"hljs-built_in\">array</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "ruby": {
      "dir": "sorting/bucket_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/bucket_sort.rb",
      "code": "DEFAULT_BUCKET_SIZE = <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bucket_sort</span><span class=\"hljs-params\">(array, bucket_size = DEFAULT_BUCKET_SIZE)</span></span>\n  bucket_count = ((array.max - array.min) / bucket_size).floor + <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\"># create buckets</span>\n  buckets = []\n  bucket_count.times { buckets.push [] }\n\n  <span class=\"hljs-comment\"># fill buckets</span>\n  array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|item|</span>\n    buckets[((item - array.min) / bucket_size).floor].push(item)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-comment\"># sort buckets</span>\n  buckets.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|bucket|</span>\n    bucket.sort!\n  <span class=\"hljs-keyword\">end</span>\n\n  buckets.flatten\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-keyword\">__FILE__</span>\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\n\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\n  p bucket_sort(list)\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Sorters/Integer/BucketSorter.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Integer/BucketSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Integer</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements bucket sort algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BucketSorter</span> : <span class=\"hljs-title\">IIntegerSorter</span>\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> NumOfDigitsInBase10 = <span class=\"hljs-number\">10</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array elements using BucketSort Algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] array</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (array.Length &lt;= <span class=\"hljs-number\">1</span>)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-comment\">// store maximum number of digits in numbers to sort</span>\n            <span class=\"hljs-keyword\">var</span> totalDigits = NumberOfDigits(array);\n\n            <span class=\"hljs-comment\">// bucket array where numbers will be placed</span>\n            <span class=\"hljs-keyword\">var</span> buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[NumOfDigitsInBase10, array.Length + <span class=\"hljs-number\">1</span>];\n\n            <span class=\"hljs-comment\">// go through all digit places and sort each number</span>\n            <span class=\"hljs-comment\">// according to digit place value</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> pass = <span class=\"hljs-number\">1</span>; pass &lt;= totalDigits; pass++)\n            {\n                DistributeElements(array, buckets, pass); <span class=\"hljs-comment\">// distribution pass</span>\n                CollectElements(array, buckets); <span class=\"hljs-comment\">// gathering pass</span>\n\n                <span class=\"hljs-keyword\">if</span> (pass != totalDigits)\n                {\n                    EmptyBucket(buckets); <span class=\"hljs-comment\">// set size of buckets to 0</span>\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Determines the number of digits in the largest number.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Number of digits.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">NumberOfDigits</span>(<span class=\"hljs-params\">IEnumerable&lt;<span class=\"hljs-built_in\">int</span>&gt; array</span>)</span> =&gt; (<span class=\"hljs-built_in\">int</span>)Math.Floor(Math.Log10(array.Max()) + <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To distribute elements into buckets based on specified digit.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;buckets&quot;&gt;</span>Array of buckets.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;digit&quot;&gt;</span>Digit.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DistributeElements</span>(<span class=\"hljs-params\">IEnumerable&lt;<span class=\"hljs-built_in\">int</span>&gt; data, <span class=\"hljs-built_in\">int</span>[,] buckets, <span class=\"hljs-built_in\">int</span> digit</span>)</span>\n        {\n            <span class=\"hljs-comment\">// determine the divisor used to get specific digit</span>\n            <span class=\"hljs-keyword\">var</span> divisor = (<span class=\"hljs-built_in\">int</span>)Math.Pow(<span class=\"hljs-number\">10</span>, digit);\n\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> element <span class=\"hljs-keyword\">in</span> data)\n            {\n                <span class=\"hljs-comment\">// bucketNumber example for hundreds digit:</span>\n                <span class=\"hljs-comment\">// ( 1234 % 1000 ) / 100 --&gt; 2</span>\n                <span class=\"hljs-keyword\">var</span> bucketNumber = NumOfDigitsInBase10 * (element % divisor) / divisor;\n\n                <span class=\"hljs-comment\">// retrieve value in pail[ bucketNumber , 0 ] to</span>\n                <span class=\"hljs-comment\">// determine the location in row to store element</span>\n                <span class=\"hljs-keyword\">var</span> elementNumber = ++buckets[bucketNumber, <span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// location in bucket to place element</span>\n                buckets[bucketNumber, elementNumber] = element;\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Return elements to original array.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span>Input array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;buckets&quot;&gt;</span>Array of buckets.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CollectElements</span>(<span class=\"hljs-params\">IList&lt;<span class=\"hljs-built_in\">int</span>&gt; data, <span class=\"hljs-built_in\">int</span>[,] buckets</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> subscript = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// initialize location in data</span>\n\n            <span class=\"hljs-comment\">// loop over buckets</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; NumOfDigitsInBase10; i++)\n            {\n                <span class=\"hljs-comment\">// loop over elements in each bucket</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">1</span>; j &lt;= buckets[i, <span class=\"hljs-number\">0</span>]; j++)\n                {\n                    data[subscript++] = buckets[i, j]; <span class=\"hljs-comment\">// add element to array</span>\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sets size of all buckets to zero.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;buckets&quot;&gt;</span>Array of buckets.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">EmptyBucket</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[,] buckets</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; NumOfDigitsInBase10; i++)\n            {\n                buckets[i, <span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// set size of bucket to 0</span>\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Tiffany Ford",
      "email": "rhysma@gmail.com",
      "commits": 1
    },
    {
      "name": "MacBox7",
      "email": "ajankit2304@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "KuLi",
      "email": "KuLi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 1
    },
    {
      "name": "Hardik Kapadia",
      "email": "thecoderenroute@gmail.com",
      "commits": 1
    },
    {
      "name": "obelisk0114",
      "email": "obelisk0114@gmail.com",
      "commits": 1
    },
    {
      "name": "Sayantika Banik",
      "email": "sayantikabanik122@gmail.com",
      "commits": 1
    },
    {
      "name": "Matthew",
      "email": "MatthewG25@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "Níkolas Vargas",
      "email": "vargasnikolass@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Adam",
      "email": "34916469+coderpower0@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andy Lau",
      "email": "andy1970635726@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "rafa leyva ruiz",
      "email": "rafaelleru@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Vineet Rathor",
      "email": "35703327+THE-VR7@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Omkar Pathak",
      "email": "omkarpathak27@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
