{
  "slug": "ode-midpoint-euler",
  "name": "Ode Midpoint Euler",
  "categories": ["numericalmethods"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods/ode_midpoint_euler.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/ode_midpoint_euler.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\authors [Krishna Vedala](https://github.com/kvedala)\n * \\brief Solve a multivariable first order [ordinary differential equation\n * (ODEs)](https://en.wikipedia.org/wiki/Ordinary_differential_equation) using\n * [midpoint Euler\n * method](https://en.wikipedia.org/wiki/Midpoint_method)\n *\n * \\details\n * The ODE being solved is:\n * \\f{eqnarray*}{\n * \\dot{u} &amp;=&amp; v\\\\\n * \\dot{v} &amp;=&amp; -\\omega^2 u\\\\\n * \\omega &amp;=&amp; 1\\\\\n * [x_0, u_0, v_0] &amp;=&amp; [0,1,0]\\qquad\\ldots\\text{(initial values)}\n * \\f}\n * The exact solution for the above problem is:\n * \\f{eqnarray*}{\n * u(x) &amp;=&amp; \\cos(x)\\\\\n * v(x) &amp;=&amp; -\\sin(x)\\\\\n * \\f}\n * The computation results are stored to a text file `midpoint_euler.csv` and\n * the exact soltuion results in `exact.csv` for comparison. &lt;img\n * src=&quot;https://raw.githubusercontent.com/TheAlgorithms/C-Plus-Plus/docs/images/numerical_methods/ode_midpoint_euler.svg&quot;\n * alt=&quot;Implementation solution&quot;/&gt;\n *\n * To implement [Van der Pol\n * oscillator](https://en.wikipedia.org/wiki/Van_der_Pol_oscillator), change the\n * ::problem function to:\n * ```cpp\n * const double mu = 2.0;\n * dy[0] = y[1];\n * dy[1] = mu * (1.f - y[0] * y[0]) * y[1] - y[0];\n * ```\n * \\see ode_forward_euler.cpp, ode_semi_implicit_euler.cpp\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fstream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;valarray&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Problem statement for a system with first-order differential\n * equations. Updates the system differential variables.\n * \\note This function can be updated to and ode of any order.\n *\n * @param[in] \t\tx \t\tindependent variable(s)\n * @param[in,out]\ty\t\tdependent variable(s)\n * @param[in,out]\tdy\t    first-derivative of dependent variable(s)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">problem</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;x, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *y,\n             std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *dy)</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> omega = <span class=\"hljs-number\">1.F</span>;             <span class=\"hljs-comment\">// some const for the problem</span>\n    dy[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = y[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];                   <span class=\"hljs-comment\">// x dot</span>\n    dy[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = -omega * omega * y[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">// y dot</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Exact solution of the problem. Used for solution comparison.\n *\n * @param[in] \t\tx \t\tindependent variable\n * @param[in,out]\ty\t\tdependent variable\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">exact_solution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;x, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *y)</span> </span>{\n    y[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = std::<span class=\"hljs-built_in\">cos</span>(x);\n    y[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = -std::<span class=\"hljs-built_in\">sin</span>(x);\n}\n\n<span class=\"hljs-comment\">/** \\addtogroup ode Ordinary Differential Equations\n * @{\n */</span>\n<span class=\"hljs-comment\">/**\n * @brief Compute next step approximation using the midpoint-Euler\n * method.\n * @f[y_{n+1} = y_n + dx\\, f\\left(x_n+\\frac{1}{2}dx,\n * y_n + \\frac{1}{2}dx\\,f\\left(x_n,y_n\\right)\\right)@f]\n *\n * @param[in] \t\tdx\tstep size\n * @param[in] \t    x\ttake \\f$x_n\\f$ and compute \\f$x_{n+1}\\f$\n * @param[in,out] \ty\ttake \\f$y_n\\f$ and compute \\f$y_{n+1}\\f$\n * @param[in,out]\tdy\tcompute \\f$f\\left(x_n,y_n\\right)\\f$\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">midpoint_euler_step</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> dx, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;x,\n                         std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *y, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *dy)</span> </span>{\n    <span class=\"hljs-built_in\">problem</span>(x, y, dy);\n    <span class=\"hljs-type\">double</span> tmp_x = x + <span class=\"hljs-number\">0.5</span> * dx;\n\n    std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; tmp_y = y[<span class=\"hljs-number\">0</span>] + dy[<span class=\"hljs-number\">0</span>] * (<span class=\"hljs-number\">0.5</span> * dx);\n\n    <span class=\"hljs-built_in\">problem</span>(tmp_x, &amp;tmp_y, dy);\n\n    y[<span class=\"hljs-number\">0</span>] += dy[<span class=\"hljs-number\">0</span>] * dx;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Compute approximation using the midpoint-Euler\n * method in the given limits.\n * @param[in] \t\tdx  \tstep size\n * @param[in]   \tx0  \tinitial value of independent variable\n * @param[in] \t    x_max\tfinal value of independent variable\n * @param[in,out] \ty\t    take \\f$y_n\\f$ and compute \\f$y_{n+1}\\f$\n * @param[in] save_to_file\tflag to save results to a CSV file (1) or not (0)\n * @returns time taken for computation in seconds\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">midpoint_euler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> dx, <span class=\"hljs-type\">double</span> x0, <span class=\"hljs-type\">double</span> x_max,\n                      std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; *y, <span class=\"hljs-type\">bool</span> save_to_file = <span class=\"hljs-literal\">false</span>)</span> </span>{\n    std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; dy = y[<span class=\"hljs-number\">0</span>];\n\n    std::ofstream fp;\n    <span class=\"hljs-keyword\">if</span> (save_to_file) {\n        fp.<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;midpoint_euler.csv&quot;</span>, std::ofstream::out);\n        <span class=\"hljs-keyword\">if</span> (!fp.<span class=\"hljs-built_in\">is_open</span>()) {\n            std::<span class=\"hljs-built_in\">perror</span>(<span class=\"hljs-string\">&quot;Error! &quot;</span>);\n        }\n    }\n\n    std::<span class=\"hljs-type\">size_t</span> L = y-&gt;<span class=\"hljs-built_in\">size</span>();\n\n    <span class=\"hljs-comment\">/* start integration */</span>\n    std::<span class=\"hljs-type\">clock_t</span> t1 = std::<span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-type\">double</span> x = x0;\n    <span class=\"hljs-keyword\">do</span> {  <span class=\"hljs-comment\">// iterate for each step of independent variable</span>\n        <span class=\"hljs-keyword\">if</span> (save_to_file &amp;&amp; fp.<span class=\"hljs-built_in\">is_open</span>()) {\n            <span class=\"hljs-comment\">// write to file</span>\n            fp &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; L - <span class=\"hljs-number\">1</span>; i++) {\n                fp &lt;&lt; y[<span class=\"hljs-number\">0</span>][i] &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;\n            }\n            fp &lt;&lt; y[<span class=\"hljs-number\">0</span>][L - <span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        }\n\n        <span class=\"hljs-built_in\">midpoint_euler_step</span>(dx, x, y, &amp;dy);  <span class=\"hljs-comment\">// perform integration</span>\n        x += dx;                             <span class=\"hljs-comment\">// update step</span>\n    } <span class=\"hljs-keyword\">while</span> (x &lt;= x_max);  <span class=\"hljs-comment\">// till upper limit of independent variable</span>\n    <span class=\"hljs-comment\">/* end of integration */</span>\n    std::<span class=\"hljs-type\">clock_t</span> t2 = std::<span class=\"hljs-built_in\">clock</span>();\n\n    <span class=\"hljs-keyword\">if</span> (fp.<span class=\"hljs-built_in\">is_open</span>())\n        fp.<span class=\"hljs-built_in\">close</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(t2 - t1) / CLOCKS_PER_SEC;\n}\n\n<span class=\"hljs-comment\">/** @} */</span>\n\n<span class=\"hljs-comment\">/**\n * Function to compute and save exact solution for comparison\n *\n * \\param [in]    X0  \t    initial value of independent variable\n * \\param [in] \t  X_MAX\t    final value of independent variable\n * \\param [in] \t  step_size\tindependent variable step size\n * \\param [in]    Y0\t    initial values of dependent variables\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">save_exact_solution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;X0, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;X_MAX,\n                         <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;step_size,\n                         <span class=\"hljs-keyword\">const</span> std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; &amp;Y0)</span> </span>{\n    <span class=\"hljs-type\">double</span> x = X0;\n    std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; y = Y0;\n\n    <span class=\"hljs-function\">std::ofstream <span class=\"hljs-title\">fp</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;exact.csv&quot;</span>, std::ostream::out)</span></span>;\n    <span class=\"hljs-keyword\">if</span> (!fp.<span class=\"hljs-built_in\">is_open</span>()) {\n        std::<span class=\"hljs-built_in\">perror</span>(<span class=\"hljs-string\">&quot;Error! &quot;</span>);\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Finding exact solution\\n&quot;</span>;\n\n    std::<span class=\"hljs-type\">clock_t</span> t1 = std::<span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-keyword\">do</span> {\n        fp &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; y.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i++) {\n            fp &lt;&lt; y[i] &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span>;\n        }\n        fp &lt;&lt; y[y.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n        <span class=\"hljs-built_in\">exact_solution</span>(x, &amp;y);\n\n        x += step_size;\n    } <span class=\"hljs-keyword\">while</span> (x &lt;= X_MAX);\n\n    std::<span class=\"hljs-type\">clock_t</span> t2 = std::<span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-type\">double</span> total_time = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(t2 - t1) / CLOCKS_PER_SEC;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tTime = &quot;</span> &lt;&lt; total_time &lt;&lt; <span class=\"hljs-string\">&quot; ms\\n&quot;</span>;\n\n    fp.<span class=\"hljs-built_in\">close</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * Main Function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\n    <span class=\"hljs-type\">double</span> X0 = <span class=\"hljs-number\">0.f</span>;                       <span class=\"hljs-comment\">/* initial value of x0 */</span>\n    <span class=\"hljs-type\">double</span> X_MAX = <span class=\"hljs-number\">10.F</span>;                   <span class=\"hljs-comment\">/* upper limit of integration */</span>\n    std::valarray&lt;<span class=\"hljs-type\">double</span>&gt; Y0 = {<span class=\"hljs-number\">1.f</span>, <span class=\"hljs-number\">0.f</span>}; <span class=\"hljs-comment\">/* initial value Y = y(x = x_0) */</span>\n    <span class=\"hljs-type\">double</span> step_size;\n\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">1</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the step size: &quot;</span>;\n        std::cin &gt;&gt; step_size;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// use commandline argument as independent variable step size</span>\n        step_size = std::<span class=\"hljs-built_in\">atof</span>(argv[<span class=\"hljs-number\">1</span>]);\n    }\n\n    <span class=\"hljs-comment\">// get approximate solution</span>\n    <span class=\"hljs-type\">double</span> total_time = <span class=\"hljs-built_in\">midpoint_euler</span>(step_size, X0, X_MAX, &amp;Y0, <span class=\"hljs-literal\">true</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tTime = &quot;</span> &lt;&lt; total_time &lt;&lt; <span class=\"hljs-string\">&quot; ms\\n&quot;</span>;\n\n    <span class=\"hljs-comment\">/* compute exact solution for comparion */</span>\n    <span class=\"hljs-built_in\">save_exact_solution</span>(X0, X_MAX, step_size, Y0);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "numerical_methods/ode_midpoint_euler.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/numerical_methods/ode_midpoint_euler.c",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\authors [Krishna Vedala](https://github.com/kvedala)\n * \\brief Solve a multivariable first order [ordinary differential equation\n * (ODEs)](https://en.wikipedia.org/wiki/Ordinary_differential_equation) using\n * [midpoint Euler\n * method](https://en.wikipedia.org/wiki/Midpoint_method)\n *\n * \\details\n * The ODE being solved is:\n * \\f{eqnarray*}{\n * \\dot{u} &amp;=&amp; v\\\\\n * \\dot{v} &amp;=&amp; -\\omega^2 u\\\\\n * \\omega &amp;=&amp; 1\\\\\n * [x_0, u_0, v_0] &amp;=&amp; [0,1,0]\\qquad\\ldots\\text{(initial values)}\n * \\f}\n * The exact solution for the above problem is:\n * \\f{eqnarray*}{\n * u(x) &amp;=&amp; \\cos(x)\\\\\n * v(x) &amp;=&amp; -\\sin(x)\\\\\n * \\f}\n * The computation results are stored to a text file `midpoint_euler.csv` and\n * the exact soltuion results in `exact.csv` for comparison. &lt;img\n * src=&quot;https://raw.githubusercontent.com/TheAlgorithms/C/docs/images/numerical_methods/ode_midpoint_euler.svg&quot;\n * alt=&quot;Implementation solution&quot;/&gt;\n *\n * To implement [Van der Pol\n * oscillator](https://en.wikipedia.org/wiki/Van_der_Pol_oscillator), change the\n * ::problem function to:\n * ```cpp\n * const double mu = 2.0;\n * dy[0] = y[1];\n * dy[1] = mu * (1.f - y[0] * y[0]) * y[1] - y[0];\n * ```\n * \\see ode_forward_euler.c, ode_semi_implicit_euler.c\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> order 2 <span class=\"hljs-comment\">/**&lt; number of dependent variables in ::problem */</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Problem statement for a system with first-order differential\n * equations. Updates the system differential variables.\n * \\note This function can be updated to and ode of any order.\n *\n * @param[in] \t\tx \t\tindependent variable(s)\n * @param[in,out]\ty\t\tdependent variable(s)\n * @param[in,out]\tdy\t    first-derivative of dependent variable(s)\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">problem</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> *x, <span class=\"hljs-type\">double</span> *y, <span class=\"hljs-type\">double</span> *dy)</span>\n{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> omega = <span class=\"hljs-number\">1.F</span>;       <span class=\"hljs-comment\">// some const for the problem</span>\n    dy[<span class=\"hljs-number\">0</span>] = y[<span class=\"hljs-number\">1</span>];                   <span class=\"hljs-comment\">// x dot</span>\n    dy[<span class=\"hljs-number\">1</span>] = -omega * omega * y[<span class=\"hljs-number\">0</span>];  <span class=\"hljs-comment\">// y dot</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Exact solution of the problem. Used for solution comparison.\n *\n * @param[in] \t\tx \t\tindependent variable\n * @param[in,out]\ty\t\tdependent variable\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">exact_solution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> *x, <span class=\"hljs-type\">double</span> *y)</span>\n{\n    y[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-built_in\">cos</span>(x[<span class=\"hljs-number\">0</span>]);\n    y[<span class=\"hljs-number\">1</span>] = -<span class=\"hljs-built_in\">sin</span>(x[<span class=\"hljs-number\">0</span>]);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Compute next step approximation using the midpoint-Euler\n * method.\n * @f[y_{n+1} = y_n + dx\\, f\\left(x_n+\\frac{1}{2}dx,\n * y_n + \\frac{1}{2}dx\\,f\\left(x_n,y_n\\right)\\right)@f]\n * @param[in] \t\tdx\tstep size\n * @param[in,out] \tx\ttake @f$x_n@f$ and compute @f$x_{n+1}@f$\n * @param[in,out] \ty\ttake @f$y_n@f$ and compute @f$y_{n+1}@f$\n * @param[in,out]\tdy\tcompute @f$y_n+\\frac{1}{2}dx\\,f\\left(x_n,y_n\\right)@f$\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">midpoint_euler_step</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> dx, <span class=\"hljs-type\">double</span> *x, <span class=\"hljs-type\">double</span> *y, <span class=\"hljs-type\">double</span> *dy)</span>\n{\n    problem(x, y, dy);\n    <span class=\"hljs-type\">double</span> tmp_x = (*x) + <span class=\"hljs-number\">0.5</span> * dx;\n    <span class=\"hljs-type\">double</span> tmp_y[order];\n    <span class=\"hljs-type\">int</span> o;\n    <span class=\"hljs-keyword\">for</span> (o = <span class=\"hljs-number\">0</span>; o &lt; order; o++) tmp_y[o] = y[o] + <span class=\"hljs-number\">0.5</span> * dx * dy[o];\n\n    problem(&amp;tmp_x, tmp_y, dy);\n\n    <span class=\"hljs-keyword\">for</span> (o = <span class=\"hljs-number\">0</span>; o &lt; order; o++) y[o] += dx * dy[o];\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Compute approximation using the midpoint-Euler\n * method in the given limits.\n * @param[in] \t\tdx  \tstep size\n * @param[in]   \tx0  \tinitial value of independent variable\n * @param[in] \t    x_max\tfinal value of independent variable\n * @param[in,out] \ty\t    take \\f$y_n\\f$ and compute \\f$y_{n+1}\\f$\n * @param[in] save_to_file\tflag to save results to a CSV file (1) or not (0)\n * @returns time taken for computation in seconds\n */</span>\n<span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">midpoint_euler</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> dx, <span class=\"hljs-type\">double</span> x0, <span class=\"hljs-type\">double</span> x_max, <span class=\"hljs-type\">double</span> *y,\n                      <span class=\"hljs-type\">char</span> save_to_file)</span>\n{\n    <span class=\"hljs-type\">double</span> dy[order];\n\n    FILE *fp = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">if</span> (save_to_file)\n    {\n        fp = fopen(<span class=\"hljs-string\">&quot;midpoint_euler.csv&quot;</span>, <span class=\"hljs-string\">&quot;w+&quot;</span>);\n        <span class=\"hljs-keyword\">if</span> (fp == <span class=\"hljs-literal\">NULL</span>)\n        {\n            perror(<span class=\"hljs-string\">&quot;Error! &quot;</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n    }\n\n    <span class=\"hljs-comment\">/* start integration */</span>\n    <span class=\"hljs-type\">clock_t</span> t1 = clock();\n    <span class=\"hljs-type\">double</span> x = x0;\n    <span class=\"hljs-keyword\">do</span>  <span class=\"hljs-comment\">// iterate for each step of independent variable</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (save_to_file &amp;&amp; fp)\n            <span class=\"hljs-built_in\">fprintf</span>(fp, <span class=\"hljs-string\">&quot;%.4g,%.4g,%.4g\\n&quot;</span>, x, y[<span class=\"hljs-number\">0</span>], y[<span class=\"hljs-number\">1</span>]);  <span class=\"hljs-comment\">// write to file</span>\n        midpoint_euler_step(dx, &amp;x, y, dy);  <span class=\"hljs-comment\">// perform integration</span>\n        x += dx;                             <span class=\"hljs-comment\">// update step</span>\n    } <span class=\"hljs-keyword\">while</span> (x &lt;= x_max);  <span class=\"hljs-comment\">// till upper limit of independent variable</span>\n    <span class=\"hljs-comment\">/* end of integration */</span>\n    <span class=\"hljs-type\">clock_t</span> t2 = clock();\n\n    <span class=\"hljs-keyword\">if</span> (save_to_file &amp;&amp; fp)\n        fclose(fp);\n\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">double</span>)(t2 - t1) / CLOCKS_PER_SEC;\n}\n\n<span class=\"hljs-comment\">/**\n    Main Function\n*/</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-type\">double</span> X0 = <span class=\"hljs-number\">0.f</span>;          <span class=\"hljs-comment\">/* initial value of x0 */</span>\n    <span class=\"hljs-type\">double</span> X_MAX = <span class=\"hljs-number\">10.F</span>;      <span class=\"hljs-comment\">/* upper limit of integration */</span>\n    <span class=\"hljs-type\">double</span> Y0[] = {<span class=\"hljs-number\">1.f</span>, <span class=\"hljs-number\">0.f</span>}; <span class=\"hljs-comment\">/* initial value Y = y(x = x_0) */</span>\n    <span class=\"hljs-type\">double</span> step_size;\n\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter the step size: &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lg&quot;</span>, &amp;step_size);\n    }\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-comment\">// use commandline argument as independent variable step size</span>\n        step_size = atof(argv[<span class=\"hljs-number\">1</span>]);\n\n    <span class=\"hljs-comment\">// get approximate solution</span>\n    <span class=\"hljs-type\">double</span> total_time = midpoint_euler(step_size, X0, X_MAX, Y0, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\tTime = %.6g ms\\n&quot;</span>, total_time);\n\n    <span class=\"hljs-comment\">/* compute exact solution for comparion */</span>\n    FILE *fp = fopen(<span class=\"hljs-string\">&quot;exact.csv&quot;</span>, <span class=\"hljs-string\">&quot;w+&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (fp == <span class=\"hljs-literal\">NULL</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;Error! &quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n    <span class=\"hljs-type\">double</span> x = X0;\n    <span class=\"hljs-type\">double</span> *y = &amp;(Y0[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Finding exact solution\\n&quot;</span>);\n    <span class=\"hljs-type\">clock_t</span> t1 = clock();\n\n    <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(fp, <span class=\"hljs-string\">&quot;%.4g,%.4g,%.4g\\n&quot;</span>, x, y[<span class=\"hljs-number\">0</span>], y[<span class=\"hljs-number\">1</span>]);  <span class=\"hljs-comment\">// write to file</span>\n        exact_solution(&amp;x, y);\n        x += step_size;\n    } <span class=\"hljs-keyword\">while</span> (x &lt;= X_MAX);\n\n    <span class=\"hljs-type\">clock_t</span> t2 = clock();\n    total_time = (t2 - t1) / CLOCKS_PER_SEC;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\tTime = %.6g ms\\n&quot;</span>, total_time);\n    fclose(fp);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 11
    }
  ],
  "explanationUrl": {}
}
