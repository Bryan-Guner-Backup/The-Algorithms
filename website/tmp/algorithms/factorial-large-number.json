{
  "slug": "factorial-large-number",
  "name": "Factorial Large Number",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/factorial_large_number.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/factorial_large_number.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * \\brief Compute factorial of arbitrarily large numbers by\n * storing individual digits in a byte.\n * \\author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * dynamically large number\n */</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">large_num</span>\n{</span>\n    <span class=\"hljs-type\">char</span> *digits;            <span class=\"hljs-comment\">/**&lt; array to store individual digits */</span>\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> num_digits; <span class=\"hljs-comment\">/**&lt; number of digits in the number */</span>\n} large_num;\n\n<span class=\"hljs-comment\">/**\n * create a new large number\n * \\returns pointer to a large number\n */</span>\nlarge_num *<span class=\"hljs-title function_\">new_number</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    large_num *new_num = (large_num *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(large_num));\n    new_num-&gt;num_digits = <span class=\"hljs-number\">1</span>;\n    new_num-&gt;digits = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">1</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));\n    new_num-&gt;digits[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> new_num;\n}\n\n<span class=\"hljs-comment\">/**\n * delete all memory allocated for large number\n * \\param[in] num pointer to large_num to delete\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">delete_number</span><span class=\"hljs-params\">(large_num *num)</span>\n{\n    <span class=\"hljs-built_in\">free</span>(num-&gt;digits);\n    <span class=\"hljs-built_in\">free</span>(num);\n}\n\n<span class=\"hljs-comment\">/**\n * add a digit to the large number\n * \\param[in,out] num\n * \\param[in] value value of the digit to insert\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">add_digit</span><span class=\"hljs-params\">(large_num *num, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> value)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (value &gt; <span class=\"hljs-number\">9</span>)\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;digit &gt; 9!!\\n&quot;</span>);\n        delete_number(num);\n        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n    }\n\n    num-&gt;num_digits++;\n    num-&gt;digits = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">realloc</span>(num-&gt;digits, num-&gt;num_digits * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));\n    num-&gt;digits[num-&gt;num_digits - <span class=\"hljs-number\">1</span>] = value;\n}\n\n<span class=\"hljs-comment\">/**\n * multiply large number with another integer and\n * store the result in the same large number\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">multiply</span><span class=\"hljs-params\">(large_num *num, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> carry = <span class=\"hljs-number\">0</span>, temp;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; num-&gt;num_digits; i++)\n    {\n        temp = num-&gt;digits[i] * n;\n        temp += carry;\n        <span class=\"hljs-keyword\">if</span> (temp &lt; <span class=\"hljs-number\">10</span>)\n            carry = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">else</span>\n        {\n            carry = temp / <span class=\"hljs-number\">10</span>;\n            temp = temp % <span class=\"hljs-number\">10</span>;\n        }\n        num-&gt;digits[i] = temp;\n    }\n\n    <span class=\"hljs-keyword\">while</span> (carry != <span class=\"hljs-number\">0</span>)\n    {\n        add_digit(num, carry % <span class=\"hljs-number\">10</span>);\n        carry /= <span class=\"hljs-number\">10</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * main function\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-type\">int</span> number, i;\n\n    <span class=\"hljs-comment\">// Asks for the number/position of term in Fibonnacci sequence</span>\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">2</span>)\n        number = atoi(argv[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the value of n(n starts from 0 ): &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;number);\n    }\n\n    large_num *result = new_number();\n\n    <span class=\"hljs-type\">clock_t</span> start_time = clock();\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">2</span>; i &lt;= number; i++) <span class=\"hljs-comment\">/* Multiply every number from 2 thru N */</span>\n        multiply(result, i);\n    <span class=\"hljs-type\">double</span> time_taken = (clock() - start_time) * (<span class=\"hljs-type\">double</span>)<span class=\"hljs-number\">1e3</span> / CLOCKS_PER_SEC;\n    <span class=\"hljs-comment\">// time_taken = (clock() - start_time) / (double) CLOCKS_PER_SEC;</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d! = &quot;</span>, number);\n    <span class=\"hljs-keyword\">for</span> (i = result-&gt;num_digits; i &gt; <span class=\"hljs-number\">0</span>; i--)\n        <span class=\"hljs-built_in\">putchar</span>(result-&gt;digits[i - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">&#x27;0&#x27;</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nTime taken: %.4g ms\\n&quot;</span>, time_taken);\n\n    delete_number(result);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
