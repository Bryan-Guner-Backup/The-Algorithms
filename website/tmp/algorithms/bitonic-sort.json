{
  "slug": "bitonic-sort",
  "name": "Bitonic Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/bitonic_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/bitonic_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nPython program for Bitonic Sort.\n\nNote that this program works only when size of input is a power of 2.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">comp_and_swap</span>(<span class=\"hljs-params\">array: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], index1: <span class=\"hljs-built_in\">int</span>, index2: <span class=\"hljs-built_in\">int</span>, direction: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Compare the value at given index1 and index2 of the array and swap them as per\n    the given direction.\n\n    The parameter direction indicates the sorting direction, ASCENDING(1) or\n    DESCENDING(0); if (a[i] &gt; a[j]) agrees with the direction, then a[i] and a[j] are\n    interchanged.\n\n    &gt;&gt;&gt; arr = [12, 42, -21, 1]\n    &gt;&gt;&gt; comp_and_swap(arr, 1, 2, 1)\n    &gt;&gt;&gt; print(arr)\n    [12, -21, 42, 1]\n\n    &gt;&gt;&gt; comp_and_swap(arr, 1, 2, 0)\n    &gt;&gt;&gt; print(arr)\n    [12, 42, -21, 1]\n\n    &gt;&gt;&gt; comp_and_swap(arr, 0, 3, 1)\n    &gt;&gt;&gt; print(arr)\n    [1, 42, -21, 12]\n\n    &gt;&gt;&gt; comp_and_swap(arr, 0, 3, 0)\n    &gt;&gt;&gt; print(arr)\n    [12, 42, -21, 1]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> (direction == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> array[index1] &gt; array[index2]) <span class=\"hljs-keyword\">or</span> (\n        direction == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> array[index1] &lt; array[index2]\n    ):\n        array[index1], array[index2] = array[index2], array[index1]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bitonic_merge</span>(<span class=\"hljs-params\">array: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], low: <span class=\"hljs-built_in\">int</span>, length: <span class=\"hljs-built_in\">int</span>, direction: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    It recursively sorts a bitonic sequence in ascending order, if direction = 1, and in\n    descending if direction = 0.\n    The sequence to be sorted starts at index position low, the parameter length is the\n    number of elements to be sorted.\n\n    &gt;&gt;&gt; arr = [12, 42, -21, 1]\n    &gt;&gt;&gt; bitonic_merge(arr, 0, 4, 1)\n    &gt;&gt;&gt; print(arr)\n    [-21, 1, 12, 42]\n\n    &gt;&gt;&gt; bitonic_merge(arr, 0, 4, 0)\n    &gt;&gt;&gt; print(arr)\n    [42, 12, 1, -21]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> length &gt; <span class=\"hljs-number\">1</span>:\n        middle = <span class=\"hljs-built_in\">int</span>(length / <span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(low, low + middle):\n            comp_and_swap(array, i, i + middle, direction)\n        bitonic_merge(array, low, middle, direction)\n        bitonic_merge(array, low + middle, middle, direction)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bitonic_sort</span>(<span class=\"hljs-params\">array: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], low: <span class=\"hljs-built_in\">int</span>, length: <span class=\"hljs-built_in\">int</span>, direction: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This function first produces a bitonic sequence by recursively sorting its two\n    halves in opposite sorting orders, and then calls bitonic_merge to make them in the\n    same order.\n\n    &gt;&gt;&gt; arr = [12, 34, 92, -23, 0, -121, -167, 145]\n    &gt;&gt;&gt; bitonic_sort(arr, 0, 8, 1)\n    &gt;&gt;&gt; arr\n    [-167, -121, -23, 0, 12, 34, 92, 145]\n\n    &gt;&gt;&gt; bitonic_sort(arr, 0, 8, 0)\n    &gt;&gt;&gt; arr\n    [145, 92, 34, 12, 0, -23, -121, -167]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> length &gt; <span class=\"hljs-number\">1</span>:\n        middle = <span class=\"hljs-built_in\">int</span>(length / <span class=\"hljs-number\">2</span>)\n        bitonic_sort(array, low, middle, <span class=\"hljs-number\">1</span>)\n        bitonic_sort(array, low + middle, middle, <span class=\"hljs-number\">0</span>)\n        bitonic_merge(array, low, length, direction)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item.strip()) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n\n    bitonic_sort(unsorted, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(unsorted), <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nSorted array in ascending order is: &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(*unsorted, sep=<span class=\"hljs-string\">&quot;, &quot;</span>)\n\n    bitonic_merge(unsorted, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(unsorted), <span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Sorted array in descending order is: &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(*unsorted, sep=<span class=\"hljs-string\">&quot;, &quot;</span>)\n"
    },
    "c-plus-plus": {
      "dir": "sorting/bitonic_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/bitonic_sort.cpp",
      "code": "<span class=\"hljs-comment\">// Source : https://www.geeksforgeeks.org/bitonic-sort/</span>\n\n<span class=\"hljs-comment\">/* C++ Program for Bitonic Sort. Note that this program\n   works only when size of input is a power of 2. */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/*The parameter dir indicates the sorting direction, ASCENDING\n   or DESCENDING; if (a[i] &gt; a[j]) agrees with the direction,\n   then a[i] and a[j] are interchanged.*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">compAndSwap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span> dir)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (dir == (a[i] &gt; a[j]))\n        std::<span class=\"hljs-built_in\">swap</span>(a[i], a[j]);\n}\n\n<span class=\"hljs-comment\">/*It recursively sorts a bitonic sequence in ascending order,\n  if dir = 1, and in descending order otherwise (means dir=0).\n  The sequence to be sorted starts at index position low,\n  the parameter cnt is the number of elements to be sorted.*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bitonicMerge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> cnt, <span class=\"hljs-type\">int</span> dir)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (cnt &gt; <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-type\">int</span> k = cnt / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = low; i &lt; low + k; i++) <span class=\"hljs-built_in\">compAndSwap</span>(a, i, i + k, dir);\n        <span class=\"hljs-built_in\">bitonicMerge</span>(a, low, k, dir);\n        <span class=\"hljs-built_in\">bitonicMerge</span>(a, low + k, k, dir);\n    }\n}\n\n<span class=\"hljs-comment\">/* This function first produces a bitonic sequence by recursively\n    sorting its two halves in opposite sorting orders, and then\n    calls bitonicMerge to make them in the same order */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">bitonicSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> cnt, <span class=\"hljs-type\">int</span> dir)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (cnt &gt; <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-type\">int</span> k = cnt / <span class=\"hljs-number\">2</span>;\n\n        <span class=\"hljs-comment\">// sort in ascending order since dir here is 1</span>\n        <span class=\"hljs-built_in\">bitonicSort</span>(a, low, k, <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-comment\">// sort in descending order since dir here is 0</span>\n        <span class=\"hljs-built_in\">bitonicSort</span>(a, low + k, k, <span class=\"hljs-number\">0</span>);\n\n        <span class=\"hljs-comment\">// Will merge wole sequence in ascending order</span>\n        <span class=\"hljs-comment\">// since dir=1.</span>\n        <span class=\"hljs-built_in\">bitonicMerge</span>(a, low, cnt, dir);\n    }\n}\n\n<span class=\"hljs-comment\">/* Caller of bitonicSort for sorting the entire array of\n   length N in ASCENDING order */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">int</span> up)</span> </span>{ <span class=\"hljs-built_in\">bitonicSort</span>(a, <span class=\"hljs-number\">0</span>, N, up); }\n\n<span class=\"hljs-comment\">// Driver code</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> a[] = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>};\n    <span class=\"hljs-type\">int</span> N = <span class=\"hljs-built_in\">sizeof</span>(a) / <span class=\"hljs-built_in\">sizeof</span>(a[<span class=\"hljs-number\">0</span>]);\n\n    <span class=\"hljs-type\">int</span> up = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// means sort in ascending order</span>\n    <span class=\"hljs-built_in\">sort</span>(a, N, up);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array: \\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) std::cout &lt;&lt; a[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Sorts/BitonicSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Sorts/BitonicSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> Sorts;\n\n<span class=\"hljs-comment\">/* Java program for Bitonic Sort. Note that this program\nworks only when size of input is a power of 2. */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BitonicSort</span> {\n  <span class=\"hljs-comment\">/* The parameter dir indicates the sorting direction,\n  ASCENDING or DESCENDING; if (a[i] &gt; a[j]) agrees\n  with the direction, then a[i] and a[j] are\n  interchanged. */</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">compAndSwap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span> dir)</span> {\n    <span class=\"hljs-keyword\">if</span> ((a[i] &gt; a[j] &amp;&amp; dir == <span class=\"hljs-number\">1</span>) || (a[i] &lt; a[j] &amp;&amp; dir == <span class=\"hljs-number\">0</span>)) {\n      <span class=\"hljs-comment\">// Swapping elements</span>\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> a[i];\n      a[i] = a[j];\n      a[j] = temp;\n    }\n  }\n\n  <span class=\"hljs-comment\">/* It recursively sorts a bitonic sequence in ascending\n  order, if dir = 1, and in descending order otherwise\n  (means dir=0). The sequence to be sorted starts at\n  index position low, the parameter cnt is the number\n  of elements to be sorted.*/</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bitonicMerge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> cnt, <span class=\"hljs-type\">int</span> dir)</span> {\n    <span class=\"hljs-keyword\">if</span> (cnt &gt; <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> cnt / <span class=\"hljs-number\">2</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> low; i &lt; low + k; i++) compAndSwap(a, i, i + k, dir);\n      bitonicMerge(a, low, k, dir);\n      bitonicMerge(a, low + k, k, dir);\n    }\n  }\n\n  <span class=\"hljs-comment\">/* This funcion first produces a bitonic sequence by\n  recursively sorting its two halves in opposite sorting\n  orders, and then calls bitonicMerge to make them in\n  the same order */</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bitonicSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> cnt, <span class=\"hljs-type\">int</span> dir)</span> {\n    <span class=\"hljs-keyword\">if</span> (cnt &gt; <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> cnt / <span class=\"hljs-number\">2</span>;\n\n      <span class=\"hljs-comment\">// sort in ascending order since dir here is 1</span>\n      bitonicSort(a, low, k, <span class=\"hljs-number\">1</span>);\n\n      <span class=\"hljs-comment\">// sort in descending order since dir here is 0</span>\n      bitonicSort(a, low + k, k, <span class=\"hljs-number\">0</span>);\n\n      <span class=\"hljs-comment\">// Will merge wole sequence in ascending order</span>\n      <span class=\"hljs-comment\">// since dir=1.</span>\n      bitonicMerge(a, low, cnt, dir);\n    }\n  }\n\n  <span class=\"hljs-comment\">/*Caller of bitonicSort for sorting the entire array\n  of length N in ASCENDING order */</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">int</span> up)</span> {\n    bitonicSort(a, <span class=\"hljs-number\">0</span>, N, up);\n  }\n\n  <span class=\"hljs-comment\">/* A utility function to print array of size n */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> arr.length;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; ++i) System.out.print(arr[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\n    System.out.println();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n    <span class=\"hljs-type\">int</span> a[] = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>};\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">up</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">BitonicSort</span> <span class=\"hljs-variable\">ob</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BitonicSort</span>();\n    ob.sort(a, a.length, up);\n    System.out.println(<span class=\"hljs-string\">&quot;\\nSorted array&quot;</span>);\n    printArray(a);\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Alaa El Bouhdidi",
      "email": "alaa.el.bouhdidi@mni.thm.de",
      "commits": 1
    },
    {
      "name": "Jogendra Singh",
      "email": "58473917+Joe-Sin7h@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aruj Sharma",
      "email": "aruj123sharma@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
