{
  "slug": "newton-raphson",
  "name": "Newton Raphson",
  "categories": ["numericalanalysis"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/newton_raphson.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/newton_raphson.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    Author: P Shreyas Shetty\n    Implementation of Newton-Raphson method for solving equations of kind\n    f(x) = 0. It is an iterative method where solution is found by the expression\n        x[n+1] = x[n] + f(x[n])/f&#x27;(x[n])\n    If no solution exists, then either the solution will not be found when iteration\n    limit is reached or the gradient f&#x27;(x[n]) approaches zero. In both cases, exception\n    is raised. If iteration limit is reached, try increasing maxiter.\n    &quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> math <span class=\"hljs-keyword\">as</span> m\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calc_derivative</span>(<span class=\"hljs-params\">f, a, h=<span class=\"hljs-number\">0.001</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculates derivative at point a for function f using finite difference\n    method\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> (f(a + h) - f(a - h)) / (<span class=\"hljs-number\">2</span> * h)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">newton_raphson</span>(<span class=\"hljs-params\">f, x0=<span class=\"hljs-number\">0</span>, maxiter=<span class=\"hljs-number\">100</span>, step=<span class=\"hljs-number\">0.0001</span>, maxerror=<span class=\"hljs-number\">1e-6</span>, logsteps=<span class=\"hljs-literal\">False</span></span>):\n\n    a = x0  <span class=\"hljs-comment\"># set the initial guess</span>\n    steps = [a]\n    error = <span class=\"hljs-built_in\">abs</span>(f(a))\n    f1 = <span class=\"hljs-keyword\">lambda</span> x: calc_derivative(f, x, h=step)  <span class=\"hljs-comment\"># noqa: E731  Derivative of f(x)</span>\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(maxiter):\n        <span class=\"hljs-keyword\">if</span> f1(a) == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;No converging solution found&quot;</span>)\n        a = a - f(a) / f1(a)  <span class=\"hljs-comment\"># Calculate the next estimate</span>\n        <span class=\"hljs-keyword\">if</span> logsteps:\n            steps.append(a)\n        <span class=\"hljs-keyword\">if</span> error &lt; maxerror:\n            <span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Iteration limit reached, no converging solution found&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> logsteps:\n        <span class=\"hljs-comment\"># If logstep is true, then log intermediate steps</span>\n        <span class=\"hljs-keyword\">return</span> a, error, steps\n    <span class=\"hljs-keyword\">return</span> a, error\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt\n\n    f = <span class=\"hljs-keyword\">lambda</span> x: m.tanh(x) ** <span class=\"hljs-number\">2</span> - m.exp(<span class=\"hljs-number\">3</span> * x)  <span class=\"hljs-comment\"># noqa: E731</span>\n    solution, error, steps = newton_raphson(\n        f, x0=<span class=\"hljs-number\">10</span>, maxiter=<span class=\"hljs-number\">1000</span>, step=<span class=\"hljs-number\">1e-6</span>, logsteps=<span class=\"hljs-literal\">True</span>\n    )\n    plt.plot([<span class=\"hljs-built_in\">abs</span>(f(x)) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> steps])\n    plt.xlabel(<span class=\"hljs-string\">&quot;step&quot;</span>)\n    plt.ylabel(<span class=\"hljs-string\">&quot;error&quot;</span>)\n    plt.show()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;solution = {{<span class=\"hljs-subst\">{solution:f}</span>}}, error = {{<span class=\"hljs-subst\">{error:f}</span>}}&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Rohit Joshi",
      "email": "34398948+rohitjoshi21@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "guij15",
      "email": "43374716+guij15@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "P-Shreyas-Shetty",
      "email": "ps2shreyas@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
