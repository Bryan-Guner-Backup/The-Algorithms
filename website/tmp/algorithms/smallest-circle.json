{
  "slug": "smallest-circle",
  "name": "Smallest Circle",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "others/smallest_circle.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others/smallest_circle.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Get centre and radius of the\n * [smallest circle](https://en.wikipedia.org/wiki/Smallest-circle_problem)\n * that circumscribes given set of points.\n *\n * @see [other\n * implementation](https://www.nayuki.io/page/smallest-enclosing-circle)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Define a point */</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n    <span class=\"hljs-type\">double</span> x, <span class=\"hljs-comment\">/**&lt; abscissa */</span>\n        y;    <span class=\"hljs-comment\">/**&lt; ordinate */</span>\n\n    <span class=\"hljs-comment\">/** construct a point\n     * \\param [in] a absicca (default = 0.0)\n     * \\param [in] b ordinate (default = 0.0)\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">Point</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> a = <span class=\"hljs-number\">0.f</span>, <span class=\"hljs-type\">double</span> b = <span class=\"hljs-number\">0.f</span>)</span> </span>{\n        x = a;\n        y = b;\n    }\n};\n\n<span class=\"hljs-comment\">/** Compute the Euclidian distance between two points \\f$A\\equiv(x_1,y_1)\\f$ and\n * \\f$B\\equiv(x_2,y_2)\\f$ using the formula:\n * \\f[d=\\sqrt{\\left(x_1-x_2\\right)^2+\\left(y_1-y_2\\right)^2}\\f]\n *\n * \\param [in] A point A\n * \\param [in] B point B\n * \\return ditance\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">LenghtLine</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Point &amp;A, <span class=\"hljs-keyword\">const</span> Point &amp;B)</span> </span>{\n    <span class=\"hljs-type\">double</span> dx = B.x - A.x;\n    <span class=\"hljs-type\">double</span> dy = B.y - A.y;\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>((dx * dx) + (dy * dy));\n}\n\n<span class=\"hljs-comment\">/**\n * Compute the area of triangle formed by three points using [Heron&#x27;s\n * formula](https://en.wikipedia.org/wiki/Heron%27s_formula).\n * If the lengths of the sides of the triangle are \\f$a,\\,b,\\,c\\f$ and\n * \\f$s=\\displaystyle\\frac{a+b+c}{2}\\f$ is the semi-perimeter then the area is\n * given by \\f[A=\\sqrt{s(s-a)(s-b)(s-c)}\\f]\n * \\param [in] A vertex A\n * \\param [in] B vertex B\n * \\param [in] C vertex C\n * \\returns area of triangle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">TriangleArea</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Point &amp;A, <span class=\"hljs-keyword\">const</span> Point &amp;B, <span class=\"hljs-keyword\">const</span> Point &amp;C)</span> </span>{\n    <span class=\"hljs-type\">double</span> a = <span class=\"hljs-built_in\">LenghtLine</span>(A, B);\n    <span class=\"hljs-type\">double</span> b = <span class=\"hljs-built_in\">LenghtLine</span>(B, C);\n    <span class=\"hljs-type\">double</span> c = <span class=\"hljs-built_in\">LenghtLine</span>(C, A);\n    <span class=\"hljs-type\">double</span> p = (a + b + c) / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>(p * (p - a) * (p - b) * (p - c));\n}\n\n<span class=\"hljs-comment\">/**\n * Check if a set of points lie within given circle. This is true if the\n * distance of all the points from the centre of the circle is less than the\n * radius of the circle\n * \\param [in] P set of points to check\n * \\param [in] Center coordinates to centre of the circle\n * \\param [in] R radius of the circle\n * \\returns True if P lies on or within the circle\n * \\returns False if P lies outside the circle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">PointInCircle</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;Point&gt; &amp;P, <span class=\"hljs-keyword\">const</span> Point &amp;Center, <span class=\"hljs-type\">double</span> R)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; P.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">LenghtLine</span>(P[i], Center) &gt; R)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Find the centre and radius of a circle enclosing a set of points.\\n\n * The function returns the radius of the circle and prints the coordinated of\n * the centre of the circle.\n * \\param [in] P vector of points\n * \\returns radius of the circle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">circle</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;Point&gt; &amp;P)</span> </span>{\n    <span class=\"hljs-type\">double</span> minR = INFINITY;\n    <span class=\"hljs-type\">double</span> R;\n    Point C;\n    Point minC;\n\n    <span class=\"hljs-comment\">/* This code is invalid and does not give correct result for TEST 3 */</span>\n    <span class=\"hljs-comment\">// for each point in the list</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; P.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">2</span>; i++)\n        <span class=\"hljs-comment\">// for every subsequent point in the list</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; P.<span class=\"hljs-built_in\">size</span>(); j++)\n            <span class=\"hljs-comment\">// for every subsequent point in the list</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> k = j + <span class=\"hljs-number\">1</span>; k &lt; P.<span class=\"hljs-built_in\">size</span>(); k++) {\n                <span class=\"hljs-comment\">// here, we now have picked three points from the given set of</span>\n                <span class=\"hljs-comment\">// points that we can use</span>\n                <span class=\"hljs-comment\">// viz., P[i], P[j] and P[k]</span>\n                C.x = <span class=\"hljs-number\">-0.5</span> * ((P[i].y * (P[j].x * P[j].x + P[j].y * P[j].y -\n                                         P[k].x * P[k].x - P[k].y * P[k].y) +\n                               P[j].y * (P[k].x * P[k].x + P[k].y * P[k].y -\n                                         P[i].x * P[i].x - P[i].y * P[i].y) +\n                               P[k].y * (P[i].x * P[i].x + P[i].y * P[i].y -\n                                         P[j].x * P[j].x - P[j].y * P[j].y)) /\n                              (P[i].x * (P[j].y - P[k].y) +\n                               P[j].x * (P[k].y - P[i].y) +\n                               P[k].x * (P[i].y - P[j].y)));\n                C.y = <span class=\"hljs-number\">0.5</span> * ((P[i].x * (P[j].x * P[j].x + P[j].y * P[j].y -\n                                        P[k].x * P[k].x - P[k].y * P[k].y) +\n                              P[j].x * (P[k].x * P[k].x + P[k].y * P[k].y -\n                                        P[i].x * P[i].x - P[i].y * P[i].y) +\n                              P[k].x * (P[i].x * P[i].x + P[i].y * P[i].y -\n                                        P[j].x * P[j].x - P[j].y * P[j].y)) /\n                             (P[i].x * (P[j].y - P[k].y) +\n                              P[j].x * (P[k].y - P[i].y) +\n                              P[k].x * (P[i].y - P[j].y)));\n                R = (<span class=\"hljs-built_in\">LenghtLine</span>(P[i], P[j]) * <span class=\"hljs-built_in\">LenghtLine</span>(P[j], P[k]) *\n                     <span class=\"hljs-built_in\">LenghtLine</span>(P[k], P[i])) /\n                    (<span class=\"hljs-number\">4</span> * <span class=\"hljs-built_in\">TriangleArea</span>(P[i], P[j], P[k]));\n                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">PointInCircle</span>(P, C, R)) {\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n                <span class=\"hljs-keyword\">if</span> (R &lt;= minR) {\n                    minR = R;\n                    minC = C;\n                }\n            }\n\n    <span class=\"hljs-comment\">// for each point in the list</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; P.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>; i++)\n        <span class=\"hljs-comment\">// for every subsequent point in the list</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; P.<span class=\"hljs-built_in\">size</span>(); j++) {\n            <span class=\"hljs-comment\">// check for diameterically opposite points</span>\n            C.x = (P[i].x + P[j].x) / <span class=\"hljs-number\">2</span>;\n            C.y = (P[i].y + P[j].y) / <span class=\"hljs-number\">2</span>;\n            R = <span class=\"hljs-built_in\">LenghtLine</span>(C, P[i]);\n            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">PointInCircle</span>(P, C, R)) {\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (R &lt;= minR) {\n                minR = R;\n                minC = C;\n            }\n        }\n    std::cout &lt;&lt; minC.x &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; minC.y &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> minR;\n}\n\n<span class=\"hljs-comment\">/** Test case: result should be:\n * \\n Circle with\n * \\n radius 3.318493136080724\n * \\n centre at (3.0454545454545454, 1.3181818181818181)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;Point&gt; Pv;\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-2</span>));\n    std::cout &lt;&lt; <span class=\"hljs-built_in\">circle</span>(Pv) &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Test case: result should be:\n * \\n Circle with\n * \\n radius 1.4142135623730951\n * \\n centre at (1.0, 1.0)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;Point&gt; Pv;\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>));\n    std::cout &lt;&lt; <span class=\"hljs-built_in\">circle</span>(Pv) &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Test case: result should be:\n * \\n Circle with\n * \\n radius 1.821078397711709\n * \\n centre at (2.142857142857143, 1.7857142857142856)\n * @todo This test fails\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test3</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;Point&gt; Pv;\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">3.5</span>, <span class=\"hljs-number\">3</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">2.5</span>, <span class=\"hljs-number\">0</span>));\n    Pv.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-built_in\">Point</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1.5</span>));\n    std::cout &lt;&lt; <span class=\"hljs-built_in\">circle</span>(Pv) &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Main program */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n    std::cout &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">test2</span>();\n    std::cout &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">test3</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
