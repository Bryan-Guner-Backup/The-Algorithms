{
  "slug": "kadane2",
  "name": "Kadane2",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming/kadane2.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/kadane2.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Kadane\n * Algorithm] (https://en.wikipedia.org/wiki/Kadane%27s_algorithm)\n *\n * @details\n * Kadane algorithm is used to find the maximum sum subarray in an array and\n * maximum sum subarray problem is the task of finding a contiguous subarray\n * with the largest sum\n *\n * ### Algorithm\n * The simple idea of the algorithm is to search for all positive\n * contiguous segments of the array and keep track of maximum sum contiguous\n * segment among all positive segments(curr_sum is used for this)\n * Each time we get a positive sum we compare it with max_sum and update max_sum\n * if it is greater than curr_sum\n *\n * @author [Ayush Singh](https://github.com/ayush523)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-comment\">/**\n * @namespace dynamic_programming\n * @brief Dynamic Programming algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\n<span class=\"hljs-comment\">/**\n * @namespace kadane\n * @brief Functions for\n * [Kadane](https://en.wikipedia.org/wiki/Kadane%27s_algorithm) algorithm.\n */</span>\n<span class=\"hljs-keyword\">namespace</span> kadane {\n<span class=\"hljs-comment\">/**\n * @brief maxSubArray function is used to calculate the maximum sum subarray\n * and returns the value of maximum sum which is stored in the variable max_sum\n * @tparam N number of array size\n * @param n array where numbers are saved\n * @returns the value of maximum subarray sum\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> N&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxSubArray</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, N&gt; &amp;n)</span> </span>{\n    <span class=\"hljs-type\">int</span> curr_sum =\n        <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// declaring a variable named as curr_sum and initialized it to 0</span>\n    <span class=\"hljs-type\">int</span> max_sum = INT_MIN;  <span class=\"hljs-comment\">// Initialized max_sum to INT_MIN</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : n) {  <span class=\"hljs-comment\">// for loop to iterate over the elements of the array</span>\n        curr_sum += n[i];\n        max_sum = std::<span class=\"hljs-built_in\">max</span>(max_sum, curr_sum);  <span class=\"hljs-comment\">// getting the maximum value</span>\n        curr_sum = std::<span class=\"hljs-built_in\">max</span>(curr_sum, <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// updating the value of curr_sum</span>\n    }\n    <span class=\"hljs-keyword\">return</span> max_sum;  <span class=\"hljs-comment\">// returning the value of max_sum</span>\n}\n}  <span class=\"hljs-comment\">// namespace kadane</span>\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">5</span>;\n    std::array&lt;<span class=\"hljs-type\">int</span>, N&gt; n{};  <span class=\"hljs-comment\">// declaring array</span>\n                             <span class=\"hljs-comment\">// taking values of elements from user</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n.<span class=\"hljs-built_in\">size</span>(); i++) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter value of n[&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;]&quot;</span>\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        std::cin &gt;&gt; n[i];\n    }\n    <span class=\"hljs-type\">int</span> max_sum = dynamic_programming::kadane::<span class=\"hljs-built_in\">maxSubArray</span>&lt;N&gt;(\n        n);  <span class=\"hljs-comment\">// calling maxSubArray function</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Maximum subarray sum is &quot;</span> &lt;&lt; max_sum;  <span class=\"hljs-comment\">// Printing the answer</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Pardeep Bhatt",
      "email": "pardeepbhatt5254@gmail.com",
      "commits": 1
    },
    {
      "name": "Ayush Singh",
      "email": "ayushsingh523@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
