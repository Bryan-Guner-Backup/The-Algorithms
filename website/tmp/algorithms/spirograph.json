{
  "slug": "spirograph",
  "name": "Spirograph",
  "categories": ["graphics"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "graphics/spirograph.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graphics/spirograph.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @brief Implementation of\n * [Spirograph](https://en.wikipedia.org/wiki/Spirograph)\n *\n * @details\n * Implementation of the program is based on the geometry shown in the figure\n * below:\n *\n * &lt;a\n * href=&quot;https://commons.wikimedia.org/wiki/File:Resonance_Cascade.svg&quot;&gt;&lt;img\n * src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/39/Resonance_Cascade.svg&quot;\n * alt=&quot;Spirograph geometry from Wikipedia&quot; style=&quot;width: 250px&quot;/&gt;&lt;/a&gt;\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> USE_GLUT</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __APPLE__</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;GLUT/glut.h&gt;</span>  <span class=\"hljs-comment\">// include path on Macs is different</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;GL/glut.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span>  <span class=\"hljs-comment\">// __APPLE__</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _USE_MATH_DEFINES <span class=\"hljs-comment\">/**&lt; required for MSVC compiler */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fstream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iomanip&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sstream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _OPENMP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;omp.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace spirograph Functions related to spirograph.cpp\n */</span>\n<span class=\"hljs-keyword\">namespace</span> spirograph {\n<span class=\"hljs-comment\">/** Generate spirograph curve into arrays `x` and `y` such that the i^th point\n * in 2D is represented by `(x[i],y[i])`. The generating function is given by:\n * \\f{eqnarray*}{\n * x &amp;=&amp; R\\left[ (1-k) \\cos (t) + l\\cdot k\\cdot\\cos \\left(\\frac{1-k}{k}t\\right)\n * \\right]\\\\\n * y &amp;=&amp; R\\left[ (1-k) \\sin (t) - l\\cdot k\\cdot\\sin \\left(\\frac{1-k}{k}t\\right)\n * \\right] \\f}\n * where\n * * \\f$R\\f$ is the scaling parameter that we will consider \\f$=1\\f$\n * * \\f$l=\\frac{\\rho}{r}\\f$ is the relative distance of marker from the centre\n * of inner circle and \\f$0\\le l\\le1\\f$\n * * \\f$\\rho\\f$ is physical distance of marker from centre of inner circle\n * * \\f$r\\f$ is the radius of inner circle\n * * \\f$k=\\frac{r}{R}\\f$ is the ratio of radius of inner circle to outer circle\n * and \\f$0&lt;k&lt;1\\f$\n * * \\f$R\\f$ is the radius of outer circle\n * * \\f$t\\f$ is the angle of rotation of the point i.e., represents the time\n * parameter\n *\n * Since we are considering ratios, the actual values of \\f$r\\f$ and\n * \\f$R\\f$ are immaterial.\n *\n * @tparam N number of points = size of array\n * @param [out] points Array of 2D points represented as std::pair\n * @param l the relative distance of marker from the centre of\n * inner circle and \\f$0\\le l\\le1\\f$\n * @param k the ratio of radius of inner circle to outer circle and \\f$0&lt;k&lt;1\\f$\n * @param rot the number of rotations to perform (can be fractional value)\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;std::<span class=\"hljs-type\">size_t</span> N&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">spirograph</span><span class=\"hljs-params\">(std::array&lt;std::pair&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-type\">double</span>&gt;, N&gt; *points, <span class=\"hljs-type\">double</span> l,\n                <span class=\"hljs-type\">double</span> k, <span class=\"hljs-type\">double</span> rot)</span> </span>{\n    <span class=\"hljs-type\">double</span> dt = rot * <span class=\"hljs-number\">2.f</span> * M_PI / N;\n    <span class=\"hljs-type\">double</span> R = <span class=\"hljs-number\">1.f</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> k1 = <span class=\"hljs-number\">1.f</span> - k;\n    <span class=\"hljs-type\">int32_t</span> step = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _OPENMP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> omp for</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n    <span class=\"hljs-keyword\">for</span> (step = <span class=\"hljs-number\">0</span>; step &lt; N; step++) {\n        <span class=\"hljs-type\">double</span> t = dt * step;\n        <span class=\"hljs-type\">double</span> first = R * (k1 * std::<span class=\"hljs-built_in\">cos</span>(t) + l * k * std::<span class=\"hljs-built_in\">cos</span>(k1 * t / k));\n        <span class=\"hljs-type\">double</span> second = R * (k1 * std::<span class=\"hljs-built_in\">sin</span>(t) - l * k * std::<span class=\"hljs-built_in\">sin</span>(k1 * t / k));\n        points[<span class=\"hljs-number\">0</span>][step].first = first;\n        points[<span class=\"hljs-number\">0</span>][step].second = second;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Test function to save resulting points to a CSV file.\n *\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">size_t</span> N = <span class=\"hljs-number\">500</span>;\n    <span class=\"hljs-type\">double</span> l = <span class=\"hljs-number\">0.3</span>, k = <span class=\"hljs-number\">0.75</span>, rot = <span class=\"hljs-number\">10.</span>;\n    std::stringstream fname;\n    fname &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-string\">&quot;spirograph_&quot;</span> &lt;&lt; l &lt;&lt; <span class=\"hljs-string\">&quot;_&quot;</span> &lt;&lt; k &lt;&lt; <span class=\"hljs-string\">&quot;_&quot;</span> &lt;&lt; rot\n          &lt;&lt; <span class=\"hljs-string\">&quot;.csv&quot;</span>;\n    <span class=\"hljs-function\">std::ofstream <span class=\"hljs-title\">fp</span><span class=\"hljs-params\">(fname.str())</span></span>;\n    <span class=\"hljs-keyword\">if</span> (!fp.<span class=\"hljs-built_in\">is_open</span>()) {\n        <span class=\"hljs-built_in\">perror</span>(fname.<span class=\"hljs-built_in\">str</span>().<span class=\"hljs-built_in\">c_str</span>());\n        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n    }\n\n    std::array&lt;std::pair&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-type\">double</span>&gt;, N&gt; points;\n\n    <span class=\"hljs-built_in\">spirograph</span>(&amp;points, l, k, rot);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n        fp &lt;&lt; points[i].first &lt;&lt; <span class=\"hljs-string\">&quot;,&quot;</span> &lt;&lt; points[i].first;\n        <span class=\"hljs-keyword\">if</span> (i &lt; N - <span class=\"hljs-number\">1</span>) {\n            fp &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n        }\n    }\n\n    fp.<span class=\"hljs-built_in\">close</span>();\n}\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> USE_GLUT</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">bool</span> paused = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/**&lt; flag to set pause/unpause animation */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> animation_speed = <span class=\"hljs-number\">25</span>; <span class=\"hljs-comment\">/**&lt; animation delate in ms */</span>\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> step = <span class=\"hljs-number\">0.01</span>;   <span class=\"hljs-comment\">/**&lt; animation step size */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> l_ratio = step * <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">/**&lt; the l-ratio defined in docs */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> k_ratio = step;      <span class=\"hljs-comment\">/**&lt; the k-ratio defined in docs */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> num_rot = <span class=\"hljs-number\">20.</span>; <span class=\"hljs-comment\">/**&lt; number of rotations to simulate */</span>\n\n<span class=\"hljs-comment\">/** A wrapper that is not available in all GLUT implementations.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">glutBitmapString</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *font, <span class=\"hljs-type\">char</span> *message)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> *ch = message; *ch != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>; ch++) <span class=\"hljs-built_in\">glutBitmapCharacter</span>(font, *ch);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to graph (x,y) points on the OpenGL graphics window.\n *\n * @tparam N number of points = size of array\n * @param [in] points Array of 2D points represented as std::pair\n * @param l the relative distance of marker from the centre of\n * inner circle and \\f$0\\le l\\le1\\f$ to display info\n * @param k the ratio of radius of inner circle to outer circle and \\f$0&lt;k&lt;1\\f$\n * to display info\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> N&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display_graph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;std::pair&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-type\">double</span>&gt;, N&gt; &amp;points,\n                   <span class=\"hljs-type\">double</span> l, <span class=\"hljs-type\">double</span> k)</span> </span>{\n    <span class=\"hljs-built_in\">glClearColor</span>(<span class=\"hljs-number\">1.0f</span>, <span class=\"hljs-number\">1.0f</span>, <span class=\"hljs-number\">1.0f</span>,\n                 <span class=\"hljs-number\">0.0f</span>);            <span class=\"hljs-comment\">// Set background color to white and opaque</span>\n    <span class=\"hljs-built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);  <span class=\"hljs-comment\">// Clear the color buffer (background)</span>\n\n    <span class=\"hljs-built_in\">glBegin</span>(GL_LINES);         <span class=\"hljs-comment\">// draw line segments</span>\n    <span class=\"hljs-built_in\">glColor3f</span>(<span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">1.f</span>);  <span class=\"hljs-comment\">// blue</span>\n    <span class=\"hljs-built_in\">glPointSize</span>(<span class=\"hljs-number\">2.f</span>);          <span class=\"hljs-comment\">// point size in pixels</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">1</span>; i &lt; N; i++) {\n        <span class=\"hljs-built_in\">glVertex2f</span>(points[i - <span class=\"hljs-number\">1</span>].first, points[i - <span class=\"hljs-number\">1</span>].second);  <span class=\"hljs-comment\">// line from</span>\n        <span class=\"hljs-built_in\">glVertex2f</span>(points[i].first, points[i].second);          <span class=\"hljs-comment\">// line to</span>\n    }\n    <span class=\"hljs-built_in\">glEnd</span>();\n\n    <span class=\"hljs-built_in\">glColor3f</span>(<span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">0.f</span>);\n    std::stringstream buffer;\n    buffer &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-string\">&quot;l = &quot;</span> &lt;&lt; l;\n    <span class=\"hljs-built_in\">glRasterPos2f</span>(<span class=\"hljs-number\">-.85</span>, <span class=\"hljs-number\">.85</span>);\n    <span class=\"hljs-built_in\">glutBitmapString</span>(GLUT_BITMAP_TIMES_ROMAN_24,\n                     <span class=\"hljs-built_in\">const_cast</span>&lt;<span class=\"hljs-type\">char</span> *&gt;(buffer.<span class=\"hljs-built_in\">str</span>().<span class=\"hljs-built_in\">c_str</span>()));\n    buffer.<span class=\"hljs-built_in\">str</span>(<span class=\"hljs-string\">&quot;&quot;</span>);\n    buffer.<span class=\"hljs-built_in\">clear</span>();\n    buffer &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-string\">&quot;k = &quot;</span> &lt;&lt; k;\n    <span class=\"hljs-built_in\">glRasterPos2f</span>(<span class=\"hljs-number\">-.85</span>, <span class=\"hljs-number\">.70</span>);\n    <span class=\"hljs-built_in\">glutBitmapString</span>(GLUT_BITMAP_TIMES_ROMAN_24,\n                     <span class=\"hljs-built_in\">const_cast</span>&lt;<span class=\"hljs-type\">char</span> *&gt;(buffer.<span class=\"hljs-built_in\">str</span>().<span class=\"hljs-built_in\">c_str</span>()));\n\n    <span class=\"hljs-built_in\">glutSwapBuffers</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Test function with animation\n *\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">size_t</span> N = <span class=\"hljs-number\">5000</span>;  <span class=\"hljs-comment\">// number of samples</span>\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">bool</span> direction1 = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// increment if true, otherwise decrement</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">bool</span> direction2 = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// increment if true, otherwise decrement</span>\n\n    std::array&lt;std::pair&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-type\">double</span>&gt;, N&gt; points;\n\n    <span class=\"hljs-built_in\">spirograph</span>(&amp;points, l_ratio, k_ratio, num_rot);\n    <span class=\"hljs-built_in\">display_graph</span>(points, l_ratio, k_ratio);\n\n    <span class=\"hljs-keyword\">if</span> (paused)\n        <span class=\"hljs-comment\">// if paused, do not update l_ratio and k_ratio</span>\n        <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">if</span> (direction1) {                 <span class=\"hljs-comment\">// increment k_ratio</span>\n        <span class=\"hljs-keyword\">if</span> (k_ratio &gt;= (<span class=\"hljs-number\">1.f</span> - step))  <span class=\"hljs-comment\">// maximum limit</span>\n            direction1 = <span class=\"hljs-literal\">false</span>;       <span class=\"hljs-comment\">// reverse direction of k_ratio</span>\n        <span class=\"hljs-keyword\">else</span>\n            k_ratio += step;\n    } <span class=\"hljs-keyword\">else</span> {                    <span class=\"hljs-comment\">// decrement k_ratio</span>\n        <span class=\"hljs-keyword\">if</span> (k_ratio &lt;= step) {  <span class=\"hljs-comment\">// minimum limit</span>\n            direction1 = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// reverse direction of k_ratio</span>\n\n            <span class=\"hljs-keyword\">if</span> (direction2) {                 <span class=\"hljs-comment\">// increment l_ratio</span>\n                <span class=\"hljs-keyword\">if</span> (l_ratio &gt;= (<span class=\"hljs-number\">1.f</span> - step))  <span class=\"hljs-comment\">// max limit of l_ratio</span>\n                    direction2 = <span class=\"hljs-literal\">false</span>;       <span class=\"hljs-comment\">// reverse direction of l_ratio</span>\n                <span class=\"hljs-keyword\">else</span>\n                    l_ratio += step;\n            } <span class=\"hljs-keyword\">else</span> {                    <span class=\"hljs-comment\">// decrement l_ratio</span>\n                <span class=\"hljs-keyword\">if</span> (l_ratio &lt;= step)    <span class=\"hljs-comment\">// minimum limit of l_ratio</span>\n                    direction2 = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// reverse direction of l_ratio</span>\n                <span class=\"hljs-keyword\">else</span>\n                    l_ratio -= step;\n            }\n        } <span class=\"hljs-keyword\">else</span> {  <span class=\"hljs-comment\">// no min limit of k_ratio</span>\n            k_ratio -= step;\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief GLUT timer callback function to add animation delay.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">timer_cb</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> t)</span> </span>{\n    <span class=\"hljs-built_in\">glutTimerFunc</span>(animation_speed, timer_cb, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">glutPostRedisplay</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Keypress event call back function.\n *\n * @param key ID of the key pressed\n * @param x mouse pointer position at event\n * @param y mouse pointer position at event\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">keyboard_cb</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">char</span> key, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> </span>{\n    <span class=\"hljs-built_in\">switch</span> (key) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27; &#x27;</span>:              <span class=\"hljs-comment\">// spacebar toggles pause</span>\n            paused = !paused;  <span class=\"hljs-comment\">// toggle</span>\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> GLUT_KEY_UP:\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:  <span class=\"hljs-comment\">// up arrow key</span>\n            k_ratio += step;\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> GLUT_KEY_DOWN:\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;_&#x27;</span>:  <span class=\"hljs-comment\">// down arrow key</span>\n            k_ratio -= step;\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> GLUT_KEY_RIGHT:\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;=&#x27;</span>:  <span class=\"hljs-comment\">// left arrow key</span>\n            l_ratio += step;\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> GLUT_KEY_LEFT:\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:  <span class=\"hljs-comment\">// right arrow key</span>\n            l_ratio -= step;\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x1B</span>:  <span class=\"hljs-comment\">// escape key exits</span>\n            <span class=\"hljs-built_in\">exit</span>(EXIT_SUCCESS);\n        <span class=\"hljs-keyword\">default</span>:\n            <span class=\"hljs-keyword\">return</span>;\n    }\n}\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n}  <span class=\"hljs-comment\">// namespace spirograph</span>\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> **argv)</span> </span>{\n    spirograph::<span class=\"hljs-built_in\">test</span>();\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> USE_GLUT</span>\n    <span class=\"hljs-built_in\">glutInit</span>(&amp;argc, argv);\n    <span class=\"hljs-built_in\">glutInitDisplayMode</span>(GLUT_RGB | GLUT_DOUBLE);\n    <span class=\"hljs-built_in\">glutCreateWindow</span>(<span class=\"hljs-string\">&quot;Spirograph&quot;</span>);\n    <span class=\"hljs-built_in\">glutInitWindowSize</span>(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>);\n    <span class=\"hljs-comment\">// glutIdleFunc(glutPostRedisplay);</span>\n    <span class=\"hljs-built_in\">glutTimerFunc</span>(spirograph::animation_speed, spirograph::timer_cb, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">glutKeyboardFunc</span>(spirograph::keyboard_cb);\n    <span class=\"hljs-built_in\">glutDisplayFunc</span>(spirograph::test2);\n    <span class=\"hljs-built_in\">glutMainLoop</span>();\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "graphics/spirograph.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/graphics/spirograph.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @brief Implementation of\n * [Spirograph](https://en.wikipedia.org/wiki/Spirograph)\n *\n * @details\n * Implementation of the program is based on the geometry shown in the figure\n * below:\n *\n * &lt;a\n * href=&quot;https://commons.wikimedia.org/wiki/File:Resonance_Cascade.svg&quot;&gt;&lt;img\n * src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/39/Resonance_Cascade.svg&quot;\n * alt=&quot;Spirograph geometry from Wikipedia&quot; style=&quot;width: 250px&quot;/&gt;&lt;/a&gt;\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _USE_MATH_DEFINES <span class=\"hljs-comment\">/**&lt; required for MSVC compiler */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Generate spirograph curve into arrays `x` and `y` such that the i^th point\n * in 2D is represented by `(x[i],y[i])`. The generating function is given by:\n * \\f{eqnarray*}{\n * x &amp;=&amp; R\\left[ (1-k) \\cos (t) + l\\cdot k\\cdot\\cos \\left(\\frac{1-k}{k}t\\right)\n * \\right]\\\\\n * y &amp;=&amp; R\\left[ (1-k) \\sin (t) - l\\cdot k\\cdot\\sin \\left(\\frac{1-k}{k}t\\right)\n * \\right] \\f}\n * where\n * * \\f$R\\f$ is the scaling parameter that we will consider \\f$=1\\f$\n * * \\f$l=\\frac{\\rho}{r}\\f$ is the relative distance of marker from the centre\n * of inner circle and \\f$0\\le l\\le1\\f$\n * * \\f$\\rho\\f$ is physical distance of marker from centre of inner circle\n * * \\f$r\\f$ is the radius of inner circle\n * * \\f$k=\\frac{r}{R}\\f$ is the ratio of radius of inner circle to outer circle\n * and \\f$0&lt;k&lt;1\\f$\n * * \\f$R\\f$ is the radius of outer circle\n * * \\f$t\\f$ is the angle of rotation of the point i.e., represents the time\n * parameter\n *\n * Since we are considering ratios, the actual values of \\f$r\\f$ and\n * \\f$R\\f$ are immaterial.\n *\n * @param [out] x output array containing absicca of points (must be\n * pre-allocated)\n * @param [out] y output array containing ordinates of points (must be\n * pre-allocated)\n * @param l the relative distance of marker from the centre of\n * inner circle and \\f$0\\le l\\le1\\f$\n * @param k the ratio of radius of inner circle to outer circle and\n * \\f$0&lt;k&lt;1\\f$\n * @param N number of sample points along the trajectory (higher = better\n * resolution but consumes more time and memory)\n * @param num_rot the number of rotations to perform (can be fractional value)\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">spirograph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> *x, <span class=\"hljs-type\">double</span> *y, <span class=\"hljs-type\">double</span> l, <span class=\"hljs-type\">double</span> k, <span class=\"hljs-type\">size_t</span> N, <span class=\"hljs-type\">double</span> rot)</span>\n{\n    <span class=\"hljs-type\">double</span> dt = rot * <span class=\"hljs-number\">2.f</span> * M_PI / N;\n    <span class=\"hljs-type\">double</span> t = <span class=\"hljs-number\">0.f</span>, R = <span class=\"hljs-number\">1.f</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> k1 = <span class=\"hljs-number\">1.f</span> - k;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> dk = <span class=\"hljs-number\">0</span>; dk &lt; N; dk++, t += dt)\n    {\n        x[dk] = R * (k1 * <span class=\"hljs-built_in\">cos</span>(t) + l * k * <span class=\"hljs-built_in\">cos</span>(k1 * t / k));\n        y[dk] = R * (k1 * <span class=\"hljs-built_in\">sin</span>(t) - l * k * <span class=\"hljs-built_in\">sin</span>(k1 * t / k));\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Test function to save resulting points to a CSV file.\n *\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-type\">size_t</span> N = <span class=\"hljs-number\">500</span>;\n    <span class=\"hljs-type\">double</span> l = <span class=\"hljs-number\">0.3</span>, k = <span class=\"hljs-number\">0.75</span>, rot = <span class=\"hljs-number\">10.</span>;\n    <span class=\"hljs-type\">char</span> fname[<span class=\"hljs-number\">50</span>];\n    <span class=\"hljs-built_in\">snprintf</span>(fname, <span class=\"hljs-number\">50</span>, <span class=\"hljs-string\">&quot;spirograph_%.2f_%.2f_%.2f.csv&quot;</span>, l, k, rot);\n    FILE *fp = fopen(fname, <span class=\"hljs-string\">&quot;wt&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (!fp)\n    {\n        perror(fname);\n        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n    }\n\n    <span class=\"hljs-type\">double</span> *x = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">malloc</span>(N * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>));\n    <span class=\"hljs-type\">double</span> *y = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">malloc</span>(N * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>));\n\n    spirograph(x, y, l, k, N, rot);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++)\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(fp, <span class=\"hljs-string\">&quot;%.5g, %.5g&quot;</span>, x[i], y[i]);\n        <span class=\"hljs-keyword\">if</span> (i &lt; N - <span class=\"hljs-number\">1</span>)\n        {\n            fputc(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>, fp);\n        }\n    }\n\n    fclose(fp);\n\n    <span class=\"hljs-built_in\">free</span>(x);\n    <span class=\"hljs-built_in\">free</span>(y);\n}\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> USE_GLUT  <span class=\"hljs-comment\">// this is set by CMAKE automatically, if available</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __APPLE__</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;GLUT/glut.h&gt;</span>  <span class=\"hljs-comment\">// include path on Macs is different</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;GL/glut.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">bool</span> paused = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/**&lt; flag to set pause/unpause animation */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> animation_speed = <span class=\"hljs-number\">25</span>; <span class=\"hljs-comment\">/**&lt; animation delate in ms */</span>\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> step = <span class=\"hljs-number\">0.01</span>;   <span class=\"hljs-comment\">/**&lt; animation step size */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> l_ratio = <span class=\"hljs-number\">0.1</span>;       <span class=\"hljs-comment\">/**&lt; the l-ratio defined in docs */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> k_ratio = <span class=\"hljs-number\">0.1</span>;       <span class=\"hljs-comment\">/**&lt; the k-ratio defined in docs */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> num_rot = <span class=\"hljs-number\">20.</span>; <span class=\"hljs-comment\">/**&lt; number of rotations to simulate */</span>\n\n<span class=\"hljs-comment\">/** A wrapper that is not available in all GLUT implementations.\n */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">glutBitmapString</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span> *font, <span class=\"hljs-type\">char</span> *<span class=\"hljs-built_in\">string</span>)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> *ch = <span class=\"hljs-built_in\">string</span>; *ch != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>; ch++) glutBitmapCharacter(font, *ch);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to graph (x,y) points on the OpenGL graphics window.\n *\n * @param x array containing absicca of points (must be pre-allocated)\n * @param y array containing ordinates of points (must be pre-allocated)\n * @param N number of points in the the arrays\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display_graph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> *x, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> *y, <span class=\"hljs-type\">size_t</span> N, <span class=\"hljs-type\">double</span> l,\n                   <span class=\"hljs-type\">double</span> k)</span>\n{\n    glClearColor(<span class=\"hljs-number\">1.0f</span>, <span class=\"hljs-number\">1.0f</span>, <span class=\"hljs-number\">1.0f</span>,\n                 <span class=\"hljs-number\">0.0f</span>);            <span class=\"hljs-comment\">// Set background color to white and opaque</span>\n    glClear(GL_COLOR_BUFFER_BIT);  <span class=\"hljs-comment\">// Clear the color buffer (background)</span>\n\n    <span class=\"hljs-keyword\">if</span> (x &amp;&amp; y)\n    {\n        glBegin(GL_LINES);         <span class=\"hljs-comment\">// draw line segments</span>\n        glColor3f(<span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">1.f</span>);  <span class=\"hljs-comment\">// blue</span>\n        glPointSize(<span class=\"hljs-number\">2.f</span>);          <span class=\"hljs-comment\">// point size in pixels</span>\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">1</span>; i &lt; N; i++)\n        {\n            glVertex2f(x[i - <span class=\"hljs-number\">1</span>], y[i - <span class=\"hljs-number\">1</span>]);  <span class=\"hljs-comment\">// line from</span>\n            glVertex2f(x[i], y[i]);          <span class=\"hljs-comment\">// line to</span>\n        }\n        glEnd();\n    }\n    glColor3f(<span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">0.f</span>);\n    <span class=\"hljs-type\">char</span> buffer[<span class=\"hljs-number\">20</span>];\n    <span class=\"hljs-built_in\">snprintf</span>(buffer, <span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">&quot;l = %.3f&quot;</span>, l);\n    glRasterPos2f(<span class=\"hljs-number\">-.85</span>, <span class=\"hljs-number\">.85</span>);\n    glutBitmapString(GLUT_BITMAP_HELVETICA_18, buffer);\n    <span class=\"hljs-built_in\">snprintf</span>(buffer, <span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">&quot;k = %.3f&quot;</span>, k);\n    glRasterPos2f(<span class=\"hljs-number\">-.85</span>, <span class=\"hljs-number\">.75</span>);\n    glutBitmapString(GLUT_BITMAP_HELVETICA_18, buffer);\n\n    glutSwapBuffers();\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Test function with animation\n *\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">size_t</span> N = <span class=\"hljs-number\">1000</span>;  <span class=\"hljs-comment\">// number of samples</span>\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">bool</span> direction1 = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// increment if true, otherwise decrement</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">bool</span> direction2 = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// increment if true, otherwise decrement</span>\n\n    <span class=\"hljs-type\">double</span> *x = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">malloc</span>(N * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>));\n    <span class=\"hljs-type\">double</span> *y = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">malloc</span>(N * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>));\n\n    spirograph(x, y, l_ratio, k_ratio, N, num_rot);\n    display_graph(x, y, N, l_ratio, k_ratio);\n\n    <span class=\"hljs-built_in\">free</span>(x);  <span class=\"hljs-comment\">// free dynamic memories</span>\n    <span class=\"hljs-built_in\">free</span>(y);\n\n    <span class=\"hljs-keyword\">if</span> (paused)\n        <span class=\"hljs-comment\">// if paused, do not update l_ratio and k_ratio</span>\n        <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">if</span> (direction1)  <span class=\"hljs-comment\">// increment k_ratio</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (k_ratio &gt;= (<span class=\"hljs-number\">1.f</span> - step))  <span class=\"hljs-comment\">// maximum limit</span>\n            direction1 = <span class=\"hljs-literal\">false</span>;       <span class=\"hljs-comment\">// reverse direction of k_ratio</span>\n        <span class=\"hljs-keyword\">else</span>\n            k_ratio += step;\n    }\n    <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// decrement k_ratio</span>\n    {\n        <span class=\"hljs-keyword\">if</span> (k_ratio &lt;= step)  <span class=\"hljs-comment\">// minimum limit</span>\n        {\n            direction1 = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// reverse direction of k_ratio</span>\n\n            <span class=\"hljs-keyword\">if</span> (direction2)  <span class=\"hljs-comment\">// increment l_ratio</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (l_ratio &gt;= (<span class=\"hljs-number\">1.f</span> - step))  <span class=\"hljs-comment\">// max limit of l_ratio</span>\n                    direction2 = <span class=\"hljs-literal\">false</span>;       <span class=\"hljs-comment\">// reverse direction of l_ratio</span>\n                <span class=\"hljs-keyword\">else</span>\n                    l_ratio += step;\n            }\n            <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// decrement l_ratio</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (l_ratio &lt;= step)    <span class=\"hljs-comment\">// minimum limit of l_ratio</span>\n                    direction2 = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">// reverse direction of l_ratio</span>\n                <span class=\"hljs-keyword\">else</span>\n                    l_ratio -= step;\n            }\n        }\n        <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// no min limit of k_ratio</span>\n            k_ratio -= step;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief GLUT timer callback function to add animation delay.\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">timer_cb</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id)</span>\n{\n    glutPostRedisplay();\n    glutTimerFunc(animation_speed, timer_cb, <span class=\"hljs-number\">0</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Keypress event call back function.\n *\n * @param key ID of the key pressed\n * @param x mouse pointer position at event\n * @param y mouse pointer position at event\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">keyboard_cb</span><span class=\"hljs-params\">(<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> key, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span>\n{\n    <span class=\"hljs-keyword\">switch</span> (key)\n    {\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27; &#x27;</span>:              <span class=\"hljs-comment\">// spacebar toggles pause</span>\n        paused = !paused;  <span class=\"hljs-comment\">// toggle</span>\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:  <span class=\"hljs-comment\">// up arrow key</span>\n        k_ratio += step;\n        display_graph(<span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-number\">1</span>, l_ratio, k_ratio);\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;_&#x27;</span>:  <span class=\"hljs-comment\">// down arrow key</span>\n        k_ratio -= step;\n        display_graph(<span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-number\">1</span>, l_ratio, k_ratio);\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;=&#x27;</span>:  <span class=\"hljs-comment\">// left arrow key</span>\n        l_ratio += step;\n        display_graph(<span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-number\">1</span>, l_ratio, k_ratio);\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:  <span class=\"hljs-comment\">// right arrow key</span>\n        l_ratio -= step;\n        display_graph(<span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-literal\">NULL</span>, <span class=\"hljs-number\">1</span>, l_ratio, k_ratio);\n        <span class=\"hljs-keyword\">break</span>;\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0x1B</span>:  <span class=\"hljs-comment\">// escape key exits</span>\n        <span class=\"hljs-built_in\">exit</span>(EXIT_SUCCESS);\n    }\n}\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> **argv)</span>\n{\n    test();\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> USE_GLUT</span>\n    glutInit(&amp;argc, argv);\n    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);\n    glutCreateWindow(<span class=\"hljs-string\">&quot;Spirograph&quot;</span>);\n    glutInitWindowSize(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">400</span>);\n    <span class=\"hljs-comment\">// glutIdleFunc(glutPostRedisplay);</span>\n    glutTimerFunc(animation_speed, timer_cb, <span class=\"hljs-number\">0</span>);\n    glutKeyboardFunc(keyboard_cb);\n    glutDisplayFunc(test2);\n    glutMainLoop();\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
