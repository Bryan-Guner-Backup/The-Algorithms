{
  "slug": "balancedbrackets",
  "name": "BalancedBrackets",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Stacks/BalancedBrackets.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Stacks/BalancedBrackets.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Stacks;\n\n<span class=\"hljs-keyword\">import</span> java.util.Stack;\n\n<span class=\"hljs-comment\">/**\n * The nested brackets problem is a problem that determines if a sequence of brackets are properly\n * nested. A sequence of brackets s is considered properly nested if any of the following conditions\n * are true: - s is empty - s has the form (U) or [U] or {U} where U is a properly nested string - s\n * has the form VW where V and W are properly nested strings For example, the string &quot;()()[()]&quot; is\n * properly nested but &quot;[(()]&quot; is not. The function called is_balanced takes as input a string S\n * which is a sequence of brackets and returns true if S is nested and false otherwise.\n *\n * <span class=\"hljs-doctag\">@author</span> akshay sharma\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=&quot;https://github.com/khalil2535&quot;&gt;khalil2535&lt;a&gt;\n * <span class=\"hljs-doctag\">@author</span> shellhub\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BalancedBrackets</span> {\n\n  <span class=\"hljs-comment\">/**\n   * Check if {<span class=\"hljs-doctag\">@code</span> leftBracket} and {<span class=\"hljs-doctag\">@code</span> rightBracket} is paired or not\n   *\n   * <span class=\"hljs-doctag\">@param</span> leftBracket left bracket\n   * <span class=\"hljs-doctag\">@param</span> rightBracket right bracket\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if {<span class=\"hljs-doctag\">@code</span> leftBracket} and {<span class=\"hljs-doctag\">@code</span> rightBracket} is paired, otherwise\n   *     {<span class=\"hljs-doctag\">@code</span> false}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPaired</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> leftBracket, <span class=\"hljs-type\">char</span> rightBracket)</span> {\n    <span class=\"hljs-type\">char</span>[][] pairedBrackets = {\n      {<span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;)&#x27;</span>},\n      {<span class=\"hljs-string\">&#x27;[&#x27;</span>, <span class=\"hljs-string\">&#x27;]&#x27;</span>},\n      {<span class=\"hljs-string\">&#x27;{&#x27;</span>, <span class=\"hljs-string\">&#x27;}&#x27;</span>},\n      {<span class=\"hljs-string\">&#x27;&lt;&#x27;</span>, <span class=\"hljs-string\">&#x27;&gt;&#x27;</span>}\n    };\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span>[] pairedBracket : pairedBrackets) {\n      <span class=\"hljs-keyword\">if</span> (pairedBracket[<span class=\"hljs-number\">0</span>] == leftBracket &amp;&amp; pairedBracket[<span class=\"hljs-number\">1</span>] == rightBracket) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if {<span class=\"hljs-doctag\">@code</span> brackets} is balanced\n   *\n   * <span class=\"hljs-doctag\">@param</span> brackets the brackets\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if {<span class=\"hljs-doctag\">@code</span> brackets} is balanced, otherwise {<span class=\"hljs-doctag\">@code</span> false}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isBalanced</span><span class=\"hljs-params\">(String brackets)</span> {\n    <span class=\"hljs-keyword\">if</span> (brackets == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;brackets is null&quot;</span>);\n    }\n    Stack&lt;Character&gt; bracketsStack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;&gt;();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> bracket : brackets.toCharArray()) {\n      <span class=\"hljs-keyword\">switch</span> (bracket) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;(&#x27;</span>:\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;[&#x27;</span>:\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;{&#x27;</span>:\n          bracketsStack.push(bracket);\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;)&#x27;</span>:\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;]&#x27;</span>:\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;}&#x27;</span>:\n          <span class=\"hljs-keyword\">if</span> (bracketsStack.isEmpty() || !isPaired(bracketsStack.pop(), bracket)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n          }\n          <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-comment\">/* other character is invalid */</span>\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> bracketsStack.isEmpty();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isBalanced</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;[()]{}{[()()]()}&quot;</span>)</span>;\n    <span class=\"hljs-keyword\">assert</span> !isBalanced(<span class=\"hljs-string\">&quot;[(])&quot;</span>);\n  }\n}\n"
    },
    "dart": {
      "dir": "data_structures/Stack/balanced_brackets.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures/Stack/balanced_brackets.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:stack/stack.dart&#x27;</span>;\n\n<span class=\"hljs-built_in\">bool</span> isBalancedBrackets(<span class=\"hljs-built_in\">String</span> string) {\n  Stack&lt;<span class=\"hljs-built_in\">String</span>&gt; stack = Stack();\n\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">String</span>&gt; openingBrackets = [<span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;{&#x27;</span>, <span class=\"hljs-string\">&#x27;[&#x27;</span>];\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">String</span>&gt; matchingBracket = {<span class=\"hljs-string\">&#x27;}&#x27;</span>: <span class=\"hljs-string\">&#x27;{&#x27;</span>, <span class=\"hljs-string\">&#x27;)&#x27;</span>: <span class=\"hljs-string\">&#x27;(&#x27;</span>, <span class=\"hljs-string\">&#x27;]&#x27;</span>: <span class=\"hljs-string\">&#x27;[&#x27;</span>};\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; string.length; i++) {\n    <span class=\"hljs-keyword\">var</span> currentChar = string[i];\n\n    <span class=\"hljs-keyword\">if</span> (openingBrackets.contains(currentChar)) {\n      stack.push(currentChar);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (stack.isNotEmpty) {\n        <span class=\"hljs-keyword\">if</span> (stack.top() == matchingBracket[currentChar]) {\n          stack.pop();\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> stack.isEmpty;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\n    expect(isBalancedBrackets(<span class=\"hljs-string\">&#x27;([])(){}(())()()&#x27;</span>), isTrue);\n  });\n\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\n    expect(isBalancedBrackets(<span class=\"hljs-string\">&#x27;()[]{}{&#x27;</span>), isFalse);\n  });\n\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\n    expect(isBalancedBrackets(<span class=\"hljs-string\">&#x27;()()[{()})]&#x27;</span>), isFalse);\n  });\n\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\n    expect(isBalancedBrackets(<span class=\"hljs-string\">&#x27;()([])&#x27;</span>), isTrue);\n  });\n\n  test((<span class=\"hljs-string\">&#x27;Balanced Bracket&#x27;</span>), () {\n    expect(\n        isBalancedBrackets(\n            <span class=\"hljs-string\">&#x27;(((((([[[[[[{{{{{{{{{{{{()}}}}}}}}}}}}]]]]]]))))))((([])({})[])[])[]([]){}(())&#x27;</span>),\n        isTrue);\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 3
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
