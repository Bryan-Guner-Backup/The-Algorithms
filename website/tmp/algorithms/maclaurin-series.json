{
  "slug": "maclaurin-series",
  "name": "Maclaurin Series",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Numeric/Series/Maclaurin.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Numeric/Series/Maclaurin.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric.Series</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Maclaurin series calculates nonlinear functions approximation</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     starting from point x = 0 in a form of infinite power series:</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     f(x) = f(0) + f&#x27;(0) * x + ... + (f&#x27;n(0) * (x ^ n)) / n! + ...,</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n is natural number.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Maclaurin</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Calculates approximation of e^x function:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     e^x = 1 + x + x^2 / 2! + ... + x^n / n! + ...,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n is number of terms (natural number),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and x is given point (rational number).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>The number of terms in polynomial.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Approximated value of the function in the given point.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">Exp</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">int</span> n</span>)</span> =&gt;\n            Enumerable.Range(<span class=\"hljs-number\">0</span>, n).Sum(i =&gt; ExpTerm(x, i));\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Calculates approximation of sin(x) function:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     sin(x) = x - x^3 / 3! + ... + (-1)^n * x^(2*n + 1) / (2*n + 1)! + ...,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n is number of terms (natural number),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and x is given point (rational number).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>The number of terms in polynomial.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Approximated value of the function in the given point.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">Sin</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">int</span> n</span>)</span> =&gt;\n            Enumerable.Range(<span class=\"hljs-number\">0</span>, n).Sum(i =&gt; SinTerm(x, i));\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Calculates approximation of cos(x) function:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     cos(x) = 1 - x^2 / 2! + ... + (-1)^n * x^(2*n) / (2*n)! + ...,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n is number of terms (natural number),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and x is given point (rational number).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>The number of terms in polynomial.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Approximated value of the function in the given point.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">Cos</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">int</span> n</span>)</span> =&gt;\n            Enumerable.Range(<span class=\"hljs-number\">0</span>, n).Sum(i =&gt; CosTerm(x, i));\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Calculates approximation of e^x function:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     e^x = 1 + x + x^2 / 2! + ... + x^n / n! + ...,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and x is given point (rational number).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;error&quot;&gt;</span>Last term error value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Approximated value of the function in the given point.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error value is not on interval (0.0; 1.0).<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">Exp</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">double</span> error = <span class=\"hljs-number\">0.00001</span></span>)</span> =&gt; ErrorTermWrapper(x, error, ExpTerm);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Calculates approximation of sin(x) function:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     sin(x) = x - x^3 / 3! + ... + (-1)^n * x^(2*n + 1) / (2*n + 1)! + ...,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and x is given point (rational number).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;error&quot;&gt;</span>Last term error value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Approximated value of the function in the given point.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error value is not on interval (0.0; 1.0).<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">Sin</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">double</span> error = <span class=\"hljs-number\">0.00001</span></span>)</span> =&gt; ErrorTermWrapper(x, error, SinTerm);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Calculates approximation of cos(x) function:</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     cos(x) = 1 - x^2 / 2! + ... + (-1)^n * x^(2*n) / (2*n)! + ...,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and x is given point (rational number).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;error&quot;&gt;</span>Last term error value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Approximated value of the function in the given point.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error value is not on interval (0.0; 1.0).<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">Cos</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">double</span> error = <span class=\"hljs-number\">0.00001</span></span>)</span> =&gt; ErrorTermWrapper(x, error, CosTerm);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Wrapper function for calculating approximation with estimated</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     count of terms, where last term value is less than given error.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;error&quot;&gt;</span>Last term error value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;term&quot;&gt;</span>Indexed term of approximation series.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Approximated value of the function in the given point.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Error value is not on interval (0.0; 1.0).<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">ErrorTermWrapper</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">double</span> error, Func&lt;<span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">double</span>&gt; term</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (error &lt;= <span class=\"hljs-number\">0.0</span> || error &gt;= <span class=\"hljs-number\">1.0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Error value is not on interval (0.0; 1.0).&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> termCoefficient = <span class=\"hljs-number\">0.0</span>;\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-number\">0.0</span>;\n\n            <span class=\"hljs-keyword\">do</span>\n            {\n                result += termCoefficient;\n                termCoefficient = term(x, i);\n                i++;\n            }\n            <span class=\"hljs-keyword\">while</span> (Math.Abs(termCoefficient) &gt; error);\n\n            <span class=\"hljs-keyword\">return</span> result;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Single term for e^x function approximation: x^i / i!.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;i&quot;&gt;</span>Term index from 0 to n.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Single term value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">ExpTerm</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">int</span> i</span>)</span> =&gt; Math.Pow(x, i) / Factorial.Calculate(i);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Single term for sin(x) function approximation: (-1)^i * x^(2*i + 1) / (2*i + 1)!.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;i&quot;&gt;</span>Term index from 0 to n.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Single term value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">SinTerm</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">int</span> i</span>)</span> =&gt;\n            Math.Pow(<span class=\"hljs-number\">-1</span>, i) / Factorial.Calculate(<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>) * Math.Pow(x, <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Single term for cos(x) function approximation: (-1)^i * x^(2*i) / (2*i)!.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;x&quot;&gt;</span>Given point.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;i&quot;&gt;</span>Term index from 0 to n.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Single term value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">CosTerm</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">int</span> i</span>)</span> =&gt;\n            Math.Pow(<span class=\"hljs-number\">-1</span>, i) / Factorial.Calculate(<span class=\"hljs-number\">2</span> * i) * Math.Pow(x, <span class=\"hljs-number\">2</span> * i);\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
