{
  "slug": "octal-to-binary",
  "name": "Octal to Binary",
  "categories": ["conversions"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "conversions/octal_to_binary.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions/octal_to_binary.c",
      "code": "<span class=\"hljs-comment\">/**\n * @brief Octal to binay conversion by scanning user input\n * @details\n * The octalTobinary function take the octal number as long\n * return a long binary nuber after conversion\n * @author [Vishnu P](https://github.com/vishnu0pothan)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Converet  octal number to binary\n * @param octalnum octal value that need to convert\n * @returns A binary number after conversion\n */</span>\n<span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">octalToBinary</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> octalnum)</span>\n{\n    <span class=\"hljs-type\">int</span> decimalnum = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">long</span> binarynum = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* This loop converts octal number &quot;octalnum&quot; to the\n     * decimal number &quot;decimalnum&quot;\n     */</span>\n    <span class=\"hljs-keyword\">while</span> (octalnum != <span class=\"hljs-number\">0</span>)\n    {\n        decimalnum = decimalnum + (octalnum % <span class=\"hljs-number\">10</span>) * <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">8</span>, i);\n        i++;\n        octalnum = octalnum / <span class=\"hljs-number\">10</span>;\n    }\n\n    <span class=\"hljs-comment\">// i is re-initialized</span>\n    i = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/* This loop converts the decimal number &quot;decimalnum&quot; to the binary\n     * number &quot;binarynum&quot;\n     */</span>\n    <span class=\"hljs-keyword\">while</span> (decimalnum != <span class=\"hljs-number\">0</span>)\n    {\n        binarynum = binarynum + (<span class=\"hljs-type\">long</span>)(decimalnum % <span class=\"hljs-number\">2</span>) * i;\n        decimalnum = decimalnum / <span class=\"hljs-number\">2</span>;\n        i = i * <span class=\"hljs-number\">10</span>;\n    }\n\n    <span class=\"hljs-comment\">// Returning the binary number that we got from octal number</span>\n    <span class=\"hljs-keyword\">return</span> binarynum;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> octalnum;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter an octal number: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;octalnum);\n\n    <span class=\"hljs-comment\">// Calling the function octaltoBinary</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Equivalent binary number is: %ld&quot;</span>, octalToBinary(octalnum));\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "dart": {
      "dir": "conversions/octal_to_binary.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions/octal_to_binary.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;dart:math&quot;</span> <span class=\"hljs-keyword\">show</span> pow;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-comment\">// octal number to binary number conversion</span>\n<span class=\"hljs-built_in\">String</span> ocatal_to_binary(<span class=\"hljs-built_in\">String</span> oct_val) {\n  <span class=\"hljs-comment\">// checking for unexpected values</span>\n  oct_val = oct_val.trim();\n  <span class=\"hljs-keyword\">if</span> (oct_val == <span class=\"hljs-keyword\">null</span> || oct_val == <span class=\"hljs-string\">&quot;&quot;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An empty value was passed to the function&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">// negative number check</span>\n  <span class=\"hljs-built_in\">bool</span> is_negative = oct_val[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>;\n  <span class=\"hljs-keyword\">if</span> (is_negative) oct_val = oct_val.substring(<span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-built_in\">int</span> oct;\n  <span class=\"hljs-keyword\">try</span> {\n    oct = <span class=\"hljs-built_in\">int</span>.parse(oct_val);\n  } <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">// checking number not valid for octal is passed(0-7)</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; oct_val.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (!(<span class=\"hljs-built_in\">int</span>.parse(oct_val.substring(i, i + <span class=\"hljs-number\">1</span>)) &lt; <span class=\"hljs-number\">8</span>)) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\n    }\n    ;\n  }\n\n  <span class=\"hljs-comment\">// converting octal to decimal</span>\n  <span class=\"hljs-built_in\">int</span> dec_val = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">0</span>, bin_val = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (oct != <span class=\"hljs-number\">0</span>) {\n    dec_val = dec_val + ((oct % <span class=\"hljs-number\">10</span>) * pow(<span class=\"hljs-number\">8</span>, i));\n    i++;\n    oct = oct ~/ <span class=\"hljs-number\">10</span>;\n  }\n\n  <span class=\"hljs-comment\">// converting to decimal to binary</span>\n  i = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">while</span> (dec_val != <span class=\"hljs-number\">0</span>) {\n    bin_val = bin_val + (dec_val % <span class=\"hljs-number\">2</span>) * i;\n    dec_val = dec_val ~/ <span class=\"hljs-number\">2</span>;\n    i = i * <span class=\"hljs-number\">10</span>;\n  }\n\n  <span class=\"hljs-comment\">// returning the value</span>\n  <span class=\"hljs-keyword\">if</span> (is_negative) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + bin_val.toString();\n  }\n  <span class=\"hljs-keyword\">return</span> bin_val.toString();\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;ocatal_to_binary 75&quot;</span>, () {\n    expect(ocatal_to_binary(<span class=\"hljs-string\">&quot;75&quot;</span>), equals(<span class=\"hljs-string\">&quot;111101&quot;</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;ocatal_to_binary -62&quot;</span>, () {\n    expect(ocatal_to_binary(<span class=\"hljs-string\">&quot;-62&quot;</span>), equals(<span class=\"hljs-string\">&quot;-110010&quot;</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;ocatal_to_binary rasies error when number is invalid&quot;</span>, () {\n    expect(() =&gt; ocatal_to_binary(<span class=\"hljs-string\">&quot;84&quot;</span>), throwsFormatException);\n  });\n\n  test(<span class=\"hljs-string\">&quot;ocatal_to_binary rasies error when number is invalid&quot;</span>, () {\n    expect(() =&gt; ocatal_to_binary(<span class=\"hljs-string\">&quot;as23&quot;</span>), throwsFormatException);\n  });\n\n  test(<span class=\"hljs-string\">&quot;ocatal_to_binary of empty string raises error&quot;</span>, () {\n    expect(() =&gt; ocatal_to_binary(<span class=\"hljs-string\">&quot;&quot;</span>), throwsFormatException);\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Suraj Patro",
      "email": "47288675+Suraj-Patro@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vishnu P",
      "email": "36571320+vishnu0pothan@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andrés Jozef Jiménez Leandro",
      "email": "AndrewJey@gmail.com",
      "commits": 1
    },
    {
      "name": "Vishnu",
      "email": "vishnupothan2@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
