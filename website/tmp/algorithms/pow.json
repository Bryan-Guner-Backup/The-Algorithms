{
  "slug": "pow",
  "name": "Pow",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths/Pow.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/Pow.js",
      "code": "<span class=\"hljs-comment\">// Returns the value of x to the power of y</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">pow</span> = (<span class=\"hljs-params\">x, y</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= y; i++) {\n    result *= x\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">export</span> { pow }\n"
    },
    "java": {
      "dir": "Maths/Pow.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/Pow.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-comment\">// POWER (exponentials) Examples (a^b)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pow</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">pow</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)</span> == Math.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// == 1</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">pow</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)</span> == Math.pow(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// == 0</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">pow</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>)</span> == Math.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// == 1024</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">pow</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)</span> == Math.pow(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// == 100</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns the value of the first argument raised to the power of the second argument\n   *\n   * <span class=\"hljs-doctag\">@param</span> a the base.\n   * <span class=\"hljs-doctag\">@param</span> b the exponent.\n   * <span class=\"hljs-doctag\">@return</span> the value {<span class=\"hljs-doctag\">@code</span> a}&lt;sup&gt;{<span class=\"hljs-doctag\">@code</span> b}&lt;/sup&gt;.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">pow</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> {\n    <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= b; i++) {\n      result *= a;\n    }\n    <span class=\"hljs-keyword\">return</span> result;\n  }\n}\n"
    },
    "dart": {
      "dir": "maths/pow.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/pow.dart",
      "code": "<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-built_in\">print</span>(pow(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">// 100</span>\n  <span class=\"hljs-built_in\">print</span>(pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// 1</span>\n  <span class=\"hljs-built_in\">print</span>(pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>)); <span class=\"hljs-comment\">// 1024</span>\n}\n\n<span class=\"hljs-built_in\">double</span> pow(<span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b) {\n  <span class=\"hljs-built_in\">double</span> result = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= b; i++) {\n    result *= a;\n  }\n  <span class=\"hljs-keyword\">return</span> result;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Arogon1",
      "email": "40372809+Arogon1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Cristian Baciu",
      "email": "icristianbaciu@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
