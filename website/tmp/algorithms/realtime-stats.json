{
  "slug": "realtime-stats",
  "name": "Realtime Stats",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/realtime_stats.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/realtime_stats.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief Compute statistics for data entered in rreal-time\n *\n * This algorithm is really beneficial to compute statistics on data read in\n * realtime. For example, devices reading biometrics data. The algorithm is\n * simple enough to be easily implemented in an embedded system.\n * \\author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * \\namespace statistics\n * \\brief Statistical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> statistics {\n\n<span class=\"hljs-comment\">/**\n * continuous mean and variance computance using\n * first value as an approximation for the mean.\n * If the first number is much far form the mean, the algorithm becomes very\n * inaccurate to compute variance and standard deviation.\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">stats_computer1</span> {\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/** Constructor\n     * \\param[in] x new data sample\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">new_val</span><span class=\"hljs-params\">(T x)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\n            K = x;\n        n++;\n        T tmp = x - K;\n        Ex += tmp;\n        Ex2 += <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(tmp) * tmp;\n    }\n\n    <span class=\"hljs-comment\">/** return sample mean computed till last sample */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">mean</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> K + Ex / n; }\n\n    <span class=\"hljs-comment\">/** return data variance computed till last sample */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">variance</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> (Ex2 - (Ex * Ex) / n) / (n - <span class=\"hljs-number\">1</span>); }\n\n    <span class=\"hljs-comment\">/** return sample standard deviation computed till last sample */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">std</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">variance</span>()); }\n\n    <span class=\"hljs-comment\">/** short-hand operator to read new sample from input stream\n     * \\n e.g.: `std::cin &gt;&gt; stats1;`\n     */</span>\n    <span class=\"hljs-keyword\">friend</span> std::istream &amp;<span class=\"hljs-keyword\">operator</span>&gt;&gt;(std::istream &amp;input,\n                                    stats_computer1 &amp;stat) {\n        T val;\n        input &gt;&gt; val;\n        stat.<span class=\"hljs-built_in\">new_val</span>(val);\n        <span class=\"hljs-keyword\">return</span> input;\n    }\n\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">double</span> Ex, Ex2;\n    T K;\n};\n\n<span class=\"hljs-comment\">/**\n * continuous mean and variance computance using\n * Welford&#x27;s algorithm  (very accurate)\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">stats_computer2</span> {\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/** Constructor\n     * \\param[in] x new data sample\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">new_val</span><span class=\"hljs-params\">(T x)</span> </span>{\n        n++;\n        <span class=\"hljs-type\">double</span> delta = x - mu;\n        mu += delta / n;\n        <span class=\"hljs-type\">double</span> delta2 = x - mu;\n        M += delta * delta2;\n    }\n\n    <span class=\"hljs-comment\">/** return sample mean computed till last sample */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">mean</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> mu; }\n\n    <span class=\"hljs-comment\">/** return data variance computed till last sample */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">variance</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> M / n; }\n\n    <span class=\"hljs-comment\">/** return sample standard deviation computed till last sample */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">std</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-keyword\">this</span>-&gt;<span class=\"hljs-built_in\">variance</span>()); }\n\n    <span class=\"hljs-comment\">/** short-hand operator to read new sample from input stream\n     * \\n e.g.: `std::cin &gt;&gt; stats1;`\n     */</span>\n    <span class=\"hljs-keyword\">friend</span> std::istream &amp;<span class=\"hljs-keyword\">operator</span>&gt;&gt;(std::istream &amp;input,\n                                    stats_computer2 &amp;stat) {\n        T val;\n        input &gt;&gt; val;\n        stat.<span class=\"hljs-built_in\">new_val</span>(val);\n        <span class=\"hljs-keyword\">return</span> input;\n    }\n\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">double</span> mu = <span class=\"hljs-number\">0</span>, var = <span class=\"hljs-number\">0</span>, M = <span class=\"hljs-number\">0</span>;\n};\n\n}  <span class=\"hljs-comment\">// namespace statistics</span>\n\n<span class=\"hljs-keyword\">using</span> statistics::stats_computer1;\n<span class=\"hljs-keyword\">using</span> statistics::stats_computer2;\n\n<span class=\"hljs-comment\">/** Test the algorithm implementation\n * \\param[in] test_data array of data to test the algorithms\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_function</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">float</span> *test_data, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> number_of_samples)</span> </span>{\n    <span class=\"hljs-type\">float</span> mean = <span class=\"hljs-number\">0.f</span>, variance = <span class=\"hljs-number\">0.f</span>;\n\n    stats_computer1&lt;<span class=\"hljs-type\">float</span>&gt; stats01;\n    stats_computer2&lt;<span class=\"hljs-type\">float</span>&gt; stats02;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number_of_samples; i++) {\n        stats01.<span class=\"hljs-built_in\">new_val</span>(test_data[i]);\n        stats02.<span class=\"hljs-built_in\">new_val</span>(test_data[i]);\n        mean += test_data[i];\n    }\n\n    mean /= number_of_samples;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number_of_samples; i++) {\n        <span class=\"hljs-type\">float</span> temp = test_data[i] - mean;\n        variance += temp * temp;\n    }\n    variance /= number_of_samples;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Test Function &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span> &lt;&lt; std::endl\n              &lt;&lt; <span class=\"hljs-string\">&quot;Expected: Mean: &quot;</span> &lt;&lt; mean &lt;&lt; <span class=\"hljs-string\">&quot;\\t Variance: &quot;</span> &lt;&lt; variance\n              &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tMethod 1:&quot;</span>\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\tMean: &quot;</span> &lt;&lt; stats01.<span class=\"hljs-built_in\">mean</span>()\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\t Variance: &quot;</span> &lt;&lt; stats01.<span class=\"hljs-built_in\">variance</span>()\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\t Std: &quot;</span> &lt;&lt; stats01.<span class=\"hljs-built_in\">std</span>() &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tMethod 2:&quot;</span>\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\tMean: &quot;</span> &lt;&lt; stats02.<span class=\"hljs-built_in\">mean</span>()\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\t Variance: &quot;</span> &lt;&lt; stats02.<span class=\"hljs-built_in\">variance</span>()\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\t Std: &quot;</span> &lt;&lt; stats02.<span class=\"hljs-built_in\">std</span>() &lt;&lt; std::endl;\n\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(stats01.<span class=\"hljs-built_in\">mean</span>() - mean) &lt; <span class=\"hljs-number\">0.01</span>);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(stats02.<span class=\"hljs-built_in\">mean</span>() - mean) &lt; <span class=\"hljs-number\">0.01</span>);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">abs</span>(stats02.<span class=\"hljs-built_in\">variance</span>() - variance) &lt; <span class=\"hljs-number\">0.01</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;(Tests passed)&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> **argv)</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">float</span> test_data1[] = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">-1.4</span>, <span class=\"hljs-number\">-3.6</span>, <span class=\"hljs-number\">1.9</span>, <span class=\"hljs-number\">1.</span>};\n    <span class=\"hljs-built_in\">test_function</span>(test_data1, <span class=\"hljs-built_in\">sizeof</span>(test_data1) / <span class=\"hljs-built_in\">sizeof</span>(test_data1[<span class=\"hljs-number\">0</span>]));\n\n    std::cout\n        &lt;&lt; <span class=\"hljs-string\">&quot;Enter data. Any non-numeric data will terminate the data input.&quot;</span>\n        &lt;&lt; std::endl;\n\n    stats_computer1&lt;<span class=\"hljs-type\">float</span>&gt; stats1;\n    stats_computer2&lt;<span class=\"hljs-type\">float</span>&gt; stats2;\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-type\">double</span> val;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter number: &quot;</span>;\n        std::cin &gt;&gt; val;\n\n        <span class=\"hljs-comment\">// check for failure to read input. Happens for</span>\n        <span class=\"hljs-comment\">// non-numeric data</span>\n        <span class=\"hljs-keyword\">if</span> (std::cin.<span class=\"hljs-built_in\">fail</span>())\n            <span class=\"hljs-keyword\">break</span>;\n\n        stats1.<span class=\"hljs-built_in\">new_val</span>(val);\n        stats2.<span class=\"hljs-built_in\">new_val</span>(val);\n\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tMethod 1:&quot;</span>\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\tMean: &quot;</span> &lt;&lt; stats1.<span class=\"hljs-built_in\">mean</span>()\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\t Variance: &quot;</span> &lt;&lt; stats1.<span class=\"hljs-built_in\">variance</span>()\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\t Std: &quot;</span> &lt;&lt; stats1.<span class=\"hljs-built_in\">std</span>() &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tMethod 2:&quot;</span>\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\tMean: &quot;</span> &lt;&lt; stats2.<span class=\"hljs-built_in\">mean</span>()\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\t Variance: &quot;</span> &lt;&lt; stats2.<span class=\"hljs-built_in\">variance</span>()\n                  &lt;&lt; <span class=\"hljs-string\">&quot;\\t Std: &quot;</span> &lt;&lt; stats2.<span class=\"hljs-built_in\">std</span>() &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "numerical_methods/realtime_stats.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/numerical_methods/realtime_stats.c",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief Compute statistics for data entered in rreal-time\n * \\author [Krishna Vedala](https://github.com/kvedala)\n *\n * This algorithm is really beneficial to compute statistics on data read in\n * realtime. For example, devices reading biometrics data. The algorithm is\n * simple enough to be easily implemented in an embedded system.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * continuous mean and variance computance using\n * first value as an approximation for the mean.\n * If the first number is much far form the mean, the algorithm becomes very\n * inaccurate to compute variance and standard deviation.\n * \\param[in] x new value added to data set\n * \\param[out] mean if not NULL, mean returns mean of data set\n * \\param[out] variance if not NULL, mean returns variance of data set\n * \\param[out] std if not NULL, mean returns standard deviation of data set\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">stats_computer1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> x, <span class=\"hljs-type\">float</span> *mean, <span class=\"hljs-type\">float</span> *variance, <span class=\"hljs-type\">float</span> *<span class=\"hljs-built_in\">std</span>)</span>\n{\n    <span class=\"hljs-comment\">/* following variables declared static becuase they need to be remembered\n     * when updating for next sample, when received.\n     */</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> Ex = <span class=\"hljs-number\">0.f</span>, Ex2 = <span class=\"hljs-number\">0.f</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> K = <span class=\"hljs-number\">0.f</span>;\n\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\n        K = x;\n    n++;\n    <span class=\"hljs-type\">float</span> tmp = x - K;\n    Ex += tmp;\n    Ex2 += tmp * tmp;\n\n    <span class=\"hljs-comment\">/* return sample mean computed till last sample */</span>\n    <span class=\"hljs-keyword\">if</span> (mean != <span class=\"hljs-literal\">NULL</span>)\n        *mean = K + Ex / n;\n\n    <span class=\"hljs-comment\">/* return data variance computed till last sample */</span>\n    <span class=\"hljs-keyword\">if</span> (variance != <span class=\"hljs-literal\">NULL</span>)\n        *variance = (Ex2 - (Ex * Ex) / n) / (n - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-comment\">/* return sample standard deviation computed till last sample */</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">std</span> != <span class=\"hljs-literal\">NULL</span>)\n        *<span class=\"hljs-built_in\">std</span> = sqrtf(*variance);\n}\n\n<span class=\"hljs-comment\">/**\n * continuous mean and variance computance using\n * Welford&#x27;s algorithm  (very accurate)\n * \\param[in] x new value added to data set\n * \\param[out] mean if not NULL, mean returns mean of data set\n * \\param[out] variance if not NULL, mean returns variance of data set\n * \\param[out] std if not NULL, mean returns standard deviation of data set\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">stats_computer2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> x, <span class=\"hljs-type\">float</span> *mean, <span class=\"hljs-type\">float</span> *variance, <span class=\"hljs-type\">float</span> *<span class=\"hljs-built_in\">std</span>)</span>\n{\n    <span class=\"hljs-comment\">/* following variables declared static becuase they need to be remembered\n     * when updating for next sample, when received.\n     */</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> mu = <span class=\"hljs-number\">0</span>, M = <span class=\"hljs-number\">0</span>;\n\n    n++;\n    <span class=\"hljs-type\">float</span> delta = x - mu;\n    mu += delta / n;\n    <span class=\"hljs-type\">float</span> delta2 = x - mu;\n    M += delta * delta2;\n\n    <span class=\"hljs-comment\">/* return sample mean computed till last sample */</span>\n    <span class=\"hljs-keyword\">if</span> (mean != <span class=\"hljs-literal\">NULL</span>)\n        *mean = mu;\n\n    <span class=\"hljs-comment\">/* return data variance computed till last sample */</span>\n    <span class=\"hljs-keyword\">if</span> (variance != <span class=\"hljs-literal\">NULL</span>)\n        *variance = M / n;\n\n    <span class=\"hljs-comment\">/* return sample standard deviation computed till last sample */</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">std</span> != <span class=\"hljs-literal\">NULL</span>)\n        *<span class=\"hljs-built_in\">std</span> = sqrtf(*variance);\n}\n\n<span class=\"hljs-comment\">/** Test the algorithm implementation\n * \\param[in] test_data array of data to test the algorithms\n * \\param[in] number_of_samples number of samples of data\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test_function</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">float</span> *test_data, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> number_of_samples)</span>\n{\n    <span class=\"hljs-type\">float</span> ref_mean = <span class=\"hljs-number\">0.f</span>, ref_variance = <span class=\"hljs-number\">0.f</span>;\n    <span class=\"hljs-type\">float</span> s1_mean = <span class=\"hljs-number\">0.f</span>, s1_variance = <span class=\"hljs-number\">0.f</span>, s1_std = <span class=\"hljs-number\">0.f</span>;\n    <span class=\"hljs-type\">float</span> s2_mean = <span class=\"hljs-number\">0.f</span>, s2_variance = <span class=\"hljs-number\">0.f</span>, s2_std = <span class=\"hljs-number\">0.f</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number_of_samples; i++)\n    {\n        stats_computer1(test_data[i], &amp;s1_mean, &amp;s1_variance, &amp;s1_std);\n        stats_computer2(test_data[i], &amp;s2_mean, &amp;s2_variance, &amp;s2_std);\n        ref_mean += test_data[i];\n    }\n    ref_mean /= number_of_samples;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number_of_samples; i++)\n    {\n        <span class=\"hljs-type\">float</span> temp = test_data[i] - ref_mean;\n        ref_variance += temp * temp;\n    }\n    ref_variance /= number_of_samples;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; Test Function &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Expected: Mean: %.4f\\t Variance: %.4f\\n&quot;</span>, ref_mean, ref_variance);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\tMethod 1:\\tMean: %.4f\\t Variance: %.4f\\t Std: %.4f\\n&quot;</span>, s1_mean,\n           s1_variance, s1_std);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\tMethod 2:\\tMean: %.4f\\t Variance: %.4f\\t Std: %.4f\\n&quot;</span>, s2_mean,\n           s2_variance, s2_std);\n\n    assert(<span class=\"hljs-built_in\">fabs</span>(s1_mean - ref_mean) &lt; <span class=\"hljs-number\">0.01</span>);\n    assert(<span class=\"hljs-built_in\">fabs</span>(s2_mean - ref_mean) &lt; <span class=\"hljs-number\">0.01</span>);\n    assert(<span class=\"hljs-built_in\">fabs</span>(s2_variance - ref_variance) &lt; <span class=\"hljs-number\">0.01</span>);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;(Tests passed)\\n\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> **argv)</span>\n{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">float</span> test_data1[] = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">-1.4</span>, <span class=\"hljs-number\">-3.6</span>, <span class=\"hljs-number\">1.9</span>, <span class=\"hljs-number\">1.</span>};\n    test_function(test_data1, <span class=\"hljs-keyword\">sizeof</span>(test_data1) / <span class=\"hljs-keyword\">sizeof</span>(test_data1[<span class=\"hljs-number\">0</span>]));\n\n    <span class=\"hljs-type\">float</span> s1_mean = <span class=\"hljs-number\">0.f</span>, s1_variance = <span class=\"hljs-number\">0.f</span>, s1_std = <span class=\"hljs-number\">0.f</span>;\n    <span class=\"hljs-type\">float</span> s2_mean = <span class=\"hljs-number\">0.f</span>, s2_variance = <span class=\"hljs-number\">0.f</span>, s2_std = <span class=\"hljs-number\">0.f</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter data. Any non-numeric data will terminate the data input.\\n&quot;</span>);\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-type\">float</span> val;\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter number: &quot;</span>);\n\n        <span class=\"hljs-comment\">// check for failure to read input. Happens for</span>\n        <span class=\"hljs-comment\">// non-numeric data</span>\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%f&quot;</span>, &amp;val))\n            <span class=\"hljs-keyword\">break</span>;\n\n        stats_computer1(val, &amp;s1_mean, &amp;s1_variance, &amp;s1_std);\n        stats_computer2(val, &amp;s2_mean, &amp;s2_variance, &amp;s2_std);\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\tMethod 1:\\tMean: %.4f\\t Variance: %.4f\\t Std: %.4f\\n&quot;</span>,\n               s1_mean, s1_variance, s1_std);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\tMethod 2:\\tMean: %.4f\\t Variance: %.4f\\t Std: %.4f\\n&quot;</span>,\n               s2_mean, s2_variance, s2_std);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
