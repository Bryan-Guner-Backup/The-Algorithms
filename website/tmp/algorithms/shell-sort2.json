{
  "slug": "shell-sort2",
  "name": "Shell Sort2",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/shell_sort2.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/shell_sort2.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * \\file\r\n * \\brief [Shell sort](https://en.wikipedia.org/wiki/Shell_sort) algorithm\r\n * \\author [Krishna Vedala](https://github.com/kvedala)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;utility&gt;</span>  <span class=\"hljs-comment\">// for std::swap</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/** pretty print array\r\n * \\param[in] arr array to print\r\n * \\param[in] LEN length of array to print\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">T</span>&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show_data</span><span class=\"hljs-params\">(T *arr, <span class=\"hljs-type\">size_t</span> LEN)</span> </span>{\r\n    <span class=\"hljs-type\">size_t</span> i;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; LEN; i++) {\r\n        std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>;\r\n    }\r\n    std::cout &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** pretty print array\r\n * \\param[in] arr array to print\r\n * \\param[in] N length of array to print\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> N&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show_data</span><span class=\"hljs-params\">(T (&amp;arr)[N])</span> </span>{\r\n    <span class=\"hljs-built_in\">show_data</span>(arr, N);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** \\namespace sorting\r\n * \\brief Sorting algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> sorting {\r\n<span class=\"hljs-comment\">/**\r\n * Optimized algorithm - takes half the time by utilizing\r\n * Mar\r\n **/</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">shell_sort</span><span class=\"hljs-params\">(T *arr, <span class=\"hljs-type\">size_t</span> LEN)</span> </span>{\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> gaps[] = {<span class=\"hljs-number\">701</span>, <span class=\"hljs-number\">301</span>, <span class=\"hljs-number\">132</span>, <span class=\"hljs-number\">57</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>};\r\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> gap_len = <span class=\"hljs-number\">8</span>;\r\n    <span class=\"hljs-type\">size_t</span> i, j, g;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (g = <span class=\"hljs-number\">0</span>; g &lt; gap_len; g++) {\r\n        <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> gap = gaps[g];\r\n        <span class=\"hljs-keyword\">for</span> (i = gap; i &lt; LEN; i++) {\r\n            T tmp = arr[i];\r\n\r\n            <span class=\"hljs-keyword\">for</span> (j = i; j &gt;= gap &amp;&amp; (arr[j - gap] - tmp) &gt; <span class=\"hljs-number\">0</span>; j -= gap) {\r\n                arr[j] = arr[j - gap];\r\n            }\r\n\r\n            arr[j] = tmp;\r\n        }\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">/** function overload - when input array is of a known length array type\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-type\">size_t</span> N&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">shell_sort</span><span class=\"hljs-params\">(T (&amp;arr)[N])</span> </span>{\r\n    <span class=\"hljs-built_in\">shell_sort</span>(arr, N);\r\n}\r\n\r\n<span class=\"hljs-comment\">/** function overload - when input array is of type std::vector,\r\n * simply send the data content and the data length to the above function.\r\n */</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">shell_sort</span><span class=\"hljs-params\">(std::vector&lt;T&gt; *arr)</span> </span>{\r\n    <span class=\"hljs-built_in\">shell_sort</span>(arr-&gt;<span class=\"hljs-built_in\">data</span>(), arr-&gt;<span class=\"hljs-built_in\">size</span>());\r\n}\r\n\r\n}  <span class=\"hljs-comment\">// namespace sorting</span>\r\n\r\n<span class=\"hljs-keyword\">using</span> sorting::shell_sort;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * function to compare sorting using cstdlib&#x27;s qsort\r\n **/</span>\r\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span> *a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span> *b)</span> </span>{\r\n    T arg1 = *<span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-keyword\">const</span> T *&gt;(a);\r\n    T arg2 = *<span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-keyword\">const</span> T *&gt;(b);\r\n\r\n    <span class=\"hljs-keyword\">if</span> (arg1 &lt; arg2)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n    <span class=\"hljs-keyword\">if</span> (arg1 &gt; arg2)\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n\r\n    <span class=\"hljs-comment\">//  return (arg1 &gt; arg2) - (arg1 &lt; arg2); // possible shortcut</span>\r\n    <span class=\"hljs-comment\">//  return arg1 - arg2; // erroneous shortcut (fails if INT_MIN is present)</span>\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test implementation of shell_sort on integer arrays by comparing results\r\n * against std::qsort.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_int</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> NUM_DATA)</span> </span>{\r\n    <span class=\"hljs-comment\">// int array = new int[NUM_DATA];</span>\r\n    <span class=\"hljs-type\">int</span> *data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[NUM_DATA];\r\n    <span class=\"hljs-type\">int</span> *data2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[NUM_DATA];\r\n    <span class=\"hljs-comment\">// int array2 = new int[NUM_DATA];</span>\r\n    <span class=\"hljs-type\">int</span> range = <span class=\"hljs-number\">1800</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; NUM_DATA; i++)\r\n        data[i] = data2[i] = (std::<span class=\"hljs-built_in\">rand</span>() % range) - (range &gt;&gt; <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-comment\">/* sort using our implementation */</span>\r\n    std::<span class=\"hljs-type\">clock_t</span> start = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-built_in\">shell_sort</span>(data, NUM_DATA);\r\n    std::<span class=\"hljs-type\">clock_t</span> end = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-type\">double</span> elapsed_time = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(end - start) / CLOCKS_PER_SEC;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Time spent sorting using shell_sort2: &quot;</span> &lt;&lt; elapsed_time\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;s\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">/* sort using std::qsort */</span>\r\n    start = std::<span class=\"hljs-built_in\">clock</span>();\r\n    std::<span class=\"hljs-built_in\">qsort</span>(data2, NUM_DATA, <span class=\"hljs-built_in\">sizeof</span>(data2[<span class=\"hljs-number\">0</span>]), compare&lt;<span class=\"hljs-type\">int</span>&gt;);\r\n    end = std::<span class=\"hljs-built_in\">clock</span>();\r\n\r\n    elapsed_time = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(end - start) / CLOCKS_PER_SEC;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Time spent sorting using std::qsort: &quot;</span> &lt;&lt; elapsed_time\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;s\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; NUM_DATA; i++) {\r\n        <span class=\"hljs-built_in\">assert</span>(data[i] == data2[i]);  <span class=\"hljs-comment\">// ensure that our sorting results match</span>\r\n                                      <span class=\"hljs-comment\">// the standard results</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">delete</span>[] data;\r\n    <span class=\"hljs-keyword\">delete</span>[] data2;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Test implementation of shell_sort on float arrays by comparing results\r\n * against std::qsort.\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_f</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> NUM_DATA)</span> </span>{\r\n    <span class=\"hljs-comment\">// int array = new int[NUM_DATA];</span>\r\n    <span class=\"hljs-type\">float</span> *data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">float</span>[NUM_DATA];\r\n    <span class=\"hljs-type\">float</span> *data2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">float</span>[NUM_DATA];\r\n    <span class=\"hljs-comment\">// int array2 = new int[NUM_DATA];</span>\r\n    <span class=\"hljs-type\">int</span> range = <span class=\"hljs-number\">1000</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; NUM_DATA; i++) {\r\n        data[i] = data2[i] = ((std::<span class=\"hljs-built_in\">rand</span>() % range) - (range &gt;&gt; <span class=\"hljs-number\">1</span>)) / <span class=\"hljs-number\">100.</span>;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">/* sort using our implementation */</span>\r\n    std::<span class=\"hljs-type\">clock_t</span> start = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-built_in\">shell_sort</span>(data, NUM_DATA);\r\n    std::<span class=\"hljs-type\">clock_t</span> end = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-type\">double</span> elapsed_time = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(end - start) / CLOCKS_PER_SEC;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Time spent sorting using shell_sort2: &quot;</span> &lt;&lt; elapsed_time\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;s\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-comment\">/* sort using std::qsort */</span>\r\n    start = std::<span class=\"hljs-built_in\">clock</span>();\r\n    std::<span class=\"hljs-built_in\">qsort</span>(data2, NUM_DATA, <span class=\"hljs-built_in\">sizeof</span>(data2[<span class=\"hljs-number\">0</span>]), compare&lt;<span class=\"hljs-type\">float</span>&gt;);\r\n    end = std::<span class=\"hljs-built_in\">clock</span>();\r\n\r\n    elapsed_time = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(end - start) / CLOCKS_PER_SEC;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Time spent sorting using std::qsort: &quot;</span> &lt;&lt; elapsed_time\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;s\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; NUM_DATA; i++) {\r\n        <span class=\"hljs-built_in\">assert</span>(data[i] == data2[i]);  <span class=\"hljs-comment\">// ensure that our sorting results match</span>\r\n                                      <span class=\"hljs-comment\">// the standard results</span>\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">delete</span>[] data;\r\n    <span class=\"hljs-keyword\">delete</span>[] data2;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Main function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\r\n    <span class=\"hljs-comment\">// initialize random number generator - once per program</span>\r\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">NULL</span>));\r\n\r\n    <span class=\"hljs-built_in\">test_int</span>(<span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// test with sorting random array of 100 values</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 - 100 int values - passed. \\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">test_int</span>(<span class=\"hljs-number\">1000</span>);  <span class=\"hljs-comment\">// test with sorting random array of 1000 values</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 - 1000 int values - passed.\\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">test_int</span>(<span class=\"hljs-number\">10000</span>);  <span class=\"hljs-comment\">// test with sorting random array of 10000 values</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3 - 10000 int values - passed.\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-built_in\">test_f</span>(<span class=\"hljs-number\">100</span>);  <span class=\"hljs-comment\">// test with sorting random array of 100 values</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 - 100 float values - passed. \\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">test_f</span>(<span class=\"hljs-number\">1000</span>);  <span class=\"hljs-comment\">// test with sorting random array of 1000 values</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 - 1000 float values - passed.\\n&quot;</span>;\r\n    <span class=\"hljs-built_in\">test_f</span>(<span class=\"hljs-number\">10000</span>);  <span class=\"hljs-comment\">// test with sorting random array of 10000 values</span>\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3 - 10000 float values - passed.\\n&quot;</span>;\r\n\r\n    <span class=\"hljs-type\">int</span> i, NUM_DATA;\r\n\r\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">2</span>)\r\n        NUM_DATA = <span class=\"hljs-built_in\">atoi</span>(argv[<span class=\"hljs-number\">1</span>]);\r\n    <span class=\"hljs-keyword\">else</span>\r\n        NUM_DATA = <span class=\"hljs-number\">200</span>;\r\n\r\n    <span class=\"hljs-comment\">// int array = new int[NUM_DATA];</span>\r\n    <span class=\"hljs-type\">int</span> *data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[NUM_DATA];\r\n    <span class=\"hljs-comment\">// int array2 = new int[NUM_DATA];</span>\r\n    <span class=\"hljs-type\">int</span> range = <span class=\"hljs-number\">1800</span>;\r\n\r\n    std::<span class=\"hljs-built_in\">srand</span>(<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">NULL</span>));\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NUM_DATA; i++) {\r\n        <span class=\"hljs-comment\">// allocate random numbers in the given range</span>\r\n        data[i] = (std::<span class=\"hljs-built_in\">rand</span>() % range) - (range &gt;&gt; <span class=\"hljs-number\">1</span>);\r\n    }\r\n\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Unsorted original data: &quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">show_data</span>(data, NUM_DATA);\r\n    std::<span class=\"hljs-type\">clock_t</span> start = std::<span class=\"hljs-built_in\">clock</span>();\r\n    <span class=\"hljs-built_in\">shell_sort</span>(data, NUM_DATA);  <span class=\"hljs-comment\">// perform sorting</span>\r\n    std::<span class=\"hljs-type\">clock_t</span> end = std::<span class=\"hljs-built_in\">clock</span>();\r\n\r\n    std::cout &lt;&lt; std::endl\r\n              &lt;&lt; <span class=\"hljs-string\">&quot;Data Sorted using custom implementation: &quot;</span> &lt;&lt; std::endl;\r\n    <span class=\"hljs-built_in\">show_data</span>(data, NUM_DATA);\r\n\r\n    <span class=\"hljs-type\">double</span> elapsed_time = (end - start) * <span class=\"hljs-number\">1.f</span> / CLOCKS_PER_SEC;\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Time spent sorting: &quot;</span> &lt;&lt; elapsed_time &lt;&lt; <span class=\"hljs-string\">&quot;s\\n&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-keyword\">delete</span>[] data;\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "c": {
      "dir": "sorting/shell_sort2.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/shell_sort2.c",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief [Shell sort algorithm](https://en.wikipedia.org/wiki/Shell_sort)\n * implementation.\n * \\author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @addtogroup sorting Sorting algorithms\n * @{\n */</span>\n<span class=\"hljs-comment\">/** Helper function to print array values */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">show_data</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">long</span> len)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">long</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d &quot;</span>, arr[i]);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/** Function to swap values of two integers\n * @param [in,out] a reference to first variable\n * @param [in,out] b reference to second variable\n */</span>\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> *b)</span>\n{\n    <span class=\"hljs-type\">int</span> tmp;\n\n    tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n\n<span class=\"hljs-comment\">/**\n * Shell sort algorithm.\\n\n * Optimized algorithm - takes half the time as other\n * @param [in,out] array array to sort\n * @param [in] LEN length of the array\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">shell_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *<span class=\"hljs-built_in\">array</span>, <span class=\"hljs-type\">long</span> LEN)</span>\n{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> gaps[] = {<span class=\"hljs-number\">701</span>, <span class=\"hljs-number\">301</span>, <span class=\"hljs-number\">132</span>, <span class=\"hljs-number\">57</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> gap_len = <span class=\"hljs-number\">8</span>;\n    <span class=\"hljs-type\">long</span> i, j, g;\n\n    <span class=\"hljs-keyword\">for</span> (g = <span class=\"hljs-number\">0</span>; g &lt; gap_len; g++)\n    {  <span class=\"hljs-comment\">// for each gap</span>\n        <span class=\"hljs-type\">int</span> gap = gaps[g];\n        <span class=\"hljs-keyword\">for</span> (i = gap; i &lt; LEN; i++)\n        {  <span class=\"hljs-comment\">// from gap position to the end</span>\n            <span class=\"hljs-type\">int</span> tmp = <span class=\"hljs-built_in\">array</span>[i];\n\n            <span class=\"hljs-keyword\">for</span> (j = i; j &gt;= gap &amp;&amp; (<span class=\"hljs-built_in\">array</span>[j - gap] - tmp) &gt; <span class=\"hljs-number\">0</span>; j -= gap)\n                <span class=\"hljs-built_in\">array</span>[j] = <span class=\"hljs-built_in\">array</span>[j - gap];\n            <span class=\"hljs-built_in\">array</span>[j] = tmp;\n        }\n    }\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> DEBUG</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; LEN; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\t&quot;</span>, data[i]);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n}\n<span class=\"hljs-comment\">/** @} */</span>\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">long</span> size = <span class=\"hljs-number\">500</span>;\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">2</span>)\n        size = atol(argv[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (argc &gt; <span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Usage: ./shell_sort [number of values]\\n&quot;</span>);\n\n    <span class=\"hljs-type\">int</span> *<span class=\"hljs-built_in\">array</span> = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(size * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n    <span class=\"hljs-type\">int</span> range = <span class=\"hljs-number\">500</span>;  <span class=\"hljs-comment\">// range of array values</span>\n    <span class=\"hljs-type\">double</span> time_spent;\n\n    srand(time(<span class=\"hljs-literal\">NULL</span>));  <span class=\"hljs-comment\">// initialize random number generator</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n        <span class=\"hljs-comment\">// fill array with random integers</span>\n        <span class=\"hljs-built_in\">array</span>[i] = rand() % range + <span class=\"hljs-number\">1</span>;\n\n    show_data(<span class=\"hljs-built_in\">array</span>, size);   <span class=\"hljs-comment\">// show array before sorting</span>\n    <span class=\"hljs-type\">clock_t</span> t1 = clock();     <span class=\"hljs-comment\">// start timer</span>\n    shell_sort(<span class=\"hljs-built_in\">array</span>, size);  <span class=\"hljs-comment\">// sort the array</span>\n    <span class=\"hljs-type\">clock_t</span> t2 = clock();     <span class=\"hljs-comment\">// end timer</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Data Sorted\\n&quot;</span>);\n    show_data(<span class=\"hljs-built_in\">array</span>, size);  <span class=\"hljs-comment\">// display array after sorting</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Time spent sorting: %.4g s\\n&quot;</span>, (t2 - t1) / CLOCKS_PER_SEC);\n\n    <span class=\"hljs-built_in\">free</span>(<span class=\"hljs-built_in\">array</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 3
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
