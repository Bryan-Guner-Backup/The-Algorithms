{
  "slug": "poisson-dist",
  "name": "Poisson Dist",
  "categories": ["probability"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "probability/poisson_dist.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/probability/poisson_dist.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Poisson\n * statistics](https://en.wikipedia.org/wiki/Poisson_distribution)\n *\n * The Poisson distribution counts how many\n * events occur over a set time interval.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * poisson rate:\\n\n * calculate the events per unit time\\n\n * e.g 5 dollars every 2 mins = 5 / 2 = 2.5\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">poisson_rate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> events, <span class=\"hljs-type\">double</span> timeframe)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> events / timeframe;\n}\n\n<span class=\"hljs-comment\">/**\n *  calculate the expected value over a time\n * e.g rate of 2.5 over 10 mins = 2.5 x 10 = 25\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">poisson_expected</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> rate, <span class=\"hljs-type\">double</span> time)</span> </span>{ <span class=\"hljs-keyword\">return</span> rate * time; }\n\n<span class=\"hljs-comment\">/**\n * Compute factorial of a given number\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">fact</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x)</span> </span>{\n    <span class=\"hljs-type\">double</span> x_fact = x;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = x - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--) {\n        x_fact *= i;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (x_fact &lt;= <span class=\"hljs-number\">0</span>) {\n        x_fact = <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> x_fact;\n}\n\n<span class=\"hljs-comment\">/**\n * Find the probability of x successes in a Poisson dist.\n * \\f[p(\\mu,x) = \\frac{\\mu^x e^{-\\mu}}{x!}\\f]\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">poisson_x_successes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> expected, <span class=\"hljs-type\">double</span> x)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (std::<span class=\"hljs-built_in\">pow</span>(expected, x) * std::<span class=\"hljs-built_in\">exp</span>(-expected)) / <span class=\"hljs-built_in\">fact</span>(x);\n}\n\n<span class=\"hljs-comment\">/**\n * probability of a success in range for Poisson dist (inclusive, inclusive)\n * \\f[P = \\sum_i p(\\mu,i)\\f]\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">poisson_range_successes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> expected, <span class=\"hljs-type\">double</span> lower, <span class=\"hljs-type\">double</span> upper)</span> </span>{\n    <span class=\"hljs-type\">double</span> probability = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = lower; i &lt;= upper; i++) {\n        probability += <span class=\"hljs-built_in\">poisson_x_successes</span>(expected, i);\n    }\n    <span class=\"hljs-keyword\">return</span> probability;\n}\n\n<span class=\"hljs-comment\">/**\n * main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">double</span> rate, expected;\n    rate = <span class=\"hljs-built_in\">poisson_rate</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Poisson rate : &quot;</span> &lt;&lt; rate &lt;&lt; std::endl;\n\n    expected = <span class=\"hljs-built_in\">poisson_expected</span>(rate, <span class=\"hljs-number\">2</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Poisson expected : &quot;</span> &lt;&lt; expected &lt;&lt; std::endl;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Poisson 0 successes : &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">poisson_x_successes</span>(expected, <span class=\"hljs-number\">0</span>)\n              &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Poisson 0-8 successes : &quot;</span>\n              &lt;&lt; <span class=\"hljs-built_in\">poisson_range_successes</span>(expected, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>) &lt;&lt; std::endl;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dylan Robertson",
      "email": "31269647+RobotRage@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
