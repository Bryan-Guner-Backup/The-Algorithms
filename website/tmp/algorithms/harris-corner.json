{
  "slug": "harris-corner",
  "name": "Harris Corner",
  "categories": ["computervision"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "computer_vision/harris_corner.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/computer_vision/harris_corner.py",
      "code": "<span class=\"hljs-keyword\">import</span> cv2\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nHarris Corner Detector\nhttps://en.wikipedia.org/wiki/Harris_Corner_Detector\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Harris_Corner</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, k: <span class=\"hljs-built_in\">float</span>, window_size: <span class=\"hljs-built_in\">int</span></span>):\n\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        k : is an empirically determined constant in [0.04,0.06]\n        window_size : neighbourhoods considered\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> k <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0.04</span>, <span class=\"hljs-number\">0.06</span>):\n            self.k = k\n            self.window_size = window_size\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;invalid k value&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;Harris Corner  detection with k : <span class=\"hljs-subst\">{self.k}</span>&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">detect</span>(<span class=\"hljs-params\">self, img_path: <span class=\"hljs-built_in\">str</span></span>):\n\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns the image with corners identified\n        img_path  : path of the image\n        output : list of the corner positions, image\n        &quot;&quot;&quot;</span>\n\n        img = cv2.imread(img_path, <span class=\"hljs-number\">0</span>)\n        h, w = img.shape\n        corner_list = []\n        color_img = img.copy()\n        color_img = cv2.cvtColor(color_img, cv2.COLOR_GRAY2RGB)\n        dy, dx = np.gradient(img)\n        ixx = dx ** <span class=\"hljs-number\">2</span>\n        iyy = dy ** <span class=\"hljs-number\">2</span>\n        ixy = dx * dy\n        k = <span class=\"hljs-number\">0.04</span>\n        offset = self.window_size // <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(offset, h - offset):\n            <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(offset, w - offset):\n                wxx = ixx[\n                    y - offset : y + offset + <span class=\"hljs-number\">1</span>, x - offset : x + offset + <span class=\"hljs-number\">1</span>\n                ].<span class=\"hljs-built_in\">sum</span>()\n                wyy = iyy[\n                    y - offset : y + offset + <span class=\"hljs-number\">1</span>, x - offset : x + offset + <span class=\"hljs-number\">1</span>\n                ].<span class=\"hljs-built_in\">sum</span>()\n                wxy = ixy[\n                    y - offset : y + offset + <span class=\"hljs-number\">1</span>, x - offset : x + offset + <span class=\"hljs-number\">1</span>\n                ].<span class=\"hljs-built_in\">sum</span>()\n\n                det = (wxx * wyy) - (wxy ** <span class=\"hljs-number\">2</span>)\n                trace = wxx + wyy\n                r = det - k * (trace ** <span class=\"hljs-number\">2</span>)\n                <span class=\"hljs-comment\"># Can change the value</span>\n                <span class=\"hljs-keyword\">if</span> r &gt; <span class=\"hljs-number\">0.5</span>:\n                    corner_list.append([x, y, r])\n                    color_img.itemset((y, x, <span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">0</span>)\n                    color_img.itemset((y, x, <span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">0</span>)\n                    color_img.itemset((y, x, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">255</span>)\n        <span class=\"hljs-keyword\">return</span> color_img, corner_list\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n\n    edge_detect = Harris_Corner(<span class=\"hljs-number\">0.04</span>, <span class=\"hljs-number\">3</span>)\n    color_img, _ = edge_detect.detect(<span class=\"hljs-string\">&quot;path_to_image&quot;</span>)\n    cv2.imwrite(<span class=\"hljs-string\">&quot;detect.png&quot;</span>, color_img)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Jeffin Francis",
      "email": "francisjeffin07@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
