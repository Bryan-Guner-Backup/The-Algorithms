{
  "slug": "sorted-arrays-intersection",
  "name": "Sorted Arrays Intersection",
  "categories": ["datastructures", "array"],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "data_structures/arrays/sorted_arrays_intersection.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/sorted_arrays_intersection.rb",
      "code": "<span class=\"hljs-comment\"># Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 1:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]</span>\n<span class=\"hljs-comment\"># Output: [1,5]</span>\n<span class=\"hljs-comment\"># Explanation: Only 1 and 5 appeared in the three arrays.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 2:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]</span>\n<span class=\"hljs-comment\"># Output: []</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach: Two-pointers</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n), where n is the total length of all of the</span>\n<span class=\"hljs-comment\"># input arrays.</span>\n<span class=\"hljs-comment\"># Space Complexity: O(1), as we only initiate three integer variables</span>\n<span class=\"hljs-comment\"># using constant space.</span>\n\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} arr1</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} arr2</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} arr3</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer[]}</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sorted_arrays_intersection</span><span class=\"hljs-params\">(arr1, arr2, arr3)</span></span>\n  result = []\n\n  <span class=\"hljs-comment\"># prepare three pointers to iterate through three arrays</span>\n  <span class=\"hljs-comment\"># p1, p2, and p3 point to the beginning of arr1, arr2, and arr3 accordingly</span>\n  p1 = p2 = p3 = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">while</span> (p1 &lt; arr1.count) &amp;&amp; (p2 &lt; arr2.count) &amp;&amp; (p3 &lt; arr3.count)\n    <span class=\"hljs-keyword\">if</span> arr1[p1] == arr2[p2] &amp;&amp; arr1[p1] == arr3[p3]\n      result.push(arr1[p1])\n\n      p1 += <span class=\"hljs-number\">1</span>\n      p2 += <span class=\"hljs-number\">1</span>\n      p3 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">elsif</span> arr1[p1] &lt; arr2[p2]\n      p1 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">elsif</span> arr2[p2] &lt; arr3[p3]\n      p2 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>\n      p3 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  result\n<span class=\"hljs-keyword\">end</span>\n\narr1 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\narr2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>]\narr3 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>]\nprint(sorted_arrays_intersection(arr1, arr2, arr3))\n<span class=\"hljs-comment\"># Output: [1,5]</span>\n\narr1 = [<span class=\"hljs-number\">197</span>, <span class=\"hljs-number\">418</span>, <span class=\"hljs-number\">523</span>, <span class=\"hljs-number\">876</span>, <span class=\"hljs-number\">1356</span>]\narr2 = [<span class=\"hljs-number\">501</span>, <span class=\"hljs-number\">880</span>, <span class=\"hljs-number\">1593</span>, <span class=\"hljs-number\">1710</span>, <span class=\"hljs-number\">1870</span>]\narr3 = [<span class=\"hljs-number\">521</span>, <span class=\"hljs-number\">682</span>, <span class=\"hljs-number\">1337</span>, <span class=\"hljs-number\">1395</span>, <span class=\"hljs-number\">1764</span>]\nprint(sorted_arrays_intersection(arr1, arr2, arr3))\n<span class=\"hljs-comment\"># Output: []</span>\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
