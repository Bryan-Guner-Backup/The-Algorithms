{
  "slug": "exponential-search",
  "name": "Exponential Search",
  "categories": ["searches"],
  "body": {
    "es": "<h4>Requisitos previos</h4>\n<ul>\n<li><a href=\"https://github.com/faridevnz/Algorithms-Explicaci%C3%B3n/blob/master/en/Search%20Algorithms/Binary%20Search.md\">Algoritmo de búsqueda binaria</a></li>\n</ul>\n<h4>Declaración de problema</h4>\n<p>Dada una matriz ordenada de <em><code>n</code></em> elementos, escriba una función para buscar el índice de un elemento determinado (destino)</p>\n<h4>Enfoque</h4>\n<ul>\n<li>Búsqueda del <strong>rango</strong> dentro del cual se incluye el objetivo aumentando <em>index</em> por poderes de 2</li>\n<li>Si este rango existe en la matriz aplicar el algoritmo de búsqueda binaria sobre él</li>\n<li>Más retorno -1</li>\n</ul>\n<h4>Ejemplo</h4>\n<pre><code class=\"hljs language-markdown\">arr = [1, 2, 3, 4, 5, 6, 7, ... 998, 999, 1<span class=\"hljs-emphasis\">_000]\n\nobjetivo = 998\níndice = 0\n1. BÚSQUEDA DEL RANGO\níndice = 1, 2, 4, 8, 16, 32, 64, ..., 512, ..., 1_</span>024\ndespués de 10 iteración tenemos el índice en 1<span class=\"hljs-emphasis\">_024 y fuera de la matriz \n2. BÚSQUEDA BINARIA\nAhora podemos aplicar la búsqueda binaria en el subarray de 512 y 1_</span>000.\n</code></pre>\n<p><strong>Nota</strong>: aplicamos la búsqueda binaria de 512 a 1_000 porque en <code>i = 2^10 = 1_024</code> la matriz está finisced y el número de destino es menor que el índice más reciente de la matriz ( 1_000 ).</p>\n<h4>Complejidad horaria</h4>\n<p><strong>Peor caso:</strong> <code>O(log *i*)</code> donde <code>*i* = índice</code> (posición) del objetivo</p>\n<p><strong>Mejor caso:</strong> <code>O(*1*)</code></p>\n<h4>Explicación de complejidad</h4>\n<ul>\n<li>La complejidad de la primera parte del algoritmo es <strong><code>O( log *i* )</code></strong> porque si <em>i</em> es la posición del destino en la matriz, después de duplicar la búsqueda <em>index</em> <code>⌈log(i)⌉</code> veces, el algoritmo estará en un índice de búsqueda que es mayor o igual que <em>i</em>. Podemos escribir <code>2^⌈log(i)⌉ >= i</code></li>\n<li>La complejidad de la segunda parte del algoritmo también es <strong><code>O ( log *i* )</code></strong> porque se trata de una simple búsqueda binaria. La complejidad de búsqueda binaria ( como se explica <a href=\"https://github.com/faridevnz/Algorithms-Explicaci%C3%B3n/blob/master/en/Search%20Algorithms/Binary%20Search.md\">aquí</a> ) es <code>O(*n*)</code> donde <em>n</em> es la longitud de la matriz. En la búsqueda exponencial, la longitud de la matriz en la que se aplica el algoritmo es <code>2^i - 2^(i-1)</code>, en palabras significa <code>(la longitud de la matriz de principio a *i* ) - (la parte de matriz omitida hasta la iteración anterior)</code>. Es simple verificar que <code>2^i - 2^(i-1) = 2^(i-1)</code>.</li>\n</ul>\n<p>Después de esta explicación detallada, podemos decir que la complejidad de la búsqueda exponencial es:</p>\n<pre><code class=\"hljs language-mathematica\"><span class=\"hljs-built_in\">O</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">log</span> <span class=\"hljs-variable\">i</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-built_in\">O</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">log</span> <span class=\"hljs-variable\">i</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span><span class=\"hljs-built_in\">O</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">log</span> <span class=\"hljs-variable\">i</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">O</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">log</span> <span class=\"hljs-variable\">i</span><span class=\"hljs-punctuation\">)</span>\n</code></pre>\n<h4>Búsqueda binaria vs Búsqueda exponencial</h4>\n<p>Echemos un vistazo a esta comparación con un ejemplo menos teórico. Imagine que tenemos una matriz con elementos <code>1_000_000</code> y queremos buscar un elemento que esté en la posición <code>4th</code>. Es fácil ver que:</p>\n<ul>\n<li>La búsqueda binaria comienza desde el centro de la matriz y llega a la 4ª posición después de muchas iteraciones</li>\n<li>La búsqueda exponencial llega al 4º índice después de sólo 2 iteraciones</li>\n</ul>\n<h4>Enlaces de implementación de código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/search/exponential_search.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Search/ExponentialSearch.js\">JavaScript</a></li>\n</ul>",
    "en": "<h4>Prerequisites</h4>\n<ul>\n<li><a href=\"https://github.com/faridevnz/Algorithms-Explanation/blob/master/en/Search%20Algorithms/Binary%20Search.md\">Binary Search algorithm</a></li>\n</ul>\n<h4>Problem Statement</h4>\n<p>Given a sorted array of <em>n</em> elements, write a function to search for the index of a given element (target)</p>\n<h4>Approach</h4>\n<ul>\n<li>Search for the <strong>range</strong> within which the target is included increasing <em>index</em> by powers of 2</li>\n<li>If this range exists in array apply the Binary Search algorithm over it</li>\n<li>Else return -1</li>\n</ul>\n<h4>Example</h4>\n<pre><code class=\"hljs language-markdown\">arr = [1, 2, 3, 4, 5, 6, 7, ... 998, 999, 1<span class=\"hljs-emphasis\">_000]\n\ntarget = 998\nindex = 0\n1. SEARCHING FOR THE RANGE\nindex = 1, 2, 4, 8, 16, 32, 64, ..., 512, ..., 1_</span>024\nafter 10 iteration we have the index at 1<span class=\"hljs-emphasis\">_024 and outside of the array \n2. BINARY SEARCH\nNow we can apply the binary search on the subarray from 512 and 1_</span>000.\n</code></pre>\n<p><em><strong>Note</strong></em>: we apply the Binary Search from 512 to 1_000 because at <code>i = 2^10 = 1_024</code> the array is finisced and the target number is less than the latest index of the array ( 1_000 ).</p>\n<h4>Time Complexity</h4>\n<p><strong>worst case:</strong> <code>O(log *i*)</code> where <code>*i* = index</code> (position) of the target</p>\n<p><strong>best case:</strong> <code>O(*1*)</code></p>\n<h4>Complexity Explanation</h4>\n<ul>\n<li>The complexity of the first part of the algorithm is <strong>O( log <em>i</em> )</strong> because if <em>i</em> is the position of the target in the array, after doubling the search <em>index</em> <code>⌈log(i)⌉</code> times, the algorithm will be at a search index that is greater than or equal to <em>i</em>. We can write <code>2^⌈log(i)⌉ >= i</code></li>\n<li>The complexity of the second part of the algorithm also is <strong>O ( log <em>i</em> )</strong> because that is a simple Binary Search. The Binary Search complexity ( as explained <a href=\"https://github.com/faridevnz/Algorithms-Explanation/blob/master/en/Search%20Algorithms/Binary%20Search.md\">here</a> ) is O( <em>n</em> ) where <em>n</em> is the length of the array. In the Exponential Search, the length of the array on which the algorithm is applied is <code>2^i - 2^(i-1)</code>, put into words it means '( the length of the array from start to <em>i</em> ) - ( the part of array skipped until the previous iteration )'. Is simple verify that <code>2^i - 2^(i-1) = 2^(i-1) </code></li>\n</ul>\n<p>After this detailed explanation we can say that the the complexity of the Exponential Search is:</p>\n<pre><code class=\"hljs language-mathematica\"><span class=\"hljs-built_in\">O</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">log</span> <span class=\"hljs-variable\">i</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">+</span> <span class=\"hljs-built_in\">O</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">log</span> <span class=\"hljs-variable\">i</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span><span class=\"hljs-built_in\">O</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">log</span> <span class=\"hljs-variable\">i</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">O</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-variable\">log</span> <span class=\"hljs-variable\">i</span><span class=\"hljs-punctuation\">)</span>\n</code></pre>\n<h4>Binary Search vs Exponential Search</h4>\n<p>Let's take a look at this comparison with a less theoretical example. Imagine we have an array with<code>1_000_000</code> elements and we want to search an element that is in the <code>4th</code> position. It's easy to see that:</p>\n<ul>\n<li>The Binary Search start from the middle of the array and arrive to the 4th position after many iterations</li>\n<li>The Exponential Search arrive at the 4th index after only 2 iterations</li>\n</ul>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/search/exponential_search.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Search/ExponentialSearch.js\">JavaScript</a></li>\n</ul>"
  },
  "implementations": {
    "javascript": {
      "dir": "Search/ExponentialSearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search/ExponentialSearch.js",
      "code": "<span class=\"hljs-comment\">/**\n * Exponential Search\n *\n * The algorithm consists of two stages. The first stage determines a\n * range in which the search key would reside if it were in the list.\n * In the second stage, a binary search is performed on this range.\n *\n *\n *\n */</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">binarySearch</span> (arr, x, floor, ceiling) {\n  <span class=\"hljs-comment\">// Middle index</span>\n  <span class=\"hljs-keyword\">const</span> mid = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((floor + ceiling) / <span class=\"hljs-number\">2</span>)\n\n  <span class=\"hljs-comment\">// If value is at the mid position return this position</span>\n  <span class=\"hljs-keyword\">if</span> (arr[mid] === x) {\n    <span class=\"hljs-keyword\">return</span> mid\n  }\n\n  <span class=\"hljs-keyword\">if</span> (floor &gt; ceiling) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\">// If the middle element is great than the value</span>\n  <span class=\"hljs-comment\">// search the left part of the array</span>\n  <span class=\"hljs-keyword\">if</span> (arr[mid] &gt; value) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">binarySearch</span>(arr, value, floor, mid - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-comment\">// If the middle element is lower than the value</span>\n    <span class=\"hljs-comment\">// search the right part of the array</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">binarySearch</span>(arr, value, mid + <span class=\"hljs-number\">1</span>, ceiling)\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exponentialSearch</span> (arr, length, value) {\n  <span class=\"hljs-comment\">// If value is the first element of the array return this position</span>\n  <span class=\"hljs-keyword\">if</span> (arr[<span class=\"hljs-number\">0</span>] === value) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// Find range for binary search</span>\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">while</span> (i &lt; length &amp;&amp; arr[i] &lt;= value) {\n    i = i * <span class=\"hljs-number\">2</span>\n  }\n\n  <span class=\"hljs-comment\">// Call binary search for the range found above</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">binarySearch</span>(arr, value, i / <span class=\"hljs-number\">2</span>, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(i, length))\n}\n\n<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">100</span>]\n<span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-number\">78</span>\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">exponentialSearch</span>(arr, arr.<span class=\"hljs-property\">length</span>, value)\n\n<span class=\"hljs-keyword\">if</span> (result &lt; <span class=\"hljs-number\">0</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Element not found&#x27;</span>)\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Element found at position :&#x27;</span> + result)\n}\n"
    },
    "c-plus-plus": {
      "dir": "search/exponential_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search/exponential_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief [Exponential search\n * algorithm](https://en.wikipedia.org/wiki/Exponential_search)\n * \\copyright 2020 Divide-et-impera-11\n *\n * The algorithm try to search the range where the key should be.\n * If it has been found we do a binary search there.\n * The range of the search grows by exponential every time.\n * If the key is larger than the last element of array, the start of\n * block(block_front) will be equal to the end of block(block_size) and the\n * algorithm return null ponter, every other cases the algoritm return fom the\n * loop.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>  <span class=\"hljs-comment\">// use for MS Visual C++</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span>  <span class=\"hljs-comment\">// for all other compilers</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/** Binary Search Algorithm (used by ::struzik_search)\\n\n * * Time Complexity O(log n) where &#x27;n&#x27; is the number of elements\n * * Worst Time Complexity O(log n)\n * * Best Time Complexity Ω(1)\n * * Space Complexity O(1)\n * * Auxiliary Space Complexity O(1)\n * \\returns pointer to value in the array\n * \\returns `nullptr` if value not found\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> Type* <span class=\"hljs-title\">binary_s</span><span class=\"hljs-params\">(Type* array, <span class=\"hljs-type\">size_t</span> size, Type key)</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int32_t</span> <span class=\"hljs-title\">lower_index</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span>, <span class=\"hljs-title\">upper_index</span><span class=\"hljs-params\">(size - <span class=\"hljs-number\">1</span>)</span>, middle_index</span>;\n\n    <span class=\"hljs-keyword\">while</span> (lower_index &lt;= upper_index) {\n        middle_index = std::<span class=\"hljs-built_in\">floor</span>((lower_index + upper_index) / <span class=\"hljs-number\">2</span>);\n\n        <span class=\"hljs-keyword\">if</span> (*(array + middle_index) &lt; key)\n            lower_index = (middle_index + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*(array + middle_index) &gt; key)\n            upper_index = (middle_index - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-built_in\">return</span> (array + middle_index);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nullptr</span>;\n}\n\n<span class=\"hljs-comment\">/** Struzik Search Algorithm(Exponential)\n * * Time Complexity O(log i) where i is the position of search key in the list\n * * Worst Time Complexity O(log i)\n * * Best Time Complexity Ω(1)\n * * Space Complexity O(1)\n * * Auxiliary Space Complexity O(1)\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Type</span>&gt;\n<span class=\"hljs-function\">Type* <span class=\"hljs-title\">struzik_search</span><span class=\"hljs-params\">(Type* array, <span class=\"hljs-type\">size_t</span> size, Type key)</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">block_front</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span>, block_size </span>= size == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (block_front != block_size) {\n        <span class=\"hljs-keyword\">if</span> (*(array + block_size - <span class=\"hljs-number\">1</span>) &lt; key) {\n            block_front = block_size;\n            (block_size * <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span> &lt; size) ? (block_size *= <span class=\"hljs-number\">2</span>) : block_size = size;\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">binary_s</span>&lt;Type&gt;(array + block_front, (block_size - block_front),\n                              key);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nullptr</span>;\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// TEST CASES</span>\n    <span class=\"hljs-type\">int</span>* sorted_array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">7</span>]{<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">105</span>, <span class=\"hljs-number\">203</span>};\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">struzik_search</span>&lt;<span class=\"hljs-type\">int</span>&gt;(sorted_array, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-literal\">nullptr</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">struzik_search</span>&lt;<span class=\"hljs-type\">int</span>&gt;(sorted_array, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1000</span>) == <span class=\"hljs-literal\">nullptr</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">struzik_search</span>&lt;<span class=\"hljs-type\">int</span>&gt;(sorted_array, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">50</span>) == <span class=\"hljs-literal\">nullptr</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">struzik_search</span>&lt;<span class=\"hljs-type\">int</span>&gt;(sorted_array, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>) == sorted_array);\n    <span class=\"hljs-comment\">// TEST CASES</span>\n    <span class=\"hljs-keyword\">delete</span>[] sorted_array;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "searching/exponential_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching/exponential_search.c",
      "code": "<span class=\"hljs-comment\">/**\n *  \\file\n *  \\brief [Exponential Search](https://github.com/TheAlgorithms/Algorithms-Explanation/blob/master/en/Search%20Algorithms/Exponential%20Search.md)\n *  \\author [Alessio Farinelli](https://github.com/faridevnz)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>  <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span>  <span class=\"hljs-comment\">/// for int64_t, uint16_t</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ELEMENT -10</span>\n\n<span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title function_\">binary_search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span>* arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint16_t</span> l_index, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint16_t</span> r_index, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> n)</span>; <span class=\"hljs-comment\">///&lt; used to perform the binary search over the given array</span>\n<span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title function_\">exponential_search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span>* arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint16_t</span> length, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> n)</span>; <span class=\"hljs-comment\">///&lt; used to perform the exponential search over the given array</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>; <span class=\"hljs-comment\">///&lt; used to run the self-test implementations</span>\n\n<span class=\"hljs-comment\">/**\n * Function: exponential_search\n * \\brief algorithm that search the index of the given item\n * \\details recursive function that take an array and quickly find the range \n * where to apply the binary search algorithm to find the given element\n * ----------------------------\n * \\param arr array where search the element\n * \\param length the total length of the given array (arr)\n * \\param n element to find in the array (arr)\n * \n * \\returns the index of the element (n) in the array (arr)\n * \\returns -1 if the element wasn&#x27;t found\n */</span>\n<span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title function_\">exponential_search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span>* arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint16_t</span> length, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> n)</span> \n{\n    <span class=\"hljs-keyword\">if</span> ( length == <span class=\"hljs-number\">0</span> ) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>; }\n    <span class=\"hljs-comment\">// find the upperbound</span>\n    <span class=\"hljs-type\">uint32_t</span> upper_bound = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> ( upper_bound &lt;= length &amp;&amp; arr[upper_bound] &lt; n ) { upper_bound = upper_bound * <span class=\"hljs-number\">2</span>; }\n    <span class=\"hljs-comment\">// calculate the range ( between lower_boud and upper_bound )</span>\n    <span class=\"hljs-type\">uint16_t</span> lower_bound = upper_bound/<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">if</span> ( upper_bound &gt; length ) { upper_bound = length; }\n    <span class=\"hljs-comment\">// apply the binary search in the range</span>\n    <span class=\"hljs-keyword\">return</span> binary_search(arr, lower_bound, upper_bound, n);\n}\n\n<span class=\"hljs-comment\">/**\n * Function: binary_search\n * \\brief algorithm that search the index of the given item\n * \\details recursive function that search the given element in\n * the array using the [Binary Search](https://github.com/TheAlgorithms/Algorithms-Explanation/blob/master/en/Search%20Algorithms/Binary%20Search.md)\n * ----------------------------\n * \\param arr array where search the element\n * \\param l_index start index of the array (arr) to apply the algorithm\n * \\param r_index end index of the array (arr) to apply the algorithm\n * \\param n element to find in the array (arr)\n *\n * \\returns the index of the element (n) in the array (arr)\n * \\returns -1 if the n element wasn&#x27;t found\n */</span>\n<span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title function_\">binary_search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span>* arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint16_t</span> l_index, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint16_t</span> r_index, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> n)</span> \n{\n    <span class=\"hljs-comment\">// calculate the middle index of the array</span>\n    <span class=\"hljs-type\">uint16_t</span> middle_index = l_index + ( r_index - l_index ) / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-comment\">// base cases</span>\n    <span class=\"hljs-keyword\">if</span> ( l_index &gt; r_index ) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>; }\n    <span class=\"hljs-keyword\">if</span> ( arr[middle_index] == n ) { <span class=\"hljs-keyword\">return</span> middle_index; }\n    <span class=\"hljs-comment\">// recursion</span>\n    <span class=\"hljs-keyword\">if</span> ( arr[middle_index] &gt; n ) { <span class=\"hljs-keyword\">return</span> binary_search(arr, l_index, middle_index<span class=\"hljs-number\">-1</span>, n); } <span class=\"hljs-comment\">// left</span>\n    <span class=\"hljs-keyword\">return</span> binary_search(arr, middle_index+<span class=\"hljs-number\">1</span>, r_index, n); <span class=\"hljs-comment\">// right</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> \n{\n    test();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">// empty array</span>\n    <span class=\"hljs-type\">int64_t</span> arr_empty[] = {};\n    assert(exponential_search(arr_empty, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>) == <span class=\"hljs-number\">-1</span>);\n    <span class=\"hljs-comment\">// elent not found</span>\n    <span class=\"hljs-type\">int64_t</span> arr_found[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>};\n    assert(exponential_search(arr_found, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">10</span>) == <span class=\"hljs-number\">-1</span>);\n    <span class=\"hljs-comment\">// element found in an array of length 1</span>\n    <span class=\"hljs-type\">int64_t</span> arr_one[] = {<span class=\"hljs-number\">1</span>};\n    assert(exponential_search(arr_found, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-comment\">// find the first element in an array of length 2</span>\n    <span class=\"hljs-type\">int64_t</span> arr_first_2[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>};\n    assert(exponential_search(arr_first_2, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-comment\">// find the last element in an array of length 2</span>\n    <span class=\"hljs-type\">int64_t</span> arr_last_2[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>};\n    assert(exponential_search(arr_last_2, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">// find the first element in an array of length n</span>\n    <span class=\"hljs-type\">int64_t</span> arr_first_n[] = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>};\n    assert(exponential_search(arr_first_n, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">-1</span>) == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-comment\">// find the last element in an array of length n</span>\n    <span class=\"hljs-type\">int64_t</span> arr_last_n[] = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>};\n    assert(exponential_search(arr_last_n, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>) == <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-comment\">// find an element in an array of length n</span>\n    <span class=\"hljs-type\">int64_t</span> arr_middle[] = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>};\n    assert(exponential_search(arr_middle, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>) == <span class=\"hljs-number\">3</span>);\n}\n"
    },
    "julia": {
      "dir": "src/searches/exponential_search.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/searches/exponential_search.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n\t exponential_search(arr::AbstractArray{T,1}, x::T) where {T &lt;: Real}\n\nExponential Search in 1-D array\nTime Complexity:  O(Log n)\n# Exponential Search\nIt works in O(Log n) time\nExponential search involves two steps:\n- Find range where element is present\n- Do Binary Search in above found range.\n### Time Complexity :\nO(Log n)\nApplications of Exponential Search:\nExponential Binary Search is particularly useful for unbounded searches, where size of array is infinite. Please refer Unbounded Binary Search for an example.\nIt works better than Binary Search for bounded arrays, and also when the element to be searched is closer to the first element.\n\nContributed By:- [Ash](https://github.com/ashwani-rathee)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> exponential_search(arr::<span class=\"hljs-built_in\">AbstractArray</span>{T,<span class=\"hljs-number\">1</span>}, x::T) <span class=\"hljs-keyword\">where</span> {T&lt;:<span class=\"hljs-built_in\">Real</span>}\n    n = size(arr)[<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">if</span> (arr[<span class=\"hljs-number\">1</span>] == x)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Element present at index 1&quot;</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    i = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt; n &amp;&amp; arr[i] &lt;= x)\n        i = i * <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> binary_search(arr, <span class=\"hljs-built_in\">Int</span>(ceil(i / <span class=\"hljs-number\">2</span>)), min(i, n), x)\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Alessio Farinelli",
      "email": "alessio.farinelli.developer@gmail.com",
      "commits": 1
    },
    {
      "name": "Jean-Francois Baffier",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Riot",
      "email": "misike1111@gmail.com",
      "commits": 1
    },
    {
      "name": "LefterisD",
      "email": "elefthed@csd.auth.gr",
      "commits": 2
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+uncomfyhalomacro@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "Divide-et-impera-11",
      "email": "54957167+Divide-et-impera-11@users.noreply.github.com",
      "commits": 13
    }
  ],
  "explanationUrl": {
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Algoritmos de búsqueda/Búsqueda exponencial.md",
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Search Algorithms/Exponential Search.md"
  }
}
