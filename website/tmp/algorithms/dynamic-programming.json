{
  "slug": "dynamic-programming",
  "name": "Dynamic Programming",
  "categories": ["knapsack"],
  "body": {},
  "implementations": {
    "julia": {
      "dir": "src/knapsack/dynamic_programming.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/knapsack/dynamic_programming.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    zero_one_pack!(capacity::N, weights::V, values::V, dp::V) where {N &lt;: Number,V &lt;: AbstractVector}\nThis does 0-1 (each item can be chosen only once) knapsack :\npack capacity = capacity\nweight of each item = weights\nvalue of each item = values\ndp array is what the function works on\nIt returns the ans (dp[capacity])\n```\njulia&gt; dp=zeros(Int,30)\njulia&gt; zero_one_pack!(20,[1,3,11],[2,5,30],dp)\n37\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> zero_one_pack!(capacity::N, weights::V, values::V, dp::V\n) <span class=\"hljs-keyword\">where</span> {N &lt;: <span class=\"hljs-built_in\">Number</span>,V &lt;: <span class=\"hljs-built_in\">AbstractVector</span>}\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:length(weights)\n        j = capacity\n        <span class=\"hljs-keyword\">while</span> j &gt; weights[i] <span class=\"hljs-comment\"># reversed loop</span>\n            dp[j] = max(dp[j], dp[j - weights[i]] + values[i])\n            j -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">end</span>\n        dp[weights[i]] = max(dp[weights[i]], values[i]) <span class=\"hljs-comment\"># dp[j]=max(dp[j],dp[0]+values[i])</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> dp[capacity]\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nThis does complete/infinite (each item can be chosen infinite times) knapsack :\npack capacity = capacity\nweight of each item = weights\nvalue of each item = values\ndp array is what the function works on\nIt returns the ans (dp[capacity])\n```\njulia&gt; dp=zeros(Int,30)\njulia&gt; complete_pack!(20,[1,2,9],[1,3,20],dp)\n43\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> complete_pack!(capacity::N, weights::V, values::V, dp::V\n) <span class=\"hljs-keyword\">where</span> {N &lt;: <span class=\"hljs-built_in\">Number</span>,V &lt;: <span class=\"hljs-built_in\">AbstractVector</span>}\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:length(weights)\n        dp[weights[i]] = max(dp[weights[i]], values[i]) <span class=\"hljs-comment\"># dp[j]=max(dp[j],dp[0]+values[i])</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> weights[i] + <span class=\"hljs-number\">1</span>:capacity\n            dp[j] = max(dp[j], dp[j - weights[i]] + values[i])\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> dp[capacity]\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "KheeLong",
      "email": "kheelong0387@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
