{
  "slug": "cantor-set",
  "name": "Cantor Set",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/cantor_set.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/cantor_set.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Program to generate [Cantor ternary\n * set](https://en.wikipedia.org/wiki/Cantor_set)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/** structure to define Cantor set */</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">cantor_set</span>\n{</span>\n    <span class=\"hljs-type\">double</span> start;             <span class=\"hljs-comment\">/**&lt; start of interval */</span>\n    <span class=\"hljs-type\">double</span> end;               <span class=\"hljs-comment\">/**&lt; end of interval */</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> _<span class=\"hljs-title\">cantor_set</span> *<span class=\"hljs-title\">next</span>;</span> <span class=\"hljs-comment\">/**&lt; pointer to next set */</span>\n} CantorSet;\n\n<span class=\"hljs-comment\">/** Iterative constructor of all sets in the current level. This function\n * dynamically allocates memory when creating new sets. These are freed by the\n * function ::free_memory.\n * @param head pointer to interval set instance to update\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">propagate</span><span class=\"hljs-params\">(CantorSet *head)</span>\n{\n    <span class=\"hljs-comment\">// if input is NULL, ignore the process</span>\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span>;\n\n    CantorSet *temp = head;  <span class=\"hljs-comment\">// local pointer to track propagation</span>\n\n    <span class=\"hljs-comment\">// create new node for the new set</span>\n    CantorSet *newNode = (CantorSet *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(CantorSet));\n\n    <span class=\"hljs-comment\">// get 1/3rd of interval</span>\n    <span class=\"hljs-type\">double</span> diff = (((temp-&gt;end) - (temp-&gt;start)) / <span class=\"hljs-number\">3</span>);\n\n    <span class=\"hljs-comment\">// update interval ranges</span>\n    newNode-&gt;end = temp-&gt;end;\n    temp-&gt;end = ((temp-&gt;start) + diff);\n    newNode-&gt;start = (newNode-&gt;end) - diff;\n\n    <span class=\"hljs-comment\">// update pointer to next set in this level</span>\n    newNode-&gt;next = temp-&gt;next;\n\n    <span class=\"hljs-comment\">// point to next set</span>\n    temp-&gt;next = newNode;\n\n    <span class=\"hljs-comment\">// create next set</span>\n    propagate(temp-&gt;next-&gt;next);\n}\n\n<span class=\"hljs-comment\">/** Print sets in the current range to `stdout`\n * @param head pointer to first set in the current level\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(CantorSet *head)</span>\n{\n    CantorSet *temp = head;\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// print while a valid set is found</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[%lf] -- &quot;</span>, temp-&gt;start);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[%lf]&quot;</span>, temp-&gt;end);\n        temp = temp-&gt;next;\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/** Clear memory allocated by ::propagate function.\n * @param head pointer to first allocated instance.\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">free_memory</span><span class=\"hljs-params\">(CantorSet *head)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (!head)\n        <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">if</span> (head-&gt;next)\n        free_memory(head-&gt;next);\n\n    <span class=\"hljs-built_in\">free</span>(head);\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-keyword\">const</span> *argv[])</span>\n{\n    <span class=\"hljs-type\">int</span> start_num, end_num, levels;\n\n    <span class=\"hljs-keyword\">if</span> (argc &lt; <span class=\"hljs-number\">2</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter 3 arguments: start_num \\t end_num \\t levels\\n&quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d&quot;</span>, &amp;start_num, &amp;end_num, &amp;levels);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        start_num = atoi(argv[<span class=\"hljs-number\">1</span>]);\n        end_num = atoi(argv[<span class=\"hljs-number\">2</span>]);\n        levels = atoi(argv[<span class=\"hljs-number\">3</span>]);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (start_num &lt; <span class=\"hljs-number\">0</span> || end_num &lt; <span class=\"hljs-number\">0</span> || levels &lt; <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;All numbers must be positive\\n&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n\n    CantorSet head = {.start = start_num, .end = end_num, .next = <span class=\"hljs-literal\">NULL</span>};\n\n    <span class=\"hljs-comment\">// loop to propagate each level from top to bottom</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; levels; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Level %d\\t&quot;</span>, i);\n        print(&amp;head);\n        propagate(&amp;head);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Level %d\\t&quot;</span>, levels);\n    print(&amp;head);\n\n    <span class=\"hljs-comment\">// delete all memory allocated</span>\n    free_memory(head.next);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
