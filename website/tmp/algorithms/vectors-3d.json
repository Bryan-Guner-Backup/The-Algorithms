{
  "slug": "vectors-3d",
  "name": "Vectors 3d",
  "categories": ["geometry"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "geometry/vectors_3d.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/geometry/vectors_3d.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Functions related to 3D vector operations.\n * @author Krishna Vedala\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __arm__  <span class=\"hljs-comment\">// if compiling for ARM-Cortex processors</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> LIBQUAT_ARM</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arm_math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;geometry_datatypes.h&quot;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @addtogroup vec_3d 3D Vector operations\n * @{\n */</span>\n\n<span class=\"hljs-comment\">/**\n * Subtract one vector from another. @f[\n * \\vec{c}=\\vec{a}-\\vec{b}=\\left(a_x-b_x\\right)\\hat{i}+\n * \\left(a_y-b_y\\right)\\hat{j}+\\left(a_z-b_z\\right)\\hat{k}@f]\n * @param[in] a vector to subtract from\n * @param[in] b vector to subtract\n * @returns resultant vector\n */</span>\nvec_3d <span class=\"hljs-title function_\">vector_sub</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a, <span class=\"hljs-keyword\">const</span> vec_3d *b)</span>\n{\n    vec_3d out;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> LIBQUAT_ARM</span>\n    arm_sub_f32((<span class=\"hljs-type\">float</span> *)a, (<span class=\"hljs-type\">float</span> *)b, (<span class=\"hljs-type\">float</span> *)&amp;out);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n    out.x = a-&gt;x - b-&gt;x;\n    out.y = a-&gt;y - b-&gt;y;\n    out.z = a-&gt;z - b-&gt;z;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n    <span class=\"hljs-keyword\">return</span> out;\n}\n\n<span class=\"hljs-comment\">/**\n * Add one vector to another. @f[\n * \\vec{c}=\\vec{a}+\\vec{b}=\\left(a_x+b_x\\right)\\hat{i}+\n * \\left(a_y+b_y\\right)\\hat{j}+\\left(a_z+b_z\\right)\\hat{k}@f]\n * @param[in] a vector to add to\n * @param[in] b vector to add\n * @returns resultant vector\n */</span>\nvec_3d <span class=\"hljs-title function_\">vector_add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a, <span class=\"hljs-keyword\">const</span> vec_3d *b)</span>\n{\n    vec_3d out;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> LIBQUAT_ARM</span>\n    arm_add_f32((<span class=\"hljs-type\">float</span> *)a, (<span class=\"hljs-type\">float</span> *)b, (<span class=\"hljs-type\">float</span> *)&amp;out);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n    out.x = a-&gt;x + b-&gt;x;\n    out.y = a-&gt;y + b-&gt;y;\n    out.z = a-&gt;z + b-&gt;z;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n    <span class=\"hljs-keyword\">return</span> out;\n}\n\n<span class=\"hljs-comment\">/**\n * Obtain the dot product of two 3D vectors.\n * @f[\n * \\vec{a}\\cdot\\vec{b}=a_xb_x + a_yb_y + a_zb_z\n * @f]\n * @param[in] a first vector\n * @param[in] b second vector\n * @returns resulting dot product\n */</span>\n<span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">dot_prod</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a, <span class=\"hljs-keyword\">const</span> vec_3d *b)</span>\n{\n    <span class=\"hljs-type\">float</span> dot;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> LIBQUAT_ARM</span>\n    arm_dot_prod_f32((<span class=\"hljs-type\">float</span> *)a, (<span class=\"hljs-type\">float</span> *)b, &amp;dot);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n    dot = a-&gt;x * b-&gt;x;\n    dot += a-&gt;y * b-&gt;y;\n    dot += a-&gt;z * b-&gt;z;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n    <span class=\"hljs-keyword\">return</span> dot;\n}\n\n<span class=\"hljs-comment\">/**\n * Compute the vector product of two 3d vectors.\n * @f[\\begin{align*}\n * \\vec{a}\\times\\vec{b} &amp;= \\begin{vmatrix}\n *  \\hat{i} &amp; \\hat{j} &amp; \\hat{k}\\\\\n *  a_x &amp; a_y &amp; a_z\\\\\n *  b_x &amp; b_y &amp; b_z\n *  \\end{vmatrix}\\\\\n *  &amp;= \\left(a_yb_z-b_ya_z\\right)\\hat{i} - \\left(a_xb_z-b_xa_z\\right)\\hat{j}\n * + \\left(a_xb_y-b_xa_y\\right)\\hat{k} \\end{align*}\n * @f]\n * @param[in] a first vector @f$\\vec{a}@f$\n * @param[in] b second vector @f$\\vec{b}@f$\n * @returns resultant vector @f$\\vec{o}=\\vec{a}\\times\\vec{b}@f$\n */</span>\nvec_3d <span class=\"hljs-title function_\">vector_prod</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a, <span class=\"hljs-keyword\">const</span> vec_3d *b)</span>\n{\n    vec_3d out;  <span class=\"hljs-comment\">// better this way to avoid copying results to input</span>\n                 <span class=\"hljs-comment\">// vectors themselves</span>\n    out.x = a-&gt;y * b-&gt;z - a-&gt;z * b-&gt;y;\n    out.y = -a-&gt;x * b-&gt;z + a-&gt;z * b-&gt;x;\n    out.z = a-&gt;x * b-&gt;y - a-&gt;y * b-&gt;x;\n\n    <span class=\"hljs-keyword\">return</span> out;\n}\n\n<span class=\"hljs-comment\">/**\n * Print formatted vector on stdout.\n * @param[in] a vector to print\n * @param[in] name  name of the vector\n * @returns string representation of vector\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">print_vector</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *name)</span>\n{\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">char</span> vec_str[<span class=\"hljs-number\">100</span>];  <span class=\"hljs-comment\">// static to ensure the string life extends the</span>\n                               <span class=\"hljs-comment\">// life of function</span>\n\n    <span class=\"hljs-built_in\">snprintf</span>(vec_str, <span class=\"hljs-number\">99</span>, <span class=\"hljs-string\">&quot;vec(%s) = (%.3g)i + (%.3g)j + (%.3g)k\\n&quot;</span>, name, a-&gt;x,\n             a-&gt;y, a-&gt;z);\n    <span class=\"hljs-keyword\">return</span> vec_str;\n}\n\n<span class=\"hljs-comment\">/**\n * Compute the norm a vector.\n * @f[\\lVert\\vec{a}\\rVert = \\sqrt{\\vec{a}\\cdot\\vec{a}} @f]\n * @param[in] a input vector\n * @returns norm of the given vector\n */</span>\n<span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">vector_norm</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a)</span>\n{\n    <span class=\"hljs-type\">float</span> n = dot_prod(a, a);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> LIBQUAT_ARM</span>\n    arm_sqrt_f32(*n, n);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n    n = sqrtf(n);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n    <span class=\"hljs-keyword\">return</span> n;\n}\n\n<span class=\"hljs-comment\">/**\n * Obtain unit vector in the same direction as given vector.\n * @f[\\hat{a}=\\frac{\\vec{a}}{\\lVert\\vec{a}\\rVert}@f]\n * @param[in] a input vector\n * @returns n unit vector in the direction of @f$\\vec{a}@f$\n */</span>\nvec_3d <span class=\"hljs-title function_\">unit_vec</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a)</span>\n{\n    vec_3d n = {<span class=\"hljs-number\">0</span>};\n\n    <span class=\"hljs-type\">float</span> norm = vector_norm(a);\n    <span class=\"hljs-keyword\">if</span> (fabsf(norm) &lt; EPSILON)\n    {  <span class=\"hljs-comment\">// detect possible divide by 0</span>\n        <span class=\"hljs-keyword\">return</span> n;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (norm != <span class=\"hljs-number\">1.F</span>)  <span class=\"hljs-comment\">// perform division only if needed</span>\n    {\n        n.x = a-&gt;x / norm;\n        n.y = a-&gt;y / norm;\n        n.z = a-&gt;z / norm;\n    }\n    <span class=\"hljs-keyword\">return</span> n;\n}\n\n<span class=\"hljs-comment\">/**\n * The cross product of vectors can be represented as a matrix\n * multiplication operation. This function obtains the `3x3` matrix\n * of the cross-product operator from the first vector.\n * @f[\\begin{align*}\n * \\left(\\vec{a}\\times\\right)\\vec{b} &amp;= \\tilde{A}_a\\vec{b}\\\\\n * \\tilde{A}_a &amp;=\n * \\begin{bmatrix}0&amp;-a_z&amp;a_y\\\\a_z&amp;0&amp;-a_x\\\\-a_y&amp;a_x&amp;0\\end{bmatrix}\n * \\end{align*}@f]\n * @param[in] a input vector\n * @returns the `3x3` matrix for the cross product operator\n * @f$\\left(\\vec{a}\\times\\right)@f$\n */</span>\nmat_3x3 <span class=\"hljs-title function_\">get_cross_matrix</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a)</span>\n{\n    mat_3x3 A = {<span class=\"hljs-number\">0.</span>, -a-&gt;z, a-&gt;y, a-&gt;z, <span class=\"hljs-number\">0.</span>, -a-&gt;x, -a-&gt;y, a-&gt;x, <span class=\"hljs-number\">0.</span>};\n    <span class=\"hljs-keyword\">return</span> A;\n}\n\n<span class=\"hljs-comment\">/**\n * Obtain the angle between two given vectors.\n * @f[\\alpha=acos\\left(\\frac{\\vec{a} \\cdot \\vec{b}}{\\lVert\\vec{a}\\rVert \\cdot \\lVert\\vec{b}\\rVert}\\right)@f]\n * @param[in] a first input vector\n * @param[in] b second input vector\n * @returns angle between @f$\\vec{a}@f$ and @f$\\vec{b}@f$ in radians\n */</span>\n\n<span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">get_angle</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> vec_3d *a, <span class=\"hljs-keyword\">const</span> vec_3d *b)</span>\n{\n    <span class=\"hljs-type\">double</span> alpha, cos_alpha;\n    <span class=\"hljs-type\">float</span> norm_a = vector_norm(a); <span class=\"hljs-comment\">///&lt; The norm of vector a</span>\n    <span class=\"hljs-type\">float</span> norm_b = vector_norm(b); <span class=\"hljs-comment\">///&lt; The norm of vector b</span>\n    <span class=\"hljs-keyword\">if</span> (fabsf(norm_a) &lt; EPSILON || fabsf(norm_b) &lt; EPSILON) <span class=\"hljs-comment\">/// detect possible division by 0 - the angle is not defined in this case</span>\n    {  \n        <span class=\"hljs-keyword\">return</span> NAN; \n    }\n\n    cos_alpha = dot_prod(a, b) / (norm_a * norm_b);\n    alpha = <span class=\"hljs-built_in\">acos</span>(cos_alpha); <span class=\"hljs-comment\">// delivers the radian</span>\n    <span class=\"hljs-keyword\">return</span> alpha; <span class=\"hljs-comment\">// in range from -1 to 1</span>\n}\n\n<span class=\"hljs-comment\">/** @} */</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Testing function\n * @returns `void`\n */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    vec_3d a = {<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">2.</span>, <span class=\"hljs-number\">3.</span>};\n    vec_3d b = {<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>};\n    <span class=\"hljs-type\">float</span> d;\n\n    <span class=\"hljs-comment\">// printf(&quot;%s&quot;, print_vector(&amp;a, &quot;a&quot;));</span>\n    <span class=\"hljs-comment\">// printf(&quot;%s&quot;, print_vector(&amp;b, &quot;b&quot;));</span>\n\n    d = vector_norm(&amp;a);\n    <span class=\"hljs-comment\">// printf(&quot;|a| = %.4g\\n&quot;, d);</span>\n    assert(fabsf(d - <span class=\"hljs-number\">3.742f</span>) &lt; <span class=\"hljs-number\">0.01</span>);\n    d = vector_norm(&amp;b);\n    <span class=\"hljs-comment\">// printf(&quot;|b| = %.4g\\n&quot;, d);</span>\n    assert(fabsf(d - <span class=\"hljs-number\">1.732f</span>) &lt; <span class=\"hljs-number\">0.01</span>);\n\n    d = dot_prod(&amp;a, &amp;b);\n    <span class=\"hljs-comment\">// printf(&quot;Dot product: %f\\n&quot;, d);</span>\n    assert(fabsf(d - <span class=\"hljs-number\">6.f</span>) &lt; <span class=\"hljs-number\">0.01</span>);\n\n    vec_3d c = vector_prod(&amp;a, &amp;b);\n    <span class=\"hljs-comment\">// printf(&quot;Vector product &quot;);</span>\n    <span class=\"hljs-comment\">// printf(&quot;%s&quot;, print_vector(&amp;c, &quot;c&quot;));</span>\n    assert(fabsf(c.x - (<span class=\"hljs-number\">-1.f</span>)) &lt; <span class=\"hljs-number\">0.01</span>);\n    assert(fabsf(c.y - (<span class=\"hljs-number\">2.f</span>)) &lt; <span class=\"hljs-number\">0.01</span>);\n    assert(fabsf(c.z - (<span class=\"hljs-number\">-1.f</span>)) &lt; <span class=\"hljs-number\">0.01</span>);\n\n    <span class=\"hljs-type\">double</span> alpha = get_angle(&amp;a, &amp;b);\n    <span class=\"hljs-comment\">// printf(&quot;The angle is %f\\n&quot;, alpha);</span>\n    assert(fabsf(alpha - <span class=\"hljs-number\">0.387597</span>) &lt; <span class=\"hljs-number\">0.01</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n *\n * @return 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    test();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "lasgel",
      "email": "lasse.gellrich@gmx.de",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
