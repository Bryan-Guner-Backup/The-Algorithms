{
  "slug": "transposition-cipher",
  "name": "Transposition Cipher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/transposition_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/transposition_cipher.py",
      "code": "<span class=\"hljs-keyword\">import</span> math\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nIn cryptography, the TRANSPOSITION cipher is a method of encryption where the\npositions of plaintext are shifted a certain number(determined by the key) that\nfollows a regular system that results in the permuted text, known as the encrypted\ntext. The type of transposition cipher demonstrated under is the ROUTE cipher.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    message = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter message: &quot;</span>)\n    key = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter key [2-%s]: &quot;</span> % (<span class=\"hljs-built_in\">len</span>(message) - <span class=\"hljs-number\">1</span>)))\n    mode = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Encryption/Decryption [e/d]: &quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> mode.lower().startswith(<span class=\"hljs-string\">&quot;e&quot;</span>):\n        text = encryptMessage(key, message)\n    <span class=\"hljs-keyword\">elif</span> mode.lower().startswith(<span class=\"hljs-string\">&quot;d&quot;</span>):\n        text = decryptMessage(key, message)\n\n    <span class=\"hljs-comment\"># Append pipe symbol (vertical bar) to identify spaces at the end.</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Output:\\n%s&quot;</span> % (text + <span class=\"hljs-string\">&quot;|&quot;</span>))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encryptMessage</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">int</span>, message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; encryptMessage(6, &#x27;Harshil Darji&#x27;)\n    &#x27;Hlia rDsahrij&#x27;\n    &quot;&quot;&quot;</span>\n    cipherText = [<span class=\"hljs-string\">&quot;&quot;</span>] * key\n    <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(key):\n        pointer = col\n        <span class=\"hljs-keyword\">while</span> pointer &lt; <span class=\"hljs-built_in\">len</span>(message):\n            cipherText[col] += message[pointer]\n            pointer += key\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(cipherText)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decryptMessage</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">int</span>, message: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; decryptMessage(6, &#x27;Hlia rDsahrij&#x27;)\n    &#x27;Harshil Darji&#x27;\n    &quot;&quot;&quot;</span>\n    numCols = math.ceil(<span class=\"hljs-built_in\">len</span>(message) / key)\n    numRows = key\n    numShadedBoxes = (numCols * numRows) - <span class=\"hljs-built_in\">len</span>(message)\n    plainText = [<span class=\"hljs-string\">&quot;&quot;</span>] * numCols\n    col = <span class=\"hljs-number\">0</span>\n    row = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> message:\n        plainText[col] += symbol\n        col += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> (\n            (col == numCols)\n            <span class=\"hljs-keyword\">or</span> (col == numCols - <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">and</span> (row &gt;= numRows - numShadedBoxes)\n        ):\n            col = <span class=\"hljs-number\">0</span>\n            row += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(plainText)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "tania-cmyk",
      "email": "58653046+tania-cmyk@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
