{
  "slug": "longestpalindromicsubsequence",
  "name": "LongestPalindromicSubsequence",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Dynamic-Programming/LongestPalindromicSubsequence.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/LongestPalindromicSubsequence.js",
      "code": "<span class=\"hljs-comment\">/*\n  LeetCode -&gt; https://leetcode.com/problems/longest-palindromic-subsequence/\n\n  Given a string s, find the longest palindromic subsequence&#x27;s length in s.\n  You may assume that the maximum length of s is 1000.\n\n*/</span>\n\n<span class=\"hljs-keyword\">const</span> longestPalindromeSubsequence = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">s</span>) {\n  <span class=\"hljs-keyword\">const</span> n = s.<span class=\"hljs-property\">length</span>\n\n  <span class=\"hljs-keyword\">const</span> dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> <span class=\"hljs-number\">0</span>))\n\n  <span class=\"hljs-comment\">// fill predefined for single character</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n    dp[i][i] = <span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; n - i; j++) {\n      <span class=\"hljs-keyword\">const</span> col = j + i\n      <span class=\"hljs-keyword\">if</span> (s[j] === s[col]) {\n        dp[j][col] = <span class=\"hljs-number\">2</span> + dp[j + <span class=\"hljs-number\">1</span>][col - <span class=\"hljs-number\">1</span>]\n      } <span class=\"hljs-keyword\">else</span> {\n        dp[j][col] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(dp[j][col - <span class=\"hljs-number\">1</span>], dp[j + <span class=\"hljs-number\">1</span>][col])\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">0</span>][n - <span class=\"hljs-number\">1</span>]\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">longestPalindromeSubsequence</span>(<span class=\"hljs-string\">&#x27;bbbab&#x27;</span>)) <span class=\"hljs-comment\">// 4</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">longestPalindromeSubsequence</span>(<span class=\"hljs-string\">&#x27;axbya&#x27;</span>)) <span class=\"hljs-comment\">// 3</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">longestPalindromeSubsequence</span>(<span class=\"hljs-string\">&#x27;racexyzcxar&#x27;</span>)) <span class=\"hljs-comment\">// 7</span>\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming/longest_palindromic_subsequence.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/longest_palindromic_subsequence.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Program to find the Longest Palindormic\r\n * Subsequence of a string\r\n *\r\n * @details\r\n * [Palindrome](https://en.wikipedia.org/wiki/Palindrome) string sequence of\r\n * characters which reads the same backward as forward\r\n * [Subsequence](https://en.wikipedia.org/wiki/Subsequence)  is a sequence that\r\n * can be derived from another sequence by deleting some or no elements without\r\n * changing the order of the remaining elements.\r\n\r\n * @author [Anjali Jha](https://github.com/anjali1903)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function that returns the longest palindromic\r\n * subsequence of a string\r\n */</span>\r\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">lps</span><span class=\"hljs-params\">(std::string a)</span> </span>{\r\n    std::string b = a;\r\n    <span class=\"hljs-built_in\">reverse</span>(b.<span class=\"hljs-built_in\">begin</span>(), b.<span class=\"hljs-built_in\">end</span>());\r\n    <span class=\"hljs-type\">int</span> m = a.<span class=\"hljs-built_in\">length</span>();\r\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt; <span class=\"hljs-built_in\">res</span>(m + <span class=\"hljs-number\">1</span>);\r\n\r\n    <span class=\"hljs-comment\">// Finding the length of the longest</span>\r\n    <span class=\"hljs-comment\">// palindromic subsequence and storing</span>\r\n    <span class=\"hljs-comment\">// in a 2D array in bottoms-up manner</span>\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= m; j++) {\r\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || j == <span class=\"hljs-number\">0</span>) {\r\n                res[i][j] = <span class=\"hljs-number\">0</span>;\r\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (a[i - <span class=\"hljs-number\">1</span>] == b[j - <span class=\"hljs-number\">1</span>]) {\r\n                res[i][j] = res[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\r\n            } <span class=\"hljs-keyword\">else</span> {\r\n                res[i][j] = std::<span class=\"hljs-built_in\">max</span>(res[i - <span class=\"hljs-number\">1</span>][j], res[i][j - <span class=\"hljs-number\">1</span>]);\r\n            }\r\n        }\r\n    }\r\n    <span class=\"hljs-comment\">// Length of longest palindromic subsequence</span>\r\n    <span class=\"hljs-type\">int</span> idx = res[m][m];\r\n    <span class=\"hljs-comment\">// Creating string of index+1 length</span>\r\n    <span class=\"hljs-function\">std::string <span class=\"hljs-title\">ans</span><span class=\"hljs-params\">(idx + <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)</span></span>;\r\n    <span class=\"hljs-type\">int</span> i = m, j = m;\r\n\r\n    <span class=\"hljs-comment\">// starting from right-most bottom-most corner</span>\r\n    <span class=\"hljs-comment\">// and storing them one by one in ans</span>\r\n    <span class=\"hljs-keyword\">while</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; j &gt; <span class=\"hljs-number\">0</span>) {\r\n        <span class=\"hljs-comment\">// if current characters in a and b are same</span>\r\n        <span class=\"hljs-comment\">// then it is a part of the ans</span>\r\n        <span class=\"hljs-keyword\">if</span> (a[i - <span class=\"hljs-number\">1</span>] == b[j - <span class=\"hljs-number\">1</span>]) {\r\n            ans[idx - <span class=\"hljs-number\">1</span>] = a[i - <span class=\"hljs-number\">1</span>];\r\n            i--;\r\n            j--;\r\n            idx--;\r\n        }\r\n        <span class=\"hljs-comment\">// If they are not same, find the larger of the</span>\r\n        <span class=\"hljs-comment\">// two and move in that direction</span>\r\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (res[i - <span class=\"hljs-number\">1</span>][j] &gt; res[i][j - <span class=\"hljs-number\">1</span>]) {\r\n            i--;\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            j--;\r\n        }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> ans;\r\n}\r\n\r\n<span class=\"hljs-comment\">/** Test function */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-comment\">// lps(&quot;radar&quot;) return &quot;radar&quot;</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">lps</span>(<span class=\"hljs-string\">&quot;radar&quot;</span>) == <span class=\"hljs-string\">&quot;radar&quot;</span>);\r\n    <span class=\"hljs-comment\">// lps(&quot;abbcbaa&quot;) return &quot;abcba&quot;</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">lps</span>(<span class=\"hljs-string\">&quot;abbcbaa&quot;</span>) == <span class=\"hljs-string\">&quot;abcba&quot;</span>);\r\n    <span class=\"hljs-comment\">// lps(&quot;bbbab&quot;) return &quot;bbbb&quot;</span>\r\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">lps</span>(<span class=\"hljs-string\">&quot;bbbab&quot;</span>) == <span class=\"hljs-string\">&quot;bbbb&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Main Function\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the tests</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "java": {
      "dir": "DynamicProgramming/LongestPalindromicSubsequence.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/LongestPalindromicSubsequence.java",
      "code": "<span class=\"hljs-keyword\">package</span> test;\n\n<span class=\"hljs-keyword\">import</span> java.io.*;\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-comment\">/**\n * Algorithm explanation https://www.educative.io/edpresso/longest-palindromic-subsequence-algorithm\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LongestPalindromicSubsequence</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;BBABCBCAB&quot;</span>;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;BABCBAB&quot;</span>;\n\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">aLPS</span> <span class=\"hljs-operator\">=</span> LPS(a);\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bLPS</span> <span class=\"hljs-operator\">=</span> LPS(b);\n\n    System.out.println(a + <span class=\"hljs-string\">&quot; =&gt; &quot;</span> + aLPS);\n    System.out.println(b + <span class=\"hljs-string\">&quot; =&gt; &quot;</span> + bLPS);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">LPS</span><span class=\"hljs-params\">(String original)</span> <span class=\"hljs-keyword\">throws</span> IllegalArgumentException {\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">reverse</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(original);\n    reverse = reverse.reverse();\n    <span class=\"hljs-keyword\">return</span> recursiveLPS(original, reverse.toString());\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">recursiveLPS</span><span class=\"hljs-params\">(String original, String reverse)</span> {\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bestResult</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n\n    <span class=\"hljs-comment\">// no more chars, then return empty</span>\n    <span class=\"hljs-keyword\">if</span> (original.length() == <span class=\"hljs-number\">0</span> || reverse.length() == <span class=\"hljs-number\">0</span>) {\n      bestResult = <span class=\"hljs-string\">&quot;&quot;</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n\n      <span class=\"hljs-comment\">// if the last chars match, then remove it from both strings and recur</span>\n      <span class=\"hljs-keyword\">if</span> (original.charAt(original.length() - <span class=\"hljs-number\">1</span>) == reverse.charAt(reverse.length() - <span class=\"hljs-number\">1</span>)) {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bestSubResult</span> <span class=\"hljs-operator\">=</span>\n            recursiveLPS(\n                original.substring(<span class=\"hljs-number\">0</span>, original.length() - <span class=\"hljs-number\">1</span>),\n                reverse.substring(<span class=\"hljs-number\">0</span>, reverse.length() - <span class=\"hljs-number\">1</span>));\n\n        bestResult = reverse.charAt(reverse.length() - <span class=\"hljs-number\">1</span>) + bestSubResult;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// otherwise (1) ignore the last character of reverse, and recur on original and updated</span>\n        <span class=\"hljs-comment\">// reverse again</span>\n        <span class=\"hljs-comment\">// (2) ignore the last character of original and recur on the updated original and reverse</span>\n        <span class=\"hljs-comment\">// again</span>\n        <span class=\"hljs-comment\">// then select the best result from these two subproblems.</span>\n\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bestSubResult1</span> <span class=\"hljs-operator\">=</span> recursiveLPS(original, reverse.substring(<span class=\"hljs-number\">0</span>, reverse.length() - <span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bestSubResult2</span> <span class=\"hljs-operator\">=</span> recursiveLPS(original.substring(<span class=\"hljs-number\">0</span>, original.length() - <span class=\"hljs-number\">1</span>), reverse);\n        <span class=\"hljs-keyword\">if</span> (bestSubResult1.length() &gt; bestSubResult2.length()) {\n          bestResult = bestSubResult1;\n        } <span class=\"hljs-keyword\">else</span> {\n          bestResult = bestSubResult2;\n        }\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> bestResult;\n  }\n}\n"
    },
    "go": {
      "dir": "dynamicprogramming/longest-palindromic-subsequence.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamicprogramming/longest-palindromic-subsequence.go",
      "code": "<span class=\"hljs-comment\">// longest palindromic subsequence</span>\n<span class=\"hljs-comment\">// http://www.geeksforgeeks.org/dynamic-programming-set-12-longest-palindromic-subsequence/</span>\n\n<span class=\"hljs-keyword\">package</span> dynamicprogramming\n\n<span class=\"hljs-comment\">// LpsRec function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LpsRec</span><span class=\"hljs-params\">(word <span class=\"hljs-keyword\">string</span>, i, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">if</span> i == j {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\t}\n\t<span class=\"hljs-keyword\">if</span> i &gt; j {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\t}\n\t<span class=\"hljs-keyword\">if</span> word[i] == word[j] {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> + LpsRec(word, i+<span class=\"hljs-number\">1</span>, j<span class=\"hljs-number\">-1</span>)\n\t}\n\t<span class=\"hljs-keyword\">return</span> Max(LpsRec(word, i, j<span class=\"hljs-number\">-1</span>), LpsRec(word, i+<span class=\"hljs-number\">1</span>, j))\n}\n\n<span class=\"hljs-comment\">// LpsDp function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">LpsDp</span><span class=\"hljs-params\">(word <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\tN := <span class=\"hljs-built_in\">len</span>(word)\n\tdp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-keyword\">int</span>, N)\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; N; i++ {\n\t\tdp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, N)\n\t\tdp[i][i] = <span class=\"hljs-number\">1</span>\n\t}\n\n\t<span class=\"hljs-keyword\">for</span> l := <span class=\"hljs-number\">2</span>; l &lt;= N; l++ {\n\t\t<span class=\"hljs-comment\">// for length l</span>\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; N-l+<span class=\"hljs-number\">1</span>; i++ {\n\t\t\tj := i + l - <span class=\"hljs-number\">1</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> word[i] == word[j] {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> l == <span class=\"hljs-number\">2</span> {\n\t\t\t\t\tdp[i][j] = <span class=\"hljs-number\">2</span>\n\t\t\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\tdp[i][j] = <span class=\"hljs-number\">2</span> + dp[i+<span class=\"hljs-number\">1</span>][j<span class=\"hljs-number\">-1</span>]\n\t\t\t\t}\n\t\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t\tdp[i][j] = Max(dp[i+<span class=\"hljs-number\">1</span>][j], dp[i][j<span class=\"hljs-number\">-1</span>])\n\t\t\t}\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">1</span>][N<span class=\"hljs-number\">-1</span>]\n}\n\n<span class=\"hljs-comment\">/*\nfunc main() {\n\t// word := &quot;aaabbbbababbabbabbabf&quot;\n\tword := &quot;aaaabbbba&quot;\n\tfmt.Printf(&quot;%d\\n&quot;, lpsRec(word, 0, len(word)-1))\n\tfmt.Printf(&quot;%d\\n&quot;, lpsDp(word))\n}\n*/</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Himanshu Shekhar",
      "email": "himanshushekharb16@gmail.com",
      "commits": 1
    },
    {
      "name": "Suhail Malik",
      "email": "devmsuhail@gmail.com",
      "commits": 2
    },
    {
      "name": "anjali1903",
      "email": "anjali.jha1903@gmail.com",
      "commits": 2
    },
    {
      "name": "mmessmer",
      "email": "mmessmer@unibz.it",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
