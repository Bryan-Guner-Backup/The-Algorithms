{
  "slug": "strongly-connected-components",
  "name": "Strongly Connected Components",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/strongly_connected_components.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/strongly_connected_components.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://en.wikipedia.org/wiki/Strongly_connected_component\n\nFinding strongly connected components in directed graph\n\n&quot;&quot;&quot;</span>\n\ntest_graph_1 = {<span class=\"hljs-number\">0</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">4</span>: []}\n\ntest_graph_2 = {<span class=\"hljs-number\">0</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">4</span>: [<span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">5</span>: [<span class=\"hljs-number\">3</span>]}\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">topology_sort</span>(<span class=\"hljs-params\">\n    graph: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], vert: <span class=\"hljs-built_in\">int</span>, visited: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">bool</span>]\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Use depth first search to sort graph\n    At this time graph is the same as input\n    &gt;&gt;&gt; topology_sort(test_graph_1, 0, 5 * [False])\n    [1, 2, 4, 3, 0]\n    &gt;&gt;&gt; topology_sort(test_graph_2, 0, 6 * [False])\n    [2, 1, 5, 4, 3, 0]\n    &quot;&quot;&quot;</span>\n\n    visited[vert] = <span class=\"hljs-literal\">True</span>\n    order = []\n\n    <span class=\"hljs-keyword\">for</span> neighbour <span class=\"hljs-keyword\">in</span> graph[vert]:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[neighbour]:\n            order += topology_sort(graph, neighbour, visited)\n\n    order.append(vert)\n\n    <span class=\"hljs-keyword\">return</span> order\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_components</span>(<span class=\"hljs-params\">\n    reversed_graph: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], vert: <span class=\"hljs-built_in\">int</span>, visited: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">bool</span>]\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Use depth first search to find strongliy connected\n    vertices. Now graph is reversed\n    &gt;&gt;&gt; find_components({0: [1], 1: [2], 2: [0]}, 0, 5 * [False])\n    [0, 1, 2]\n    &gt;&gt;&gt; find_components({0: [2], 1: [0], 2: [0, 1]}, 0, 6 * [False])\n    [0, 2, 1]\n    &quot;&quot;&quot;</span>\n\n    visited[vert] = <span class=\"hljs-literal\">True</span>\n    component = [vert]\n\n    <span class=\"hljs-keyword\">for</span> neighbour <span class=\"hljs-keyword\">in</span> reversed_graph[vert]:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[neighbour]:\n            component += find_components(reversed_graph, neighbour, visited)\n\n    <span class=\"hljs-keyword\">return</span> component\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">strongly_connected_components</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This function takes graph as a parameter\n    and then returns the list of strongly connected components\n    &gt;&gt;&gt; strongly_connected_components(test_graph_1)\n    [[0, 1, 2], [3], [4]]\n    &gt;&gt;&gt; strongly_connected_components(test_graph_2)\n    [[0, 2, 1], [3, 5, 4]]\n    &quot;&quot;&quot;</span>\n\n    visited = <span class=\"hljs-built_in\">len</span>(graph) * [<span class=\"hljs-literal\">False</span>]\n    reversed_graph: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]] = {vert: [] <span class=\"hljs-keyword\">for</span> vert <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(graph))}\n\n    <span class=\"hljs-keyword\">for</span> vert, neighbours <span class=\"hljs-keyword\">in</span> graph.items():\n        <span class=\"hljs-keyword\">for</span> neighbour <span class=\"hljs-keyword\">in</span> neighbours:\n            reversed_graph[neighbour].append(vert)\n\n    order = []\n    <span class=\"hljs-keyword\">for</span> i, was_visited <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(visited):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> was_visited:\n            order += topology_sort(graph, i, visited)\n\n    components_list = []\n    visited = <span class=\"hljs-built_in\">len</span>(graph) * [<span class=\"hljs-literal\">False</span>]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(graph)):\n        vert = order[<span class=\"hljs-built_in\">len</span>(graph) - i - <span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[vert]:\n            component = find_components(reversed_graph, vert, visited)\n            components_list.append(component)\n\n    <span class=\"hljs-keyword\">return</span> components_list\n"
    },
    "c": {
      "dir": "data_structures/graphs/strongly_connected_components.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/graphs/strongly_connected_components.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_SIZE 40  <span class=\"hljs-comment\">// Assume 40 nodes at max in graph</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INT_MIN 0</span>\n<span class=\"hljs-comment\">// A vertex of the graph</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> vertex;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\n};\n<span class=\"hljs-comment\">// Some declarations</span>\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span>\n{</span>\n    <span class=\"hljs-type\">int</span> numVertices;\n    <span class=\"hljs-type\">int</span> *visited;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *\n        *<span class=\"hljs-title\">adjLists</span>;</span>  <span class=\"hljs-comment\">// we need int** to store a two dimensional array. Similary,</span>\n                    <span class=\"hljs-comment\">// we need struct node** to store an array of Linked lists</span>\n};\n<span class=\"hljs-comment\">// Structure to create a stack, necessary for topological sorting</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span>\n{</span>\n    <span class=\"hljs-type\">int</span> arr[MAX_SIZE];\n    <span class=\"hljs-type\">int</span> top;\n};\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *)</span>;\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">transpose</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fillOrder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-keyword\">struct</span> Graph *, <span class=\"hljs-keyword\">struct</span> Stack *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">scc</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *, <span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-title function_\">createStack</span><span class=\"hljs-params\">()</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *, <span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *)</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> vertices, edges, i, src, dst;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;vertices);\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> createGraph(vertices);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of edges\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;edges);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; edges; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Edge %d \\nEnter source: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination: &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dst);\n        addEdge(graph, src, dst);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The strongly connected conponents are:\\n&quot;</span>);\n    scc(graph);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">// Uncomment below part to get a ready-made example</span>\n    <span class=\"hljs-comment\">/*struct Graph* graph2 = createGraph(4);\n    addEdge(graph2, 0, 1);\n    addEdge(graph2, 1, 2);\n    addEdge(graph2, 2, 0);\n    addEdge(graph2, 2, 3);\n    printf(&quot;The strongly connected components are:\\n&quot;);\n    scc(graph2);\n    printf(&quot;\\n&quot;);*/</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-comment\">// Creates a topological sorting of the graph</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">fillOrder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertex, <span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-built_in\">stack</span>)</span>\n{\n    graph-&gt;visited[vertex] = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">adjList</span> =</span> graph-&gt;adjLists[vertex];\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> adjList;\n    <span class=\"hljs-comment\">// First add all dependents (that is, children) to stack</span>\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-type\">int</span> connectedVertex = temp-&gt;vertex;\n        <span class=\"hljs-keyword\">if</span> (graph-&gt;visited[connectedVertex] == <span class=\"hljs-number\">0</span>)\n        {\n            fillOrder(connectedVertex, graph, <span class=\"hljs-built_in\">stack</span>);\n        }\n        temp = temp-&gt;next;\n    }\n    <span class=\"hljs-comment\">// and then add itself</span>\n    push(<span class=\"hljs-built_in\">stack</span>, vertex);\n}\n<span class=\"hljs-comment\">// Transpose the adjacency list</span>\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">transpose</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *g)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span>\n        createGraph(g-&gt;numVertices);  <span class=\"hljs-comment\">// Number of vertices is same</span>\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; g-&gt;numVertices; i++)\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> g-&gt;adjLists[i];\n        <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n        {\n            addEdge(graph, temp-&gt;vertex, i);  <span class=\"hljs-comment\">// Reverse all edges</span>\n            temp = temp-&gt;next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> graph;\n}\n<span class=\"hljs-comment\">// Recursive dfs aproach</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> vertex)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">adjList</span> =</span> graph-&gt;adjLists[vertex];\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> adjList;\n\n    <span class=\"hljs-comment\">// Add vertex to visited list and print it</span>\n    graph-&gt;visited[vertex] = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, vertex);\n\n    <span class=\"hljs-comment\">// Recursively call the dfs function on all unvisited neighbours</span>\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-type\">int</span> connectedVertex = temp-&gt;vertex;\n        <span class=\"hljs-keyword\">if</span> (graph-&gt;visited[connectedVertex] == <span class=\"hljs-number\">0</span>)\n        {\n            dfs(graph, connectedVertex);\n        }\n        temp = temp-&gt;next;\n    }\n}\n\n<span class=\"hljs-comment\">// Strongly connected components</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">scc</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph)</span>\n{\n    <span class=\"hljs-comment\">// Step I: Create a topological sort of the graph and store it in a stack</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> *<span class=\"hljs-title\">stack</span> =</span> createStack();\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; graph-&gt;numVertices; i++)\n    {\n        <span class=\"hljs-comment\">// Execute topological sort on all elements</span>\n        <span class=\"hljs-keyword\">if</span> (graph-&gt;visited[i] == <span class=\"hljs-number\">0</span>)\n        {\n            fillOrder(i, graph, <span class=\"hljs-built_in\">stack</span>);\n        }\n    }\n    <span class=\"hljs-comment\">// Step 2: Get the transpose graph</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graphT</span> =</span> transpose(graph);\n    <span class=\"hljs-comment\">// Step 3: Perform a simple dfs by popping nodes from stack</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">stack</span>-&gt;top != <span class=\"hljs-number\">-1</span>)\n    {\n        <span class=\"hljs-type\">int</span> v = pop(<span class=\"hljs-built_in\">stack</span>);\n        <span class=\"hljs-keyword\">if</span> (graphT-&gt;visited[v] == <span class=\"hljs-number\">0</span>)\n        {\n            dfs(graphT, v);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// Allocate memory for a node</span>\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    newNode-&gt;vertex = v;\n    newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> newNode;\n}\n<span class=\"hljs-comment\">// Allocate memory for the entire graph structure</span>\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertices)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Graph));\n    graph-&gt;numVertices = vertices;\n    graph-&gt;adjLists = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node *));\n    graph-&gt;visited = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; vertices; i++)\n    {\n        graph-&gt;adjLists[i] = <span class=\"hljs-literal\">NULL</span>;\n        graph-&gt;visited[i] = <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> graph;\n}\n<span class=\"hljs-comment\">// Creates a unidirectional graph</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dest)</span>\n{\n    <span class=\"hljs-comment\">// Add edge from src to dest</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> createNode(dest);\n    newNode-&gt;next = graph-&gt;adjLists[src];\n    graph-&gt;adjLists[src] = newNode;\n}\n<span class=\"hljs-comment\">// Utility function to see state of graph at a given time</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph)</span>\n{\n    <span class=\"hljs-type\">int</span> v;\n    <span class=\"hljs-keyword\">for</span> (v = <span class=\"hljs-number\">0</span>; v &lt; graph-&gt;numVertices; v++)\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> graph-&gt;adjLists[v];\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n Adjacency list of vertex %d\\n &quot;</span>, v);\n        <span class=\"hljs-keyword\">while</span> (temp)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d -&gt; &quot;</span>, temp-&gt;vertex);\n            temp = temp-&gt;next;\n        }\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    }\n}\n<span class=\"hljs-comment\">// Creates a stack</span>\n<span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-title function_\">createStack</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> *<span class=\"hljs-title\">stack</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Stack));\n    <span class=\"hljs-built_in\">stack</span>-&gt;top = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stack</span>;\n}\n<span class=\"hljs-comment\">// Pushes element into stack</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-built_in\">stack</span>, <span class=\"hljs-type\">int</span> element)</span>\n{\n    <span class=\"hljs-built_in\">stack</span>-&gt;arr[++<span class=\"hljs-built_in\">stack</span>-&gt;top] =\n        element;  <span class=\"hljs-comment\">// Increment then add, as we start from -1</span>\n}\n<span class=\"hljs-comment\">// Removes element from stack, or returns INT_MIN if stack empty</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-built_in\">stack</span>)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">stack</span>-&gt;top == <span class=\"hljs-number\">-1</span>)\n        <span class=\"hljs-keyword\">return</span> INT_MIN;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stack</span>-&gt;arr[<span class=\"hljs-built_in\">stack</span>-&gt;top--];\n}\n"
    }
  },
  "contributors": [
    {
      "name": "PalAditya",
      "email": "adityapal.nghss@gmail.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "ttuanho",
      "email": "hhoanhtuann@gmail.com",
      "commits": 1
    },
    {
      "name": "Nika Losaberidze",
      "email": "nlosa16@freeuni.edu.ge",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
