{
  "slug": "area",
  "name": "Area",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/area.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/area.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nFind the area of various geometric shapes\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> pi, sqrt\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_cube</span>(<span class=\"hljs-params\">side_length: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Cube.\r\n\r\n    &gt;&gt;&gt; surface_area_cube(1)\r\n    6\r\n    &gt;&gt;&gt; surface_area_cube(3)\r\n    54\r\n    &gt;&gt;&gt; surface_area_cube(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_cube() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side_length &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_cube() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * side_length ** <span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">surface_area_sphere</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the Surface Area of a Sphere.\r\n    Wikipedia reference: https://en.wikipedia.org/wiki/Sphere\r\n    Formula: 4 * pi * r^2\r\n\r\n    &gt;&gt;&gt; surface_area_sphere(5)\r\n    314.1592653589793\r\n    &gt;&gt;&gt; surface_area_sphere(1)\r\n    12.566370614359172\r\n    &gt;&gt;&gt; surface_area_sphere(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: surface_area_sphere() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;surface_area_sphere() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * pi * radius ** <span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_rectangle</span>(<span class=\"hljs-params\">length: <span class=\"hljs-built_in\">float</span>, width: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a rectangle.\r\n\r\n    &gt;&gt;&gt; area_rectangle(10, 20)\r\n    200\r\n    &gt;&gt;&gt; area_rectangle(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rectangle(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rectangle(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rectangle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> length &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> width &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_rectangle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> length * width\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_square</span>(<span class=\"hljs-params\">side_length: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a square.\r\n\r\n    &gt;&gt;&gt; area_square(10)\r\n    100\r\n    &gt;&gt;&gt; area_square(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_square() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side_length &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_square() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> side_length ** <span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_triangle</span>(<span class=\"hljs-params\">base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a triangle given the base and height.\r\n\r\n    &gt;&gt;&gt; area_triangle(10, 10)\r\n    50.0\r\n    &gt;&gt;&gt; area_triangle(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_triangle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> (base * height) / <span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_triangle_three_sides</span>(<span class=\"hljs-params\">side1: <span class=\"hljs-built_in\">float</span>, side2: <span class=\"hljs-built_in\">float</span>, side3: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate area of triangle when the length of 3 sides are known.\r\n\r\n    This function uses Heron&#x27;s formula: https://en.wikipedia.org/wiki/Heron%27s_formula\r\n\r\n    &gt;&gt;&gt; area_triangle_three_sides(5, 12, 13)\r\n    30.0\r\n    &gt;&gt;&gt; area_triangle_three_sides(10, 11, 12)\r\n    51.521233486786784\r\n    &gt;&gt;&gt; area_triangle_three_sides(-1, -2, -1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle_three_sides() only accepts non-negative values\r\n    &gt;&gt;&gt; area_triangle_three_sides(1, -2, 1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_triangle_three_sides() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> side1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> side2 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> side3 &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_triangle_three_sides() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">elif</span> side1 + side2 &lt; side3 <span class=\"hljs-keyword\">or</span> side1 + side3 &lt; side2 <span class=\"hljs-keyword\">or</span> side2 + side3 &lt; side1:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Given three sides do not form a triangle&quot;</span>)\r\n    semi_perimeter = (side1 + side2 + side3) / <span class=\"hljs-number\">2</span>\r\n    area = sqrt(\r\n        semi_perimeter\r\n        * (semi_perimeter - side1)\r\n        * (semi_perimeter - side2)\r\n        * (semi_perimeter - side3)\r\n    )\r\n    <span class=\"hljs-keyword\">return</span> area\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_parallelogram</span>(<span class=\"hljs-params\">base: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a parallelogram.\r\n\r\n    &gt;&gt;&gt; area_parallelogram(10, 20)\r\n    200\r\n    &gt;&gt;&gt; area_parallelogram(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &gt;&gt;&gt; area_parallelogram(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &gt;&gt;&gt; area_parallelogram(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_parallelogram() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_parallelogram() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> base * height\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_trapezium</span>(<span class=\"hljs-params\">base1: <span class=\"hljs-built_in\">float</span>, base2: <span class=\"hljs-built_in\">float</span>, height: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a trapezium.\r\n\r\n    &gt;&gt;&gt; area_trapezium(10, 20, 30)\r\n    450.0\r\n    &gt;&gt;&gt; area_trapezium(-1, -2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, 2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, -2, 3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(1, -2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &gt;&gt;&gt; area_trapezium(-1, 2, -3)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_trapezium() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> base1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> base2 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> height &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_trapezium() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * (base1 + base2) * height\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_circle</span>(<span class=\"hljs-params\">radius: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a circle.\r\n\r\n    &gt;&gt;&gt; area_circle(20)\r\n    1256.6370614359173\r\n    &gt;&gt;&gt; area_circle(-1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_circle() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_circle() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> pi * radius ** <span class=\"hljs-number\">2</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_ellipse</span>(<span class=\"hljs-params\">radius_x: <span class=\"hljs-built_in\">float</span>, radius_y: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a ellipse.\r\n\r\n    &gt;&gt;&gt; area_ellipse(10, 10)\r\n    314.1592653589793\r\n    &gt;&gt;&gt; area_ellipse(10, 20)\r\n    628.3185307179587\r\n    &gt;&gt;&gt; area_ellipse(-10, 20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &gt;&gt;&gt; area_ellipse(10, -20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &gt;&gt;&gt; area_ellipse(-10, -20)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_ellipse() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> radius_x &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> radius_y &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_ellipse() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> pi * radius_x * radius_y\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_rhombus</span>(<span class=\"hljs-params\">diagonal_1: <span class=\"hljs-built_in\">float</span>, diagonal_2: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the area of a rhombus.\r\n\r\n    &gt;&gt;&gt; area_rhombus(10, 20)\r\n    100.0\r\n    &gt;&gt;&gt; area_rhombus(-1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rhombus(1, -2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &gt;&gt;&gt; area_rhombus(-1, 2)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: area_rhombus() only accepts non-negative values\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> diagonal_1 &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> diagonal_2 &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;area_rhombus() only accepts non-negative values&quot;</span>)\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * diagonal_1 * diagonal_2\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod(verbose=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\"># verbose so we can see methods missing tests</span>\r\n\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;[DEMO] Areas of various geometric shapes: \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Rectangle: <span class=\"hljs-subst\">{area_rectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Square: <span class=\"hljs-subst\">{area_square(<span class=\"hljs-number\">10</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Triangle: <span class=\"hljs-subst\">{area_triangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Triangle: <span class=\"hljs-subst\">{area_triangle_three_sides(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Parallelogram: <span class=\"hljs-subst\">{area_parallelogram(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Trapezium: <span class=\"hljs-subst\">{area_trapezium(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Circle: <span class=\"hljs-subst\">{area_circle(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nSurface Areas of various geometric shapes: \\n&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Cube: <span class=\"hljs-subst\">{surface_area_cube(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Sphere: <span class=\"hljs-subst\">{surface_area_sphere(<span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Rhombus: <span class=\"hljs-subst\">{area_rhombus(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>) = }</span>&quot;</span>)\r\n"
    },
    "javascript": {
      "dir": "Maths/Area.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/Area.js",
      "code": "<span class=\"hljs-comment\">/*\n  Calculate the area of various shapes\n\n  Calculate the Surface Area of a Cube.\n  Example: surfaceAreaCube(1) will return 6\n  More about: https://en.wikipedia.org/wiki/Area#Surface_area\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">surfaceAreaCube</span> = (<span class=\"hljs-params\">sideLength</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(sideLength, <span class=\"hljs-string\">&#x27;sideLength&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">6.0</span> * sideLength ** <span class=\"hljs-number\">2.0</span>)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the Surface Area of a Sphere.\n  Wikipedia reference: https://en.wikipedia.org/wiki/Sphere\n  return 4 * pi * r^2\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">surfaceAreaSphere</span> = (<span class=\"hljs-params\">radius</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(radius, <span class=\"hljs-string\">&#x27;radius&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">4.0</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * radius ** <span class=\"hljs-number\">2.0</span>)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the area of a rectangle\n  Wikipedia reference: https://en.wikipedia.org/wiki/Area#Quadrilateral_area\n  return width * length\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaRectangle</span> = (<span class=\"hljs-params\">length, width</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(length, <span class=\"hljs-string\">&#x27;Length&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(width, <span class=\"hljs-string\">&#x27;Width&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (width * length)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the area of a square\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaSquare</span> = (<span class=\"hljs-params\">sideLength</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(sideLength, <span class=\"hljs-string\">&#x27;side length&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (sideLength ** <span class=\"hljs-number\">2</span>)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the area of a triangle\n  Wikipedia reference: https://en.wikipedia.org/wiki/Area#Triangle_area\n  return base * height / 2\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaTriangle</span> = (<span class=\"hljs-params\">base, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(base, <span class=\"hljs-string\">&#x27;Base&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (base * height) / <span class=\"hljs-number\">2.0</span>\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the area of a parallelogram\n  Wikipedia reference: https://en.wikipedia.org/wiki/Area#Dissection,_parallelograms,_and_triangles\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaParallelogram</span> = (<span class=\"hljs-params\">base, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(base, <span class=\"hljs-string\">&#x27;Base&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (base * height)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the area of a trapezium\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaTrapezium</span> = (<span class=\"hljs-params\">base1, base2, height</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(base1, <span class=\"hljs-string\">&#x27;Base One&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(base2, <span class=\"hljs-string\">&#x27;Base Two&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(height, <span class=\"hljs-string\">&#x27;Height&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1.0</span> / <span class=\"hljs-number\">2.0</span> * (base1 + base2) * height\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the area of a circle\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaCircle</span> = (<span class=\"hljs-params\">radius</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(radius, <span class=\"hljs-string\">&#x27;Radius&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-property\">PI</span> * radius ** <span class=\"hljs-number\">2</span>)\n}\n\n<span class=\"hljs-comment\">/*\n  Calculate the area of a rhombus\n  Wikipedia reference: https://en.wikipedia.org/wiki/Rhombus\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">areaRhombus</span> = (<span class=\"hljs-params\">diagonal1, diagonal2</span>) =&gt; {\n  <span class=\"hljs-title function_\">validateNumericParam</span>(diagonal1, <span class=\"hljs-string\">&#x27;diagonal one&#x27;</span>)\n  <span class=\"hljs-title function_\">validateNumericParam</span>(diagonal2, <span class=\"hljs-string\">&#x27;diagonal two&#x27;</span>)\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * diagonal1 * diagonal2)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">validateNumericParam</span> = (<span class=\"hljs-params\">param, paramName = <span class=\"hljs-string\">&#x27;param&#x27;</span></span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> param !== <span class=\"hljs-string\">&#x27;number&#x27;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;The &#x27;</span> + paramName + <span class=\"hljs-string\">&#x27; should be type Number&#x27;</span>)\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (param &lt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;The &#x27;</span> + paramName + <span class=\"hljs-string\">&#x27; only accepts non-negative values&#x27;</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> { surfaceAreaCube, surfaceAreaSphere, areaRectangle, areaSquare, areaTriangle, areaParallelogram, areaTrapezium, areaCircle, areaRhombus }\n"
    },
    "java": {
      "dir": "Maths/Area.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/Area.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-comment\">/** Find the area of various geometric shapes */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Area</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    <span class=\"hljs-comment\">/* test cube */</span>\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCube(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">6.0</span>) == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* test sphere */</span>\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSphere(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">314.1592653589793</span>) == <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSphere(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">12.566370614359172</span>) == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* test rectangle */</span>\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaRectangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">200.0</span>) == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* test square */</span>\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaSquare(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">100.0</span>) == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* test triangle */</span>\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaTriangle(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">50.0</span>) == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* test parallelogram */</span>\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaParallelogram(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">200.0</span>) == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* test trapezium */</span>\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaTrapezium(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>), <span class=\"hljs-number\">450.0</span>) == <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* test circle */</span>\n    <span class=\"hljs-keyword\">assert</span> Double.compare(surfaceAreaCircle(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">1256.6370614359173</span>) == <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the surface area of a cube.\n   *\n   * <span class=\"hljs-doctag\">@param</span> sideLength side length of cube\n   * <span class=\"hljs-doctag\">@return</span> surface area of given cube\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCube</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sideLength)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span> * sideLength * sideLength;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the surface area of a sphere.\n   *\n   * <span class=\"hljs-doctag\">@param</span> radius radius of sphere\n   * <span class=\"hljs-doctag\">@return</span> surface area of given sphere\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaSphere</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * Math.PI * radius * radius;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the area of a rectangle\n   *\n   * <span class=\"hljs-doctag\">@param</span> length length of rectangle\n   * <span class=\"hljs-doctag\">@param</span> width width of rectangle\n   * <span class=\"hljs-doctag\">@return</span> area of given rectangle\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaRectangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> length, <span class=\"hljs-type\">double</span> width)</span> {\n    <span class=\"hljs-keyword\">return</span> length * width;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the area of a square\n   *\n   * <span class=\"hljs-doctag\">@param</span> sideLength side length of square\n   * <span class=\"hljs-doctag\">@return</span> area of given square\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaSquare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> sideLength)</span> {\n    <span class=\"hljs-keyword\">return</span> sideLength * sideLength;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the area of a triangle\n   *\n   * <span class=\"hljs-doctag\">@param</span> base base of triangle\n   * <span class=\"hljs-doctag\">@param</span> height height of triangle\n   * <span class=\"hljs-doctag\">@return</span> area of given triangle\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaTriangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base, <span class=\"hljs-type\">double</span> height)</span> {\n    <span class=\"hljs-keyword\">return</span> base * height / <span class=\"hljs-number\">2</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the area of a parallelogram\n   *\n   * <span class=\"hljs-doctag\">@param</span> base base of parallelogram\n   * <span class=\"hljs-doctag\">@param</span> height height of parallelogram\n   * <span class=\"hljs-doctag\">@return</span> area of given parallelogram\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaParallelogram</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base, <span class=\"hljs-type\">double</span> height)</span> {\n    <span class=\"hljs-keyword\">return</span> base * height;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the area of a trapezium\n   *\n   * <span class=\"hljs-doctag\">@param</span> base1 upper base of trapezium\n   * <span class=\"hljs-doctag\">@param</span> base2 bottom base of trapezium\n   * <span class=\"hljs-doctag\">@param</span> height height of trapezium\n   * <span class=\"hljs-doctag\">@return</span> area of given trapezium\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaTrapezium</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> base1, <span class=\"hljs-type\">double</span> base2, <span class=\"hljs-type\">double</span> height)</span> {\n    <span class=\"hljs-keyword\">return</span> (base1 + base2) * height / <span class=\"hljs-number\">2</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the area of a circle\n   *\n   * <span class=\"hljs-doctag\">@param</span> radius radius of circle\n   * <span class=\"hljs-doctag\">@return</span> area of given circle\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">surfaceAreaCircle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> radius)</span> {\n    <span class=\"hljs-keyword\">return</span> Math.PI * radius * radius;\n  }\n}\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/math/Area.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/math/Area.kt",
      "code": "<span class=\"hljs-keyword\">package</span> math\n\n<span class=\"hljs-keyword\">import</span> java.lang.IllegalArgumentException\n<span class=\"hljs-keyword\">import</span> kotlin.math.pow\n\n<span class=\"hljs-comment\">/**\n * Calculate the area of a rectangle\n *\n * <span class=\"hljs-doctag\">@param</span> length length of rectangle\n * <span class=\"hljs-doctag\">@param</span> width width of rectangle\n * <span class=\"hljs-doctag\">@return</span> area of given rectangle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfARectangle</span><span class=\"hljs-params\">(length: <span class=\"hljs-type\">Double</span>, width: <span class=\"hljs-type\">Double</span>)</span></span> =  <span class=\"hljs-keyword\">when</span> {\n    length &gt; <span class=\"hljs-number\">0</span> &amp;&amp; width &gt; <span class=\"hljs-number\">0</span> -&gt; length * width\n    <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Length and Width must be positive&quot;</span>)\n}\n\n<span class=\"hljs-comment\">/**\n * Calculate the area of a square\n *\n * <span class=\"hljs-doctag\">@param</span> sideLength side length of square\n * <span class=\"hljs-doctag\">@return</span> area of given square\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfASquare</span><span class=\"hljs-params\">(sideLength: <span class=\"hljs-type\">Double</span>)</span></span> =\n    <span class=\"hljs-keyword\">when</span> {\n        sideLength &gt; <span class=\"hljs-number\">0</span> -&gt; sideLength * sideLength\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Side Length must be positive&quot;</span>)\n    }\n\n<span class=\"hljs-comment\">/**\n * Calculate the area of a triangle\n *\n * <span class=\"hljs-doctag\">@param</span> base base of triangle\n * <span class=\"hljs-doctag\">@param</span> height height of triangle\n * <span class=\"hljs-doctag\">@return</span> area of given triangle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfATriangle</span><span class=\"hljs-params\">(base: <span class=\"hljs-type\">Double</span>, height: <span class=\"hljs-type\">Double</span>)</span></span> =\n    <span class=\"hljs-keyword\">when</span> {\n        base &gt; <span class=\"hljs-number\">0</span> &amp;&amp; height &gt; <span class=\"hljs-number\">0</span> -&gt; base * height / <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Base and Height must be positive&quot;</span>)\n    }\n\n<span class=\"hljs-comment\">/**\n * Calculate the area of a circle\n *\n * <span class=\"hljs-doctag\">@param</span> radius radius of circle\n * <span class=\"hljs-doctag\">@return</span> area of given circle\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">areaOfACircle</span><span class=\"hljs-params\">(radius: <span class=\"hljs-type\">Double</span>)</span></span> =\n    <span class=\"hljs-keyword\">when</span> {\n        radius &gt; <span class=\"hljs-number\">0</span> -&gt; Math.PI * radius.pow(<span class=\"hljs-number\">2.0</span>)\n        <span class=\"hljs-keyword\">else</span> -&gt; <span class=\"hljs-keyword\">throw</span> IllegalArgumentException(<span class=\"hljs-string\">&quot;Radius must be positive&quot;</span>)\n    }"
    },
    "julia": {
      "dir": "src/math/area.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/area.jl",
      "code": "<span class=\"hljs-comment\"># Functions for area of various geometric shapes</span>\n<span class=\"hljs-comment\"># Contributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee)</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    surfarea_cube(side)\n\nFinds surface area of a cube\n\n# Example\n\n```julia\nsurfarea_cube(1)  # returns 6\nsurfarea_cube(3)  # returns 54\nsurfarea_cube(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> surfarea_cube(side)\n    <span class=\"hljs-keyword\">if</span> side &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(side, <span class=\"hljs-string\">&quot;surfarea_cube() only works for non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span>(side^<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    surfarea_sphere(side)\n\nFinds surface area of a sphere\n\n# Example\n\n```julia\nsurfarea_sphere(5)  # returns 314.1592653589793\nsurfarea_sphere(1)  # returns 12.566370614359172\nsurfarea_sphere(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> surfarea_sphere(radius)\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(radius, <span class=\"hljs-string\">&quot;surfarea_sphere() only works for non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span><span class=\"hljs-literal\">π</span> * (radius^<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_rectangle(length, width)\n\nFinds area of the rectangle\n\n# Example\n\n```julia\narea_rectangle(10,20) # returns 200\narea_rectangle(-1,-2) # returns DomainError\narea_rectangle(1,-2)  # returns DomainError\narea_rectangle(-1,2)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_rectangle(length, width)\n    <span class=\"hljs-keyword\">if</span> length &lt; <span class=\"hljs-number\">0</span> || width &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_rectangle() only works for non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> length * width\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_square(side)\n\nFinds area of the area_square\n\n# Example\n\n```julia\narea_square(10) # returns 100\narea_square(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_square(side)\n    <span class=\"hljs-keyword\">if</span> side &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_square() only works for non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> side^<span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_triangle(base, height)\n\nFinds area of the right angled triangle with base height\n\n# Example\n\n```julia\narea_triangle(10,10) # returns 50.0\narea_triangle(-1,-2) # returns DomainError\narea_triangle(1,-2)  # returns DomainError\narea_triangle(-1,2)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_triangle(base, height)\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_triangle() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> (base * height) / <span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_heron_triangle(side1, side2, side3)\n\nFinds area of a triangle using heron&#x27;s formula\n\n# Example\n\n```julia\narea_heron_triangle(5,12,13) # returns 30.0\narea_heron_triangle(-1,-2,1) # returns DomainError\narea_heron_triangle(1,-2,1)  # returns DomainError\narea_heron_triangle(-1,2,1)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_heron_triangle(side1, side2, side3)\n    <span class=\"hljs-keyword\">if</span> side1 &lt; <span class=\"hljs-number\">0</span> || side2 &lt; <span class=\"hljs-number\">0</span> || side3 &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_triangle_three_sides() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">elseif</span> side1 + side2 &lt; side3 || side1 + side3 &lt; side2 || side2 + side3 &lt; side1\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;Given three sides do not form a triangle&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    semi_perimeter = (side1 + side2 + side3) / <span class=\"hljs-number\">2</span>\n    area = sqrt(\n        semi_perimeter\n        * (semi_perimeter - side1)\n        * (semi_perimeter - side2)\n        * (semi_perimeter - side3)\n    )\n    <span class=\"hljs-keyword\">return</span> area\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_parallelogram(base, height)\n\nFinds area of the parallelogram\n\n# Example\n\n```julia\narea_parallelogram(10,20) # returns 200\narea_parallelogram(-1,-2) # returns DomainError\narea_parallelogram(1,-2)  # returns DomainError\narea_parallelogram(-1,2)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_parallelogram(base, height)\n\n    <span class=\"hljs-keyword\">if</span> base &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_parallelogram() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> base * height\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\narea_trapezium(base1,base2,height)\n\nFinds area of the traπzium\n\n# Example\n\n```julia\narea_trapezium(10, 20, 30)  # returns 450.0\narea_trapezium(-1, -2, -3)  # returns DomainError\narea_trapezium(-1, 2, 3)    # returns DomainError\narea_trapezium(1, -2, 3)    # returns DomainError\narea_trapezium(1, 2, -3)    # returns DomainError\narea_trapezium(-1, -2, 3)   # returns DomainError\narea_trapezium(1, -2, -3)   # returns DomainError\narea_trapezium(-1, 2, -3)   # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_trapezium(base1, base2, height)\n    <span class=\"hljs-keyword\">if</span> base1 &lt; <span class=\"hljs-number\">0</span> || base2 &lt; <span class=\"hljs-number\">0</span> || height &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_trapezium() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * (base1 + base2) * height\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_circle(radius)\n\nFinds area of the circle\n\n# Example\n\n```julia\narea_circle(20) # returns 1256.6370614359173\narea_circle(-1) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_circle(radius)\n    <span class=\"hljs-keyword\">if</span> radius &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_circle() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">π</span> * radius^<span class=\"hljs-number\">2</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_ellipse(radius_x, radius_y)\n\nFinds area of the ellipse\n\n# Example\n\n```julia\narea_ellipse(10, 10) # returns 314.1592653589793\narea_ellipse(10, 20) # returns 628.3185307179587\narea_ellipse(1, -2) # returns DomainError\narea_ellipse(-1, 2) # returns DomainError\narea_ellipse(-1, -2) # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_ellipse(radius_x, radius_y)\n    <span class=\"hljs-keyword\">if</span> radius_x &lt; <span class=\"hljs-number\">0</span> || radius_y &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_ellipse() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">π</span> * radius_x * radius_y\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    area_rhombus(diagonal_1, diagonal_2)\n\nFinds area of the rhombus\n\n# Example\n\n```julia\narea_rhombus(10, 20) # returns 100.0\narea_rhombus(-1,-2) # returns DomainError\narea_rhombus(1,-2)  # returns DomainError\narea_rhombus(-1,2)  # returns DomainError\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> area_rhombus(diagonal_1, diagonal_2)\n    <span class=\"hljs-keyword\">if</span> diagonal_1 &lt; <span class=\"hljs-number\">0</span> || diagonal_2 &lt; <span class=\"hljs-number\">0</span>\n        throw(<span class=\"hljs-built_in\">DomainError</span>(<span class=\"hljs-string\">&quot;area_rhombus() only accepts non-negative values&quot;</span>))\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span> * diagonal_1 * diagonal_2\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    trapazoidal_area(f, x_start, x_end, steps)\n\nApproximates the area under the curve using the trapezoidal rule\nArguments:\n - f: function for the\n - x_start: starting value for x\n - x_end: ending value for x\n - steps: steps taken while integrating.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> trapazoidal_area(f, x_start, x_end, steps)\n\tx1 = x_start\n\tfx1 = f(x_start)\n\tarea = <span class=\"hljs-number\">0.0</span>\n\n\t<span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:steps\n\t\tx2 = ((x_end - x_start) / steps) + x1\n\t\tfx2 = f(x2)\n\t\tarea += abs(fx2 + fx1) * (x2 - x1) / <span class=\"hljs-number\">2</span>\n\t\tx1 = x2\n\t\tfx1 = fx2\n\t<span class=\"hljs-keyword\">end</span>\n\n\t<span class=\"hljs-keyword\">return</span> area\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "laurelr2020",
      "email": "reganlaurell@gmail.com",
      "commits": 1
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+uncomfyhalomacro@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jean-Francois Baffier",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "SiddhantJain15",
      "email": "siddhant.jain150397@gmail.com",
      "commits": 1
    },
    {
      "name": "Lewis Tian",
      "email": "taseikyo@gmail.com",
      "commits": 1
    },
    {
      "name": "김수연",
      "email": "tnehd158@gmail.com",
      "commits": 1
    },
    {
      "name": "Sabari Ganesh",
      "email": "64348740+SabariGanesh-K@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Adityanagraj",
      "email": "42292430+Adityanagraj@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    },
    {
      "name": "Carlos Carvalho",
      "email": "jcarloss.carvalho@gmail.com",
      "commits": 2
    },
    {
      "name": "lance-pyles",
      "email": "36748284+lance-pyles@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
