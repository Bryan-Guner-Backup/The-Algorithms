{
  "slug": "monte-carlo",
  "name": "Monte Carlo",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/monte_carlo.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/monte_carlo.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n@author: MatteoRaso\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> pi, sqrt\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> uniform\n<span class=\"hljs-keyword\">from</span> statistics <span class=\"hljs-keyword\">import</span> mean\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pi_estimator</span>(<span class=\"hljs-params\">iterations: <span class=\"hljs-built_in\">int</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    An implementation of the Monte Carlo method used to find pi.\n    1. Draw a 2x2 square centred at (0,0).\n    2. Inscribe a circle within the square.\n    3. For each iteration, place a dot anywhere in the square.\n       a. Record the number of dots within the circle.\n    4. After all the dots are placed, divide the dots in the circle by the total.\n    5. Multiply this value by 4 to get your estimate of pi.\n    6. Print the estimated and numpy value of pi\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># A local function to see if a dot lands in the circle.</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_in_circle</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span>, y: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        distance_from_centre = sqrt((x ** <span class=\"hljs-number\">2</span>) + (y ** <span class=\"hljs-number\">2</span>))\n        <span class=\"hljs-comment\"># Our circle has a radius of 1, so a distance</span>\n        <span class=\"hljs-comment\"># greater than 1 would land outside the circle.</span>\n        <span class=\"hljs-keyword\">return</span> distance_from_centre &lt;= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># The proportion of guesses that landed in the circle</span>\n    proportion = mean(\n        <span class=\"hljs-built_in\">int</span>(is_in_circle(uniform(-<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>), uniform(-<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>)))\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(iterations)\n    )\n    <span class=\"hljs-comment\"># The ratio of the area for circle to square is pi/4.</span>\n    pi_estimate = proportion * <span class=\"hljs-number\">4</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;The estimated value of pi is <span class=\"hljs-subst\">{pi_estimate}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;The numpy value of pi is <span class=\"hljs-subst\">{pi}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;The total error is <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">abs</span>(pi - pi_estimate)}</span>&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_under_curve_estimator</span>(<span class=\"hljs-params\">\n    iterations: <span class=\"hljs-built_in\">int</span>,\n    function_to_integrate: <span class=\"hljs-type\">Callable</span>[[<span class=\"hljs-built_in\">float</span>], <span class=\"hljs-built_in\">float</span>],\n    min_value: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0.0</span>,\n    max_value: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1.0</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    An implementation of the Monte Carlo method to find area under\n       a single variable non-negative real-valued continuous function,\n       say f(x), where x lies within a continuous bounded interval,\n       say [min_value, max_value], where min_value and max_value are\n       finite numbers\n    1. Let x be a uniformly distributed random variable between min_value to\n       max_value\n    2. Expected value of f(x) =\n       (integrate f(x) from min_value to max_value)/(max_value - min_value)\n    3. Finding expected value of f(x):\n        a. Repeatedly draw x from uniform distribution\n        b. Evaluate f(x) at each of the drawn x values\n        c. Expected value = average of the function evaluations\n    4. Estimated value of integral = Expected value * (max_value - min_value)\n    5. Returns estimated value\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> mean(\n        function_to_integrate(uniform(min_value, max_value)) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(iterations)\n    ) * (max_value - min_value)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">area_under_line_estimator_check</span>(<span class=\"hljs-params\">\n    iterations: <span class=\"hljs-built_in\">int</span>, min_value: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0.0</span>, max_value: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">1.0</span>\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Checks estimation error for area_under_curve_estimator function\n    for f(x) = x where x lies within min_value to max_value\n    1. Calls &quot;area_under_curve_estimator&quot; function\n    2. Compares with the expected value\n    3. Prints estimated, expected and error value\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">identity_function</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Represents identity function\n        &gt;&gt;&gt; [function_to_integrate(x) for x in [-2.0, -1.0, 0.0, 1.0, 2.0]]\n        [-2.0, -1.0, 0.0, 1.0, 2.0]\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> x\n\n    estimated_value = area_under_curve_estimator(\n        iterations, identity_function, min_value, max_value\n    )\n    expected_value = (max_value * max_value - min_value * min_value) / <span class=\"hljs-number\">2</span>\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;******************&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Estimating area under y=x where x varies from <span class=\"hljs-subst\">{min_value}</span> to <span class=\"hljs-subst\">{max_value}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Estimated value is <span class=\"hljs-subst\">{estimated_value}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Expected value is <span class=\"hljs-subst\">{expected_value}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Total error is <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">abs</span>(estimated_value - expected_value)}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;******************&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pi_estimator_using_area_under_curve</span>(<span class=\"hljs-params\">iterations: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Area under curve y = sqrt(4 - x^2) where x lies in 0 to 2 is equal to pi\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">function_to_integrate</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Represents semi-circle with radius 2\n        &gt;&gt;&gt; [function_to_integrate(x) for x in [-2.0, 0.0, 2.0]]\n        [0.0, 2.0, 0.0]\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> sqrt(<span class=\"hljs-number\">4.0</span> - x * x)\n\n    estimated_value = area_under_curve_estimator(\n        iterations, function_to_integrate, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">2.0</span>\n    )\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;******************&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Estimating pi using area_under_curve_estimator&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Estimated value is <span class=\"hljs-subst\">{estimated_value}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Expected value is <span class=\"hljs-subst\">{pi}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Total error is <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">abs</span>(estimated_value - pi)}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;******************&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "MatteoRaso",
      "email": "33975162+MatteoRaso@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "singlav",
      "email": "41392278+singlav@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
