{
  "slug": "complex-numbers",
  "name": "Complex Numbers",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/complex_numbers.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/complex_numbers.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @author tjgurwara99\n * @file\n *\n * \\brief An implementation of Complex Number as Objects\n * \\details A basic implementation of Complex Number field as a class with\n * operators overloaded to accommodate (mathematical) field operations.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;complex&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdexcept&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * \\brief Class Complex to represent complex numbers as a field.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Complex</span> {\n    <span class=\"hljs-comment\">// The real value of the complex number</span>\n    <span class=\"hljs-type\">double</span> re;\n    <span class=\"hljs-comment\">// The imaginary value of the complex number</span>\n    <span class=\"hljs-type\">double</span> im;\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * \\brief Complex Constructor which initialises our complex number.\n     * \\details\n     * Complex Constructor which initialises the complex number which takes\n     * three arguments.\n     * @param x If the third parameter is &#x27;true&#x27; then this x is the absolute\n     * value of the complex number, if the third parameter is &#x27;false&#x27; then this\n     * x is the real value of the complex number (optional).\n     * @param y If the third parameter is &#x27;true&#x27; then this y is the argument of\n     * the complex number, if the third parameter is &#x27;false&#x27; then this y is the\n     * imaginary value of the complex number (optional).\n     * @param is_polar &#x27;false&#x27; by default. If we want to initialise our complex\n     * number using polar form then set this to true, otherwise set it to false\n     * to use initialiser which initialises real and imaginary values using the\n     * first two parameters (optional).\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">Complex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x = <span class=\"hljs-number\">0.f</span>, <span class=\"hljs-type\">double</span> y = <span class=\"hljs-number\">0.f</span>, <span class=\"hljs-type\">bool</span> is_polar = <span class=\"hljs-literal\">false</span>)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (!is_polar) {\n            re = x;\n            im = y;\n            <span class=\"hljs-keyword\">return</span>;\n        }\n\n        re = x * std::<span class=\"hljs-built_in\">cos</span>(y);\n        im = x * std::<span class=\"hljs-built_in\">sin</span>(y);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Copy Constructor\n     * @param other The other number to equate our number to.\n     */</span>\n    <span class=\"hljs-built_in\">Complex</span>(<span class=\"hljs-keyword\">const</span> Complex &amp;other) : <span class=\"hljs-built_in\">re</span>(other.<span class=\"hljs-built_in\">real</span>()), <span class=\"hljs-built_in\">im</span>(other.<span class=\"hljs-built_in\">imag</span>()) {}\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Member function to get real value of our complex number.\n     * Member function (getter) to access the class&#x27; re value.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">real</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>-&gt;re; }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Member function to get imaginary value of our complex number.\n     * Member function (getter) to access the class&#x27; im value.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">imag</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>-&gt;im; }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Member function to give the modulus of our complex number.\n     * Member function to which gives the absolute value (modulus) of our\n     * complex number\n     * @return \\f$ \\sqrt{z \\bar{z}} \\f$ where \\f$ z \\f$ is our complex\n     * number.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">abs</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{\n        <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-keyword\">this</span>-&gt;re * <span class=\"hljs-keyword\">this</span>-&gt;re + <span class=\"hljs-keyword\">this</span>-&gt;im * <span class=\"hljs-keyword\">this</span>-&gt;im);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Member function to give the argument of our complex number.\n     * @return Argument of our Complex number in radians.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">arg</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">atan2</span>(<span class=\"hljs-keyword\">this</span>-&gt;im, <span class=\"hljs-keyword\">this</span>-&gt;re); }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Operator overload of &#x27;+&#x27; on Complex class.\n     * Operator overload to be able to add two complex numbers.\n     * @param other The other number that is added to the current number.\n     * @return result current number plus other number\n     */</span>\n    Complex <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> Complex &amp;other) {\n        <span class=\"hljs-function\">Complex <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">this</span>-&gt;re + other.re, <span class=\"hljs-keyword\">this</span>-&gt;im + other.im)</span></span>;\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Operator overload of &#x27;-&#x27; on Complex class.\n     * Operator overload to be able to subtract two complex numbers.\n     * @param other The other number being subtracted from the current number.\n     * @return result current number subtract other number\n     */</span>\n    Complex <span class=\"hljs-keyword\">operator</span>-(<span class=\"hljs-keyword\">const</span> Complex &amp;other) {\n        <span class=\"hljs-function\">Complex <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">this</span>-&gt;re - other.re, <span class=\"hljs-keyword\">this</span>-&gt;im - other.im)</span></span>;\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Operator overload of &#x27;*&#x27; on Complex class.\n     * Operator overload to be able to multiple two complex numbers.\n     * @param other The other number to multiply the current number to.\n     * @return result current number times other number.\n     */</span>\n    Complex <span class=\"hljs-keyword\">operator</span>*(<span class=\"hljs-keyword\">const</span> Complex &amp;other) {\n        <span class=\"hljs-function\">Complex <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">this</span>-&gt;re * other.re - <span class=\"hljs-keyword\">this</span>-&gt;im * other.im,\n                       <span class=\"hljs-keyword\">this</span>-&gt;re * other.im + <span class=\"hljs-keyword\">this</span>-&gt;im * other.re)</span></span>;\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Operator overload of &#x27;~&#x27; on Complex class.\n     * Operator overload of the BITWISE NOT which gives us the conjugate of our\n     * complex number. <span class=\"hljs-doctag\">NOTE:</span> This is overloading the BITWISE operator but its\n     * not a BITWISE operation in this definition.\n     * @return result The conjugate of our complex number.\n     */</span>\n    Complex <span class=\"hljs-keyword\">operator</span>~() <span class=\"hljs-keyword\">const</span> {\n        <span class=\"hljs-function\">Complex <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">this</span>-&gt;re, -(<span class=\"hljs-keyword\">this</span>-&gt;im))</span></span>;\n        <span class=\"hljs-keyword\">return</span> result;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Operator overload of &#x27;/&#x27; on Complex class.\n     * Operator overload to be able to divide two complex numbers. This function\n     * would throw an exception if the other number is zero.\n     * @param other The other number we divide our number by.\n     * @return result Current number divided by other number.\n     */</span>\n    Complex <span class=\"hljs-keyword\">operator</span>/(<span class=\"hljs-keyword\">const</span> Complex &amp;other) {\n        Complex result = *<span class=\"hljs-keyword\">this</span> * ~other;\n        <span class=\"hljs-type\">double</span> denominator =\n            other.<span class=\"hljs-built_in\">real</span>() * other.<span class=\"hljs-built_in\">real</span>() + other.<span class=\"hljs-built_in\">imag</span>() * other.<span class=\"hljs-built_in\">imag</span>();\n        <span class=\"hljs-keyword\">if</span> (denominator != <span class=\"hljs-number\">0</span>) {\n            result = <span class=\"hljs-built_in\">Complex</span>(result.<span class=\"hljs-built_in\">real</span>() / denominator,\n                             result.<span class=\"hljs-built_in\">imag</span>() / denominator);\n            <span class=\"hljs-keyword\">return</span> result;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">throw</span> std::<span class=\"hljs-built_in\">invalid_argument</span>(<span class=\"hljs-string\">&quot;Undefined Value&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * \\brief Operator overload of &#x27;=&#x27; on Complex class.\n     * Operator overload to be able to copy RHS instance of Complex to LHS\n     * instance of Complex\n     */</span>\n    <span class=\"hljs-keyword\">const</span> Complex &amp;<span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-keyword\">const</span> Complex &amp;other) {\n        <span class=\"hljs-keyword\">this</span>-&gt;re = other.<span class=\"hljs-built_in\">real</span>();\n        <span class=\"hljs-keyword\">this</span>-&gt;im = other.<span class=\"hljs-built_in\">imag</span>();\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n};\n\n<span class=\"hljs-comment\">/**\n * \\brief Operator overload of &#x27;==&#x27; on Complex class.\n * Logical Equal overload for our Complex class.\n * @param a Left hand side of our expression\n * @param b Right hand side of our expression\n * @return &#x27;True&#x27; If real and imaginary parts of a and b are same\n * @return &#x27;False&#x27; Otherwise.\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(<span class=\"hljs-keyword\">const</span> Complex &amp;a, <span class=\"hljs-keyword\">const</span> Complex &amp;b) {\n    <span class=\"hljs-keyword\">return</span> a.<span class=\"hljs-built_in\">real</span>() == b.<span class=\"hljs-built_in\">real</span>() &amp;&amp; a.<span class=\"hljs-built_in\">imag</span>() == b.<span class=\"hljs-built_in\">imag</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * \\brief Operator overload of &#x27;&lt;&lt;&#x27; of ostream for Complex class.\n * Overloaded insersion operator to accommodate the printing of our complex\n * number in their standard form.\n * @param os The console stream\n * @param num The complex number.\n */</span>\nstd::ostream &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;(std::ostream &amp;os, <span class=\"hljs-keyword\">const</span> Complex &amp;num) {\n    os &lt;&lt; <span class=\"hljs-string\">&quot;(&quot;</span> &lt;&lt; num.<span class=\"hljs-built_in\">real</span>();\n    <span class=\"hljs-keyword\">if</span> (num.<span class=\"hljs-built_in\">imag</span>() &lt; <span class=\"hljs-number\">0</span>) {\n        os &lt;&lt; <span class=\"hljs-string\">&quot; - &quot;</span> &lt;&lt; -num.<span class=\"hljs-built_in\">imag</span>();\n    } <span class=\"hljs-keyword\">else</span> {\n        os &lt;&lt; <span class=\"hljs-string\">&quot; + &quot;</span> &lt;&lt; num.<span class=\"hljs-built_in\">imag</span>();\n    }\n    os &lt;&lt; <span class=\"hljs-string\">&quot;i)&quot;</span>;\n    <span class=\"hljs-keyword\">return</span> os;\n}\n\n<span class=\"hljs-comment\">/**\n * \\brief Function to get random numbers to generate our complex numbers for\n * test\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">get_rand</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> (std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">100</span> - <span class=\"hljs-number\">50</span>) / <span class=\"hljs-number\">100.f</span>; }\n\n<span class=\"hljs-comment\">/**\n * Tests Function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));\n    <span class=\"hljs-type\">double</span> x1 = <span class=\"hljs-built_in\">get_rand</span>(), y1 = <span class=\"hljs-built_in\">get_rand</span>(), x2 = <span class=\"hljs-built_in\">get_rand</span>(), y2 = <span class=\"hljs-built_in\">get_rand</span>();\n    <span class=\"hljs-function\">Complex <span class=\"hljs-title\">num1</span><span class=\"hljs-params\">(x1, y1)</span>, <span class=\"hljs-title\">num2</span><span class=\"hljs-params\">(x2, y2)</span></span>;\n    <span class=\"hljs-function\">std::complex&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">cnum1</span><span class=\"hljs-params\">(x1, y1)</span>, <span class=\"hljs-title\">cnum2</span><span class=\"hljs-params\">(x2, y2)</span></span>;\n    Complex result;\n    std::complex&lt;<span class=\"hljs-type\">double</span>&gt; expected;\n    <span class=\"hljs-comment\">// Test for addition</span>\n    result = num1 + num2;\n    expected = cnum1 + cnum2;\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;1 + 1i + 1 + 1i is equal to 2 + 2i but the addition doesn&#x27;t &quot;</span>\n                  <span class=\"hljs-string\">&quot;add up \\n&quot;</span>,\n            (result.<span class=\"hljs-built_in\">real</span>() == expected.<span class=\"hljs-built_in\">real</span>() &amp;&amp;\n             result.<span class=\"hljs-built_in\">imag</span>() == expected.<span class=\"hljs-built_in\">imag</span>())));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;First test passes.&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test for subtraction</span>\n    result = num1 - num2;\n    expected = cnum1 - cnum2;\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;1 + 1i - 1 - 1i is equal to 0 but the program says &quot;</span>\n                  <span class=\"hljs-string\">&quot;otherwise. \\n&quot;</span>,\n            (result.<span class=\"hljs-built_in\">real</span>() == expected.<span class=\"hljs-built_in\">real</span>() &amp;&amp;\n             result.<span class=\"hljs-built_in\">imag</span>() == expected.<span class=\"hljs-built_in\">imag</span>())));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Second test passes.&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test for multiplication</span>\n    result = num1 * num2;\n    expected = cnum1 * cnum2;\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;(1 + 1i) * (1 + 1i) is equal to 2i but the program says &quot;</span>\n                  <span class=\"hljs-string\">&quot;otherwise. \\n&quot;</span>,\n            (result.<span class=\"hljs-built_in\">real</span>() == expected.<span class=\"hljs-built_in\">real</span>() &amp;&amp;\n             result.<span class=\"hljs-built_in\">imag</span>() == expected.<span class=\"hljs-built_in\">imag</span>())));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Third test passes.&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test for division</span>\n    result = num1 / num2;\n    expected = cnum1 / cnum2;\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;(1 + 1i) / (1 + 1i) is equal to 1 but the program says &quot;</span>\n                  <span class=\"hljs-string\">&quot;otherwise.\\n&quot;</span>,\n            (result.<span class=\"hljs-built_in\">real</span>() == expected.<span class=\"hljs-built_in\">real</span>() &amp;&amp;\n             result.<span class=\"hljs-built_in\">imag</span>() == expected.<span class=\"hljs-built_in\">imag</span>())));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Fourth test passes.&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test for conjugates</span>\n    result = ~num1;\n    expected = std::<span class=\"hljs-built_in\">conj</span>(cnum1);\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;(1 + 1i) has a conjugate which is equal to (1 - 1i) but the &quot;</span>\n                  <span class=\"hljs-string\">&quot;program says otherwise.\\n&quot;</span>,\n            (result.<span class=\"hljs-built_in\">real</span>() == expected.<span class=\"hljs-built_in\">real</span>() &amp;&amp;\n             result.<span class=\"hljs-built_in\">imag</span>() == expected.<span class=\"hljs-built_in\">imag</span>())));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Fifth test passes.\\n&quot;</span>;\n    <span class=\"hljs-comment\">// Test for Argument of our complex number</span>\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;(1 + 1i) has argument PI / 4 but the program differs from &quot;</span>\n                  <span class=\"hljs-string\">&quot;the std::complex result.\\n&quot;</span>,\n            (num1.<span class=\"hljs-built_in\">arg</span>() == std::<span class=\"hljs-built_in\">arg</span>(cnum1))));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sixth test passes.\\n&quot;</span>;\n    <span class=\"hljs-comment\">// Test for absolute value of our complex number</span>\n    <span class=\"hljs-built_in\">assert</span>(((<span class=\"hljs-type\">void</span>)<span class=\"hljs-string\">&quot;(1 + 1i) has absolute value sqrt(2) but the program differs &quot;</span>\n                  <span class=\"hljs-string\">&quot;from the std::complex result. \\n&quot;</span>,\n            (num1.<span class=\"hljs-built_in\">abs</span>() == std::<span class=\"hljs-built_in\">abs</span>(cnum1))));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Seventh test passes.\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">tests</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
