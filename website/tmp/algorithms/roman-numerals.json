{
  "slug": "roman-numerals",
  "name": "Roman Numerals",
  "categories": ["conversions"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions/roman_numerals.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions/roman_numerals.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">roman_to_int</span>(<span class=\"hljs-params\">roman: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    LeetCode No. 13 Roman to Integer\r\n    Given a roman numeral, convert it to an integer.\r\n    Input is guaranteed to be within the range from 1 to 3999.\r\n    https://en.wikipedia.org/wiki/Roman_numerals\r\n    &gt;&gt;&gt; tests = {&quot;III&quot;: 3, &quot;CLIV&quot;: 154, &quot;MIX&quot;: 1009, &quot;MMD&quot;: 2500, &quot;MMMCMXCIX&quot;: 3999}\r\n    &gt;&gt;&gt; all(roman_to_int(key) == value for key, value in tests.items())\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    vals = {<span class=\"hljs-string\">&quot;I&quot;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;V&quot;</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&quot;X&quot;</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;L&quot;</span>: <span class=\"hljs-number\">50</span>, <span class=\"hljs-string\">&quot;C&quot;</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">&quot;D&quot;</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;M&quot;</span>: <span class=\"hljs-number\">1000</span>}\r\n    total = <span class=\"hljs-number\">0</span>\r\n    place = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> place &lt; <span class=\"hljs-built_in\">len</span>(roman):\r\n        <span class=\"hljs-keyword\">if</span> (place + <span class=\"hljs-number\">1</span> &lt; <span class=\"hljs-built_in\">len</span>(roman)) <span class=\"hljs-keyword\">and</span> (vals[roman[place]] &lt; vals[roman[place + <span class=\"hljs-number\">1</span>]]):\r\n            total += vals[roman[place + <span class=\"hljs-number\">1</span>]] - vals[roman[place]]\r\n            place += <span class=\"hljs-number\">2</span>\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            total += vals[roman[place]]\r\n            place += <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">return</span> total\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">int_to_roman</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Given a integer, convert it to an roman numeral.\r\n    https://en.wikipedia.org/wiki/Roman_numerals\r\n    &gt;&gt;&gt; tests = {&quot;III&quot;: 3, &quot;CLIV&quot;: 154, &quot;MIX&quot;: 1009, &quot;MMD&quot;: 2500, &quot;MMMCMXCIX&quot;: 3999}\r\n    &gt;&gt;&gt; all(int_to_roman(value) == key for key, value in tests.items())\r\n    True\r\n    &quot;&quot;&quot;</span>\r\n    ROMAN = [\r\n        (<span class=\"hljs-number\">1000</span>, <span class=\"hljs-string\">&quot;M&quot;</span>),\r\n        (<span class=\"hljs-number\">900</span>, <span class=\"hljs-string\">&quot;CM&quot;</span>),\r\n        (<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;D&quot;</span>),\r\n        (<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;CD&quot;</span>),\r\n        (<span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">&quot;C&quot;</span>),\r\n        (<span class=\"hljs-number\">90</span>, <span class=\"hljs-string\">&quot;XC&quot;</span>),\r\n        (<span class=\"hljs-number\">50</span>, <span class=\"hljs-string\">&quot;L&quot;</span>),\r\n        (<span class=\"hljs-number\">40</span>, <span class=\"hljs-string\">&quot;XL&quot;</span>),\r\n        (<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;X&quot;</span>),\r\n        (<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&quot;IX&quot;</span>),\r\n        (<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&quot;V&quot;</span>),\r\n        (<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;IV&quot;</span>),\r\n        (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;I&quot;</span>),\r\n    ]\r\n    result = []\r\n    <span class=\"hljs-keyword\">for</span> (arabic, roman) <span class=\"hljs-keyword\">in</span> ROMAN:\r\n        (factor, number) = <span class=\"hljs-built_in\">divmod</span>(number, arabic)\r\n        result.append(roman * factor)\r\n        <span class=\"hljs-keyword\">if</span> number == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">break</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(result)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
