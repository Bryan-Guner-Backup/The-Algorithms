{
  "slug": "queue",
  "name": "Queue",
  "categories": ["datastructures", "queue"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Queue/Queue.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Queue/Queue.js",
      "code": "<span class=\"hljs-comment\">/* Queue\n* A Queue is a data structure that allows you to add an element to the end of\n* a list and remove the item at the front. A queue follows a &quot;First In First Out&quot;\n* system, where the first item to enter the queue is the first to be removed. This\n* implementation uses an array to store the queue.\n*/</span>\n\n<span class=\"hljs-comment\">// Functions: enqueue, dequeue, peek, view, length</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Queue</span> = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// constructor</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Queue</span> () {\n    <span class=\"hljs-comment\">// This is the array representation of the queue</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span> = []\n  }\n\n  <span class=\"hljs-comment\">// methods</span>\n  <span class=\"hljs-comment\">// Add a value to the end of the queue</span>\n  <span class=\"hljs-title class_\">Queue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">enqueue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-title function_\">push</span>(item)\n  }\n\n  <span class=\"hljs-comment\">// Removes the value at the front of the queue</span>\n  <span class=\"hljs-title class_\">Queue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">dequeue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Queue is Empty&#x27;</span>)\n    }\n\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// remove the item at position 0 from the array</span>\n\n    <span class=\"hljs-keyword\">return</span> result\n  }\n\n  <span class=\"hljs-comment\">// Return the length of the queue</span>\n  <span class=\"hljs-title class_\">Queue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">length</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-property\">length</span>\n  }\n\n  <span class=\"hljs-comment\">// Return the item at the front of the queue</span>\n  <span class=\"hljs-title class_\">Queue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">peek</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>[<span class=\"hljs-number\">0</span>]\n  }\n\n  <span class=\"hljs-comment\">// List all the items in the queue</span>\n  <span class=\"hljs-title class_\">Queue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">view</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>)\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Queue</span>\n}())\n\n<span class=\"hljs-comment\">// Implementation</span>\n<span class=\"hljs-keyword\">const</span> myQueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Queue</span>()\n\nmyQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-number\">1</span>)\nmyQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-number\">5</span>)\nmyQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-number\">76</span>)\nmyQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-number\">69</span>)\nmyQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-number\">32</span>)\nmyQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-number\">54</span>)\n\nmyQueue.<span class=\"hljs-title function_\">view</span>()\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Length: <span class=\"hljs-subst\">${myQueue.length()}</span>`</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Front item: <span class=\"hljs-subst\">${myQueue.peek()}</span>`</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Removed <span class=\"hljs-subst\">${myQueue.dequeue()}</span> from front.`</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`New front item: <span class=\"hljs-subst\">${myQueue.peek()}</span>`</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Removed <span class=\"hljs-subst\">${myQueue.dequeue()}</span> from front.`</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`New front item: <span class=\"hljs-subst\">${myQueue.peek()}</span>`</span>)\nmyQueue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-number\">55</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Inserted 55&#x27;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`New front item: <span class=\"hljs-subst\">${myQueue.peek()}</span>`</span>)\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) {\n  myQueue.<span class=\"hljs-title function_\">dequeue</span>()\n  myQueue.<span class=\"hljs-title function_\">view</span>()\n}\n\n<span class=\"hljs-comment\">// console.log(myQueue.dequeue()); // throws exception!</span>\n"
    },
    "c-plus-plus": {
      "dir": "data_structures/queue.h",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/queue.h",
      "code": "<span class=\"hljs-comment\">/* This class specifies the basic operation on a queue as a linked list */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> DATA_STRUCTURES_QUEUE_H_</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> DATA_STRUCTURES_QUEUE_H_</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Definition of the node */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Kind</span>&gt;\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\n    Kind data;\n    node&lt;Kind&gt; *next;\n};\n\n<span class=\"hljs-comment\">/** Definition of the queue class */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Kind</span>&gt;\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">queue</span> {\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/** Show queue */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> </span>{\n        node&lt;Kind&gt; *current = queueFront;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Front --&gt; &quot;</span>;\n        <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">NULL</span>) {\n            std::cout &lt;&lt; current-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot;    &quot;</span>;\n            current = current-&gt;next;\n        }\n        std::cout &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Size of queue: &quot;</span> &lt;&lt; size &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-comment\">/** Default constructor*/</span>\n    <span class=\"hljs-built_in\">queue</span>() {\n        queueFront = <span class=\"hljs-literal\">NULL</span>;\n        queueRear = <span class=\"hljs-literal\">NULL</span>;\n        size = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/** Destructor */</span>\n    ~<span class=\"hljs-built_in\">queue</span>() {}\n\n    <span class=\"hljs-comment\">/** Determine whether the queue is empty */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isEmptyQueue</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> (queueFront == <span class=\"hljs-literal\">NULL</span>); }\n\n    <span class=\"hljs-comment\">/** Add new item to the queue */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">enQueue</span><span class=\"hljs-params\">(Kind item)</span> </span>{\n        node&lt;Kind&gt; *newNode;\n        newNode = <span class=\"hljs-keyword\">new</span> node&lt;Kind&gt;;\n        newNode-&gt;data = item;\n        newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">if</span> (queueFront == <span class=\"hljs-literal\">NULL</span>) {\n            queueFront = newNode;\n            queueRear = newNode;\n        } <span class=\"hljs-keyword\">else</span> {\n            queueRear-&gt;next = newNode;\n            queueRear = queueRear-&gt;next;\n        }\n        size++;\n    }\n\n    <span class=\"hljs-comment\">/** Return the first element of the queue */</span>\n    <span class=\"hljs-function\">Kind <span class=\"hljs-title\">front</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-built_in\">assert</span>(queueFront != <span class=\"hljs-literal\">NULL</span>);\n        <span class=\"hljs-keyword\">return</span> queueFront-&gt;data;\n    }\n\n    <span class=\"hljs-comment\">/** Remove the top element of the queue */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">deQueue</span><span class=\"hljs-params\">()</span> </span>{\n        node&lt;Kind&gt; *temp;\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">isEmptyQueue</span>()) {\n            temp = queueFront;\n            queueFront = queueFront-&gt;next;\n            <span class=\"hljs-keyword\">delete</span> temp;\n            size--;\n        } <span class=\"hljs-keyword\">else</span> {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Queue is empty !&quot;</span> &lt;&lt; std::endl;\n        }\n    }\n\n    <span class=\"hljs-comment\">/** Clear queue */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">clear</span><span class=\"hljs-params\">()</span> </span>{ queueFront = <span class=\"hljs-literal\">NULL</span>; }\n\n <span class=\"hljs-keyword\">private</span>:\n    node&lt;Kind&gt; *queueFront; <span class=\"hljs-comment\">/**&lt; Pointer to the front of the queue */</span>\n    node&lt;Kind&gt; *queueRear;  <span class=\"hljs-comment\">/**&lt; Pointer to the rear of the queue  */</span>\n    <span class=\"hljs-type\">int</span> size;\n};\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span>  <span class=\"hljs-comment\">// DATA_STRUCTURES_QUEUE_H_</span></span>\n"
    },
    "c": {
      "dir": "data_structures/queue.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/queue.c",
      "code": "<span class=\"hljs-comment\">////////////////////////////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// INCLUDES</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">////////////////////////////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// MACROS: CONSTANTS</span>\n\n<span class=\"hljs-comment\">////////////////////////////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// DATA STRUCTURES</span>\n<span class=\"hljs-comment\">/**\n * Defining the structure of the node which contains &#x27;data&#x27; (type : integer), two pointers &#x27;next&#x27; and &#x27;pre&#x27; (type : struct node).\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>                                          \n{</span>\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">pre</span>;</span>\n} * head, *tail, *tmp;\n\n<span class=\"hljs-comment\">////////////////////////////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// GLOBAL VARIABLES</span>\n<span class=\"hljs-type\">int</span> count;\n\n<span class=\"hljs-comment\">////////////////////////////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// FORWARD DECLARATIONS</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">()</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">enque</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">deque</span><span class=\"hljs-params\">()</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span>;\n\n<span class=\"hljs-comment\">////////////////////////////////////////////////////////////////////////////////</span>\n<span class=\"hljs-comment\">// MAIN ENTRY POINT</span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-keyword\">const</span> *argv[])</span>\n{\n    create();\n    enque(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">()</span>\n{\n    head = <span class=\"hljs-literal\">NULL</span>;\n    tail = <span class=\"hljs-literal\">NULL</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Puts an item into the Queue.\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">enque</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>)\n    {\n        head = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n        head-&gt;data = x;\n        head-&gt;pre = <span class=\"hljs-literal\">NULL</span>;\n        tail = head;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        tmp = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n        tmp-&gt;data = x;\n        tmp-&gt;next = tail;\n        tail = tmp;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Takes the next item from the Queue.\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">deque</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> returnData = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;ERROR: Deque from empty queue.\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        returnData = head-&gt;data;\n        <span class=\"hljs-keyword\">if</span> (head-&gt;pre == <span class=\"hljs-literal\">NULL</span>)\n            head = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">else</span>\n            head = head-&gt;pre;\n        head-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> returnData;\n}\n\n<span class=\"hljs-comment\">/**\n * Returns the size of the Queue.\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> { <span class=\"hljs-keyword\">return</span> count; }\n"
    },
    "ruby": {
      "dir": "data_structures/queues/queue.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/queues/queue.rb",
      "code": "<span class=\"hljs-comment\"># A queue is like a waiting list.</span>\n<span class=\"hljs-comment\"># Imagine you are waiting in line to buy the latest Android product</span>\n<span class=\"hljs-comment\"># or getting a parking ticket. These are queues!</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 1. An array can behave like a Queue if you use the right methods.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># These methods are:</span>\n<span class=\"hljs-comment\"># - unshift: when you unshift, you are adding one item to the queue</span>\n<span class=\"hljs-comment\"># - pop</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayQueue</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(queue = [])</span></span>\n    <span class=\"hljs-variable\">@queue</span> = queue\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:queue</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(item)</span></span>\n    queue.unshift(item)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">pop</span></span>\n    queue.pop\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">peek</span></span>\n    queue[-<span class=\"hljs-number\">1</span>]\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nqueue = ArrayQueue.new\nqueue.add(<span class=\"hljs-number\">3</span>)\nqueue.add(<span class=\"hljs-number\">4</span>)\nqueue.add(<span class=\"hljs-number\">5</span>)\n\nputs queue.inspect\n<span class=\"hljs-comment\"># =&gt; #&lt;ArrayQueue:0x00007fc78200f5e0 <span class=\"hljs-doctag\">@queue</span>=[5, 4, 3]&gt;</span>\n\nqueue.pop\n\nputs queue.inspect\n<span class=\"hljs-comment\"># =&gt; #&lt;ArrayQueue:0x00007fc78200f5e0 <span class=\"hljs-doctag\">@queue</span>=[5, 4]&gt;</span>\n\nputs(queue.peek)\n<span class=\"hljs-comment\"># =&gt; 4</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 2. Ruby Concurrent Queue</span>\n<span class=\"hljs-comment\"># Ruby has a proper thread-safe, blocking, Queue class.</span>\n<span class=\"hljs-comment\"># You can use this queue for coordinating work in a multi-threaded program.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Reference: https://ruby-doc.org/core-2.5.0/Queue.html</span>\n<span class=\"hljs-comment\">#</span>\n\nqueue = Queue.new\n\nqueue &lt;&lt; <span class=\"hljs-number\">1</span>\nqueue &lt;&lt; <span class=\"hljs-number\">2</span>\nqueue &lt;&lt; <span class=\"hljs-number\">3</span>\n\nqueue.pop\n<span class=\"hljs-comment\"># 1</span>\n\nqueue.pop\n<span class=\"hljs-comment\"># 2</span>\n\n<span class=\"hljs-comment\"># If the queue is empty, calling pop will put your current</span>\n<span class=\"hljs-comment\"># thread to sleep &amp; wait until something is added to the queue.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 3. How to Use a Ruby SizedQueue</span>\n<span class=\"hljs-comment\"># A sized queue is the same as a regular queue but with a size limit.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Reference: https://ruby-doc.org/core-2.5.0/SizedQueue.html</span>\n<span class=\"hljs-comment\">#</span>\n\nqueue = SizedQueue.new(<span class=\"hljs-number\">5</span>)\n\n<span class=\"hljs-comment\"># When the queue is full, the push (same as &lt;&lt;) operation</span>\n<span class=\"hljs-comment\"># will suspend the current thread until an item is taken off the queue.</span>\n\nqueue.push(<span class=\"hljs-symbol\">:oranges</span>)\nqueue.push(<span class=\"hljs-symbol\">:apples</span>)\nqueue.push(<span class=\"hljs-symbol\">:blue</span>)\nqueue.push(<span class=\"hljs-symbol\">:orange</span>)\nqueue.push(<span class=\"hljs-symbol\">:green</span>)\n<span class=\"hljs-comment\"># At this point, the SizedQueue is full</span>\n\nqueue.push(<span class=\"hljs-symbol\">:throw_expection</span>)\n<span class=\"hljs-comment\"># data_structures/queues/queue.rb:81:in `push&#x27;: No live threads left. Deadlock? (fatal)</span>\n<span class=\"hljs-comment\"># 1 threads, 1 sleeps current:0x00007ff54f407130 main thread:0x00007ff54f407130</span>\n<span class=\"hljs-comment\"># * #&lt;Thread:0x00007ff54f86ef38 sleep_forever&gt;</span>\n<span class=\"hljs-comment\">#    rb_thread_t:0x00007ff54f407130 native:0x000000010dd24dc0 int:0</span>\n<span class=\"hljs-comment\">#    data_structures/queues/queue.rb:81:in `push&#x27;</span>\n<span class=\"hljs-comment\">#    data_structures/queues/queue.rb:81:in `&lt;main&gt;&#x27;</span>\n<span class=\"hljs-comment\"># \tfrom data_structures/queues/queue.rb:81:in `&lt;main&gt;&#x27;</span>\n\n<span class=\"hljs-comment\"># You can choose to raise an exception, passing true as an argument as follows:</span>\nqueue.push(<span class=\"hljs-symbol\">:throw_expection</span>, <span class=\"hljs-literal\">true</span>)\n<span class=\"hljs-comment\"># data_structures/queues/queue.rb:83:in `push&#x27;: queue full (ThreadError)</span>\n<span class=\"hljs-comment\"># \tfrom data_structures/queues/queue.rb:83:in `&lt;main&gt;&#x27;</span>\n"
    },
    "swift": {
      "dir": "data_structures/queue/queue.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/data_structures/queue/queue.swift",
      "code": "<span class=\"hljs-comment\">// Create simple queue</span>\n<span class=\"hljs-comment\">// Tejas Nanaware</span>\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Queue</span>&lt;<span class=\"hljs-title class_\">T</span>&gt; {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">var</span> elements: [<span class=\"hljs-type\">T</span>] <span class=\"hljs-operator\">=</span> []\n\n  <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">value</span>: <span class=\"hljs-type\">T</span>) {\n    elements.append(value)\n  }\n\n  <span class=\"hljs-keyword\">mutating</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">pop</span>() -&gt; <span class=\"hljs-type\">T</span>? {\n    <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-operator\">!</span>elements.isEmpty <span class=\"hljs-keyword\">else</span> { \n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n    }\n    <span class=\"hljs-keyword\">return</span> elements.removeFirst()\n  }\n}\n\n<span class=\"hljs-keyword\">var</span> queue <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Queue</span>&lt;<span class=\"hljs-type\">String</span>&gt;()\n\nqueue.push(<span class=\"hljs-string\">&quot;One&quot;</span>)\nqueue.push(<span class=\"hljs-string\">&quot;Two&quot;</span>)\nqueue.push(<span class=\"hljs-string\">&quot;Three&quot;</span>)\n\n<span class=\"hljs-built_in\">print</span>(queue.pop())\n<span class=\"hljs-built_in\">print</span>(queue)\n<span class=\"hljs-built_in\">print</span>(queue.pop())\n<span class=\"hljs-built_in\">print</span>(queue)\n<span class=\"hljs-built_in\">print</span>(queue.pop())\n<span class=\"hljs-built_in\">print</span>(queue)\n"
    }
  },
  "contributors": [
    {
      "name": "Tejas Nanaware",
      "email": "nanawaret@hotmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Rail",
      "email": "livechess@yahoo.com",
      "commits": 1
    },
    {
      "name": "Juliano Nunes",
      "email": "julianomarquesnunes@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shezza221b",
      "email": "41204318+Shezza221b@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "devraj4522",
      "email": "55313450+devraj4522@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kyler",
      "email": "KylerSmith",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 2
    },
    {
      "name": "Josh Vinge",
      "email": "joshvinge@outlook.com",
      "commits": 2
    },
    {
      "name": "ttuanho",
      "email": "hhoanhtuann@gmail.com",
      "commits": 2
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 2
    },
    {
      "name": "KylerSmith",
      "email": "Kyler@macBookAir.local",
      "commits": 2
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
