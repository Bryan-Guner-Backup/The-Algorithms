{
  "slug": "two-sum",
  "name": "Two Sum",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/two_sum.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/two_sum.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nGiven an array of integers, return indices of the two numbers such that they add up to\na specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the\nsame element twice.\n\nExample:\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">two_sum</span>(<span class=\"hljs-params\">nums: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; two_sum([2, 7, 11, 15], 9)\n    [0, 1]\n    &gt;&gt;&gt; two_sum([15, 2, 11, 7], 13)\n    [1, 2]\n    &gt;&gt;&gt; two_sum([2, 7, 11, 15], 17)\n    [0, 3]\n    &gt;&gt;&gt; two_sum([7, 15, 11, 2], 18)\n    [0, 2]\n    &gt;&gt;&gt; two_sum([2, 7, 11, 15], 26)\n    [2, 3]\n    &gt;&gt;&gt; two_sum([2, 7, 11, 15], 8)\n    []\n    &gt;&gt;&gt; two_sum([3 * i for i in range(10)], 19)\n    []\n    &quot;&quot;&quot;</span>\n    chk_map = {}\n    <span class=\"hljs-keyword\">for</span> index, val <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(nums):\n        compl = target - val\n        <span class=\"hljs-keyword\">if</span> compl <span class=\"hljs-keyword\">in</span> chk_map:\n            <span class=\"hljs-keyword\">return</span> [chk_map[compl], index]\n        chk_map[val] = index\n    <span class=\"hljs-keyword\">return</span> []\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{two_sum([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">9</span>) = }</span>&quot;</span>)\n"
    },
    "ruby": {
      "dir": "data_structures/hash_table/two_sum.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/hash_table/two_sum.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Two Sum</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># You may assume that each input would have exactly one solution, and you may not use the same element twice.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># You can return the answer in any order.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Examples</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: nums = [2, 7, 11, 15], target = 9</span>\n<span class=\"hljs-comment\"># Output: [0,1]</span>\n<span class=\"hljs-comment\"># Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: nums = [3, 2, 4], target = 6</span>\n<span class=\"hljs-comment\"># Output: [1,2]</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: nums = [3, 3], target = 6</span>\n<span class=\"hljs-comment\"># Output: [0,1]</span>\n<span class=\"hljs-comment\"># Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} nums</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer} target</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer[]}</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach: Using Hash table</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Complexity analysis</span>\n\n<span class=\"hljs-comment\"># Time complexity: O(n). We traverse the list containing n elements exactly twice.</span>\n<span class=\"hljs-comment\"># Since the hash table reduces the lookup time to O(1), the time complexity is O(n).</span>\n\n<span class=\"hljs-comment\"># Space complexity: O(n). The extra space required depends on the number of items</span>\n<span class=\"hljs-comment\"># stored in the hash table, which stores exactly n elements.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">two_sum</span><span class=\"hljs-params\">(nums, target)</span></span>\n  hash = {}\n\n  <span class=\"hljs-comment\"># create a hash to store values and their indices</span>\n  nums.each_with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num, i|</span>\n    hash[num] = i\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-comment\"># iterate over nums array to find the target (difference between sum target and num)</span>\n  nums.each_with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num, i|</span>\n    difference_target = target - num\n\n    <span class=\"hljs-keyword\">if</span> hash[difference_target] &amp;&amp; hash[difference_target] != i\n      <span class=\"hljs-keyword\">return</span> [i, hash[difference_target]]\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nnums = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">15</span>]\ntarget = <span class=\"hljs-number\">9</span>\nprint(two_sum(nums, target))\n<span class=\"hljs-comment\"># =&gt; [0,1]</span>\n\nnums = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]\ntarget = <span class=\"hljs-number\">6</span>\nprint(two_sum(nums, target))\n<span class=\"hljs-comment\"># =&gt; [1,2]</span>\n\nnums = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]\ntarget = <span class=\"hljs-number\">6</span>\nprint(two_sum(nums, target))\n<span class=\"hljs-comment\"># =&gt; [0,1]</span>\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/math/TwoSum.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/math/TwoSum.kt",
      "code": "<span class=\"hljs-keyword\">package</span> math\n<span class=\"hljs-comment\">/**\n * Approach 1: Brute Force\n *\n * Complexity Analysis:\n *\n * Time complexity: O(n^2)\n * Space complexity: O(1)\n *\n * Try all the pairs in the array and see if any of them add up to the target number.\n * <span class=\"hljs-doctag\">@param</span> nums Array of integers.\n * <span class=\"hljs-doctag\">@param</span> target Integer target.\n * <span class=\"hljs-doctag\">@return</span> Indices of the two numbers such that they add up to target.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">twoSum</span><span class=\"hljs-params\">(nums: <span class=\"hljs-type\">IntArray</span>, target: <span class=\"hljs-type\">Int</span>)</span></span>: IntArray{\n    <span class=\"hljs-keyword\">for</span> (index1 <span class=\"hljs-keyword\">in</span> nums.indices) {\n        <span class=\"hljs-keyword\">val</span> startIndex = index1 + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> (index2 <span class=\"hljs-keyword\">in</span> startIndex..nums.lastIndex) {\n            <span class=\"hljs-keyword\">if</span> (nums[index1] + nums[index2] == target) {\n                <span class=\"hljs-keyword\">return</span> intArrayOf(index1, index2)\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> intArrayOf(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>)\n\n}\n"
    }
  },
  "contributors": [
    {
      "name": "spamegg",
      "email": "4255997+spamegg1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Tony De La Nuez",
      "email": "tony.delanuez@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Edylson Manuel Gon√ßalves Frederico",
      "email": "edylson_frederico@outlook.com",
      "commits": 2
    },
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 3
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 9
    }
  ],
  "explanationUrl": {}
}
