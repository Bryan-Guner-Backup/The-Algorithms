{
  "slug": "pushdown-automata-implementation",
  "name": "Pushdown Automata Implementation",
  "categories": ["automaton"],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"a-simple-implementation-of-push-down-automaton\">A Simple Implementation of Push Down Automaton:</h2>\n</div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"defining-the-6-tuples\">Defining the 6 tuples:</h2>\n<blockquote>\n<ul>\n<li> Q--&gt;finite set of sets</li>\n<li> Sigma--&gt;finite set of input alphabet</li>\n<li> Gamma--&gt;finite set of stack alphabet</li>\n<li> Delta--&gt;transition relation</li>\n<li> Q0--&gt;start state</li>\n<li> Z--&gt;initial stack symbol</li>\n<li> F--&gt;set of accepting states</li>\n</ul>\n</blockquote>\n<h1 id=\"defining-the-states\">Defining the states:</h1>\n<ul>\n<li><p>state 0: starting state</p>\n</li>\n<li><p>state 1:From state 0 whenever it sees a 1 or 2, it moves to state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 1:From state 1 whenever it sees a 1 or 2, it remains in state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it moves to state 2+pops from the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it remains in state 2+pops from the stack</p>\n</li>\n<li><p>state 3:From state 0, if it sees a 0,it moves to state 3,the rejected state</p>\n</li>\n<li><p>state 3:From state 2, if it sees a 1 or 2 , it moves to state 3, the rejected state</p>\n</li>\n<li><p>state 3:If at the end, the stack is not empty, it moves to state 3,the rejected state</p>\n</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#stack functions</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">a,list1</span>):\n    <span class=\"hljs-comment\">#pushing to the stack/adding to the top of the stack</span>\n    list1.append(a)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">list1</span>):\n    <span class=\"hljs-comment\">#for poping from the stack/removing the top element of the stack</span>\n    index=<span class=\"hljs-built_in\">len</span>(list1)-<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> (index&amp;gt;<span class=\"hljs-number\">0</span>):\n        list1.pop(index)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#    Q={0,1,2,3}</span>\n<span class=\"hljs-comment\">#    Sigma={0,1,2}</span>\n<span class=\"hljs-comment\">#    Starting state={0}</span>\n<span class=\"hljs-comment\">#    Z=#</span>\n<span class=\"hljs-comment\">#    F={2}</span>\n\n<span class=\"hljs-comment\">#setting the initial stack symbol</span>\nstack=[<span class=\"hljs-string\">'#'</span>]\n<span class=\"hljs-comment\">#setting the starting state</span>\nstate=<span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#taking the input</span>\ninput_string=<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">'Enter the String:'</span>)\n\n<span class=\"hljs-comment\">#performing the operations</span>\nl=<span class=\"hljs-built_in\">len</span>(input_string)\ni=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> l%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l//<span class=\"hljs-number\">2</span>:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> letter <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]:\n            push(letter,stack)\n            state=<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;state=1\")</span>\n        <span class=\"hljs-keyword\">else</span> :\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;1.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">if</span> letter==<span class=\"hljs-number\">0</span>:\n            state=<span class=\"hljs-number\">2</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=2\")</span>\n            pop(stack)\n        <span class=\"hljs-keyword\">else</span>:\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>:\n    state=<span class=\"hljs-number\">3</span>\n    <span class=\"hljs-comment\">#print(\"3state=3\")</span>\n    \n<span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(stack)!=<span class=\"hljs-number\">1</span>:\n    state=<span class=\"hljs-number\">3</span>\n    \n<span class=\"hljs-comment\">#print(state)</span>\n<span class=\"hljs-comment\">#print(len(stack))</span>\n\n<span class=\"hljs-comment\">#checking the final state and displaying the result</span>\n<span class=\"hljs-keyword\">if</span>(state==<span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is accepted\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is rejected\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\">Enter the <span class=\"hljs-built_in\">String</span>:<span class=\"hljs-number\">123456</span>\nThe <span class=\"hljs-built_in\">String</span> <span class=\"hljs-keyword\">is</span> rejected\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"a-simple-implementation-of-push-down-automaton\">A Simple Implementation of Push Down Automaton:</h2>\n</div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"defining-the-6-tuples\">Defining the 6 tuples:</h2>\n<blockquote>\n<ul>\n<li> Q--&gt;finite set of sets</li>\n<li> Sigma--&gt;finite set of input alphabet</li>\n<li> Gamma--&gt;finite set of stack alphabet</li>\n<li> Delta--&gt;transition relation</li>\n<li> Q0--&gt;start state</li>\n<li> Z--&gt;initial stack symbol</li>\n<li> F--&gt;set of accepting states</li>\n</ul>\n</blockquote>\n<h1 id=\"defining-the-states\">Defining the states:</h1>\n<ul>\n<li><p>state 0: starting state</p>\n</li>\n<li><p>state 1:From state 0 whenever it sees a 1 or 2, it moves to state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 1:From state 1 whenever it sees a 1 or 2, it remains in state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it moves to state 2+pops from the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it remains in state 2+pops from the stack</p>\n</li>\n<li><p>state 3:From state 0, if it sees a 0,it moves to state 3,the rejected state</p>\n</li>\n<li><p>state 3:From state 2, if it sees a 1 or 2 , it moves to state 3, the rejected state</p>\n</li>\n<li><p>state 3:If at the end, the stack is not empty, it moves to state 3,the rejected state</p>\n</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#stack functions</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">a,list1</span>):\n    <span class=\"hljs-comment\">#pushing to the stack/adding to the top of the stack</span>\n    list1.append(a)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">list1</span>):\n    <span class=\"hljs-comment\">#for poping from the stack/removing the top element of the stack</span>\n    index=<span class=\"hljs-built_in\">len</span>(list1)-<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> (index&amp;gt;<span class=\"hljs-number\">0</span>):\n        list1.pop(index)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#    Q={0,1,2,3}</span>\n<span class=\"hljs-comment\">#    Sigma={0,1,2}</span>\n<span class=\"hljs-comment\">#    Starting state={0}</span>\n<span class=\"hljs-comment\">#    Z=#</span>\n<span class=\"hljs-comment\">#    F={2}</span>\n\n<span class=\"hljs-comment\">#setting the initial stack symbol</span>\nstack=[<span class=\"hljs-string\">'#'</span>]\n<span class=\"hljs-comment\">#setting the starting state</span>\nstate=<span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#taking the input</span>\ninput_string=<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">'Enter the String:'</span>)\n\n<span class=\"hljs-comment\">#performing the operations</span>\nl=<span class=\"hljs-built_in\">len</span>(input_string)\ni=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> l%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l//<span class=\"hljs-number\">2</span>:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> letter <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]:\n            push(letter,stack)\n            state=<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;state=1\")</span>\n        <span class=\"hljs-keyword\">else</span> :\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;1.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">if</span> letter==<span class=\"hljs-number\">0</span>:\n            state=<span class=\"hljs-number\">2</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=2\")</span>\n            pop(stack)\n        <span class=\"hljs-keyword\">else</span>:\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>:\n    state=<span class=\"hljs-number\">3</span>\n    <span class=\"hljs-comment\">#print(\"3state=3\")</span>\n    \n<span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(stack)!=<span class=\"hljs-number\">1</span>:\n    state=<span class=\"hljs-number\">3</span>\n    \n<span class=\"hljs-comment\">#print(state)</span>\n<span class=\"hljs-comment\">#print(len(stack))</span>\n\n<span class=\"hljs-comment\">#checking the final state and displaying the result</span>\n<span class=\"hljs-keyword\">if</span>(state==<span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is accepted\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is rejected\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\">Enter the <span class=\"hljs-built_in\">String</span>:<span class=\"hljs-number\">123456</span>\nThe <span class=\"hljs-built_in\">String</span> <span class=\"hljs-keyword\">is</span> rejected\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"a-simple-implementation-of-push-down-automaton\">A Simple Implementation of Push Down Automaton:</h2>\n</div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"defining-the-6-tuples\">Defining the 6 tuples:</h2>\n<blockquote>\n<ul>\n<li> Q--&gt;finite set of sets</li>\n<li> Sigma--&gt;finite set of input alphabet</li>\n<li> Gamma--&gt;finite set of stack alphabet</li>\n<li> Delta--&gt;transition relation</li>\n<li> Q0--&gt;start state</li>\n<li> Z--&gt;initial stack symbol</li>\n<li> F--&gt;set of accepting states</li>\n</ul>\n</blockquote>\n<h1 id=\"defining-the-states\">Defining the states:</h1>\n<ul>\n<li><p>state 0: starting state</p>\n</li>\n<li><p>state 1:From state 0 whenever it sees a 1 or 2, it moves to state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 1:From state 1 whenever it sees a 1 or 2, it remains in state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it moves to state 2+pops from the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it remains in state 2+pops from the stack</p>\n</li>\n<li><p>state 3:From state 0, if it sees a 0,it moves to state 3,the rejected state</p>\n</li>\n<li><p>state 3:From state 2, if it sees a 1 or 2 , it moves to state 3, the rejected state</p>\n</li>\n<li><p>state 3:If at the end, the stack is not empty, it moves to state 3,the rejected state</p>\n</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#stack functions</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">a,list1</span>):\n    <span class=\"hljs-comment\">#pushing to the stack/adding to the top of the stack</span>\n    list1.append(a)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">list1</span>):\n    <span class=\"hljs-comment\">#for poping from the stack/removing the top element of the stack</span>\n    index=<span class=\"hljs-built_in\">len</span>(list1)-<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> (index&amp;gt;<span class=\"hljs-number\">0</span>):\n        list1.pop(index)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#    Q={0,1,2,3}</span>\n<span class=\"hljs-comment\">#    Sigma={0,1,2}</span>\n<span class=\"hljs-comment\">#    Starting state={0}</span>\n<span class=\"hljs-comment\">#    Z=#</span>\n<span class=\"hljs-comment\">#    F={2}</span>\n\n<span class=\"hljs-comment\">#setting the initial stack symbol</span>\nstack=[<span class=\"hljs-string\">'#'</span>]\n<span class=\"hljs-comment\">#setting the starting state</span>\nstate=<span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#taking the input</span>\ninput_string=<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">'Enter the String:'</span>)\n\n<span class=\"hljs-comment\">#performing the operations</span>\nl=<span class=\"hljs-built_in\">len</span>(input_string)\ni=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> l%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l//<span class=\"hljs-number\">2</span>:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> letter <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]:\n            push(letter,stack)\n            state=<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;state=1\")</span>\n        <span class=\"hljs-keyword\">else</span> :\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;1.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">if</span> letter==<span class=\"hljs-number\">0</span>:\n            state=<span class=\"hljs-number\">2</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=2\")</span>\n            pop(stack)\n        <span class=\"hljs-keyword\">else</span>:\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>:\n    state=<span class=\"hljs-number\">3</span>\n    <span class=\"hljs-comment\">#print(\"3state=3\")</span>\n    \n<span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(stack)!=<span class=\"hljs-number\">1</span>:\n    state=<span class=\"hljs-number\">3</span>\n    \n<span class=\"hljs-comment\">#print(state)</span>\n<span class=\"hljs-comment\">#print(len(stack))</span>\n\n<span class=\"hljs-comment\">#checking the final state and displaying the result</span>\n<span class=\"hljs-keyword\">if</span>(state==<span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is accepted\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is rejected\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\">Enter the <span class=\"hljs-built_in\">String</span>:<span class=\"hljs-number\">123456</span>\nThe <span class=\"hljs-built_in\">String</span> <span class=\"hljs-keyword\">is</span> rejected\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"a-simple-implementation-of-push-down-automaton\">A Simple Implementation of Push Down Automaton:</h2>\n</div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"defining-the-6-tuples\">Defining the 6 tuples:</h2>\n<blockquote>\n<ul>\n<li> Q--&gt;finite set of sets</li>\n<li> Sigma--&gt;finite set of input alphabet</li>\n<li> Gamma--&gt;finite set of stack alphabet</li>\n<li> Delta--&gt;transition relation</li>\n<li> Q0--&gt;start state</li>\n<li> Z--&gt;initial stack symbol</li>\n<li> F--&gt;set of accepting states</li>\n</ul>\n</blockquote>\n<h1 id=\"defining-the-states\">Defining the states:</h1>\n<ul>\n<li><p>state 0: starting state</p>\n</li>\n<li><p>state 1:From state 0 whenever it sees a 1 or 2, it moves to state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 1:From state 1 whenever it sees a 1 or 2, it remains in state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it moves to state 2+pops from the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it remains in state 2+pops from the stack</p>\n</li>\n<li><p>state 3:From state 0, if it sees a 0,it moves to state 3,the rejected state</p>\n</li>\n<li><p>state 3:From state 2, if it sees a 1 or 2 , it moves to state 3, the rejected state</p>\n</li>\n<li><p>state 3:If at the end, the stack is not empty, it moves to state 3,the rejected state</p>\n</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#stack functions</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">a,list1</span>):\n    <span class=\"hljs-comment\">#pushing to the stack/adding to the top of the stack</span>\n    list1.append(a)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">list1</span>):\n    <span class=\"hljs-comment\">#for poping from the stack/removing the top element of the stack</span>\n    index=<span class=\"hljs-built_in\">len</span>(list1)-<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> (index&amp;gt;<span class=\"hljs-number\">0</span>):\n        list1.pop(index)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#    Q={0,1,2,3}</span>\n<span class=\"hljs-comment\">#    Sigma={0,1,2}</span>\n<span class=\"hljs-comment\">#    Starting state={0}</span>\n<span class=\"hljs-comment\">#    Z=#</span>\n<span class=\"hljs-comment\">#    F={2}</span>\n\n<span class=\"hljs-comment\">#setting the initial stack symbol</span>\nstack=[<span class=\"hljs-string\">'#'</span>]\n<span class=\"hljs-comment\">#setting the starting state</span>\nstate=<span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#taking the input</span>\ninput_string=<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">'Enter the String:'</span>)\n\n<span class=\"hljs-comment\">#performing the operations</span>\nl=<span class=\"hljs-built_in\">len</span>(input_string)\ni=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> l%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l//<span class=\"hljs-number\">2</span>:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> letter <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]:\n            push(letter,stack)\n            state=<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;state=1\")</span>\n        <span class=\"hljs-keyword\">else</span> :\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;1.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">if</span> letter==<span class=\"hljs-number\">0</span>:\n            state=<span class=\"hljs-number\">2</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=2\")</span>\n            pop(stack)\n        <span class=\"hljs-keyword\">else</span>:\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>:\n    state=<span class=\"hljs-number\">3</span>\n    <span class=\"hljs-comment\">#print(\"3state=3\")</span>\n    \n<span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(stack)!=<span class=\"hljs-number\">1</span>:\n    state=<span class=\"hljs-number\">3</span>\n    \n<span class=\"hljs-comment\">#print(state)</span>\n<span class=\"hljs-comment\">#print(len(stack))</span>\n\n<span class=\"hljs-comment\">#checking the final state and displaying the result</span>\n<span class=\"hljs-keyword\">if</span>(state==<span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is accepted\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is rejected\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\">Enter the <span class=\"hljs-built_in\">String</span>:<span class=\"hljs-number\">123456</span>\nThe <span class=\"hljs-built_in\">String</span> <span class=\"hljs-keyword\">is</span> rejected\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"a-simple-implementation-of-push-down-automaton\">A Simple Implementation of Push Down Automaton:</h2>\n</div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"defining-the-6-tuples\">Defining the 6 tuples:</h2>\n<blockquote>\n<ul>\n<li> Q--&gt;finite set of sets</li>\n<li> Sigma--&gt;finite set of input alphabet</li>\n<li> Gamma--&gt;finite set of stack alphabet</li>\n<li> Delta--&gt;transition relation</li>\n<li> Q0--&gt;start state</li>\n<li> Z--&gt;initial stack symbol</li>\n<li> F--&gt;set of accepting states</li>\n</ul>\n</blockquote>\n<h1 id=\"defining-the-states\">Defining the states:</h1>\n<ul>\n<li><p>state 0: starting state</p>\n</li>\n<li><p>state 1:From state 0 whenever it sees a 1 or 2, it moves to state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 1:From state 1 whenever it sees a 1 or 2, it remains in state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it moves to state 2+pops from the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it remains in state 2+pops from the stack</p>\n</li>\n<li><p>state 3:From state 0, if it sees a 0,it moves to state 3,the rejected state</p>\n</li>\n<li><p>state 3:From state 2, if it sees a 1 or 2 , it moves to state 3, the rejected state</p>\n</li>\n<li><p>state 3:If at the end, the stack is not empty, it moves to state 3,the rejected state</p>\n</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#stack functions</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">a,list1</span>):\n    <span class=\"hljs-comment\">#pushing to the stack/adding to the top of the stack</span>\n    list1.append(a)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">list1</span>):\n    <span class=\"hljs-comment\">#for poping from the stack/removing the top element of the stack</span>\n    index=<span class=\"hljs-built_in\">len</span>(list1)-<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> (index&amp;gt;<span class=\"hljs-number\">0</span>):\n        list1.pop(index)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#    Q={0,1,2,3}</span>\n<span class=\"hljs-comment\">#    Sigma={0,1,2}</span>\n<span class=\"hljs-comment\">#    Starting state={0}</span>\n<span class=\"hljs-comment\">#    Z=#</span>\n<span class=\"hljs-comment\">#    F={2}</span>\n\n<span class=\"hljs-comment\">#setting the initial stack symbol</span>\nstack=[<span class=\"hljs-string\">'#'</span>]\n<span class=\"hljs-comment\">#setting the starting state</span>\nstate=<span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#taking the input</span>\ninput_string=<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">'Enter the String:'</span>)\n\n<span class=\"hljs-comment\">#performing the operations</span>\nl=<span class=\"hljs-built_in\">len</span>(input_string)\ni=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> l%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l//<span class=\"hljs-number\">2</span>:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> letter <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]:\n            push(letter,stack)\n            state=<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;state=1\")</span>\n        <span class=\"hljs-keyword\">else</span> :\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;1.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">if</span> letter==<span class=\"hljs-number\">0</span>:\n            state=<span class=\"hljs-number\">2</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=2\")</span>\n            pop(stack)\n        <span class=\"hljs-keyword\">else</span>:\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>:\n    state=<span class=\"hljs-number\">3</span>\n    <span class=\"hljs-comment\">#print(\"3state=3\")</span>\n    \n<span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(stack)!=<span class=\"hljs-number\">1</span>:\n    state=<span class=\"hljs-number\">3</span>\n    \n<span class=\"hljs-comment\">#print(state)</span>\n<span class=\"hljs-comment\">#print(len(stack))</span>\n\n<span class=\"hljs-comment\">#checking the final state and displaying the result</span>\n<span class=\"hljs-keyword\">if</span>(state==<span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is accepted\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is rejected\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\">Enter the <span class=\"hljs-built_in\">String</span>:<span class=\"hljs-number\">123456</span>\nThe <span class=\"hljs-built_in\">String</span> <span class=\"hljs-keyword\">is</span> rejected\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"a-simple-implementation-of-push-down-automaton\">A Simple Implementation of Push Down Automaton:</h2>\n</div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"defining-the-6-tuples\">Defining the 6 tuples:</h2>\n<blockquote>\n<ul>\n<li> Q--&gt;finite set of sets</li>\n<li> Sigma--&gt;finite set of input alphabet</li>\n<li> Gamma--&gt;finite set of stack alphabet</li>\n<li> Delta--&gt;transition relation</li>\n<li> Q0--&gt;start state</li>\n<li> Z--&gt;initial stack symbol</li>\n<li> F--&gt;set of accepting states</li>\n</ul>\n</blockquote>\n<h1 id=\"defining-the-states\">Defining the states:</h1>\n<ul>\n<li><p>state 0: starting state</p>\n</li>\n<li><p>state 1:From state 0 whenever it sees a 1 or 2, it moves to state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 1:From state 1 whenever it sees a 1 or 2, it remains in state 1+pushes the element onto the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it moves to state 2+pops from the stack</p>\n</li>\n<li><p>state 2:From state 1 whenever it sees a 0, it remains in state 2+pops from the stack</p>\n</li>\n<li><p>state 3:From state 0, if it sees a 0,it moves to state 3,the rejected state</p>\n</li>\n<li><p>state 3:From state 2, if it sees a 1 or 2 , it moves to state 3, the rejected state</p>\n</li>\n<li><p>state 3:If at the end, the stack is not empty, it moves to state 3,the rejected state</p>\n</li>\n</ul>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-comment\">#stack functions</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">a,list1</span>):\n    <span class=\"hljs-comment\">#pushing to the stack/adding to the top of the stack</span>\n    list1.append(a)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">list1</span>):\n    <span class=\"hljs-comment\">#for poping from the stack/removing the top element of the stack</span>\n    index=<span class=\"hljs-built_in\">len</span>(list1)-<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> (index&amp;gt;<span class=\"hljs-number\">0</span>):\n        list1.pop(index)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#    Q={0,1,2,3}</span>\n<span class=\"hljs-comment\">#    Sigma={0,1,2}</span>\n<span class=\"hljs-comment\">#    Starting state={0}</span>\n<span class=\"hljs-comment\">#    Z=#</span>\n<span class=\"hljs-comment\">#    F={2}</span>\n\n<span class=\"hljs-comment\">#setting the initial stack symbol</span>\nstack=[<span class=\"hljs-string\">'#'</span>]\n<span class=\"hljs-comment\">#setting the starting state</span>\nstate=<span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">#taking the input</span>\ninput_string=<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">'Enter the String:'</span>)\n\n<span class=\"hljs-comment\">#performing the operations</span>\nl=<span class=\"hljs-built_in\">len</span>(input_string)\ni=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">if</span> l%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l//<span class=\"hljs-number\">2</span>:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> letter <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]:\n            push(letter,stack)\n            state=<span class=\"hljs-number\">1</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;state=1\")</span>\n        <span class=\"hljs-keyword\">else</span> :\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;1.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">while</span> i&amp;lt;l:\n        letter=<span class=\"hljs-built_in\">int</span>(input_string[i])\n        <span class=\"hljs-comment\">#print(letter)</span>\n        <span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">if</span> letter==<span class=\"hljs-number\">0</span>:\n            state=<span class=\"hljs-number\">2</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=2\")</span>\n            pop(stack)\n        <span class=\"hljs-keyword\">else</span>:\n            state=<span class=\"hljs-number\">3</span>\n            <span class=\"hljs-comment\">#print(\"&amp;gt;2.state=3\")</span>\n            <span class=\"hljs-keyword\">break</span>\n        i+=<span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">else</span>:\n    state=<span class=\"hljs-number\">3</span>\n    <span class=\"hljs-comment\">#print(\"3state=3\")</span>\n    \n<span class=\"hljs-keyword\">if</span> state==<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(stack)!=<span class=\"hljs-number\">1</span>:\n    state=<span class=\"hljs-number\">3</span>\n    \n<span class=\"hljs-comment\">#print(state)</span>\n<span class=\"hljs-comment\">#print(len(stack))</span>\n\n<span class=\"hljs-comment\">#checking the final state and displaying the result</span>\n<span class=\"hljs-keyword\">if</span>(state==<span class=\"hljs-number\">2</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is accepted\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The String is rejected\"</span>)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\">Enter the <span class=\"hljs-built_in\">String</span>:<span class=\"hljs-number\">123456</span>\nThe <span class=\"hljs-built_in\">String</span> <span class=\"hljs-keyword\">is</span> rejected\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "Automaton/Pushdown_Automata_Implementation.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/Automaton/Pushdown_Automata_Implementation.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;## A Simple Implementation of Push Down Automaton:&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;##    Defining the 6 tuples:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;&gt;  *  Q--&gt;finite set of sets\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;&gt;  *  Sigma--&gt;finite set of input alphabet\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;&gt;  *  Gamma--&gt;finite set of stack alphabet\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;&gt;  *  Delta--&gt;transition relation\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;&gt;  *  Q0--&gt;start state\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;&gt;  *  Z--&gt;initial stack symbol\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;&gt;  *  F--&gt;set of accepting states\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;# Defining the states:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;* state 0: starting state\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;* state 1:From state 0 whenever it sees a 1 or 2, it moves to state 1+pushes the element onto the stack\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;* state 1:From state 1 whenever it sees a 1 or 2, it remains in state 1+pushes the element onto the stack\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;* state 2:From state 1 whenever it sees a 0, it moves to state 2+pops from the stack\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;* state 2:From state 1 whenever it sees a 0, it remains in state 2+pops from the stack\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;* state 3:From state 0, if it sees a 0,it moves to state 3,the rejected state\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;* state 3:From state 2, if it sees a 1 or 2 , it moves to state 3, the rejected state\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;* state 3:If at the end, the stack is not empty, it moves to state 3,the rejected state\\n&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-string\">&quot;Enter the String:123456\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;The String is rejected\\n&quot;</span>\n     <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;#stack functions\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def push(a,list1):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    #pushing to the stack/adding to the top of the stack\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    list1.append(a)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def pop(list1):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    #for poping from the stack/removing the top element of the stack\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    index=len(list1)-1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    if (index&gt;0):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        list1.pop(index)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        return 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        return 0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#    Q={0,1,2,3}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#    Sigma={0,1,2}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#    Starting state={0}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#    Z=#\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#    F={2}\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#setting the initial stack symbol\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;stack=[&#x27;#&#x27;]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#setting the starting state\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;state=0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#taking the input\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;input_string=input(&#x27;Enter the String:&#x27;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#performing the operations\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;l=len(input_string)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;i=0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;if l%2==0:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    while i&lt;l//2:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        letter=int(input_string[i])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        #print(letter)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        if letter in [1,2]:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            push(letter,stack)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            state=1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            #print(\\&quot;&gt;state=1\\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        else :\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            state=3\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            #print(\\&quot;&gt;1.state=3\\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            break\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        i+=1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    while i&lt;l:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        letter=int(input_string[i])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        #print(letter)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        if state==3:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            break\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        if letter==0:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            state=2\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            #print(\\&quot;&gt;2.state=2\\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            pop(stack)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            state=3\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            #print(\\&quot;&gt;2.state=3\\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            break\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        i+=1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    state=3\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    #print(\\&quot;3state=3\\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;if state==2 and len(stack)!=1:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    state=3\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#print(state)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#print(len(stack))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;#checking the final state and displaying the result\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;if(state==2):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    print(\\&quot;The String is accepted\\&quot;)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;else:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    print(\\&quot;The String is rejected\\&quot;)&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;language&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.7.4&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-punctuation\">}</span>\n"
    }
  },
  "contributors": [
    {
      "name": "DeepankarAcharyya",
      "email": "deepankaracharyya@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
