{
  "slug": "stack-using-linked-lists",
  "name": "Stack Using Linked Lists",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/linked_list/stack_using_linked_lists.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/linked_list/stack_using_linked_lists.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> info;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">link</span>;</span>\n};\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">top</span> =</span> <span class=\"hljs-literal\">NULL</span>, *temp;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *)</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>, item;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t****stack using linked list****\\n&quot;</span>);\n    <span class=\"hljs-keyword\">while</span> (x != <span class=\"hljs-number\">4</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n1. Push\\n2. Pop\\n3. Display\\n4. Exit\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter your choice: &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;x);\n        <span class=\"hljs-keyword\">switch</span> (x)\n        {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            push(top);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            pop(top);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            display(top);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *p)</span>\n{\n    <span class=\"hljs-type\">int</span> item;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span>;</span>\n    temp = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter element to be inserted: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;item);\n    temp-&gt;info = item;\n\n    temp-&gt;link = top;\n    top = temp;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Inserted succesfully.\\n&quot;</span>);\n}\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *p)</span>\n{\n    <span class=\"hljs-type\">int</span> item;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span>;</span>\n\n    <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nStack is empty.\\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n    {\n        item = top-&gt;info;\n        temp = top;\n        top = top-&gt;link;\n        <span class=\"hljs-built_in\">free</span>(temp);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nElement popped is %d.\\n&quot;</span>, item);\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *p)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nStack is empty.\\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nElements in the stack are:\\n&quot;</span>);\n        <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t%d\\n&quot;</span>, p-&gt;info);\n            p = p-&gt;link;\n        }\n        <span class=\"hljs-comment\">// printf(&quot;%d\\n&quot;,p-&gt;info);</span>\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Suraj Patro",
      "email": "47288675+Suraj-Patro@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "vidhi2",
      "email": "vidhi2402@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
