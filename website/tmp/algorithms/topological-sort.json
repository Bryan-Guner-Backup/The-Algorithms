{
  "slug": "topological-sort",
  "name": "Topological Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/topological_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/topological_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Topological Sort.&quot;&quot;&quot;</span>\n\n<span class=\"hljs-comment\">#     a</span>\n<span class=\"hljs-comment\">#    / \\</span>\n<span class=\"hljs-comment\">#   b  c</span>\n<span class=\"hljs-comment\">#  / \\</span>\n<span class=\"hljs-comment\"># d  e</span>\nedges = {<span class=\"hljs-string\">&quot;a&quot;</span>: [<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>], <span class=\"hljs-string\">&quot;b&quot;</span>: [<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>], <span class=\"hljs-string\">&quot;c&quot;</span>: [], <span class=\"hljs-string\">&quot;d&quot;</span>: [], <span class=\"hljs-string\">&quot;e&quot;</span>: []}\nvertices = [<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">topological_sort</span>(<span class=\"hljs-params\">start, visited, sort</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Perform topolical sort on a directed acyclic graph.&quot;&quot;&quot;</span>\n    current = start\n    <span class=\"hljs-comment\"># add current to visited</span>\n    visited.append(current)\n    neighbors = edges[current]\n    <span class=\"hljs-keyword\">for</span> neighbor <span class=\"hljs-keyword\">in</span> neighbors:\n        <span class=\"hljs-comment\"># if neighbor not in visited, visit</span>\n        <span class=\"hljs-keyword\">if</span> neighbor <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> visited:\n            sort = topological_sort(neighbor, visited, sort)\n    <span class=\"hljs-comment\"># if all neighbors visited add current to sort</span>\n    sort.append(current)\n    <span class=\"hljs-comment\"># if all vertices haven&#x27;t been visited select a new one to visit</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(visited) != <span class=\"hljs-built_in\">len</span>(vertices):\n        <span class=\"hljs-keyword\">for</span> vertice <span class=\"hljs-keyword\">in</span> vertices:\n            <span class=\"hljs-keyword\">if</span> vertice <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> visited:\n                sort = topological_sort(vertice, visited, sort)\n    <span class=\"hljs-comment\"># return sort</span>\n    <span class=\"hljs-keyword\">return</span> sort\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    sort = topological_sort(<span class=\"hljs-string\">&quot;a&quot;</span>, [], [])\n    <span class=\"hljs-built_in\">print</span>(sort)\n"
    },
    "javascript": {
      "dir": "Sorts/TopologicalSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/TopologicalSort.js",
      "code": "\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TopologicalSorter</span> () {\n  <span class=\"hljs-keyword\">const</span> graph = {}\n  <span class=\"hljs-keyword\">let</span> isVisitedNode\n  <span class=\"hljs-keyword\">let</span> finishTimeCount\n  <span class=\"hljs-keyword\">let</span> finishingTimeList\n  <span class=\"hljs-keyword\">let</span> nextNode\n\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">addOrder</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">nodeA, nodeB</span>) {\n    nodeA = <span class=\"hljs-title class_\">String</span>(nodeA)\n    nodeB = <span class=\"hljs-title class_\">String</span>(nodeB)\n    graph[nodeA] = graph[nodeA] || []\n    graph[nodeA].<span class=\"hljs-title function_\">push</span>(nodeB)\n  }\n\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">sortAndGetOrderedItems</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    isVisitedNode = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-literal\">null</span>)\n    finishTimeCount = <span class=\"hljs-number\">0</span>\n    finishingTimeList = []\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> node <span class=\"hljs-keyword\">in</span> graph) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">hasOwnProperty</span>.<span class=\"hljs-title function_\">call</span>(graph, node) &amp;&amp; !isVisitedNode[node]) {\n        <span class=\"hljs-title function_\">dfsTraverse</span>(node)\n      }\n    }\n\n    finishingTimeList.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item1, item2</span>) {\n      <span class=\"hljs-keyword\">return</span> item1.<span class=\"hljs-property\">finishTime</span> &gt; item2.<span class=\"hljs-property\">finishTime</span> ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>\n    })\n\n    <span class=\"hljs-keyword\">return</span> finishingTimeList.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) { <span class=\"hljs-keyword\">return</span> value.<span class=\"hljs-property\">node</span> })\n  }\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">dfsTraverse</span> (node) {\n    isVisitedNode[node] = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">if</span> (graph[node]) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; graph[node].<span class=\"hljs-property\">length</span>; i++) {\n        nextNode = graph[node][i]\n        <span class=\"hljs-keyword\">if</span> (isVisitedNode[nextNode]) <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-title function_\">dfsTraverse</span>(nextNode)\n      }\n    }\n\n    finishingTimeList.<span class=\"hljs-title function_\">push</span>({\n      <span class=\"hljs-attr\">node</span>: node,\n      <span class=\"hljs-attr\">finishTime</span>: ++finishTimeCount\n    })\n  }\n}\n\n<span class=\"hljs-comment\">/* TEST */</span>\n<span class=\"hljs-keyword\">const</span> topoSorter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TopologicalSorter</span>()\ntopoSorter.<span class=\"hljs-title function_\">addOrder</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>)\ntopoSorter.<span class=\"hljs-title function_\">addOrder</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>)\ntopoSorter.<span class=\"hljs-title function_\">addOrder</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>)\ntopoSorter.<span class=\"hljs-title function_\">addOrder</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>)\ntopoSorter.<span class=\"hljs-title function_\">addOrder</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\ntopoSorter.<span class=\"hljs-title function_\">addOrder</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(topoSorter.<span class=\"hljs-title function_\">sortAndGetOrderedItems</span>())\n"
    },
    "c-plus-plus": {
      "dir": "graph/topological_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph/topological_sort.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> number_of_vertices,\n    number_of_edges;  <span class=\"hljs-comment\">// For number of Vertices (V) and number of edges (E)</span>\nstd::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt;&gt; graph;\nstd::vector&lt;<span class=\"hljs-type\">bool</span>&gt; visited;\nstd::vector&lt;<span class=\"hljs-type\">int</span>&gt; topological_order;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span> </span>{\n    visited[v] = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> u : graph[v]) {\n        <span class=\"hljs-keyword\">if</span> (!visited[u]) {\n            <span class=\"hljs-built_in\">dfs</span>(u);\n        }\n    }\n    topological_order.<span class=\"hljs-built_in\">push_back</span>(v);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">topological_sort</span><span class=\"hljs-params\">()</span> </span>{\n    visited.<span class=\"hljs-built_in\">assign</span>(number_of_vertices, <span class=\"hljs-literal\">false</span>);\n    topological_order.<span class=\"hljs-built_in\">clear</span>();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number_of_vertices; ++i) {\n        <span class=\"hljs-keyword\">if</span> (!visited[i]) {\n            <span class=\"hljs-built_in\">dfs</span>(i);\n        }\n    }\n    <span class=\"hljs-built_in\">reverse</span>(topological_order.<span class=\"hljs-built_in\">begin</span>(), topological_order.<span class=\"hljs-built_in\">end</span>());\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout\n        &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number of vertices and the number of directed edges\\n&quot;</span>;\n    std::cin &gt;&gt; number_of_vertices &gt;&gt; number_of_edges;\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>, y = <span class=\"hljs-number\">0</span>;\n    graph.<span class=\"hljs-built_in\">resize</span>(number_of_vertices, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;());\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; number_of_edges; ++i) {\n        std::cin &gt;&gt; x &gt;&gt; y;\n        x--, y--;  <span class=\"hljs-comment\">// to convert 1-indexed to 0-indexed</span>\n        graph[x].<span class=\"hljs-built_in\">push_back</span>(y);\n    }\n    <span class=\"hljs-built_in\">topological_sort</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Topological Order : \\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> v : topological_order) {\n        std::cout &lt;&lt; v + <span class=\"hljs-number\">1</span>\n                  &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span>;  <span class=\"hljs-comment\">// converting zero based indexing back to one based.</span>\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "data_structures/graphs/topological_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/graphs/topological_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX_SIZE 40  <span class=\"hljs-comment\">// Assume 40 nodes at max in graph</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INT_MIN 0</span>\n<span class=\"hljs-comment\">// A vertex of the graph</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> vertex;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\n};\n<span class=\"hljs-comment\">// Some declarations</span>\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span>\n{</span>\n    <span class=\"hljs-type\">int</span> numVertices;\n    <span class=\"hljs-type\">int</span> *visited;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *\n        *<span class=\"hljs-title\">adjLists</span>;</span>  <span class=\"hljs-comment\">// we need int** to store a two dimensional array. Similary,</span>\n                    <span class=\"hljs-comment\">// we need struct node** to store an array of Linked lists</span>\n};\n<span class=\"hljs-comment\">// Structure to create a stack, necessary for topological sorting</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span>\n{</span>\n    <span class=\"hljs-type\">int</span> arr[MAX_SIZE];\n    <span class=\"hljs-type\">int</span> top;\n};\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">topologicalSortHelper</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>, <span class=\"hljs-keyword\">struct</span> Graph *, <span class=\"hljs-keyword\">struct</span> Stack *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">topologicalSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *)</span>;\n<span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-title function_\">createStack</span><span class=\"hljs-params\">()</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *, <span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *)</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> vertices, edges, i, src, dst;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;vertices);\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> createGraph(vertices);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of edges\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;edges);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; edges; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Edge %d \\nEnter source: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination: &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dst);\n        addEdge(graph, src, dst);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;One topological sort order is:\\n&quot;</span>);\n    topologicalSort(graph);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">// Uncomment below part to get a ready-made example</span>\n    <span class=\"hljs-comment\">/*struct Graph* graph2 = createGraph(4);\n    addEdge(graph2, 0, 1);\n    addEdge(graph2, 0, 2);\n    addEdge(graph2, 1, 2);\n    addEdge(graph2, 2, 3);\n    printf(&quot;One topological sort is:\\n&quot;);\n    topologicalSort(graph2);\n    printf(&quot;\\n&quot;);*/</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">topologicalSortHelper</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertex, <span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-built_in\">stack</span>)</span>\n{\n    graph-&gt;visited[vertex] = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">adjList</span> =</span> graph-&gt;adjLists[vertex];\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> adjList;\n    <span class=\"hljs-comment\">// First add all dependents (that is, children) to stack</span>\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-type\">int</span> connectedVertex = temp-&gt;vertex;\n        <span class=\"hljs-keyword\">if</span> (graph-&gt;visited[connectedVertex] == <span class=\"hljs-number\">0</span>)\n        {\n            topologicalSortHelper(connectedVertex, graph, <span class=\"hljs-built_in\">stack</span>);\n        }\n        temp = temp-&gt;next;\n    }\n    <span class=\"hljs-comment\">// and then add itself</span>\n    push(<span class=\"hljs-built_in\">stack</span>, vertex);\n}\n\n<span class=\"hljs-comment\">// Recursive topologial sort approach</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">topologicalSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> *<span class=\"hljs-title\">stack</span> =</span> createStack();\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; graph-&gt;numVertices; i++)\n    {\n        <span class=\"hljs-comment\">// Execute topological sort on all elements</span>\n        <span class=\"hljs-keyword\">if</span> (graph-&gt;visited[i] == <span class=\"hljs-number\">0</span>)\n        {\n            topologicalSortHelper(i, graph, <span class=\"hljs-built_in\">stack</span>);\n        }\n    }\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">stack</span>-&gt;top != <span class=\"hljs-number\">-1</span>) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, pop(<span class=\"hljs-built_in\">stack</span>));\n}\n<span class=\"hljs-comment\">// Allocate memory for a node</span>\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    newNode-&gt;vertex = v;\n    newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> newNode;\n}\n<span class=\"hljs-comment\">// Allocate memory for the entire graph structure</span>\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertices)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Graph));\n    graph-&gt;numVertices = vertices;\n    graph-&gt;adjLists = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node *));\n    graph-&gt;visited = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; vertices; i++)\n    {\n        graph-&gt;adjLists[i] = <span class=\"hljs-literal\">NULL</span>;\n        graph-&gt;visited[i] = <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> graph;\n}\n<span class=\"hljs-comment\">// Creates a unidirectional graph</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dest)</span>\n{\n    <span class=\"hljs-comment\">// Add edge from src to dest</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> createNode(dest);\n    newNode-&gt;next = graph-&gt;adjLists[src];\n    graph-&gt;adjLists[src] = newNode;\n}\n<span class=\"hljs-comment\">// Utility function to see state of graph at a given time</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph)</span>\n{\n    <span class=\"hljs-type\">int</span> v;\n    <span class=\"hljs-keyword\">for</span> (v = <span class=\"hljs-number\">0</span>; v &lt; graph-&gt;numVertices; v++)\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> graph-&gt;adjLists[v];\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n Adjacency list of vertex %d\\n &quot;</span>, v);\n        <span class=\"hljs-keyword\">while</span> (temp)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d -&gt; &quot;</span>, temp-&gt;vertex);\n            temp = temp-&gt;next;\n        }\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    }\n}\n<span class=\"hljs-comment\">// Creates a stack</span>\n<span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-title function_\">createStack</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Stack</span> *<span class=\"hljs-title\">stack</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Stack));\n    <span class=\"hljs-built_in\">stack</span>-&gt;top = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stack</span>;\n}\n<span class=\"hljs-comment\">// Pushes element into stack</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-built_in\">stack</span>, <span class=\"hljs-type\">int</span> element)</span>\n{\n    <span class=\"hljs-built_in\">stack</span>-&gt;arr[++<span class=\"hljs-built_in\">stack</span>-&gt;top] =\n        element;  <span class=\"hljs-comment\">// Increment then add, as we start from -1</span>\n}\n<span class=\"hljs-comment\">// Removes element from stack, or returns INT_MIN if stack empty</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Stack *<span class=\"hljs-built_in\">stack</span>)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">stack</span>-&gt;top == <span class=\"hljs-number\">-1</span>)\n        <span class=\"hljs-keyword\">return</span> INT_MIN;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">stack</span>-&gt;arr[<span class=\"hljs-built_in\">stack</span>-&gt;top--];\n}\n"
    }
  },
  "contributors": [
    {
      "name": "PalAditya",
      "email": "adityapal.nghss@gmail.com",
      "commits": 1
    },
    {
      "name": "Connor Bottum",
      "email": "cbb692@gmail.com",
      "commits": 1
    },
    {
      "name": "Niranjan Godbole",
      "email": "niranjan8192@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ttuanho",
      "email": "hhoanhtuann@gmail.com",
      "commits": 1
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 1
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Zach Wild",
      "email": "zacharyjwild@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 2
    },
    {
      "name": "Abhishek Yadav",
      "email": "31253403+AbhiY98@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
