{
  "slug": "aliquot-sum",
  "name": "Aliquot Sum",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/aliquot_sum.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/aliquot_sum.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">aliquot_sum</span>(<span class=\"hljs-params\">input_num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Finds the aliquot sum of an input integer, where the\n    aliquot sum of a number n is defined as the sum of all\n    natural numbers less than n that divide n evenly. For\n    example, the aliquot sum of 15 is 1 + 3 + 5 = 9. This is\n    a simple O(n) implementation.\n    @param input_num: a positive integer whose aliquot sum is to be found\n    @return: the aliquot sum of input_num, if input_num is positive.\n    Otherwise, raise a ValueError\n    Wikipedia Explanation: https://en.wikipedia.org/wiki/Aliquot_sum\n\n    &gt;&gt;&gt; aliquot_sum(15)\n    9\n    &gt;&gt;&gt; aliquot_sum(6)\n    6\n    &gt;&gt;&gt; aliquot_sum(-1)\n    Traceback (most recent call last):\n      ...\n    ValueError: Input must be positive\n    &gt;&gt;&gt; aliquot_sum(0)\n    Traceback (most recent call last):\n      ...\n    ValueError: Input must be positive\n    &gt;&gt;&gt; aliquot_sum(1.6)\n    Traceback (most recent call last):\n      ...\n    ValueError: Input must be an integer\n    &gt;&gt;&gt; aliquot_sum(12)\n    16\n    &gt;&gt;&gt; aliquot_sum(1)\n    0\n    &gt;&gt;&gt; aliquot_sum(19)\n    1\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(input_num, <span class=\"hljs-built_in\">int</span>):\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Input must be an integer&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> input_num &lt;= <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Input must be positive&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(\n        divisor <span class=\"hljs-keyword\">for</span> divisor <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, input_num // <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">if</span> input_num % divisor == <span class=\"hljs-number\">0</span>\n    )\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "java": {
      "dir": "Maths/AliquotSum.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/AliquotSum.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-comment\">/**\n * In number theory, the aliquot sum s(n) of a positive integer n is the sum of all proper divisors\n * of n, that is, all divisors of n other than n itself. For example, the proper divisors of 15\n * (that is, the positive divisors of 15 that are not equal to 15) are 1, 3 and 5, so the aliquot\n * sum of 15 is 9 i.e. (1 + 3 + 5). Wikipedia: https://en.wikipedia.org/wiki/Aliquot_sum\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AliquotSum</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span> == <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">6</span>)</span> == <span class=\"hljs-number\">6</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">15</span>)</span> == <span class=\"hljs-number\">9</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-number\">19</span>)</span> == <span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Finds the aliquot sum of an integer number\n   *\n   * <span class=\"hljs-doctag\">@param</span> number a positive integer\n   * <span class=\"hljs-doctag\">@return</span> aliquot sum of given {<span class=\"hljs-doctag\">@code</span> number}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">aliquotSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>, limit = number / <span class=\"hljs-number\">2</span>; i &lt;= limit; ++i) {\n      <span class=\"hljs-keyword\">if</span> (number % i == <span class=\"hljs-number\">0</span>) {\n        sum += i;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> sum;\n  }\n}\n"
    },
    "ruby": {
      "dir": "maths/aliquot_sum.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/aliquot_sum.rb",
      "code": "<span class=\"hljs-comment\"># frozen_string_literal: true</span>\n\nrequire_relative <span class=\"hljs-string\">&#x27;./square_root&#x27;</span>\nrequire_relative <span class=\"hljs-string\">&#x27;./ceil&#x27;</span>\n\n<span class=\"hljs-comment\"># Calculates the aliquot sum of a number (the sum of all proper divisors of a number)</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AliquotSum</span></span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> &lt;&lt; self</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span><span class=\"hljs-params\">(number)</span></span>\n      divisors(number).sum\n    <span class=\"hljs-keyword\">end</span>\n\n    private\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">divisors</span><span class=\"hljs-params\">(number)</span></span>\n      low_divisors = (<span class=\"hljs-number\">1</span>..Ceil.call(SquareRoot.call(number))).select { <span class=\"hljs-params\">|num|</span> (number % num).zero? }\n      high_divisors = low_divisors.map { <span class=\"hljs-params\">|div|</span> number / div }\n      (low_divisors + high_divisors).uniq - [number]\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Eli Sadoff",
      "email": "eli.sadoff@broadlume.com",
      "commits": 1
    },
    {
      "name": "Kenneth P",
      "email": "41343159+ken437@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
