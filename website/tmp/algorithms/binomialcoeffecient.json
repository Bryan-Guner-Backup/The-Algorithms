{
  "slug": "binomialcoeffecient",
  "name": "Binomialcoeffecient",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "go": {
      "dir": "dynamicprogramming/binomialcoeffecient.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamicprogramming/binomialcoeffecient.go",
      "code": "<span class=\"hljs-keyword\">package</span> dynamicprogramming\n\n<span class=\"hljs-comment\">// func main() {</span>\n<span class=\"hljs-comment\">// \tmyArrayOfK := [4]int{5, 6, 7, 8}</span>\n<span class=\"hljs-comment\">// \tvar x int</span>\n\n<span class=\"hljs-comment\">// \tfmt.Println(&quot;\\nBinomial Coefficient Using Dynamic Programming:&quot;, bin2(50, 5))</span>\n<span class=\"hljs-comment\">// \tfor _, element := range myArrayOfK {</span>\n<span class=\"hljs-comment\">// \t\tstart := time.Now()</span>\n<span class=\"hljs-comment\">// \t\tx = bin2(50, element)</span>\n<span class=\"hljs-comment\">// \t\telapsed := time.Since(start)</span>\n<span class=\"hljs-comment\">// \t\tfmt.Println(&quot;bin2 (50,&quot;, element, &quot;) = &quot;, x, &quot;    took &quot;, elapsed)</span>\n\n<span class=\"hljs-comment\">// \t}</span>\n\n<span class=\"hljs-comment\">// }</span>\n\n<span class=\"hljs-comment\">// Bin2 function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Bin2</span><span class=\"hljs-params\">(n <span class=\"hljs-keyword\">int</span>, k <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">var</span> i, j <span class=\"hljs-keyword\">int</span>\n\tB := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-keyword\">int</span>, (n + <span class=\"hljs-number\">1</span>))\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> B {\n\t\tB[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, k+<span class=\"hljs-number\">1</span>)\n\t}\n\n\t<span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">0</span>; i &lt;= n; i++ {\n\t\t<span class=\"hljs-keyword\">for</span> j = <span class=\"hljs-number\">0</span>; j &lt;= Min(i, k); j++ {\n\t\t\t<span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-number\">0</span> || j == i {\n\t\t\t\tB[i][j] = <span class=\"hljs-number\">1</span>\n\t\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t\tB[i][j] = B[i<span class=\"hljs-number\">-1</span>][j<span class=\"hljs-number\">-1</span>] + B[i<span class=\"hljs-number\">-1</span>][j]\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> B[n][k]\n}\n\n<span class=\"hljs-comment\">// Min function - possible duplicate</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Min</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">if</span> a &lt; b {\n\t\t<span class=\"hljs-keyword\">return</span> a\n\t}\n\t<span class=\"hljs-keyword\">return</span> b\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Daniel Garcia",
      "email": "dgarcia1@umassd.edu",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
