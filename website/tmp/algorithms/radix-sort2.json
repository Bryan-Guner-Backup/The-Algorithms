{
  "slug": "radix-sort2",
  "name": "Radix Sort2",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/radix_sort2.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/radix_sort2.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Algorithm of [Radix sort](https://en.wikipedia.org/wiki/Radix_sort)\n * @author [Suyash Jaiswal](https://github.com/Suyashjaiswal)\n * @details\n * Sort the vector of unsigned integers using radix sort i.e. sorting digit by\n * digit using [Counting Sort](https://en.wikipedia.org/wiki/Counting_sort) as\n * subroutine. Running time of radix sort is O(d*(n+b)) where b is the base for\n * representing numbers and d in the max digits in input integers and n is\n * number of unsigned integers. consider example for n = 5, aray elements =\n * 432,234,143,332,123 sorting digit by digit sorting according to 1) 1st digit\n * place\n * =&gt; 432, 332, 143, 123, 234\n *\n * 2) 2nd digit place\n * =&gt; 123, 432, 332, 234, 143\n *\n * 3) 3rd digit place\n * =&gt; 123, 143, 234, 332, 432\n *\n * using count sort at each step, which is stable.\n * stable =&gt; already sorted according to previous digits.\n */</span>\n\n<span class=\"hljs-comment\">/// header files</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for collection of functions</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>  <span class=\"hljs-comment\">/// for a macro called assert which can be used to verify assumptions</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/**\n * @namespace radix_sort\n * @brief Functions for [Radix sort](https://en.wikipedia.org/wiki/Radix_sort)\n * algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> radix_sort {\n<span class=\"hljs-comment\">/**\n * @brief Function to sort vector according to current digit using stable\n * sorting.\n * @param cur_digit - sort according to the cur_digit\n * @param ar - vector to be sorted\n * @returns std::vector sorted till ith digit\n */</span>\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">step_ith</span><span class=\"hljs-params\">(\n    <span class=\"hljs-type\">uint16_t</span> cur_digit,\n    <span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;&amp; ar)</span> </span>{  <span class=\"hljs-comment\">// sorting according to current digit.</span>\n    <span class=\"hljs-type\">int</span> n = ar.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint32_t</span>&gt; <span class=\"hljs-title\">position</span><span class=\"hljs-params\">(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">0</span>)</span></span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        position[(ar[i] / cur_digit) %\n                 <span class=\"hljs-number\">10</span>]++;  <span class=\"hljs-comment\">// counting frequency of 0-9 at cur_digit.</span>\n    }\n    <span class=\"hljs-type\">int</span> cur = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; ++i) {\n        <span class=\"hljs-type\">int</span> a = position[i];\n        position[i] = cur;  <span class=\"hljs-comment\">// assingning starting position of 0-9.</span>\n        cur += a;\n    }\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">temp</span><span class=\"hljs-params\">(n)</span></span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        temp[position[(ar[i] / cur_digit) % <span class=\"hljs-number\">10</span>]] =\n            ar[i];  <span class=\"hljs-comment\">// storing ar[i] in ar[i]&#x27;s cur_digit expected position of</span>\n                    <span class=\"hljs-comment\">// this step.</span>\n        position[(ar[i] / cur_digit) %\n                 <span class=\"hljs-number\">10</span>]++;  <span class=\"hljs-comment\">// incrementing ar[i]&#x27;s cur_digit position by 1, as</span>\n                         <span class=\"hljs-comment\">// current place used by ar[i].</span>\n    }\n    <span class=\"hljs-keyword\">return</span> temp;\n}\n<span class=\"hljs-comment\">/**\n * @brief Function to sort vector digit by digit.\n * @param ar - vector to be sorted\n * @returns sorted vector\n */</span>\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">radix</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;&amp; ar)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> max_ele =\n        *<span class=\"hljs-built_in\">max_element</span>(ar.<span class=\"hljs-built_in\">begin</span>(), ar.<span class=\"hljs-built_in\">end</span>());  <span class=\"hljs-comment\">// returns the max element.</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; temp = ar;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; max_ele / i &gt; <span class=\"hljs-number\">0</span>;\n         i *= <span class=\"hljs-number\">10</span>) {  <span class=\"hljs-comment\">// loop breaks when i &gt; max_ele because no further digits</span>\n                     <span class=\"hljs-comment\">// left to makes changes in aray.</span>\n        temp = <span class=\"hljs-built_in\">step_ith</span>(i, temp);\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i : temp) {\n        std::cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    <span class=\"hljs-keyword\">return</span> temp;\n}\n}  <span class=\"hljs-comment\">// namespace radix_sort</span>\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function to test the above algorithm\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">/// Test 1</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; ar1 = {<span class=\"hljs-number\">432</span>, <span class=\"hljs-number\">234</span>, <span class=\"hljs-number\">143</span>, <span class=\"hljs-number\">332</span>, <span class=\"hljs-number\">123</span>};\n    ar1 = sorting::radix_sort::<span class=\"hljs-built_in\">radix</span>(ar1);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(ar1.<span class=\"hljs-built_in\">begin</span>(), ar1.<span class=\"hljs-built_in\">end</span>()));\n    <span class=\"hljs-comment\">/// Test 2</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; ar2 = {<span class=\"hljs-number\">213</span>, <span class=\"hljs-number\">3214</span>, <span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-number\">112</span>, <span class=\"hljs-number\">142</span>,\n                                 <span class=\"hljs-number\">133</span>, <span class=\"hljs-number\">132</span>,  <span class=\"hljs-number\">32</span>,  <span class=\"hljs-number\">12</span>,  <span class=\"hljs-number\">113</span>};\n    ar2 = sorting::radix_sort::<span class=\"hljs-built_in\">radix</span>(ar2);\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(ar2.<span class=\"hljs-built_in\">begin</span>(), ar2.<span class=\"hljs-built_in\">end</span>()));\n}\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">tests</span>();  <span class=\"hljs-comment\">// execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "sorting/radix_sort_2.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/radix_sort_2.c",
      "code": "<span class=\"hljs-comment\">// sorting of array list using Radix sort</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> range 10  <span class=\"hljs-comment\">// Range for integers is 10 as digits range from 0-9</span></span>\r\n\r\n<span class=\"hljs-comment\">// Utility function to get the maximum value in ar[]</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">MAX</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *ar, <span class=\"hljs-type\">int</span> size)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, max = ar[<span class=\"hljs-number\">0</span>];\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\r\n    {\r\n        <span class=\"hljs-keyword\">if</span> (ar[i] &gt; max)\r\n            max = ar[i];\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> max;\r\n}\r\n\r\n<span class=\"hljs-comment\">// Counting sort according to the digit represented by place</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">countSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> place)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, freq[range] = {<span class=\"hljs-number\">0</span>};\r\n    <span class=\"hljs-type\">int</span> *output = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n\r\n    <span class=\"hljs-comment\">// Store count of occurences in freq[]</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) freq[(arr[i] / place) % range]++;\r\n\r\n    <span class=\"hljs-comment\">// Change freq[i] so that it contains the actual position of the digit in</span>\r\n    <span class=\"hljs-comment\">// output[]</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; range; i++) freq[i] += freq[i - <span class=\"hljs-number\">1</span>];\r\n\r\n    <span class=\"hljs-comment\">// Build the output array</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = n - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)\r\n    {\r\n        output[freq[(arr[i] / place) % range] - <span class=\"hljs-number\">1</span>] = arr[i];\r\n        freq[(arr[i] / place) % range]--;\r\n    }\r\n\r\n    <span class=\"hljs-comment\">// Copy the output array to arr[], so it contains numbers according to the</span>\r\n    <span class=\"hljs-comment\">// current digit</span>\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) arr[i] = output[i];\r\n    <span class=\"hljs-built_in\">free</span>(output);\r\n}\r\n\r\n<span class=\"hljs-comment\">/*This is where the sorting of the array takes place\r\n arr[] --- Array to be sorted\r\n n --- Array Size\r\n max --- Maximum element in Array\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">radixsort2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n,\r\n                <span class=\"hljs-type\">int</span> max)</span>  <span class=\"hljs-comment\">// max is the maximum element in the array</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> mul = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">while</span> (max)\r\n    {\r\n        countSort(arr, n, mul);\r\n        mul *= <span class=\"hljs-number\">10</span>;\r\n        max /= <span class=\"hljs-number\">10</span>;\r\n    }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> N)</span>\r\n{\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d, &quot;</span>, arr[i]);\r\n    <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> n;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter size of array:\\n&quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);  <span class=\"hljs-comment\">// E.g. 8</span>\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements of the array\\n&quot;</span>);\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\r\n    {\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Original array: &quot;</span>);\r\n    display(arr, n);  <span class=\"hljs-comment\">// Original array : 10 11 9 8 4 7 3 8</span>\r\n\r\n    <span class=\"hljs-type\">int</span> max;\r\n    max = MAX(arr, n);\r\n\r\n    radixsort2(arr, n, max);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\r\n    display(arr, n);  <span class=\"hljs-comment\">// Sorted array : 3 4 7 8 8 9 10 11</span>\r\n\r\n    <span class=\"hljs-built_in\">free</span>(arr);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "Suyash Jaiswal",
      "email": "suyash.18je0864@am.iitism.ac.in",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
