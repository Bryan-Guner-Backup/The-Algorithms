{
  "slug": "recursive-traversals",
  "name": "Recursive Traversals",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/binary_trees/recursive_traversals.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/binary_trees/recursive_traversals.c",
      "code": "<span class=\"hljs-comment\">/* Includes the functions for Recursive Traversals\n   of a Binary Tree. It is assumed that nodes and\n   tree have been created as per create_node.c\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">inOrderTraversal</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// if tree is empty</span>\n        <span class=\"hljs-keyword\">return</span>;\n\n    inOrderTraversal(node-&gt;leftNode);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t%d\\t&quot;</span>, node-&gt;data);\n    inOrderTraversal(node-&gt;rightNode);\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">preOrderTraversal</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// if tree is empty</span>\n        <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t%d\\t&quot;</span>, node-&gt;data);\n    preOrderTraversal(node-&gt;leftNode);\n    preOrderTraversal(node-&gt;rightNode);\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">postOrderTraversal</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> node *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// if tree is empty</span>\n        <span class=\"hljs-keyword\">return</span>;\n\n    postOrderTraversal(node-&gt;leftNode);\n    postOrderTraversal(node-&gt;rightNode);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t%d\\t&quot;</span>, node-&gt;data);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-comment\">/* traversals can be done by simply invoking the\n       function with a pointer to the root node.\n    */</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}"
    }
  },
  "contributors": [
    {
      "name": "Naman Bhalla",
      "email": "namanbhalla1998@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
