{
  "slug": "trieimp",
  "name": "TrieImp",
  "categories": ["datastructures", "tree"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Trees/TrieImp.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Trees/TrieImp.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Trees;\n\n<span class=\"hljs-comment\">/**\n * Trie Data structure implementation without any libraries\n *\n * <span class=\"hljs-doctag\">@author</span> Dheeraj Kumar Barnwal (https://github.com/dheeraj92)\n */</span>\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TrieImp</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TrieNode</span> {\n    TrieNode[] child;\n    <span class=\"hljs-type\">boolean</span> end;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TrieNode</span><span class=\"hljs-params\">()</span> {\n      child = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>[<span class=\"hljs-number\">26</span>];\n      end = <span class=\"hljs-literal\">false</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> TrieNode root;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TrieImp</span><span class=\"hljs-params\">()</span> {\n    root = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(String word)</span> {\n    <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">currentNode</span> <span class=\"hljs-operator\">=</span> root;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; word.length(); i++) {\n      <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> currentNode.child[word.charAt(i) - <span class=\"hljs-string\">&#x27;a&#x27;</span>];\n      <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n        node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>();\n        currentNode.child[word.charAt(i) - <span class=\"hljs-string\">&#x27;a&#x27;</span>] = node;\n      }\n      currentNode = node;\n    }\n    currentNode.end = <span class=\"hljs-literal\">true</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(String word)</span> {\n    <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">currentNode</span> <span class=\"hljs-operator\">=</span> root;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; word.length(); i++) {\n      <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> word.charAt(i);\n      <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> currentNode.child[ch - <span class=\"hljs-string\">&#x27;a&#x27;</span>];\n      <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      }\n      currentNode = node;\n    }\n    <span class=\"hljs-keyword\">return</span> currentNode.end;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(String word)</span> {\n    <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">currentNode</span> <span class=\"hljs-operator\">=</span> root;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; word.length(); i++) {\n      <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> word.charAt(i);\n      <span class=\"hljs-type\">TrieNode</span> <span class=\"hljs-variable\">node</span> <span class=\"hljs-operator\">=</span> currentNode.child[ch - <span class=\"hljs-string\">&#x27;a&#x27;</span>];\n      <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      }\n      currentNode = node;\n    }\n    <span class=\"hljs-keyword\">if</span> (currentNode.end == <span class=\"hljs-literal\">true</span>) {\n      currentNode.end = <span class=\"hljs-literal\">false</span>;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sop</span><span class=\"hljs-params\">(String print)</span> {\n    System.out.println(print);\n  }\n\n  <span class=\"hljs-comment\">/** Regex to check if word contains only a-z character */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isValid</span><span class=\"hljs-params\">(String word)</span> {\n    <span class=\"hljs-keyword\">return</span> word.matches(<span class=\"hljs-string\">&quot;^[a-z]+$&quot;</span>);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">TrieImp</span> <span class=\"hljs-variable\">obj</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieImp</span>();\n    String word;\n    <span class=\"hljs-meta\">@SuppressWarnings(&quot;resource&quot;)</span>\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    sop(<span class=\"hljs-string\">&quot;string should contain only a-z character for all operation&quot;</span>);\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      sop(<span class=\"hljs-string\">&quot;1. Insert\\n2. Search\\n3. Delete\\n4. Quit&quot;</span>);\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> scan.nextInt();\n        <span class=\"hljs-keyword\">switch</span> (t) {\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            word = scan.next();\n            <span class=\"hljs-keyword\">if</span> (isValid(word)) obj.insert(word);\n            <span class=\"hljs-keyword\">else</span> sop(<span class=\"hljs-string\">&quot;Invalid string: allowed only a-z&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            word = scan.next();\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">resS</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n            <span class=\"hljs-keyword\">if</span> (isValid(word)) resS = obj.search(word);\n            <span class=\"hljs-keyword\">else</span> sop(<span class=\"hljs-string\">&quot;Invalid string: allowed only a-z&quot;</span>);\n            <span class=\"hljs-keyword\">if</span> (resS) sop(<span class=\"hljs-string\">&quot;word found&quot;</span>);\n            <span class=\"hljs-keyword\">else</span> sop(<span class=\"hljs-string\">&quot;word not found&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            word = scan.next();\n            <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">resD</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n            <span class=\"hljs-keyword\">if</span> (isValid(word)) resD = obj.delete(word);\n            <span class=\"hljs-keyword\">else</span> sop(<span class=\"hljs-string\">&quot;Invalid string: allowed only a-z&quot;</span>);\n            <span class=\"hljs-keyword\">if</span> (resD) {\n              sop(<span class=\"hljs-string\">&quot;word got deleted successfully&quot;</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n              sop(<span class=\"hljs-string\">&quot;word not found&quot;</span>);\n            }\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n            sop(<span class=\"hljs-string\">&quot;Quit successfully&quot;</span>);\n            System.exit(<span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">break</span>;\n          <span class=\"hljs-keyword\">default</span>:\n            sop(<span class=\"hljs-string\">&quot;Input int from 1-4&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        }\n      } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">badInput</span> <span class=\"hljs-operator\">=</span> scan.next();\n        sop(<span class=\"hljs-string\">&quot;This is bad input: &quot;</span> + badInput);\n      }\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Dheeraj Kumar Barnwal",
      "email": "dheerajraaj2@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
