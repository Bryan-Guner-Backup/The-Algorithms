{
  "slug": "jarvis-algorithm",
  "name": "Jarvis Algorithm",
  "categories": ["geometry"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "geometry/jarvis_algorithm.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/geometry/jarvis_algorithm.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Jarvis’s](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) algorithm.\n *\n * @details\n * Given a set of points in the plane. the convex hull of the set\n * is the smallest convex polygon that contains all the points of it.\n *\n * ### Algorithm\n * The idea of Jarvis’s Algorithm is simple, we start from the leftmost point\n * (or point with minimum x coordinate value) and we\n * keep wrapping points in counterclockwise direction.\n *\n * The idea is to use orientation() here. Next point is selected as the\n * point that beats all other points at counterclockwise orientation, i.e.,\n * next point is q if for any other point r,\n * we have “orientation(p, q, r) = counterclockwise”.\n *\n * For Example,\n * If points = {{0, 3}, {2, 2}, {1, 1}, {2, 1},\n                      {3, 0}, {0, 0}, {3, 3}};\n *\n * then the convex hull is\n * (0, 3), (0, 0), (3, 0), (3, 3)\n *\n * @author [Rishabh Agarwal](https://github.com/rishabh-997)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n *  @namespace geometry\n *  @brief Geometry algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> geometry {\n    <span class=\"hljs-comment\">/**\n     * @namespace jarvis\n     * @brief Functions for [Jarvis’s](https://en.wikipedia.org/wiki/Gift_wrapping_algorithm) algorithm\n     */</span>\n    <span class=\"hljs-keyword\">namespace</span> jarvis {\n        <span class=\"hljs-comment\">/**\n         * Structure defining the x and y co-ordinates of the given\n         * point in space\n         */</span>\n        <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n            <span class=\"hljs-type\">int</span> x, y;\n        };\n\n        <span class=\"hljs-comment\">/**\n         * Class which can be called from main and is globally available\n         * throughout the code\n         */</span>\n        <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Convexhull</span> {\n            std::vector&lt;Point&gt; points;\n            <span class=\"hljs-type\">int</span> size;\n\n        <span class=\"hljs-keyword\">public</span>:\n            <span class=\"hljs-comment\">/**\n             * Constructor of given class\n             *\n             * @param pointList list of all points in the space\n             * @param n number of points in space\n             */</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">Convexhull</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;Point&gt; &amp;pointList)</span> </span>{\n                points = pointList;\n                size = points.<span class=\"hljs-built_in\">size</span>();\n            }\n\n            <span class=\"hljs-comment\">/**\n             * Creates convex hull of a set of n points.\n             * There must be 3 points at least for the convex hull to exist\n             *\n             * @returns an vector array containing points in space\n             * which enclose all given points thus forming a hull\n             */</span>\n            <span class=\"hljs-function\">std::vector&lt;Point&gt; <span class=\"hljs-title\">getConvexHull</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{\n                <span class=\"hljs-comment\">// Initialize Result</span>\n                std::vector&lt;Point&gt; hull;\n\n                <span class=\"hljs-comment\">// Find the leftmost point</span>\n                <span class=\"hljs-type\">int</span> leftmost_point = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; size; i++) {\n                    <span class=\"hljs-keyword\">if</span> (points[i].x &lt; points[leftmost_point].x) {\n                        leftmost_point = i;\n                    }\n                }\n                <span class=\"hljs-comment\">// Start from leftmost point, keep moving counterclockwise</span>\n                <span class=\"hljs-comment\">// until reach the start point again.  This loop runs O(h)</span>\n                <span class=\"hljs-comment\">// times where h is number of points in result or output.</span>\n                <span class=\"hljs-type\">int</span> p = leftmost_point, q = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">do</span> {\n                    <span class=\"hljs-comment\">// Add current point to result</span>\n                    hull.<span class=\"hljs-built_in\">push_back</span>(points[p]);\n\n                    <span class=\"hljs-comment\">// Search for a point &#x27;q&#x27; such that orientation(p, x, q)</span>\n                    <span class=\"hljs-comment\">// is counterclockwise for all points &#x27;x&#x27;. The idea</span>\n                    <span class=\"hljs-comment\">// is to keep track of last visited most counter clock-</span>\n                    <span class=\"hljs-comment\">// wise point in q. If any point &#x27;i&#x27; is more counter clock-</span>\n                    <span class=\"hljs-comment\">// wise than q, then update q.</span>\n                    q = (p + <span class=\"hljs-number\">1</span>) % size;\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n                        <span class=\"hljs-comment\">// If i is more counterclockwise than current q, then</span>\n                        <span class=\"hljs-comment\">// update q</span>\n                        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">orientation</span>(points[p], points[i], points[q]) == <span class=\"hljs-number\">2</span>) {\n                            q = i;\n                        }\n                    }\n\n                    <span class=\"hljs-comment\">// Now q is the most counterclockwise with respect to p</span>\n                    <span class=\"hljs-comment\">// Set p as q for next iteration, so that q is added to</span>\n                    <span class=\"hljs-comment\">// result &#x27;hull&#x27;</span>\n                    p = q;\n\n                } <span class=\"hljs-keyword\">while</span> (p != leftmost_point);        <span class=\"hljs-comment\">// While we don&#x27;t come to first point</span>\n\n                <span class=\"hljs-keyword\">return</span> hull;\n            }\n\n            <span class=\"hljs-comment\">/**\n             * This function returns the geometric orientation for the three points\n             * in a space, ie, whether they are linear ir clockwise or\n             * anti-clockwise\n             * @param p first point selected\n             * @param q adjacent point for q\n             * @param r adjacent point for q\n             *\n             * @returns 0 -&gt; Linear\n             * @returns 1 -&gt; Clock Wise\n             * @returns 2 -&gt; Anti Clock Wise\n             */</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">orientation</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Point &amp;p, <span class=\"hljs-keyword\">const</span> Point &amp;q, <span class=\"hljs-keyword\">const</span> Point &amp;r)</span> </span>{\n                <span class=\"hljs-type\">int</span> val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\n                <span class=\"hljs-keyword\">if</span> (val == <span class=\"hljs-number\">0</span>) {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                }\n                <span class=\"hljs-keyword\">return</span> (val &gt; <span class=\"hljs-number\">0</span>) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">2</span>;\n            }\n\n        };\n\n    } <span class=\"hljs-comment\">// namespace jarvis</span>\n} <span class=\"hljs-comment\">// namespace geometry</span>\n\n<span class=\"hljs-comment\">/**\n * Test function\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;geometry::jarvis::Point&gt; points = {{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>},\n                                                   {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>},\n                                                   {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>},\n                                                   {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>},\n                                                   {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>},\n                                                   {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>},\n                                                   {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>}\n    };\n    geometry::<span class=\"hljs-function\">jarvis::Convexhull <span class=\"hljs-title\">hull</span><span class=\"hljs-params\">(points)</span></span>;\n    std::vector&lt;geometry::jarvis::Point&gt; actualPoint;\n    actualPoint = hull.<span class=\"hljs-built_in\">getConvexHull</span>();\n\n    std::vector&lt;geometry::jarvis::Point&gt; expectedPoint = {{<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>},\n                                                          {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>},\n                                                          {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>},\n                                                          {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>}};\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; expectedPoint.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-built_in\">assert</span>(actualPoint[i].x == expectedPoint[i].x);\n        <span class=\"hljs-built_in\">assert</span>(actualPoint[i].y == expectedPoint[i].y);\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test implementations passed!\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/** Driver Code */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Rishabh Agarwal",
      "email": "45125121+rishabh-997@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "rishabh-997",
      "email": "rishabh.agarwal997@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
