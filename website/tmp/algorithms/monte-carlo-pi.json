{
  "slug": "monte-carlo-pi",
  "name": "Monte Carlo Pi",
  "categories": ["others", "montecarlopi"],
  "body": {},
  "implementations": {
    "go": {
      "dir": "other/monte_carlo_pi/monte_carlo_pi.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/other/monte_carlo_pi/monte_carlo_pi.go",
      "code": "<span class=\"hljs-keyword\">package</span> montecarlopi\n\n<span class=\"hljs-comment\">// import (</span>\n<span class=\"hljs-comment\">// \t&quot;fmt&quot;</span>\n<span class=\"hljs-comment\">// \t&quot;math&quot;</span>\n<span class=\"hljs-comment\">// \t&quot;math/rand&quot;</span>\n<span class=\"hljs-comment\">// \t&quot;runtime&quot;</span>\n<span class=\"hljs-comment\">// \t&quot;sync&quot;</span>\n<span class=\"hljs-comment\">// \t&quot;time&quot;</span>\n<span class=\"hljs-comment\">// )</span>\n\n<span class=\"hljs-comment\">// func main() {</span>\n<span class=\"hljs-comment\">// \tcpus := runtime.NumCPU()</span>\n<span class=\"hljs-comment\">// \tmonteCarlo := func(iterations, cpus int) float64{</span>\n<span class=\"hljs-comment\">// \t\tstart := time.Now()</span>\n<span class=\"hljs-comment\">// \t\tflow := make(chan int, int(math.Floor(float64(cpus)/2)))</span>\n<span class=\"hljs-comment\">// \t\tvar wg sync.WaitGroup</span>\n<span class=\"hljs-comment\">// \t\tvar total int</span>\n<span class=\"hljs-comment\">// \t\tminiFunc := func(iters int, flow chan int) {</span>\n<span class=\"hljs-comment\">// \t\t\tdefer wg.Done()</span>\n<span class=\"hljs-comment\">// \t\t\tvar inside int</span>\n<span class=\"hljs-comment\">// \t\t\tfor i := 0; i &lt; iters; i++ {</span>\n<span class=\"hljs-comment\">// \t\t\t\tx := rand.Float64()</span>\n<span class=\"hljs-comment\">// \t\t\t\ty := rand.Float64()</span>\n<span class=\"hljs-comment\">// \t\t\t\tif math.Hypot(x, y) &lt;= 1 {</span>\n<span class=\"hljs-comment\">// \t\t\t\t\tinside++</span>\n<span class=\"hljs-comment\">// \t\t\t\t}</span>\n<span class=\"hljs-comment\">// \t\t\t}</span>\n<span class=\"hljs-comment\">// \t\t\tflow &lt;- inside</span>\n<span class=\"hljs-comment\">// \t\t} //end of minifunc</span>\n<span class=\"hljs-comment\">// \t\tfuxc := func(flow chan int) {</span>\n<span class=\"hljs-comment\">// \t\t\tdefer wg.Done()</span>\n<span class=\"hljs-comment\">// \t\t\tfor i := 0; i &lt; int(math.Floor(float64(cpus)/2)); i++ {</span>\n<span class=\"hljs-comment\">// \t\t\t\ttotal += &lt;-flow</span>\n<span class=\"hljs-comment\">// \t\t\t}</span>\n<span class=\"hljs-comment\">// \t\t} //end of fuxc</span>\n<span class=\"hljs-comment\">// \t\twg.Add(int(math.Floor(float64(cpus) / 2)))</span>\n<span class=\"hljs-comment\">// \t\t//spawn goroutines for half the logical processors</span>\n<span class=\"hljs-comment\">// \t\t// This leaves free cpus for swapping</span>\n<span class=\"hljs-comment\">// \t\tfor i := 0; i &lt; int(math.Floor(float64(cpus)/2)); i++ {</span>\n<span class=\"hljs-comment\">// \t\t\tgo miniFunc(int(math.Ceil(float64(iterations/int(math.Floor(float64(cpus)/2))))), flow)</span>\n<span class=\"hljs-comment\">// \t\t}</span>\n<span class=\"hljs-comment\">// \t\twg.Add(1)</span>\n<span class=\"hljs-comment\">// \t\tgo fuxc(flow)</span>\n<span class=\"hljs-comment\">// \t\twg.Wait()</span>\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;took %v \\n&quot;,time.Since(start))</span>\n<span class=\"hljs-comment\">// \t\treturn 4 * float64(total) / float64(iterations)</span>\n<span class=\"hljs-comment\">// \t}//end of monteCarlo</span>\n<span class=\"hljs-comment\">// \tfmt.Println(monteCarlo(2&lt;&lt;18, cpus))</span>\n<span class=\"hljs-comment\">// }</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anderson Queiroz",
      "email": "contato@andersonq.eti.br",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
