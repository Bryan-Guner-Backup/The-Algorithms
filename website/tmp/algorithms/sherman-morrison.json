{
  "slug": "sherman-morrison",
  "name": "Sherman Morrison",
  "categories": ["matrix"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "matrix/sherman_morrison.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/matrix/sherman_morrison.py",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Matrix</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &lt;class Matrix&gt;\n    Matrix structure.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, row: <span class=\"hljs-built_in\">int</span>, column: <span class=\"hljs-built_in\">int</span>, default_value: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.__init__&gt;\n        Initialize matrix with given size and default value.\n\n        Example:\n        &gt;&gt;&gt; a = Matrix(2, 3, 1)\n        &gt;&gt;&gt; a\n        Matrix consist of 2 rows and 3 columns\n        [1, 1, 1]\n        [1, 1, 1]\n        &quot;&quot;&quot;</span>\n\n        self.row, self.column = row, column\n        self.array = [[default_value <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(column)] <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(row)]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.__str__&gt;\n        Return string representation of this matrix.\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># Prefix</span>\n        s = <span class=\"hljs-string\">&quot;Matrix consist of %d rows and %d columns\\n&quot;</span> % (self.row, self.column)\n\n        <span class=\"hljs-comment\"># Make string identifier</span>\n        max_element_length = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> row_vector <span class=\"hljs-keyword\">in</span> self.array:\n            <span class=\"hljs-keyword\">for</span> obj <span class=\"hljs-keyword\">in</span> row_vector:\n                max_element_length = <span class=\"hljs-built_in\">max</span>(max_element_length, <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">str</span>(obj)))\n        string_format_identifier = <span class=\"hljs-string\">&quot;%%%ds&quot;</span> % (max_element_length,)\n\n        <span class=\"hljs-comment\"># Make string and return</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">single_line</span>(<span class=\"hljs-params\">row_vector</span>):\n            <span class=\"hljs-keyword\">nonlocal</span> string_format_identifier\n            line = <span class=\"hljs-string\">&quot;[&quot;</span>\n            line += <span class=\"hljs-string\">&quot;, &quot;</span>.join(string_format_identifier % (obj,) <span class=\"hljs-keyword\">for</span> obj <span class=\"hljs-keyword\">in</span> row_vector)\n            line += <span class=\"hljs-string\">&quot;]&quot;</span>\n            <span class=\"hljs-keyword\">return</span> line\n\n        s += <span class=\"hljs-string\">&quot;\\n&quot;</span>.join(single_line(row_vector) <span class=\"hljs-keyword\">for</span> row_vector <span class=\"hljs-keyword\">in</span> self.array)\n        <span class=\"hljs-keyword\">return</span> s\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">validateIndices</span>(<span class=\"hljs-params\">self, loc: <span class=\"hljs-built_in\">tuple</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.validateIndices&gt;\n        Check if given indices are valid to pick element from matrix.\n\n        Example:\n        &gt;&gt;&gt; a = Matrix(2, 6, 0)\n        &gt;&gt;&gt; a.validateIndices((2, 7))\n        False\n        &gt;&gt;&gt; a.validateIndices((0, 0))\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (<span class=\"hljs-built_in\">isinstance</span>(loc, (<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">tuple</span>)) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">len</span>(loc) == <span class=\"hljs-number\">2</span>):\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-keyword\">not</span> (<span class=\"hljs-number\">0</span> &lt;= loc[<span class=\"hljs-number\">0</span>] &lt; self.row <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= loc[<span class=\"hljs-number\">1</span>] &lt; self.column):\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__getitem__</span>(<span class=\"hljs-params\">self, loc: <span class=\"hljs-built_in\">tuple</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.__getitem__&gt;\n        Return array[row][column] where loc = (row, column).\n\n        Example:\n        &gt;&gt;&gt; a = Matrix(3, 2, 7)\n        &gt;&gt;&gt; a[1, 0]\n        7\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> self.validateIndices(loc)\n        <span class=\"hljs-keyword\">return</span> self.array[loc[<span class=\"hljs-number\">0</span>]][loc[<span class=\"hljs-number\">1</span>]]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__setitem__</span>(<span class=\"hljs-params\">self, loc: <span class=\"hljs-built_in\">tuple</span>, value: <span class=\"hljs-built_in\">float</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.__setitem__&gt;\n        Set array[row][column] = value where loc = (row, column).\n\n        Example:\n        &gt;&gt;&gt; a = Matrix(2, 3, 1)\n        &gt;&gt;&gt; a[1, 2] = 51\n        &gt;&gt;&gt; a\n        Matrix consist of 2 rows and 3 columns\n        [ 1,  1,  1]\n        [ 1,  1, 51]\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">assert</span> self.validateIndices(loc)\n        self.array[loc[<span class=\"hljs-number\">0</span>]][loc[<span class=\"hljs-number\">1</span>]] = value\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__add__</span>(<span class=\"hljs-params\">self, another</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.__add__&gt;\n        Return self + another.\n\n        Example:\n        &gt;&gt;&gt; a = Matrix(2, 1, -4)\n        &gt;&gt;&gt; b = Matrix(2, 1, 3)\n        &gt;&gt;&gt; a+b\n        Matrix consist of 2 rows and 1 columns\n        [-1]\n        [-1]\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># Validation</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(another, Matrix)\n        <span class=\"hljs-keyword\">assert</span> self.row == another.row <span class=\"hljs-keyword\">and</span> self.column == another.column\n\n        <span class=\"hljs-comment\"># Add</span>\n        result = Matrix(self.row, self.column)\n        <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.row):\n            <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.column):\n                result[r, c] = self[r, c] + another[r, c]\n        <span class=\"hljs-keyword\">return</span> result\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__neg__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.__neg__&gt;\n        Return -self.\n\n        Example:\n        &gt;&gt;&gt; a = Matrix(2, 2, 3)\n        &gt;&gt;&gt; a[0, 1] = a[1, 0] = -2\n        &gt;&gt;&gt; -a\n        Matrix consist of 2 rows and 2 columns\n        [-3,  2]\n        [ 2, -3]\n        &quot;&quot;&quot;</span>\n\n        result = Matrix(self.row, self.column)\n        <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.row):\n            <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.column):\n                result[r, c] = -self[r, c]\n        <span class=\"hljs-keyword\">return</span> result\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__sub__</span>(<span class=\"hljs-params\">self, another</span>):\n        <span class=\"hljs-keyword\">return</span> self + (-another)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, another</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.__mul__&gt;\n        Return self * another.\n\n        Example:\n        &gt;&gt;&gt; a = Matrix(2, 3, 1)\n        &gt;&gt;&gt; a[0,2] = a[1,2] = 3\n        &gt;&gt;&gt; a * -2\n        Matrix consist of 2 rows and 3 columns\n        [-2, -2, -6]\n        [-2, -2, -6]\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(another, (<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>)):  <span class=\"hljs-comment\"># Scalar multiplication</span>\n            result = Matrix(self.row, self.column)\n            <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.row):\n                <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.column):\n                    result[r, c] = self[r, c] * another\n            <span class=\"hljs-keyword\">return</span> result\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">isinstance</span>(another, Matrix):  <span class=\"hljs-comment\"># Matrix multiplication</span>\n            <span class=\"hljs-keyword\">assert</span> self.column == another.row\n            result = Matrix(self.row, another.column)\n            <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.row):\n                <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(another.column):\n                    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.column):\n                        result[r, c] += self[r, i] * another[i, c]\n            <span class=\"hljs-keyword\">return</span> result\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">f&quot;Unsupported type given for another (<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">type</span>(another)}</span>)&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">transpose</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.transpose&gt;\n        Return self^T.\n\n        Example:\n        &gt;&gt;&gt; a = Matrix(2, 3)\n        &gt;&gt;&gt; for r in range(2):\n        ...     for c in range(3):\n        ...             a[r,c] = r*c\n        ...\n        &gt;&gt;&gt; a.transpose()\n        Matrix consist of 3 rows and 2 columns\n        [0, 0]\n        [0, 1]\n        [0, 2]\n        &quot;&quot;&quot;</span>\n\n        result = Matrix(self.column, self.row)\n        <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.row):\n            <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.column):\n                result[c, r] = self[r, c]\n        <span class=\"hljs-keyword\">return</span> result\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ShermanMorrison</span>(<span class=\"hljs-params\">self, u, v</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &lt;method Matrix.ShermanMorrison&gt;\n        Apply Sherman-Morrison formula in O(n^2).\n        To learn this formula, please look this:\n        https://en.wikipedia.org/wiki/Sherman%E2%80%93Morrison_formula\n        This method returns (A + uv^T)^(-1) where A^(-1) is self. Returns None if it&#x27;s\n        impossible to calculate.\n        Warning: This method doesn&#x27;t check if self is invertible.\n            Make sure self is invertible before execute this method.\n\n        Example:\n        &gt;&gt;&gt; ainv = Matrix(3, 3, 0)\n        &gt;&gt;&gt; for i in range(3): ainv[i,i] = 1\n        ...\n        &gt;&gt;&gt; u = Matrix(3, 1, 0)\n        &gt;&gt;&gt; u[0,0], u[1,0], u[2,0] = 1, 2, -3\n        &gt;&gt;&gt; v = Matrix(3, 1, 0)\n        &gt;&gt;&gt; v[0,0], v[1,0], v[2,0] = 4, -2, 5\n        &gt;&gt;&gt; ainv.ShermanMorrison(u, v)\n        Matrix consist of 3 rows and 3 columns\n        [  1.2857142857142856, -0.14285714285714285,   0.3571428571428571]\n        [  0.5714285714285714,   0.7142857142857143,   0.7142857142857142]\n        [ -0.8571428571428571,  0.42857142857142855,  -0.0714285714285714]\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># Size validation</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(u, Matrix) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(v, Matrix)\n        <span class=\"hljs-keyword\">assert</span> self.row == self.column == u.row == v.row  <span class=\"hljs-comment\"># u, v should be column vector</span>\n        <span class=\"hljs-keyword\">assert</span> u.column == v.column == <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># u, v should be column vector</span>\n\n        <span class=\"hljs-comment\"># Calculate</span>\n        vT = v.transpose()\n        numerator_factor = (vT * self * u)[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> numerator_factor == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>  <span class=\"hljs-comment\"># It&#x27;s not invertable</span>\n        <span class=\"hljs-keyword\">return</span> self - ((self * u) * (vT * self) * (<span class=\"hljs-number\">1.0</span> / numerator_factor))\n\n\n<span class=\"hljs-comment\"># Testing</span>\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test1</span>():\n        <span class=\"hljs-comment\"># a^(-1)</span>\n        ainv = Matrix(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">3</span>):\n            ainv[i, i] = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;a^(-1) is <span class=\"hljs-subst\">{ainv}</span>&quot;</span>)\n        <span class=\"hljs-comment\"># u, v</span>\n        u = Matrix(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)\n        u[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], u[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], u[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">3</span>\n        v = Matrix(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)\n        v[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>], v[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], v[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;u is <span class=\"hljs-subst\">{u}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;v is <span class=\"hljs-subst\">{v}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;uv^T is %s&quot;</span> % (u * v.transpose()))\n        <span class=\"hljs-comment\"># Sherman Morrison</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;(a + uv^T)^(-1) is <span class=\"hljs-subst\">{ainv.ShermanMorrison(u, v)}</span>&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test2</span>():\n        <span class=\"hljs-keyword\">import</span> doctest\n\n        doctest.testmod()\n\n    test2()\n"
    }
  },
  "contributors": [
    {
      "name": "CarsonHam",
      "email": "carson.ham@utexas.edu",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "McDic",
      "email": "spongbob9876@naver.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
