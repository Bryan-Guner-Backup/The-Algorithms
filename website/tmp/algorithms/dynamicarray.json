{
  "slug": "dynamicarray",
  "name": "DynamicArray",
  "categories": ["datastructures", "dynamicarray"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/DynamicArray/DynamicArray.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/DynamicArray/DynamicArray.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.DynamicArray;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n<span class=\"hljs-keyword\">import</span> java.util.function.Consumer;\n<span class=\"hljs-keyword\">import</span> java.util.stream.Stream;\n<span class=\"hljs-keyword\">import</span> java.util.stream.StreamSupport;\n\n<span class=\"hljs-comment\">/**\n * This class implements a dynamic array\n *\n * <span class=\"hljs-doctag\">@param</span> &lt;E&gt; the type that each index of the array will hold\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicArray</span>&lt;E&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Iterable</span>&lt;E&gt; {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">16</span>;\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> capacity;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\n  <span class=\"hljs-keyword\">private</span> Object[] elements;\n\n  <span class=\"hljs-comment\">/**\n   * constructor\n   *\n   * <span class=\"hljs-doctag\">@param</span> capacity the starting length of the desired array\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DynamicArray</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> capacity)</span> {\n    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-built_in\">this</span>.capacity = capacity;\n    <span class=\"hljs-built_in\">this</span>.elements = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[<span class=\"hljs-built_in\">this</span>.capacity];\n  }\n\n  <span class=\"hljs-comment\">/** No-args constructor */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">DynamicArray</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-built_in\">this</span>(DEFAULT_CAPACITY);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Adds an element to the array If full, creates a copy array twice the size of the current one\n   *\n   * <span class=\"hljs-doctag\">@param</span> element the element of type &lt;E&gt; to be added to the array\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> E element)</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.size == <span class=\"hljs-built_in\">this</span>.elements.length) {\n      <span class=\"hljs-built_in\">this</span>.elements = Arrays.copyOf(<span class=\"hljs-built_in\">this</span>.elements, newCapacity(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">this</span>.capacity));\n    }\n\n    <span class=\"hljs-built_in\">this</span>.elements[<span class=\"hljs-built_in\">this</span>.size] = element;\n    size++;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Places element of type &lt;E&gt; at the desired index\n   *\n   * <span class=\"hljs-doctag\">@param</span> index the index for the element to be placed\n   * <span class=\"hljs-doctag\">@param</span> element the element to be inserted\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index, E element)</span> {\n    <span class=\"hljs-built_in\">this</span>.elements[index] = element;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * get method for element at a given index returns null if the index is empty\n   *\n   * <span class=\"hljs-doctag\">@param</span> index the desired index of the element\n   * <span class=\"hljs-doctag\">@return</span> &lt;E&gt; the element at the specified index\n   */</span>\n  <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index)</span> {\n    <span class=\"hljs-keyword\">return</span> getElement(index);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Removes an element from the array\n   *\n   * <span class=\"hljs-doctag\">@param</span> index the index of the element to be removed\n   * <span class=\"hljs-doctag\">@return</span> &lt;E&gt; the element removed\n   */</span>\n  <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index)</span> {\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">E</span> <span class=\"hljs-variable\">oldElement</span> <span class=\"hljs-operator\">=</span> getElement(index);\n    fastRemove(<span class=\"hljs-built_in\">this</span>.elements, index);\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.capacity &gt; DEFAULT_CAPACITY &amp;&amp; size * <span class=\"hljs-number\">4</span> &lt;= <span class=\"hljs-built_in\">this</span>.capacity)\n      <span class=\"hljs-built_in\">this</span>.elements = Arrays.copyOf(<span class=\"hljs-built_in\">this</span>.elements, newCapacity(<span class=\"hljs-built_in\">this</span>.capacity / <span class=\"hljs-number\">2</span>));\n    <span class=\"hljs-keyword\">return</span> oldElement;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * get method for size field\n   *\n   * <span class=\"hljs-doctag\">@return</span> int size\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getSize</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * isEmpty helper method\n   *\n   * <span class=\"hljs-doctag\">@return</span> boolean true if the array contains no elements, false otherwise\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size == <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> Stream&lt;E&gt; <span class=\"hljs-title function_\">stream</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> StreamSupport.stream(spliterator(), <span class=\"hljs-literal\">false</span>);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fastRemove</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> Object[] elements, <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index)</span> {\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">newSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.size - <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">if</span> (newSize &gt; index) {\n      System.arraycopy(elements, index + <span class=\"hljs-number\">1</span>, elements, index, newSize - index);\n    }\n\n    elements[<span class=\"hljs-built_in\">this</span>.size = newSize] = <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-keyword\">private</span> E <span class=\"hljs-title function_\">getElement</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> index)</span> {\n    <span class=\"hljs-keyword\">return</span> (E) <span class=\"hljs-built_in\">this</span>.elements[index];\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">newCapacity</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> capacity)</span> {\n    <span class=\"hljs-built_in\">this</span>.capacity = capacity;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.capacity;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * returns a String representation of this object\n   *\n   * <span class=\"hljs-doctag\">@return</span> String a String representing the array\n   */</span>\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> Arrays.toString(Arrays.stream(<span class=\"hljs-built_in\">this</span>.elements).filter(Objects::nonNull).toArray());\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Creates and returns a new Dynamic Array Iterator\n   *\n   * <span class=\"hljs-doctag\">@return</span> Iterator a Dynamic Array Iterator\n   */</span>\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> Iterator <span class=\"hljs-title function_\">iterator</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicArrayIterator</span>();\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DynamicArrayIterator</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Iterator</span>&lt;E&gt; {\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> cursor;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasNext</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.cursor != size;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title function_\">next</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursor &gt; DynamicArray.<span class=\"hljs-built_in\">this</span>.size) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>();\n\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursor &gt; DynamicArray.<span class=\"hljs-built_in\">this</span>.elements.length)\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentModificationException</span>();\n\n      <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">E</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> DynamicArray.<span class=\"hljs-built_in\">this</span>.getElement(<span class=\"hljs-built_in\">this</span>.cursor);\n      <span class=\"hljs-built_in\">this</span>.cursor++;\n\n      <span class=\"hljs-keyword\">return</span> element;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursor &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>();\n\n      DynamicArray.<span class=\"hljs-built_in\">this</span>.remove(<span class=\"hljs-built_in\">this</span>.cursor);\n      <span class=\"hljs-built_in\">this</span>.cursor--;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">forEachRemaining</span><span class=\"hljs-params\">(Consumer&lt;? <span class=\"hljs-built_in\">super</span> E&gt; action)</span> {\n      Objects.requireNonNull(action);\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; DynamicArray.<span class=\"hljs-built_in\">this</span>.size; i++) {\n        action.accept(DynamicArray.<span class=\"hljs-built_in\">this</span>.getElement(i));\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * This class is the driver for the DynamicArray&lt;E&gt; class it tests a variety of methods and prints\n   * the output\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    DynamicArray&lt;String&gt; names = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DynamicArray</span>&lt;&gt;();\n    names.add(<span class=\"hljs-string\">&quot;Peubes&quot;</span>);\n    names.add(<span class=\"hljs-string\">&quot;Marley&quot;</span>);\n\n    <span class=\"hljs-keyword\">for</span> (String name : names) {\n      System.out.println(name);\n    }\n\n    names.stream().forEach(System.out::println);\n\n    System.out.println(names);\n\n    System.out.println(names.getSize());\n\n    names.remove(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">for</span> (String name : names) {\n      System.out.println(name);\n    }\n  }\n}\n"
    },
    "c": {
      "dir": "data_structures/dynamic_array/dynamic_array.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/dynamic_array/dynamic_array.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;dynamic_array.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-type\">dynamic_array_t</span> *<span class=\"hljs-title function_\">init_dynamic_array</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">dynamic_array_t</span> *da = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">dynamic_array_t</span>));\n    da-&gt;items = <span class=\"hljs-built_in\">calloc</span>(DEFAULT_CAPACITY, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">void</span> *));\n    da-&gt;capacity = DEFAULT_CAPACITY;\n\n    <span class=\"hljs-keyword\">return</span> da;\n}\n\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">dynamic_array_t</span> *da, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span> *value)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (da-&gt;size &gt;= da-&gt;capacity)\n    {\n        <span class=\"hljs-type\">void</span> **newItems =\n            <span class=\"hljs-built_in\">realloc</span>(da-&gt;items, (da-&gt;capacity &lt;&lt;= <span class=\"hljs-number\">1</span>) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">void</span> **));\n        <span class=\"hljs-built_in\">free</span>(da-&gt;items);\n\n        da-&gt;items = newItems;\n    }\n\n    <span class=\"hljs-type\">void</span> *copy_value = retrive_copy_of_value(value);\n    da-&gt;items[da-&gt;size++] = copy_value;\n\n    <span class=\"hljs-keyword\">return</span> copy_value;\n}\n\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">put</span><span class=\"hljs-params\">(<span class=\"hljs-type\">dynamic_array_t</span> *da, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span> *value, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">unsigned</span> index)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (!contains(da-&gt;size, index))\n        <span class=\"hljs-keyword\">return</span> INDEX_OUT_OF_BOUNDS;\n\n    <span class=\"hljs-built_in\">free</span>(da-&gt;items[index]);\n    <span class=\"hljs-type\">void</span> *copy_value = retrive_copy_of_value(value);\n    da-&gt;items[index] = copy_value;\n\n    <span class=\"hljs-keyword\">return</span> copy_value;\n}\n\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(<span class=\"hljs-type\">dynamic_array_t</span> *da, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">unsigned</span> index)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (!contains(da-&gt;size, index))\n        <span class=\"hljs-keyword\">return</span> INDEX_OUT_OF_BOUNDS;\n\n    <span class=\"hljs-keyword\">return</span> da-&gt;items[index];\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">delete</span> <span class=\"hljs-params\">(<span class=\"hljs-type\">dynamic_array_t</span> *da, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">unsigned</span> index)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (!contains(da-&gt;size, index))\n        <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">unsigned</span> i = index; i &lt; da-&gt;size; i++)\n    {\n        da-&gt;items[i] = da-&gt;items[i + <span class=\"hljs-number\">1</span>];\n    }\n\n    da-&gt;size--;\n\n    <span class=\"hljs-built_in\">free</span>(da-&gt;items[da-&gt;size]);\n}\n\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-title function_\">contains</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">unsigned</span> size, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">unsigned</span> index)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (size &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index &lt; size)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;index [%d] out of bounds!\\n&quot;</span>, index);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">retrive_copy_of_value</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span> *value)</span>\n{\n    <span class=\"hljs-type\">void</span> *value_copy = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">void</span> *));\n    <span class=\"hljs-built_in\">memcpy</span>(value_copy, value, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">void</span> *));\n\n    <span class=\"hljs-keyword\">return</span> value_copy;\n}"
    },
    "go": {
      "dir": "datastructures/dynamic-array/dynamicarray.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/datastructures/dynamic-array/dynamicarray.go",
      "code": "<span class=\"hljs-keyword\">package</span> dynamicarray\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;errors&quot;</span>\n)\n\n<span class=\"hljs-keyword\">var</span> defaultCapacity = <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-comment\">// DynamicArray structure</span>\n<span class=\"hljs-keyword\">type</span> DynamicArray <span class=\"hljs-keyword\">struct</span> {\n\tsize        <span class=\"hljs-keyword\">int</span>\n\tcapacity    <span class=\"hljs-keyword\">int</span>\n\telementData []<span class=\"hljs-keyword\">interface</span>{}\n}\n\n<span class=\"hljs-comment\">// Put function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span> <span class=\"hljs-title\">Put</span><span class=\"hljs-params\">(index <span class=\"hljs-keyword\">int</span>, element <span class=\"hljs-keyword\">interface</span>{})</span> <span class=\"hljs-title\">error</span></span> {\n\terr := da.CheckRangeFromIndex(index)\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\n\tda.elementData[index] = element\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Add function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span> <span class=\"hljs-title\">Add</span><span class=\"hljs-params\">(element <span class=\"hljs-keyword\">interface</span>{})</span></span> {\n\t<span class=\"hljs-keyword\">if</span> da.size == da.capacity {\n\t\tda.NewCapacity()\n\t}\n\n\tda.elementData[da.size] = element\n\tda.size++\n}\n\n<span class=\"hljs-comment\">// Remove function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span> <span class=\"hljs-title\">Remove</span><span class=\"hljs-params\">(index <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">error</span></span> {\n\terr := da.CheckRangeFromIndex(index)\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> err\n\t}\n\n\t<span class=\"hljs-built_in\">copy</span>(da.elementData[index:], da.elementData[index+<span class=\"hljs-number\">1</span>:da.size])\n\tda.elementData[da.size<span class=\"hljs-number\">-1</span>] = <span class=\"hljs-literal\">nil</span>\n\n\tda.size--\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Get function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span> <span class=\"hljs-title\">Get</span><span class=\"hljs-params\">(index <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">interface</span>{}, error)</span></span> {\n\terr := da.CheckRangeFromIndex(index)\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> da.elementData[index], <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// IsEmpty function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span> <span class=\"hljs-title\">IsEmpty</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">bool</span></span> {\n\t<span class=\"hljs-keyword\">return</span> da.size == <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-comment\">// GetData function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span> <span class=\"hljs-title\">GetData</span><span class=\"hljs-params\">()</span> []<span class=\"hljs-title\">interface</span></span>{} {\n\t<span class=\"hljs-keyword\">return</span> da.elementData[:da.size]\n}\n\n<span class=\"hljs-comment\">// CheckRangeFromIndex function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span> <span class=\"hljs-title\">CheckRangeFromIndex</span><span class=\"hljs-params\">(index <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">error</span></span> {\n\t<span class=\"hljs-keyword\">if</span> index &gt;= da.size || index &lt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> errors.New(<span class=\"hljs-string\">&quot;index out of range&quot;</span>)\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// NewCapacity function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(da *DynamicArray)</span> <span class=\"hljs-title\">NewCapacity</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">if</span> da.capacity == <span class=\"hljs-number\">0</span> {\n\t\tda.capacity = defaultCapacity\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\tda.capacity = da.capacity &lt;&lt; <span class=\"hljs-number\">1</span>\n\t}\n\n\tnewDataElement := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">interface</span>{}, da.capacity)\n\n\t<span class=\"hljs-built_in\">copy</span>(newDataElement, da.elementData)\n\n\tda.elementData = newDataElement\n}\n\n<span class=\"hljs-comment\">// func main() {</span>\n<span class=\"hljs-comment\">// \tnumbers := dynamicArray{}</span>\n<span class=\"hljs-comment\">// \tfmt.Println(numbers.isEmpty())</span>\n\n<span class=\"hljs-comment\">// \tnumbers.add(10)</span>\n<span class=\"hljs-comment\">// \tnumbers.add(20)</span>\n<span class=\"hljs-comment\">// \tnumbers.add(30)</span>\n<span class=\"hljs-comment\">// \tnumbers.add(40)</span>\n<span class=\"hljs-comment\">// \tnumbers.add(50)</span>\n\n<span class=\"hljs-comment\">// \tfmt.Println(numbers.isEmpty())</span>\n\n<span class=\"hljs-comment\">// \tfmt.Println(numbers.getData())</span>\n\n<span class=\"hljs-comment\">// \tnumbers.remove(1)</span>\n\n<span class=\"hljs-comment\">// \tfmt.Println(numbers.getData())</span>\n\n<span class=\"hljs-comment\">// \tnumberFound, _ := numbers.get(1)</span>\n<span class=\"hljs-comment\">// \tfmt.Println(numberFound)</span>\n\n<span class=\"hljs-comment\">// \tnumbers.put(0, 100)</span>\n<span class=\"hljs-comment\">// \tfmt.Println(numbers.getData())</span>\n<span class=\"hljs-comment\">// }</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Huayang Sun",
      "email": "1394466835@qq.com",
      "commits": 1
    },
    {
      "name": "Ray",
      "email": "rbshealy@live.unc.edu",
      "commits": 1
    },
    {
      "name": "Ray S",
      "email": "68674276+rbshealy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Wesllhey Holanda",
      "email": "wesllhey.holanda@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
