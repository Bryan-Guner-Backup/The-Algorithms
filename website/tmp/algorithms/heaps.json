{
  "slug": "heaps",
  "name": "Heaps",
  "categories": ["math", "permutation"],
  "body": {},
  "implementations": {
    "go": {
      "dir": "math/permutation/heaps.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/permutation/heaps.go",
      "code": "<span class=\"hljs-keyword\">package</span> permutation\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;strings&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Heap&#x27;s Algorithm for generating all permutations of n objects</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Heaps</span><span class=\"hljs-params\">(out <span class=\"hljs-keyword\">chan</span> []<span class=\"hljs-keyword\">string</span>, n <span class=\"hljs-keyword\">int</span>)</span></span> {\n\telementSetCh := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> []<span class=\"hljs-keyword\">string</span>)\n\t<span class=\"hljs-keyword\">go</span> GenerateElementSet(elementSetCh, n)\n\telementSet := &lt;-elementSetCh\n\n\t<span class=\"hljs-keyword\">var</span> recursiveGenerate <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">([]<span class=\"hljs-keyword\">string</span>, <span class=\"hljs-keyword\">int</span>, []<span class=\"hljs-keyword\">string</span>)</span></span>\n\t<span class=\"hljs-keyword\">var</span> permutations []<span class=\"hljs-keyword\">string</span>\n\trecursiveGenerate = <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(previousIteration []<span class=\"hljs-keyword\">string</span>, n <span class=\"hljs-keyword\">int</span>, elements []<span class=\"hljs-keyword\">string</span>)</span></span> {\n\t\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">1</span> {\n\t\t\tpermutations = <span class=\"hljs-built_in\">append</span>(permutations, strings.Join(elements, <span class=\"hljs-string\">&quot;&quot;</span>))\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; n; i++ {\n\t\t\t\trecursiveGenerate(previousIteration, n - <span class=\"hljs-number\">1</span>, elements)\n\t\t\t\t<span class=\"hljs-keyword\">if</span> n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> {\n\t\t\t\t\ttmp := elements[i]\n\t\t\t\t\telements[i] = elements[n - <span class=\"hljs-number\">1</span>]\n\t\t\t\t\telements[n - <span class=\"hljs-number\">1</span>] = tmp\n\t\t\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t\t\ttmp := elements[<span class=\"hljs-number\">0</span>]\n\t\t\t\t\telements[<span class=\"hljs-number\">0</span>] = elements[n - <span class=\"hljs-number\">1</span>]\n\t\t\t\t\telements[n - <span class=\"hljs-number\">1</span>] = tmp\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\trecursiveGenerate(permutations, n, elementSet)\n\tout &lt;- permutations\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GenerateElementSet</span><span class=\"hljs-params\">(out <span class=\"hljs-keyword\">chan</span> []<span class=\"hljs-keyword\">string</span>, n <span class=\"hljs-keyword\">int</span>)</span></span> {\n\telementSet := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">string</span>, n)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> elementSet {\n\t\telementSet[i] = <span class=\"hljs-keyword\">string</span>(<span class=\"hljs-keyword\">rune</span>(i + <span class=\"hljs-number\">49</span>)) <span class=\"hljs-comment\">// Adjust this if you want to change your charset</span>\n\t}\n\tout &lt;- elementSet\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Kevin Burchfield",
      "email": "kevinburchfi@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
