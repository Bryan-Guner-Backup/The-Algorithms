{
  "slug": "prime-factoriziation",
  "name": "Prime Factoriziation",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/prime_factoriziation.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/prime_factoriziation.c",
      "code": "<span class=\"hljs-comment\">/*\n    AUTHOR: Christian Bender\n    DATE: 12.02.2019\n    DESCRIPTION: This program calculates the prime factoriziation of a positive\n   integer &gt; 1\n*/</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/* initial length of the dynamic array */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> LEN 10</span>\n\n<span class=\"hljs-comment\">/* increasing range */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> STEP 5</span>\n\n<span class=\"hljs-comment\">/*\n    this type is for the representation of the prim factoriziation\n    - its series/range of prime factors\n    - its length : numbers of prime factors\n*/</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">data</span>\n{</span>\n    <span class=\"hljs-type\">int</span> *range;\n    <span class=\"hljs-type\">int</span> length;\n} range;\n<span class=\"hljs-keyword\">typedef</span> range *Range;\n\n<span class=\"hljs-comment\">/* int_fac : calculates the prime factoriziation of positive integers */</span>\nRange <span class=\"hljs-title function_\">int_fact</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span>;\n\n<span class=\"hljs-comment\">/* print_arr : prints the integer (heap) array*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_arr</span><span class=\"hljs-params\">(Range)</span>;\n\n<span class=\"hljs-comment\">/* increase : increases the dynamic integer array */</span>\n<span class=\"hljs-type\">int</span> *<span class=\"hljs-title function_\">increase</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *, <span class=\"hljs-type\">int</span>)</span>;\n\n<span class=\"hljs-comment\">/* destroy: destroys the range-structure */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">destroy</span><span class=\"hljs-params\">(Range)</span>;\n\n<span class=\"hljs-comment\">/*\n    main : simle frame program with a simple UI\n*/</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* for user input */</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t\\tPrim factoriziation\\n\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;positive integer (&gt; 1) ? &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n    Range r = int_fact(n);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nThe factoriziation are: &quot;</span>);\n    print_arr(r);\n    destroy(r);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\nRange <span class=\"hljs-title function_\">int_fact</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span>\n{\n    assert(n &gt; <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">/* precondition : n must be greater then 1*/</span>\n\n    <span class=\"hljs-type\">int</span> len = LEN;\n    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> *range = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * len);\n    assert(range);\n    Range pstr = (Range)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(range));\n    assert(pstr);\n\n    <span class=\"hljs-keyword\">while</span> (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n    {\n        n /= <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-keyword\">if</span> (i &lt; len)\n        {\n            range[i] = <span class=\"hljs-number\">2</span>;\n            i++;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            range = increase(range, len);\n            len += STEP;\n            range[i] = <span class=\"hljs-number\">2</span>;\n            i++;\n        }\n        count++;\n    }\n\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-keyword\">while</span> (j * j &lt;= n)\n    {\n        <span class=\"hljs-keyword\">while</span> (n % j == <span class=\"hljs-number\">0</span>)\n        {\n            n /= j;\n            <span class=\"hljs-keyword\">if</span> (i &lt; len)\n            {\n                range[i] = j;\n                i++;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                range = increase(range, len);\n                len += STEP;\n                range[i] = j;\n                i++;\n            }\n            count++;\n        }\n\n        j += <span class=\"hljs-number\">2</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (i &lt; len)\n        {\n            range[i] = n;\n            i++;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            range = increase(range, len);\n            len += STEP;\n            range[i] = n;\n            i++;\n        }\n        count++;\n    }\n\n    pstr-&gt;range = range;\n    pstr-&gt;length = count;\n    <span class=\"hljs-keyword\">return</span> pstr;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_arr</span><span class=\"hljs-params\">(Range pStr)</span>\n{\n    assert(pStr); <span class=\"hljs-comment\">/* checks whether pStr is a null-pointer */</span>\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i; i &lt; pStr-&gt;length; i++)\n    {\n        <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>)\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, pStr-&gt;range[<span class=\"hljs-number\">0</span>]);\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;-%d&quot;</span>, pStr-&gt;range[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-type\">int</span> *<span class=\"hljs-title function_\">increase</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> len)</span>\n{\n    assert(arr); <span class=\"hljs-comment\">/* checks whether arr is a null-pointer */</span>\n    <span class=\"hljs-type\">int</span> *tmp = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">realloc</span>(arr, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * (len + STEP));\n    assert(tmp);\n    <span class=\"hljs-keyword\">return</span> tmp;\n    <span class=\"hljs-comment\">//    assert(arr);</span>\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">destroy</span><span class=\"hljs-params\">(Range r)</span>\n{\n    <span class=\"hljs-built_in\">free</span>(r-&gt;range);\n    <span class=\"hljs-built_in\">free</span>(r);\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
