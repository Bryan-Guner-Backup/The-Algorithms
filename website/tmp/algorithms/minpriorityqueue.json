{
  "slug": "minpriorityqueue",
  "name": "MinPriorityQueue",
  "categories": ["datastructures", "heap"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Heap/MinPriorityQueue.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Heap/MinPriorityQueue.js",
      "code": "\n<span class=\"hljs-comment\">/* Minimum Priority Queue\n* It is a part of heap data structure\n* A heap is a specific tree based data structure\n* in which all the nodes of tree are in a specific order.\n* that is the children are arranged in some\n* respect of their parents, can either be greater\n* or less than the parent. This makes it a min priority queue\n* or max priority queue.\n*/</span>\n\n<span class=\"hljs-comment\">// Functions: insert, delete, peek, isEmpty, print, heapSort, sink</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinPriorityQueue</span> {\n  <span class=\"hljs-comment\">// calls the constructor and initializes the capacity</span>\n  <span class=\"hljs-title function_\">constructor</span> (c) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span> = []\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span> = c\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> = <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// inserts the key at the end and rearranges it</span>\n  <span class=\"hljs-comment\">// so that the binary heap is in appropriate order</span>\n  insert (key) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">isFull</span>()) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> + <span class=\"hljs-number\">1</span>] = key\n    <span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k] &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(k / <span class=\"hljs-number\">2</span>)]) {\n        <span class=\"hljs-keyword\">const</span> temp = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k]\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(k / <span class=\"hljs-number\">2</span>)]\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(k / <span class=\"hljs-number\">2</span>)] = temp\n      }\n      k = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(k / <span class=\"hljs-number\">2</span>)\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>++\n  }\n\n  <span class=\"hljs-comment\">// returns the highest priority value</span>\n  peek () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">1</span>]\n  }\n\n  <span class=\"hljs-comment\">// returns boolean value whether the heap is empty or not</span>\n  isEmpty () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> === <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// returns boolean value whether the heap is full or not</span>\n  isFull () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n\n  <span class=\"hljs-comment\">// prints the heap</span>\n  print () {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>))\n  }\n\n  <span class=\"hljs-comment\">// heap sorting can be done by performing</span>\n  <span class=\"hljs-comment\">// delete function to the number of times of the size of the heap</span>\n  <span class=\"hljs-comment\">// it returns reverse sort because it is a min priority queue</span>\n  heapSort () {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span>; i++) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">delete</span>()\n    }\n  }\n\n  <span class=\"hljs-comment\">// this function reorders the heap after every delete function</span>\n  sink () {\n    <span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">2</span> * k &lt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> || <span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &lt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>) {\n      <span class=\"hljs-keyword\">let</span> minIndex\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">2</span> * k] &gt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k]) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &lt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k]) {\n          <span class=\"hljs-keyword\">break</span>\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>) {\n          <span class=\"hljs-keyword\">break</span>\n        }\n      }\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>) {\n        minIndex = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">2</span> * k] &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k] ? <span class=\"hljs-number\">2</span> * k : k\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k] &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">2</span> * k] ||\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k] &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>]\n        ) {\n          minIndex =\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">2</span> * k] &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>] ? <span class=\"hljs-number\">2</span> * k : <span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>\n        } <span class=\"hljs-keyword\">else</span> {\n          minIndex = k\n        }\n      }\n      <span class=\"hljs-keyword\">const</span> temp = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k]\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[k] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[minIndex]\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[minIndex] = temp\n      k = minIndex\n    }\n  }\n\n  <span class=\"hljs-comment\">// deletes the highest priority value from the heap</span>\n  <span class=\"hljs-keyword\">delete</span> () {\n    <span class=\"hljs-keyword\">const</span> min = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">heap</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>] = min\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">size</span>--\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">sink</span>()\n    <span class=\"hljs-keyword\">return</span> min\n  }\n}\n\n<span class=\"hljs-comment\">// testing</span>\n<span class=\"hljs-keyword\">const</span> q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MinPriorityQueue</span>(<span class=\"hljs-number\">8</span>)\n\nq.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">5</span>)\nq.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">2</span>)\nq.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">4</span>)\nq.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">1</span>)\nq.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">7</span>)\nq.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">6</span>)\nq.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">3</span>)\nq.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-number\">8</span>)\nq.<span class=\"hljs-title function_\">print</span>() <span class=\"hljs-comment\">// [ 1, 2, 3, 5, 7, 6, 4, 8 ]</span>\nq.<span class=\"hljs-title function_\">heapSort</span>()\nq.<span class=\"hljs-title function_\">print</span>() <span class=\"hljs-comment\">// [ 8, 7, 6, 5, 4, 3, 2, 1 ]</span>\n"
    },
    "java": {
      "dir": "DataStructures/Heaps/MinPriorityQueue.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Heaps/MinPriorityQueue.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Heaps;\n\n<span class=\"hljs-comment\">/**\n * Minimum Priority Queue It is a part of heap data structure A heap is a specific tree based data\n * structure in which all the nodes of tree are in a specific order. that is the children are\n * arranged in some respect of their parents, can either be greater or less than the parent. This\n * makes it a min priority queue or max priority queue.\n *\n * &lt;p&gt;\n *\n * &lt;p&gt;Functions: insert, delete, peek, isEmpty, print, heapSort, sink\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinPriorityQueue</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] heap;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> capacity;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\n\n  <span class=\"hljs-comment\">// calss the constructor and initializes the capacity</span>\n  MinPriorityQueue(<span class=\"hljs-type\">int</span> c) {\n    <span class=\"hljs-built_in\">this</span>.capacity = c;\n    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-built_in\">this</span>.heap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[c + <span class=\"hljs-number\">1</span>];\n  }\n\n  <span class=\"hljs-comment\">// inserts the key at the end and rearranges it</span>\n  <span class=\"hljs-comment\">// so that the binary heap is in appropriate order</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.isFull()) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-built_in\">this</span>.size + <span class=\"hljs-number\">1</span>] = key;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.size + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.heap[k] &lt; <span class=\"hljs-built_in\">this</span>.heap[k / <span class=\"hljs-number\">2</span>]) {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.heap[k];\n        <span class=\"hljs-built_in\">this</span>.heap[k] = <span class=\"hljs-built_in\">this</span>.heap[k / <span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-built_in\">this</span>.heap[k / <span class=\"hljs-number\">2</span>] = temp;\n      }\n      k = k / <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-built_in\">this</span>.size++;\n  }\n\n  <span class=\"hljs-comment\">// returns the highest priority value</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peek</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">1</span>];\n  }\n\n  <span class=\"hljs-comment\">// returns boolean value whether the heap is empty or not</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">0</span> == <span class=\"hljs-built_in\">this</span>.size) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">// returns boolean value whether the heap is full or not</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.size == <span class=\"hljs-built_in\">this</span>.capacity) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">// prints the heap</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-built_in\">this</span>.capacity; i++) System.out.print(<span class=\"hljs-built_in\">this</span>.heap[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\n    System.out.println();\n  }\n\n  <span class=\"hljs-comment\">// heap sorting can be done by performing</span>\n  <span class=\"hljs-comment\">// delete function to the number of times of the size of the heap</span>\n  <span class=\"hljs-comment\">// it returns reverse sort because it is a min priority queue</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">heapSort</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">this</span>.capacity; i++) <span class=\"hljs-built_in\">this</span>.delete();\n  }\n\n  <span class=\"hljs-comment\">// this function reorders the heap after every delete function</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sink</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">2</span> * k &lt;= <span class=\"hljs-built_in\">this</span>.size || <span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &lt;= <span class=\"hljs-built_in\">this</span>.size) {\n      <span class=\"hljs-type\">int</span> minIndex;\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k] &gt;= <span class=\"hljs-built_in\">this</span>.heap[k]) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &lt;= <span class=\"hljs-built_in\">this</span>.size &amp;&amp; <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-built_in\">this</span>.heap[k]) {\n          <span class=\"hljs-keyword\">break</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-built_in\">this</span>.size) {\n          <span class=\"hljs-keyword\">break</span>;\n        }\n      }\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span> &gt; <span class=\"hljs-built_in\">this</span>.size) {\n        minIndex = <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k] &lt; <span class=\"hljs-built_in\">this</span>.heap[k] ? <span class=\"hljs-number\">2</span> * k : k;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.heap[k] &gt; <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k] || <span class=\"hljs-built_in\">this</span>.heap[k] &gt; <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>]) {\n          minIndex = <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k] &lt; <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>] ? <span class=\"hljs-number\">2</span> * k : <span class=\"hljs-number\">2</span> * k + <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n          minIndex = k;\n        }\n      }\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.heap[k];\n      <span class=\"hljs-built_in\">this</span>.heap[k] = <span class=\"hljs-built_in\">this</span>.heap[minIndex];\n      <span class=\"hljs-built_in\">this</span>.heap[minIndex] = temp;\n      k = minIndex;\n    }\n  }\n\n  <span class=\"hljs-comment\">// deletes the highest priority value from the heap</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-built_in\">this</span>.size];\n    <span class=\"hljs-built_in\">this</span>.heap[<span class=\"hljs-built_in\">this</span>.size] = min;\n    <span class=\"hljs-built_in\">this</span>.size--;\n    <span class=\"hljs-built_in\">this</span>.sink();\n    <span class=\"hljs-keyword\">return</span> min;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// testing</span>\n    <span class=\"hljs-type\">MinPriorityQueue</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MinPriorityQueue</span>(<span class=\"hljs-number\">8</span>);\n    q.insert(<span class=\"hljs-number\">5</span>);\n    q.insert(<span class=\"hljs-number\">2</span>);\n    q.insert(<span class=\"hljs-number\">4</span>);\n    q.insert(<span class=\"hljs-number\">1</span>);\n    q.insert(<span class=\"hljs-number\">7</span>);\n    q.insert(<span class=\"hljs-number\">6</span>);\n    q.insert(<span class=\"hljs-number\">3</span>);\n    q.insert(<span class=\"hljs-number\">8</span>);\n    q.print(); <span class=\"hljs-comment\">// [ 1, 2, 3, 5, 7, 6, 4, 8 ]</span>\n    q.heapSort();\n    q.print(); <span class=\"hljs-comment\">// [ 8, 7, 6, 5, 4, 3, 2, 1 ]</span>\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Juliano Nunes",
      "email": "julianomarquesnunes@gmail.com",
      "commits": 1
    },
    {
      "name": "Saurabh Thakur",
      "email": "thakursaurabh1998@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
