{
  "slug": "rb-tree",
  "name": "Rb Tree",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/rb_tree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/rb_tree.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span>\n{\n\t<span class=\"hljs-type\">int</span> key;\n\tnode *parent;\n\t<span class=\"hljs-type\">char</span> color;\n\tnode *left;\n\tnode *right;\n};\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RBtree</span>\n{\n\tnode *root;\n\tnode *q;\n<span class=\"hljs-keyword\">public</span>:\n\t<span class=\"hljs-built_in\">RBtree</span>()\n\t{\n\t\tq = <span class=\"hljs-literal\">NULL</span>;\n\t\troot = <span class=\"hljs-literal\">NULL</span>;\n\t}\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">()</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertfix</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">leftrotate</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rightrotate</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">del</span><span class=\"hljs-params\">()</span></span>;\n\t<span class=\"hljs-function\">node* <span class=\"hljs-title\">successor</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">delfix</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">disp</span><span class=\"hljs-params\">()</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">(node *)</span></span>;\n\t<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">()</span></span>;\n};\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::insert</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-type\">int</span> z, i = <span class=\"hljs-number\">0</span>;\n\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter key of the node to be inserted: &quot;</span>;\n\tcin &gt;&gt; z;\n\tnode *p, *q;\n\tnode *t = <span class=\"hljs-keyword\">new</span> node;\n\tt-&gt;key = z;\n\tt-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n\tt-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n\tt-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\tp = root;\n\tq = <span class=\"hljs-literal\">NULL</span>;\n\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\troot = t;\n\t\tt-&gt;parent = <span class=\"hljs-literal\">NULL</span>;\n\t}\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\t<span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>)\n\t\t{\n\t\t\tq = p;\n\t\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key &lt; t-&gt;key)\n\t\t\t\tp = p-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp = p-&gt;left;\n\t\t}\n\t\tt-&gt;parent = q;\n\t\t<span class=\"hljs-keyword\">if</span> (q-&gt;key &lt; t-&gt;key)\n\t\t\tq-&gt;right = t;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tq-&gt;left = t;\n\t}\n\t<span class=\"hljs-built_in\">insertfix</span>(t);\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::insertfix</span><span class=\"hljs-params\">(node *t)</span>\n</span>{\n\tnode *u;\n\t<span class=\"hljs-keyword\">if</span> (root == t)\n\t{\n\t\tt-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-keyword\">while</span> (t-&gt;parent != <span class=\"hljs-literal\">NULL</span> &amp;&amp; t-&gt;parent-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t{\n\t\tnode *g = t-&gt;parent-&gt;parent;\n\t\t<span class=\"hljs-keyword\">if</span> (g-&gt;left == t-&gt;parent)\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (g-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\t{\n\t\t\t\tu = g-&gt;right;\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (u-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t\t\t\t{\n\t\t\t\t\tt-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\tu-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\tg-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t\tt = g;\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (t-&gt;parent-&gt;right == t)\n\t\t\t\t{\n\t\t\t\t\tt = t-&gt;parent;\n\t\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(t);\n\t\t\t\t}\n\t\t\t\tt-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\tg-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(g);\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (g-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\t{\n\t\t\t\tu = g-&gt;left;\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (u-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t\t\t\t{\n\t\t\t\t\tt-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\tu-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\tg-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t\tt = g;\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (t-&gt;parent-&gt;left == t)\n\t\t\t\t{\n\t\t\t\t\tt = t-&gt;parent;\n\t\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(t);\n\t\t\t\t}\n\t\t\t\tt-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\tg-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(g);\n\t\t\t}\n\t\t}\n\t\troot-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::del</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEmpty Tree.&quot;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-type\">int</span> x;\n\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the key of the node to be deleted: &quot;</span>;\n\tcin &gt;&gt; x;\n\tnode *p;\n\tp = root;\n\tnode *y = <span class=\"hljs-literal\">NULL</span>;\n\tnode *q = <span class=\"hljs-literal\">NULL</span>;\n\t<span class=\"hljs-type\">int</span> found = <span class=\"hljs-number\">0</span>;\n\t<span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span> &amp;&amp; found == <span class=\"hljs-number\">0</span>)\n\t{\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key == x)\n\t\t\tfound = <span class=\"hljs-number\">1</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>)\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key &lt; x)\n\t\t\t\tp = p-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp = p-&gt;left;\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nElement Not Found.&quot;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nDeleted Element: &quot;</span> &lt;&lt; p-&gt;key;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nColour: &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Black\\n&quot;</span>;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Red\\n&quot;</span>;\n\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nParent: &quot;</span> &lt;&lt; p-&gt;parent-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThere is no parent of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nRight Child: &quot;</span> &lt;&lt; p-&gt;right-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThere is no right child of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nLeft Child: &quot;</span> &lt;&lt; p-&gt;left-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThere is no left child of the node.  &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nNode Deleted.&quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left == <span class=\"hljs-literal\">NULL</span> || p-&gt;right == <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty = p;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\ty = <span class=\"hljs-built_in\">successor</span>(p);\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tq = y-&gt;left;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\t\tq = y-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tq = <span class=\"hljs-literal\">NULL</span>;\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (q != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tq-&gt;parent = y-&gt;parent;\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;parent == <span class=\"hljs-literal\">NULL</span>)\n\t\t\troot = q;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (y == y-&gt;parent-&gt;left)\n\t\t\t\ty-&gt;parent-&gt;left = q;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\ty-&gt;parent-&gt;right = q;\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (y != p)\n\t\t{\n\t\t\tp-&gt;color = y-&gt;color;\n\t\t\tp-&gt;key = y-&gt;key;\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t<span class=\"hljs-built_in\">delfix</span>(q);\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::delfix</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\tnode *s;\n\t<span class=\"hljs-keyword\">while</span> (p != root &amp;&amp; p-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t{\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent-&gt;left == p)\n\t\t{\n\t\t\ts = p-&gt;parent-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t\t\t{\n\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\tp-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(p-&gt;parent);\n\t\t\t\ts = p-&gt;parent-&gt;right;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;right-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>&amp;&amp;s-&gt;left-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t{\n\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\tp = p-&gt;parent;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;right-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t\t{\n\t\t\t\t\ts-&gt;left-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(s);\n\t\t\t\t\ts = p-&gt;parent-&gt;right;\n\t\t\t\t}\n\t\t\t\ts-&gt;color = p-&gt;parent-&gt;color;\n\t\t\t\tp-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\ts-&gt;right-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(p-&gt;parent);\n\t\t\t\tp = root;\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\ts = p-&gt;parent-&gt;left;\n\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;color == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n\t\t\t{\n\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\tp-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(p-&gt;parent);\n\t\t\t\ts = p-&gt;parent-&gt;left;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;left-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>&amp;&amp;s-&gt;right-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t{\n\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\tp = p-&gt;parent;\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">if</span> (s-&gt;left-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\t\t{\n\t\t\t\t\ts-&gt;right-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t\ts-&gt;color = <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n\t\t\t\t\t<span class=\"hljs-built_in\">leftrotate</span>(s);\n\t\t\t\t\ts = p-&gt;parent-&gt;left;\n\t\t\t\t}\n\t\t\t\ts-&gt;color = p-&gt;parent-&gt;color;\n\t\t\t\tp-&gt;parent-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\ts-&gt;left-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\t\t\t<span class=\"hljs-built_in\">rightrotate</span>(p-&gt;parent);\n\t\t\t\tp = root;\n\t\t\t}\n\t\t}\n\t\tp-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t\troot-&gt;color = <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\t}\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::leftrotate</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (p-&gt;right == <span class=\"hljs-literal\">NULL</span>)\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\tnode *y = p-&gt;right;\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t{\n\t\t\tp-&gt;right = y-&gt;left;\n\t\t\ty-&gt;left-&gt;parent = p;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tp-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty-&gt;parent = p-&gt;parent;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent == <span class=\"hljs-literal\">NULL</span>)\n\t\t\troot = y;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (p == p-&gt;parent-&gt;left)\n\t\t\t\tp-&gt;parent-&gt;left = y;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp-&gt;parent-&gt;right = y;\n\t\t}\n\t\ty-&gt;left = p;\n\t\tp-&gt;parent = y;\n\t}\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::rightrotate</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (p-&gt;left == <span class=\"hljs-literal\">NULL</span>)\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\tnode *y = p-&gt;left;\n\t\t<span class=\"hljs-keyword\">if</span> (y-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t{\n\t\t\tp-&gt;left = y-&gt;right;\n\t\t\ty-&gt;right-&gt;parent = p;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tp-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty-&gt;parent = p-&gt;parent;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent == <span class=\"hljs-literal\">NULL</span>)\n\t\t\troot = y;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (p == p-&gt;parent-&gt;left)\n\t\t\t\tp-&gt;parent-&gt;left = y;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp-&gt;parent-&gt;right = y;\n\t\t}\n\t\ty-&gt;right = p;\n\t\tp-&gt;parent = y;\n\t}\n}\n\n<span class=\"hljs-function\">node* <span class=\"hljs-title\">RBtree::successor</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\tnode *y = <span class=\"hljs-literal\">NULL</span>;\n\t<span class=\"hljs-keyword\">if</span> (p-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\ty = p-&gt;left;\n\t\t<span class=\"hljs-keyword\">while</span> (y-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty = y-&gt;right;\n\t}\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\ty = p-&gt;right;\n\t\t<span class=\"hljs-keyword\">while</span> (y-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\ty = y-&gt;left;\n\t}\n\t<span class=\"hljs-keyword\">return</span> y;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::disp</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-built_in\">display</span>(root);\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::display</span><span class=\"hljs-params\">(node *p)</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEmpty Tree.&quot;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t NODE: &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Key: &quot;</span> &lt;&lt; p-&gt;key;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Colour: &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Black&quot;</span>;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Red&quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Parent: &quot;</span> &lt;&lt; p-&gt;parent-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no parent of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Right Child: &quot;</span> &lt;&lt; p-&gt;right-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no right child of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Left Child: &quot;</span> &lt;&lt; p-&gt;left-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no left child of the node.  &quot;</span>;\n\t\tcout &lt;&lt; endl;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left)\n\t\t{\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nLeft:\\n&quot;</span>;\n\t\t\t<span class=\"hljs-built_in\">display</span>(p-&gt;left);\n\t\t}\n\t\t<span class=\"hljs-comment\">/*else\n\t\t cout&lt;&lt;&quot;\\nNo Left Child.\\n&quot;;*/</span>\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;right)\n\t\t{\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nRight:\\n&quot;</span>;\n\t\t\t<span class=\"hljs-built_in\">display</span>(p-&gt;right);\n\t\t}\n\t\t<span class=\"hljs-comment\">/*else\n\t\t cout&lt;&lt;&quot;\\nNo Right Child.\\n&quot;*/</span>\n\t}\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">RBtree::search</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">NULL</span>)\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEmpty Tree\\n&quot;</span>;\n\t\t<span class=\"hljs-keyword\">return</span>;\n\t}\n\t<span class=\"hljs-type\">int</span> x;\n\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Enter key of the node to be searched: &quot;</span>;\n\tcin &gt;&gt; x;\n\tnode *p = root;\n\t<span class=\"hljs-type\">int</span> found = <span class=\"hljs-number\">0</span>;\n\t<span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span> &amp;&amp; found == <span class=\"hljs-number\">0</span>)\n\t{\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key == x)\n\t\t\tfound = <span class=\"hljs-number\">1</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>)\n\t\t{\n\t\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;key &lt; x)\n\t\t\t\tp = p-&gt;right;\n\t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\tp = p-&gt;left;\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>)\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nElement Not Found.&quot;</span>;\n\t<span class=\"hljs-keyword\">else</span>\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t FOUND NODE: &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Key: &quot;</span> &lt;&lt; p-&gt;key;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Colour: &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;color == <span class=\"hljs-string\">&#x27;b&#x27;</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Black&quot;</span>;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;Red&quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;parent != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Parent: &quot;</span> &lt;&lt; p-&gt;parent-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no parent of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Right Child: &quot;</span> &lt;&lt; p-&gt;right-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no right child of the node.  &quot;</span>;\n\t\t<span class=\"hljs-keyword\">if</span> (p-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Left Child: &quot;</span> &lt;&lt; p-&gt;left-&gt;key;\n\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n There is no left child of the node.  &quot;</span>;\n\t\tcout &lt;&lt; endl;\n\n\t}\n}\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-type\">int</span> ch, y = <span class=\"hljs-number\">0</span>;\n\tRBtree obj;\n\t<span class=\"hljs-keyword\">do</span>\n\t{\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t RED BLACK TREE &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 1. Insert in the tree &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 2. Delete a node from the tree&quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 3. Search for an element in the tree&quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 4. Display the tree &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\n 5. Exit &quot;</span>;\n\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter Your Choice: &quot;</span>;\n\t\tcin &gt;&gt; ch;\n\t\t<span class=\"hljs-built_in\">switch</span> (ch)\n\t\t{\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>: obj.<span class=\"hljs-built_in\">insert</span>();\n\t\t\tcout &lt;&lt; <span class=\"hljs-string\">&quot;\\nNode Inserted.\\n&quot;</span>;\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>: obj.<span class=\"hljs-built_in\">del</span>();\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>: obj.<span class=\"hljs-built_in\">search</span>();\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>: obj.<span class=\"hljs-built_in\">disp</span>();\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>: y = <span class=\"hljs-number\">1</span>;\n\t\t\t<span class=\"hljs-keyword\">break</span>;\n\t\t<span class=\"hljs-keyword\">default</span>: cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter a Valid Choice.&quot;</span>;\n\t\t}\n\t\tcout &lt;&lt; endl;\n\n\t} <span class=\"hljs-keyword\">while</span> (y != <span class=\"hljs-number\">1</span>);\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "sinkyoungdeok",
      "email": "tlsrudejr123@nate.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
