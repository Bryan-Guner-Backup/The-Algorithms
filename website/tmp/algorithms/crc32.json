{
  "slug": "crc32",
  "name": "CRC32",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/CRC32.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/CRC32.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.util.BitSet;\n\n<span class=\"hljs-comment\">/** Generates a crc32 checksum for a given string or byte array */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CRC32</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    System.out.println(Integer.toHexString(crc32(<span class=\"hljs-string\">&quot;Hello World&quot;</span>)));\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">crc32</span><span class=\"hljs-params\">(String str)</span> {\n    <span class=\"hljs-keyword\">return</span> crc32(str.getBytes());\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">crc32</span><span class=\"hljs-params\">(<span class=\"hljs-type\">byte</span>[] data)</span> {\n    <span class=\"hljs-type\">BitSet</span> <span class=\"hljs-variable\">bitSet</span> <span class=\"hljs-operator\">=</span> BitSet.valueOf(data);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">crc32</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0xFFFFFFFF</span>; <span class=\"hljs-comment\">// initial value</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; data.length * <span class=\"hljs-number\">8</span>; i++) {\n      <span class=\"hljs-keyword\">if</span> (((crc32 &gt;&gt;&gt; <span class=\"hljs-number\">31</span>) &amp; <span class=\"hljs-number\">1</span>) != (bitSet.get(i) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>))\n        crc32 = (crc32 &lt;&lt; <span class=\"hljs-number\">1</span>) ^ <span class=\"hljs-number\">0x04C11DB7</span>; <span class=\"hljs-comment\">// xor with polynomial</span>\n      <span class=\"hljs-type\">else</span> <span class=\"hljs-variable\">crc32</span> <span class=\"hljs-operator\">=</span> (crc32 &lt;&lt; <span class=\"hljs-number\">1</span>);\n    }\n    crc32 = Integer.reverse(crc32); <span class=\"hljs-comment\">// result reflect</span>\n    <span class=\"hljs-keyword\">return</span> crc32 ^ <span class=\"hljs-number\">0xFFFFFFFF</span>; <span class=\"hljs-comment\">// final xor value</span>\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
