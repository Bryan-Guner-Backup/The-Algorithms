{
  "slug": "rsa",
  "name": "RSA",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "ciphers/RSA.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/ciphers/RSA.java",
      "code": "<span class=\"hljs-keyword\">package</span> ciphers;\n\n<span class=\"hljs-keyword\">import</span> java.math.BigInteger;\n<span class=\"hljs-keyword\">import</span> java.security.SecureRandom;\n<span class=\"hljs-keyword\">import</span> javax.swing.JOptionPane;\n\n<span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@author</span> Nguyen Duy Tiep on 23-Oct-17. */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RSA</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    <span class=\"hljs-type\">RSA</span> <span class=\"hljs-variable\">rsa</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RSA</span>(<span class=\"hljs-number\">1024</span>);\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">text1</span> <span class=\"hljs-operator\">=</span> JOptionPane.showInputDialog(<span class=\"hljs-string\">&quot;Enter a message to encrypt :&quot;</span>);\n\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ciphertext</span> <span class=\"hljs-operator\">=</span> rsa.encrypt(text1);\n    JOptionPane.showMessageDialog(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;Your encrypted message : &quot;</span> + ciphertext);\n\n    JOptionPane.showMessageDialog(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;Your message after decrypt : &quot;</span> + rsa.decrypt(ciphertext));\n  }\n\n  <span class=\"hljs-keyword\">private</span> BigInteger modulus, privateKey, publicKey;\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@param</span> bits */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">RSA</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> bits)</span> {\n    generateKeys(bits);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> message\n   * <span class=\"hljs-doctag\">@return</span> encrypted message\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> String <span class=\"hljs-title function_\">encrypt</span><span class=\"hljs-params\">(String message)</span> {\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(message.getBytes())).modPow(publicKey, modulus).toString();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> message\n   * <span class=\"hljs-doctag\">@return</span> encrypted message as big integer\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> BigInteger <span class=\"hljs-title function_\">encrypt</span><span class=\"hljs-params\">(BigInteger message)</span> {\n    <span class=\"hljs-keyword\">return</span> message.modPow(publicKey, modulus);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> encryptedMessage\n   * <span class=\"hljs-doctag\">@return</span> plain message\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> String <span class=\"hljs-title function_\">decrypt</span><span class=\"hljs-params\">(String encryptedMessage)</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>((<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(encryptedMessage)).modPow(privateKey, modulus).toByteArray());\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> encryptedMessage\n   * <span class=\"hljs-doctag\">@return</span> plain message as big integer\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> BigInteger <span class=\"hljs-title function_\">decrypt</span><span class=\"hljs-params\">(BigInteger encryptedMessage)</span> {\n    <span class=\"hljs-keyword\">return</span> encryptedMessage.modPow(privateKey, modulus);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Generate a new public and private key set.\n   *\n   * <span class=\"hljs-doctag\">@param</span> bits\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">synchronized</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generateKeys</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> bits)</span> {\n    <span class=\"hljs-type\">SecureRandom</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SecureRandom</span>();\n    <span class=\"hljs-type\">BigInteger</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(bits / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">100</span>, r);\n    <span class=\"hljs-type\">BigInteger</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(bits / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">100</span>, r);\n    modulus = p.multiply(q);\n\n    <span class=\"hljs-type\">BigInteger</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));\n\n    publicKey = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(<span class=\"hljs-string\">&quot;3&quot;</span>);\n\n    <span class=\"hljs-keyword\">while</span> (m.gcd(publicKey).intValue() &gt; <span class=\"hljs-number\">1</span>) {\n      publicKey = publicKey.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(<span class=\"hljs-string\">&quot;2&quot;</span>));\n    }\n\n    privateKey = publicKey.modInverse(m);\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Prateek Chanda",
      "email": "prateekkol21@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Nguyen Duy Tiep",
      "email": "duytiep@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
