{
  "slug": "inversions",
  "name": "Inversions",
  "categories": ["divideandconquer"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer/inversions.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer/inversions.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nGiven an array-like data structure A[1..n], how many pairs\n(i, j) for all 1 &lt;= i &lt; j &lt;= n such that A[i] &gt; A[j]? These pairs are\ncalled inversions. Counting the number of such inversions in an array-like\nobject is the important. Among other things, counting inversions  can help\nus determine how close a given array is to being sorted\n\nIn this implementation, I provide two algorithms, a divide-and-conquer\nalgorithm which runs in nlogn and the brute-force n^2 algorithm.\n\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">count_inversions_bf</span>(<span class=\"hljs-params\">arr</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Counts the number of inversions using a a naive brute-force algorithm\n\n    Parameters\n    ----------\n    arr: arr: array-like, the list containing the items for which the number\n    of inversions is desired. The elements of `arr` must be comparable.\n\n    Returns\n    -------\n    num_inversions: The total number of inversions in `arr`\n\n    Examples\n    ---------\n\n     &gt;&gt;&gt; count_inversions_bf([1, 4, 2, 4, 1])\n     4\n     &gt;&gt;&gt; count_inversions_bf([1, 1, 2, 4, 4])\n     0\n     &gt;&gt;&gt; count_inversions_bf([])\n     0\n    &quot;&quot;&quot;</span>\n\n    num_inversions = <span class=\"hljs-number\">0</span>\n    n = <span class=\"hljs-built_in\">len</span>(arr)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, n):\n            <span class=\"hljs-keyword\">if</span> arr[i] &gt; arr[j]:\n                num_inversions += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> num_inversions\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">count_inversions_recursive</span>(<span class=\"hljs-params\">arr</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Counts the number of inversions using a divide-and-conquer algorithm\n\n    Parameters\n    -----------\n    arr: array-like, the list containing the items for which the number\n    of inversions is desired. The elements of `arr` must be comparable.\n\n    Returns\n    -------\n    C: a sorted copy of `arr`.\n    num_inversions: int, the total number of inversions in &#x27;arr&#x27;\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; count_inversions_recursive([1, 4, 2, 4, 1])\n    ([1, 1, 2, 4, 4], 4)\n    &gt;&gt;&gt; count_inversions_recursive([1, 1, 2, 4, 4])\n    ([1, 1, 2, 4, 4], 0)\n    &gt;&gt;&gt; count_inversions_recursive([])\n    ([], 0)\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) &lt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> arr, <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        mid = <span class=\"hljs-built_in\">len</span>(arr) // <span class=\"hljs-number\">2</span>\n        P = arr[<span class=\"hljs-number\">0</span>:mid]\n        Q = arr[mid:]\n\n        A, inversion_p = count_inversions_recursive(P)\n        B, inversions_q = count_inversions_recursive(Q)\n        C, cross_inversions = _count_cross_inversions(A, B)\n\n        num_inversions = inversion_p + inversions_q + cross_inversions\n        <span class=\"hljs-keyword\">return</span> C, num_inversions\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_count_cross_inversions</span>(<span class=\"hljs-params\">P, Q</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Counts the inversions across two sorted arrays.\n    And combine the two arrays into one sorted array\n\n    For all 1&lt;= i&lt;=len(P) and for all 1 &lt;= j &lt;= len(Q),\n    if P[i] &gt; Q[j], then (i, j) is a cross inversion\n\n    Parameters\n    ----------\n    P: array-like, sorted in non-decreasing order\n    Q: array-like, sorted in non-decreasing order\n\n    Returns\n    ------\n    R: array-like, a sorted array of the elements of `P` and `Q`\n    num_inversion: int, the number of inversions across `P` and `Q`\n\n    Examples\n    --------\n\n    &gt;&gt;&gt; _count_cross_inversions([1, 2, 3], [0, 2, 5])\n    ([0, 1, 2, 2, 3, 5], 4)\n    &gt;&gt;&gt; _count_cross_inversions([1, 2, 3], [3, 4, 5])\n    ([1, 2, 3, 3, 4, 5], 0)\n    &quot;&quot;&quot;</span>\n\n    R = []\n    i = j = num_inversion = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> i &lt; <span class=\"hljs-built_in\">len</span>(P) <span class=\"hljs-keyword\">and</span> j &lt; <span class=\"hljs-built_in\">len</span>(Q):\n        <span class=\"hljs-keyword\">if</span> P[i] &gt; Q[j]:\n            <span class=\"hljs-comment\"># if P[1] &gt; Q[j], then P[k] &gt; Q[k] for all  i &lt; k &lt;= len(P)</span>\n            <span class=\"hljs-comment\"># These are all inversions. The claim emerges from the</span>\n            <span class=\"hljs-comment\"># property that P is sorted.</span>\n            num_inversion += <span class=\"hljs-built_in\">len</span>(P) - i\n            R.append(Q[j])\n            j += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            R.append(P[i])\n            i += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">if</span> i &lt; <span class=\"hljs-built_in\">len</span>(P):\n        R.extend(P[i:])\n    <span class=\"hljs-keyword\">else</span>:\n        R.extend(Q[j:])\n\n    <span class=\"hljs-keyword\">return</span> R, num_inversion\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    arr_1 = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">11</span>]\n\n    <span class=\"hljs-comment\"># this arr has 8 inversions:</span>\n    <span class=\"hljs-comment\"># (10, 2), (10, 1), (10, 5), (10, 5), (10, 2), (2, 1), (5, 2), (5, 2)</span>\n\n    num_inversions_bf = count_inversions_bf(arr_1)\n    _, num_inversions_recursive = count_inversions_recursive(arr_1)\n\n    <span class=\"hljs-keyword\">assert</span> num_inversions_bf == num_inversions_recursive == <span class=\"hljs-number\">8</span>\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;number of inversions = &quot;</span>, num_inversions_bf)\n\n    <span class=\"hljs-comment\"># testing an array with zero inversion (a sorted arr_1)</span>\n\n    arr_1.sort()\n    num_inversions_bf = count_inversions_bf(arr_1)\n    _, num_inversions_recursive = count_inversions_recursive(arr_1)\n\n    <span class=\"hljs-keyword\">assert</span> num_inversions_bf == num_inversions_recursive == <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;number of inversions = &quot;</span>, num_inversions_bf)\n\n    <span class=\"hljs-comment\"># an empty list should also have zero inversions</span>\n    arr_1 = []\n    num_inversions_bf = count_inversions_bf(arr_1)\n    _, num_inversions_recursive = count_inversions_recursive(arr_1)\n\n    <span class=\"hljs-keyword\">assert</span> num_inversions_bf == num_inversions_recursive == <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;number of inversions = &quot;</span>, num_inversions_bf)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maxwell Aladago",
      "email": "maxwell.aladago@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
