{
  "slug": "iterativebinarysearch",
  "name": "IterativeBinarySearch",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Searches/IterativeBinarySearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Searches/IterativeBinarySearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> Searches;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.String.format;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n<span class=\"hljs-keyword\">import</span> java.util.stream.Stream;\n\n<span class=\"hljs-comment\">/**\n * Binary search is one of the most popular algorithms This class represents iterative version\n * {<span class=\"hljs-doctag\">@link</span> BinarySearch} Iterative binary search is likely to have lower constant factors because it\n * doesn&#x27;t involve the overhead of manipulating the call stack. But in java the recursive version\n * can be optimized by the compiler to this version.\n *\n * &lt;p&gt;Worst-case performance O(log n) Best-case performance O(1) Average performance O(log n)\n * Worst-case space complexity O(1)\n *\n * <span class=\"hljs-doctag\">@author</span> Gabriele La Greca : https://github.com/thegabriele97\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\n * <span class=\"hljs-doctag\">@see</span> SearchAlgorithm\n * <span class=\"hljs-doctag\">@see</span> BinarySearch\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IterativeBinarySearch</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\n\n  <span class=\"hljs-comment\">/**\n   * This method implements an iterative version of binary search algorithm\n   *\n   * <span class=\"hljs-doctag\">@param</span> array a sorted array\n   * <span class=\"hljs-doctag\">@param</span> key the key to search in array\n   * <span class=\"hljs-doctag\">@return</span> the index of key in the array or -1 if not found\n   */</span>\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] array, T key)</span> {\n    <span class=\"hljs-type\">int</span> l, r, k, cmp;\n\n    l = <span class=\"hljs-number\">0</span>;\n    r = array.length - <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">while</span> (l &lt;= r) {\n      k = (l + r) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\n      cmp = key.compareTo(array[k]);\n\n      <span class=\"hljs-keyword\">if</span> (cmp == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> k;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (cmp &lt; <span class=\"hljs-number\">0</span>) {\n        r = --k;\n      } <span class=\"hljs-keyword\">else</span> {\n        l = ++k;\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">// Only a main method for test purpose</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100000</span>;\n    Integer[] integers =\n        Stream.generate(() -&gt; r.nextInt(maxElement)).limit(size).sorted().toArray(Integer[]::<span class=\"hljs-keyword\">new</span>);\n\n    <span class=\"hljs-comment\">// the element that should be found</span>\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">shouldBeFound</span> <span class=\"hljs-operator\">=</span> integers[r.nextInt(size - <span class=\"hljs-number\">1</span>)];\n\n    <span class=\"hljs-type\">IterativeBinarySearch</span> <span class=\"hljs-variable\">search</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IterativeBinarySearch</span>();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> search.find(integers, shouldBeFound);\n\n    System.out.println(\n        String.format(\n            <span class=\"hljs-string\">&quot;Should be found: %d. Found %d at index %d. An array length %d&quot;</span>,\n            shouldBeFound, integers[atIndex], atIndex, size));\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">toCheck</span> <span class=\"hljs-operator\">=</span> Arrays.binarySearch(integers, shouldBeFound);\n    System.out.println(\n        format(\n            <span class=\"hljs-string\">&quot;Found by system method at an index: %d. Is equal: %b&quot;</span>, toCheck, toCheck == atIndex));\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "Salvatore Gabriele La Greca",
      "email": "35406071+thegabriele97@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "thegabriele97",
      "email": "gabriele.lagreca@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
