{
  "slug": "natural-sort",
  "name": "Natural Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/natural_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/natural_sort.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> re\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">natural_sort</span>(<span class=\"hljs-params\">input_list: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Sort the given list of strings in the way that humans expect.\n\n    The normal Python sort algorithm sorts lexicographically,\n    so you might not get the results that you expect...\n\n    &gt;&gt;&gt; example1 = [&#x27;2 ft 7 in&#x27;, &#x27;1 ft 5 in&#x27;, &#x27;10 ft 2 in&#x27;, &#x27;2 ft 11 in&#x27;, &#x27;7 ft 6 in&#x27;]\n    &gt;&gt;&gt; sorted(example1)\n    [&#x27;1 ft 5 in&#x27;, &#x27;10 ft 2 in&#x27;, &#x27;2 ft 11 in&#x27;, &#x27;2 ft 7 in&#x27;, &#x27;7 ft 6 in&#x27;]\n    &gt;&gt;&gt; # The natural sort algorithm sort based on meaning and not computer code point.\n    &gt;&gt;&gt; natural_sort(example1)\n    [&#x27;1 ft 5 in&#x27;, &#x27;2 ft 7 in&#x27;, &#x27;2 ft 11 in&#x27;, &#x27;7 ft 6 in&#x27;, &#x27;10 ft 2 in&#x27;]\n\n    &gt;&gt;&gt; example2 = [&#x27;Elm11&#x27;, &#x27;Elm12&#x27;, &#x27;Elm2&#x27;, &#x27;elm0&#x27;, &#x27;elm1&#x27;, &#x27;elm10&#x27;, &#x27;elm13&#x27;, &#x27;elm9&#x27;]\n    &gt;&gt;&gt; sorted(example2)\n    [&#x27;Elm11&#x27;, &#x27;Elm12&#x27;, &#x27;Elm2&#x27;, &#x27;elm0&#x27;, &#x27;elm1&#x27;, &#x27;elm10&#x27;, &#x27;elm13&#x27;, &#x27;elm9&#x27;]\n    &gt;&gt;&gt; natural_sort(example2)\n    [&#x27;elm0&#x27;, &#x27;elm1&#x27;, &#x27;Elm2&#x27;, &#x27;elm9&#x27;, &#x27;elm10&#x27;, &#x27;Elm11&#x27;, &#x27;Elm12&#x27;, &#x27;elm13&#x27;]\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">alphanum_key</span>(<span class=\"hljs-params\">key</span>):\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">int</span>(s) <span class=\"hljs-keyword\">if</span> s.isdigit() <span class=\"hljs-keyword\">else</span> s.lower() <span class=\"hljs-keyword\">for</span> s <span class=\"hljs-keyword\">in</span> re.split(<span class=\"hljs-string\">&quot;([0-9]+)&quot;</span>, key)]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>(input_list, key=alphanum_key)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Mozartus",
      "email": "32893711+Mozartuss@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
