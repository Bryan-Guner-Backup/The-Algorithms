{
  "slug": "fftbluestein",
  "name": "FFTBluestein",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Maths/FFTBluestein.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/FFTBluestein.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n\n<span class=\"hljs-comment\">/**\n * Class for calculating the Fast Fourier Transform (FFT) of a discrete signal using the Bluestein&#x27;s\n * algorithm.\n *\n * <span class=\"hljs-doctag\">@author</span> Ioannis Karavitsis\n * <span class=\"hljs-doctag\">@version</span> 1.0\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FFTBluestein</span> {\n  <span class=\"hljs-comment\">/**\n   * Bluestein&#x27;s FFT Algorithm.\n   *\n   * &lt;p&gt;More info: https://en.wikipedia.org/wiki/Chirp_Z-transform#Bluestein.27s_algorithm\n   * http://tka4.org/materials/lib/Articles-Books/Numerical%20Algorithms/Hartley_Trasform/Bluestein%27s%20FFT%20algorithm%20-%20Wikipedia,%20the%20free%20encyclopedia.htm\n   *\n   * <span class=\"hljs-doctag\">@param</span> x The discrete signal which is then converted to the FFT or the IFFT of signal x.\n   * <span class=\"hljs-doctag\">@param</span> inverse True if you want to find the inverse FFT.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fftBluestein</span><span class=\"hljs-params\">(ArrayList&lt;FFT.Complex&gt; x, <span class=\"hljs-type\">boolean</span> inverse)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> x.size();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bnSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> * N - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">direction</span> <span class=\"hljs-operator\">=</span> inverse ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\n    ArrayList&lt;FFT.Complex&gt; an = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    ArrayList&lt;FFT.Complex&gt; bn = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n\n    <span class=\"hljs-comment\">/* Initialization of the b(n) sequence (see Wikipedia&#x27;s article above for the symbols used)*/</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; bnSize; i++) bn.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex());\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">angle</span> <span class=\"hljs-operator\">=</span> (i - N + <span class=\"hljs-number\">1</span>) * (i - N + <span class=\"hljs-number\">1</span>) * Math.PI / N * direction;\n      bn.set(i, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex(Math.cos(angle), Math.sin(angle)));\n      bn.set(bnSize - i - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex(Math.cos(angle), Math.sin(angle)));\n    }\n\n    <span class=\"hljs-comment\">/* Initialization of the a(n) sequence */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">angle</span> <span class=\"hljs-operator\">=</span> -i * i * Math.PI / N * direction;\n      an.add(x.get(i).multiply(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex(Math.cos(angle), Math.sin(angle))));\n    }\n\n    ArrayList&lt;FFT.Complex&gt; convolution = ConvolutionFFT.convolutionFFT(an, bn);\n\n    <span class=\"hljs-comment\">/* The final multiplication of the convolution with the b*(k) factor  */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">angle</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span> * i * i * Math.PI / N * direction;\n      FFT.<span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">bk</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FFT</span>.Complex(Math.cos(angle), Math.sin(angle));\n      x.set(i, bk.multiply(convolution.get(i + N - <span class=\"hljs-number\">1</span>)));\n    }\n\n    <span class=\"hljs-comment\">/* Divide by N if we want the inverse FFT */</span>\n    <span class=\"hljs-keyword\">if</span> (inverse) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n        FFT.<span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">z</span> <span class=\"hljs-operator\">=</span> x.get(i);\n        x.set(i, z.divide(N));\n      }\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "JohnKara",
      "email": "kcioannis@csd.auth.gr",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
