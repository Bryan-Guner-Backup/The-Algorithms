{
  "slug": "minimum-spanning-tree-prims2",
  "name": "Minimum Spanning Tree Prims2",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/minimum_spanning_tree_prims2.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/minimum_spanning_tree_prims2.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nPrim&#x27;s (also known as Jarn√≠k&#x27;s) algorithm is a greedy algorithm that finds a minimum\nspanning tree for a weighted undirected graph. This means it finds a subset of the\nedges that forms a tree that includes every vertex, where the total weight of all the\nedges in the tree is minimized. The algorithm operates by building this tree one vertex\nat a time, from an arbitrary starting vertex, at each step adding the cheapest possible\nconnection from the tree to another vertex.\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> sys <span class=\"hljs-keyword\">import</span> maxsize\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, <span class=\"hljs-type\">Optional</span>, TypeVar\n\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_parent_position</span>(<span class=\"hljs-params\">position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    heap helper function get the position of the parent of the current node\n\n    &gt;&gt;&gt; get_parent_position(1)\n    0\n    &gt;&gt;&gt; get_parent_position(2)\n    0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> (position - <span class=\"hljs-number\">1</span>) // <span class=\"hljs-number\">2</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_child_left_position</span>(<span class=\"hljs-params\">position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    heap helper function get the position of the left child of the current node\n\n    &gt;&gt;&gt; get_child_left_position(0)\n    1\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">2</span> * position) + <span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_child_right_position</span>(<span class=\"hljs-params\">position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    heap helper function get the position of the right child of the current node\n\n    &gt;&gt;&gt; get_child_right_position(0)\n    2\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">2</span> * position) + <span class=\"hljs-number\">2</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinPriorityQueue</span>(<span class=\"hljs-type\">Generic</span>[T]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Minimum Priority Queue Class\n\n    Functions:\n    is_empty: function to check if the priority queue is empty\n    push: function to add an element with given priority to the queue\n    extract_min: function to remove and return the element with lowest weight (highest\n                 priority)\n    update_key: function to update the weight of the given key\n    _bubble_up: helper function to place a node at the proper position (upward\n                movement)\n    _bubble_down: helper function to place a node at the proper position (downward\n                movement)\n    _swap_nodes: helper function to swap the nodes at the given positions\n\n    &gt;&gt;&gt; queue = MinPriorityQueue()\n\n    &gt;&gt;&gt; queue.push(1, 1000)\n    &gt;&gt;&gt; queue.push(2, 100)\n    &gt;&gt;&gt; queue.push(3, 4000)\n    &gt;&gt;&gt; queue.push(4, 3000)\n\n    &gt;&gt;&gt; print(queue.extract_min())\n    2\n\n    &gt;&gt;&gt; queue.update_key(4, 50)\n\n    &gt;&gt;&gt; print(queue.extract_min())\n    4\n    &gt;&gt;&gt; print(queue.extract_min())\n    1\n    &gt;&gt;&gt; print(queue.extract_min())\n    3\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.heap: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[T, <span class=\"hljs-built_in\">int</span>]] = []\n        self.position_map: <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-built_in\">int</span>] = {}\n        self.elements: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">return</span> self.elements\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self.heap)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-comment\"># Check if the priority queue is empty</span>\n        <span class=\"hljs-keyword\">return</span> self.elements == <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, elem: T, weight: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-comment\"># Add an element with given priority to the queue</span>\n        self.heap.append((elem, weight))\n        self.position_map[elem] = self.elements\n        self.elements += <span class=\"hljs-number\">1</span>\n        self._bubble_up(elem)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">extract_min</span>(<span class=\"hljs-params\">self</span>) -&gt; T:\n        <span class=\"hljs-comment\"># Remove and return the element with lowest weight (highest priority)</span>\n        <span class=\"hljs-keyword\">if</span> self.elements &gt; <span class=\"hljs-number\">1</span>:\n            self._swap_nodes(<span class=\"hljs-number\">0</span>, self.elements - <span class=\"hljs-number\">1</span>)\n        elem, _ = self.heap.pop()\n        <span class=\"hljs-keyword\">del</span> self.position_map[elem]\n        self.elements -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> self.elements &gt; <span class=\"hljs-number\">0</span>:\n            bubble_down_elem, _ = self.heap[<span class=\"hljs-number\">0</span>]\n            self._bubble_down(bubble_down_elem)\n        <span class=\"hljs-keyword\">return</span> elem\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update_key</span>(<span class=\"hljs-params\">self, elem: T, weight: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-comment\"># Update the weight of the given key</span>\n        position = self.position_map[elem]\n        self.heap[position] = (elem, weight)\n        <span class=\"hljs-keyword\">if</span> position &gt; <span class=\"hljs-number\">0</span>:\n            parent_position = get_parent_position(position)\n            _, parent_weight = self.heap[parent_position]\n            <span class=\"hljs-keyword\">if</span> parent_weight &gt; weight:\n                self._bubble_up(elem)\n            <span class=\"hljs-keyword\">else</span>:\n                self._bubble_down(elem)\n        <span class=\"hljs-keyword\">else</span>:\n            self._bubble_down(elem)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_bubble_up</span>(<span class=\"hljs-params\">self, elem: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-comment\"># Place a node at the proper position (upward movement) [to be used internally</span>\n        <span class=\"hljs-comment\"># only]</span>\n        curr_pos = self.position_map[elem]\n        <span class=\"hljs-keyword\">if</span> curr_pos == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span>\n        parent_position = get_parent_position(curr_pos)\n        _, weight = self.heap[curr_pos]\n        _, parent_weight = self.heap[parent_position]\n        <span class=\"hljs-keyword\">if</span> parent_weight &gt; weight:\n            self._swap_nodes(parent_position, curr_pos)\n            <span class=\"hljs-keyword\">return</span> self._bubble_up(elem)\n        <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_bubble_down</span>(<span class=\"hljs-params\">self, elem: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-comment\"># Place a node at the proper position (downward movement) [to be used</span>\n        <span class=\"hljs-comment\"># internally only]</span>\n        curr_pos = self.position_map[elem]\n        _, weight = self.heap[curr_pos]\n        child_left_position = get_child_left_position(curr_pos)\n        child_right_position = get_child_right_position(curr_pos)\n        <span class=\"hljs-keyword\">if</span> child_left_position &lt; self.elements <span class=\"hljs-keyword\">and</span> child_right_position &lt; self.elements:\n            _, child_left_weight = self.heap[child_left_position]\n            _, child_right_weight = self.heap[child_right_position]\n            <span class=\"hljs-keyword\">if</span> child_right_weight &lt; child_left_weight:\n                <span class=\"hljs-keyword\">if</span> child_right_weight &lt; weight:\n                    self._swap_nodes(child_right_position, curr_pos)\n                    <span class=\"hljs-keyword\">return</span> self._bubble_down(elem)\n        <span class=\"hljs-keyword\">if</span> child_left_position &lt; self.elements:\n            _, child_left_weight = self.heap[child_left_position]\n            <span class=\"hljs-keyword\">if</span> child_left_weight &lt; weight:\n                self._swap_nodes(child_left_position, curr_pos)\n                <span class=\"hljs-keyword\">return</span> self._bubble_down(elem)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span> child_right_position &lt; self.elements:\n            _, child_right_weight = self.heap[child_right_position]\n            <span class=\"hljs-keyword\">if</span> child_right_weight &lt; weight:\n                self._swap_nodes(child_right_position, curr_pos)\n                <span class=\"hljs-keyword\">return</span> self._bubble_down(elem)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_swap_nodes</span>(<span class=\"hljs-params\">self, node1_pos: <span class=\"hljs-built_in\">int</span>, node2_pos: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-comment\"># Swap the nodes at the given positions</span>\n        node1_elem = self.heap[node1_pos][<span class=\"hljs-number\">0</span>]\n        node2_elem = self.heap[node2_pos][<span class=\"hljs-number\">0</span>]\n        self.heap[node1_pos], self.heap[node2_pos] = (\n            self.heap[node2_pos],\n            self.heap[node1_pos],\n        )\n        self.position_map[node1_elem] = node2_pos\n        self.position_map[node2_elem] = node1_pos\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphUndirectedWeighted</span>(<span class=\"hljs-type\">Generic</span>[T]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Graph Undirected Weighted Class\n\n    Functions:\n    add_node: function to add a node in the graph\n    add_edge: function to add an edge between 2 nodes in the graph\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.connections: <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-built_in\">int</span>]] = {}\n        self.nodes: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self.connections)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">return</span> self.nodes\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_node</span>(<span class=\"hljs-params\">self, node: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-comment\"># Add a node in the graph if it is not in the graph</span>\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.connections:\n            self.connections[node] = {}\n            self.nodes += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_edge</span>(<span class=\"hljs-params\">self, node1: T, node2: T, weight: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-comment\"># Add an edge between 2 nodes in the graph</span>\n        self.add_node(node1)\n        self.add_node(node2)\n        self.connections[node1][node2] = weight\n        self.connections[node2][node1] = weight\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prims_algo</span>(<span class=\"hljs-params\">\n    graph: GraphUndirectedWeighted[T],\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-built_in\">int</span>], <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-type\">Optional</span>[T]]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; graph = GraphUndirectedWeighted()\n\n    &gt;&gt;&gt; graph.add_edge(&quot;a&quot;, &quot;b&quot;, 3)\n    &gt;&gt;&gt; graph.add_edge(&quot;b&quot;, &quot;c&quot;, 10)\n    &gt;&gt;&gt; graph.add_edge(&quot;c&quot;, &quot;d&quot;, 5)\n    &gt;&gt;&gt; graph.add_edge(&quot;a&quot;, &quot;c&quot;, 15)\n    &gt;&gt;&gt; graph.add_edge(&quot;b&quot;, &quot;d&quot;, 100)\n\n    &gt;&gt;&gt; dist, parent = prims_algo(graph)\n\n    &gt;&gt;&gt; abs(dist[&quot;a&quot;] - dist[&quot;b&quot;])\n    3\n    &gt;&gt;&gt; abs(dist[&quot;d&quot;] - dist[&quot;b&quot;])\n    15\n    &gt;&gt;&gt; abs(dist[&quot;a&quot;] - dist[&quot;c&quot;])\n    13\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># prim&#x27;s algorithm for minimum spanning tree</span>\n    dist: <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-built_in\">int</span>] = {node: maxsize <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> graph.connections}\n    parent: <span class=\"hljs-built_in\">dict</span>[T, <span class=\"hljs-type\">Optional</span>[T]] = {node: <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> graph.connections}\n\n    priority_queue: MinPriorityQueue[T] = MinPriorityQueue()\n    <span class=\"hljs-keyword\">for</span> node, weight <span class=\"hljs-keyword\">in</span> dist.items():\n        priority_queue.push(node, weight)\n\n    <span class=\"hljs-keyword\">if</span> priority_queue.is_empty():\n        <span class=\"hljs-keyword\">return</span> dist, parent\n\n    <span class=\"hljs-comment\"># initialization</span>\n    node = priority_queue.extract_min()\n    dist[node] = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> neighbour <span class=\"hljs-keyword\">in</span> graph.connections[node]:\n        <span class=\"hljs-keyword\">if</span> dist[neighbour] &gt; dist[node] + graph.connections[node][neighbour]:\n            dist[neighbour] = dist[node] + graph.connections[node][neighbour]\n            priority_queue.update_key(neighbour, dist[neighbour])\n            parent[neighbour] = node\n\n    <span class=\"hljs-comment\"># running prim&#x27;s algorithm</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> priority_queue.is_empty():\n        node = priority_queue.extract_min()\n        <span class=\"hljs-keyword\">for</span> neighbour <span class=\"hljs-keyword\">in</span> graph.connections[node]:\n            <span class=\"hljs-keyword\">if</span> dist[neighbour] &gt; dist[node] + graph.connections[node][neighbour]:\n                dist[neighbour] = dist[node] + graph.connections[node][neighbour]\n                priority_queue.update_key(neighbour, dist[neighbour])\n                parent[neighbour] = node\n    <span class=\"hljs-keyword\">return</span> dist, parent\n"
    }
  },
  "contributors": [
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
