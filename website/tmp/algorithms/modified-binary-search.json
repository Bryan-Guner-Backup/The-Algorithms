{
  "slug": "modified-binary-search",
  "name": "Modified Binary Search",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "searching/modified_binary_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching/modified_binary_search.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Modified binary search algorithm](https://arxiv.org/abs/1406.1677)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/** This function does Binary search for `x` in `i`-th row from `j_low` to\n * `j_high`.\n * @param mat 2D matrix to search within\n * @param i row to search in\n * @param j_low start column index\n * @param j_high end column index\n * @param x value to search for\n * @return column where `x` was found\n * @return -1 if value not found\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> **mat, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j_low, <span class=\"hljs-type\">int</span> j_high, <span class=\"hljs-type\">int</span> x)</span>\n{\n    <span class=\"hljs-keyword\">while</span> (j_low &lt;= j_high)\n    {\n        <span class=\"hljs-type\">int</span> j_mid = (j_low + j_high) / <span class=\"hljs-number\">2</span>;\n\n        <span class=\"hljs-comment\">// Element found</span>\n        <span class=\"hljs-keyword\">if</span> (mat[i][j_mid] == x)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Found at (%d,%d)\\n&quot;</span>, i, j_mid);\n            <span class=\"hljs-keyword\">return</span> j_mid;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mat[i][j_mid] &gt; x)\n            j_high = j_mid - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">else</span>\n            j_low = j_mid + <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">// element not found</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;element not found\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-comment\">/** Function to perform binary search on the mid values of row to get the\n * desired pair of rows where the element can be found\n * @param [in] mat matrix to search for the value in\n * @param n number of rows in the matrix\n * @param m number of columns in the matrix\n * @param x value to search for\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">modifiedBinarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> **mat, <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> x)</span>\n{  <span class=\"hljs-comment\">// If Single row matrix</span>\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">1</span>)\n    {\n        binarySearch(mat, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, m - <span class=\"hljs-number\">1</span>, x);\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Do binary search in middle column.</span>\n    <span class=\"hljs-comment\">// Condition to terminate the loop when the 2 desired rows are found.</span>\n    <span class=\"hljs-type\">int</span> i_low = <span class=\"hljs-number\">0</span>, i_high = n - <span class=\"hljs-number\">1</span>, j_mid = m / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">while</span> ((i_low + <span class=\"hljs-number\">1</span>) &lt; i_high)\n    {\n        <span class=\"hljs-type\">int</span> i_mid = (i_low + i_high) / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-comment\">// element found</span>\n        <span class=\"hljs-keyword\">if</span> (mat[i_mid][j_mid] == x)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Found at (%d,%d)\\n&quot;</span>, i_mid, j_mid);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mat[i_mid][j_mid] &gt; x)\n            i_high = i_mid;\n        <span class=\"hljs-keyword\">else</span>\n            i_low = i_mid;\n    }\n    <span class=\"hljs-comment\">// If element is present on the mid of the two rows</span>\n    <span class=\"hljs-keyword\">if</span> (mat[i_low][j_mid] == x)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Found at (%d,%d)\\n&quot;</span>, i_low, j_mid);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (mat[i_low + <span class=\"hljs-number\">1</span>][j_mid] == x)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Found at (%d,%d)\\n&quot;</span>, i_low + <span class=\"hljs-number\">1</span>, j_mid);\n\n    <span class=\"hljs-comment\">// Search element on 1st half of 1st row</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt;= mat[i_low][j_mid - <span class=\"hljs-number\">1</span>])\n        binarySearch(mat, i_low, <span class=\"hljs-number\">0</span>, j_mid - <span class=\"hljs-number\">1</span>, x);\n\n    <span class=\"hljs-comment\">// Search element on 2nd half of 1st row</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &gt;= mat[i_low][j_mid + <span class=\"hljs-number\">1</span>] &amp;&amp; x &lt;= mat[i_low][m - <span class=\"hljs-number\">1</span>])\n        binarySearch(mat, i_low, j_mid + <span class=\"hljs-number\">1</span>, m - <span class=\"hljs-number\">1</span>, x);\n\n    <span class=\"hljs-comment\">// Search element on 1st half of 2nd row</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt;= mat[i_low + <span class=\"hljs-number\">1</span>][j_mid - <span class=\"hljs-number\">1</span>])\n        binarySearch(mat, i_low + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, j_mid - <span class=\"hljs-number\">1</span>, x);\n\n    <span class=\"hljs-comment\">// search element on 2nd half of 2nd row</span>\n    <span class=\"hljs-keyword\">else</span>\n        binarySearch(mat, i_low + <span class=\"hljs-number\">1</span>, j_mid + <span class=\"hljs-number\">1</span>, m - <span class=\"hljs-number\">1</span>, x);\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> x;     <span class=\"hljs-comment\">// element to be searched</span>\n    <span class=\"hljs-type\">int</span> m, n;  <span class=\"hljs-comment\">// m = columns, n = rows</span>\n\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d\\n&quot;</span>, &amp;n, &amp;m, &amp;x);\n\n    <span class=\"hljs-type\">int</span> **mat = (<span class=\"hljs-type\">int</span> **)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *));\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; m; i++) mat[i] = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(m * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; m; j++)\n        {\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;mat[i][j]);\n        }\n    }\n\n    modifiedBinarySearch(mat, n, m, x);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">free</span>(mat[i]);\n    <span class=\"hljs-built_in\">free</span>(mat);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "agnimish",
      "email": "31532652+agnimish@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
