{
  "slug": "vector-important-functions",
  "name": "Vector Important Functions",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "others/vector_important_functions.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others/vector_important_functions.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief A C++ program to demonstrate working of std::sort(), std::reverse()\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;numeric&gt;</span>  <span class=\"hljs-comment\">// For accumulate operation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Initializing vector with array values</span>\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">15</span>};\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">vect</span><span class=\"hljs-params\">(arr, arr + n)</span></span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Vector is: &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) std::cout &lt;&lt; vect[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n\n    <span class=\"hljs-comment\">// Sorting the Vector in Ascending order</span>\n    std::<span class=\"hljs-built_in\">sort</span>(vect.<span class=\"hljs-built_in\">begin</span>(), vect.<span class=\"hljs-built_in\">end</span>());\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nVector after sorting is: &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) std::cout &lt;&lt; vect[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n\n    <span class=\"hljs-comment\">// Reversing the Vector</span>\n    std::<span class=\"hljs-built_in\">reverse</span>(vect.<span class=\"hljs-built_in\">begin</span>(), vect.<span class=\"hljs-built_in\">end</span>());\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nVector after reversing is: &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>; i++) std::cout &lt;&lt; vect[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nMaximum element of vector is: &quot;</span>;\n    std::cout &lt;&lt; *<span class=\"hljs-built_in\">max_element</span>(vect.<span class=\"hljs-built_in\">begin</span>(), vect.<span class=\"hljs-built_in\">end</span>());\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nMinimum element of vector is: &quot;</span>;\n    std::cout &lt;&lt; *<span class=\"hljs-built_in\">min_element</span>(vect.<span class=\"hljs-built_in\">begin</span>(), vect.<span class=\"hljs-built_in\">end</span>());\n\n    <span class=\"hljs-comment\">// Starting the summation from 0</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThe summation of vector elements is: &quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-built_in\">accumulate</span>(vect.<span class=\"hljs-built_in\">begin</span>(), vect.<span class=\"hljs-built_in\">end</span>(), <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
