{
  "slug": "intro-sort",
  "name": "Intro Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/intro_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/intro_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nIntrospective Sort is hybrid sort (Quick Sort + Heap Sort + Insertion Sort)\nif the size of the list is under 16, use insertion sort\nhttps://en.wikipedia.org/wiki/Introsort\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> math\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertion_sort</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span>, start: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span>, end: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n\n    &gt;&gt;&gt; insertion_sort(array, 0, len(array))\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    &quot;&quot;&quot;</span>\n    end = end <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(array)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(start, end):\n        temp_index = i\n        temp_index_value = array[i]\n        <span class=\"hljs-keyword\">while</span> temp_index != start <span class=\"hljs-keyword\">and</span> temp_index_value &lt; array[temp_index - <span class=\"hljs-number\">1</span>]:\n            array[temp_index] = array[temp_index - <span class=\"hljs-number\">1</span>]\n            temp_index -= <span class=\"hljs-number\">1</span>\n        array[temp_index] = temp_index_value\n    <span class=\"hljs-keyword\">return</span> array\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heapify</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span>, index: <span class=\"hljs-built_in\">int</span>, heap_size: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># Max Heap</span>\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n\n    &gt;&gt;&gt; heapify(array, len(array) // 2 ,len(array))\n    &quot;&quot;&quot;</span>\n    largest = index\n    left_index = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># Left Node</span>\n    right_index = <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># Right Node</span>\n\n    <span class=\"hljs-keyword\">if</span> left_index &lt; heap_size <span class=\"hljs-keyword\">and</span> array[largest] &lt; array[left_index]:\n        largest = left_index\n\n    <span class=\"hljs-keyword\">if</span> right_index &lt; heap_size <span class=\"hljs-keyword\">and</span> array[largest] &lt; array[right_index]:\n        largest = right_index\n\n    <span class=\"hljs-keyword\">if</span> largest != index:\n        array[index], array[largest] = array[largest], array[index]\n        heapify(array, largest, heap_size)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heap_sort</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n\n    &gt;&gt;&gt; heap_sort(array)\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    &quot;&quot;&quot;</span>\n    n = <span class=\"hljs-built_in\">len</span>(array)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n // <span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\n        heapify(array, i, n)\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>):\n        array[i], array[<span class=\"hljs-number\">0</span>] = array[<span class=\"hljs-number\">0</span>], array[i]\n        heapify(array, <span class=\"hljs-number\">0</span>, i)\n\n    <span class=\"hljs-keyword\">return</span> array\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">median_of_3</span>(<span class=\"hljs-params\">\n    array: <span class=\"hljs-built_in\">list</span>, first_index: <span class=\"hljs-built_in\">int</span>, middle_index: <span class=\"hljs-built_in\">int</span>, last_index: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n\n    &gt;&gt;&gt; median_of_3(array, 0, 0 + ((len(array) - 0) // 2) + 1, len(array) - 1)\n    12\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> (array[first_index] &gt; array[middle_index]) != (\n        array[first_index] &gt; array[last_index]\n    ):\n        <span class=\"hljs-keyword\">return</span> array[first_index]\n    <span class=\"hljs-keyword\">elif</span> (array[middle_index] &gt; array[first_index]) != (\n        array[middle_index] &gt; array[last_index]\n    ):\n        <span class=\"hljs-keyword\">return</span> array[middle_index]\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> array[last_index]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">partition</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span>, low: <span class=\"hljs-built_in\">int</span>, high: <span class=\"hljs-built_in\">int</span>, pivot: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n\n    &gt;&gt;&gt; partition(array, 0, len(array), 12)\n    8\n    &quot;&quot;&quot;</span>\n    i = low\n    j = high\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">while</span> array[i] &lt; pivot:\n            i += <span class=\"hljs-number\">1</span>\n        j -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span> pivot &lt; array[j]:\n            j -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> i &gt;= j:\n            <span class=\"hljs-keyword\">return</span> i\n        array[i], array[j] = array[j], array[i]\n        i += <span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n\n    Examples:\n    &gt;&gt;&gt; sort([4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12])\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n\n    &gt;&gt;&gt; sort([-1, -5, -3, -13, -44])\n    [-44, -13, -5, -3, -1]\n\n    &gt;&gt;&gt; sort([])\n    []\n\n    &gt;&gt;&gt; sort([5])\n    [5]\n\n    &gt;&gt;&gt; sort([-3, 0, -7, 6, 23, -34])\n    [-34, -7, -3, 0, 6, 23]\n\n    &gt;&gt;&gt; sort([1.7, 1.0, 3.3, 2.1, 0.3 ])\n    [0.3, 1.0, 1.7, 2.1, 3.3]\n\n    &gt;&gt;&gt; sort([&#x27;d&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;e&#x27;, &#x27;c&#x27;])\n    [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(array) == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> array\n    max_depth = <span class=\"hljs-number\">2</span> * math.ceil(math.log2(<span class=\"hljs-built_in\">len</span>(array)))\n    size_threshold = <span class=\"hljs-number\">16</span>\n    <span class=\"hljs-keyword\">return</span> intro_sort(array, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(array), size_threshold, max_depth)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">intro_sort</span>(<span class=\"hljs-params\">\n    array: <span class=\"hljs-built_in\">list</span>, start: <span class=\"hljs-built_in\">int</span>, end: <span class=\"hljs-built_in\">int</span>, size_threshold: <span class=\"hljs-built_in\">int</span>, max_depth: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; array = [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]\n\n    &gt;&gt;&gt; max_depth = 2 * math.ceil(math.log2(len(array)))\n\n    &gt;&gt;&gt; intro_sort(array, 0, len(array), 16, max_depth)\n    [1, 2, 4, 6, 7, 8, 8, 12, 14, 14, 22, 23, 27, 45, 56, 79]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">while</span> end - start &gt; size_threshold:\n        <span class=\"hljs-keyword\">if</span> max_depth == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> heap_sort(array)\n        max_depth -= <span class=\"hljs-number\">1</span>\n        pivot = median_of_3(array, start, start + ((end - start) // <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>, end - <span class=\"hljs-number\">1</span>)\n        p = partition(array, start, end, pivot)\n        intro_sort(array, p, end, size_threshold, max_depth)\n        end = p\n    <span class=\"hljs-keyword\">return</span> insertion_sort(array, start, end)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma : &quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">float</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-built_in\">print</span>(sort(unsorted))\n"
    },
    "javascript": {
      "dir": "Sorts/IntroSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/IntroSort.js",
      "code": "<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> Intosort (As implemented in STD C++ Lib)\n * The function performs introsort which is used in\n * C++ Standard LIbrary, the implemntation is inspired from]\n * library routine itself.\n * ALGORITHM:\n * 1) It performs quicksort on array until the recursion depth\n *    exceeds a pre determined limit.\n * 2) If the limit is reached it switches to heapsort\n * 3) For array size less than a threshold(16) directly\n *    does insertion sort on array\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array</span>} array the array to be sorted\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Function</span>} compare the comparison function\n *\n * <span class=\"hljs-doctag\">@see</span> [Introsort](https://en.wikipedia.org/wiki/Introsort)\n * <span class=\"hljs-doctag\">@author</span> [Lakhan Nad](https://github.com/Lakhan-Nad)\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">introsort</span> (array, compare) {\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@function</span> Default Comparison Function\n   * This function is same as implemented by\n   * Array.sort method\n   * <span class=\"hljs-doctag\">@see</span> [StackOverflow](https://stackoverflow.com/questions/47334234/how-to-implement-array-prototype-sort-default-compare-function)\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} a variable 1\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} b variable 2\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Number</span>}\n   * -1 if a is less than b\n   *  0 if a is equal to b\n   *  1 if a greater than b\n   */</span>\n  <span class=\"hljs-keyword\">const</span> defaultComparator = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) {\n    <span class=\"hljs-keyword\">if</span> (x === <span class=\"hljs-literal\">undefined</span> &amp;&amp; y === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span> (x === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> (y === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">const</span> xString = <span class=\"hljs-title function_\">toString</span>(x)\n    <span class=\"hljs-keyword\">const</span> yString = <span class=\"hljs-title function_\">toString</span>(y)\n    <span class=\"hljs-keyword\">if</span> (xString &lt; yString) <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> (xString &gt; yString) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  }\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@function</span> helper function for defaultComparator\n   * Converts a given object to String\n   * <span class=\"hljs-doctag\">@throws</span> TypeError()\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Object</span>} <span class=\"hljs-variable\">obj</span>\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">String</span>} String representation of given object\n   */</span>\n  <span class=\"hljs-keyword\">const</span> toString = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) {\n    <span class=\"hljs-keyword\">if</span> (obj === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;null&#x27;</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">&#x27;boolean&#x27;</span> || <span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">&#x27;number&#x27;</span>) {\n      <span class=\"hljs-keyword\">return</span> obj.<span class=\"hljs-title function_\">toString</span>()\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-keyword\">return</span> obj\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">&#x27;symbol&#x27;</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>()\n    <span class=\"hljs-keyword\">return</span> obj.<span class=\"hljs-title function_\">toString</span>()\n  }\n  <span class=\"hljs-comment\">/**\n   * Checks if the value passed is an array\n   * or not\n   */</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(array) === <span class=\"hljs-literal\">false</span>) {\n    <span class=\"hljs-keyword\">return</span>\n  }\n  <span class=\"hljs-comment\">/**\n   * If the compare parameter is not a function\n   * or not passed at all use default comparator\n   * function\n   */</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> compare !== <span class=\"hljs-string\">&#x27;function&#x27;</span>) {\n    compare = defaultComparator <span class=\"hljs-comment\">// If compare is not a comparator function</span>\n  }\n  <span class=\"hljs-comment\">/**\n   * Use a closure to define the whole sort\n   * implementation this is done through\n   * [IIFE](https://en.wikipedia.org/wiki/Immediately_invoked_function_expression)\n   */</span>\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">array, comparator</span>) {\n    <span class=\"hljs-keyword\">const</span> swap = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index1, index2</span>) {\n      <span class=\"hljs-keyword\">const</span> temp = array[index1]\n      array[index1] = array[index2]\n      array[index2] = temp\n    }\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@constant</span> <span class=\"hljs-variable\">THRESHOLD</span>\n     * If the length of array is less than\n     * this then we simply perform insertion sort\n     */</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">THRESHOLD</span> = <span class=\"hljs-number\">16</span>\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@constant</span> <span class=\"hljs-variable\">TUNEMAXDEPTH</span>\n     * Constant usec to increase or decrease value\n     * of maxDepth\n     */</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">TUNEMAXDEPTH</span> = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">const</span> len = array.<span class=\"hljs-property\">length</span>\n    <span class=\"hljs-comment\">/**\n     * Return if array is only of length 1\n     * Array of size 1 is always sorted\n     */</span>\n    <span class=\"hljs-keyword\">if</span> (len === <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-comment\">/**\n     * Calculate maxDepth = log2(len)\n     * Taken from implementation in stdc++\n     */</span>\n    <span class=\"hljs-keyword\">const</span> maxDepth = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">log2</span>(len)) * <span class=\"hljs-variable constant_\">TUNEMAXDEPTH</span>\n    <span class=\"hljs-comment\">/**\n     * The very first call to quicksort\n     * this initiates sort routine\n     */</span>\n    <span class=\"hljs-title function_\">quickSort</span>(<span class=\"hljs-number\">0</span>, len, maxDepth)\n    <span class=\"hljs-comment\">/**\n     * A final checlk call to insertion sort\n     * on sorted array\n     */</span>\n    <span class=\"hljs-title function_\">insertionSort</span>(<span class=\"hljs-number\">0</span>, len)\n    <span class=\"hljs-comment\">/** *********************  Implementation of various routines  **************************/</span>\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@function</span>\n     * This is recursive quicksort implementation in array\n     * of segment [start,last-1]\n     * [QuickSort](https://en.wikipedia.org/wiki/Quicksort)\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} start the start index of array segment to be sorted\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} last  one more than the last index of array segment\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} depth this measures how many recursive calls are done\n     */</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">quickSort</span> (start, last, depth) {\n      <span class=\"hljs-keyword\">if</span> (last - start &lt;= <span class=\"hljs-variable constant_\">THRESHOLD</span>) {\n        <span class=\"hljs-title function_\">insertionSort</span>(start, last)\n        <span class=\"hljs-keyword\">return</span>\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (depth &lt;= <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-title function_\">heapSort</span>(start, last)\n        <span class=\"hljs-keyword\">return</span>\n      }\n      <span class=\"hljs-keyword\">let</span> pivot = (last + start) &gt;&gt; <span class=\"hljs-number\">1</span>\n      pivot = <span class=\"hljs-title function_\">partition</span>(start, last, pivot)\n      <span class=\"hljs-title function_\">quickSort</span>(start, pivot, depth - <span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-title function_\">quickSort</span>(pivot + <span class=\"hljs-number\">1</span>, last, depth - <span class=\"hljs-number\">1</span>)\n    }\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@function</span> Helper function to quicksort\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} start the start of array segment to partitiion\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} last  one more than last index of the array segment\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} pivot the index of pivot to be used\n     * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Number</span>} the index of pivot after partition\n     */</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">partition</span> (start, last, pivot) {\n      <span class=\"hljs-title function_\">swap</span>(start, pivot)\n      pivot = start\n      <span class=\"hljs-keyword\">let</span> lo = start\n      <span class=\"hljs-keyword\">let</span> hi = last\n      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n        lo++\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title function_\">comparator</span>(array[lo], array[pivot]) &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; lo !== last) {\n          lo++\n        }\n        hi--\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-title function_\">comparator</span>(array[hi], array[pivot]) &gt; <span class=\"hljs-number\">0</span> &amp;&amp; hi !== start) {\n          hi--\n        }\n        <span class=\"hljs-keyword\">if</span> (lo &gt;= hi) {\n          <span class=\"hljs-keyword\">break</span>\n        }\n        <span class=\"hljs-title function_\">swap</span>(lo, hi)\n      }\n      <span class=\"hljs-title function_\">swap</span>(start, hi)\n      <span class=\"hljs-keyword\">return</span> hi\n    }\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@function</span>\n     * Performs insertion sort on array of range\n     * [start, last-1]\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} start the first index of array segment to be sorted\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} last  one more than last index of array to be sorted\n     */</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">insertionSort</span> (start, last) {\n      <span class=\"hljs-keyword\">let</span> i, j\n      <span class=\"hljs-keyword\">for</span> (i = start + <span class=\"hljs-number\">1</span>; i &lt; last; i++) {\n        j = i - <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-title function_\">comparator</span>(array[j], array[j + <span class=\"hljs-number\">1</span>]) &gt; <span class=\"hljs-number\">0</span>) {\n          <span class=\"hljs-title function_\">swap</span>(j, j + <span class=\"hljs-number\">1</span>)\n          j--\n        }\n      }\n    }\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@function</span>\n     * Performs heapsort in array segment of range [start, last-1]\n     * [HeapSort](https://en.wikipedia.org/wiki/Heapsort)\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} start the first index of array segment to be sorted\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} last  one more than last index of array to be sorted\n     */</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">heapSort</span> (start, last) {\n      <span class=\"hljs-keyword\">let</span> x = (last + start) &gt;&gt; <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">while</span> (x - start &gt;= <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-title function_\">heapify</span>(x, start, last)\n        x--\n      }\n      x = last - <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">while</span> (x - start &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-title function_\">swap</span>(start, x)\n        <span class=\"hljs-title function_\">heapify</span>(start, start, x)\n        x--\n      }\n    }\n    <span class=\"hljs-comment\">/**\n     * <span class=\"hljs-doctag\">@function</span> Helper function to heapsort routine\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} cur the index we need to heapify\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} start the start index of array segment that cur belongs to\n     * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} last  one more than last index of segment that cur belongs to\n     */</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">heapify</span> (cur, start, last) {\n      <span class=\"hljs-keyword\">const</span> size = last - start\n      <span class=\"hljs-keyword\">let</span> max, lt, rt\n      cur = cur - start\n      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n        max = cur\n        lt = <span class=\"hljs-number\">2</span> * max + <span class=\"hljs-number\">1</span>\n        rt = <span class=\"hljs-number\">2</span> * max + <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">if</span> (\n          lt &lt; size &amp;&amp;\n          <span class=\"hljs-title function_\">comparator</span>(array[start + max], array[start + lt]) &lt; <span class=\"hljs-number\">0</span>\n        ) {\n          max = lt\n        }\n        <span class=\"hljs-keyword\">if</span> (\n          rt &lt; size &amp;&amp;\n          <span class=\"hljs-title function_\">comparator</span>(array[start + max], array[start + rt]) &lt; <span class=\"hljs-number\">0</span>\n        ) {\n          max = rt\n        }\n        <span class=\"hljs-keyword\">if</span> (max !== cur) {\n          <span class=\"hljs-title function_\">swap</span>(start + cur, start + max)\n          cur = max\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">break</span>\n        }\n      }\n    }\n  })(array, compare)\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@example</span> Demo run of the sort routine\n * The data is randomly generated\n * Prints RIGHT:) if the sort routine worked as expected\n * If not prints WRONG!!\n */</span>\n(<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">demo</span> () {\n  <span class=\"hljs-keyword\">const</span> data = []\n  <span class=\"hljs-keyword\">const</span> size = <span class=\"hljs-number\">1000000</span>\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> temp\n  <span class=\"hljs-keyword\">const</span> c = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) {\n    <span class=\"hljs-keyword\">return</span> a - b\n  }\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n    temp = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-property\">MAX_SAFE_INTEGER</span>\n    data.<span class=\"hljs-title function_\">push</span>(temp)\n  }\n  <span class=\"hljs-title function_\">introsort</span>(data, c)\n  <span class=\"hljs-keyword\">let</span> faulty = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; size; i++) {\n    <span class=\"hljs-keyword\">if</span> (data[i] &lt; data[i - <span class=\"hljs-number\">1</span>]) {\n      faulty = <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (faulty) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;WRONG!!&#x27;</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;RIGHT:)&#x27;</span>)\n  }\n})();\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@example</span> Demo run of the sort routine\n * using the default compare function and\n * comparing the results with Array.sort\n */</span>\n(<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">demo</span> () {\n  <span class=\"hljs-keyword\">const</span> data = []\n  <span class=\"hljs-keyword\">const</span> data2 = []\n  <span class=\"hljs-keyword\">const</span> size = <span class=\"hljs-number\">1000000</span>\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> temp\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n    temp = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-property\">MAX_SAFE_INTEGER</span>\n    data.<span class=\"hljs-title function_\">push</span>(temp)\n    data2.<span class=\"hljs-title function_\">push</span>(temp)\n  }\n  <span class=\"hljs-title function_\">introsort</span>(data)\n  data2.<span class=\"hljs-title function_\">sort</span>()\n  <span class=\"hljs-keyword\">let</span> faulty = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; size; i++) {\n    <span class=\"hljs-keyword\">if</span> (data[i] !== data2[i]) {\n      faulty = <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (faulty) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;WRONG Implented Comparator!!&#x27;</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Comparator Works Fine:)&#x27;</span>)\n  }\n})()\n"
    }
  },
  "contributors": [
    {
      "name": "lakhan_nad",
      "email": "lakhannad1999@gmail.com",
      "commits": 1
    },
    {
      "name": "YeonJeongLee00",
      "email": "67946956+YeonJeongLee00@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
