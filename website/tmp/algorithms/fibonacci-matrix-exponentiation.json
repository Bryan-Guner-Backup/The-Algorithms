{
  "slug": "fibonacci-matrix-exponentiation",
  "name": "Fibonacci Matrix Exponentiation",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/fibonacci_matrix_exponentiation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/fibonacci_matrix_exponentiation.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file \n * @brief This program computes the N^th Fibonacci number in modulo mod\n * input argument .\n *\n * Takes O(logn) time to compute nth Fibonacci number\n * \n *\n * \\author [villayatali123](https://github.com/villayatali123)\n * \\author [unknown author]()\n * @see fibonacci.cpp, fibonacci_fast.cpp, string_fibonacci.cpp, fibonacci_large.cpp\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * This function finds nth fibonacci number in a given modulus\n * @param n nth fibonacci number\n * @param mod  modulo number \n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">fibo</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n , <span class=\"hljs-type\">uint64_t</span> mod )</span>\n</span>{\n\t<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>)</span></span>;\n\tstd::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;&gt; <span class=\"hljs-built_in\">transition</span>(<span class=\"hljs-number\">2</span>,std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>));\n\tstd::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;&gt; <span class=\"hljs-built_in\">Identity</span>(<span class=\"hljs-number\">2</span>,std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>));\n\tn--;\n\tresult[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>, result[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;\n\tIdentity[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>; Identity[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">0</span>;\n\tIdentity[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">0</span>; Identity[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;\n\t \n\ttransition[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">0</span>;\n\ttransition[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]=transition[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]=transition[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">1</span>;\n\t\n\t<span class=\"hljs-keyword\">while</span>(n)\n\t{\n\t\t<span class=\"hljs-keyword\">if</span>(n%<span class=\"hljs-number\">2</span>)\n\t\t{\n\t\t\tstd::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;&gt; <span class=\"hljs-built_in\">res</span>(<span class=\"hljs-number\">2</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>));\n\t                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">2</span>;i++)\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">2</span>;j++)\n\t\t\t\t{\n\t\t\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;<span class=\"hljs-number\">2</span>;k++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tres[i][j]=(res[i][j]%mod+((Identity[i][k]%mod*transition[k][j]%mod))%mod)%mod;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t       \t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">2</span>;i++)\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">2</span>;j++)\n\t\t\t\t{\n\t\t\t\tIdentity[i][j]=res[i][j];\n\t\t\t\t}\n\t    \t\t}\n\t\t\tn--;\n\t\t}\n\t\t<span class=\"hljs-keyword\">else</span>{\n\t\t\tstd::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;&gt; <span class=\"hljs-built_in\">res1</span>(<span class=\"hljs-number\">2</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>));\n\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">2</span>;i++)\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">2</span>;j++)\n\t\t\t\t{\n\t\t\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;<span class=\"hljs-number\">2</span>;k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tres1[i][j]=(res1[i][j]%mod+((transition[i][k]%mod*transition[k][j]%mod))%mod)%mod;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">2</span>;i++)\n\t\t\t{\n\t\t\t\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">2</span>;j++)\n\t\t\t\t{\n\t\t\t\t\ttransition[i][j]=res1[i][j];\n\t\t\t\t}\n\t\t\t} \n\t\t\tn=n/<span class=\"hljs-number\">2</span>;\n\t\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> ((result[<span class=\"hljs-number\">0</span>]%mod*Identity[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]%mod)%mod+(result[<span class=\"hljs-number\">1</span>]%mod*Identity[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]%mod)%mod)%mod;\n}\n\n<span class=\"hljs-comment\">/**\n * Function to test above algorithm\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fibo</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1000000007</span> ) == <span class=\"hljs-number\">8</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;test case:1 passed\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fibo</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1000000007</span>  ) == <span class=\"hljs-number\">5</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;test case:2 passed\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fibo</span>(<span class=\"hljs-number\">10</span> , <span class=\"hljs-number\">1000000007</span>) == <span class=\"hljs-number\">55</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;test case:3 passed\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fibo</span>(<span class=\"hljs-number\">500</span> , <span class=\"hljs-number\">100</span>) == <span class=\"hljs-number\">25</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;test case:3 passed\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">fibo</span>(<span class=\"hljs-number\">500</span> , <span class=\"hljs-number\">10000</span>) == <span class=\"hljs-number\">4125</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;test case:3 passed\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;--All tests passed--\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-built_in\">test</span>();\n\t<span class=\"hljs-type\">uint64_t</span> mod=<span class=\"hljs-number\">1000000007</span>;\n\tstd::cout&lt;&lt;<span class=\"hljs-string\">&quot;Enter the value of N: &quot;</span>;\n\t<span class=\"hljs-type\">uint64_t</span> n=<span class=\"hljs-number\">0</span>; std::cin&gt;&gt;n; \n\tstd::cout&lt;&lt;n&lt;&lt;<span class=\"hljs-string\">&quot;th Fibonacci number in modulo &quot;</span> &lt;&lt; mod &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span>&lt;&lt; <span class=\"hljs-built_in\">fibo</span>( n , mod) &lt;&lt; std::endl;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
