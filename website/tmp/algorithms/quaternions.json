{
  "slug": "quaternions",
  "name": "Quaternions",
  "categories": ["geometry"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "geometry/quaternions.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/geometry/quaternions.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Functions related to 3D quaternions and Euler angles.\n * @author Krishna Vedala\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> __arm__  <span class=\"hljs-comment\">// if compiling for ARM-Cortex processors</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> LIBQUAT_ARM</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arm_math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;geometry_datatypes.h&quot;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @addtogroup quats 3D Quaternion operations\n * @{\n */</span>\n\n<span class=\"hljs-comment\">/**\n * Function to convert given Euler angles to a quaternion.\n * \\f{eqnarray*}{\n * q_{0} &amp; =\n * &amp;\\cos\\left(\\frac{\\phi}{2}\\right)\\cos\\left(\\frac{\\theta}{2}\\right)\\cos\\left(\\frac{\\psi}{2}\\right)\n * +\n * \\sin\\left(\\frac{\\phi}{2}\\right)\\sin\\left(\\frac{\\theta}{2}\\right)\\sin\\left(\\frac{\\psi}{2}\\right)\\\\\n * q_{1} &amp; =\n * &amp;\\sin\\left(\\frac{\\phi}{2}\\right)\\cos\\left(\\frac{\\theta}{2}\\right)\\cos\\left(\\frac{\\psi}{2}\\right)\n * -\n * \\cos\\left(\\frac{\\phi}{2}\\right)\\sin\\left(\\frac{\\theta}{2}\\right)\\sin\\left(\\frac{\\psi}{2}\\right)\\\\\n * q_{2} &amp; =\n * &amp;\\cos\\left(\\frac{\\phi}{2}\\right)\\sin\\left(\\frac{\\theta}{2}\\right)\\cos\\left(\\frac{\\psi}{2}\\right)\n * +\n * \\sin\\left(\\frac{\\phi}{2}\\right)\\cos\\left(\\frac{\\theta}{2}\\right)\\sin\\left(\\frac{\\psi}{2}\\right)\\\\\n * q_{3} &amp; =\n * &amp;\\cos\\left(\\frac{\\phi}{2}\\right)\\cos\\left(\\frac{\\theta}{2}\\right)\\sin\\left(\\frac{\\psi}{2}\\right)\n * -\n * \\sin\\left(\\frac{\\phi}{2}\\right)\\sin\\left(\\frac{\\theta}{2}\\right)\\cos\\left(\\frac{\\psi}{2}\\right)\\\\\n * \\f}\n *\n * @param [in] in_euler input Euler angles instance\n * @returns converted quaternion\n */</span>\nquaternion <span class=\"hljs-title function_\">quat_from_euler</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> euler *in_euler)</span>\n{\n    quaternion out_quat;\n\n    <span class=\"hljs-keyword\">if</span> (!in_euler)  <span class=\"hljs-comment\">// if null</span>\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;%s: Invalid input.&quot;</span>, __func__);\n        <span class=\"hljs-keyword\">return</span> out_quat;\n    }\n\n    quaternion temp;\n\n    <span class=\"hljs-type\">float</span> cy = cosf(in_euler-&gt;yaw * <span class=\"hljs-number\">0.5f</span>);\n    <span class=\"hljs-type\">float</span> sy = sinf(in_euler-&gt;yaw * <span class=\"hljs-number\">0.5f</span>);\n    <span class=\"hljs-type\">float</span> cp = cosf(in_euler-&gt;pitch * <span class=\"hljs-number\">0.5f</span>);\n    <span class=\"hljs-type\">float</span> sp = sinf(in_euler-&gt;pitch * <span class=\"hljs-number\">0.5f</span>);\n    <span class=\"hljs-type\">float</span> cr = cosf(in_euler-&gt;roll * <span class=\"hljs-number\">0.5f</span>);\n    <span class=\"hljs-type\">float</span> sr = sinf(in_euler-&gt;roll * <span class=\"hljs-number\">0.5f</span>);\n\n    temp.w = cr * cp * cy + sr * sp * sy;\n    temp.q1 = sr * cp * cy - cr * sp * sy;\n    temp.q2 = cr * sp * cy + sr * cp * sy;\n    temp.q3 = cr * cp * sy - sr * sp * cy;\n\n    <span class=\"hljs-keyword\">return</span> temp;\n}\n\n<span class=\"hljs-comment\">/**\n * Function to convert given quaternion to Euler angles.\n * \\f{eqnarray*}{\n * \\phi &amp; = &amp;\n * \\tan^{-1}\\left[\\frac{2\\left(q_0q_1+q_2q_3\\right)}{1-2\\left(q_1^2+q_2^2\\right)}\\right]\\\\\n * \\theta &amp; =\n * &amp;-\\sin^{-1}\\left[2\\left(q_0q_2-q_3q_1\\right)\\right]\\\\\n * \\psi &amp; = &amp;\n * \\tan^{-1}\\left[\\frac{2\\left(q_0q_3+q_1q_2\\right)}{1-2\\left(q_2^2+q_3^2\\right)}\\right]\\\\\n * \\f}\n *\n * @param [in] in_quat input quaternion instance\n * @returns converted euler angles\n */</span>\neuler <span class=\"hljs-title function_\">euler_from_quat</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> quaternion *in_quat)</span>\n{\n    euler out_euler;\n    <span class=\"hljs-keyword\">if</span> (!in_quat)  <span class=\"hljs-comment\">// if null</span>\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;%s: Invalid input.&quot;</span>, __func__);\n        <span class=\"hljs-keyword\">return</span> out_euler;\n    }\n\n    out_euler.roll = atan2f(\n        <span class=\"hljs-number\">2.f</span> * (in_quat-&gt;w * in_quat-&gt;q1 + in_quat-&gt;q2 * in_quat-&gt;q3),\n        <span class=\"hljs-number\">1.f</span> - <span class=\"hljs-number\">2.f</span> * (in_quat-&gt;q1 * in_quat-&gt;q1 + in_quat-&gt;q2 * in_quat-&gt;q2));\n    out_euler.pitch =\n        asinf(<span class=\"hljs-number\">2.f</span> * (in_quat-&gt;w * in_quat-&gt;q2 + in_quat-&gt;q1 * in_quat-&gt;q3));\n    out_euler.yaw = atan2f(\n        <span class=\"hljs-number\">2.f</span> * (in_quat-&gt;w * in_quat-&gt;q3 + in_quat-&gt;q1 * in_quat-&gt;q2),\n        <span class=\"hljs-number\">1.f</span> - <span class=\"hljs-number\">2.f</span> * (in_quat-&gt;q2 * in_quat-&gt;q2 + in_quat-&gt;q3 * in_quat-&gt;q3));\n\n    <span class=\"hljs-keyword\">return</span> out_euler;\n}\n\n<span class=\"hljs-comment\">/**\n * Function to multiply two quaternions.\n * \\f{eqnarray*}{\n * \\mathbf{c} &amp; = &amp; \\mathbf{a}\\otimes\\mathbf{b}\\\\\n * &amp; = &amp; \\begin{bmatrix}a_{0} &amp; a_{1} &amp; a_{2} &amp;\n *  a_{3}\\end{bmatrix}\\otimes\\begin{bmatrix}b_{0} &amp; b_{1} &amp; b_{2} &amp;\n *  b_{3}\\end{bmatrix}\\\\\n * &amp; = &amp;\n * \\begin{bmatrix}\n *  a_{0}b_{0}-a_{1}b_{1}-a_{2}b_{2}-a_{3}b_{3}\\\\\n *  a_{0}b_{1}+a_{1}b_{0}+a_{2}b_{3}-a_{3}b_{2}\\\\\n *  a_{0}b_{2}-a_{1}b_{3}+a_{2}b_{0}+a_{3}b_{1}\\\\\n *  a_{0}b_{3}+a_{1}b_{2}-a_{2}b_{1}+a_{3}b_{0}\n * \\end{bmatrix}^{T}\n * \\f}\n *\n * @param [in] in_quat1 first input quaternion instance\n * @param [in] in_quat2 second input quaternion instance\n * @returns resultant quaternion\n */</span>\nquaternion <span class=\"hljs-title function_\">quaternion_multiply</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> quaternion *in_quat1,\n                               <span class=\"hljs-keyword\">const</span> quaternion *in_quat2)</span>\n{\n    quaternion out_quat;\n    <span class=\"hljs-keyword\">if</span> (!in_quat1 || !in_quat2)  <span class=\"hljs-comment\">// if null</span>\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;%s: Invalid input.&quot;</span>, __func__);\n        <span class=\"hljs-keyword\">return</span> out_quat;\n    }\n\n    out_quat.w = in_quat1-&gt;w * in_quat2-&gt;w - in_quat1-&gt;q1 * in_quat2-&gt;q1 -\n                 in_quat1-&gt;q2 * in_quat2-&gt;q2 - in_quat1-&gt;q3 * in_quat2-&gt;q3;\n    out_quat.q1 = in_quat1-&gt;w * in_quat2-&gt;q1 + in_quat1-&gt;q1 * in_quat2-&gt;w +\n                  in_quat1-&gt;q2 * in_quat2-&gt;q3 - in_quat1-&gt;q3 * in_quat2-&gt;q2;\n    out_quat.q2 = in_quat1-&gt;w * in_quat2-&gt;q2 - in_quat1-&gt;q1 * in_quat2-&gt;q3 +\n                  in_quat1-&gt;q2 * in_quat2-&gt;w + in_quat1-&gt;q3 * in_quat2-&gt;q1;\n    out_quat.q3 = in_quat1-&gt;w * in_quat2-&gt;q3 + in_quat1-&gt;q1 * in_quat2-&gt;q2 -\n                  in_quat1-&gt;q2 * in_quat2-&gt;q1 + in_quat1-&gt;q3 * in_quat2-&gt;w;\n\n    <span class=\"hljs-keyword\">return</span> out_quat;\n}\n\n<span class=\"hljs-comment\">/** @} */</span>\n\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    quaternion quat = {<span class=\"hljs-number\">0.7071f</span>, <span class=\"hljs-number\">0.7071f</span>, <span class=\"hljs-number\">0.f</span>, <span class=\"hljs-number\">0.f</span>};\n    euler eul = euler_from_quat(&amp;quat);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Euler: %.4g, %.4g, %.4g\\n&quot;</span>, eul.pitch, eul.roll, eul.yaw);\n\n    quaternion test_quat = quat_from_euler(&amp;eul);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Quaternion: %.4g %+.4g %+.4g %+.4g\\n&quot;</span>, test_quat.w,\n           test_quat.dual.x, test_quat.dual.y, test_quat.dual.z);\n\n    assert(fabsf(test_quat.w - quat.w) &lt; <span class=\"hljs-number\">.01</span>);\n    assert(fabsf(test_quat.q1 - quat.q1) &lt; <span class=\"hljs-number\">.01</span>);\n    assert(fabsf(test_quat.q2 - quat.q2) &lt; <span class=\"hljs-number\">.01</span>);\n    assert(fabsf(test_quat.q3 - quat.q3) &lt; <span class=\"hljs-number\">.01</span>);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    test();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
