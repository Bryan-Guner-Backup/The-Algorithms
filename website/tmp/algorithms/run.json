{
  "slug": "run",
  "name": "Run",
  "categories": ["machinelearning", "forecasting"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning/forecasting/run.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning/forecasting/run.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nthis is code for forecasting\nbut i modified it and used it for safety checker of data\nfor ex: you have a online shop and for some reason some data are\nmissing (the amount of data that u expected are not supposed to be)\n        then we can use it\n*ps : 1. ofc we can use normal statistic method but in this case\n         the data is quite absurd and only a little^^\n      2. ofc u can use this and modified it for forecasting purpose\n         for the next 3 months sales or something,\n         u can just adjust it for ur own purpose\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd\n<span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> Normalizer\n<span class=\"hljs-keyword\">from</span> sklearn.svm <span class=\"hljs-keyword\">import</span> SVR\n<span class=\"hljs-keyword\">from</span> statsmodels.tsa.statespace.sarimax <span class=\"hljs-keyword\">import</span> SARIMAX\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">linear_regression_prediction</span>(<span class=\"hljs-params\">\n    train_dt: <span class=\"hljs-built_in\">list</span>, train_usr: <span class=\"hljs-built_in\">list</span>, train_mtch: <span class=\"hljs-built_in\">list</span>, test_dt: <span class=\"hljs-built_in\">list</span>, test_mtch: <span class=\"hljs-built_in\">list</span>\n</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    First method: linear regression\n    input : training data (date, total_user, total_event) in list of float\n    output : list of total user prediction in float\n    &gt;&gt;&gt; n = linear_regression_prediction([2,3,4,5], [5,3,4,6], [3,1,2,4], [2,1], [2,2])\n    &gt;&gt;&gt; abs(n - 5.0) &lt; 1e-6  # Checking precision because of floating point errors\n    True\n    &quot;&quot;&quot;</span>\n    x = np.array([[<span class=\"hljs-number\">1</span>, item, train_mtch[i]] <span class=\"hljs-keyword\">for</span> i, item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(train_dt)])\n    y = np.array(train_usr)\n    beta = np.dot(np.dot(np.linalg.inv(np.dot(x.transpose(), x)), x.transpose()), y)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">abs</span>(beta[<span class=\"hljs-number\">0</span>] + test_dt[<span class=\"hljs-number\">0</span>] * beta[<span class=\"hljs-number\">1</span>] + test_mtch[<span class=\"hljs-number\">0</span>] + beta[<span class=\"hljs-number\">2</span>])\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sarimax_predictor</span>(<span class=\"hljs-params\">train_user: <span class=\"hljs-built_in\">list</span>, train_match: <span class=\"hljs-built_in\">list</span>, test_match: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    second method: Sarimax\n    sarimax is a statistic method which using previous input\n    and learn its pattern to predict future data\n    input : training data (total_user, with exog data = total_event) in list of float\n    output : list of total user prediction in float\n    &gt;&gt;&gt; sarimax_predictor([4,2,6,8], [3,1,2,4], [2])\n    6.6666671111109626\n    &quot;&quot;&quot;</span>\n    order = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)\n    seasonal_order = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>)\n    model = SARIMAX(\n        train_user, exog=train_match, order=order, seasonal_order=seasonal_order\n    )\n    model_fit = model.fit(disp=<span class=\"hljs-literal\">False</span>, maxiter=<span class=\"hljs-number\">600</span>, method=<span class=\"hljs-string\">&quot;nm&quot;</span>)\n    result = model_fit.predict(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(test_match), exog=[test_match])\n    <span class=\"hljs-keyword\">return</span> result[<span class=\"hljs-number\">0</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">support_vector_regressor</span>(<span class=\"hljs-params\">x_train: <span class=\"hljs-built_in\">list</span>, x_test: <span class=\"hljs-built_in\">list</span>, train_user: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Third method: Support vector regressor\n    svr is quite the same with svm(support vector machine)\n    it uses the same principles as the SVM for classification,\n    with only a few minor differences and the only different is that\n    it suits better for regression purpose\n    input : training data (date, total_user, total_event) in list of float\n    where x = list of set (date and total event)\n    output : list of total user prediction in float\n    &gt;&gt;&gt; support_vector_regressor([[5,2],[1,5],[6,2]], [[3,2]], [2,1,4])\n    1.634932078116079\n    &quot;&quot;&quot;</span>\n    regressor = SVR(kernel=<span class=\"hljs-string\">&quot;rbf&quot;</span>, C=<span class=\"hljs-number\">1</span>, gamma=<span class=\"hljs-number\">0.1</span>, epsilon=<span class=\"hljs-number\">0.1</span>)\n    regressor.fit(x_train, train_user)\n    y_pred = regressor.predict(x_test)\n    <span class=\"hljs-keyword\">return</span> y_pred[<span class=\"hljs-number\">0</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">interquartile_range_checker</span>(<span class=\"hljs-params\">train_user: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Optional method: interquatile range\n    input : list of total user in float\n    output : low limit of input in float\n    this method can be used to check whether some data is outlier or not\n    &gt;&gt;&gt; interquartile_range_checker([1,2,3,4,5,6,7,8,9,10])\n    2.8\n    &quot;&quot;&quot;</span>\n    train_user.sort()\n    q1 = np.percentile(train_user, <span class=\"hljs-number\">25</span>)\n    q3 = np.percentile(train_user, <span class=\"hljs-number\">75</span>)\n    iqr = q3 - q1\n    low_lim = q1 - (iqr * <span class=\"hljs-number\">0.1</span>)\n    <span class=\"hljs-keyword\">return</span> low_lim\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">data_safety_checker</span>(<span class=\"hljs-params\">list_vote: <span class=\"hljs-built_in\">list</span>, actual_result: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Used to review all the votes (list result prediction)\n    and compare it to the actual result.\n    input : list of predictions\n    output : print whether it&#x27;s safe or not\n    &gt;&gt;&gt; data_safety_checker([2,3,4],5.0)\n    Today&#x27;s data is not safe.\n    &quot;&quot;&quot;</span>\n    safe = <span class=\"hljs-number\">0</span>\n    not_safe = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> list_vote:\n        <span class=\"hljs-keyword\">if</span> i &gt; actual_result:\n            safe = not_safe + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">abs</span>(<span class=\"hljs-built_in\">abs</span>(i) - <span class=\"hljs-built_in\">abs</span>(actual_result)) &lt;= <span class=\"hljs-number\">0.1</span>:\n                safe = safe + <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                not_safe = not_safe + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Today&#x27;s data is <span class=\"hljs-subst\">{<span class=\"hljs-string\">&#x27;not &#x27;</span> <span class=\"hljs-keyword\">if</span> safe &lt;= not_safe <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&#x27;&#x27;</span>}</span>safe.&quot;</span>)\n\n\n<span class=\"hljs-comment\"># data_input_df = pd.read_csv(&quot;ex_data.csv&quot;, header=None)</span>\ndata_input = [[<span class=\"hljs-number\">18231</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">22621</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">15675</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">23583</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">4</span>]]\ndata_input_df = pd.DataFrame(data_input, columns=[<span class=\"hljs-string\">&quot;total_user&quot;</span>, <span class=\"hljs-string\">&quot;total_even&quot;</span>, <span class=\"hljs-string\">&quot;days&quot;</span>])\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\ndata column = total user in a day, how much online event held in one day,\nwhat day is that(sunday-saturday)\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-comment\"># start normalization</span>\nnormalize_df = Normalizer().fit_transform(data_input_df.values)\n<span class=\"hljs-comment\"># split data</span>\ntotal_date = normalize_df[:, <span class=\"hljs-number\">2</span>].tolist()\ntotal_user = normalize_df[:, <span class=\"hljs-number\">0</span>].tolist()\ntotal_match = normalize_df[:, <span class=\"hljs-number\">1</span>].tolist()\n\n<span class=\"hljs-comment\"># for svr (input variable = total date and total match)</span>\nx = normalize_df[:, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]].tolist()\nx_train = x[: <span class=\"hljs-built_in\">len</span>(x) - <span class=\"hljs-number\">1</span>]\nx_test = x[<span class=\"hljs-built_in\">len</span>(x) - <span class=\"hljs-number\">1</span> :]\n\n<span class=\"hljs-comment\"># for linear reression &amp; sarimax</span>\ntrn_date = total_date[: <span class=\"hljs-built_in\">len</span>(total_date) - <span class=\"hljs-number\">1</span>]\ntrn_user = total_user[: <span class=\"hljs-built_in\">len</span>(total_user) - <span class=\"hljs-number\">1</span>]\ntrn_match = total_match[: <span class=\"hljs-built_in\">len</span>(total_match) - <span class=\"hljs-number\">1</span>]\n\ntst_date = total_date[<span class=\"hljs-built_in\">len</span>(total_date) - <span class=\"hljs-number\">1</span> :]\ntst_user = total_user[<span class=\"hljs-built_in\">len</span>(total_user) - <span class=\"hljs-number\">1</span> :]\ntst_match = total_match[<span class=\"hljs-built_in\">len</span>(total_match) - <span class=\"hljs-number\">1</span> :]\n\n\n<span class=\"hljs-comment\"># voting system with forecasting</span>\nres_vote = []\nres_vote.append(\n    linear_regression_prediction(trn_date, trn_user, trn_match, tst_date, tst_match)\n)\nres_vote.append(sarimax_predictor(trn_user, trn_match, tst_match))\nres_vote.append(support_vector_regressor(x_train, x_test, trn_user))\n\n<span class=\"hljs-comment\"># check the safety of todays&#x27;data^^</span>\ndata_safety_checker(res_vote, tst_user)\n"
    }
  },
  "contributors": [
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Nandiya",
      "email": "ri_nandiya@yahoo.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
