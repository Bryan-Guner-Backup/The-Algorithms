{
  "slug": "genetic-algo",
  "name": "Genetic Algo",
  "categories": ["geneticalgorithm"],
  "body": {},
  "implementations": {
    "go": {
      "dir": "genetic-algorithm/genetic_algo.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/genetic-algorithm/genetic_algo.go",
      "code": "<span class=\"hljs-comment\">/*\nSimple multithreaded algorithm to show how the 4 phases of a genetic\nalgorithm works (Evaluation, Selection, Crossover and Mutation)\nhttps://en.wikipedia.org/wiki/Genetic_algorithm\n\nLink to the same algorithm implemented in python:\nhttps://github.com/TheAlgorithms/Python/blob/master/genetic_algorithm/basic_string.py\n\nAuthor: D4rkia\n*/</span>\n\n<span class=\"hljs-keyword\">package</span> main\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;errors&quot;</span>\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;math/rand&quot;</span>\n\t<span class=\"hljs-string\">&quot;os&quot;</span>\n\t<span class=\"hljs-string\">&quot;sort&quot;</span>\n\t<span class=\"hljs-string\">&quot;strconv&quot;</span>\n\t<span class=\"hljs-string\">&quot;time&quot;</span>\n\t<span class=\"hljs-string\">&quot;unicode/utf8&quot;</span>\n)\n\n<span class=\"hljs-keyword\">type</span> populationItem <span class=\"hljs-keyword\">struct</span> {\n\tKey   <span class=\"hljs-keyword\">string</span>\n\tValue <span class=\"hljs-keyword\">float64</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">geneticString</span><span class=\"hljs-params\">(target <span class=\"hljs-keyword\">string</span>, charmap []<span class=\"hljs-keyword\">rune</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">string</span>)</span></span> {\n\t<span class=\"hljs-comment\">// Define parameters</span>\n\t<span class=\"hljs-comment\">// Maximum size of the population.  bigger could be faster but is more memory expensive</span>\n\tpopulationNum := <span class=\"hljs-number\">200</span>\n\t<span class=\"hljs-comment\">// Number of elements selected in every generation for evolution the selection takes</span>\n\t<span class=\"hljs-comment\">// place from the best to the worst of that generation must be smaller than N_POPULATION</span>\n\tselectionNum := <span class=\"hljs-number\">50</span>\n\t<span class=\"hljs-comment\">// Probability that an element of a generation can mutate changing one of its genes this</span>\n\t<span class=\"hljs-comment\">// guarantees that all genes will be used during evolution</span>\n\tmutationProb := <span class=\"hljs-number\">.4</span>\n\t<span class=\"hljs-comment\">// Just a seed to improve randomness required by the algorithm</span>\n\trand.Seed(time.Now().UnixNano())\n\n\t<span class=\"hljs-comment\">// Verify if &#x27;populationNum&#x27; s bigger than &#x27;selectionNum&#x27;</span>\n\t<span class=\"hljs-keyword\">if</span> populationNum &lt; selectionNum {\n\t\tfmt.Println(errors.New(<span class=\"hljs-string\">&quot;PopulationNum must be bigger tha selectionNum &quot;</span>))\n\t\tos.Exit(<span class=\"hljs-number\">1</span>)\n\t}\n\t<span class=\"hljs-comment\">// Verify that the target contains no genes besides the ones inside genes variable.</span>\n\t<span class=\"hljs-keyword\">for</span> position, r := <span class=\"hljs-keyword\">range</span> []<span class=\"hljs-keyword\">rune</span>(target) {\n\t\tfind := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">bool</span></span> {\n\t\t\t<span class=\"hljs-keyword\">for</span> _, n := <span class=\"hljs-keyword\">range</span> charmap {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> n == r {\n\t\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> !find() {\n\t\t\tfmt.Println(errors.New(<span class=\"hljs-string\">&quot;Character not aviable in charmap&quot;</span>), position, <span class=\"hljs-string\">&quot;\\&quot;&quot;</span>, <span class=\"hljs-keyword\">string</span>(r), <span class=\"hljs-string\">&quot;\\&quot;&quot;</span>)\n\t\t\tos.Exit(<span class=\"hljs-number\">1</span>)\n\t\t}\n\t}\n\n\t<span class=\"hljs-comment\">// Generate random starting population</span>\n\tpop := <span class=\"hljs-built_in\">make</span>([]populationItem, populationNum, populationNum)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; populationNum; i++ {\n\t\tkey := <span class=\"hljs-string\">&quot;&quot;</span>\n\t\t<span class=\"hljs-keyword\">for</span> x := <span class=\"hljs-number\">0</span>; x &lt; utf8.RuneCountInString(target); x++ {\n\t\t\tchoice := rand.Intn(<span class=\"hljs-built_in\">len</span>(charmap))\n\t\t\tkey += <span class=\"hljs-keyword\">string</span>(charmap[choice])\n\t\t}\n\t\tpop[i] = populationItem{key, <span class=\"hljs-number\">0</span>}\n\t}\n\n\t<span class=\"hljs-comment\">// Just some logs to know what the algorithms is doing</span>\n\tgen, generatedPop := <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n\n\t<span class=\"hljs-comment\">// This loop will end when we will find a perfect match for our target</span>\n\t<span class=\"hljs-keyword\">for</span> {\n\t\tgen++\n\t\tgeneratedPop += <span class=\"hljs-built_in\">len</span>(pop)\n\n\t\t<span class=\"hljs-comment\">// Random population created now it&#x27;s time to evaluate</span>\n\t\t<span class=\"hljs-keyword\">for</span> i, item := <span class=\"hljs-keyword\">range</span> pop {\n\t\t\tpop[i].Value = <span class=\"hljs-number\">0</span>\n\t\t\titemKey, targetRune := []<span class=\"hljs-keyword\">rune</span>(item.Key), []<span class=\"hljs-keyword\">rune</span>(target)\n\t\t\t<span class=\"hljs-keyword\">for</span> x := <span class=\"hljs-number\">0</span>; x &lt; <span class=\"hljs-built_in\">len</span>(target); x++ {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> itemKey[x] == targetRune[x] {\n\t\t\t\t\tpop[i].Value++\n\t\t\t\t}\n\t\t\t}\n\t\t\tpop[i].Value = pop[i].Value / <span class=\"hljs-keyword\">float64</span>(<span class=\"hljs-built_in\">len</span>(targetRune))\n\t\t}\n\t\tsort.SliceStable(pop, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(i, j <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> { <span class=\"hljs-keyword\">return</span> pop[i].Value &gt; pop[j].Value })\n\n\t\t<span class=\"hljs-comment\">// Check if there is a matching evolution</span>\n\t\t<span class=\"hljs-keyword\">if</span> pop[<span class=\"hljs-number\">0</span>].Key == target {\n\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t}\n\t\t<span class=\"hljs-comment\">// Print the best resultPrint the Best result every 10 generations</span>\n\t\t<span class=\"hljs-comment\">// just to know that the algorithm is working</span>\n\t\t<span class=\"hljs-keyword\">if</span> gen%<span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span> {\n\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;Generation:&quot;</span>, strconv.Itoa(gen), <span class=\"hljs-string\">&quot;Analyzed:&quot;</span>, generatedPop, <span class=\"hljs-string\">&quot;Best:&quot;</span>, pop[<span class=\"hljs-number\">0</span>])\n\t\t}\n\n\t\t<span class=\"hljs-comment\">// Generate a new population vector keeping some of the best evolutions</span>\n\t\t<span class=\"hljs-comment\">// Keeping this avoid regression of evolution</span>\n\t\t<span class=\"hljs-keyword\">var</span> popChildren []populationItem\n\t\tpopChildren = <span class=\"hljs-built_in\">append</span>(popChildren, pop[<span class=\"hljs-number\">0</span>:<span class=\"hljs-keyword\">int</span>(selectionNum/<span class=\"hljs-number\">3</span>)]...)\n\n\t\t<span class=\"hljs-comment\">// This is Selection</span>\n\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">int</span>(selectionNum); i++ {\n\t\t\tparent1 := pop[i]\n\t\t\t<span class=\"hljs-comment\">// Generate more child proportionally to the fitness score</span>\n\t\t\tnChild := (parent1.Value * <span class=\"hljs-number\">100</span>) + <span class=\"hljs-number\">1</span>\n\t\t\t<span class=\"hljs-keyword\">if</span> nChild &gt;= <span class=\"hljs-number\">10</span> {\n\t\t\t\tnChild = <span class=\"hljs-number\">10</span>\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">for</span> x := <span class=\"hljs-number\">0.0</span>; x &lt; nChild; x++ {\n\t\t\t\tparent2 := pop[rand.Intn(selectionNum)]\n\t\t\t\t<span class=\"hljs-comment\">// Crossover</span>\n\t\t\t\tsplit := rand.Intn(utf8.RuneCountInString(target))\n\t\t\t\tchild1 := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">rune</span>(parent1.Key)[:split], []<span class=\"hljs-keyword\">rune</span>(parent2.Key)[split:]...)\n\t\t\t\tchild2 := <span class=\"hljs-built_in\">append</span>([]<span class=\"hljs-keyword\">rune</span>(parent2.Key)[:split], []<span class=\"hljs-keyword\">rune</span>(parent1.Key)[split:]...)\n\t\t\t\t<span class=\"hljs-comment\">//Clean fitness value</span>\n\t\t\t\t<span class=\"hljs-comment\">// Mutate</span>\n\t\t\t\t<span class=\"hljs-keyword\">if</span> rand.Float64() &lt; mutationProb {\n\t\t\t\t\tchild1[rand.Intn(<span class=\"hljs-built_in\">len</span>(child1))] = charmap[rand.Intn(<span class=\"hljs-built_in\">len</span>(charmap))]\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-keyword\">if</span> rand.Float64() &lt; mutationProb {\n\t\t\t\t\tchild2[rand.Intn(<span class=\"hljs-built_in\">len</span>(child2))] = charmap[rand.Intn(<span class=\"hljs-built_in\">len</span>(charmap))]\n\t\t\t\t}\n\t\t\t\t<span class=\"hljs-comment\">// Push into &#x27;popChildren&#x27;</span>\n\t\t\t\tpopChildren = <span class=\"hljs-built_in\">append</span>(popChildren, populationItem{<span class=\"hljs-keyword\">string</span>(child1), <span class=\"hljs-number\">0</span>})\n\t\t\t\tpopChildren = <span class=\"hljs-built_in\">append</span>(popChildren, populationItem{<span class=\"hljs-keyword\">string</span>(child2), <span class=\"hljs-number\">0</span>})\n\n\t\t\t\t<span class=\"hljs-comment\">// Check if the population has already reached the maximum value and if so,</span>\n\t\t\t\t<span class=\"hljs-comment\">// break the cycle. If this check is disabled the algorithm will take</span>\n\t\t\t\t<span class=\"hljs-comment\">// forever to compute large strings but will also calculate small string in</span>\n\t\t\t\t<span class=\"hljs-comment\">// a lot fewer generationsù</span>\n\t\t\t\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(popChildren) &gt;= selectionNum {\n\t\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpop = popChildren\n\t}\n\t<span class=\"hljs-keyword\">return</span> gen, generatedPop, pop[<span class=\"hljs-number\">0</span>].Key\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-comment\">// Define parameters</span>\n\ttarget := <span class=\"hljs-keyword\">string</span>(<span class=\"hljs-string\">&quot;This is a genetic algorithm to evaluate, combine, evolve and mutate a string!&quot;</span>)\n\tcharmap := []<span class=\"hljs-keyword\">rune</span>(<span class=\"hljs-string\">&quot; ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,;!?+-*#@^&#x27;èéòà€ù=)(&amp;%$£/\\\\&quot;</span>)\n\tgen, generatedPop, best := geneticString(target, charmap)\n\tfmt.Println(<span class=\"hljs-string\">&quot;Generation:&quot;</span>, strconv.Itoa(gen), <span class=\"hljs-string\">&quot;Analyzed:&quot;</span>, generatedPop, <span class=\"hljs-string\">&quot;Best:&quot;</span>, best)\n}\n"
    }
  },
  "contributors": [
    {
      "name": "D4rkia",
      "email": "49065066+D4rkia@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "D4rkia",
      "email": "d4rkia@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
