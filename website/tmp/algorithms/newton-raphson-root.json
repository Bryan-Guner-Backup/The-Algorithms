{
  "slug": "newton-raphson-root",
  "name": "Newton Raphson Root",
  "categories": ["numericalmethods"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "numerical_methods/newton_raphson_root.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/numerical_methods/newton_raphson_root.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * \\brief Find approximate solution for \\f$f(x) = 0\\f$ using\n * Newton-Raphson interpolation algorithm.\n *\n * \\author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;complex.h&gt;</span> <span class=\"hljs-comment\">/* requires minimum of C99 */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;limits.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ACCURACY 1e-10 <span class=\"hljs-comment\">/**&lt; solution accuracy */</span></span>\n\n<span class=\"hljs-comment\">/**\n * Return value of the function to find the root for.\n * \\f$f(x)\\f$\n */</span>\n<span class=\"hljs-type\">double</span> <span class=\"hljs-type\">complex</span> <span class=\"hljs-title function_\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> <span class=\"hljs-type\">complex</span> x)</span>\n{\n    <span class=\"hljs-keyword\">return</span> x * x - <span class=\"hljs-number\">3.</span>; <span class=\"hljs-comment\">/* x^2 = 3 - solution is sqrt(3) */</span>\n    <span class=\"hljs-comment\">// return x * x - 2.; /* x^2 = 2 - solution is sqrt(2) */</span>\n}\n\n<span class=\"hljs-comment\">/**\n * Return first order derivative of the function.\n * \\f$f&#x27;(x)\\f$\n */</span>\n<span class=\"hljs-type\">double</span> <span class=\"hljs-type\">complex</span> <span class=\"hljs-title function_\">d_func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> <span class=\"hljs-type\">complex</span> x)</span> { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2.</span> * x; }\n\n<span class=\"hljs-comment\">/**\n * main function\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> **argv)</span>\n{\n    <span class=\"hljs-type\">double</span> delta = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-type\">complex</span> cdelta = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/* initialize random seed: */</span>\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\n\n    <span class=\"hljs-comment\">/* random initial approximation */</span>\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-type\">complex</span> root = (rand() % <span class=\"hljs-number\">100</span> - <span class=\"hljs-number\">50</span>) + (rand() % <span class=\"hljs-number\">100</span> - <span class=\"hljs-number\">50</span>) * I;\n\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> counter = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-comment\">/* iterate till a convergence is reached */</span>\n    <span class=\"hljs-keyword\">while</span> (delta &gt; ACCURACY &amp;&amp; counter &lt; ULONG_MAX)\n    {\n        cdelta = func(root) / d_func(root);\n        root += -cdelta;\n        counter++;\n        delta = <span class=\"hljs-built_in\">fabs</span>(cabs(cdelta));\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">if</span> defined(DEBUG) || !defined(NDEBUG)</span>\n        <span class=\"hljs-keyword\">if</span> (counter % <span class=\"hljs-number\">50</span> == <span class=\"hljs-number\">0</span>)\n        {\n            <span class=\"hljs-type\">double</span> r = creal(root);\n            <span class=\"hljs-type\">double</span> c = cimag(root);\n\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Iter %5lu: Root: %4.4g%c%4.4gi\\t\\tdelta: %.4g\\n&quot;</span>, counter,\n                   r, c &gt;= <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">&#x27;+&#x27;</span> : <span class=\"hljs-string\">&#x27;-&#x27;</span>, c &gt;= <span class=\"hljs-number\">0</span> ? c : -c, delta);\n        }\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n    }\n\n    <span class=\"hljs-type\">double</span> r = creal(root);\n    <span class=\"hljs-type\">double</span> c = <span class=\"hljs-built_in\">fabs</span>(cimag(root)) &lt; ACCURACY ? <span class=\"hljs-number\">0</span> : cimag(root);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Iter %5lu: Root: %4.4g%c%4.4gi\\t\\tdelta: %.4g\\n&quot;</span>, counter, r,\n           c &gt;= <span class=\"hljs-number\">0</span> ? <span class=\"hljs-string\">&#x27;+&#x27;</span> : <span class=\"hljs-string\">&#x27;-&#x27;</span>, c &gt;= <span class=\"hljs-number\">0</span> ? c : -c, delta);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
