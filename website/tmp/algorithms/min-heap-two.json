{
  "slug": "min-heap-two",
  "name": "Min Heap Two",
  "categories": ["datastructures", "heap", "binaryheap"],
  "body": {},
  "implementations": {
    "dart": {
      "dir": "data_structures/Heap/Binary_Heap/min_heap_two.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures/Heap/Binary_Heap/min_heap_two.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MinHeap</span> </span>{\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; heap;\n\n  <span class=\"hljs-keyword\">void</span> buildHeap(<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; array) {\n    <span class=\"hljs-keyword\">this</span>.heap = _heapify(array);\n  }\n\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; _heapify(<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; array) {\n    <span class=\"hljs-built_in\">int</span> firstParent = (array.length - <span class=\"hljs-number\">2</span>) ~/ <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = firstParent; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n      _siftDown(i, array.length - <span class=\"hljs-number\">1</span>, array);\n    }\n    <span class=\"hljs-keyword\">return</span> array;\n  }\n\n  <span class=\"hljs-built_in\">int</span> peek() {\n    <span class=\"hljs-keyword\">if</span> (!isEmpty()) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.heap[<span class=\"hljs-number\">0</span>];\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n  }\n\n  <span class=\"hljs-built_in\">bool</span> isEmpty() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.heap.length == <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-keyword\">void</span> _siftUp(<span class=\"hljs-built_in\">int</span> currentIndex) {\n    <span class=\"hljs-built_in\">int</span> parentIndex = (currentIndex - <span class=\"hljs-number\">1</span>) ~/ <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">while</span> (\n        parentIndex &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; <span class=\"hljs-keyword\">this</span>.heap[parentIndex] &gt; <span class=\"hljs-keyword\">this</span>.heap[currentIndex]) {\n      _swap(parentIndex, currentIndex, <span class=\"hljs-keyword\">this</span>.heap);\n      currentIndex = parentIndex;\n      parentIndex = (currentIndex - <span class=\"hljs-number\">1</span>) ~/ <span class=\"hljs-number\">2</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">void</span> _siftDown(<span class=\"hljs-built_in\">int</span> currentIndex, <span class=\"hljs-built_in\">int</span> endIndex, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; heap) {\n    <span class=\"hljs-built_in\">int</span> childOneIndex = (<span class=\"hljs-number\">2</span> * currentIndex) + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">int</span> childTwoIndex;\n\n    <span class=\"hljs-keyword\">while</span> (childOneIndex &lt;= endIndex) {\n      childTwoIndex =\n          <span class=\"hljs-number\">2</span> * currentIndex + <span class=\"hljs-number\">2</span> &lt;= endIndex ? <span class=\"hljs-number\">2</span> * currentIndex + <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">-1</span>;\n      <span class=\"hljs-built_in\">int</span> indexToSwap;\n      <span class=\"hljs-keyword\">if</span> (childTwoIndex != <span class=\"hljs-number\">-1</span> &amp;&amp; heap[childTwoIndex] &lt; heap[childOneIndex]) {\n        indexToSwap = childTwoIndex;\n      } <span class=\"hljs-keyword\">else</span> {\n        indexToSwap = childOneIndex;\n      }\n\n      <span class=\"hljs-keyword\">if</span> (heap[currentIndex] &gt; heap[indexToSwap]) {\n        _swap(currentIndex, indexToSwap, heap);\n        currentIndex = indexToSwap;\n        childOneIndex = (<span class=\"hljs-number\">2</span> * currentIndex) + <span class=\"hljs-number\">1</span>;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">void</span> insert(<span class=\"hljs-built_in\">int</span> value) {\n    <span class=\"hljs-keyword\">this</span>.heap.add(value);\n    _siftUp(<span class=\"hljs-keyword\">this</span>.heap.length - <span class=\"hljs-number\">1</span>);\n  }\n\n  <span class=\"hljs-built_in\">int</span> remove() {\n    <span class=\"hljs-keyword\">if</span> (!isEmpty()) {\n      _swap(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>.heap.length - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">this</span>.heap);\n      <span class=\"hljs-built_in\">int</span> minElement = <span class=\"hljs-keyword\">this</span>.heap.removeLast();\n      _siftDown(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">this</span>.heap.length - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">this</span>.heap);\n      <span class=\"hljs-keyword\">return</span> minElement;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n  }\n\n  <span class=\"hljs-keyword\">void</span> _swap(<span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; array) {\n    <span class=\"hljs-built_in\">int</span> temp;\n    temp = array[left];\n    array[left] = array[right];\n    array[right] = temp;\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  MinHeap minheap = <span class=\"hljs-keyword\">new</span> MinHeap();\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; array = [<span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">391</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">41</span>];\n  minheap.buildHeap(array);\n  test((<span class=\"hljs-string\">&#x27;Test case 1&#x27;</span>), () {\n    expect(minheap.remove(), equals(<span class=\"hljs-number\">-5</span>));\n    expect(minheap.isEmpty(), isFalse);\n    minheap.insert(<span class=\"hljs-number\">-100</span>);\n    expect(minheap.peek(), equals(<span class=\"hljs-number\">-100</span>));\n    minheap.insert(<span class=\"hljs-number\">-100</span>);\n    expect(minheap.remove(), equals(<span class=\"hljs-number\">-100</span>));\n    expect(minheap.remove(), equals(<span class=\"hljs-number\">-100</span>));\n  });\n\n  test((<span class=\"hljs-string\">&#x27;Test case 2&#x27;</span>), () {\n    array = [<span class=\"hljs-number\">-7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">-6</span>, <span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-7</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">-9</span>, <span class=\"hljs-number\">-5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>];\n    minheap = <span class=\"hljs-keyword\">new</span> MinHeap();\n    minheap.buildHeap(array);\n    expect(minheap.remove(), equals(<span class=\"hljs-number\">-10</span>));\n    expect(minheap.peek(), equals(<span class=\"hljs-number\">-10</span>));\n    minheap.insert(<span class=\"hljs-number\">-8</span>);\n    expect(minheap.peek(), equals(<span class=\"hljs-number\">-10</span>));\n    expect(minheap.remove(), equals(<span class=\"hljs-number\">-10</span>));\n    expect(minheap.peek(), equals(<span class=\"hljs-number\">-9</span>));\n    expect(minheap.isEmpty(), isFalse);\n    minheap.insert(<span class=\"hljs-number\">-8</span>);\n    expect(minheap.peek(), equals(<span class=\"hljs-number\">-9</span>));\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
