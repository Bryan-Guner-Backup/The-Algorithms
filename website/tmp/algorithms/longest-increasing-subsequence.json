{
  "slug": "longest-increasing-subsequence",
  "name": "Longest Increasing Subsequence",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming/longest_increasing_subsequence.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/longest_increasing_subsequence.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nAuthor  : Mehdi ALAOUI\n\nThis is a pure Python implementation of Dynamic Programming solution to the longest\nincreasing subsequence of a given sequence.\n\nThe problem is  :\nGiven an array, to find the longest and increasing sub-array in that given array and\nreturn it.\nExample: [10, 22, 9, 33, 21, 50, 41, 60, 80] as input will return\n         [10, 22, 33, 41, 60, 80] as output\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">longest_subsequence</span>(<span class=\"hljs-params\">array: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:  <span class=\"hljs-comment\"># This function is recursive</span>\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Some examples\n    &gt;&gt;&gt; longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80])\n    [10, 22, 33, 41, 60, 80]\n    &gt;&gt;&gt; longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9])\n    [1, 2, 3, 9]\n    &gt;&gt;&gt; longest_subsequence([9, 8, 7, 6, 5, 7])\n    [8]\n    &gt;&gt;&gt; longest_subsequence([1, 1, 1])\n    [1, 1, 1]\n    &gt;&gt;&gt; longest_subsequence([])\n    []\n    &quot;&quot;&quot;</span>\n    array_length = <span class=\"hljs-built_in\">len</span>(array)\n    <span class=\"hljs-comment\"># If the array contains only one element, we return it (it&#x27;s the stop condition of</span>\n    <span class=\"hljs-comment\"># recursion)</span>\n    <span class=\"hljs-keyword\">if</span> array_length &lt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> array\n        <span class=\"hljs-comment\"># Else</span>\n    pivot = array[<span class=\"hljs-number\">0</span>]\n    isFound = <span class=\"hljs-literal\">False</span>\n    i = <span class=\"hljs-number\">1</span>\n    longest_subseq = []\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> isFound <span class=\"hljs-keyword\">and</span> i &lt; array_length:\n        <span class=\"hljs-keyword\">if</span> array[i] &lt; pivot:\n            isFound = <span class=\"hljs-literal\">True</span>\n            temp_array = [element <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> array[i:] <span class=\"hljs-keyword\">if</span> element &gt;= array[i]]\n            temp_array = longest_subsequence(temp_array)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(temp_array) &gt; <span class=\"hljs-built_in\">len</span>(longest_subseq):\n                longest_subseq = temp_array\n        <span class=\"hljs-keyword\">else</span>:\n            i += <span class=\"hljs-number\">1</span>\n\n    temp_array = [element <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> array[<span class=\"hljs-number\">1</span>:] <span class=\"hljs-keyword\">if</span> element &gt;= pivot]\n    temp_array = [pivot] + longest_subsequence(temp_array)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(temp_array) &gt; <span class=\"hljs-built_in\">len</span>(longest_subseq):\n        <span class=\"hljs-keyword\">return</span> temp_array\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> longest_subseq\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Dynamic-Programming/LongestIncreasingSubsequence.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/LongestIncreasingSubsequence.js",
      "code": "<span class=\"hljs-comment\">/**\n * A Dynamic Programming based solution for calculating Longest Increasing Subsequence\n * https://en.wikipedia.org/wiki/Longest_increasing_subsequence\n */</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span> () {\n  <span class=\"hljs-keyword\">const</span> x = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">15</span>]\n  <span class=\"hljs-keyword\">const</span> length = x.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> dp = <span class=\"hljs-title class_\">Array</span>(length).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\n      <span class=\"hljs-keyword\">if</span> (x[i] &gt; x[j]) {\n        dp[i] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(dp[i], <span class=\"hljs-number\">1</span> + dp[j])\n        <span class=\"hljs-keyword\">if</span> (dp[i] &gt; res) {\n          res = dp[i]\n        }\n      }\n    }\n  }\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Length of Longest Increasing Subsequence is:&#x27;</span>, res)\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming/longest_increasing_subsequence.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/longest_increasing_subsequence.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Calculate the length of the [longest increasing\n * subsequence](https://en.wikipedia.org/wiki/Longest_increasing_subsequence) in\n * an array\n *\n * @details\n * In computer science, the longest increasing subsequence problem is to find a\n * subsequence of a given sequence in which the subsequence&#x27;s elements are in\n * sorted order, lowest to highest, and in which the subsequence is as long as\n * possible. This subsequence is not necessarily contiguous, or unique. Longest\n * increasing subsequences are studied in the context of various disciplines\n * related to mathematics, including algorithmics, random matrix theory,\n * representation theory, and physics. The longest increasing subsequence\n * problem is solvable in time O(n log n), where n denotes the length of the\n * input sequence.\n *\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @author [David Leal](https://github.com/Panquesito7)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span>   <span class=\"hljs-comment\">/// for std::max</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace dynamic_programming\n * @brief Dynamic Programming algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\n<span class=\"hljs-comment\">/**\n * @brief Calculate the longest increasing subsequence for the specified numbers\n * @param a the array used to calculate the longest increasing subsequence\n * @param n the size used for the arrays\n * @returns the length of the longest increasing\n * subsequence in the `a` array of size `n`\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">LIS</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; &amp;a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint32_t</span> &amp;n)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">lis</span><span class=\"hljs-params\">(n)</span></span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        lis[i] = <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; ++j) {\n            <span class=\"hljs-keyword\">if</span> (a[i] &gt; a[j] &amp;&amp; lis[i] &lt; lis[j] + <span class=\"hljs-number\">1</span>) {\n                lis[i] = lis[j] + <span class=\"hljs-number\">1</span>;\n            }\n        }\n    }\n    <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        res = std::<span class=\"hljs-built_in\">max</span>(res, lis[i]);\n    }\n    <span class=\"hljs-keyword\">return</span> res;\n}\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; a = {<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-type\">uint32_t</span> n = a.<span class=\"hljs-built_in\">size</span>();\n\n    <span class=\"hljs-type\">uint32_t</span> result = dynamic_programming::<span class=\"hljs-built_in\">LIS</span>(a, n);\n    <span class=\"hljs-built_in\">assert</span>(result ==\n           <span class=\"hljs-number\">5</span>);  <span class=\"hljs-comment\">///&lt; The longest increasing subsequence is `{2,3,4,5,8}`</span>\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Self-test implementations passed!&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @param argc commandline argument count (ignored)\n * @param argv commandline array of arguments (ignored)\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-keyword\">const</span> *argv[])</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> n = <span class=\"hljs-number\">0</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter size of array: &quot;</span>;\n    std::cin &gt;&gt; n;\n\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(n)</span></span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter array elements: &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        std::cin &gt;&gt; a[i];\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThe result is: &quot;</span> &lt;&lt; dynamic_programming::<span class=\"hljs-built_in\">LIS</span>(a, n)\n              &lt;&lt; std::endl;\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "DynamicProgramming/LongestIncreasingSubsequence.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/LongestIncreasingSubsequence.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@author</span> Afrizal Fikri (https://github.com/icalF) */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LongestIncreasingSubsequence</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n\n    <span class=\"hljs-type\">int</span> arr[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n      arr[i] = sc.nextInt();\n    }\n\n    System.out.println(LIS(arr));\n    System.out.println(findLISLen(arr));\n    sc.close();\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">upperBound</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] ar, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-keyword\">while</span> (l &lt; r - <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> (l + r) &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">if</span> (ar[m] &gt;= key) r = m;\n      <span class=\"hljs-type\">else</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> m;\n    }\n\n    <span class=\"hljs-keyword\">return</span> r;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">LIS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> array.length;\n    <span class=\"hljs-keyword\">if</span> (N == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-type\">int</span>[] tail = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[N];\n\n    <span class=\"hljs-comment\">// always points empty slot in tail</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n    tail[<span class=\"hljs-number\">0</span>] = array[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; N; i++) {\n\n      <span class=\"hljs-comment\">// new smallest value</span>\n      <span class=\"hljs-keyword\">if</span> (array[i] &lt; tail[<span class=\"hljs-number\">0</span>]) tail[<span class=\"hljs-number\">0</span>] = array[i];\n\n      <span class=\"hljs-comment\">// array[i] extends largest subsequence</span>\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (array[i] &gt; tail[length - <span class=\"hljs-number\">1</span>]) tail[length++] = array[i];\n\n      <span class=\"hljs-comment\">// array[i] will become end candidate of an existing subsequence or</span>\n      <span class=\"hljs-comment\">// Throw away larger elements in all LIS, to make room for upcoming grater elements than</span>\n      <span class=\"hljs-comment\">// array[i]</span>\n      <span class=\"hljs-comment\">// (and also, array[i] would have already appeared in one of LIS, identify the location and</span>\n      <span class=\"hljs-comment\">// replace it)</span>\n      <span class=\"hljs-keyword\">else</span> tail[upperBound(tail, -<span class=\"hljs-number\">1</span>, length - <span class=\"hljs-number\">1</span>, array[i])] = array[i];\n    }\n\n    <span class=\"hljs-keyword\">return</span> length;\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@author</span> Alon Firestein (https://github.com/alonfirestein) */</span>\n\n  <span class=\"hljs-comment\">// A function for finding the length of the LIS algorithm in O(nlogn) complexity.</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findLISLen</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[])</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> a.length;\n    <span class=\"hljs-type\">int</span> arr[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\n    arr[<span class=\"hljs-number\">0</span>] = a[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">lis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; size; i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> binarySearchBetween(arr, lis, a[i]);\n      arr[index] = a[i];\n      <span class=\"hljs-keyword\">if</span> (index &gt; lis) lis++;\n    }\n    <span class=\"hljs-keyword\">return</span> lis;\n  }\n  <span class=\"hljs-comment\">// O(logn)</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">binarySearchBetween</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] t, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> end;\n    <span class=\"hljs-keyword\">if</span> (key &lt; t[<span class=\"hljs-number\">0</span>]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> (key &gt; t[end]) <span class=\"hljs-keyword\">return</span> end + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (left &lt; right - <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">middle</span> <span class=\"hljs-operator\">=</span> (left + right) / <span class=\"hljs-number\">2</span>;\n      <span class=\"hljs-keyword\">if</span> (t[middle] &lt; key) left = middle;\n      <span class=\"hljs-type\">else</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> middle;\n    }\n    <span class=\"hljs-keyword\">return</span> right;\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Alon Firestein",
      "email": "57404551+alonfirestein@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Daniel Müller",
      "email": "danielmueller@limebird.de",
      "commits": 1
    },
    {
      "name": "icalF",
      "email": "laser.survivor@gmail.com",
      "commits": 1
    },
    {
      "name": "John Law",
      "email": "johnlaw.po@gmail.com",
      "commits": 1
    },
    {
      "name": "pkdism",
      "email": "pawan.dwivedi94@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "dhruvsaini",
      "email": "dhruv_saini@outlook.com",
      "commits": 1
    },
    {
      "name": "Omkarnath Parida",
      "email": "pomkarnath98@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
