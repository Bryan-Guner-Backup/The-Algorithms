{
  "slug": "random-quick-sort",
  "name": "Random Quick Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting/random_quick_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/random_quick_sort.c",
      "code": "<span class=\"hljs-comment\">/*\nRandomised quick sort implementation in C language.\nIn normal quick sort, pivot chosen to partition is either the first or the last\nelement of the array. This can take time O(n*n) to sort in the worst case. Now\nin randomised quick sort, pivot is randomly chosen and then recursively sort the\nleft and right sub-arrays. The expected running time of the algorithm is\nO(nlog(n)).\n*/</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getBig</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> right, <span class=\"hljs-type\">int</span> pivot)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = i; k &lt;= right; k++)\n    {\n        <span class=\"hljs-keyword\">if</span> (a[k] &gt; pivot)\n            <span class=\"hljs-keyword\">return</span> k;\n    }\n    <span class=\"hljs-keyword\">return</span> right + <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getSmall</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> j, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> pivot)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = j; k &gt;= left; k--)\n    {\n        <span class=\"hljs-keyword\">if</span> (a[k] &lt; pivot)\n            <span class=\"hljs-keyword\">return</span> k;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> *b)</span>\n{\n    <span class=\"hljs-type\">int</span> t = *a;\n    *a = *b;\n    *b = t;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">random_quick</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (left &gt;= right)\n        <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-type\">int</span> index = left + (rand() % (right - left)), i = left, j = right;\n    <span class=\"hljs-type\">int</span> pivot_index = index;\n    <span class=\"hljs-type\">int</span> pivot = a[index];\n    <span class=\"hljs-comment\">// storing index of element greater than pivot</span>\n    i = getBig(a, i, right, pivot);\n    <span class=\"hljs-comment\">// storing index of element smaller than pivot</span>\n    j = getSmall(a, j, left, pivot);\n    <span class=\"hljs-keyword\">while</span> (i &lt;= j)\n    {\n        swap(&amp;a[i], &amp;a[j]);\n        i = getBig(a, i, right, pivot);\n        j = getSmall(a, j, left, pivot);\n    }\n    <span class=\"hljs-comment\">// after separating the smaller and greater elements, there are 3 cases</span>\n    <span class=\"hljs-comment\">// possible</span>\n    <span class=\"hljs-keyword\">if</span> (pivot_index &gt; j &amp;&amp; pivot_index &gt; i)\n    {\n        <span class=\"hljs-comment\">// case 1. When the pivot element index is greater than both i and j</span>\n        swap(&amp;a[i], &amp;a[pivot_index]);\n        random_quick(a, left, i - <span class=\"hljs-number\">1</span>);\n        random_quick(a, i + <span class=\"hljs-number\">1</span>, right);\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pivot_index &lt; j &amp;&amp; pivot_index &lt; i)\n    {\n        <span class=\"hljs-comment\">// case 2. When the pivot element index is smaller than both i and j</span>\n        swap(&amp;a[j], &amp;a[pivot_index]);\n        random_quick(a, left, j - <span class=\"hljs-number\">1</span>);\n        random_quick(a, j + <span class=\"hljs-number\">1</span>, right);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-comment\">// the pivot element is at its origin position.</span>\n        random_quick(a, left, pivot_index - <span class=\"hljs-number\">1</span>);\n        random_quick(a, pivot_index + <span class=\"hljs-number\">1</span>, right);\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    srand(time(<span class=\"hljs-number\">0</span>));\n    <span class=\"hljs-type\">int</span> num;\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;num);\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(num * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; num; i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\n    }\n    random_quick(arr, <span class=\"hljs-number\">0</span>, num - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; num; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">free</span>(arr);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "Sayam Kumar",
      "email": "sayamkumar753@yahoo.in",
      "commits": 1
    },
    {
      "name": "Prateek Chanda",
      "email": "prateekkol21@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
