{
  "slug": "fermat-prime-checker",
  "name": "Fermat Prime Checker",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Other/FermatPrimeChecker.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Other/FermatPrimeChecker.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Numerics;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Fermat&#x27;s prime tester https://en.wikipedia.org/wiki/Fermat_primality_test.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FermatPrimeChecker</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks if input number is a probable prime.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;numberToTest&quot;&gt;</span>Input number.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;timesToCheck&quot;&gt;</span>Number of times to check.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>True if is a prime; False otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsPrime</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> numberToTest, <span class=\"hljs-built_in\">int</span> timesToCheck</span>)</span>\n        {\n            <span class=\"hljs-comment\">// You have to use BigInteger for two reasons:</span>\n            <span class=\"hljs-comment\">//   1. The pow operation between two int numbers usually overflows an int</span>\n            <span class=\"hljs-comment\">//   2. The pow and modular operation is very optimized</span>\n            <span class=\"hljs-keyword\">var</span> numberToTestBigInteger = <span class=\"hljs-keyword\">new</span> BigInteger(numberToTest);\n            <span class=\"hljs-keyword\">var</span> exponentBigInteger = <span class=\"hljs-keyword\">new</span> BigInteger(numberToTest - <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-comment\">// Create a random number generator using the current time as seed</span>\n            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-keyword\">new</span> Random(<span class=\"hljs-literal\">default</span>(DateTime).Millisecond);\n\n            <span class=\"hljs-keyword\">var</span> iterator = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">var</span> prime = <span class=\"hljs-literal\">true</span>;\n\n            <span class=\"hljs-keyword\">while</span> (iterator &lt; timesToCheck &amp;&amp; prime)\n            {\n                <span class=\"hljs-keyword\">var</span> randomNumber = r.Next(<span class=\"hljs-number\">1</span>, numberToTest);\n                <span class=\"hljs-keyword\">var</span> randomNumberBigInteger = <span class=\"hljs-keyword\">new</span> BigInteger(randomNumber);\n                <span class=\"hljs-keyword\">if</span> (BigInteger.ModPow(randomNumberBigInteger, exponentBigInteger, numberToTestBigInteger) != <span class=\"hljs-number\">1</span>)\n                {\n                    prime = <span class=\"hljs-literal\">false</span>;\n                }\n\n                iterator++;\n            }\n\n            <span class=\"hljs-keyword\">return</span> prime;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Jorge Dur√°n",
      "email": "ganchito55@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}
