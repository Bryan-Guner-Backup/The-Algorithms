{
  "slug": "malloc-dbg",
  "name": "Malloc Dbg",
  "categories": ["developertools"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "developer_tools/malloc_dbg.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/developer_tools/malloc_dbg.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief This file contains malloc_dbg, calloc_dbg, free_dbg and printLeaks implementations.\r\n * @author [tinouduart33](https://github.com/tinouduart33)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span> <span class=\"hljs-comment\">/// For the malloc, calloc and free functions.</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span> <span class=\"hljs-comment\">/// For IO operations (printf).</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span> <span class=\"hljs-comment\">/// For the memcmp function.</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;malloc_dbg.h&quot;</span> <span class=\"hljs-comment\">/// Header file which contains the prototypes of malloc_dbg, calloc_dbg and fre_dbg.</span></span>\r\n\r\n<span class=\"hljs-comment\">/* We must undef these macros in order to use the real malloc / calloc and free functions */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">undef</span> malloc</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">undef</span> calloc</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">undef</span> free</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Structure used to save an allocated pointer\r\n */</span>\r\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MEMORY_INFORMATION</span>\r\n{</span>\r\n\t<span class=\"hljs-type\">void</span>* ptr; <span class=\"hljs-comment\">///&lt; Pointer returned by malloc / calloc</span>\r\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* fileName; <span class=\"hljs-comment\">///&lt; File in which malloc or calloc has been called</span>\r\n\t<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* functionName; <span class=\"hljs-comment\">///&lt; Function in which malloc or calloc has been called</span>\r\n\t<span class=\"hljs-type\">size_t</span> bytes; <span class=\"hljs-comment\">///&lt; Number of bytes allocated</span>\r\n\t<span class=\"hljs-type\">int</span> line; <span class=\"hljs-comment\">///&lt; Line number (in file) corresponding to the malloc / calloc call</span>\r\n\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MEMORY_INFORMATION</span>* <span class=\"hljs-title\">next</span>;</span> <span class=\"hljs-comment\">///&lt; Next element in the list</span>\r\n\t<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MEMORY_INFORMATION</span>* <span class=\"hljs-title\">previous</span>;</span> <span class=\"hljs-comment\">///&lt; Previous element in the list</span>\r\n} mem_info;\r\n\r\n<span class=\"hljs-comment\">/** We use a global variable for the list so we can use it at any time.\r\n * */</span>\r\nmem_info* memoryInformation = <span class=\"hljs-literal\">NULL</span>;\r\n\r\n<span class=\"hljs-comment\">/** Another global variable. This one is used to know if we already call the atexit function.\r\n * */</span>\r\n<span class=\"hljs-type\">int</span> atexitCalled = <span class=\"hljs-number\">0</span>;\r\n\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief addMemInfo function add a memory allocation in the memoryInfo list.\r\n * @details This function creates a new element and add it on top of the list\r\n * @param memoryInfo Pointer to the doubly linked list used to store all of the allocations\r\n * @param ptrToreturn Pointer returned by malloc or calloc\r\n * @param bytes Size in bytes of the allocation\r\n * @param line Line where the allocation has been called\r\n * @param filename File where the allocation has been called\r\n * @param functionName Name of the function where the allocation has been called\r\n * @returns mem_info pointer if it succeeds, NULL otherwise\r\n */</span>\r\nmem_info* <span class=\"hljs-title function_\">addMemInfo</span><span class=\"hljs-params\">(mem_info* memoryInfo, <span class=\"hljs-type\">void</span>* ptrToReturn, <span class=\"hljs-type\">size_t</span> bytes, <span class=\"hljs-type\">int</span> line, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* filename, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* functionName)</span>\r\n{\r\n\tmem_info* newMemInfo = (mem_info*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(mem_info));\r\n\t<span class=\"hljs-keyword\">if</span> (!newMemInfo)\r\n\t{\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\r\n\t}\r\n\r\n\tnewMemInfo-&gt;ptr = ptrToReturn;\r\n\tnewMemInfo-&gt;bytes = bytes;\r\n\tnewMemInfo-&gt;line = line;\r\n\tnewMemInfo-&gt;fileName = filename;\r\n\tnewMemInfo-&gt;functionName = functionName;\r\n\tnewMemInfo-&gt;next = memoryInfo;\r\n\tnewMemInfo-&gt;previous = <span class=\"hljs-literal\">NULL</span>;\r\n\t<span class=\"hljs-keyword\">if</span> (memoryInformation)\r\n\t\tmemoryInformation-&gt;previous = newMemInfo;\r\n\r\n\t<span class=\"hljs-keyword\">return</span> newMemInfo;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief inList function is used to know if an element is already in the memoryInfo list.\r\n * @details This function is used to know if an allocation in a specific file at a specific line already exists in the list.\r\n * @param filename File in which malloc or calloc has been called\r\n * @param line Line number in the file in which malloc or calloc has been called\r\n * @returns Position of the element in the list if the element is found, -1 otherwise.\r\n */</span>\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">inList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* filename, <span class=\"hljs-type\">int</span> line)</span>\r\n{\r\n\tmem_info* tmp = memoryInformation;\r\n\t<span class=\"hljs-type\">int</span> counter = <span class=\"hljs-number\">0</span>;\r\n\t<span class=\"hljs-type\">int</span> len = <span class=\"hljs-built_in\">strlen</span>(filename);\r\n\r\n\t<span class=\"hljs-keyword\">while</span> (tmp)\r\n\t{\r\n\t\t<span class=\"hljs-keyword\">if</span> (len == <span class=\"hljs-built_in\">strlen</span>(tmp-&gt;fileName))\r\n\t\t{\r\n\t\t\t<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">memcmp</span>(filename, tmp-&gt;fileName, len) &amp;&amp; tmp-&gt;line == line)\r\n\t\t\t{\r\n\t\t\t\t<span class=\"hljs-keyword\">return</span> counter;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttmp = tmp-&gt;next;\r\n\t\tcounter++;\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief editInfo function is used to edit an element in the memoryInfo list.\r\n * @details This function is used to edit the number of bytes allocated at a specific line.\r\n * @param elemPos Position of an element in the doubly linked list memoryInfo\r\n * @param bytes Size of the allocation in bytes\r\n * @returns Nothing.\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">editInfo</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> elemPos, <span class=\"hljs-type\">size_t</span> bytes)</span>\r\n{\r\n\t<span class=\"hljs-type\">int</span> counter = <span class=\"hljs-number\">0</span>;\r\n\tmem_info* tmp = memoryInformation;\r\n\r\n\t<span class=\"hljs-keyword\">while</span> (counter != elemPos)\r\n\t{\r\n\t\ttmp = tmp-&gt;next;\r\n\t\tcounter++;\r\n\t}\r\n\ttmp-&gt;bytes += bytes;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief malloc_dbg function is a wrapper around the malloc function.\r\n * @details This function calls malloc and allocates the number of bytes passed in the parameters.\r\n * If the allocation succeeds then it add the pointer returned by malloc in the mem_info list.\r\n * @param bytes Size of the allocation in bytes\r\n * @param filename Caller file\r\n * @param functionName Caller function\r\n * @returns Pointer returned by malloc if it&#x27;s valid, NULL otherwhise.\r\n */</span>\r\n<span class=\"hljs-type\">void</span>* <span class=\"hljs-title function_\">malloc_dbg</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> bytes, <span class=\"hljs-type\">int</span> line, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* filename, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* functionName)</span>\r\n{\r\n\t<span class=\"hljs-type\">void</span>* ptrToReturn = <span class=\"hljs-built_in\">malloc</span>(bytes);\r\n\t<span class=\"hljs-type\">int</span> pos = <span class=\"hljs-number\">0</span>;\r\n\t<span class=\"hljs-keyword\">if</span> (!ptrToReturn)\r\n\t{\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// We must check atexitCalled value to know if we already called the function</span>\r\n\t<span class=\"hljs-keyword\">if</span> (!atexitCalled)\r\n\t{\r\n\t\tatexit(printLeaks); <span class=\"hljs-comment\">// Used to call printLeaks when the program exit</span>\r\n\t\tatexitCalled = <span class=\"hljs-number\">1</span>;\r\n\t}\r\n\r\n\tpos = inList(filename, line);\r\n\t<span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-number\">-1</span>)\r\n\t{\r\n\t\t<span class=\"hljs-comment\">// Add a new element in the mem_info list</span>\r\n\t\tmemoryInformation = addMemInfo(memoryInformation, ptrToReturn, bytes, line, filename, functionName);\r\n\t\t<span class=\"hljs-keyword\">if</span> (!memoryInformation)\r\n\t\t{\r\n\t\t\t<span class=\"hljs-built_in\">free</span>(ptrToReturn);\r\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\r\n\t\t}\r\n\t}\r\n\t<span class=\"hljs-keyword\">else</span>\r\n\t{\r\n\t\teditInfo(pos, bytes);\r\n\t}\r\n\t<span class=\"hljs-keyword\">return</span> ptrToReturn;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief calloc_dbg function is a wrapper around the calloc function.\r\n * @details This function calls calloc and allocates the number of bytes passed in the parameters.\r\n * If the allocation succeeds then it add the pointer returned by malloc in the mem_info list.\r\n * @param elementCount number of element to allocate\r\n * @param elementSize Size of each element\r\n * @param line Line number in the caller file\r\n * @param filename Caller file\r\n * @param functionName Caller function\r\n * @returns Pointer returned by calloc if it&#x27;s valid, NULL otherwhise.\r\n */</span>\r\n<span class=\"hljs-type\">void</span>* <span class=\"hljs-title function_\">calloc_dbg</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> elementCount, <span class=\"hljs-type\">size_t</span> elementSize, <span class=\"hljs-type\">int</span> line, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* filename, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* functionName)</span>\r\n{\r\n\t<span class=\"hljs-type\">void</span>* ptrToReturn = <span class=\"hljs-built_in\">calloc</span>(elementCount, elementSize);\r\n\t<span class=\"hljs-keyword\">if</span> (!ptrToReturn)\r\n\t{\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// We must check atexitCalled value to know if we already called the function</span>\r\n\t<span class=\"hljs-keyword\">if</span> (!atexitCalled)\r\n\t{\r\n\t\tatexit(printLeaks); <span class=\"hljs-comment\">// Used to call printLeaks when the program exit</span>\r\n\t\tatexitCalled = <span class=\"hljs-number\">1</span>;\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// Add a new element in the mem_info list</span>\r\n\tmemoryInformation = addMemInfo(memoryInformation, ptrToReturn, elementCount * elementSize, line, filename, functionName);\r\n\t<span class=\"hljs-keyword\">if</span> (!memoryInformation)\r\n\t{\r\n\t\t<span class=\"hljs-built_in\">free</span>(ptrToReturn);\r\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">return</span> ptrToReturn;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief free_dbg function is used to free the memory allocated to a pointer.\r\n * @details This function free the memory pointed by the pointer passed in parameter.\r\n * To free this pointer, we loop through the mem_info list and check if we find the pointer.\r\n * Once it&#x27;s found, the pointer is freed and the element is deleted from the list.\r\n * @param ptrToFree Pointer that must be freed\r\n * @returns Nothing.\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">free_dbg</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>* ptrToFree)</span>\r\n{\r\n\tmem_info* tmp = memoryInformation;\r\n\tmem_info* toFree = <span class=\"hljs-literal\">NULL</span>;\r\n\tmem_info* previous = <span class=\"hljs-literal\">NULL</span>;\r\n\r\n\t<span class=\"hljs-comment\">// Check if the head contains the pointer to free</span>\r\n\t<span class=\"hljs-keyword\">if</span> (tmp-&gt;ptr == ptrToFree)\r\n\t{\r\n\t\ttoFree = tmp;\r\n\t\tmemoryInformation = tmp-&gt;next;\r\n\t\t<span class=\"hljs-built_in\">free</span>(toFree-&gt;ptr);\r\n\t\t<span class=\"hljs-built_in\">free</span>(toFree);\r\n\t\t<span class=\"hljs-keyword\">if</span> (memoryInformation)\r\n\t\t{\r\n\t\t\tmemoryInformation-&gt;previous = <span class=\"hljs-literal\">NULL</span>;\r\n\t\t}\r\n\t\t<span class=\"hljs-keyword\">return</span>;\r\n\t}\r\n\r\n\t<span class=\"hljs-comment\">// We can loop through the list without any problems, the head is not the pointer</span>\r\n\t<span class=\"hljs-keyword\">while</span> (tmp)\r\n\t{\r\n\t\t<span class=\"hljs-keyword\">if</span> (tmp-&gt;ptr == ptrToFree) <span class=\"hljs-comment\">// If we found the pointer that must be freed</span>\r\n\t\t{\r\n\t\t\ttoFree = tmp;\r\n\t\t\ttmp = tmp-&gt;next;\r\n\t\t\tprevious = toFree-&gt;previous;\r\n\r\n\t\t\t<span class=\"hljs-keyword\">if</span> (previous)\r\n\t\t\t{\r\n\t\t\t\tprevious-&gt;next = tmp;\r\n\t\t\t}\r\n\t\t\t<span class=\"hljs-keyword\">if</span> (tmp)\r\n\t\t\t{\r\n\t\t\t\ttmp-&gt;previous = previous;\r\n\t\t\t}\r\n\r\n\t\t\t<span class=\"hljs-built_in\">free</span>(toFree-&gt;ptr);\r\n\t\t\t<span class=\"hljs-keyword\">if</span> (toFree == memoryInformation)\r\n\t\t\t{\r\n\t\t\t\tmemoryInformation = <span class=\"hljs-literal\">NULL</span>;\r\n\t\t\t}\r\n\t\t\t<span class=\"hljs-built_in\">free</span>(toFree);\r\n\t\t\t<span class=\"hljs-keyword\">return</span>;\r\n\t\t}\r\n\t\ttmp = tmp-&gt;next;\r\n\t}\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief printLeaks function is used to print all the memory leaks.\r\n * @details This function is called when the program exits. It loop through the mem_info list and if it&#x27;s not empty,\r\n * it prints the memory leaks.\r\n * @returns Nothing.\r\n */</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printLeaks</span><span class=\"hljs-params\">()</span>\r\n{\r\n\tmem_info* tmp = memoryInformation;\r\n\tmem_info* previous = <span class=\"hljs-literal\">NULL</span>;\r\n\t<span class=\"hljs-type\">size_t</span> sum = <span class=\"hljs-number\">0</span>;\r\n\t<span class=\"hljs-type\">int</span> nbBlocks = <span class=\"hljs-number\">0</span>;\r\n\r\n\t<span class=\"hljs-keyword\">if</span> (tmp)\r\n\t{\r\n\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Memory Leaks detected.\\n&quot;</span>);\r\n\t}\r\n\r\n\t<span class=\"hljs-keyword\">while</span> (tmp)\r\n\t{\r\n\t\tprevious = tmp;\r\n\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n%ld bytes lost\\n&quot;</span>, tmp-&gt;bytes);\r\n\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;address : 0x%p in %s\\t%s:%d\\n&quot;</span>, tmp-&gt;ptr, tmp-&gt;functionName, tmp-&gt;fileName, tmp-&gt;line);\r\n\t\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n====================================\\n&quot;</span>);\r\n\t\tsum += tmp-&gt;bytes;\r\n\t\ttmp = tmp-&gt;next;\r\n\t\t<span class=\"hljs-built_in\">free</span>(previous);\r\n\t\tnbBlocks++;\r\n\t}\r\n\r\n\t<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;SUMMARY :\\n%ld bytes lost in %d blocks\\n&quot;</span>, sum, nbBlocks);\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "tinouduart33",
      "email": "38814052+tinouduart33@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
