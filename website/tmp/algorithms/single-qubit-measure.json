{
  "slug": "single-qubit-measure",
  "name": "Single Qubit Measure",
  "categories": ["quantum"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "quantum/single_qubit_measure.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/quantum/single_qubit_measure.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n<span class=\"hljs-string\">&quot;&quot;&quot;\nBuild a simple bare-minimum quantum circuit that starts with a single\nqubit (by default, in state 0), runs the experiment 1000 times, and\nfinally prints the total count of the states finally observed.\nQiskit Docs: https://qiskit.org/documentation/getting_started.html\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> qiskit <span class=\"hljs-keyword\">as</span> q\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">single_qubit_measure</span>(<span class=\"hljs-params\">qubits: <span class=\"hljs-built_in\">int</span>, classical_bits: <span class=\"hljs-built_in\">int</span></span>) -&gt; q.result.counts.Counts:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; single_qubit_measure(1, 1)\n    {&#x27;0&#x27;: 1000}\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Use Aer&#x27;s qasm_simulator</span>\n    simulator = q.Aer.get_backend(<span class=\"hljs-string\">&quot;qasm_simulator&quot;</span>)\n\n    <span class=\"hljs-comment\"># Create a Quantum Circuit acting on the q register</span>\n    circuit = q.QuantumCircuit(qubits, classical_bits)\n\n    <span class=\"hljs-comment\"># Map the quantum measurement to the classical bits</span>\n    circuit.measure([<span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>])\n\n    <span class=\"hljs-comment\"># Execute the circuit on the qasm simulator</span>\n    job = q.execute(circuit, simulator, shots=<span class=\"hljs-number\">1000</span>)\n\n    <span class=\"hljs-comment\"># Return the histogram data of the results of the experiment.</span>\n    <span class=\"hljs-keyword\">return</span> job.result().get_counts(circuit)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Total count for various states are: <span class=\"hljs-subst\">{single_qubit_measure(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)}</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Abhishek Jaisingh",
      "email": "abhi2254015@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
