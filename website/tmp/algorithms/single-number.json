{
  "slug": "single-number",
  "name": "Single Number",
  "categories": ["datastructures", "array"],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "data_structures/arrays/single_number.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/single_number.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Single Number</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given a non-empty array of integers nums, every element appears twice</span>\n<span class=\"hljs-comment\"># except for one. Find that single one.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Follow up: Could you implement a solution with a linear runtime</span>\n<span class=\"hljs-comment\"># complexity and without using extra memory?</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {Integer[]} nums</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Integer}</span>\n\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-comment\"># Approach 1: Hash map</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">single_number</span><span class=\"hljs-params\">(nums)</span></span>\n  result_hash = {}\n  nums.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num|</span>\n    <span class=\"hljs-keyword\">if</span> result_hash[num]\n      result_hash[num] +=<span class=\"hljs-number\">1</span> \n    <span class=\"hljs-keyword\">else</span>\n      result_hash[num] = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  result_hash.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|k, v|</span>\n    <span class=\"hljs-keyword\">return</span> k <span class=\"hljs-keyword\">if</span> v == <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nnums = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\nputs(single_number(nums))\n<span class=\"hljs-comment\"># Output: 1</span>\nnums = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\nputs(single_number(nums))\n<span class=\"hljs-comment\"># Output: 4</span>\nnums = [<span class=\"hljs-number\">1</span>]\nputs(single_number(nums))\n<span class=\"hljs-comment\"># Output: 1</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: Use Ruby .count()</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n^2)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">single_number</span><span class=\"hljs-params\">(nums)</span></span>\n  nums.find <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num|</span>\n    nums.count(num) == <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nnums = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\nputs(single_number(nums))\n<span class=\"hljs-comment\"># Output: 1</span>\nnums = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\nputs(single_number(nums))\n<span class=\"hljs-comment\"># Output: 4</span>\nnums = [<span class=\"hljs-number\">1</span>]\nputs(single_number(nums))\n<span class=\"hljs-comment\"># Output: 1</span>"
    }
  },
  "contributors": [
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
