{
  "slug": "minimum-edit-distance",
  "name": "Minimum Edit Distance",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming/minimum_edit_distance.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/minimum_edit_distance.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Implementation of [Minimum Edit Distance](https://en.wikipedia.org/wiki/Edit_distance) using Dynamic Programing\r\n *\r\n * @details\r\n *\r\n * Given two strings str1 &amp; str2 and we have to calculate the minimum\r\n * number of operations (Insert, Remove, Replace) required to convert\r\n * str1 to str2.\r\n *\r\n * ### Algorithm\r\n *\r\n * We will solve this problem using Naive recursion. But as we are\r\n * approaching with a DP solution. So, we will take a DP array to\r\n * store the solution of all sub-problems so that we don&#x27;t have to\r\n * perform recursion again and again. Now to solve the problem, We\r\n * can traverse all characters from either right side of the strings\r\n * or left side. Suppose we will do it from the right side. So, there\r\n * are two possibilities for every pair of characters being traversed.\r\n * 1. If the last characters of two strings are the same, Ignore\r\n * the characters and get the count for the remaining string.\r\n * So, we get the solution for lengths m-1 and n-1 in a DP array.\r\n *\r\n * 2. Else, (If last characters are not the same), we will consider all\r\n * three operations (Insert, Remove, Replace) on the last character of\r\n * the first string and compute the minimum cost for all three operations\r\n * and take the minimum of three values in the DP array.\r\n * For Insert: Recur for m and n-1\r\n * For Remove: Recur for for m-1 and n\r\n * For Replace: Recur for for m-1 and n-1\r\n *\r\n * @author [Nirjas Jakilim](github.com/nirzak)\r\n */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>     <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\r\n<span class=\"hljs-comment\">/**\r\n * @namespace dynamic_programming\r\n * @brief Dynamic Programming algorithms\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace Minimum Edit Distance\r\n * @brief Implementation of [Minimum Edit Distance](https://en.wikipedia.org/wiki/Edit_distance) algorithm\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">namespace</span> minimum_edit_distance {\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Takes input of the cost of\r\n * three operations: Insert, Replace and Delete\r\n * and return the minimum cost among them.\r\n * @param x used to pass minimum cost of Insert operations\r\n * @param y used to pass minimum cost of Replace operations\r\n * @param z used to pass minimum cost of Delete operations\r\n * @returns x if `x` is the minimum value\r\n * @returns y if `y` is the minimum value\r\n * @returns z if `z` is the minimum value\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> x, <span class=\"hljs-type\">uint64_t</span> y, <span class=\"hljs-type\">uint64_t</span> z)</span> </span>{\r\n  <span class=\"hljs-keyword\">if</span> (x &lt;= y &amp;&amp; x &lt;= z) {\r\n    <span class=\"hljs-keyword\">return</span> x; <span class=\"hljs-comment\">/// returns x, if x is the minimum value</span>\r\n  }\r\n  <span class=\"hljs-keyword\">if</span> (y &lt;= x &amp;&amp; y &lt;= z) {\r\n    <span class=\"hljs-keyword\">return</span> y; <span class=\"hljs-comment\">/// returns y, if y is the minimum value</span>\r\n  }\r\n  <span class=\"hljs-keyword\">else</span> {\r\n    <span class=\"hljs-keyword\">return</span> z; <span class=\"hljs-comment\">/// returns z if z is the minimum value</span>\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Calculates and stores the result\r\n * of all the sub-problems, so that we don&#x27;t have to recur to compute\r\n * the minimum cost of a particular operation if it is already\r\n * computed and stored in the `dp` vector.\r\n * @param dp vector to store the computed minimum costs\r\n * @param str1 to pass the 1st string\r\n * @param str2 to pass the 2nd string\r\n * @param m the length of str1\r\n * @param n the length of str2\r\n * @returns dp[m][n] the minimum cost of operations\r\n * needed to convert str1 to str2\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">editDistDP</span><span class=\"hljs-params\">(std::string str1, std::string str2, <span class=\"hljs-type\">uint64_t</span> m, <span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n  <span class=\"hljs-comment\">/// Create a table to store results of subproblems</span>\r\n  std::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;&gt;<span class=\"hljs-built_in\">dp</span>(m+<span class=\"hljs-number\">1</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(n+<span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">/// creasting 2D vector dp to store the results of subproblems</span>\r\n\r\n  <span class=\"hljs-comment\">/// Fill d[][] in bottom up manner</span>\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> j = <span class=\"hljs-number\">0</span>; j &lt;= n; j++) {\r\n      <span class=\"hljs-comment\">/// If first string is empty, only option is to</span>\r\n      <span class=\"hljs-comment\">/// insert all characters of second string</span>\r\n      <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>) {\r\n        dp[i][j] = j; <span class=\"hljs-comment\">/// Minimum operations = j</span>\r\n      }\r\n\r\n      <span class=\"hljs-comment\">/// If second string is empty, only option is to</span>\r\n      <span class=\"hljs-comment\">/// remove all characters of second string</span>\r\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span>) {\r\n        dp[i][j] = i; <span class=\"hljs-comment\">/// Minimum operations = i</span>\r\n      }\r\n\r\n      <span class=\"hljs-comment\">/// If last characters are same, ignore last char</span>\r\n      <span class=\"hljs-comment\">/// and recur for remaining string</span>\r\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str1[i - <span class=\"hljs-number\">1</span>] == str2[j - <span class=\"hljs-number\">1</span>]) {\r\n        dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];\r\n      }\r\n\r\n      <span class=\"hljs-comment\">/// If the last character is different, consider all</span>\r\n      <span class=\"hljs-comment\">/// possibilities and find the minimum</span>\r\n      <span class=\"hljs-keyword\">else</span> {\r\n        dp[i][j] = <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(dp[i][j - <span class=\"hljs-number\">1</span>],      <span class=\"hljs-comment\">// Insert</span>\r\n                           dp[i - <span class=\"hljs-number\">1</span>][j],      <span class=\"hljs-comment\">// Remove</span>\r\n                           dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]); <span class=\"hljs-comment\">// Replace</span>\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> dp[m][n]; <span class=\"hljs-comment\">/// returning the minimum cost of operations needed to convert str1 to str2</span>\r\n}\r\n}  <span class=\"hljs-comment\">// namespace minimum_edit_distance</span>\r\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Self-test implementations\r\n * @returns void\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n  <span class=\"hljs-comment\">// 1st test</span>\r\n  std::string str1 = <span class=\"hljs-string\">&quot;INTENTION&quot;</span>; <span class=\"hljs-comment\">// Sample input of 1st string</span>\r\n  std::string str2 = <span class=\"hljs-string\">&quot;EXECUTION&quot;</span>; <span class=\"hljs-comment\">// Sample input of 2nd string</span>\r\n  <span class=\"hljs-type\">uint64_t</span> expected_output1 = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Expected minimum cost</span>\r\n  <span class=\"hljs-type\">uint64_t</span> output1 = dynamic_programming::minimum_edit_distance::<span class=\"hljs-built_in\">editDistDP</span>(\r\n      str1, str2, str1.<span class=\"hljs-built_in\">length</span>(), str2.<span class=\"hljs-built_in\">length</span>()); <span class=\"hljs-comment\">// calling the editDistDP function and storing the result on output1</span>\r\n  <span class=\"hljs-built_in\">assert</span>(output1 == expected_output1); <span class=\"hljs-comment\">// comparing the output with the expected output</span>\r\n  std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Minimum Number of Operations Required: &quot;</span> &lt;&lt; output1\r\n            &lt;&lt; std::endl;\r\n\r\n  <span class=\"hljs-comment\">// 2nd test</span>\r\n  std::string str3 = <span class=\"hljs-string\">&quot;SATURDAY&quot;</span>;\r\n  std::string str4 = <span class=\"hljs-string\">&quot;SUNDAY&quot;</span>;\r\n  <span class=\"hljs-type\">uint64_t</span> expected_output2 = <span class=\"hljs-number\">3</span>;\r\n  <span class=\"hljs-type\">uint64_t</span> output2 = dynamic_programming::minimum_edit_distance::<span class=\"hljs-built_in\">editDistDP</span>(\r\n      str3, str4, str3.<span class=\"hljs-built_in\">length</span>(), str4.<span class=\"hljs-built_in\">length</span>());\r\n  <span class=\"hljs-built_in\">assert</span>(output2 == expected_output2);\r\n  std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Minimum Number of Operations Required: &quot;</span> &lt;&lt; output2\r\n            &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief main function\r\n * @param argc commandline argument count (ignored)\r\n * @param argv commandline array of arguments (ignored)\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\r\n  <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\r\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Nirjas Jakilim",
      "email": "Nirzak@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
