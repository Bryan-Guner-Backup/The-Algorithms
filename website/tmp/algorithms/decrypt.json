{
  "slug": "decrypt",
  "name": "Decrypt",
  "categories": ["imageprocessing", "lsbbasedimagesteganography"],
  "body": {},
  "implementations": {
    "matlab-octave": {
      "dir": "algorithms/ImageProcessing/LSB based Image Steganography/decrypt.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/ImageProcessing/LSB based Image Steganography/decrypt.m",
      "code": "clc;\nclear variables;\nlen=str2double(input(<span class=\"hljs-string\">&#x27;Enter the length (character count) of the message you are looking for: &#x27;</span>,<span class=\"hljs-string\">&#x27;s&#x27;</span>));\nlen = len*<span class=\"hljs-number\">8</span>;\nimage_hide = imread(<span class=\"hljs-string\">&#x27;output.png&#x27;</span>);\n[rows,columns,channels] = <span class=\"hljs-built_in\">size</span>(image_hide);\n<span class=\"hljs-keyword\">if</span> channels &gt; <span class=\"hljs-number\">1</span>\n    image_hide = rgb2gray(image_hide);\n<span class=\"hljs-keyword\">end</span>\ncount=<span class=\"hljs-number\">1</span>;\nbitseq=<span class=\"hljs-string\">&#x27;&#x27;</span>;\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-number\">1</span>:rows\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">j</span>=<span class=\"hljs-number\">1</span>:columns\n        <span class=\"hljs-comment\">%For all the characters in the message</span>\n        <span class=\"hljs-keyword\">if</span> count&lt;=len\n            \n            <span class=\"hljs-comment\">%Retrieve the LSB of the intensity level of the pixel</span>\n            LSB=<span class=\"hljs-built_in\">mod</span>(image_hide(<span class=\"hljs-built_in\">i</span>,<span class=\"hljs-built_in\">j</span>),<span class=\"hljs-number\">2</span>);\n            bitseq(count,<span class=\"hljs-number\">1</span>) = LSB;\n            count=count+<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">%Converting the bit sequence into the original message</span>\nweights = [ <span class=\"hljs-number\">128</span> <span class=\"hljs-number\">64</span> <span class=\"hljs-number\">32</span> <span class=\"hljs-number\">16</span> <span class=\"hljs-number\">8</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> ]; \n\n<span class=\"hljs-comment\">% elements are taken column wise from bitseq, each char has 8 bits so 8</span>\n<span class=\"hljs-comment\">% rows</span>\nmessage_matrix = <span class=\"hljs-built_in\">reshape</span>(bitseq,<span class=\"hljs-number\">8</span>,len/<span class=\"hljs-number\">8</span>);\noriginal_message = char(weights*message_matrix);\n<span class=\"hljs-built_in\">disp</span>([<span class=\"hljs-string\">&#x27;The original message is: &#x27;</span>,original_message]);"
    }
  },
  "contributors": [
    {
      "name": "Navkiran",
      "email": "singh.navkiran1515@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
