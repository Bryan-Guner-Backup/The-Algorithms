{
  "slug": "greedy-best-first",
  "name": "Greedy Best First",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/greedy_best_first.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/greedy_best_first.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://en.wikipedia.org/wiki/Best-first_search#Greedy_BFS\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Optional</span>\n\nPath = <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]]\n\ngrid = [\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],  <span class=\"hljs-comment\"># 0 are free path whereas 1&#x27;s are obstacles</span>\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n    [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>],\n]\n\ndelta = ([-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>])  <span class=\"hljs-comment\"># up, left, down, right</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; k = Node(0, 0, 4, 5, 0, None)\n    &gt;&gt;&gt; k.calculate_heuristic()\n    9\n    &gt;&gt;&gt; n = Node(1, 4, 3, 4, 2, None)\n    &gt;&gt;&gt; n.calculate_heuristic()\n    2\n    &gt;&gt;&gt; l = [k, n]\n    &gt;&gt;&gt; n == l[0]\n    False\n    &gt;&gt;&gt; l.sort()\n    &gt;&gt;&gt; n == l[0]\n    True\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">\n        self,\n        pos_x: <span class=\"hljs-built_in\">int</span>,\n        pos_y: <span class=\"hljs-built_in\">int</span>,\n        goal_x: <span class=\"hljs-built_in\">int</span>,\n        goal_y: <span class=\"hljs-built_in\">int</span>,\n        g_cost: <span class=\"hljs-built_in\">float</span>,\n        parent: <span class=\"hljs-type\">Optional</span>[Node],\n    </span>):\n        self.pos_x = pos_x\n        self.pos_y = pos_y\n        self.pos = (pos_y, pos_x)\n        self.goal_x = goal_x\n        self.goal_y = goal_y\n        self.g_cost = g_cost\n        self.parent = parent\n        self.f_cost = self.calculate_heuristic()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_heuristic</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        The heuristic here is the Manhattan Distance\n        Could elaborate to offer more than one choice\n        &quot;&quot;&quot;</span>\n        dy = <span class=\"hljs-built_in\">abs</span>(self.pos_x - self.goal_x)\n        dx = <span class=\"hljs-built_in\">abs</span>(self.pos_y - self.goal_y)\n        <span class=\"hljs-keyword\">return</span> dx + dy\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__lt__</span>(<span class=\"hljs-params\">self, other</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-keyword\">return</span> self.f_cost &lt; other.f_cost\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GreedyBestFirst</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; gbf = GreedyBestFirst((0, 0), (len(grid) - 1, len(grid[0]) - 1))\n    &gt;&gt;&gt; [x.pos for x in gbf.get_successors(gbf.start)]\n    [(1, 0), (0, 1)]\n    &gt;&gt;&gt; (gbf.start.pos_y + delta[3][0], gbf.start.pos_x + delta[3][1])\n    (0, 1)\n    &gt;&gt;&gt; (gbf.start.pos_y + delta[2][0], gbf.start.pos_x + delta[2][1])\n    (1, 0)\n    &gt;&gt;&gt; gbf.retrace_path(gbf.start)\n    [(0, 0)]\n    &gt;&gt;&gt; gbf.search()  # doctest: +NORMALIZE_WHITESPACE\n    [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (6, 1),\n     (6, 2), (6, 3), (5, 3), (5, 4), (5, 5), (6, 5), (6, 6)]\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, start: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>], goal: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]</span>):\n        self.start = Node(start[<span class=\"hljs-number\">1</span>], start[<span class=\"hljs-number\">0</span>], goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">None</span>)\n        self.target = Node(goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], goal[<span class=\"hljs-number\">1</span>], goal[<span class=\"hljs-number\">0</span>], <span class=\"hljs-number\">99999</span>, <span class=\"hljs-literal\">None</span>)\n\n        self.open_nodes = [self.start]\n        self.closed_nodes: <span class=\"hljs-built_in\">list</span>[Node] = []\n\n        self.reached = <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Optional</span>[Path]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Search for the path,\n        if a path is not found, only the starting position is returned\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">while</span> self.open_nodes:\n            <span class=\"hljs-comment\"># Open Nodes are sorted using __lt__</span>\n            self.open_nodes.sort()\n            current_node = self.open_nodes.pop(<span class=\"hljs-number\">0</span>)\n\n            <span class=\"hljs-keyword\">if</span> current_node.pos == self.target.pos:\n                self.reached = <span class=\"hljs-literal\">True</span>\n                <span class=\"hljs-keyword\">return</span> self.retrace_path(current_node)\n\n            self.closed_nodes.append(current_node)\n            successors = self.get_successors(current_node)\n\n            <span class=\"hljs-keyword\">for</span> child_node <span class=\"hljs-keyword\">in</span> successors:\n                <span class=\"hljs-keyword\">if</span> child_node <span class=\"hljs-keyword\">in</span> self.closed_nodes:\n                    <span class=\"hljs-keyword\">continue</span>\n\n                <span class=\"hljs-keyword\">if</span> child_node <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.open_nodes:\n                    self.open_nodes.append(child_node)\n                <span class=\"hljs-keyword\">else</span>:\n                    <span class=\"hljs-comment\"># retrieve the best current path</span>\n                    better_node = self.open_nodes.pop(self.open_nodes.index(child_node))\n\n                    <span class=\"hljs-keyword\">if</span> child_node.g_cost &lt; better_node.g_cost:\n                        self.open_nodes.append(child_node)\n                    <span class=\"hljs-keyword\">else</span>:\n                        self.open_nodes.append(better_node)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.reached:\n            <span class=\"hljs-keyword\">return</span> [self.start.pos]\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_successors</span>(<span class=\"hljs-params\">self, parent: Node</span>) -&gt; <span class=\"hljs-built_in\">list</span>[Node]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns a list of successors (both in the grid and free spaces)\n        &quot;&quot;&quot;</span>\n        successors = []\n        <span class=\"hljs-keyword\">for</span> action <span class=\"hljs-keyword\">in</span> delta:\n            pos_x = parent.pos_x + action[<span class=\"hljs-number\">1</span>]\n            pos_y = parent.pos_y + action[<span class=\"hljs-number\">0</span>]\n\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (<span class=\"hljs-number\">0</span> &lt;= pos_x &lt;= <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= pos_y &lt;= <span class=\"hljs-built_in\">len</span>(grid) - <span class=\"hljs-number\">1</span>):\n                <span class=\"hljs-keyword\">continue</span>\n\n            <span class=\"hljs-keyword\">if</span> grid[pos_y][pos_x] != <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">continue</span>\n\n            successors.append(\n                Node(\n                    pos_x,\n                    pos_y,\n                    self.target.pos_y,\n                    self.target.pos_x,\n                    parent.g_cost + <span class=\"hljs-number\">1</span>,\n                    parent,\n                )\n            )\n        <span class=\"hljs-keyword\">return</span> successors\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">retrace_path</span>(<span class=\"hljs-params\">self, node: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; Path:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Retrace the path from parents to parents until start node\n        &quot;&quot;&quot;</span>\n        current_node = node\n        path = []\n        <span class=\"hljs-keyword\">while</span> current_node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            path.append((current_node.pos_y, current_node.pos_x))\n            current_node = current_node.parent\n        path.reverse()\n        <span class=\"hljs-keyword\">return</span> path\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    init = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n    goal = (<span class=\"hljs-built_in\">len</span>(grid) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(grid[<span class=\"hljs-number\">0</span>]) - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> grid:\n        <span class=\"hljs-built_in\">print</span>(elem)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;------&quot;</span>)\n\n    greedy_bf = GreedyBestFirst(init, goal)\n    path = greedy_bf.search()\n    <span class=\"hljs-keyword\">if</span> path:\n        <span class=\"hljs-keyword\">for</span> pos_x, pos_y <span class=\"hljs-keyword\">in</span> path:\n            grid[pos_x][pos_y] = <span class=\"hljs-number\">2</span>\n\n        <span class=\"hljs-keyword\">for</span> elem <span class=\"hljs-keyword\">in</span> grid:\n            <span class=\"hljs-built_in\">print</span>(elem)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "Erwin Lejeune",
      "email": "erwin.lejeune15@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
