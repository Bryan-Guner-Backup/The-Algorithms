{
  "slug": "articulation-points",
  "name": "Articulation Points",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/articulation_points.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/articulation_points.py",
      "code": "<span class=\"hljs-comment\"># Finding Articulation Points in Undirected Graph</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">computeAP</span>(<span class=\"hljs-params\">l</span>):  <span class=\"hljs-comment\"># noqa: E741</span>\n    n = <span class=\"hljs-built_in\">len</span>(l)\n    outEdgeCount = <span class=\"hljs-number\">0</span>\n    low = [<span class=\"hljs-number\">0</span>] * n\n    visited = [<span class=\"hljs-literal\">False</span>] * n\n    isArt = [<span class=\"hljs-literal\">False</span>] * n\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">root, at, parent, outEdgeCount</span>):\n        <span class=\"hljs-keyword\">if</span> parent == root:\n            outEdgeCount += <span class=\"hljs-number\">1</span>\n        visited[at] = <span class=\"hljs-literal\">True</span>\n        low[at] = at\n\n        <span class=\"hljs-keyword\">for</span> to <span class=\"hljs-keyword\">in</span> l[at]:\n            <span class=\"hljs-keyword\">if</span> to == parent:\n                <span class=\"hljs-keyword\">pass</span>\n            <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-keyword\">not</span> visited[to]:\n                outEdgeCount = dfs(root, to, at, outEdgeCount)\n                low[at] = <span class=\"hljs-built_in\">min</span>(low[at], low[to])\n\n                <span class=\"hljs-comment\"># AP found via bridge</span>\n                <span class=\"hljs-keyword\">if</span> at &lt; low[to]:\n                    isArt[at] = <span class=\"hljs-literal\">True</span>\n                <span class=\"hljs-comment\"># AP found via cycle</span>\n                <span class=\"hljs-keyword\">if</span> at == low[to]:\n                    isArt[at] = <span class=\"hljs-literal\">True</span>\n            <span class=\"hljs-keyword\">else</span>:\n                low[at] = <span class=\"hljs-built_in\">min</span>(low[at], to)\n        <span class=\"hljs-keyword\">return</span> outEdgeCount\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> visited[i]:\n            outEdgeCount = <span class=\"hljs-number\">0</span>\n            outEdgeCount = dfs(i, i, -<span class=\"hljs-number\">1</span>, outEdgeCount)\n            isArt[i] = outEdgeCount &gt; <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(isArt)):\n        <span class=\"hljs-keyword\">if</span> isArt[x] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\n            <span class=\"hljs-built_in\">print</span>(x)\n\n\n<span class=\"hljs-comment\"># Adjacency list of graph</span>\ndata = {\n    <span class=\"hljs-number\">0</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>],\n    <span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>],\n    <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>],\n    <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>],\n    <span class=\"hljs-number\">4</span>: [<span class=\"hljs-number\">3</span>],\n    <span class=\"hljs-number\">5</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-number\">6</span>: [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>],\n    <span class=\"hljs-number\">7</span>: [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>],\n    <span class=\"hljs-number\">8</span>: [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>],\n}\ncomputeAP(data)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Farhan",
      "email": "farhankasmani956@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
