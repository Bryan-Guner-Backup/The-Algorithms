{
  "slug": "circularbuffer",
  "name": "CircularBuffer",
  "categories": ["datastructures", "buffers"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Buffers/CircularBuffer.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Buffers/CircularBuffer.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Buffers;\n\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.atomic.AtomicInteger;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularBuffer</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">char</span>[] _buffer;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> _buffer_size;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">_write_index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">_read_index</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">AtomicInteger</span> <span class=\"hljs-variable\">_readable_data</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicInteger</span>(<span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CircularBuffer</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> buffer_size)</span> {\n    <span class=\"hljs-keyword\">if</span> (!IsPowerOfTwo(buffer_size)) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>();\n    }\n    <span class=\"hljs-built_in\">this</span>._buffer_size = buffer_size;\n    _buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">char</span>[buffer_size];\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">IsPowerOfTwo</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> {\n    <span class=\"hljs-keyword\">return</span> (i &amp; (i - <span class=\"hljs-number\">1</span>)) == <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getTrueIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> {\n    <span class=\"hljs-keyword\">return</span> i % _buffer_size;\n  }\n\n  <span class=\"hljs-keyword\">public</span> Character <span class=\"hljs-title function_\">readOutChar</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">Character</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n\n    <span class=\"hljs-comment\">// if we have data to read</span>\n    <span class=\"hljs-keyword\">if</span> (_readable_data.get() &gt; <span class=\"hljs-number\">0</span>) {\n\n      result = Character.valueOf(_buffer[getTrueIndex(_read_index)]);\n      _readable_data.decrementAndGet();\n      _read_index++;\n    }\n\n    <span class=\"hljs-keyword\">return</span> result;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">writeToCharBuffer</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> c)</span> {\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n\n    <span class=\"hljs-comment\">// if we can write to the buffer</span>\n    <span class=\"hljs-keyword\">if</span> (_readable_data.get() &lt; _buffer_size) {\n      <span class=\"hljs-comment\">// write to buffer</span>\n      _buffer[getTrueIndex(_write_index)] = c;\n      _readable_data.incrementAndGet();\n      _write_index++;\n      result = <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> result;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestWriteWorker</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> {\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">_alphabet</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span>;\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">_random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n    CircularBuffer _buffer;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TestWriteWorker</span><span class=\"hljs-params\">(CircularBuffer cb)</span> {\n      <span class=\"hljs-built_in\">this</span>._buffer = cb;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">getRandomChar</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> _alphabet.charAt(_random.nextInt(_alphabet.length()));\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">while</span> (!Thread.interrupted()) {\n        <span class=\"hljs-keyword\">if</span> (!_buffer.writeToCharBuffer(getRandomChar())) {\n          Thread.yield();\n          <span class=\"hljs-keyword\">try</span> {\n            Thread.sleep(<span class=\"hljs-number\">10</span>);\n          } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n            <span class=\"hljs-keyword\">return</span>;\n          }\n        }\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestReadWorker</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Runnable</span> {\n    CircularBuffer _buffer;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TestReadWorker</span><span class=\"hljs-params\">(CircularBuffer cb)</span> {\n      <span class=\"hljs-built_in\">this</span>._buffer = cb;\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Printing Buffer:&quot;</span>);\n      <span class=\"hljs-keyword\">while</span> (!Thread.interrupted()) {\n        <span class=\"hljs-type\">Character</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> _buffer.readOutChar();\n        <span class=\"hljs-keyword\">if</span> (c != <span class=\"hljs-literal\">null</span>) {\n          System.out.print(c.charValue());\n        } <span class=\"hljs-keyword\">else</span> {\n          Thread.yield();\n          <span class=\"hljs-keyword\">try</span> {\n            Thread.sleep(<span class=\"hljs-number\">10</span>);\n          } <span class=\"hljs-keyword\">catch</span> (InterruptedException e) {\n            System.out.println();\n            <span class=\"hljs-keyword\">return</span>;\n          }\n        }\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">buffer_size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1024</span>;\n    <span class=\"hljs-comment\">// create circular buffer</span>\n    <span class=\"hljs-type\">CircularBuffer</span> <span class=\"hljs-variable\">cb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CircularBuffer</span>(buffer_size);\n\n    <span class=\"hljs-comment\">// create threads that read and write the buffer.</span>\n    <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">write_thread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestWriteWorker</span>(cb));\n    <span class=\"hljs-type\">Thread</span> <span class=\"hljs-variable\">read_thread</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thread</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TestReadWorker</span>(cb));\n    read_thread.start();\n    write_thread.start();\n\n    <span class=\"hljs-comment\">// wait some amount of time</span>\n    Thread.sleep(<span class=\"hljs-number\">10000</span>);\n\n    <span class=\"hljs-comment\">// interrupt threads and exit</span>\n    write_thread.interrupt();\n    read_thread.interrupt();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
