{
  "slug": "selection-sort-recursive",
  "name": "Selection Sort Recursive",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting/selection_sort_recursive.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/selection_sort_recursive.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [Dhruv Pasricha](https://github.com/DhruvPasricha)\n * @brief [Selection Sort](https://en.wikipedia.org/wiki/Selection_sort)\n * implementation using recursion.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>     <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>      <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>     <span class=\"hljs-comment\">/// for dynamic memory allocation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span>       <span class=\"hljs-comment\">/// for random numbers generation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span>   <span class=\"hljs-comment\">/// for uint8_t, int8_t</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Swapped two numbers using pointer\n * @param first pointer of first number\n * @param second pointer of second number\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> *first, <span class=\"hljs-type\">int8_t</span> *second)</span>\n{\n    <span class=\"hljs-type\">int8_t</span> temp = *first;\n    *first = *second;\n    *second = temp;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Returns the index having minimum value using recursion\n * @param arr array to be sorted\n * @param size size of array\n * @return min_index index of an element having a minimum value\n*/</span>\n<span class=\"hljs-type\">uint8_t</span> <span class=\"hljs-title function_\">findIndex</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int8_t</span> *arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint8_t</span> size)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">// marking recursive call to reach starting element</span>\n    <span class=\"hljs-type\">uint8_t</span> min_index = findIndex(arr, size - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-keyword\">if</span> (arr[size - <span class=\"hljs-number\">1</span>] &lt; arr[min_index])\n    {\n        min_index = size - <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> min_index;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Selection Sort algorithm implemented using recursion\n * @param arr array to be sorted\n * @param size size of the array\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">selectionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> *arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint8_t</span> size)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (size &lt;= <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">/* findIndex(arr, size) returned the index having min value*/</span>\n    <span class=\"hljs-type\">uint8_t</span> min_index = findIndex(arr, size);\n    <span class=\"hljs-comment\">/* arr[min_index] is the minimum value in the array*/</span>\n\n    <span class=\"hljs-keyword\">if</span> (min_index != <span class=\"hljs-number\">0</span>)\n    {\n        swap(&amp;arr[<span class=\"hljs-number\">0</span>], &amp;arr[min_index]);\n    }\n\n    <span class=\"hljs-comment\">/*sorted the remaining array recursively*/</span>\n    selectionSort(arr + <span class=\"hljs-number\">1</span>, size - <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint8_t</span> size = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-type\">int8_t</span> *arr = (<span class=\"hljs-type\">int8_t</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int8_t</span>));\n\n    <span class=\"hljs-comment\">/* generate size random numbers from 0 to 100 */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        arr[i] = rand() % <span class=\"hljs-number\">100</span>;\n    }\n    selectionSort(arr, size);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; ++i)\n    {\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-built_in\">free</span>(arr);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\n\n    test();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "DhruvPasricha",
      "email": "dhruvpasricha0002@gmail.com",
      "commits": 1
    },
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 5
    },
    {
      "name": "DhruvPasricha",
      "email": "78498002+DhruvPasricha@users.noreply.github.com",
      "commits": 23
    }
  ],
  "explanationUrl": {}
}
