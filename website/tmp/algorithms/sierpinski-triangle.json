{
  "slug": "sierpinski-triangle",
  "name": "Sierpinski Triangle",
  "categories": ["fractals"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "fractals/sierpinski_triangle.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/fractals/sierpinski_triangle.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/python</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;Author Anurag Kumar | anuragkumarak95@gmail.com | git/anuragkumarak95\n\nSimple example of Fractal generation using recursive function.\n\nWhat is Sierpinski Triangle?\n&gt;&gt;The Sierpinski triangle (also with the original orthography Sierpinski), also called\nthe Sierpinski gasket or the Sierpinski Sieve, is a fractal and attractive fixed set\nwith the overall shape of an equilateral triangle, subdivided recursively into smaller\nequilateral triangles. Originally constructed as a curve, this is one of the basic\nexamples of self-similar sets, i.e., it is a mathematically generated pattern that can\nbe reproducible at any magnification or reduction. It is named after the Polish\nmathematician Wac≈Çaw Sierpinski, but appeared as a decorative pattern many centuries\nprior to the work of Sierpinski.\n\nRequirements(pip):\n  - turtle\n\nPython:\n  - 2.6\n\nUsage:\n  - $python sierpinski_triangle.py &lt;int:depth_for_fractal&gt;\n\nCredits: This code was written by editing the code from\nhttp://www.riannetrujillo.com/blog/python-fractal/\n\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">import</span> turtle\n\nPROGNAME = <span class=\"hljs-string\">&quot;Sierpinski Triangle&quot;</span>\n\npoints = [[-<span class=\"hljs-number\">175</span>, -<span class=\"hljs-number\">125</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">175</span>], [<span class=\"hljs-number\">175</span>, -<span class=\"hljs-number\">125</span>]]  <span class=\"hljs-comment\"># size of triangle</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getMid</span>(<span class=\"hljs-params\">p1, p2</span>):\n    <span class=\"hljs-keyword\">return</span> ((p1[<span class=\"hljs-number\">0</span>] + p2[<span class=\"hljs-number\">0</span>]) / <span class=\"hljs-number\">2</span>, (p1[<span class=\"hljs-number\">1</span>] + p2[<span class=\"hljs-number\">1</span>]) / <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># find midpoint</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">triangle</span>(<span class=\"hljs-params\">points, depth</span>):\n\n    myPen.up()\n    myPen.goto(points[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>])\n    myPen.down()\n    myPen.goto(points[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>])\n    myPen.goto(points[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">1</span>])\n    myPen.goto(points[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>])\n\n    <span class=\"hljs-keyword\">if</span> depth &gt; <span class=\"hljs-number\">0</span>:\n        triangle(\n            [points[<span class=\"hljs-number\">0</span>], getMid(points[<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">1</span>]), getMid(points[<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">2</span>])],\n            depth - <span class=\"hljs-number\">1</span>,\n        )\n        triangle(\n            [points[<span class=\"hljs-number\">1</span>], getMid(points[<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">1</span>]), getMid(points[<span class=\"hljs-number\">1</span>], points[<span class=\"hljs-number\">2</span>])],\n            depth - <span class=\"hljs-number\">1</span>,\n        )\n        triangle(\n            [points[<span class=\"hljs-number\">2</span>], getMid(points[<span class=\"hljs-number\">2</span>], points[<span class=\"hljs-number\">1</span>]), getMid(points[<span class=\"hljs-number\">0</span>], points[<span class=\"hljs-number\">2</span>])],\n            depth - <span class=\"hljs-number\">1</span>,\n        )\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sys.argv) != <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">&quot;right format for using this script: &quot;</span>\n            <span class=\"hljs-string\">&quot;$python fractals.py &lt;int:depth_for_fractal&gt;&quot;</span>\n        )\n    myPen = turtle.Turtle()\n    myPen.ht()\n    myPen.speed(<span class=\"hljs-number\">5</span>)\n    myPen.pencolor(<span class=\"hljs-string\">&quot;red&quot;</span>)\n    triangle(points, <span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">1</span>]))\n"
    }
  },
  "contributors": [
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Lorenz Nickel",
      "email": "lorenz.nickel@gmx.net",
      "commits": 1
    },
    {
      "name": "Anurag Kumar",
      "email": "anuragkumarak95@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
