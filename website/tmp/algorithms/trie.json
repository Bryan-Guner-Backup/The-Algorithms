{
  "slug": "trie",
  "name": "Trie",
  "categories": ["datastructures", "trie"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/trie/trie.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/trie/trie.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nA Trie/Prefix Tree is a kind of search tree used to provide quick lookup\nof words/patterns in a set of words. A basic Trie however has O(n^2) space complexity\nmaking it impractical in practice. It however provides O(max(search_string, length of\nlongest word)) lookup time making it an optimal approach when space is not an issue.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TrieNode</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.nodes = <span class=\"hljs-built_in\">dict</span>()  <span class=\"hljs-comment\"># Mapping from char to TrieNode</span>\n        self.is_leaf = <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_many</span>(<span class=\"hljs-params\">self, words: [<span class=\"hljs-built_in\">str</span>]</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Inserts a list of words into the Trie\n        :param words: list of string words\n        :return: None\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> words:\n            self.insert(word)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, word: <span class=\"hljs-built_in\">str</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Inserts a word into the Trie\n        :param word: word to be inserted\n        :return: None\n        &quot;&quot;&quot;</span>\n        curr = self\n        <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> word:\n            <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> curr.nodes:\n                curr.nodes[char] = TrieNode()\n            curr = curr.nodes[char]\n        curr.is_leaf = <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find</span>(<span class=\"hljs-params\">self, word: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Tries to find word in a Trie\n        :param word: word to look for\n        :return: Returns True if word is found, False otherwise\n        &quot;&quot;&quot;</span>\n        curr = self\n        <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> word:\n            <span class=\"hljs-keyword\">if</span> char <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> curr.nodes:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n            curr = curr.nodes[char]\n        <span class=\"hljs-keyword\">return</span> curr.is_leaf\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">self, word: <span class=\"hljs-built_in\">str</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Deletes a word in a Trie\n        :param word: word to delete\n        :return: None\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_delete</span>(<span class=\"hljs-params\">curr: TrieNode, word: <span class=\"hljs-built_in\">str</span>, index: <span class=\"hljs-built_in\">int</span></span>):\n            <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-built_in\">len</span>(word):\n                <span class=\"hljs-comment\"># If word does not exist</span>\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> curr.is_leaf:\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n                curr.is_leaf = <span class=\"hljs-literal\">False</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(curr.nodes) == <span class=\"hljs-number\">0</span>\n            char = word[index]\n            char_node = curr.nodes.get(char)\n            <span class=\"hljs-comment\"># If char not in current trie node</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> char_node:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n            <span class=\"hljs-comment\"># Flag to check if node can be deleted</span>\n            delete_curr = _delete(char_node, word, index + <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">if</span> delete_curr:\n                <span class=\"hljs-keyword\">del</span> curr.nodes[char]\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(curr.nodes) == <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">return</span> delete_curr\n\n        _delete(self, word, <span class=\"hljs-number\">0</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_words</span>(<span class=\"hljs-params\">node: TrieNode, word: <span class=\"hljs-built_in\">str</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Prints all the words in a Trie\n    :param node: root node of Trie\n    :param word: Word variable should be empty at start\n    :return: None\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> node.is_leaf:\n        <span class=\"hljs-built_in\">print</span>(word, end=<span class=\"hljs-string\">&quot; &quot;</span>)\n\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> node.nodes.items():\n        print_words(value, word + key)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_trie</span>():\n    words = <span class=\"hljs-string\">&quot;banana bananas bandana band apple all beast&quot;</span>.split()\n    root = TrieNode()\n    root.insert_many(words)\n    <span class=\"hljs-comment\"># print_words(root, &quot;&quot;)</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">all</span>(root.find(word) <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> words)\n    <span class=\"hljs-keyword\">assert</span> root.find(<span class=\"hljs-string\">&quot;banana&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> root.find(<span class=\"hljs-string\">&quot;bandanas&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> root.find(<span class=\"hljs-string\">&quot;apps&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> root.find(<span class=\"hljs-string\">&quot;apple&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> root.find(<span class=\"hljs-string\">&quot;all&quot;</span>)\n    root.delete(<span class=\"hljs-string\">&quot;all&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> root.find(<span class=\"hljs-string\">&quot;all&quot;</span>)\n    root.delete(<span class=\"hljs-string\">&quot;banana&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">not</span> root.find(<span class=\"hljs-string\">&quot;banana&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> root.find(<span class=\"hljs-string\">&quot;bananas&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_results</span>(<span class=\"hljs-params\">msg: <span class=\"hljs-built_in\">str</span>, passes: <span class=\"hljs-built_in\">bool</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">str</span>(msg), <span class=\"hljs-string\">&quot;works!&quot;</span> <span class=\"hljs-keyword\">if</span> passes <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;doesn&#x27;t work :(&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pytests</span>():\n    <span class=\"hljs-keyword\">assert</span> test_trie()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; pytests()\n    &quot;&quot;&quot;</span>\n    print_results(<span class=\"hljs-string\">&quot;Testing trie functionality&quot;</span>, test_trie())\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Data-Structures/Tree/Trie.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Tree/Trie.js",
      "code": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TrieNode</span> = <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">TrieNode</span> (key, parent) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">key</span> = key\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">count</span> = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">children</span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-literal\">null</span>)\n  <span class=\"hljs-keyword\">if</span> (parent === <span class=\"hljs-literal\">undefined</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parent</span> = <span class=\"hljs-literal\">null</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parent</span> = parent\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Trie</span> () {\n  <span class=\"hljs-comment\">// create only root with null key and parent</span>\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>)\n}\n\n<span class=\"hljs-comment\">// Recursively finds the occurence of all words in a given node</span>\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\">findAllWords</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">root, word, output</span>) {\n  <span class=\"hljs-keyword\">if</span> (root === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">if</span> (root.<span class=\"hljs-property\">count</span> &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> output === <span class=\"hljs-string\">&#x27;object&#x27;</span>) { output.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">word</span>: word, <span class=\"hljs-attr\">count</span>: root.<span class=\"hljs-property\">count</span> }) }\n  }\n  <span class=\"hljs-keyword\">let</span> key\n  <span class=\"hljs-keyword\">for</span> (key <span class=\"hljs-keyword\">in</span> root.<span class=\"hljs-property\">children</span>) {\n    word += key\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findAllWords</span>(root.<span class=\"hljs-property\">children</span>[key], word, output)\n    word = word.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>)\n  }\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">insert</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> word !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">if</span> (word === <span class=\"hljs-string\">&#x27;&#x27;</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-property\">count</span> += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span>\n  }\n  <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>\n  <span class=\"hljs-keyword\">const</span> len = word.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> i\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n    <span class=\"hljs-keyword\">if</span> (node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)] === <span class=\"hljs-literal\">undefined</span>) { node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TrieNode</span>(word.<span class=\"hljs-title function_\">charAt</span>(i), node) }\n    node = node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)]\n  }\n  node.<span class=\"hljs-property\">count</span> += <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">findPrefix</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> word !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>\n  <span class=\"hljs-keyword\">const</span> len = word.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> i\n  <span class=\"hljs-comment\">// After end of this loop node will be at desired prefix</span>\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n    <span class=\"hljs-keyword\">if</span> (node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)] === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// No such prefix exists</span>\n    node = node.<span class=\"hljs-property\">children</span>[word.<span class=\"hljs-title function_\">charAt</span>(i)]\n  }\n  <span class=\"hljs-keyword\">return</span> node\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">remove</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word, count</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> word !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> count !== <span class=\"hljs-string\">&#x27;number&#x27;</span>) count = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (count &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>\n\n  <span class=\"hljs-comment\">// for empty string just delete count of root</span>\n  <span class=\"hljs-keyword\">if</span> (word === <span class=\"hljs-string\">&#x27;&#x27;</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-property\">count</span> &gt;= count) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-property\">count</span> -= count\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>.<span class=\"hljs-property\">count</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">return</span>\n  }\n\n  <span class=\"hljs-keyword\">let</span> child = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">root</span>\n  <span class=\"hljs-keyword\">const</span> len = word.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> i, key\n  <span class=\"hljs-comment\">// child: node which is to be deleted</span>\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n    key = word.<span class=\"hljs-title function_\">charAt</span>(i)\n    <span class=\"hljs-keyword\">if</span> (child.<span class=\"hljs-property\">children</span>[key] === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span>\n    child = child.<span class=\"hljs-property\">children</span>[key]\n  }\n\n  <span class=\"hljs-comment\">// Delete no of occurences specified</span>\n  <span class=\"hljs-keyword\">if</span> (child.<span class=\"hljs-property\">count</span> &gt;= count) child.<span class=\"hljs-property\">count</span> -= count\n  <span class=\"hljs-keyword\">else</span> child.<span class=\"hljs-property\">count</span> = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\">// If some occurences are left we dont delete it or else</span>\n  <span class=\"hljs-comment\">// if the object forms some other objects prefix we dont delete it</span>\n  <span class=\"hljs-comment\">// For checking an empty object</span>\n  <span class=\"hljs-comment\">// https://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object</span>\n  <span class=\"hljs-keyword\">if</span> (child.<span class=\"hljs-property\">count</span> &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; (<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(child.<span class=\"hljs-property\">children</span>).<span class=\"hljs-property\">length</span> &amp;&amp; child.<span class=\"hljs-property\">childre</span>.<span class=\"hljs-property\">constructor</span> === <span class=\"hljs-title class_\">Object</span>)) {\n    child.<span class=\"hljs-property\">parent</span>.<span class=\"hljs-property\">children</span>[child.<span class=\"hljs-property\">key</span>] = <span class=\"hljs-literal\">undefined</span>\n  }\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">findAllWords</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">prefix</span>) {\n  <span class=\"hljs-keyword\">const</span> output = []\n  <span class=\"hljs-comment\">// find the node with provided prefix</span>\n  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findPrefix</span>(prefix)\n  <span class=\"hljs-comment\">// No such prefix exists</span>\n  <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> output\n  <span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-title function_\">findAllWords</span>(node, prefix, output)\n  <span class=\"hljs-keyword\">return</span> output\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">contains</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-comment\">// find the node with given prefix</span>\n  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findPrefix</span>(word)\n  <span class=\"hljs-comment\">// No such word exists</span>\n  <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-literal\">null</span> || node.<span class=\"hljs-property\">count</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-title class_\">Trie</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">findOccurences</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-comment\">// find the node with given prefix</span>\n  <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findPrefix</span>(word)\n  <span class=\"hljs-comment\">// No such word exists</span>\n  <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">return</span> node.<span class=\"hljs-property\">count</span>\n};\n\n<span class=\"hljs-comment\">// To test</span>\n(<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">demo</span> () {\n  <span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Trie</span>()\n  x.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-string\">&#x27;sheldon&#x27;</span>)\n  x.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>)\n  x.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-string\">&#x27;anyword&#x27;</span>)\n  x.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-string\">&#x27;sheldoncooper&#x27;</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x.<span class=\"hljs-title function_\">findOccurences</span>(<span class=\"hljs-string\">&#x27;sheldon&#x27;</span>))\n  x.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">&#x27;anything&#x27;</span>)\n  x.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-string\">&#x27;sheldon&#x27;</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x.<span class=\"hljs-title function_\">findOccurences</span>(<span class=\"hljs-string\">&#x27;sheldon&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x.<span class=\"hljs-title function_\">findAllWords</span>(<span class=\"hljs-string\">&#x27;sheldon&#x27;</span>))\n  x.<span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-string\">&#x27;anything&#x27;</span>)\n  x.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-string\">&#x27;sheldoncooper&#x27;</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x.<span class=\"hljs-title function_\">contains</span>(<span class=\"hljs-string\">&#x27;sheldoncooper&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(x.<span class=\"hljs-title function_\">findAllWords</span>(<span class=\"hljs-string\">&#x27;sheldon&#x27;</span>))\n})()\n"
    },
    "c": {
      "dir": "data_structures/trie/trie.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/trie/trie.c",
      "code": "<span class=\"hljs-comment\">/*------------------Trie Data Structure----------------------------------*/</span>\n<span class=\"hljs-comment\">/*-------------Implimented for search a word in dictionary---------------*/</span>\n\n<span class=\"hljs-comment\">/*-----character - 97 used for get the character from the ASCII value-----*/</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ALPHABET_SIZE 26</span>\n\n<span class=\"hljs-comment\">/*--Node in the Trie--*/</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">TrieNode</span>\n{</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">TrieNode</span> *<span class=\"hljs-title\">children</span>[<span class=\"hljs-title\">ALPHABET_SIZE</span>];</span>\n    <span class=\"hljs-type\">char</span> character;\n    <span class=\"hljs-type\">bool</span> isEndOfWord;\n\n} TrieNode;\n\n<span class=\"hljs-comment\">/*--Create new node--*/</span>\nTrieNode *<span class=\"hljs-title function_\">createTrieNode</span><span class=\"hljs-params\">()</span>\n{\n    TrieNode *node;\n    node = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(TrieNode));\n    node-&gt;isEndOfWord = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (i &lt; ALPHABET_SIZE)\n    {\n        node-&gt;children[i] = <span class=\"hljs-literal\">NULL</span>;\n        i++;\n    }\n    <span class=\"hljs-keyword\">return</span> node;\n}\n\n<span class=\"hljs-comment\">/*--Insert new word to Trie--*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(TrieNode *root, <span class=\"hljs-type\">char</span> *word)</span>\n{\n    <span class=\"hljs-comment\">/*----Addition of the word done by recurcively----*/</span>\n\n    <span class=\"hljs-comment\">// Check wheather word character pointer is NULL</span>\n    <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-built_in\">strlen</span>(word) - <span class=\"hljs-number\">1</span>) != <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-type\">char</span> character = *word;\n        <span class=\"hljs-keyword\">if</span> (root-&gt;children[character - <span class=\"hljs-number\">97</span>] == <span class=\"hljs-literal\">NULL</span>)\n        {\n            TrieNode *node = <span class=\"hljs-literal\">NULL</span>;\n            node = createTrieNode();\n            node-&gt;character = character;\n            root-&gt;children[character - <span class=\"hljs-number\">97</span>] = node;\n        }\n        word++;\n        insert(root-&gt;children[character - <span class=\"hljs-number\">97</span>], word);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        root-&gt;isEndOfWord = <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">return</span>;\n}\n\n<span class=\"hljs-comment\">/*--Search a word in the Trie--*/</span>\nTrieNode *<span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(TrieNode *root, <span class=\"hljs-type\">char</span> *word)</span>\n{\n    TrieNode *temp;\n    <span class=\"hljs-keyword\">while</span> (*word != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)\n    {\n        <span class=\"hljs-type\">char</span> character = *word;\n        <span class=\"hljs-keyword\">if</span> (root-&gt;children[character - <span class=\"hljs-number\">97</span>] != <span class=\"hljs-literal\">NULL</span>)\n        {\n            temp = root-&gt;children[character - <span class=\"hljs-number\">97</span>];\n            word++;\n            root = temp;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No possible words!!\\n&quot;</span>);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> root;\n}\n\n<span class=\"hljs-comment\">/*---Print a word in the array--*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> chars[], <span class=\"hljs-type\">int</span> len)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>, chars[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/*---Return all the related words------*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printPathsRecur</span><span class=\"hljs-params\">(TrieNode *node, <span class=\"hljs-type\">char</span> prefix[], <span class=\"hljs-type\">int</span> filledLen)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span>;\n\n    prefix[filledLen] = node-&gt;character;\n    filledLen++;\n\n    <span class=\"hljs-keyword\">if</span> (node-&gt;isEndOfWord)\n    {\n        printArray(prefix, filledLen);\n    }\n\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; ALPHABET_SIZE; i++)\n    {\n        printPathsRecur(node-&gt;children[i], prefix, filledLen);\n    }\n}\n\n<span class=\"hljs-comment\">/*--Travel through the Trie and return words from it--*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">traverse</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> prefix[], TrieNode *root)</span>\n{\n    TrieNode *temp = <span class=\"hljs-literal\">NULL</span>;\n    temp = search(root, prefix);\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (prefix[j] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)\n    {\n        j++;\n    }\n    printPathsRecur(temp, prefix, j - <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">/*------Demonstrate purposes uses text file called dictionary -------*/</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NUMBER_OF_WORDS (354935)</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INPUT_WORD_SIZE (100)</span>\n\n<span class=\"hljs-comment\">/*----Get input from the user------*/</span>\n<span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">receiveInput</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span>\n{\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%99s&quot;</span>, s);\n    <span class=\"hljs-keyword\">return</span> s;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">// Read the file dictionary</span>\n    <span class=\"hljs-type\">int</span> word_count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">char</span> *words[NUMBER_OF_WORDS];\n    FILE *fp = fopen(<span class=\"hljs-string\">&quot;dictionary.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>);\n\n    <span class=\"hljs-keyword\">if</span> (fp == <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Error while opening dictionary file&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n    }\n\n    words[word_count] = <span class=\"hljs-built_in\">malloc</span>(INPUT_WORD_SIZE);\n\n    <span class=\"hljs-keyword\">while</span> (fgets(words[word_count], INPUT_WORD_SIZE, fp))\n    {\n        word_count++;\n        words[word_count] = <span class=\"hljs-built_in\">malloc</span>(INPUT_WORD_SIZE);\n    }\n\n    <span class=\"hljs-comment\">// Push the words in to Trie</span>\n    TrieNode *root = <span class=\"hljs-literal\">NULL</span>;\n    root = createTrieNode();\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NUMBER_OF_WORDS; i++)\n    {\n        insert(root, words[i]);\n    }\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter keyword: &quot;</span>);\n        <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">100</span>];\n        receiveInput(str);\n        <span class=\"hljs-built_in\">printf</span>(\n            <span class=\"hljs-string\">&quot;\\n==========================================================\\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n********************* Possible Words ********************\\n&quot;</span>);\n\n        <span class=\"hljs-comment\">// Find the word through the Trie</span>\n        traverse(str, root);\n\n        <span class=\"hljs-built_in\">printf</span>(\n            <span class=\"hljs-string\">&quot;\\n==========================================================\\n&quot;</span>);\n    }\n}\n"
    },
    "go": {
      "dir": "datastructures/trie/trie.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/datastructures/trie/trie.go",
      "code": "<span class=\"hljs-comment\">// Package trie provides Trie data structures in golang.</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Wikipedia: https://en.wikipedia.org/wiki/Trie</span>\n<span class=\"hljs-keyword\">package</span> trie\n\n<span class=\"hljs-comment\">// Node represents each node in Trie.</span>\n<span class=\"hljs-keyword\">type</span> Node <span class=\"hljs-keyword\">struct</span> {\n\tchildren <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">rune</span>]*Node <span class=\"hljs-comment\">// map children nodes</span>\n\tisLeaf   <span class=\"hljs-keyword\">bool</span>           <span class=\"hljs-comment\">// current node value</span>\n}\n\n<span class=\"hljs-comment\">// NewNode creates a new Trie node with initialized</span>\n<span class=\"hljs-comment\">// children map.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewNode</span><span class=\"hljs-params\">()</span> *<span class=\"hljs-title\">Node</span></span> {\n\tn := &amp;Node{}\n\tn.children = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">rune</span>]*Node)\n\tn.isLeaf = <span class=\"hljs-literal\">false</span>\n\t<span class=\"hljs-keyword\">return</span> n\n}\n\n<span class=\"hljs-comment\">// Insert inserts words at a Trie node.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span> <span class=\"hljs-title\">Insert</span><span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span></span> {\n\tcurr := n\n\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> s {\n\t\tnext, ok := curr.children[c]\n\t\t<span class=\"hljs-keyword\">if</span> !ok {\n\t\t\tnext = NewNode()\n\t\t\tcurr.children[c] = next\n\t\t}\n\t\tcurr = next\n\t}\n\tcurr.isLeaf = <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-comment\">// Find finds words at a Trie node.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(n *Node)</span> <span class=\"hljs-title\">Find</span><span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">bool</span></span> {\n\tcurr := n\n\t<span class=\"hljs-keyword\">for</span> _, c := <span class=\"hljs-keyword\">range</span> s {\n\t\tnext, ok := curr.children[c]\n\t\t<span class=\"hljs-keyword\">if</span> !ok {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t\t}\n\t\tcurr = next\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n"
    },
    "ruby": {
      "dir": "data_structures/tries/trie.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/tries/trie.rb",
      "code": "<span class=\"hljs-comment\"># A Trie (prefix tree) is a kind of search tree used to provide quick lookup</span>\n<span class=\"hljs-comment\"># of words/patterns in a set of words. A basic Trie however has O(n^2)</span>\n<span class=\"hljs-comment\"># space complexity making it impractical in practice.</span>\n<span class=\"hljs-comment\"># It however provides O(max(search_string, length of longest word))</span>\n<span class=\"hljs-comment\"># lookup time making it an optimal approach when space is not an issue.</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span></span>\n  <span class=\"hljs-keyword\">attr_reader</span>   <span class=\"hljs-symbol\">:value</span>, <span class=\"hljs-symbol\">:next</span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:word</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(value)</span></span>\n    <span class=\"hljs-variable\">@value</span> = value\n    <span class=\"hljs-variable\">@word</span>  = <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-variable\">@next</span>  = []\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Trie</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span></span>\n    <span class=\"hljs-variable\">@root</span> = Node.new(<span class=\"hljs-string\">&#x27;*&#x27;</span>)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_many</span><span class=\"hljs-params\">(word)</span></span>\n    letters = word.chars\n    base    = <span class=\"hljs-variable\">@root</span>\n\n    letters.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|letter|</span>\n      base = insert(letter, base.<span class=\"hljs-keyword\">next</span>)\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">include?</span><span class=\"hljs-params\">(word)</span></span>\n    letters = word.chars\n    base    = <span class=\"hljs-variable\">@root</span>\n\n    letters.all? <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|letter|</span>\n      base = find(letter, base.<span class=\"hljs-keyword\">next</span>)\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  private\n\n  <span class=\"hljs-comment\"># check if it already exists</span>\n  <span class=\"hljs-comment\"># if not add character to node</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(character, trie)</span></span>\n    found = trie.find <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|n|</span>\n      n.value == character\n    <span class=\"hljs-keyword\">end</span>\n\n    add_node(character, trie) <span class=\"hljs-keyword\">unless</span> found\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_node</span><span class=\"hljs-params\">(character, trie)</span></span>\n    Node.new(character).tap <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|new_node|</span>\n      trie &lt;&lt; new_node\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(character, trie)</span></span>\n    trie.find <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|n|</span>\n      n.value == character\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\ntrie = Trie.new\ntrie.insert_many(<span class=\"hljs-string\">&#x27;Dogs&#x27;</span>)\ntrie.insert_many(<span class=\"hljs-string\">&#x27;South&#x27;</span>)\ntrie.insert_many(<span class=\"hljs-string\">&#x27;Cape Town&#x27;</span>)\n\nputs trie.<span class=\"hljs-keyword\">include</span>?(<span class=\"hljs-string\">&#x27;Cape Town&#x27;</span>)\n<span class=\"hljs-comment\"># =&gt; true</span>\n\nputs trie.<span class=\"hljs-keyword\">include</span>?(<span class=\"hljs-string\">&#x27;not presented&#x27;</span>)\n<span class=\"hljs-comment\"># =&gt; false</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "lakhan_nad",
      "email": "lakhannad1999@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Ranadeep Biswas",
      "email": "ranadip.bswas@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sangeet K",
      "email": "sangeethk.137@gmail.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Javon Davis",
      "email": "JavonDavis@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Shashike Dissanayake",
      "email": "shashikedissanayake@gmail.com",
      "commits": 3
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
