{
  "slug": "line-segment-intersection",
  "name": "Line Segment Intersection",
  "categories": ["geometry"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "geometry/line_segment_intersection.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/geometry/line_segment_intersection.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief check whether two line segments intersect each other\n * or not.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Define a Point.\n */</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n    <span class=\"hljs-type\">int</span> x;  <span class=\"hljs-comment\">/// Point respect to x coordinate</span>\n    <span class=\"hljs-type\">int</span> y;  <span class=\"hljs-comment\">/// Point respect to y coordinate</span>\n};\n\n<span class=\"hljs-comment\">/**\n * intersect returns true if segments of two line intersects and\n * false if they do not. It calls the subroutines direction\n * which computes the orientation.\n */</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">SegmentIntersection</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">intersect</span><span class=\"hljs-params\">(Point first_point, Point second_point,\n                          Point third_point, Point forth_point)</span> </span>{\n        <span class=\"hljs-type\">int</span> direction1 = <span class=\"hljs-built_in\">direction</span>(third_point, forth_point, first_point);\n        <span class=\"hljs-type\">int</span> direction2 = <span class=\"hljs-built_in\">direction</span>(third_point, forth_point, second_point);\n        <span class=\"hljs-type\">int</span> direction3 = <span class=\"hljs-built_in\">direction</span>(first_point, second_point, third_point);\n        <span class=\"hljs-type\">int</span> direction4 = <span class=\"hljs-built_in\">direction</span>(first_point, second_point, forth_point);\n\n        <span class=\"hljs-keyword\">if</span> ((direction1 &lt; <span class=\"hljs-number\">0</span> || direction2 &gt; <span class=\"hljs-number\">0</span>) &amp;&amp;\n            (direction3 &lt; <span class=\"hljs-number\">0</span> || direction4 &gt; <span class=\"hljs-number\">0</span>))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (direction1 == <span class=\"hljs-number\">0</span> &amp;&amp;\n                 <span class=\"hljs-built_in\">on_segment</span>(third_point, forth_point, first_point))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (direction2 == <span class=\"hljs-number\">0</span> &amp;&amp;\n                 <span class=\"hljs-built_in\">on_segment</span>(third_point, forth_point, second_point))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (direction3 == <span class=\"hljs-number\">0</span> &amp;&amp;\n                 <span class=\"hljs-built_in\">on_segment</span>(first_point, second_point, third_point))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (direction3 == <span class=\"hljs-number\">0</span> &amp;&amp;\n                 <span class=\"hljs-built_in\">on_segment</span>(first_point, second_point, forth_point))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * We will find direction of line here respect to @first_point.\n     * Here @second_point and @third_point is first and second points\n     * of the line respectively. we want a method to determine which way a\n     * given angle these three points turns. If returned number is negative,\n     * then the angle is counter-clockwise. That means the line is going to\n     * right to left. We will fount angle as clockwise if the method returns\n     * positive number.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title\">direction</span><span class=\"hljs-params\">(Point first_point, Point second_point,\n                         Point third_point)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> ((third_point.x - first_point.x) *\n                (second_point.y - first_point.y)) -\n               ((second_point.x - first_point.x) *\n                (third_point.y - first_point.y));\n    }\n\n    <span class=\"hljs-comment\">/**\n     * This method determines whether a point known to be colinear\n     * with a segment lies on that segment.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">on_segment</span><span class=\"hljs-params\">(Point first_point, Point second_point,\n                           Point third_point)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (std::<span class=\"hljs-built_in\">min</span>(first_point.x, second_point.x) &lt;= third_point.x &amp;&amp;\n            third_point.x &lt;= std::<span class=\"hljs-built_in\">max</span>(first_point.x, second_point.x) &amp;&amp;\n            std::<span class=\"hljs-built_in\">min</span>(first_point.y, second_point.y) &lt;= third_point.y &amp;&amp;\n            third_point.y &lt;= std::<span class=\"hljs-built_in\">max</span>(first_point.y, second_point.y))\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n};\n\n<span class=\"hljs-comment\">/**\n * This is the main function to test whether the algorithm is\n * working well.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    SegmentIntersection segment;\n    Point first_point, second_point, third_point, forth_point;\n\n    std::cin &gt;&gt; first_point.x &gt;&gt; first_point.y;\n    std::cin &gt;&gt; second_point.x &gt;&gt; second_point.y;\n    std::cin &gt;&gt; third_point.x &gt;&gt; third_point.y;\n    std::cin &gt;&gt; forth_point.x &gt;&gt; forth_point.y;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, segment.<span class=\"hljs-built_in\">intersect</span>(first_point, second_point, third_point,\n                                   forth_point));\n    std::cout &lt;&lt; std::endl;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sajied Shah Yousuf",
      "email": "40203390+meSajied@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
