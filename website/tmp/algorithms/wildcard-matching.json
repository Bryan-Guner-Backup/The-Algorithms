{
  "slug": "wildcard-matching",
  "name": "Wildcard Matching",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "backtracking/wildcard_matching.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/wildcard_matching.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of the [Wildcard\n * Matching](https://www.geeksforgeeks.org/wildcard-pattern-matching/) problem.\n * @details\n * Given a matching string and a pattern, implement wildcard pattern\n * matching with support for `?` and `*`. `?` matches any single character.\n * `*` matches any sequence of characters (including the empty sequence).\n * The matching should cover the entire matching string (not partial). The task\n * is to determine if the pattern matches with the matching string\n * @author [Swastika Gupta](https://github.com/Swastyy)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n<span class=\"hljs-comment\">/**\n * @namespace wildcard_matching\n * @brief Functions for the [Wildcard\n * Matching](https://www.geeksforgeeks.org/wildcard-pattern-matching/) problem.\n */</span>\n<span class=\"hljs-keyword\">namespace</span> wildcard_matching {\n<span class=\"hljs-comment\">/**\n * @brief The main function implements if pattern can be matched with given\n * string\n * @param s is the given matching string\n * @param p is the given pattern\n * @param pos1 is the starting index\n * @param pos2 is the last index\n * @returns 1 if pattern matches with matching string otherwise 0\n */</span>\nstd::vector&lt;std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt;&gt; <span class=\"hljs-built_in\">dpTable</span>(<span class=\"hljs-number\">1000</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int64_t</span>&gt;(<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">-1</span>));\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">wildcard_matching</span><span class=\"hljs-params\">(std::string s, std::string p, <span class=\"hljs-type\">uint32_t</span> pos1,\n                       <span class=\"hljs-type\">uint32_t</span> pos2)</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> n = s.<span class=\"hljs-built_in\">length</span>();\n    <span class=\"hljs-type\">uint32_t</span> m = p.<span class=\"hljs-built_in\">length</span>();\n    <span class=\"hljs-comment\">// matching is successfull if both strings are done</span>\n    <span class=\"hljs-keyword\">if</span> (pos1 == n &amp;&amp; pos2 == m) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-comment\">// matching is unsuccessfull if pattern is not finished but matching string</span>\n    <span class=\"hljs-comment\">// is</span>\n    <span class=\"hljs-keyword\">if</span> (pos1 != n &amp;&amp; pos2 == m) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">// all the remaining characters of patterns must be * inorder to match with</span>\n    <span class=\"hljs-comment\">// finished string</span>\n    <span class=\"hljs-keyword\">if</span> (pos1 == n &amp;&amp; pos2 != m) {\n        <span class=\"hljs-keyword\">while</span> (pos2 &lt; m &amp;&amp; p[pos2] == <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n            pos2++;\n        }\n\n        <span class=\"hljs-keyword\">return</span> pos2 == m;\n    }\n\n    <span class=\"hljs-comment\">// if already calculted for these positions</span>\n    <span class=\"hljs-keyword\">if</span> (dpTable[pos1][pos2] != <span class=\"hljs-number\">-1</span>) {\n        <span class=\"hljs-keyword\">return</span> dpTable[pos1][pos2];\n    }\n\n    <span class=\"hljs-comment\">// if the characters are same just go ahead in both the string</span>\n    <span class=\"hljs-keyword\">if</span> (s[pos1] == p[pos2]) {\n        <span class=\"hljs-keyword\">return</span> dpTable[pos1][pos2] =\n                   <span class=\"hljs-built_in\">wildcard_matching</span>(s, p, pos1 + <span class=\"hljs-number\">1</span>, pos2 + <span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// can only single character</span>\n        <span class=\"hljs-keyword\">if</span> (p[pos2] == <span class=\"hljs-string\">&#x27;?&#x27;</span>) {\n            <span class=\"hljs-keyword\">return</span> dpTable[pos1][pos2] =\n                       <span class=\"hljs-built_in\">wildcard_matching</span>(s, p, pos1 + <span class=\"hljs-number\">1</span>, pos2 + <span class=\"hljs-number\">1</span>);\n        }\n        <span class=\"hljs-comment\">// have choice either to match one or more charcters</span>\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p[pos2] == <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n            <span class=\"hljs-keyword\">return</span> dpTable[pos1][pos2] =\n                       <span class=\"hljs-built_in\">wildcard_matching</span>(s, p, pos1, pos2 + <span class=\"hljs-number\">1</span>) ||\n                       <span class=\"hljs-built_in\">wildcard_matching</span>(s, p, pos1 + <span class=\"hljs-number\">1</span>, pos2);\n        }\n        <span class=\"hljs-comment\">// not possible to match</span>\n        <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> dpTable[pos1][pos2] = <span class=\"hljs-number\">0</span>;\n        }\n    }\n}\n\n}  <span class=\"hljs-comment\">// namespace wildcard_matching</span>\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 1st test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test &quot;</span>;\n    std::string matching1 = <span class=\"hljs-string\">&quot;baaabab&quot;</span>;\n    std::string pattern1 = <span class=\"hljs-string\">&quot;*****ba*****ab&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(backtracking::wildcard_matching::<span class=\"hljs-built_in\">wildcard_matching</span>(matching1,\n                                                              pattern1, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) ==\n           <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// here the pattern matches with given string</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 2nd test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test &quot;</span>;\n    std::string matching2 = <span class=\"hljs-string\">&quot;baaabab&quot;</span>;\n    std::string pattern2 = <span class=\"hljs-string\">&quot;ba*****ab&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(backtracking::wildcard_matching::<span class=\"hljs-built_in\">wildcard_matching</span>(matching2,\n                                                              pattern2, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) ==\n           <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// here the pattern matches with given string</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 3rd test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test &quot;</span>;\n    std::string matching3 = <span class=\"hljs-string\">&quot;baaabab&quot;</span>;\n    std::string pattern3 = <span class=\"hljs-string\">&quot;ba*ab&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(backtracking::wildcard_matching::<span class=\"hljs-built_in\">wildcard_matching</span>(matching3,\n                                                              pattern3, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) ==\n           <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// here the pattern matches with given string</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 4th test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4th test &quot;</span>;\n    std::string matching4 = <span class=\"hljs-string\">&quot;baaabab&quot;</span>;\n    std::string pattern4 = <span class=\"hljs-string\">&quot;a*ab&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(backtracking::wildcard_matching::<span class=\"hljs-built_in\">wildcard_matching</span>(matching4,\n                                                              pattern4, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) ==\n           <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// here the pattern matches with given string</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 5th test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;5th test &quot;</span>;\n    std::string matching5 = <span class=\"hljs-string\">&quot;baaabab&quot;</span>;\n    std::string pattern5 = <span class=\"hljs-string\">&quot;aa?ab&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(backtracking::wildcard_matching::<span class=\"hljs-built_in\">wildcard_matching</span>(matching5,\n                                                              pattern5, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) ==\n           <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// here the pattern matches with given string</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
