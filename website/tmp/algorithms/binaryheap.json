{
  "slug": "binaryheap",
  "name": "Binaryheap",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/binaryheap.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/binaryheap.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief A C++ program to demonstrate common Binary Heap Operations\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;utility&gt;</span></span>\n\n<span class=\"hljs-comment\">/** A class for Min Heap */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MinHeap</span> {\n    <span class=\"hljs-type\">int</span> *harr;      <span class=\"hljs-comment\">///&lt; pointer to array of elements in heap</span>\n    <span class=\"hljs-type\">int</span> capacity;   <span class=\"hljs-comment\">///&lt; maximum possible size of min heap</span>\n    <span class=\"hljs-type\">int</span> heap_size;  <span class=\"hljs-comment\">///&lt; Current number of elements in min heap</span>\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/** Constructor: Builds a heap from a given array a[] of given size\n     * \\param[in] capacity initial heap capacity\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-title\">MinHeap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> cap)</span> </span>{\n        heap_size = <span class=\"hljs-number\">0</span>;\n        capacity = cap;\n        harr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[cap];\n    }\n\n    <span class=\"hljs-comment\">/** to heapify a subtree with the root at given index */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">MinHeapify</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span></span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">parent</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> </span>{ <span class=\"hljs-keyword\">return</span> (i - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>; }\n\n    <span class=\"hljs-comment\">/** to get index of left child of node at index i */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">left</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> </span>{ <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>); }\n\n    <span class=\"hljs-comment\">/** to get index of right child of node at index i */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">right</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> </span>{ <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>); }\n\n    <span class=\"hljs-comment\">/** to extract the root which is the minimum element */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">extractMin</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-comment\">/** Decreases key value of key at index i to new_val */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">decreaseKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> new_val)</span></span>;\n\n    <span class=\"hljs-comment\">/** Returns the minimum key (key at root) from min heap */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getMin</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> harr[<span class=\"hljs-number\">0</span>]; }\n\n    <span class=\"hljs-comment\">/** Deletes a key stored at index i */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">deleteKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span></span>;\n\n    <span class=\"hljs-comment\">/** Inserts a new key &#x27;k&#x27; */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span></span>;\n\n    ~<span class=\"hljs-built_in\">MinHeap</span>() { <span class=\"hljs-keyword\">delete</span>[] harr; }\n};\n\n<span class=\"hljs-comment\">// Inserts a new key &#x27;k&#x27;</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">MinHeap::insertKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (heap_size == capacity) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nOverflow: Could not insertKey\\n&quot;</span>;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// First insert the new key at the end</span>\n    heap_size++;\n    <span class=\"hljs-type\">int</span> i = heap_size - <span class=\"hljs-number\">1</span>;\n    harr[i] = k;\n\n    <span class=\"hljs-comment\">// Fix the min heap property if it is violated</span>\n    <span class=\"hljs-keyword\">while</span> (i != <span class=\"hljs-number\">0</span> &amp;&amp; harr[<span class=\"hljs-built_in\">parent</span>(i)] &gt; harr[i]) {\n        std::<span class=\"hljs-built_in\">swap</span>(harr[i], harr[<span class=\"hljs-built_in\">parent</span>(i)]);\n        i = <span class=\"hljs-built_in\">parent</span>(i);\n    }\n}\n\n<span class=\"hljs-comment\">/** Decreases value of key at index &#x27;i&#x27; to new_val.  It is assumed that new_val\n * is smaller than harr[i].\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">MinHeap::decreaseKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> new_val)</span> </span>{\n    harr[i] = new_val;\n    <span class=\"hljs-keyword\">while</span> (i != <span class=\"hljs-number\">0</span> &amp;&amp; harr[<span class=\"hljs-built_in\">parent</span>(i)] &gt; harr[i]) {\n        std::<span class=\"hljs-built_in\">swap</span>(harr[i], harr[<span class=\"hljs-built_in\">parent</span>(i)]);\n        i = <span class=\"hljs-built_in\">parent</span>(i);\n    }\n}\n\n<span class=\"hljs-comment\">// Method to remove minimum element (or root) from min heap</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">MinHeap::extractMin</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (heap_size &lt;= <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> INT_MAX;\n    <span class=\"hljs-keyword\">if</span> (heap_size == <span class=\"hljs-number\">1</span>) {\n        heap_size--;\n        <span class=\"hljs-keyword\">return</span> harr[<span class=\"hljs-number\">0</span>];\n    }\n\n    <span class=\"hljs-comment\">// Store the minimum value, and remove it from heap</span>\n    <span class=\"hljs-type\">int</span> root = harr[<span class=\"hljs-number\">0</span>];\n    harr[<span class=\"hljs-number\">0</span>] = harr[heap_size - <span class=\"hljs-number\">1</span>];\n    heap_size--;\n    <span class=\"hljs-built_in\">MinHeapify</span>(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">return</span> root;\n}\n\n<span class=\"hljs-comment\">/** This function deletes key at index i. It first reduced value to minus\n * infinite, then calls extractMin()\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">MinHeap::deleteKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> </span>{\n    <span class=\"hljs-built_in\">decreaseKey</span>(i, INT_MIN);\n    <span class=\"hljs-built_in\">extractMin</span>();\n}\n\n<span class=\"hljs-comment\">/** A recursive method to heapify a subtree with the root at given index\n *  This method assumes that the subtrees are already heapified\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">MinHeap::MinHeapify</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> </span>{\n    <span class=\"hljs-type\">int</span> l = <span class=\"hljs-built_in\">left</span>(i);\n    <span class=\"hljs-type\">int</span> r = <span class=\"hljs-built_in\">right</span>(i);\n    <span class=\"hljs-type\">int</span> smallest = i;\n    <span class=\"hljs-keyword\">if</span> (l &lt; heap_size &amp;&amp; harr[l] &lt; harr[i])\n        smallest = l;\n    <span class=\"hljs-keyword\">if</span> (r &lt; heap_size &amp;&amp; harr[r] &lt; harr[smallest])\n        smallest = r;\n    <span class=\"hljs-keyword\">if</span> (smallest != i) {\n        std::<span class=\"hljs-built_in\">swap</span>(harr[i], harr[smallest]);\n        <span class=\"hljs-built_in\">MinHeapify</span>(smallest);\n    }\n}\n\n<span class=\"hljs-comment\">// Driver program to test above functions</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-function\">MinHeap <span class=\"hljs-title\">h</span><span class=\"hljs-params\">(<span class=\"hljs-number\">11</span>)</span></span>;\n    h.<span class=\"hljs-built_in\">insertKey</span>(<span class=\"hljs-number\">3</span>);\n    h.<span class=\"hljs-built_in\">insertKey</span>(<span class=\"hljs-number\">2</span>);\n    h.<span class=\"hljs-built_in\">deleteKey</span>(<span class=\"hljs-number\">1</span>);\n    h.<span class=\"hljs-built_in\">insertKey</span>(<span class=\"hljs-number\">15</span>);\n    h.<span class=\"hljs-built_in\">insertKey</span>(<span class=\"hljs-number\">5</span>);\n    h.<span class=\"hljs-built_in\">insertKey</span>(<span class=\"hljs-number\">4</span>);\n    h.<span class=\"hljs-built_in\">insertKey</span>(<span class=\"hljs-number\">45</span>);\n    std::cout &lt;&lt; h.<span class=\"hljs-built_in\">extractMin</span>() &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    std::cout &lt;&lt; h.<span class=\"hljs-built_in\">getMin</span>() &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    h.<span class=\"hljs-built_in\">decreaseKey</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; h.<span class=\"hljs-built_in\">getMin</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c-sharp": {
      "dir": "DataStructures/Heap/BinaryHeap.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/DataStructures/Heap/BinaryHeap.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Heap</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A generic implementation of a binary heap.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A binary heap is a complete binary tree that satisfies the heap property;</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     that is every node in the tree compares greater/less than or equal to its left and right</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     child nodes. Note that this is different from a binary search tree, where every node</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     must be the largest/smallest node of all of its children.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Although binary heaps are not very efficient, they are (probably) the simpliest heaps</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     to understand and implement.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     More information: https://en.wikipedia.org/wiki/Binary_heap .</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of elements in binary heap.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinaryHeap</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Comparer to use when comparing elements.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Comparer&lt;T&gt; comparer;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     List to hold the elements of the heap.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> List&lt;T&gt; data;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;BinaryHeap{T}&quot; /&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BinaryHeap</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            data = <span class=\"hljs-keyword\">new</span> List&lt;T&gt;();\n            comparer = Comparer&lt;T&gt;.Default;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;BinaryHeap{T}&quot; /&gt;</span> class with a custom comparision function.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;customComparer&quot;&gt;</span>The custom comparing function to use to compare elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BinaryHeap</span>(<span class=\"hljs-params\">Comparer&lt;T&gt; customComparer</span>)</span>\n        {\n            data = <span class=\"hljs-keyword\">new</span> List&lt;T&gt;();\n            comparer = customComparer;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the number of elements in the heap.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Count =&gt; data.Count;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Add an element to the binary heap.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adding to the heap is done by append the element to the end of the backing list,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and pushing the added element up until the heap property is restored.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;element&quot;&gt;</span>The element to add to the heap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Thrown if element is already in heap.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Push</span>(<span class=\"hljs-params\">T element</span>)</span>\n        {\n            data.Add(element);\n            HeapifyUp(data.Count - <span class=\"hljs-number\">1</span>);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Remove the top/root of the binary heap (ie: the largest/smallest element).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removing from the heap is done by swapping the top/root with the last element in</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the backing list, removing the last element, and pushing the new root down</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     until the heap property is restored.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The top/root of the heap.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if heap is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Pop</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (Count == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap is empty!&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> elem = data[<span class=\"hljs-number\">0</span>];\n            data[<span class=\"hljs-number\">0</span>] = data[^<span class=\"hljs-number\">1</span>];\n            data.RemoveAt(data.Count - <span class=\"hljs-number\">1</span>);\n            HeapifyDown(<span class=\"hljs-number\">0</span>);\n\n            <span class=\"hljs-keyword\">return</span> elem;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Return the top/root of the heap without removing it.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The top/root of the heap.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if heap is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Peek</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (Count == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Heap is empty!&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> data[<span class=\"hljs-number\">0</span>];\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns element if it compares larger to the top/root of the heap, else</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     inserts element into the heap and returns the top/root of the heap.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;element&quot;&gt;</span>The element to check/insert.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>element if element compares larger than top/root of heap, top/root of heap otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">PushPop</span>(<span class=\"hljs-params\">T element</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (Count == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> element;\n            }\n\n            <span class=\"hljs-keyword\">if</span> (comparer.Compare(element, data[<span class=\"hljs-number\">0</span>]) &lt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">var</span> tmp = data[<span class=\"hljs-number\">0</span>];\n                data[<span class=\"hljs-number\">0</span>] = element;\n                HeapifyDown(<span class=\"hljs-number\">0</span>);\n                <span class=\"hljs-keyword\">return</span> tmp;\n            }\n\n            <span class=\"hljs-keyword\">return</span> element;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Check if element is in the heap.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;element&quot;&gt;</span>The element to check for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true if element is in the heap, false otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Contains</span>(<span class=\"hljs-params\">T element</span>)</span> =&gt; data.Contains(element);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Remove an element from the heap.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     In removing an element from anywhere in the heap, we only need to push down or up</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the replacement value depending on how the removed value compares to its</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     replacement value.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;element&quot;&gt;</span>The element to remove from the heap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Thrown if element is not in heap.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Remove</span>(<span class=\"hljs-params\">T element</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> idx = data.IndexOf(element);\n\n            <span class=\"hljs-keyword\">if</span> (idx == <span class=\"hljs-number\">-1</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{element}</span> not in heap!&quot;</span>);\n            }\n\n            Swap(idx, data.Count - <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">var</span> tmp = data[^<span class=\"hljs-number\">1</span>];\n            data.RemoveAt(data.Count - <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-keyword\">if</span> (idx &lt; data.Count)\n            {\n                <span class=\"hljs-keyword\">if</span> (comparer.Compare(tmp, data[idx]) &gt; <span class=\"hljs-number\">0</span>)\n                {\n                    HeapifyDown(idx);\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    HeapifyUp(idx);\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Swap the elements in the heap array at the given indices.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;idx1&quot;&gt;</span>First index.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;idx2&quot;&gt;</span>Second index.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Swap</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> idx1, <span class=\"hljs-built_in\">int</span> idx2</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> tmp = data[idx1];\n            data[idx1] = data[idx2];\n            data[idx2] = tmp;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Recursive function to restore heap properties.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Restores heap property by swapping the element at <span class=\"hljs-doctag\">&lt;paramref name=&quot;elemIdx&quot; /&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     with its parent if the element compares greater than its parent.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;elemIdx&quot;&gt;</span>The element to check with its parent.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">HeapifyUp</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> elemIdx</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> parent = (elemIdx - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\n\n            <span class=\"hljs-keyword\">if</span> (parent &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; comparer.Compare(data[elemIdx], data[parent]) &gt; <span class=\"hljs-number\">0</span>)\n            {\n                Swap(elemIdx, parent);\n                HeapifyUp(parent);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Recursive function to restore heap properties.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Restores heap property by swapping the element at <span class=\"hljs-doctag\">&lt;paramref name=&quot;elemIdx&quot; /&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     with the larger of its children.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;elemIdx&quot;&gt;</span>The element to check with its children.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">HeapifyDown</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> elemIdx</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> left = <span class=\"hljs-number\">2</span> * elemIdx + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">var</span> right = <span class=\"hljs-number\">2</span> * elemIdx + <span class=\"hljs-number\">2</span>;\n\n            <span class=\"hljs-keyword\">var</span> leftLargerThanElem = left &lt; Count &amp;&amp; comparer.Compare(data[elemIdx], data[left]) &lt; <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> rightLargerThanElem = right &lt; Count &amp;&amp; comparer.Compare(data[elemIdx], data[right]) &lt; <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> leftLargerThanRight = left &lt; Count &amp;&amp; right &lt; Count &amp;&amp; comparer.Compare(data[left], data[right]) &gt; <span class=\"hljs-number\">0</span>;\n\n            <span class=\"hljs-keyword\">if</span> (leftLargerThanElem &amp;&amp; leftLargerThanRight)\n            {\n                Swap(elemIdx, left);\n                HeapifyDown(left);\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (rightLargerThanElem &amp;&amp; !leftLargerThanRight)\n            {\n                Swap(elemIdx, right);\n                HeapifyDown(right);\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Walt",
      "email": "32001362+Walt280@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ojas1234",
      "email": "ojasbansal.041@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
