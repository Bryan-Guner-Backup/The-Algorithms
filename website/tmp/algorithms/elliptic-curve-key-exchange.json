{
  "slug": "elliptic-curve-key-exchange",
  "name": "Elliptic Curve Key Exchange",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "ciphers/elliptic_curve_key_exchange.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers/elliptic_curve_key_exchange.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Elliptic Curve Diffie Hellman Key\n * Exchange](https://cryptobook.nakov.com/asymmetric-key-ciphers/ecdh-key-exchange).\n *\n * @details\n * The ECDH (Elliptic Curve Diffie–Hellman Key Exchange) is anonymous key\n * agreement scheme, which allows two parties, each having an elliptic-curve\n * public–private key pair, to establish a shared secret over an insecure\n * channel.\n * ECDH is very similar to the classical DHKE (Diffie–Hellman Key Exchange)\n * algorithm, but it uses ECC point multiplication instead of modular\n * exponentiations. ECDH is based on the following property of EC points:\n * (a * G) * b = (b * G) * a\n * If we have two secret numbers a and b (two private keys, belonging to Alice\n * and Bob) and an ECC elliptic curve with generator point G, we can exchange\n * over an insecure channel the values (a * G) and (b * G) (the public keys of\n * Alice and Bob) and then we can derive a shared secret:\n * secret = (a * G) * b = (b * G) * a.\n * Pretty simple. The above equation takes the following form:\n * alicePubKey * bobPrivKey = bobPubKey * alicePrivKey = secret\n * @author [Ashish Daulatabad](https://github.com/AshishYUO)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;uint256_t.hpp&quot;</span>  <span class=\"hljs-comment\">/// for 256-bit integer</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace ciphers\n * @brief Cipher algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> ciphers {\n<span class=\"hljs-comment\">/**\n * @brief namespace elliptic_curve_key_exchange\n * @details Demonstration of [Elliptic Curve\n * Diffie-Hellman](https://cryptobook.nakov.com/asymmetric-key-ciphers/ecdh-key-exchange)\n * key exchange.\n */</span>\n<span class=\"hljs-keyword\">namespace</span> elliptic_curve_key_exchange {\n\n<span class=\"hljs-comment\">/**\n * @brief Definition of struct Point\n * @details Definition of Point in the curve.\n */</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Point</span> {\n    <span class=\"hljs-type\">uint256_t</span> x, y;  <span class=\"hljs-comment\">/// x and y co-ordinates</span>\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator == for Point\n     * @details check whether co-ordinates are equal to the given point\n     * @param p given point to be checked with this\n     * @returns true if x and y are both equal with Point p, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(<span class=\"hljs-keyword\">const</span> Point &amp;p) { <span class=\"hljs-keyword\">return</span> x == p.x &amp;&amp; y == p.y; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief ostream operator for printing Point\n     * @param op ostream operator\n     * @param p Point to be printed on console\n     * @returns op, the ostream object\n     */</span>\n    <span class=\"hljs-keyword\">friend</span> std::ostream &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;(std::ostream &amp;op, <span class=\"hljs-keyword\">const</span> Point &amp;p) {\n        op &lt;&lt; p.x &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; p.y;\n        <span class=\"hljs-keyword\">return</span> op;\n    }\n} Point;\n\n<span class=\"hljs-comment\">/**\n * @brief This function calculates number raised to exponent power under modulo\n * mod using [Modular\n * Exponentiation](https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/math/modular_exponentiation.cpp).\n * @param number integer base\n * @param power unsigned integer exponent\n * @param mod integer modulo\n * @return number raised to power modulo mod\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint256_t</span> <span class=\"hljs-title\">exp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint256_t</span> number, <span class=\"hljs-type\">uint256_t</span> power, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint256_t</span> &amp;mod)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!power) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-number\">1</span>);\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint256_t</span> <span class=\"hljs-title\">ans</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span></span>;\n    number = number % mod;\n    <span class=\"hljs-keyword\">while</span> (power) {\n        <span class=\"hljs-keyword\">if</span> ((power &amp; <span class=\"hljs-number\">1</span>)) {\n            ans = (ans * number) % mod;\n        }\n        power &gt;&gt;= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> (power) {\n            number = (number * number) % mod;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> ans;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Addition of points\n * @details Add given point to generate third point. More description can be\n * found\n * [here](https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication#Point_addition),\n * and\n * [here](https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication#Point_doubling)\n * @param a First point\n * @param b Second point\n * @param curve_a_coeff Coefficient `a` of the given curve (y^2 = x^3 + ax + b)\n * % mod\n * @param mod Given field\n * @return the resultant point\n */</span>\n<span class=\"hljs-function\">Point <span class=\"hljs-title\">addition</span><span class=\"hljs-params\">(Point a, Point b, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint256_t</span> &amp;curve_a_coeff,\n               <span class=\"hljs-type\">uint256_t</span> mod)</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint256_t</span> <span class=\"hljs-title\">lambda</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>;  <span class=\"hljs-comment\">/// Slope</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint256_t</span> <span class=\"hljs-title\">zero</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>;    <span class=\"hljs-comment\">/// value zero</span>\n    lambda = zero = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">uint256_t</span> inf = ~zero;\n    <span class=\"hljs-keyword\">if</span> (a.x != b.x || a.y != b.y) {\n        <span class=\"hljs-comment\">// Slope being infinite.</span>\n        <span class=\"hljs-keyword\">if</span> (b.x == a.x) {\n            <span class=\"hljs-keyword\">return</span> {inf, inf};\n        }\n        <span class=\"hljs-type\">uint256_t</span> num = (b.y - a.y + mod), den = (b.x - a.x + mod);\n        lambda = (num * (<span class=\"hljs-built_in\">exp</span>(den, mod - <span class=\"hljs-number\">2</span>, mod))) % mod;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">/**\n         *  slope when the line is tangent to curve. This operation is performed\n         * while doubling. Taking derivative of `y^2 = x^3 + ax + b`\n         * =&gt; `2y dy = (3 * x^2 + a)dx`\n         * =&gt; `(dy/dx) = (3x^2 + a)/(2y)`\n         */</span>\n        <span class=\"hljs-comment\">/**\n         * if y co-ordinate is zero, the slope is infinite, return inf.\n         * else calculate the slope (here % mod and store in lambda)\n         */</span>\n        <span class=\"hljs-keyword\">if</span> (!a.y) {\n            <span class=\"hljs-keyword\">return</span> {inf, inf};\n        }\n        <span class=\"hljs-type\">uint256_t</span> axsq = ((a.x * a.x)) % mod;\n        <span class=\"hljs-comment\">// Mulitply by 3 adjustment</span>\n        axsq += (axsq &lt;&lt; <span class=\"hljs-number\">1</span>);\n        axsq %= mod;\n        <span class=\"hljs-comment\">// Mulitply by 2 adjustment</span>\n        <span class=\"hljs-type\">uint256_t</span> a_2 = (a.y &lt;&lt; <span class=\"hljs-number\">1</span>);\n        lambda =\n            (((axsq + curve_a_coeff) % mod) * <span class=\"hljs-built_in\">exp</span>(a_2, mod - <span class=\"hljs-number\">2</span>, mod)) % mod;\n    }\n    Point c;\n    <span class=\"hljs-comment\">// new point: x = ((lambda^2) - x1 - x2)</span>\n    <span class=\"hljs-comment\">// y = (lambda * (x1 - x)) - y1</span>\n    c.x = ((lambda * lambda) % mod + (mod &lt;&lt; <span class=\"hljs-number\">1</span>) - a.x - b.x) % mod;\n    c.y = (((lambda * (a.x + mod - c.x)) % mod) + mod - a.y) % mod;\n    <span class=\"hljs-keyword\">return</span> c;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief multiply Point and integer\n * @details Multiply Point by a scalar factor (here it is a private key p). The\n * multiplication is called as [double and add\n * method](https://en.wikipedia.org/wiki/Elliptic_curve_point_multiplication#Double-and-add)\n * @param a Point to multiply\n * @param curve_a_coeff Coefficient of given curve (y^2 = x^3 + ax + b) % mod\n * @param p The scalar value\n * @param mod Given field\n * @returns the resultant point\n */</span>\n<span class=\"hljs-function\">Point <span class=\"hljs-title\">multiply</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Point &amp;a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint256_t</span> &amp;curve_a_coeff, <span class=\"hljs-type\">uint256_t</span> p,\n               <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint256_t</span> &amp;mod)</span> </span>{\n    Point N = a;\n    N.x %= mod;\n    N.y %= mod;\n    <span class=\"hljs-type\">uint256_t</span> inf{};\n    inf = ~<span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-number\">0</span>);\n    Point Q = {inf, inf};\n    <span class=\"hljs-keyword\">while</span> (p) {\n        <span class=\"hljs-keyword\">if</span> ((p &amp; <span class=\"hljs-number\">1</span>)) {\n            <span class=\"hljs-keyword\">if</span> (Q.x == inf &amp;&amp; Q.y == inf) {\n                Q.x = N.x;\n                Q.y = N.y;\n            } <span class=\"hljs-keyword\">else</span> {\n                Q = <span class=\"hljs-built_in\">addition</span>(Q, N, curve_a_coeff, mod);\n            }\n        }\n        p &gt;&gt;= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> (p) {\n            N = <span class=\"hljs-built_in\">addition</span>(N, N, curve_a_coeff, mod);\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> Q;\n}\n}  <span class=\"hljs-comment\">// namespace elliptic_curve_key_exchange</span>\n}  <span class=\"hljs-comment\">// namespace ciphers</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function to test the\n * uint128_t header\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">uint128_t_tests</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 1st test: Operations test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;122&quot;</span>)</span>, <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;2312&quot;</span>)</span></span>;\n    <span class=\"hljs-built_in\">assert</span>(a + b == <span class=\"hljs-number\">2434</span>);\n    <span class=\"hljs-built_in\">assert</span>(b - a == <span class=\"hljs-number\">2190</span>);\n    <span class=\"hljs-built_in\">assert</span>(a * b == <span class=\"hljs-number\">282064</span>);\n    <span class=\"hljs-built_in\">assert</span>(b / a == <span class=\"hljs-number\">18</span>);\n    <span class=\"hljs-built_in\">assert</span>(b % a == <span class=\"hljs-number\">116</span>);\n    <span class=\"hljs-built_in\">assert</span>((a &amp; b) == <span class=\"hljs-number\">8</span>);\n    <span class=\"hljs-built_in\">assert</span>((a | b) == <span class=\"hljs-number\">2426</span>);\n    <span class=\"hljs-built_in\">assert</span>((a ^ b) == <span class=\"hljs-number\">2418</span>);\n    <span class=\"hljs-built_in\">assert</span>((a &lt;&lt; <span class=\"hljs-number\">64</span>) == <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;2250502776992565297152&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>((b &gt;&gt; <span class=\"hljs-number\">7</span>) == <span class=\"hljs-number\">18</span>);\n\n    <span class=\"hljs-comment\">// 2nd test: Operations test</span>\n    a = <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;12321421424232142122&quot;</span>);\n    b = <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;23123212&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(a + b == <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;12321421424255265334&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>(a - b == <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;12321421424209018910&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>(a * b == <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;284910839733861759501135864&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>(a / b == <span class=\"hljs-number\">532859423865LL</span>);\n    <span class=\"hljs-built_in\">assert</span>(a % b == <span class=\"hljs-number\">3887742</span>);\n    <span class=\"hljs-built_in\">assert</span>((a &amp; b) == <span class=\"hljs-number\">18912520</span>);\n    <span class=\"hljs-built_in\">assert</span>((a | b) == <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;12321421424236352814&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>((a ^ b) == <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;12321421424217440294&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>((a &lt;&lt; <span class=\"hljs-number\">64</span>) == <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-string\">&quot;227290107637132170748078080907806769152&quot;</span>));\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to test the\n * uint256_t header\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">uint256_t_tests</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 1st test: Operations test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint256_t</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;122&quot;</span>)</span>, <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;2312&quot;</span>)</span></span>;\n    <span class=\"hljs-built_in\">assert</span>(a + b == <span class=\"hljs-number\">2434</span>);\n    <span class=\"hljs-built_in\">assert</span>(b - a == <span class=\"hljs-number\">2190</span>);\n    <span class=\"hljs-built_in\">assert</span>(a * b == <span class=\"hljs-number\">282064</span>);\n    <span class=\"hljs-built_in\">assert</span>(b / a == <span class=\"hljs-number\">18</span>);\n    <span class=\"hljs-built_in\">assert</span>(b % a == <span class=\"hljs-number\">116</span>);\n    <span class=\"hljs-built_in\">assert</span>((a &amp; b) == <span class=\"hljs-number\">8</span>);\n    <span class=\"hljs-built_in\">assert</span>((a | b) == <span class=\"hljs-number\">2426</span>);\n    <span class=\"hljs-built_in\">assert</span>((a ^ b) == <span class=\"hljs-number\">2418</span>);\n    <span class=\"hljs-built_in\">assert</span>((a &lt;&lt; <span class=\"hljs-number\">64</span>) == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;2250502776992565297152&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>((b &gt;&gt; <span class=\"hljs-number\">7</span>) == <span class=\"hljs-number\">18</span>);\n\n    <span class=\"hljs-comment\">// 2nd test: Operations test</span>\n    a = <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;12321423124513251424232142122&quot;</span>);\n    b = <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;23124312431243243215354315132413213212&quot;</span>);\n    <span class=\"hljs-built_in\">assert</span>(a + b == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;23124312443564666339867566556645355334&quot;</span>));\n    <span class=\"hljs-comment\">// Since a &lt; b, the value is greater</span>\n    <span class=\"hljs-built_in\">assert</span>(a - b == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;115792089237316195423570985008687907853246860353&quot;</span>\n                              <span class=\"hljs-string\">&quot;221642219366742944204948568846&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>(a * b == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;284924437928789743312147393953938013677909398222&quot;</span>\n                              <span class=\"hljs-string\">&quot;169728183872115864&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>(b / a == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;1876756621&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>(b % a == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;2170491202688962563936723450&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>((a &amp; b) == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;3553901085693256462344&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>((a | b) == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;23124312443564662785966480863388892990&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>((a ^ b) == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;23124312443564659232065395170132430646&quot;</span>));\n    <span class=\"hljs-built_in\">assert</span>((a &lt;&lt; <span class=\"hljs-number\">128</span>) == <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;4192763024643754272961909047609369343091683&quot;</span>\n                                   <span class=\"hljs-string\">&quot;376561852756163540549632&quot;</span>));\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to test the\n * provided algorithm above\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// demonstration of key exchange using curve secp112r1</span>\n\n    <span class=\"hljs-comment\">// Equation of the form y^2 = (x^3 + ax + b) % P (here p is mod)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint256_t</span> <span class=\"hljs-title\">a</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;4451685225093714772084598273548424&quot;</span>)</span>,\n        <span class=\"hljs-title\">b</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;2061118396808653202902996166388514&quot;</span>)</span>,\n        <span class=\"hljs-title\">mod</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;4451685225093714772084598273548427&quot;</span>)</span></span>;\n\n    <span class=\"hljs-comment\">// Generator value: is pre-defined for the given curve</span>\n    ciphers::elliptic_curve_key_exchange::Point ptr = {\n        <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;188281465057972534892223778713752&quot;</span>),\n        <span class=\"hljs-built_in\">uint256_t</span>(<span class=\"hljs-string\">&quot;3419875491033170827167861896082688&quot;</span>)};\n\n    <span class=\"hljs-comment\">// Shared key generation.</span>\n    <span class=\"hljs-comment\">// For alice</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;For alice:\\n&quot;</span>;\n    <span class=\"hljs-comment\">// Alice&#x27;s private key (can be generated randomly)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint256_t</span> <span class=\"hljs-title\">alice_private_key</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;164330438812053169644452143505618&quot;</span>)</span></span>;\n    ciphers::elliptic_curve_key_exchange::Point alice_public_key =\n        <span class=\"hljs-built_in\">multiply</span>(ptr, a, alice_private_key, mod);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPrivate key: &quot;</span> &lt;&lt; alice_private_key &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPublic Key: &quot;</span> &lt;&lt; alice_public_key &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// For Bob</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;For Bob:\\n&quot;</span>;\n    <span class=\"hljs-comment\">// Bob&#x27;s private key (can be generated randomly)</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint256_t</span> <span class=\"hljs-title\">bob_private_key</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;1959473333748537081510525763478373&quot;</span>)</span></span>;\n    ciphers::elliptic_curve_key_exchange::Point bob_public_key =\n        <span class=\"hljs-built_in\">multiply</span>(ptr, a, bob_private_key, mod);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPrivate key: &quot;</span> &lt;&lt; bob_private_key &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\tPublic Key: &quot;</span> &lt;&lt; bob_public_key &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// After public key exchange, create a shared key for communication.</span>\n    <span class=\"hljs-comment\">// create shared key:</span>\n    ciphers::elliptic_curve_key_exchange::Point alice_shared_key = <span class=\"hljs-built_in\">multiply</span>(\n                                                    bob_public_key, a,\n                                                    alice_private_key, mod),\n                                                bob_shared_key = <span class=\"hljs-built_in\">multiply</span>(\n                                                    alice_public_key, a,\n                                                    bob_private_key, mod);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Shared keys:\\n&quot;</span>;\n    std::cout &lt;&lt; alice_shared_key &lt;&lt; std::endl;\n    std::cout &lt;&lt; bob_shared_key &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// Check whether shared keys are equal</span>\n    <span class=\"hljs-built_in\">assert</span>(alice_shared_key == bob_shared_key);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">uint128_t_tests</span>();  <span class=\"hljs-comment\">// running predefined 128-bit unsigned integer tests</span>\n    <span class=\"hljs-built_in\">uint256_t_tests</span>();  <span class=\"hljs-comment\">// running predefined 256-bit unsigned integer tests</span>\n    <span class=\"hljs-built_in\">test</span>();             <span class=\"hljs-comment\">// running self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ashish Bhanu Daulatabad",
      "email": "supersonic12910@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
