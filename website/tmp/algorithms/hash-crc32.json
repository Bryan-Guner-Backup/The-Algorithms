{
  "slug": "hash-crc32",
  "name": "Hash Crc32",
  "categories": ["hashing"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "hash/hash_crc32.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/hash/hash_crc32.c",
      "code": "<span class=\"hljs-comment\">/**\n * @addtogroup hash Hash algorithms\n * @{\n * @file hash_crc32.c\n * @author [Christian Bender](https://github.com/christianbender)\n * @brief 32-bit [CRC\n * hash](https://en.wikipedia.org/wiki/Cyclic_redundancy_check#CRC-32_algorithm)\n * algorithm\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief 32-bit CRC algorithm implementation\n *\n * @param s NULL terminated ASCII string to hash\n * @return 32-bit hash result\n */</span>\n<span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title function_\">crc32</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* s)</span>\n{\n    <span class=\"hljs-type\">uint32_t</span> crc = <span class=\"hljs-number\">0xffffffff</span>;\n    <span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (s[i] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)\n    {\n        <span class=\"hljs-type\">uint8_t</span> byte = s[i];\n        crc = crc ^ byte;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> j = <span class=\"hljs-number\">8</span>; j &gt; <span class=\"hljs-number\">0</span>; --j)\n        {\n            crc = (crc &gt;&gt; <span class=\"hljs-number\">1</span>) ^ (<span class=\"hljs-number\">0xEDB88320</span> &amp; (-(crc &amp; <span class=\"hljs-number\">1</span>)));\n        }\n\n        i++;\n    }\n    <span class=\"hljs-keyword\">return</span> crc ^ <span class=\"hljs-number\">0xffffffff</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Test function for ::crc32\n * \\returns None\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test_crc32</span><span class=\"hljs-params\">()</span>\n{\n    assert(crc32(<span class=\"hljs-string\">&quot;Hello World&quot;</span>) == <span class=\"hljs-number\">1243066710</span>);\n    assert(crc32(<span class=\"hljs-string\">&quot;Hello World!&quot;</span>) == <span class=\"hljs-number\">472456355</span>);\n    assert(crc32(<span class=\"hljs-string\">&quot;Hello world&quot;</span>) == <span class=\"hljs-number\">2346098258</span>);\n    assert(crc32(<span class=\"hljs-string\">&quot;Hello world!&quot;</span>) == <span class=\"hljs-number\">461707669</span>);\n    <span class=\"hljs-comment\">// printf(&quot;%&quot; PRIu32 &quot;\\n&quot;, crc32(&quot;Hello World&quot;));</span>\n    <span class=\"hljs-comment\">// printf(&quot;%&quot; PRIu32 &quot;\\n&quot;, crc32(&quot;Hello World!&quot;));</span>\n    <span class=\"hljs-comment\">// printf(&quot;%&quot; PRIu32 &quot;\\n&quot;, crc32(&quot;Hello world&quot;));</span>\n    <span class=\"hljs-comment\">// printf(&quot;%&quot; PRIX32 &quot;\\n&quot;, crc32(&quot;Hello world!&quot;));</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Tests passed\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/** @} */</span>\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    test_crc32();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
