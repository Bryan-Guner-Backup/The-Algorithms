{
  "slug": "binary-insertion-sort",
  "name": "Binary Insertion Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting/binary_insertion_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/binary_insertion_sort.c",
      "code": "<span class=\"hljs-comment\">/* Sorting of array list using binary insertion sort\n * Using binary search to find the proper location for\n * inserting the selected item at each iteration. */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/*Displays the array, passed to this method*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">binarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (low &gt;= high)\n        <span class=\"hljs-keyword\">return</span> (key &gt; arr[low]) ? (low + <span class=\"hljs-number\">1</span>) : low;\n    <span class=\"hljs-type\">int</span> mid = low + (high - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">if</span> (arr[mid] == key)\n        <span class=\"hljs-keyword\">return</span> mid + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[mid] &gt; key)\n        <span class=\"hljs-keyword\">return</span> binarySearch(arr, key, low, mid - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> binarySearch(arr, key, mid + <span class=\"hljs-number\">1</span>, high);\n}\n<span class=\"hljs-comment\">/*This is where the sorting of the array takes place\n arr[] --- Array to be sorted\n size --- Array Size\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\n{\n    <span class=\"hljs-type\">int</span> i, j, key, index;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        j = i - <span class=\"hljs-number\">1</span>;\n        key = arr[i];\n        <span class=\"hljs-comment\">/* Use binrary search to find exact key&#x27;s index */</span>\n        index = binarySearch(arr, key, <span class=\"hljs-number\">0</span>, j);\n        <span class=\"hljs-comment\">/* Move all elements greater than key from [index...j]\n         * to one position */</span>\n        <span class=\"hljs-keyword\">while</span> (j &gt;= index)\n        {\n            arr[j + <span class=\"hljs-number\">1</span>] = arr[j];\n            j = j - <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-comment\">/* Insert key value in right place */</span>\n        arr[j + <span class=\"hljs-number\">1</span>] = key;\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-type\">int</span> n;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter size of array:\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);  <span class=\"hljs-comment\">// E.g. 8</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements of the array\\n&quot;</span>);\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Original array: &quot;</span>);\n    display(arr, n);\n\n    insertionSort(arr, n);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\n    display(arr, n);\n\n    <span class=\"hljs-built_in\">free</span>(arr);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Sorters/Comparison/BinaryInsertionSorter.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/BinaryInsertionSorter.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>TODO. 2.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinaryInsertionSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     variant of insertion sort where binary search is used to find place for next element</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place, unstable,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n^2),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; array.Length; i++)\n            {\n                <span class=\"hljs-keyword\">var</span> target = array[i];\n                <span class=\"hljs-keyword\">var</span> moveIndex = i - <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-keyword\">var</span> targetInsertLocation = BinarySearch(array, <span class=\"hljs-number\">0</span>, moveIndex, target, comparer);\n                Array.Copy(array, targetInsertLocation, array, targetInsertLocation + <span class=\"hljs-number\">1</span>, i - targetInsertLocation);\n\n                array[targetInsertLocation] = target;\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span>Implementation of Binary Search using an iterative approach.<span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     An array of values sorted in ascending order between the index values left and right to search</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     through.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;from&quot;&gt;</span>Left index to search from (inclusive).<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;to&quot;&gt;</span>Right index to search to (inclusive).<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;target&quot;&gt;</span>The value to find placefor in the provided array.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>TODO.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The index where to insert target value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">BinarySearch</span>(<span class=\"hljs-params\">T[] array, <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">from</span>, <span class=\"hljs-built_in\">int</span> to, T target, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> left = <span class=\"hljs-keyword\">from</span>;\n            <span class=\"hljs-keyword\">var</span> right = to;\n            <span class=\"hljs-keyword\">while</span> (right &gt; left)\n            {\n                <span class=\"hljs-keyword\">var</span> middle = (left + right) / <span class=\"hljs-number\">2</span>;\n                <span class=\"hljs-keyword\">var</span> comparisonResult = comparer.Compare(target, array[middle]);\n\n                <span class=\"hljs-keyword\">if</span> (comparisonResult == <span class=\"hljs-number\">0</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> middle + <span class=\"hljs-number\">1</span>;\n                }\n\n                <span class=\"hljs-keyword\">if</span> (comparisonResult &gt; <span class=\"hljs-number\">0</span>)\n                {\n                    left = middle + <span class=\"hljs-number\">1</span>;\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    right = middle - <span class=\"hljs-number\">1</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> comparer.Compare(target, array[left]) &lt; <span class=\"hljs-number\">0</span> ? left : left + <span class=\"hljs-number\">1</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Sombit Bose",
      "email": "sombit.bose15@gmail.com",
      "commits": 1
    },
    {
      "name": "yyash01",
      "email": "yjain3.436@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 1
    },
    {
      "name": "neelneelpurk",
      "email": "soumyadeep1999.np@gmail.com",
      "commits": 1
    },
    {
      "name": "rkessler1248",
      "email": "rkessler1248@yahoo.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
