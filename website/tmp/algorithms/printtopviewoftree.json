{
  "slug": "printtopviewoftree",
  "name": "PrintTopViewofTree",
  "categories": ["datastructures", "tree"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Trees/PrintTopViewofTree.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Trees/PrintTopViewofTree.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Trees; <span class=\"hljs-comment\">// Java program to print top view of Binary tree</span>\n\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\n<span class=\"hljs-keyword\">import</span> java.util.LinkedList;\n<span class=\"hljs-keyword\">import</span> java.util.Queue;\n\n<span class=\"hljs-comment\">// Class for a tree node</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeNode</span> {\n  <span class=\"hljs-comment\">// Members</span>\n  <span class=\"hljs-type\">int</span> key;\n  TreeNode left, right;\n\n  <span class=\"hljs-comment\">// Constructor</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TreeNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-built_in\">this</span>.key = key;\n    left = right = <span class=\"hljs-literal\">null</span>;\n  }\n}\n\n<span class=\"hljs-comment\">// A class to represent a queue item. The queue is used to do Level</span>\n<span class=\"hljs-comment\">// order traversal. Every Queue item contains node and horizontal</span>\n<span class=\"hljs-comment\">// distance of node from root</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">QItem</span> {\n  TreeNode node;\n  <span class=\"hljs-type\">int</span> hd;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">QItem</span><span class=\"hljs-params\">(TreeNode n, <span class=\"hljs-type\">int</span> h)</span> {\n    node = n;\n    hd = h;\n  }\n}\n\n<span class=\"hljs-comment\">// Class for a Binary Tree</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Tree</span> {\n  TreeNode root;\n\n  <span class=\"hljs-comment\">// Constructors</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Tree</span><span class=\"hljs-params\">()</span> {\n    root = <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Tree</span><span class=\"hljs-params\">(TreeNode n)</span> {\n    root = n;\n  }\n\n  <span class=\"hljs-comment\">// This method prints nodes in top view of binary tree</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printTopView</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// base case</span>\n    <span class=\"hljs-keyword\">if</span> (root == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Creates an empty hashset</span>\n    HashSet&lt;Integer&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();\n\n    <span class=\"hljs-comment\">// Create a queue and add root to it</span>\n    Queue&lt;QItem&gt; Q = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;QItem&gt;();\n    Q.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QItem</span>(root, <span class=\"hljs-number\">0</span>)); <span class=\"hljs-comment\">// Horizontal distance of root is 0</span>\n\n    <span class=\"hljs-comment\">// Standard BFS or level order traversal loop</span>\n    <span class=\"hljs-keyword\">while</span> (!Q.isEmpty()) {\n      <span class=\"hljs-comment\">// Remove the front item and get its details</span>\n      <span class=\"hljs-type\">QItem</span> <span class=\"hljs-variable\">qi</span> <span class=\"hljs-operator\">=</span> Q.remove();\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hd</span> <span class=\"hljs-operator\">=</span> qi.hd;\n      <span class=\"hljs-type\">TreeNode</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> qi.node;\n\n      <span class=\"hljs-comment\">// If this is the first node at its horizontal distance,</span>\n      <span class=\"hljs-comment\">// then this node is in top view</span>\n      <span class=\"hljs-keyword\">if</span> (!set.contains(hd)) {\n        set.add(hd);\n        System.out.print(n.key + <span class=\"hljs-string\">&quot; &quot;</span>);\n      }\n\n      <span class=\"hljs-comment\">// Enqueue left and right children of current node</span>\n      <span class=\"hljs-keyword\">if</span> (n.left != <span class=\"hljs-literal\">null</span>) Q.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QItem</span>(n.left, hd - <span class=\"hljs-number\">1</span>));\n      <span class=\"hljs-keyword\">if</span> (n.right != <span class=\"hljs-literal\">null</span>) Q.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">QItem</span>(n.right, hd + <span class=\"hljs-number\">1</span>));\n    }\n  }\n}\n\n<span class=\"hljs-comment\">// Driver class to test above methods</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrintTopViewofTree</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">/* Create following Binary Tree\n       1\n     /  \\\n    2    3\n     \\\n      4\n       \\\n        5\n         \\\n          6*/</span>\n    <span class=\"hljs-type\">TreeNode</span> <span class=\"hljs-variable\">root</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeNode</span>(<span class=\"hljs-number\">1</span>);\n    root.left = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeNode</span>(<span class=\"hljs-number\">2</span>);\n    root.right = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeNode</span>(<span class=\"hljs-number\">3</span>);\n    root.left.right = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeNode</span>(<span class=\"hljs-number\">4</span>);\n    root.left.right.right = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeNode</span>(<span class=\"hljs-number\">5</span>);\n    root.left.right.right.right = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeNode</span>(<span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-type\">Tree</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Tree</span>(root);\n    System.out.println(<span class=\"hljs-string\">&quot;Following are nodes in top view of Binary Tree&quot;</span>);\n    t.printTopView();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "ayaanfaiz",
      "email": "ayaan2103@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "cnddhks846@naver.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
