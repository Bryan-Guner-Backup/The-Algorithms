{
  "slug": "binary-gcd",
  "name": "Binary GCD",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Numeric/GreatestCommonDivisor/BinaryGreatestCommonDivisorFinder.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Numeric/GreatestCommonDivisor/BinaryGreatestCommonDivisorFinder.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric.GreatestCommonDivisor</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds greatest common divisor for numbers u and v</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     using binary algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Wiki: https://en.wikipedia.org/wiki/Binary_GCD_algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BinaryGreatestCommonDivisorFinder</span> : <span class=\"hljs-title\">IGreatestCommonDivisorFinder</span>\n    {\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindGcd</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> u, <span class=\"hljs-built_in\">int</span> v</span>)</span>\n        {\n            <span class=\"hljs-comment\">// GCD(0, 0) = 0</span>\n            <span class=\"hljs-keyword\">if</span> (u == <span class=\"hljs-number\">0</span> &amp;&amp; v == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n            }\n\n            <span class=\"hljs-comment\">// GCD(0, v) = v; GCD(u, 0) = u</span>\n            <span class=\"hljs-keyword\">if</span> (u == <span class=\"hljs-number\">0</span> || v == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> u + v;\n            }\n\n            <span class=\"hljs-comment\">// GCD(-a, -b) = GCD(-a, b) = GCD(a, -b) = GCD(a, b)</span>\n            u = Math.Sign(u) * u;\n            v = Math.Sign(v) * v;\n\n            <span class=\"hljs-comment\">// Let shift := lg K, where K is the greatest power of 2 dividing both u and v</span>\n            <span class=\"hljs-keyword\">var</span> shift = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">while</span> (((u | v) &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>)\n            {\n                u &gt;&gt;= <span class=\"hljs-number\">1</span>;\n                v &gt;&gt;= <span class=\"hljs-number\">1</span>;\n                shift++;\n            }\n\n            <span class=\"hljs-keyword\">while</span> ((u &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>)\n            {\n                u &gt;&gt;= <span class=\"hljs-number\">1</span>;\n            }\n\n            <span class=\"hljs-comment\">// From here on, u is always odd</span>\n            <span class=\"hljs-keyword\">do</span>\n            {\n                <span class=\"hljs-comment\">// Remove all factors of 2 in v as they are not common</span>\n                <span class=\"hljs-comment\">// v is not zero, so while will terminate</span>\n                <span class=\"hljs-keyword\">while</span> ((v &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>)\n                {\n                    v &gt;&gt;= <span class=\"hljs-number\">1</span>;\n                }\n\n                <span class=\"hljs-comment\">// Now u and v are both odd. Swap if necessary so u &lt;= v,</span>\n                <span class=\"hljs-keyword\">if</span> (u &gt; v)\n                {\n                    <span class=\"hljs-keyword\">var</span> t = v;\n                    v = u;\n                    u = t;\n                }\n\n                <span class=\"hljs-comment\">// Here v &gt;= u and v - u is even</span>\n                v -= u;\n            }\n            <span class=\"hljs-keyword\">while</span> (v != <span class=\"hljs-number\">0</span>);\n\n            <span class=\"hljs-comment\">// Restore common factors of 2</span>\n            <span class=\"hljs-keyword\">return</span> u &lt;&lt; shift;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Brian Janssen",
      "email": "brian-janssen@hotmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
