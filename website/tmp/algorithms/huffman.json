{
  "slug": "huffman",
  "name": "Huffman",
  "categories": ["compression"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "compression/huffman.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/compression/huffman.py",
      "code": "<span class=\"hljs-keyword\">import</span> sys\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Letter</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, letter, freq</span>):\n        self.letter = letter\n        self.freq = freq\n        self.bitstring = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.letter}</span>:<span class=\"hljs-subst\">{self.freq}</span>&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeNode</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, freq, left, right</span>):\n        self.freq = freq\n        self.left = left\n        self.right = right\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parse_file</span>(<span class=\"hljs-params\">file_path</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Read the file and build a dict of all letters and their\n    frequencies, then convert the dict into a list of Letters.\n    &quot;&quot;&quot;</span>\n    chars = {}\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file_path) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n            c = f.read(<span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> c:\n                <span class=\"hljs-keyword\">break</span>\n            chars[c] = chars[c] + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> c <span class=\"hljs-keyword\">in</span> chars.keys() <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>([Letter(c, f) <span class=\"hljs-keyword\">for</span> c, f <span class=\"hljs-keyword\">in</span> chars.items()], key=<span class=\"hljs-keyword\">lambda</span> l: l.freq)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">build_tree</span>(<span class=\"hljs-params\">letters</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Run through the list of Letters and build the min heap\n    for the Huffman Tree.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(letters) &gt; <span class=\"hljs-number\">1</span>:\n        left = letters.pop(<span class=\"hljs-number\">0</span>)\n        right = letters.pop(<span class=\"hljs-number\">0</span>)\n        total_freq = left.freq + right.freq\n        node = TreeNode(total_freq, left, right)\n        letters.append(node)\n        letters.sort(key=<span class=\"hljs-keyword\">lambda</span> l: l.freq)\n    <span class=\"hljs-keyword\">return</span> letters[<span class=\"hljs-number\">0</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">traverse_tree</span>(<span class=\"hljs-params\">root, bitstring</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Recursively traverse the Huffman Tree to set each\n    Letter&#x27;s bitstring dictionary, and return the list of Letters\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(root) <span class=\"hljs-keyword\">is</span> Letter:\n        root.bitstring[root.letter] = bitstring\n        <span class=\"hljs-keyword\">return</span> [root]\n    letters = []\n    letters += traverse_tree(root.left, bitstring + <span class=\"hljs-string\">&quot;0&quot;</span>)\n    letters += traverse_tree(root.right, bitstring + <span class=\"hljs-string\">&quot;1&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> letters\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">huffman</span>(<span class=\"hljs-params\">file_path</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Parse the file, build the tree, then run through the file\n    again, using the letters dictionary to find and print out the\n    bitstring for each letter.\n    &quot;&quot;&quot;</span>\n    letters_list = parse_file(file_path)\n    root = build_tree(letters_list)\n    letters = {\n        k: v <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> traverse_tree(root, <span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\">in</span> letter.bitstring.items()\n    }\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Huffman Coding  of <span class=\"hljs-subst\">{file_path}</span>: &quot;</span>)\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file_path) <span class=\"hljs-keyword\">as</span> f:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n            c = f.read(<span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> c:\n                <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-built_in\">print</span>(letters[c], end=<span class=\"hljs-string\">&quot; &quot;</span>)\n    <span class=\"hljs-built_in\">print</span>()\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-comment\"># pass the file path to the huffman function</span>\n    huffman(sys.argv[<span class=\"hljs-number\">1</span>])\n"
    },
    "c-plus-plus": {
      "dir": "greedy_algorithms/huffman.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/greedy_algorithms/huffman.cpp",
      "code": "<span class=\"hljs-comment\">// C++ program for Huffman Coding</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-comment\">// A Huffman tree node</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MinHeapNode</span> {\n    <span class=\"hljs-comment\">// One of the input characters</span>\n    <span class=\"hljs-type\">char</span> data;\n\n    <span class=\"hljs-comment\">// Frequency of the character</span>\n    <span class=\"hljs-keyword\">unsigned</span> freq;\n\n    <span class=\"hljs-comment\">// Left and right child</span>\n    MinHeapNode *left, *right;\n\n    <span class=\"hljs-built_in\">MinHeapNode</span>(<span class=\"hljs-type\">char</span> data, <span class=\"hljs-keyword\">unsigned</span> freq)\n\n    {\n        left = right = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">this</span>-&gt;data = data;\n        <span class=\"hljs-keyword\">this</span>-&gt;freq = freq;\n    }\n};\n\n<span class=\"hljs-comment\">// For comparison of</span>\n<span class=\"hljs-comment\">// two heap nodes (needed in min heap)</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">compare</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">operator</span><span class=\"hljs-params\">()</span><span class=\"hljs-params\">(MinHeapNode* l, MinHeapNode* r)</span>\n\n    </span>{\n        <span class=\"hljs-keyword\">return</span> (l-&gt;freq &gt; r-&gt;freq);\n    }\n};\n\n<span class=\"hljs-comment\">// Prints huffman codes from</span>\n<span class=\"hljs-comment\">// the root of Huffman Tree.</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printCodes</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> MinHeapNode* root, string str)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (!root)\n        <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">if</span> (root-&gt;data != <span class=\"hljs-string\">&#x27;$&#x27;</span>)\n        cout &lt;&lt; root-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span> &lt;&lt; str &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-built_in\">printCodes</span>(root-&gt;left, str + <span class=\"hljs-string\">&quot;0&quot;</span>);\n    <span class=\"hljs-built_in\">printCodes</span>(root-&gt;right, str + <span class=\"hljs-string\">&quot;1&quot;</span>);\n}\n\n<span class=\"hljs-comment\">// The main function that builds a Huffman Tree and</span>\n<span class=\"hljs-comment\">// print codes by traversing the built Huffman Tree</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">HuffmanCodes</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> data[], <span class=\"hljs-type\">int</span> freq[], <span class=\"hljs-type\">int</span> size)</span> </span>{\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">MinHeapNode</span> *left, *right, *top;\n\n    <span class=\"hljs-comment\">// Create a min heap &amp; inserts all characters of data[]</span>\n    priority_queue&lt;MinHeapNode*, vector&lt;MinHeapNode*&gt;, compare&gt; minHeap;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i)\n        minHeap.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">MinHeapNode</span>(data[i], freq[i]));\n\n    <span class=\"hljs-comment\">// Iterate while size of heap doesn&#x27;t become 1</span>\n    <span class=\"hljs-keyword\">while</span> (minHeap.<span class=\"hljs-built_in\">size</span>() != <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-comment\">// Extract the two minimum</span>\n        <span class=\"hljs-comment\">// freq items from min heap</span>\n        left = minHeap.<span class=\"hljs-built_in\">top</span>();\n        minHeap.<span class=\"hljs-built_in\">pop</span>();\n\n        right = minHeap.<span class=\"hljs-built_in\">top</span>();\n        minHeap.<span class=\"hljs-built_in\">pop</span>();\n\n        <span class=\"hljs-comment\">// Create a new internal node with</span>\n        <span class=\"hljs-comment\">// frequency equal to the sum of the</span>\n        <span class=\"hljs-comment\">// two nodes frequencies. Make the</span>\n        <span class=\"hljs-comment\">// two extracted node as left and right children</span>\n        <span class=\"hljs-comment\">// of this new node. Add this node</span>\n        <span class=\"hljs-comment\">// to the min heap &#x27;$&#x27; is a special value</span>\n        <span class=\"hljs-comment\">// for internal nodes, not used</span>\n        top = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">MinHeapNode</span>(<span class=\"hljs-string\">&#x27;$&#x27;</span>, left-&gt;freq + right-&gt;freq);\n\n        top-&gt;left = left;\n        top-&gt;right = right;\n\n        minHeap.<span class=\"hljs-built_in\">push</span>(top);\n    }\n\n    <span class=\"hljs-comment\">// Print Huffman codes using</span>\n    <span class=\"hljs-comment\">// the Huffman tree built above</span>\n    <span class=\"hljs-built_in\">printCodes</span>(minHeap.<span class=\"hljs-built_in\">top</span>(), <span class=\"hljs-string\">&quot;&quot;</span>);\n}\n\n<span class=\"hljs-comment\">// Driver program to test above functions</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">char</span> arr[] = {<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>};\n    <span class=\"hljs-type\">int</span> freq[] = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">45</span>};\n\n    <span class=\"hljs-type\">int</span> size = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\n\n    <span class=\"hljs-built_in\">HuffmanCodes</span>(arr, freq, size);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ravi Patel",
      "email": "ravi.patel1245@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rmakynen",
      "email": "rmakynen@W10-116.student.yo.oulu.fi",
      "commits": 1
    },
    {
      "name": "yashmunoth",
      "email": "yash.munoth@gmail.com",
      "commits": 1
    },
    {
      "name": "dpittaluga76",
      "email": "dpittaluga@gmail.com",
      "commits": 1
    },
    {
      "name": "Níkolas Vargas",
      "email": "vargasnikolass@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
