{
  "slug": "tim-sort",
  "name": "Tim Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/tim_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/tim_sort.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_search</span>(<span class=\"hljs-params\">lst, item, start, end</span>):\n    <span class=\"hljs-keyword\">if</span> start == end:\n        <span class=\"hljs-keyword\">return</span> start <span class=\"hljs-keyword\">if</span> lst[start] &gt; item <span class=\"hljs-keyword\">else</span> start + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> start &gt; end:\n        <span class=\"hljs-keyword\">return</span> start\n\n    mid = (start + end) // <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">if</span> lst[mid] &lt; item:\n        <span class=\"hljs-keyword\">return</span> binary_search(lst, item, mid + <span class=\"hljs-number\">1</span>, end)\n    <span class=\"hljs-keyword\">elif</span> lst[mid] &gt; item:\n        <span class=\"hljs-keyword\">return</span> binary_search(lst, item, start, mid - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> mid\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insertion_sort</span>(<span class=\"hljs-params\">lst</span>):\n    length = <span class=\"hljs-built_in\">len</span>(lst)\n\n    <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, length):\n        value = lst[index]\n        pos = binary_search(lst, value, <span class=\"hljs-number\">0</span>, index - <span class=\"hljs-number\">1</span>)\n        lst = lst[:pos] + [value] + lst[pos:index] + lst[index + <span class=\"hljs-number\">1</span> :]\n\n    <span class=\"hljs-keyword\">return</span> lst\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">left, right</span>):\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> left:\n        <span class=\"hljs-keyword\">return</span> right\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> right:\n        <span class=\"hljs-keyword\">return</span> left\n\n    <span class=\"hljs-keyword\">if</span> left[<span class=\"hljs-number\">0</span>] &lt; right[<span class=\"hljs-number\">0</span>]:\n        <span class=\"hljs-keyword\">return</span> [left[<span class=\"hljs-number\">0</span>]] + merge(left[<span class=\"hljs-number\">1</span>:], right)\n\n    <span class=\"hljs-keyword\">return</span> [right[<span class=\"hljs-number\">0</span>]] + merge(left, right[<span class=\"hljs-number\">1</span>:])\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tim_sort</span>(<span class=\"hljs-params\">lst</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; tim_sort(&quot;Python&quot;)\n    [&#x27;P&#x27;, &#x27;h&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;t&#x27;, &#x27;y&#x27;]\n    &gt;&gt;&gt; tim_sort((1.1, 1, 0, -1, -1.1))\n    [-1.1, -1, 0, 1, 1.1]\n    &gt;&gt;&gt; tim_sort(list(reversed(list(range(7)))))\n    [0, 1, 2, 3, 4, 5, 6]\n    &gt;&gt;&gt; tim_sort([3, 2, 1]) == insertion_sort([3, 2, 1])\n    True\n    &gt;&gt;&gt; tim_sort([3, 2, 1]) == sorted([3, 2, 1])\n    True\n    &quot;&quot;&quot;</span>\n    length = <span class=\"hljs-built_in\">len</span>(lst)\n    runs, sorted_runs = [], []\n    new_run = [lst[<span class=\"hljs-number\">0</span>]]\n    sorted_array = []\n    i = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> i &lt; length:\n        <span class=\"hljs-keyword\">if</span> lst[i] &lt; lst[i - <span class=\"hljs-number\">1</span>]:\n            runs.append(new_run)\n            new_run = [lst[i]]\n        <span class=\"hljs-keyword\">else</span>:\n            new_run.append(lst[i])\n        i += <span class=\"hljs-number\">1</span>\n    runs.append(new_run)\n\n    <span class=\"hljs-keyword\">for</span> run <span class=\"hljs-keyword\">in</span> runs:\n        sorted_runs.append(insertion_sort(run))\n    <span class=\"hljs-keyword\">for</span> run <span class=\"hljs-keyword\">in</span> sorted_runs:\n        sorted_array = merge(sorted_array, run)\n\n    <span class=\"hljs-keyword\">return</span> sorted_array\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n\n    lst = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">178</span>, <span class=\"hljs-number\">92</span>, <span class=\"hljs-number\">46</span>, -<span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>]\n    sorted_lst = tim_sort(lst)\n    <span class=\"hljs-built_in\">print</span>(sorted_lst)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Sorts/TimSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/TimSort.js",
      "code": "<span class=\"hljs-comment\">/**\n  *  <span class=\"hljs-doctag\">@function</span> Timsort is a hybrid stable sorting algorithm, derived from merge sort and insertion sort,\n  *  designed to perform well on many kinds of real-world data.\n  *  It was implemented by Tim Peters in 2002 for use in the Python programming language.\n  *  It is also used to sort arrays of non-primitive type in Java SE 7,\n  *  on the Android platform, in GNU Octave, on V8, Swift and Rust.\n  *  1) It sorts small partitions using Insertion Sort.\n  *  2) Merges the partition using Merge Sort.\n  *  <span class=\"hljs-doctag\">@see</span> [Timsort](https://en.wikipedia.org/wiki/Timsort)\n  *  <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array</span>} <span class=\"hljs-variable\">array</span>\n  */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Timsort</span> = (<span class=\"hljs-params\">array</span>) =&gt; {\n  <span class=\"hljs-comment\">// Default size of a partition</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">RUN</span> = <span class=\"hljs-number\">32</span>\n  <span class=\"hljs-keyword\">const</span> n = array.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-comment\">// Sorting the partitions using Insertion Sort</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i += <span class=\"hljs-variable constant_\">RUN</span>) {\n    <span class=\"hljs-title class_\">InsertionSort</span>(array, i, <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(i + <span class=\"hljs-variable constant_\">RUN</span> - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>))\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> size = <span class=\"hljs-variable constant_\">RUN</span>; size &lt; n; size *= <span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> left = <span class=\"hljs-number\">0</span>; left &lt; n; left += <span class=\"hljs-number\">2</span> * size) {\n      <span class=\"hljs-keyword\">const</span> mid = left + size - <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">const</span> right = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(left + <span class=\"hljs-number\">2</span> * size - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-title class_\">Merge</span>(array, left, mid, right)\n    }\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> performs insertion sort on the partition\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array</span>} array array to be sorted\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} left left index of partiton\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} right right index of partition\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">InsertionSort</span> = (<span class=\"hljs-params\">array, left, right</span>) =&gt; {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = left + <span class=\"hljs-number\">1</span>; i &lt;= right; i++) {\n    <span class=\"hljs-keyword\">const</span> key = array[i]\n    <span class=\"hljs-keyword\">let</span> j = i - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> (j &gt;= left &amp;&amp; array[j] &gt; key) {\n      array[j + <span class=\"hljs-number\">1</span>] = array[j]\n      j--\n    }\n    array[j + <span class=\"hljs-number\">1</span>] = key\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@function</span> merges two sorted partitions\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array</span>} array array to be sorted\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} left left index of partition\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} mid mid index of partition\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} right right index of partition\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Merge</span> = (<span class=\"hljs-params\">array, left, mid, right</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (mid &gt;= right) <span class=\"hljs-keyword\">return</span>\n  <span class=\"hljs-keyword\">const</span> len1 = mid - left + <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">const</span> len2 = right - mid\n  <span class=\"hljs-keyword\">const</span> larr = <span class=\"hljs-title class_\">Array</span>(len1)\n  <span class=\"hljs-keyword\">const</span> rarr = <span class=\"hljs-title class_\">Array</span>(len2)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; len1; i++) {\n    larr[i] = array[left + i]\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; len2; i++) {\n    rarr[i] = array[mid + <span class=\"hljs-number\">1</span> + i]\n  }\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; <span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; <span class=\"hljs-keyword\">let</span> k = left\n  <span class=\"hljs-keyword\">while</span> (i &lt; larr.<span class=\"hljs-property\">length</span> &amp;&amp; j &lt; rarr.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-keyword\">if</span> (larr[i] &lt; rarr[j]) {\n      array[k++] = larr[i++]\n    } <span class=\"hljs-keyword\">else</span> {\n      array[k++] = rarr[j++]\n    }\n  }\n  <span class=\"hljs-keyword\">while</span> (i &lt; larr.<span class=\"hljs-property\">length</span>) {\n    array[k++] = larr[i++]\n  }\n  <span class=\"hljs-keyword\">while</span> (j &lt; rarr.<span class=\"hljs-property\">length</span>) {\n    array[k++] = rarr[j++]\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@example</span> Test of Timsort functions.\n * Data is randomly generated.\n * Prints &quot;RIGHT&quot; if it works as expected,\n * otherwise &quot;FAULTY&quot;\n */</span>\n(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> size = <span class=\"hljs-number\">1000000</span>\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-title class_\">Array</span>(size)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n    data[i] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-title class_\">Number</span>.<span class=\"hljs-property\">MAX_SAFE_INTEGER</span>\n  }\n  <span class=\"hljs-keyword\">const</span> isSorted = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">array</span>) {\n    <span class=\"hljs-keyword\">const</span> n = array.<span class=\"hljs-property\">length</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">if</span> (array[i] &gt; array[i + <span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n  <span class=\"hljs-title class_\">Timsort</span>(data)\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isSorted</span>(data)) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;RIGHT&#x27;</span>)\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;FAULTY&#x27;</span>)\n  }\n})()\n"
    },
    "c-plus-plus": {
      "dir": "sorting/tim_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/tim_sort.cpp",
      "code": "<span class=\"hljs-comment\">// C++ program to perform TimSort.</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> RUN = <span class=\"hljs-number\">32</span>;\n\n<span class=\"hljs-comment\">// this function sorts array from left index to to right index which is of size</span>\n<span class=\"hljs-comment\">// atmost RUN</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = left + <span class=\"hljs-number\">1</span>; i &lt;= right; i++) {\n        <span class=\"hljs-type\">int</span> temp = arr[i];\n        <span class=\"hljs-type\">int</span> j = i - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">while</span> (arr[j] &gt; temp &amp;&amp; j &gt;= left) {\n            arr[j + <span class=\"hljs-number\">1</span>] = arr[j];\n            j--;\n        }\n        arr[j + <span class=\"hljs-number\">1</span>] = temp;\n    }\n}\n\n<span class=\"hljs-comment\">// merge function merges the sorted runs</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> r)</span> </span>{\n    <span class=\"hljs-comment\">// original array is broken in two parts, left and right array</span>\n    <span class=\"hljs-type\">int</span> len1 = m - l + <span class=\"hljs-number\">1</span>, len2 = r - m;\n    <span class=\"hljs-type\">int</span> *left = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[len1], *right = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[len2];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len1; i++) left[i] = arr[l + i];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len2; i++) right[i] = arr[m + <span class=\"hljs-number\">1</span> + i];\n\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> k = l;\n\n    <span class=\"hljs-comment\">// after comparing, we merge those two array in larger sub array</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt; len1 &amp;&amp; j &lt; len2) {\n        <span class=\"hljs-keyword\">if</span> (left[i] &lt;= right[j]) {\n            arr[k] = left[i];\n            i++;\n        } <span class=\"hljs-keyword\">else</span> {\n            arr[k] = right[j];\n            j++;\n        }\n        k++;\n    }\n\n    <span class=\"hljs-comment\">// copy remaining elements of left, if any</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt; len1) {\n        arr[k] = left[i];\n        k++;\n        i++;\n    }\n\n    <span class=\"hljs-comment\">// copy remaining element of right, if any</span>\n    <span class=\"hljs-keyword\">while</span> (j &lt; len2) {\n        arr[k] = right[j];\n        k++;\n        j++;\n    }\n    <span class=\"hljs-keyword\">delete</span>[] left;\n    <span class=\"hljs-keyword\">delete</span>[] right;\n}\n\n<span class=\"hljs-comment\">// iterative Timsort function to sort the array[0...n-1] (similar to merge sort)</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">timSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-comment\">// Sort individual subarrays of size RUN</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i += RUN)\n        <span class=\"hljs-built_in\">insertionSort</span>(arr, i, std::<span class=\"hljs-built_in\">min</span>((i + <span class=\"hljs-number\">31</span>), (n - <span class=\"hljs-number\">1</span>)));\n\n    <span class=\"hljs-comment\">// start merging from size RUN (or 32). It will merge to form size 64, then</span>\n    <span class=\"hljs-comment\">// 128, 256 and so on ....</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> size = RUN; size &lt; n; size = <span class=\"hljs-number\">2</span> * size) {\n        <span class=\"hljs-comment\">// pick starting point of left sub array. We are going to merge</span>\n        <span class=\"hljs-comment\">// arr[left..left+size-1] and arr[left+size, left+2*size-1] After every</span>\n        <span class=\"hljs-comment\">// merge, we increase left by 2*size</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> left = <span class=\"hljs-number\">0</span>; left &lt; n; left += <span class=\"hljs-number\">2</span> * size) {\n            <span class=\"hljs-comment\">// find ending point of left sub array</span>\n            <span class=\"hljs-comment\">// mid+1 is starting point of right sub array</span>\n            <span class=\"hljs-type\">int</span> mid = left + size - <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-type\">int</span> right = std::<span class=\"hljs-built_in\">min</span>((left + <span class=\"hljs-number\">2</span> * size - <span class=\"hljs-number\">1</span>), (n - <span class=\"hljs-number\">1</span>));\n\n            <span class=\"hljs-comment\">// merge sub array arr[left.....mid] &amp; arr[mid+1....right]</span>\n            <span class=\"hljs-built_in\">merge</span>(arr, left, mid, right);\n        }\n    }\n}\n\n<span class=\"hljs-comment\">// utility function to print the Array</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d  &quot;</span>, arr[i]);\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">// Driver program to test above function</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> arr[] = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">19</span>};\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(arr) / <span class=\"hljs-built_in\">sizeof</span>(arr[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Given Array is\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printArray</span>(arr, n);\n\n    <span class=\"hljs-built_in\">timSort</span>(arr, n);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;After Sorting Array is\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printArray</span>(arr, n);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Sorts/TimSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Sorts/TimSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> Sorts;\n\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@author</span> [Hemanth Kotagiri](https://github.com/hemanth-kotagiri)\n * <span class=\"hljs-doctag\">@see</span> [Tim Sort](https://en.wikipedia.org/wiki/Tim_sort)\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TimSort</span> {\n  <span class=\"hljs-type\">int</span> array[];\n  <span class=\"hljs-type\">int</span> array_length;\n  <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">RUN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">32</span>;\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@brief</span> A constructor which takes in the array specified by the user.\n   * <span class=\"hljs-doctag\">@param</span> array : Array given by the user.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TimSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array)</span> {\n    <span class=\"hljs-built_in\">this</span>.array = array;\n    <span class=\"hljs-built_in\">this</span>.array_length = array.length;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@brief</span> A constructor which takes in an array length and randomly initializes an array.\n   * <span class=\"hljs-doctag\">@param</span> array_length length given by the user.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TimSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> array_length)</span> {\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n\n    <span class=\"hljs-built_in\">this</span>.array_length = array_length;\n    <span class=\"hljs-built_in\">this</span>.array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-built_in\">this</span>.array_length];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.array_length; i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">random_number</span> <span class=\"hljs-operator\">=</span> rand.nextInt(<span class=\"hljs-number\">1000</span>);\n      <span class=\"hljs-built_in\">this</span>.array[i] = random_number;\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@brief</span> A method to change the size of the run.\n   * <span class=\"hljs-doctag\">@param</span> run : Value specified by the user to change the run.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">change_run</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> run)</span> {\n    <span class=\"hljs-built_in\">this</span>.RUN = run;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@brief</span> A default constructor when no parameters are given. Initializes the array length to be\n   *     100. Generates a random number array of size 100.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">TimSort</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-built_in\">this</span>.array_length = <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-built_in\">this</span>.array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-built_in\">this</span>.array_length];\n\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">rand</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.array_length; i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">random_number</span> <span class=\"hljs-operator\">=</span> rand.nextInt(<span class=\"hljs-number\">1000</span>);\n      <span class=\"hljs-built_in\">this</span>.array[i] = random_number;\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@brief</span> Performs Insertion Sort Algorithm on given array with bounded indices.\n   * <span class=\"hljs-doctag\">@param</span> array: The array on which the algorithm is to be performed.\n   * <span class=\"hljs-doctag\">@param</span> start_idx: The starting index from which the algorithm is to be performed.\n   * <span class=\"hljs-doctag\">@param</span> end_idx: The ending index at which the algorithm needs to stop sorting.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertion_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array, <span class=\"hljs-type\">int</span> start_idx, <span class=\"hljs-type\">int</span> end_idx)</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">current_element</span> <span class=\"hljs-operator\">=</span> array[i];\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i - <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-keyword\">while</span> (j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; array[j] &gt; current_element) {\n        array[j + <span class=\"hljs-number\">1</span>] = array[j];\n        j--;\n      }\n      array[j + <span class=\"hljs-number\">1</span>] = current_element;\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@brief</span> A method to merge two runs(chunks of array).\n   * <span class=\"hljs-doctag\">@param</span> array: The origin array which is to be sorted.\n   * <span class=\"hljs-doctag\">@param</span> start: Starting index of the first run(chunk).\n   * <span class=\"hljs-doctag\">@param</span> mid: The ending index of the first run(chunk).\n   * <span class=\"hljs-doctag\">@param</span> end: Ending index of the second run(chunk).\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">merge_runs</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> array[], <span class=\"hljs-type\">int</span> start, <span class=\"hljs-type\">int</span> mid, <span class=\"hljs-type\">int</span> end)</span> {\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">first_array_size</span> <span class=\"hljs-operator\">=</span> mid - start + <span class=\"hljs-number\">1</span>, second_array_size = end - mid;\n    <span class=\"hljs-type\">int</span> array1[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[first_array_size], array2[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[second_array_size];\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// Building the two sub arrays from the array to merge later</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; first_array_size; i++) array1[i] = array[start + i];\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; second_array_size; i++) array2[i] = array[mid + <span class=\"hljs-number\">1</span> + i];\n\n    i = <span class=\"hljs-number\">0</span>;\n    j = <span class=\"hljs-number\">0</span>;\n    k = start;\n\n    <span class=\"hljs-keyword\">while</span> (i &lt; first_array_size &amp;&amp; j &lt; second_array_size) {\n      <span class=\"hljs-keyword\">if</span> (array1[i] &lt;= array2[j]) {\n        array[k] = array1[i];\n        i++;\n      } <span class=\"hljs-keyword\">else</span> {\n        array[k] = array2[j];\n        j++;\n      }\n      k++;\n    }\n\n    <span class=\"hljs-keyword\">while</span> (i &lt; first_array_size) {\n      array[k] = array1[i];\n      k++;\n      i++;\n    }\n\n    <span class=\"hljs-keyword\">while</span> (j &lt; second_array_size) {\n      array[k] = array2[j];\n      k++;\n      j++;\n    }\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@brief</span> Tim Sort Algorithm method. */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">algorithm</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-comment\">// Before Sorting</span>\n    System.out.println(<span class=\"hljs-string\">&quot;Before sorting the array: &quot;</span>);\n    <span class=\"hljs-built_in\">this</span>.showArrayElements();\n    System.out.println();\n\n    <span class=\"hljs-comment\">// Applying insertion sort on RUNS.</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.array_length; i += <span class=\"hljs-built_in\">this</span>.RUN)\n      <span class=\"hljs-built_in\">this</span>.insertion_sort(<span class=\"hljs-built_in\">this</span>.array, i, Math.min(i + <span class=\"hljs-built_in\">this</span>.RUN, (<span class=\"hljs-built_in\">this</span>.array_length - <span class=\"hljs-number\">1</span>)));\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">split</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.RUN; split &lt; <span class=\"hljs-built_in\">this</span>.array_length; split = <span class=\"hljs-number\">2</span> * split) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start_idx</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; start_idx &lt; <span class=\"hljs-built_in\">this</span>.array_length; start_idx += <span class=\"hljs-number\">2</span> * split) {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid</span> <span class=\"hljs-operator\">=</span> start_idx + split - <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">end_idx</span> <span class=\"hljs-operator\">=</span> Math.min((start_idx + <span class=\"hljs-number\">2</span> * split - <span class=\"hljs-number\">1</span>), (<span class=\"hljs-built_in\">this</span>.array_length - <span class=\"hljs-number\">1</span>));\n\n        <span class=\"hljs-built_in\">this</span>.merge_runs(<span class=\"hljs-built_in\">this</span>.array, start_idx, mid, end_idx);\n      }\n    }\n    <span class=\"hljs-comment\">// After sorting</span>\n    System.out.println(<span class=\"hljs-string\">&quot;After sorting the array: &quot;</span>);\n    <span class=\"hljs-built_in\">this</span>.showArrayElements();\n    System.out.println();\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@brief</span> A method to show the elements inside the array. */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">showArrayElements</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.array.length; i++) {\n      System.out.print(<span class=\"hljs-built_in\">this</span>.array[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\n    }\n    System.out.println();\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@brief</span> A method to test the sorting algorithm */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span>[] array = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">8</span>};\n    <span class=\"hljs-type\">TimSort</span> <span class=\"hljs-variable\">sorterObj1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimSort</span>();\n    <span class=\"hljs-type\">TimSort</span> <span class=\"hljs-variable\">sorterObj2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimSort</span>(<span class=\"hljs-number\">50</span>);\n    <span class=\"hljs-type\">TimSort</span> <span class=\"hljs-variable\">sorterObj3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TimSort</span>(array);\n\n    sorterObj1.algorithm();\n    sorterObj2.algorithm();\n    sorterObj3.algorithm();\n\n    <span class=\"hljs-comment\">// Testing the first array</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sorterObj1.array_length - <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">assert</span> ((sorterObj1.array[i] &lt;= sorterObj1.array[i + <span class=\"hljs-number\">1</span>])) : <span class=\"hljs-string\">&quot;Array is not sorted&quot;</span>;\n    }\n\n    <span class=\"hljs-comment\">// Testing the second array.</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sorterObj2.array_length - <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">assert</span> ((sorterObj2.array[i] &lt;= sorterObj2.array[i + <span class=\"hljs-number\">1</span>])) : <span class=\"hljs-string\">&quot;Array is not sorted&quot;</span>;\n    }\n\n    <span class=\"hljs-comment\">// Testing the third array.</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sorterObj3.array_length - <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">assert</span> ((sorterObj3.array[i] &lt;= sorterObj3.array[i + <span class=\"hljs-number\">1</span>])) : <span class=\"hljs-string\">&quot;Array is not sorted&quot;</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    test();\n  }\n}\n"
    },
    "dart": {
      "dir": "sort/tim_Sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort/tim_Sort.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> RUN = <span class=\"hljs-number\">32</span>;\n<span class=\"hljs-keyword\">void</span> insertionSort(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> right) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = left + <span class=\"hljs-number\">1</span>; i &lt;= right; i++) {\n    <span class=\"hljs-built_in\">int</span> temp = list[i];\n    <span class=\"hljs-built_in\">int</span> j = i - <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (j &gt;= left &amp;&amp; list[j] &gt; temp) {\n      list[j + <span class=\"hljs-number\">1</span>] = list[j];\n      j--;\n    }\n    list[j + <span class=\"hljs-number\">1</span>] = temp;\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> merge(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> left, <span class=\"hljs-built_in\">int</span> middle, <span class=\"hljs-built_in\">int</span> right) {\n  <span class=\"hljs-built_in\">int</span> length1 = middle - left + <span class=\"hljs-number\">1</span>, length2 = right - middle;\n  <span class=\"hljs-built_in\">List</span> leftList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(length1), rightList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(length2);\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; length1; i++) {\n    leftList[i] = list[left + i];\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; length2; i++) {\n    rightList[i] = list[middle + <span class=\"hljs-number\">1</span> + i];\n  }\n\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (i &lt; length1 &amp;&amp; j &lt; length2) {\n    <span class=\"hljs-keyword\">if</span> (leftList[i] &lt;= rightList[j]) {\n      list[k] = leftList[i];\n      i++;\n    } <span class=\"hljs-keyword\">else</span> {\n      list[k] = rightList[j];\n      j++;\n    }\n    k++;\n  }\n\n  <span class=\"hljs-keyword\">while</span> (i &lt; length1) {\n    list[k] = leftList[i];\n    i++;\n    k++;\n  }\n\n  <span class=\"hljs-keyword\">while</span> (j &lt; length2) {\n    list[k] = rightList[j];\n    k++;\n    j++;\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> timSort(<span class=\"hljs-built_in\">List</span> list, <span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i += RUN) {\n    insertionSort(list, i, min((i + <span class=\"hljs-number\">31</span>), n - <span class=\"hljs-number\">1</span>));\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> size = RUN; size &lt; n; size = <span class=\"hljs-number\">2</span> * size) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> left = <span class=\"hljs-number\">0</span>; left &lt; n; left += <span class=\"hljs-number\">2</span> * size) {\n      <span class=\"hljs-built_in\">int</span> middle = left + size - <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-built_in\">int</span> right = min((left + <span class=\"hljs-number\">2</span> * size - <span class=\"hljs-number\">1</span>), (n - <span class=\"hljs-number\">1</span>));\n      merge(list, left, middle, right);\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-comment\">//Get the array</span>\n  <span class=\"hljs-built_in\">List</span> arr = [<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">213</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">107</span>];\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Before sorting: <span class=\"hljs-subst\">$arr</span>\\n&quot;</span>);\n  timSort(arr, arr.length);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;After sorting: <span class=\"hljs-subst\">$arr</span>&quot;</span>);\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Hemanth",
      "email": "hemanth.kotagiri43@gmail.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "DarkWarrior703",
      "email": "56077342+DarkWarrior703@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "sandeeproy99",
      "email": "33170898+sandeeproy99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "FrogBattle",
      "email": "44649323+FrogBattle@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
