{
  "slug": "quick-sort-3",
  "name": "Quick Sort 3",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/quick_sort_3.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/quick_sort_3.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation Details\n * @details Quick sort 3 works on Dutch National Flag Algorithm\n * The major difference between simple quicksort and quick sort 3 comes in the\n * function partition3 In quick_sort_partition3 we divide the vector/array into\n * 3 parts. quick sort 3 works faster in some cases as compared to simple\n * quicksort.\n * @author immortal-j\n * @author [Krishna Vedala](https://github/kvedala)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> {\n<span class=\"hljs-comment\">/**\n * Operator to print the array.\n * @param out std::ostream object to write to\n * @param arr array to write\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\nstd::ostream &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;(std::ostream &amp;out, <span class=\"hljs-keyword\">const</span> std::vector&lt;T&gt; &amp;arr) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-built_in\">size</span>(); ++i) {\n        out &lt;&lt; arr[i];\n        <span class=\"hljs-keyword\">if</span> (i &lt; arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) {\n            out &lt;&lt; <span class=\"hljs-string\">&quot;, &quot;</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> out;\n}\n\n}  <span class=\"hljs-comment\">// namespace</span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting Algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-keyword\">namespace</span> {  <span class=\"hljs-comment\">// using un-named namespace here to prevent partition function</span>\n             <span class=\"hljs-comment\">// being visible to end-users</span>\n<span class=\"hljs-comment\">/** This function partitions `arr[]` in three parts\n * 1. \\f$arr[l\\ldots i]\\f$ contains all elements smaller than pivot\n * 2. \\f$arr[(i+1)\\ldots (j-1)]\\f$ contains all occurrences of pivot\n * 3. \\f$arr[j\\ldots r]\\f$ contains all elements greater than pivot\n * @tparam T type of data in the vector array\n * @param [in,out] arr vector array being partitioned\n * @param [in] low lower limit of window to partition\n * @param [in] high upper limit of window to partition\n * @param [out] i updated lower limit of partition\n * @param [out] j updated upper limit of partition\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">partition3</span><span class=\"hljs-params\">(std::vector&lt;T&gt; *arr, <span class=\"hljs-type\">int32_t</span> low, <span class=\"hljs-type\">int32_t</span> high, <span class=\"hljs-type\">int32_t</span> *i,\n                <span class=\"hljs-type\">int32_t</span> *j)</span> </span>{\n    <span class=\"hljs-comment\">// To handle 2 elements</span>\n    <span class=\"hljs-keyword\">if</span> (high - low &lt;= <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">if</span> ((*arr)[high] &lt; (*arr)[low]) {\n            std::<span class=\"hljs-built_in\">swap</span>((*arr)[high], (*arr)[low]);\n        }\n        *i = low;\n        *j = high;\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-type\">int32_t</span> mid = low;\n    T pivot = (*arr)[high];\n    <span class=\"hljs-keyword\">while</span> (mid &lt;= high) {\n        <span class=\"hljs-keyword\">if</span> ((*arr)[mid] &lt; pivot) {\n            std::<span class=\"hljs-built_in\">swap</span>((*arr)[low++], (*arr)[mid++]);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*arr)[mid] == pivot) {\n            mid++;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((*arr)[mid] &gt; pivot) {\n            std::<span class=\"hljs-built_in\">swap</span>((*arr)[mid], (*arr)[high--]);\n        }\n    }\n\n    <span class=\"hljs-comment\">// update i and j</span>\n    *i = low - <span class=\"hljs-number\">1</span>;\n    *j = mid;  <span class=\"hljs-comment\">// or high-1</span>\n}\n}  <span class=\"hljs-comment\">// namespace</span>\n\n<span class=\"hljs-comment\">/** 3-way partition based quick sort. This function accepts array pointer and\n * modified the input array.\n * @tparam T type of data in the vector array\n * @param [in,out] arr vector array to sort\n * @param [in] low lower limit of window to partition\n * @param [in] high upper limit of window to partition\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quicksort</span><span class=\"hljs-params\">(std::vector&lt;T&gt; *arr, <span class=\"hljs-type\">int32_t</span> low, <span class=\"hljs-type\">int32_t</span> high)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (low &gt;= high) {  <span class=\"hljs-comment\">// 1 or 0 elements</span>\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// i and j are passed as reference</span>\n    <span class=\"hljs-built_in\">partition3</span>(arr, low, high, &amp;i, &amp;j);\n\n    <span class=\"hljs-comment\">// Recur two halves</span>\n    <span class=\"hljs-built_in\">quicksort</span>(arr, low, i);\n    <span class=\"hljs-built_in\">quicksort</span>(arr, j, high);\n}\n\n<span class=\"hljs-comment\">/** 3-way partition based quick sort. This function accepts array by value and\n * creates a copy of it. The array copy gets sorted and returned by the\n * function.\n * @tparam T type of data in the vector array\n * @param [in] arr vector array to sort\n * @param [in] low lower limit of window to partition\n * @param [in] high upper limit of window to partition\n * @returns sorted array vector\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">quicksort</span><span class=\"hljs-params\">(std::vector&lt;T&gt; arr, <span class=\"hljs-type\">int32_t</span> low, <span class=\"hljs-type\">int32_t</span> high)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (low &gt;= high) {  <span class=\"hljs-comment\">// 1 or 0 elements</span>\n        <span class=\"hljs-keyword\">return</span> arr;\n    }\n\n    <span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// i and j are passed as reference</span>\n    <span class=\"hljs-built_in\">partition3</span>(&amp;arr, low, high, &amp;i, &amp;j);\n\n    <span class=\"hljs-comment\">// Recur two halves</span>\n    <span class=\"hljs-built_in\">quicksort</span>(&amp;arr, low, i);\n    <span class=\"hljs-built_in\">quicksort</span>(&amp;arr, j, high);\n\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/** Test function for integer type arrays */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_int</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTesting integer type arrays\\n&quot;</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> num_tests = <span class=\"hljs-number\">1</span>; num_tests &lt; <span class=\"hljs-number\">21</span>; num_tests++) {\n        <span class=\"hljs-type\">size_t</span> size = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">500</span>;\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">arr</span><span class=\"hljs-params\">(size)</span></span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;a : arr) {\n            a = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">500</span> - <span class=\"hljs-number\">250</span>;  <span class=\"hljs-comment\">// random numbers between -250, 249</span>\n        }\n\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test &quot;</span> &lt;&lt; num_tests &lt;&lt; <span class=\"hljs-string\">&quot;\\t Array size:&quot;</span> &lt;&lt; size &lt;&lt; <span class=\"hljs-string\">&quot;\\t &quot;</span>;\n        std::vector&lt;<span class=\"hljs-type\">int</span>&gt; sorted = sorting::<span class=\"hljs-built_in\">quicksort</span>(arr, <span class=\"hljs-number\">0</span>, size - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">if</span> (size &lt; <span class=\"hljs-number\">20</span>) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t Sorted Array is:\\n\\t&quot;</span>;\n            std::cout &lt;&lt; sorted &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        }\n        <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(sorted), std::<span class=\"hljs-built_in\">end</span>(sorted)));\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t Passed\\n&quot;</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/** Test function for double type arrays */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_double</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTesting Double type arrays\\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> num_tests = <span class=\"hljs-number\">1</span>; num_tests &lt; <span class=\"hljs-number\">21</span>; num_tests++) {\n        <span class=\"hljs-type\">size_t</span> size = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">500</span>;\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">arr</span><span class=\"hljs-params\">(size)</span></span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;a : arr) {\n            a = <span class=\"hljs-built_in\">double</span>(std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">500</span>) -\n                <span class=\"hljs-number\">250.f</span>;   <span class=\"hljs-comment\">// random numbers between -250, 249</span>\n            a /= <span class=\"hljs-number\">100.f</span>;  <span class=\"hljs-comment\">// convert to -2.5 to 2.49</span>\n        }\n\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test &quot;</span> &lt;&lt; num_tests &lt;&lt; <span class=\"hljs-string\">&quot;\\t Array size:&quot;</span> &lt;&lt; size &lt;&lt; <span class=\"hljs-string\">&quot;\\t &quot;</span>;\n        std::vector&lt;<span class=\"hljs-type\">double</span>&gt; sorted = sorting::<span class=\"hljs-built_in\">quicksort</span>(arr, <span class=\"hljs-number\">0</span>, size - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">if</span> (size &lt; <span class=\"hljs-number\">20</span>) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t Sorted Array is:\\n\\t&quot;</span>;\n            std::cout &lt;&lt; sorted &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        }\n        <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(sorted), std::<span class=\"hljs-built_in\">end</span>(sorted)));\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\t Passed\\n&quot;</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/** Driver program for above functions */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));\n    <span class=\"hljs-built_in\">test_int</span>();\n    <span class=\"hljs-built_in\">test_double</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
