{
  "slug": "quick-select",
  "name": "Quick Select",
  "categories": ["searches"],
  "body": {
    "en": "<h3>Problem Statement</h3>\n<p>Given an array, find the kth largest / smallest element in linear time complexity.</p>\n<h3>Approach</h3>\n<ul>\n<li>Select a pivot element at random</li>\n<li>Apply partitioning as used in quick sort</li>\n<li>After partitioning, the pivot will be placed in its sorted location ie. All elements smaller than the pivot will be on its left and greater on its right</li>\n<li>If index of sorted pivot is k, then the pivot is our kth element and we return the number</li>\n<li>Else, check if 'k' is greater or smaller and choose a new pivot in that range.</li>\n<li>Repeat till we get the kth element at kth position</li>\n</ul>\n<h3>Time Complexity</h3>\n<ul>\n<li>\n<p><code>O(n^2)</code> Worst-Case Performance</p>\n</li>\n<li>\n<p><code>O(n)</code> Best-case Performance</p>\n</li>\n<li>\n<p><code>O(n)</code> Average Performance</p>\n</li>\n</ul>\n<h3>Founder's Name</h3>\n<ul>\n<li>This algorithm was developed by Tony Hoare and is also called <code>Hoare's Selection Algorithm</code>.</li>\n</ul>\n<h3>Example</h3>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">arr</span>[] = {<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>}\n<span class=\"hljs-attribute\">Indexes</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">6</span>\n\n<span class=\"hljs-attribute\">Let</span>'s say k = <span class=\"hljs-number\">4</span>. ie. We have to find <span class=\"hljs-number\">4</span>th smallest element.\n\n<span class=\"hljs-attribute\">1</span>. Choosing random pivot as <span class=\"hljs-number\">7</span>\n<span class=\"hljs-attribute\">2</span>. Swap <span class=\"hljs-number\">7</span> with the last element and apply the partitioning algorithm\n<span class=\"hljs-attribute\">3</span>. After applying partition, <span class=\"hljs-literal\">all</span> elements smaller than <span class=\"hljs-number\">7</span> will be placed to the left and greater in its right.\n   <span class=\"hljs-attribute\">Thus</span> we can say that <span class=\"hljs-number\">7</span> is in its sorted position arr[] = {<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">11</span>}\n<span class=\"hljs-attribute\">4</span>. As position of '<span class=\"hljs-number\">7</span>' is <span class=\"hljs-number\">4</span>th (ie. k). Thus we will simply return <span class=\"hljs-number\">7</span>\n</code></pre>\n<h3>Code Implementation Links</h3>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/selecting/quickSelect.cpp\">C++</a></li>\n</ul>\n<h3>Helpful Video Links</h3>\n<p><a href=\"https://youtu.be/hGK_5n81drs\">Video explaining how to find the Kth smallest/largest element in varying complexities</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "searches/quick_select.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches/quick_select.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nA Python implementation of the quick select algorithm, which is efficient for\ncalculating the value that would appear in the index of a list if it would be\nsorted, even if it is not already sorted\nhttps://en.wikipedia.org/wiki/Quickselect\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> random\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_partition</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">list</span>, pivot</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Three way partition the data into smaller, equal and greater lists,\n    in relationship to the pivot\n    :param data: The data to be sorted (a list)\n    :param pivot: The value to partition the data on\n    :return: Three list: smaller, equal and greater\n    &quot;&quot;&quot;</span>\n    less, equal, greater = [], [], []\n    <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> data:\n        <span class=\"hljs-keyword\">if</span> element &lt; pivot:\n            less.append(element)\n        <span class=\"hljs-keyword\">elif</span> element &gt; pivot:\n            greater.append(element)\n        <span class=\"hljs-keyword\">else</span>:\n            equal.append(element)\n    <span class=\"hljs-keyword\">return</span> less, equal, greater\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_select</span>(<span class=\"hljs-params\">items: <span class=\"hljs-built_in\">list</span>, index: <span class=\"hljs-built_in\">int</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; quick_select([2, 4, 5, 7, 899, 54, 32], 5)\n    54\n    &gt;&gt;&gt; quick_select([2, 4, 5, 7, 899, 54, 32], 1)\n    4\n    &gt;&gt;&gt; quick_select([5, 4, 3, 2], 2)\n    4\n    &gt;&gt;&gt; quick_select([3, 5, 7, 10, 2, 12], 3)\n    7\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># index = len(items) // 2 when trying to find the median</span>\n    <span class=\"hljs-comment\">#   (value of index when items is sorted)</span>\n\n    <span class=\"hljs-comment\"># invalid input</span>\n    <span class=\"hljs-keyword\">if</span> index &gt;= <span class=\"hljs-built_in\">len</span>(items) <span class=\"hljs-keyword\">or</span> index &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    pivot = items[random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(items) - <span class=\"hljs-number\">1</span>)]\n    count = <span class=\"hljs-number\">0</span>\n    smaller, equal, larger = _partition(items, pivot)\n    count = <span class=\"hljs-built_in\">len</span>(equal)\n    m = <span class=\"hljs-built_in\">len</span>(smaller)\n\n    <span class=\"hljs-comment\"># index is the pivot</span>\n    <span class=\"hljs-keyword\">if</span> m &lt;= index &lt; m + count:\n        <span class=\"hljs-keyword\">return</span> pivot\n    <span class=\"hljs-comment\"># must be in smaller</span>\n    <span class=\"hljs-keyword\">elif</span> m &gt; index:\n        <span class=\"hljs-keyword\">return</span> quick_select(smaller, index)\n    <span class=\"hljs-comment\"># must be in larger</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> quick_select(larger, index - (m + count))\n"
    },
    "javascript": {
      "dir": "Data-Structures/Array/QuickSelect.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Array/QuickSelect.js",
      "code": "<span class=\"hljs-comment\">/**\n * QuickSelect is an algorithm to find the kth smallest number\n *\n * Notes:\n * -QuickSelect is related to QuickSort, thus has optimal best and average\n * -case (O(n)) but unlikely poor worst case (O(n^2))\n * -This implementation uses randomly selected pivots for better performance\n *\n * <span class=\"hljs-doctag\">@complexity</span>: O(n) (on average )\n * <span class=\"hljs-doctag\">@complexity</span>: O(n^2) (worst case)\n * <span class=\"hljs-doctag\">@flow</span>\n */</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">QuickSelect</span> (items, kth) { <span class=\"hljs-comment\">// eslint-disable-line no-unused-vars</span>\n  <span class=\"hljs-keyword\">if</span> (kth &lt; <span class=\"hljs-number\">1</span> || kth &gt; items.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Index Out of Bound&#x27;</span>\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">RandomizedSelect</span>(items, <span class=\"hljs-number\">0</span>, items.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>, kth)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RandomizedSelect</span> (\n  items,\n  left,\n  right,\n  i\n) {\n  <span class=\"hljs-keyword\">if</span> (left === right) <span class=\"hljs-keyword\">return</span> items[left]\n\n  <span class=\"hljs-keyword\">const</span> pivotIndex = <span class=\"hljs-title class_\">RandomizedPartition</span>(items, left, right)\n  <span class=\"hljs-keyword\">const</span> k = pivotIndex - left + <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">if</span> (i === k) <span class=\"hljs-keyword\">return</span> items[pivotIndex]\n  <span class=\"hljs-keyword\">if</span> (i &lt; k) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">RandomizedSelect</span>(items, left, pivotIndex - <span class=\"hljs-number\">1</span>, i)\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">RandomizedSelect</span>(items, pivotIndex + <span class=\"hljs-number\">1</span>, right, i - k)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">RandomizedPartition</span> (items, left, right) {\n  <span class=\"hljs-keyword\">const</span> rand = <span class=\"hljs-title function_\">getRandomInt</span>(left, right)\n  <span class=\"hljs-title class_\">Swap</span>(items, rand, right)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Partition</span>(items, left, right)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Partition</span> (items, left, right) {\n  <span class=\"hljs-keyword\">const</span> x = items[right]\n  <span class=\"hljs-keyword\">let</span> pivotIndex = left - <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = left; j &lt; right; j++) {\n    <span class=\"hljs-keyword\">if</span> (items[j] &lt;= x) {\n      pivotIndex++\n      <span class=\"hljs-title class_\">Swap</span>(items, pivotIndex, j)\n    }\n  }\n\n  <span class=\"hljs-title class_\">Swap</span>(items, pivotIndex + <span class=\"hljs-number\">1</span>, right)\n\n  <span class=\"hljs-keyword\">return</span> pivotIndex + <span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getRandomInt</span> (min, max) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * (max - min + <span class=\"hljs-number\">1</span>)) + min\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Swap</span> (arr, x, y) {\n  [arr[x], arr[y]] = [arr[y], arr[x]]\n}\n\n<span class=\"hljs-comment\">// &gt; QuickSelect([1, 4, 2, -2, 4, 5], 1)</span>\n<span class=\"hljs-comment\">// -2</span>\n<span class=\"hljs-comment\">// &gt; QuickSelect([1, 4, 2, -2, 4, 5], 5)</span>\n<span class=\"hljs-comment\">// 4</span>\n<span class=\"hljs-comment\">// &gt; QuickSelect([1, 4, 2, -2, 4, 5], 6)</span>\n<span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-comment\">// &gt; QuickSelect([1, 4, 2, -2, 4, 5], 0)</span>\n<span class=\"hljs-comment\">// &quot;Index Out of Bound&quot;</span>\n<span class=\"hljs-comment\">// &gt; QuickSelect([1, 4, 2, -2, 4, 5], 7)</span>\n<span class=\"hljs-comment\">// &quot;Index Out of Bound&quot;</span>\n"
    }
  },
  "contributors": [
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "zoomdong",
      "email": "1344492820@qq.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "jbaenaxd",
      "email": "jobaco04@hotmail.com",
      "commits": 1
    },
    {
      "name": "percy07",
      "email": "56677891+percy07@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "weixuanhu",
      "email": "44716380+weixuanhu@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "fickleEfrit",
      "email": "powerhungry7@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Selection Algorithms/Quick Select.md"
  }
}
