{
  "slug": "aho-corasick",
  "name": "Aho Corasick",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/aho_corasick.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/aho_corasick.py",
      "code": "<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> deque\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Dict</span>, <span class=\"hljs-type\">List</span>, <span class=\"hljs-type\">Union</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Automaton</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, keywords: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">str</span>]</span>):\n        self.adlist = <span class=\"hljs-built_in\">list</span>()\n        self.adlist.append(\n            {<span class=\"hljs-string\">&quot;value&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;next_states&quot;</span>: [], <span class=\"hljs-string\">&quot;fail_state&quot;</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;output&quot;</span>: []}\n        )\n\n        <span class=\"hljs-keyword\">for</span> keyword <span class=\"hljs-keyword\">in</span> keywords:\n            self.add_keyword(keyword)\n        self.set_fail_transitions()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_next_state</span>(<span class=\"hljs-params\">self, current_state: <span class=\"hljs-built_in\">int</span>, char: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-type\">Union</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-literal\">None</span>]:\n        <span class=\"hljs-keyword\">for</span> state <span class=\"hljs-keyword\">in</span> self.adlist[current_state][<span class=\"hljs-string\">&quot;next_states&quot;</span>]:\n            <span class=\"hljs-keyword\">if</span> char == self.adlist[state][<span class=\"hljs-string\">&quot;value&quot;</span>]:\n                <span class=\"hljs-keyword\">return</span> state\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_keyword</span>(<span class=\"hljs-params\">self, keyword: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        current_state = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> keyword:\n            <span class=\"hljs-keyword\">if</span> self.find_next_state(current_state, character):\n                current_state = self.find_next_state(current_state, character)\n            <span class=\"hljs-keyword\">else</span>:\n                self.adlist.append(\n                    {\n                        <span class=\"hljs-string\">&quot;value&quot;</span>: character,\n                        <span class=\"hljs-string\">&quot;next_states&quot;</span>: [],\n                        <span class=\"hljs-string\">&quot;fail_state&quot;</span>: <span class=\"hljs-number\">0</span>,\n                        <span class=\"hljs-string\">&quot;output&quot;</span>: [],\n                    }\n                )\n                self.adlist[current_state][<span class=\"hljs-string\">&quot;next_states&quot;</span>].append(<span class=\"hljs-built_in\">len</span>(self.adlist) - <span class=\"hljs-number\">1</span>)\n                current_state = <span class=\"hljs-built_in\">len</span>(self.adlist) - <span class=\"hljs-number\">1</span>\n        self.adlist[current_state][<span class=\"hljs-string\">&quot;output&quot;</span>].append(keyword)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_fail_transitions</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        q = deque()\n        <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> self.adlist[<span class=\"hljs-number\">0</span>][<span class=\"hljs-string\">&quot;next_states&quot;</span>]:\n            q.append(node)\n            self.adlist[node][<span class=\"hljs-string\">&quot;fail_state&quot;</span>] = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">while</span> q:\n            r = q.popleft()\n            <span class=\"hljs-keyword\">for</span> child <span class=\"hljs-keyword\">in</span> self.adlist[r][<span class=\"hljs-string\">&quot;next_states&quot;</span>]:\n                q.append(child)\n                state = self.adlist[r][<span class=\"hljs-string\">&quot;fail_state&quot;</span>]\n                <span class=\"hljs-keyword\">while</span> (\n                    self.find_next_state(state, self.adlist[child][<span class=\"hljs-string\">&quot;value&quot;</span>]) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n                    <span class=\"hljs-keyword\">and</span> state != <span class=\"hljs-number\">0</span>\n                ):\n                    state = self.adlist[state][<span class=\"hljs-string\">&quot;fail_state&quot;</span>]\n                self.adlist[child][<span class=\"hljs-string\">&quot;fail_state&quot;</span>] = self.find_next_state(\n                    state, self.adlist[child][<span class=\"hljs-string\">&quot;value&quot;</span>]\n                )\n                <span class=\"hljs-keyword\">if</span> self.adlist[child][<span class=\"hljs-string\">&quot;fail_state&quot;</span>] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    self.adlist[child][<span class=\"hljs-string\">&quot;fail_state&quot;</span>] = <span class=\"hljs-number\">0</span>\n                self.adlist[child][<span class=\"hljs-string\">&quot;output&quot;</span>] = (\n                    self.adlist[child][<span class=\"hljs-string\">&quot;output&quot;</span>]\n                    + self.adlist[self.adlist[child][<span class=\"hljs-string\">&quot;fail_state&quot;</span>]][<span class=\"hljs-string\">&quot;output&quot;</span>]\n                )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">search_in</span>(<span class=\"hljs-params\">self, string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-type\">Dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; A = Automaton([&quot;what&quot;, &quot;hat&quot;, &quot;ver&quot;, &quot;er&quot;])\n        &gt;&gt;&gt; A.search_in(&quot;whatever, err ... , wherever&quot;)\n        {&#x27;what&#x27;: [0], &#x27;hat&#x27;: [1], &#x27;ver&#x27;: [5, 25], &#x27;er&#x27;: [6, 10, 22, 26]}\n        &quot;&quot;&quot;</span>\n        result = <span class=\"hljs-built_in\">dict</span>()  <span class=\"hljs-comment\"># returns a dict with keywords and list of its occurrences</span>\n        current_state = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(string)):\n            <span class=\"hljs-keyword\">while</span> (\n                self.find_next_state(current_state, string[i]) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n                <span class=\"hljs-keyword\">and</span> current_state != <span class=\"hljs-number\">0</span>\n            ):\n                current_state = self.adlist[current_state][<span class=\"hljs-string\">&quot;fail_state&quot;</span>]\n            current_state = self.find_next_state(current_state, string[i])\n            <span class=\"hljs-keyword\">if</span> current_state <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                current_state = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">for</span> key <span class=\"hljs-keyword\">in</span> self.adlist[current_state][<span class=\"hljs-string\">&quot;output&quot;</span>]:\n                    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (key <span class=\"hljs-keyword\">in</span> result):\n                        result[key] = []\n                    result[key].append(i - <span class=\"hljs-built_in\">len</span>(key) + <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> result\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dmytro Litvinov",
      "email": "litvinov.dmytro.it@gmail.com",
      "commits": 1
    },
    {
      "name": "Samarth Sehgal",
      "email": "samarthsehgal97@gmail.com",
      "commits": 1
    },
    {
      "name": "Aashay Shingre",
      "email": "akshingre@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
