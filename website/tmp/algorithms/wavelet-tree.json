{
  "slug": "wavelet-tree",
  "name": "Wavelet Tree",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/wavelet_tree.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/wavelet_tree.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nWavelet tree is a data-structure designed to efficiently answer various range queries\nfor arrays. Wavelets trees are different from other binary trees in the sense that\nthe nodes are split based on the actual values of the elements and not on indices,\nsuch as the with segment trees or fenwick trees. You can read more about them here:\n1. https://users.dcc.uchile.cl/~jperez/papers/ioiconf16.pdf\n2. https://www.youtube.com/watch?v=4aSv9PcecDw&amp;t=811s\n3. https://www.youtube.com/watch?v=CybAgVF-MMc&amp;t=1178s\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Optional</span>\n\ntest_array = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>]\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, length: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.minn: <span class=\"hljs-built_in\">int</span> = -<span class=\"hljs-number\">1</span>\n        self.maxx: <span class=\"hljs-built_in\">int</span> = -<span class=\"hljs-number\">1</span>\n        self.map_left: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>] = [-<span class=\"hljs-number\">1</span>] * length\n        self.left: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n        self.right: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; node = Node(length=27)\n        &gt;&gt;&gt; repr(node)\n        &#x27;min_value: -1, max_value: -1&#x27;\n        &gt;&gt;&gt; repr(node) == str(node)\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;min_value: <span class=\"hljs-subst\">{self.minn}</span>, max_value: <span class=\"hljs-subst\">{self.maxx}</span>&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">build_tree</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; Node:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Builds the tree for arr and returns the root\n    of the constructed tree\n\n    &gt;&gt;&gt; build_tree(test_array)\n    min_value: 0, max_value: 9\n    &quot;&quot;&quot;</span>\n    root = Node(<span class=\"hljs-built_in\">len</span>(arr))\n    root.minn, root.maxx = <span class=\"hljs-built_in\">min</span>(arr), <span class=\"hljs-built_in\">max</span>(arr)\n    <span class=\"hljs-comment\"># Leaf node case where the node contains only one unique value</span>\n    <span class=\"hljs-keyword\">if</span> root.minn == root.maxx:\n        <span class=\"hljs-keyword\">return</span> root\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Take the mean of min and max element of arr as the pivot and\n    partition arr into left_arr and right_arr with all elements &lt;= pivot in the\n    left_arr and the rest in right_arr, maintaining the order of the elements,\n    then recursively build trees for left_arr and right_arr\n    &quot;&quot;&quot;</span>\n    pivot = (root.minn + root.maxx) // <span class=\"hljs-number\">2</span>\n    left_arr, right_arr = [], []\n    <span class=\"hljs-keyword\">for</span> index, num <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(arr):\n        <span class=\"hljs-keyword\">if</span> num &lt;= pivot:\n            left_arr.append(num)\n        <span class=\"hljs-keyword\">else</span>:\n            right_arr.append(num)\n        root.map_left[index] = <span class=\"hljs-built_in\">len</span>(left_arr)\n    root.left = build_tree(left_arr)\n    root.right = build_tree(right_arr)\n    <span class=\"hljs-keyword\">return</span> root\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rank_till_index</span>(<span class=\"hljs-params\">node: Node, num: <span class=\"hljs-built_in\">int</span>, index: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the number of occurrences of num in interval [0, index] in the list\n\n    &gt;&gt;&gt; root = build_tree(test_array)\n    &gt;&gt;&gt; rank_till_index(root, 6, 6)\n    1\n    &gt;&gt;&gt; rank_till_index(root, 2, 0)\n    1\n    &gt;&gt;&gt; rank_till_index(root, 1, 10)\n    2\n    &gt;&gt;&gt; rank_till_index(root, 17, 7)\n    0\n    &gt;&gt;&gt; rank_till_index(root, 0, 9)\n    1\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\"># Leaf node cases</span>\n    <span class=\"hljs-keyword\">if</span> node.minn == node.maxx:\n        <span class=\"hljs-keyword\">return</span> index + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> node.minn == num <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n    pivot = (node.minn + node.maxx) // <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">if</span> num &lt;= pivot:\n        <span class=\"hljs-comment\"># go the left subtree and map index to the left subtree</span>\n        <span class=\"hljs-keyword\">return</span> rank_till_index(node.left, num, node.map_left[index] - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-comment\"># go to the right subtree and map index to the right subtree</span>\n        <span class=\"hljs-keyword\">return</span> rank_till_index(node.right, num, index - node.map_left[index])\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rank</span>(<span class=\"hljs-params\">node: Node, num: <span class=\"hljs-built_in\">int</span>, start: <span class=\"hljs-built_in\">int</span>, end: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the number of occurrences of num in interval [start, end] in the list\n\n    &gt;&gt;&gt; root = build_tree(test_array)\n    &gt;&gt;&gt; rank(root, 6, 3, 13)\n    2\n    &gt;&gt;&gt; rank(root, 2, 0, 19)\n    4\n    &gt;&gt;&gt; rank(root, 9, 2 ,2)\n    0\n    &gt;&gt;&gt; rank(root, 0, 5, 10)\n    2\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> start &gt; end:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    rank_till_end = rank_till_index(node, num, end)\n    rank_before_start = rank_till_index(node, num, start - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">return</span> rank_till_end - rank_before_start\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quantile</span>(<span class=\"hljs-params\">node: Node, index: <span class=\"hljs-built_in\">int</span>, start: <span class=\"hljs-built_in\">int</span>, end: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the index&#x27;th smallest element in interval [start, end] in the list\n    index is 0-indexed\n\n    &gt;&gt;&gt; root = build_tree(test_array)\n    &gt;&gt;&gt; quantile(root, 2, 2, 5)\n    5\n    &gt;&gt;&gt; quantile(root, 5, 2, 13)\n    4\n    &gt;&gt;&gt; quantile(root, 0, 6, 6)\n    8\n    &gt;&gt;&gt; quantile(root, 4, 2, 5)\n    -1\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> index &gt; (end - start) <span class=\"hljs-keyword\">or</span> start &gt; end:\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-comment\"># Leaf node case</span>\n    <span class=\"hljs-keyword\">if</span> node.minn == node.maxx:\n        <span class=\"hljs-keyword\">return</span> node.minn\n    <span class=\"hljs-comment\"># Number of elements in the left subtree in interval [start, end]</span>\n    num_elements_in_left_tree = node.map_left[end] - (\n        node.map_left[start - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">if</span> start <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n    )\n    <span class=\"hljs-keyword\">if</span> num_elements_in_left_tree &gt; index:\n        <span class=\"hljs-keyword\">return</span> quantile(\n            node.left,\n            index,\n            (node.map_left[start - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">if</span> start <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>),\n            node.map_left[end] - <span class=\"hljs-number\">1</span>,\n        )\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> quantile(\n            node.right,\n            index - num_elements_in_left_tree,\n            start - (node.map_left[start - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">if</span> start <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>),\n            end - node.map_left[end],\n        )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">range_counting</span>(<span class=\"hljs-params\">\n    node: Node, start: <span class=\"hljs-built_in\">int</span>, end: <span class=\"hljs-built_in\">int</span>, start_num: <span class=\"hljs-built_in\">int</span>, end_num: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the number of elememts in range [start_num, end_num]\n    in interval [start, end] in the list\n\n    &gt;&gt;&gt; root = build_tree(test_array)\n    &gt;&gt;&gt; range_counting(root, 1, 10, 3, 7)\n    3\n    &gt;&gt;&gt; range_counting(root, 2, 2, 1, 4)\n    1\n    &gt;&gt;&gt; range_counting(root, 0, 19, 0, 100)\n    20\n    &gt;&gt;&gt; range_counting(root, 1, 0, 1, 100)\n    0\n    &gt;&gt;&gt; range_counting(root, 0, 17, 100, 1)\n    0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> (\n        start &gt; end\n        <span class=\"hljs-keyword\">or</span> start_num &gt; end_num\n        <span class=\"hljs-keyword\">or</span> node.minn &gt; end_num\n        <span class=\"hljs-keyword\">or</span> node.maxx &lt; start_num\n    ):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">if</span> start_num &lt;= node.minn <span class=\"hljs-keyword\">and</span> node.maxx &lt;= end_num:\n        <span class=\"hljs-keyword\">return</span> end - start + <span class=\"hljs-number\">1</span>\n    left = range_counting(\n        node.left,\n        (node.map_left[start - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">if</span> start <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>),\n        node.map_left[end] - <span class=\"hljs-number\">1</span>,\n        start_num,\n        end_num,\n    )\n    right = range_counting(\n        node.right,\n        start - (node.map_left[start - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">if</span> start <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>),\n        end - node.map_left[end],\n        start_num,\n        end_num,\n    )\n    <span class=\"hljs-keyword\">return</span> left + right\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Aniruddha Bhattacharjee",
      "email": "aniruddha97bhatt@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
