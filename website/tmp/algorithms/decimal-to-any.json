{
  "slug": "decimal-to-any",
  "name": "Decimal to Any",
  "categories": ["conversions"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "conversions/decimal_to_any.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/conversions/decimal_to_any.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Convert a positive Decimal Number to Any Other Representation&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decimal_to_any</span>(<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">int</span>, base: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Convert a positive integer to another base as str.\n    &gt;&gt;&gt; decimal_to_any(0, 2)\n    &#x27;0&#x27;\n    &gt;&gt;&gt; decimal_to_any(5, 4)\n    &#x27;11&#x27;\n    &gt;&gt;&gt; decimal_to_any(20, 3)\n    &#x27;202&#x27;\n    &gt;&gt;&gt; decimal_to_any(58, 16)\n    &#x27;3A&#x27;\n    &gt;&gt;&gt; decimal_to_any(243, 17)\n    &#x27;E5&#x27;\n    &gt;&gt;&gt; decimal_to_any(34923, 36)\n    &#x27;QY3&#x27;\n    &gt;&gt;&gt; decimal_to_any(10, 11)\n    &#x27;A&#x27;\n    &gt;&gt;&gt; decimal_to_any(16, 16)\n    &#x27;10&#x27;\n    &gt;&gt;&gt; decimal_to_any(36, 36)\n    &#x27;10&#x27;\n    &gt;&gt;&gt; # negatives will error\n    &gt;&gt;&gt; decimal_to_any(-45, 8)  # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    ValueError: parameter must be positive int\n    &gt;&gt;&gt; # floats will error\n    &gt;&gt;&gt; decimal_to_any(34.4, 6) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    TypeError: int() can&#x27;t convert non-string with explicit base\n    &gt;&gt;&gt; # a float base will error\n    &gt;&gt;&gt; decimal_to_any(5, 2.5) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    TypeError: &#x27;float&#x27; object cannot be interpreted as an integer\n    &gt;&gt;&gt; # a str base will error\n    &gt;&gt;&gt; decimal_to_any(10, &#x27;16&#x27;) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    TypeError: &#x27;str&#x27; object cannot be interpreted as an integer\n    &gt;&gt;&gt; # a base less than 2 will error\n    &gt;&gt;&gt; decimal_to_any(7, 0) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    ValueError: base must be &gt;= 2\n    &gt;&gt;&gt; # a base greater than 36 will error\n    &gt;&gt;&gt; decimal_to_any(34, 37) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    ValueError: base must be &lt;= 36\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(num, <span class=\"hljs-built_in\">float</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;int() can&#x27;t convert non-string with explicit base&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> num &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;parameter must be positive int&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(base, <span class=\"hljs-built_in\">str</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;&#x27;str&#x27; object cannot be interpreted as an integer&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(base, <span class=\"hljs-built_in\">float</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;&#x27;float&#x27; object cannot be interpreted as an integer&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> base <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;base must be &gt;= 2&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> base &gt; <span class=\"hljs-number\">36</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;base must be &lt;= 36&quot;</span>)\n    <span class=\"hljs-comment\"># fmt: off</span>\n    ALPHABET_VALUES = {<span class=\"hljs-string\">&#x27;10&#x27;</span>: <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;11&#x27;</span>: <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;12&#x27;</span>: <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;13&#x27;</span>: <span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-string\">&#x27;14&#x27;</span>: <span class=\"hljs-string\">&#x27;E&#x27;</span>, <span class=\"hljs-string\">&#x27;15&#x27;</span>: <span class=\"hljs-string\">&#x27;F&#x27;</span>,\n                       <span class=\"hljs-string\">&#x27;16&#x27;</span>: <span class=\"hljs-string\">&#x27;G&#x27;</span>, <span class=\"hljs-string\">&#x27;17&#x27;</span>: <span class=\"hljs-string\">&#x27;H&#x27;</span>, <span class=\"hljs-string\">&#x27;18&#x27;</span>: <span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-string\">&#x27;19&#x27;</span>: <span class=\"hljs-string\">&#x27;J&#x27;</span>, <span class=\"hljs-string\">&#x27;20&#x27;</span>: <span class=\"hljs-string\">&#x27;K&#x27;</span>, <span class=\"hljs-string\">&#x27;21&#x27;</span>: <span class=\"hljs-string\">&#x27;L&#x27;</span>,\n                       <span class=\"hljs-string\">&#x27;22&#x27;</span>: <span class=\"hljs-string\">&#x27;M&#x27;</span>, <span class=\"hljs-string\">&#x27;23&#x27;</span>: <span class=\"hljs-string\">&#x27;N&#x27;</span>, <span class=\"hljs-string\">&#x27;24&#x27;</span>: <span class=\"hljs-string\">&#x27;O&#x27;</span>, <span class=\"hljs-string\">&#x27;25&#x27;</span>: <span class=\"hljs-string\">&#x27;P&#x27;</span>, <span class=\"hljs-string\">&#x27;26&#x27;</span>: <span class=\"hljs-string\">&#x27;Q&#x27;</span>, <span class=\"hljs-string\">&#x27;27&#x27;</span>: <span class=\"hljs-string\">&#x27;R&#x27;</span>,\n                       <span class=\"hljs-string\">&#x27;28&#x27;</span>: <span class=\"hljs-string\">&#x27;S&#x27;</span>, <span class=\"hljs-string\">&#x27;29&#x27;</span>: <span class=\"hljs-string\">&#x27;T&#x27;</span>, <span class=\"hljs-string\">&#x27;30&#x27;</span>: <span class=\"hljs-string\">&#x27;U&#x27;</span>, <span class=\"hljs-string\">&#x27;31&#x27;</span>: <span class=\"hljs-string\">&#x27;V&#x27;</span>, <span class=\"hljs-string\">&#x27;32&#x27;</span>: <span class=\"hljs-string\">&#x27;W&#x27;</span>, <span class=\"hljs-string\">&#x27;33&#x27;</span>: <span class=\"hljs-string\">&#x27;X&#x27;</span>,\n                       <span class=\"hljs-string\">&#x27;34&#x27;</span>: <span class=\"hljs-string\">&#x27;Y&#x27;</span>, <span class=\"hljs-string\">&#x27;35&#x27;</span>: <span class=\"hljs-string\">&#x27;Z&#x27;</span>}\n    <span class=\"hljs-comment\"># fmt: on</span>\n    new_value = <span class=\"hljs-string\">&quot;&quot;</span>\n    mod = <span class=\"hljs-number\">0</span>\n    div = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> div != <span class=\"hljs-number\">1</span>:\n        div, mod = <span class=\"hljs-built_in\">divmod</span>(num, base)\n        <span class=\"hljs-keyword\">if</span> base &gt;= <span class=\"hljs-number\">11</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">9</span> &lt; mod &lt; <span class=\"hljs-number\">36</span>:\n            actual_value = ALPHABET_VALUES[<span class=\"hljs-built_in\">str</span>(mod)]\n            mod = actual_value\n        new_value += <span class=\"hljs-built_in\">str</span>(mod)\n        div = num // base\n        num = div\n        <span class=\"hljs-keyword\">if</span> div == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(new_value[::-<span class=\"hljs-number\">1</span>])\n        <span class=\"hljs-keyword\">elif</span> div == <span class=\"hljs-number\">1</span>:\n            new_value += <span class=\"hljs-built_in\">str</span>(div)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(new_value[::-<span class=\"hljs-number\">1</span>])\n\n    <span class=\"hljs-keyword\">return</span> new_value[::-<span class=\"hljs-number\">1</span>]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n\n    <span class=\"hljs-keyword\">for</span> base <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">37</span>):\n        <span class=\"hljs-keyword\">for</span> num <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1000</span>):\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">int</span>(decimal_to_any(num, base), base) == num, (\n                num,\n                base,\n                decimal_to_any(num, base),\n                <span class=\"hljs-built_in\">int</span>(decimal_to_any(num, base), base),\n            )\n"
    },
    "dart": {
      "dir": "conversions/Decimal_To_Any.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions/Decimal_To_Any.dart",
      "code": "<span class=\"hljs-comment\">//Convert a Decimal Number to Any Other Representation</span>\n<span class=\"hljs-comment\">//https://en.wikipedia.org/wiki/Positional_notation#Base_conversion</span>\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)); <span class=\"hljs-comment\">//Expected &#x27;0&#x27;</span>\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>)); <span class=\"hljs-comment\">//Expected &#x27;11&#x27;</span>\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">//Expected &#x27;202&#x27;</span>\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">-58</span>, <span class=\"hljs-number\">16</span>)); <span class=\"hljs-comment\">//Expected &#x27;-3A&#x27;</span>\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">243</span>, <span class=\"hljs-number\">17</span>)); <span class=\"hljs-comment\">//Expected &#x27;E5&#x27;</span>\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">34923</span>, <span class=\"hljs-number\">36</span>)); <span class=\"hljs-comment\">//Expected &#x27;QY3&#x27;</span>\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>)); <span class=\"hljs-comment\">//Expected &#x27;A&#x27;</span>\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">-16</span>, <span class=\"hljs-number\">16</span>)); <span class=\"hljs-comment\">//Expected &#x27;-10&#x27;</span>\n  <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">36</span>)); <span class=\"hljs-comment\">//Expected &#x27;10&#x27;</span>\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-built_in\">print</span>(decimal_to_any(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">37</span>)); <span class=\"hljs-comment\">//Expected Error</span>\n  } <span class=\"hljs-keyword\">on</span> FormatException {\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Base value is not supported&quot;</span>);\n  }\n}\n\n<span class=\"hljs-built_in\">String</span> decimal_to_any(<span class=\"hljs-built_in\">int</span> value, <span class=\"hljs-built_in\">int</span> base) {\n  <span class=\"hljs-keyword\">var</span> ALPHABET_VALUES = {\n    <span class=\"hljs-number\">10</span>: <span class=\"hljs-string\">&#x27;A&#x27;</span>,\n    <span class=\"hljs-number\">11</span>: <span class=\"hljs-string\">&#x27;B&#x27;</span>,\n    <span class=\"hljs-number\">12</span>: <span class=\"hljs-string\">&#x27;C&#x27;</span>,\n    <span class=\"hljs-number\">13</span>: <span class=\"hljs-string\">&#x27;D&#x27;</span>,\n    <span class=\"hljs-number\">14</span>: <span class=\"hljs-string\">&#x27;E&#x27;</span>,\n    <span class=\"hljs-number\">15</span>: <span class=\"hljs-string\">&#x27;F&#x27;</span>,\n    <span class=\"hljs-number\">16</span>: <span class=\"hljs-string\">&#x27;G&#x27;</span>,\n    <span class=\"hljs-number\">17</span>: <span class=\"hljs-string\">&#x27;H&#x27;</span>,\n    <span class=\"hljs-number\">18</span>: <span class=\"hljs-string\">&#x27;I&#x27;</span>,\n    <span class=\"hljs-number\">19</span>: <span class=\"hljs-string\">&#x27;J&#x27;</span>,\n    <span class=\"hljs-number\">20</span>: <span class=\"hljs-string\">&#x27;K&#x27;</span>,\n    <span class=\"hljs-number\">21</span>: <span class=\"hljs-string\">&#x27;L&#x27;</span>,\n    <span class=\"hljs-number\">22</span>: <span class=\"hljs-string\">&#x27;M&#x27;</span>,\n    <span class=\"hljs-number\">23</span>: <span class=\"hljs-string\">&#x27;N&#x27;</span>,\n    <span class=\"hljs-number\">24</span>: <span class=\"hljs-string\">&#x27;O&#x27;</span>,\n    <span class=\"hljs-number\">25</span>: <span class=\"hljs-string\">&#x27;P&#x27;</span>,\n    <span class=\"hljs-number\">26</span>: <span class=\"hljs-string\">&#x27;Q&#x27;</span>,\n    <span class=\"hljs-number\">27</span>: <span class=\"hljs-string\">&#x27;R&#x27;</span>,\n    <span class=\"hljs-number\">28</span>: <span class=\"hljs-string\">&#x27;S&#x27;</span>,\n    <span class=\"hljs-number\">29</span>: <span class=\"hljs-string\">&#x27;T&#x27;</span>,\n    <span class=\"hljs-number\">30</span>: <span class=\"hljs-string\">&#x27;U&#x27;</span>,\n    <span class=\"hljs-number\">31</span>: <span class=\"hljs-string\">&#x27;V&#x27;</span>,\n    <span class=\"hljs-number\">32</span>: <span class=\"hljs-string\">&#x27;W&#x27;</span>,\n    <span class=\"hljs-number\">33</span>: <span class=\"hljs-string\">&#x27;X&#x27;</span>,\n    <span class=\"hljs-number\">34</span>: <span class=\"hljs-string\">&#x27;Y&#x27;</span>,\n    <span class=\"hljs-number\">35</span>: <span class=\"hljs-string\">&#x27;Z&#x27;</span>\n  };\n\n  <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0&quot;</span>;\n\n  <span class=\"hljs-keyword\">if</span> (base &lt; <span class=\"hljs-number\">2</span> || base &gt; <span class=\"hljs-number\">36</span>) <span class=\"hljs-keyword\">throw</span> FormatException(<span class=\"hljs-string\">&quot;Base not supported!&quot;</span>);\n\n  <span class=\"hljs-built_in\">bool</span> negative = <span class=\"hljs-keyword\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (value &lt; <span class=\"hljs-number\">0</span>) {\n    negative = <span class=\"hljs-keyword\">true</span>;\n    value *= <span class=\"hljs-number\">-1</span>;\n  }\n\n  <span class=\"hljs-built_in\">String</span> output = <span class=\"hljs-string\">&quot;&quot;</span>;\n  <span class=\"hljs-keyword\">while</span> (value &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-built_in\">int</span> remainder = value % base;\n    value = value ~/ base;\n    output =\n        (remainder &lt; <span class=\"hljs-number\">10</span> ? remainder.toString() : ALPHABET_VALUES[remainder]) +\n            output;\n  }\n\n  <span class=\"hljs-keyword\">return</span> negative ? <span class=\"hljs-string\">&#x27;-&#x27;</span> + output : output;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Nika Losaberidze",
      "email": "nlosa16@freeuni.edu.ge",
      "commits": 1
    },
    {
      "name": "bnMikheili",
      "email": "39998190+bnMikheili@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kevin C. Escobedo",
      "email": "escobedo001@gmail.com",
      "commits": 1
    },
    {
      "name": "Tavernini Gabriel",
      "email": "gabriel.tavernini@buonarroti.tn.it",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
