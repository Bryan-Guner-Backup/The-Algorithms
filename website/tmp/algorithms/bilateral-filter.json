{
  "slug": "bilateral-filter",
  "name": "Bilateral Filter",
  "categories": ["digitalimageprocessing", "filters"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "digital_image_processing/filters/bilateral_filter.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/digital_image_processing/filters/bilateral_filter.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nImplementation of Bilateral filter\n\nInputs:\n    img: A 2d image with values in between 0 and 1\n    varS: variance in space dimension.\n    varI: variance in Intensity.\n    N: Kernel size(Must be an odd number)\nOutput:\n    img:A 2d zero padded image with values in between 0 and 1\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> math\n<span class=\"hljs-keyword\">import</span> sys\n\n<span class=\"hljs-keyword\">import</span> cv2\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">vec_gaussian</span>(<span class=\"hljs-params\">img: np.ndarray, variance: <span class=\"hljs-built_in\">float</span></span>) -&gt; np.ndarray:\n    <span class=\"hljs-comment\"># For applying gaussian function for each element in matrix.</span>\n    sigma = math.sqrt(variance)\n    cons = <span class=\"hljs-number\">1</span> / (sigma * math.sqrt(<span class=\"hljs-number\">2</span> * math.pi))\n    <span class=\"hljs-keyword\">return</span> cons * np.exp(-((img / sigma) ** <span class=\"hljs-number\">2</span>) * <span class=\"hljs-number\">0.5</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_slice</span>(<span class=\"hljs-params\">img: np.ndarray, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span>, kernel_size: <span class=\"hljs-built_in\">int</span></span>) -&gt; np.ndarray:\n    half = kernel_size // <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">return</span> img[x - half : x + half + <span class=\"hljs-number\">1</span>, y - half : y + half + <span class=\"hljs-number\">1</span>]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_gauss_kernel</span>(<span class=\"hljs-params\">kernel_size: <span class=\"hljs-built_in\">int</span>, spatial_variance: <span class=\"hljs-built_in\">float</span></span>) -&gt; np.ndarray:\n    <span class=\"hljs-comment\"># Creates a gaussian kernel of given dimension.</span>\n    arr = np.zeros((kernel_size, kernel_size))\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, kernel_size):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, kernel_size):\n            arr[i, j] = math.sqrt(\n                <span class=\"hljs-built_in\">abs</span>(i - kernel_size // <span class=\"hljs-number\">2</span>) ** <span class=\"hljs-number\">2</span> + <span class=\"hljs-built_in\">abs</span>(j - kernel_size // <span class=\"hljs-number\">2</span>) ** <span class=\"hljs-number\">2</span>\n            )\n    <span class=\"hljs-keyword\">return</span> vec_gaussian(arr, spatial_variance)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bilateral_filter</span>(<span class=\"hljs-params\">\n    img: np.ndarray,\n    spatial_variance: <span class=\"hljs-built_in\">float</span>,\n    intensity_variance: <span class=\"hljs-built_in\">float</span>,\n    kernel_size: <span class=\"hljs-built_in\">int</span>,\n</span>) -&gt; np.ndarray:\n    img2 = np.zeros(img.shape)\n    gaussKer = get_gauss_kernel(kernel_size, spatial_variance)\n    sizeX, sizeY = img.shape\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(kernel_size // <span class=\"hljs-number\">2</span>, sizeX - kernel_size // <span class=\"hljs-number\">2</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(kernel_size // <span class=\"hljs-number\">2</span>, sizeY - kernel_size // <span class=\"hljs-number\">2</span>):\n\n            imgS = get_slice(img, i, j, kernel_size)\n            imgI = imgS - imgS[kernel_size // <span class=\"hljs-number\">2</span>, kernel_size // <span class=\"hljs-number\">2</span>]\n            imgIG = vec_gaussian(imgI, intensity_variance)\n            weights = np.multiply(gaussKer, imgIG)\n            vals = np.multiply(imgS, weights)\n            val = np.<span class=\"hljs-built_in\">sum</span>(vals) / np.<span class=\"hljs-built_in\">sum</span>(weights)\n            img2[i, j] = val\n    <span class=\"hljs-keyword\">return</span> img2\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parse_args</span>(<span class=\"hljs-params\">args: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>:\n    filename = args[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">if</span> args[<span class=\"hljs-number\">1</span>:] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;../image_data/lena.jpg&quot;</span>\n    spatial_variance = <span class=\"hljs-built_in\">float</span>(args[<span class=\"hljs-number\">2</span>]) <span class=\"hljs-keyword\">if</span> args[<span class=\"hljs-number\">2</span>:] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1.0</span>\n    intensity_variance = <span class=\"hljs-built_in\">float</span>(args[<span class=\"hljs-number\">3</span>]) <span class=\"hljs-keyword\">if</span> args[<span class=\"hljs-number\">3</span>:] <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1.0</span>\n    <span class=\"hljs-keyword\">if</span> args[<span class=\"hljs-number\">4</span>:]:\n        kernel_size = <span class=\"hljs-built_in\">int</span>(args[<span class=\"hljs-number\">4</span>])\n        kernel_size = kernel_size + <span class=\"hljs-built_in\">abs</span>(kernel_size % <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        kernel_size = <span class=\"hljs-number\">5</span>\n    <span class=\"hljs-keyword\">return</span> filename, spatial_variance, intensity_variance, kernel_size\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    filename, spatial_variance, intensity_variance, kernel_size = parse_args(sys.argv)\n    img = cv2.imread(filename, <span class=\"hljs-number\">0</span>)\n    cv2.imshow(<span class=\"hljs-string\">&quot;input image&quot;</span>, img)\n\n    out = img / <span class=\"hljs-number\">255</span>\n    out = out.astype(<span class=\"hljs-string\">&quot;float32&quot;</span>)\n    out = bilateral_filter(out, spatial_variance, intensity_variance, kernel_size)\n    out = out * <span class=\"hljs-number\">255</span>\n    out = np.uint8(out)\n    cv2.imshow(<span class=\"hljs-string\">&quot;output image&quot;</span>, out)\n    cv2.waitKey(<span class=\"hljs-number\">0</span>)\n    cv2.destroyAllWindows()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "praveennadiminti",
      "email": "praveennadiminti@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
