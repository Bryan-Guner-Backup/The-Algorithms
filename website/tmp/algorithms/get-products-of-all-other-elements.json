{
  "slug": "get-products-of-all-other-elements",
  "name": "Get Products of All Other Elements",
  "categories": ["datastructures", "array"],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "data_structures/arrays/get_products_of_all_other_elements.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/get_products_of_all_other_elements.rb",
      "code": "<span class=\"hljs-comment\"># Arrays - Get Products of all other elements in Ruby</span>\n\n<span class=\"hljs-comment\"># Algorithm challenge description:</span>\n<span class=\"hljs-comment\"># Given an array of integers, return a new array such that</span>\n<span class=\"hljs-comment\"># each element at index `i` of the new array is the product of</span>\n<span class=\"hljs-comment\"># all the numbers in the original array except the one at `i`.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># This file solves the algorithm in 3 approaches:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 1. Brute force</span>\n<span class=\"hljs-comment\"># 2. Left and Right product lists</span>\n<span class=\"hljs-comment\"># 3. O(1) space approach</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 1. Brute force solution</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">calculate_products_of_all_other_elements</span><span class=\"hljs-params\">(nums)</span></span>\n  product_of_other_elements = Array.new(nums.count, <span class=\"hljs-number\">1</span>)\n\n  nums.count.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\n    nums.count.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|j|</span>\n      <span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">if</span> i == j\n\n      product_of_other_elements[i] = product_of_other_elements[i] * nums[j]\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  product_of_other_elements\n<span class=\"hljs-keyword\">end</span>\n\nputs(calculate_products_of_all_other_elements([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: Left and Right product lists</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Complexity analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time complexity: O(N) where N represents the number of elements in the input</span>\n<span class=\"hljs-comment\"># array. We use one iteration to construct the array prefix_products, one to construct</span>\n<span class=\"hljs-comment\"># the array suffix_products and one last to construct the answeranswer array using L and R.</span>\n<span class=\"hljs-comment\"># Space complexity: O(N) used up by the two intermediate arrays that</span>\n<span class=\"hljs-comment\"># we constructed to keep track of product of elements to the left and right.</span>\n\n<span class=\"hljs-comment\"># Generates prefix products</span>\n<span class=\"hljs-comment\"># prefix_products[i] contains the product of all the elements to the left</span>\n<span class=\"hljs-comment\"># Note: for the element at index &#x27;0&#x27;, there are no elements to the left,</span>\n<span class=\"hljs-comment\"># so the prefix_products[0] would be 1</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">build_prefix_products</span><span class=\"hljs-params\">(nums)</span></span>\n  prefix_products = []\n\n  nums.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num|</span>\n    prefix_products &lt;&lt; <span class=\"hljs-keyword\">if</span> prefix_products.count &gt; <span class=\"hljs-number\">0</span>\n                         prefix_products.last * num\n                       <span class=\"hljs-keyword\">else</span>\n                         num\n                       <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  prefix_products\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Generates suffix products</span>\n<span class=\"hljs-comment\"># suffix_products[i] contains the product of all the elements to the right</span>\n<span class=\"hljs-comment\"># Note: for the element at index &#x27;length - 1&#x27;, there are no elements to the right,</span>\n<span class=\"hljs-comment\"># so the suffix_products[length - 1] would be 1</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">build_suffix_products</span><span class=\"hljs-params\">(nums)</span></span>\n  suffix_products = []\n\n  nums.reverse.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num|</span>\n    suffix_products &lt;&lt; <span class=\"hljs-keyword\">if</span> suffix_products.count &gt; <span class=\"hljs-number\">0</span>\n                         suffix_products.last * num\n                       <span class=\"hljs-keyword\">else</span>\n                         num\n                       <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  suffix_products\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Builds output</span>\n<span class=\"hljs-comment\"># For the first element, suffix_products[i] would be product except self</span>\n<span class=\"hljs-comment\"># For the last element of the array, product except self would be prefix_products[i]</span>\n<span class=\"hljs-comment\"># Else, multiple product of all elements to the left and to the right</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">output</span><span class=\"hljs-params\">(prefix_products, suffix_products, nums)</span></span>\n  result = []\n\n  nums.count.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|index|</span>\n    result &lt;&lt; <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">0</span>\n                suffix_products[index + <span class=\"hljs-number\">1</span>]\n              <span class=\"hljs-keyword\">elsif</span> index == nums.count - <span class=\"hljs-number\">1</span>\n                prefix_products[index - <span class=\"hljs-number\">1</span>]\n              <span class=\"hljs-keyword\">else</span>\n                (prefix_products[index - <span class=\"hljs-number\">1</span>] * suffix_products[index + <span class=\"hljs-number\">1</span>])\n              <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  result\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Generate result from the product of prefixes and suffixes</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">products</span><span class=\"hljs-params\">(nums)</span></span>\n  prefix_products = build_prefix_products(nums)\n  suffix_products = build_suffix_products(nums)\n  suffix_products = suffix_products.reverse\n\n  output(prefix_products, suffix_products, nums)\n<span class=\"hljs-keyword\">end</span>\n\nputs(products([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))\n<span class=\"hljs-comment\"># =&gt; [6, 3, 2]</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 3: O(1) space approach</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># This approach is essentially an extension of the approach 2.</span>\n<span class=\"hljs-comment\"># Basically, we will be using the output array as one of L or R and we will</span>\n<span class=\"hljs-comment\"># be constructing the other one on the fly.</span>\n\n<span class=\"hljs-comment\"># Complexity analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time complexity: O(N) where N represents the number of elements in the input</span>\n<span class=\"hljs-comment\"># array. We use one iteration to construct the array L, one to update the array</span>\n<span class=\"hljs-comment\"># answer.</span>\n\n<span class=\"hljs-comment\"># Space complexity: O(1) since don&#x27;t use any additional array for our</span>\n<span class=\"hljs-comment\"># computations. The problem statement mentions that using the answer</span>\n<span class=\"hljs-comment\"># array doesn&#x27;t add to the space complexity.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">products</span><span class=\"hljs-params\">(nums)</span></span>\n  <span class=\"hljs-keyword\">return</span> [] <span class=\"hljs-keyword\">if</span> nums.count &lt; <span class=\"hljs-number\">2</span>\n\n  res = [<span class=\"hljs-number\">1</span>]\n\n  <span class=\"hljs-comment\"># res[i] contains the product of all the elements to the left</span>\n  <span class=\"hljs-comment\"># Note: for the element at index &#x27;0&#x27;, there are no elements to the left,</span>\n  <span class=\"hljs-comment\"># so the res[0] would be 1</span>\n  (<span class=\"hljs-number\">0</span>..(nums.count - <span class=\"hljs-number\">2</span>)).each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\n    num = nums[i]\n    res &lt;&lt; num * res[i]\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-comment\"># product contains the product of all the elements to the right</span>\n  <span class=\"hljs-comment\"># Note: for the element at index &#x27;length - 1&#x27;, there are no elements to the right,</span>\n  <span class=\"hljs-comment\"># so the product would be 1</span>\n  product = <span class=\"hljs-number\">1</span>\n\n  (nums.count - <span class=\"hljs-number\">1</span>).downto(<span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\n    num = nums[i]\n    <span class=\"hljs-comment\"># For the index &#x27;i&#x27;, product would contain the</span>\n    <span class=\"hljs-comment\"># product of all elements to the right. We update product accordingly.</span>\n    res[i - <span class=\"hljs-number\">1</span>] *= (product * num)\n    product *= num\n  <span class=\"hljs-keyword\">end</span>\n\n  res\n<span class=\"hljs-keyword\">end</span>\n\nputs(products([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]))\n<span class=\"hljs-comment\"># =&gt; [6, 3, 2]</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 12
    }
  ],
  "explanationUrl": {}
}
