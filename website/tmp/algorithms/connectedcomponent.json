{
  "slug": "connectedcomponent",
  "name": "ConnectedComponent",
  "categories": ["datastructures", "graphs"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Graphs/ConnectedComponent.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Graphs/ConnectedComponent.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Graphs;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.HashSet;\r\n<span class=\"hljs-keyword\">import</span> java.util.Set;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A class that counts the number of different connected components in a graph\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> Lukas Keul, Florian Mercks\r\n */</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;&gt; {\r\n\r\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\r\n    E name;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(E name)</span> {\r\n      <span class=\"hljs-built_in\">this</span>.name = name;\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Edge</span> {\r\n    Node startNode, endNode;\r\n\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Edge</span><span class=\"hljs-params\">(Node startNode, Node endNode)</span> {\r\n      <span class=\"hljs-built_in\">this</span>.startNode = startNode;\r\n      <span class=\"hljs-built_in\">this</span>.endNode = endNode;\r\n    }\r\n  }\r\n\r\n  ArrayList&lt;Edge&gt; edgeList;\r\n  ArrayList&lt;Node&gt; nodeList;\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Graph</span><span class=\"hljs-params\">()</span> {\r\n    edgeList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Edge&gt;();\r\n    nodeList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Node&gt;();\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Adds a new Edge to the graph. If the nodes aren&#x27;t yet in nodeList, they will be added to it.\r\n   *\r\n   * <span class=\"hljs-doctag\">@param</span> startNode the starting Node from the edge\r\n   * <span class=\"hljs-doctag\">@param</span> endNode the ending Node from the edge\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(E startNode, E endNode)</span> {\r\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>, end = <span class=\"hljs-literal\">null</span>;\r\n    <span class=\"hljs-keyword\">for</span> (Node node : nodeList) {\r\n      <span class=\"hljs-keyword\">if</span> (startNode.compareTo(node.name) == <span class=\"hljs-number\">0</span>) {\r\n        start = node;\r\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (endNode.compareTo(node.name) == <span class=\"hljs-number\">0</span>) {\r\n        end = node;\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (start == <span class=\"hljs-literal\">null</span>) {\r\n      start = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(startNode);\r\n      nodeList.add(start);\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (end == <span class=\"hljs-literal\">null</span>) {\r\n      end = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(endNode);\r\n      nodeList.add(end);\r\n    }\r\n\r\n    edgeList.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(start, end));\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Main method used for counting the connected components. Iterates through the array of nodes to\r\n   * do a depth first search to get all nodes of the graph from the actual node. These nodes are\r\n   * added to the array markedNodes and will be ignored if they are chosen in the nodeList.\r\n   *\r\n   * <span class=\"hljs-doctag\">@return</span> returns the amount of unconnected graphs\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">countGraphs</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\r\n    Set&lt;Node&gt; markedNodes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;Node&gt;();\r\n\r\n    <span class=\"hljs-keyword\">for</span> (Node n : nodeList) {\r\n      <span class=\"hljs-keyword\">if</span> (!markedNodes.contains(n)) {\r\n        markedNodes.add(n);\r\n        markedNodes.addAll(depthFirstSearch(n, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Node&gt;()));\r\n        count++;\r\n      }\r\n    }\r\n\r\n    <span class=\"hljs-keyword\">return</span> count;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Implementation of depth first search.\r\n   *\r\n   * <span class=\"hljs-doctag\">@param</span> n the actual visiting node\r\n   * <span class=\"hljs-doctag\">@param</span> visited A list of already visited nodes in the depth first search\r\n   * <span class=\"hljs-doctag\">@return</span> returns a set of visited nodes\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> ArrayList&lt;Node&gt; <span class=\"hljs-title function_\">depthFirstSearch</span><span class=\"hljs-params\">(Node n, ArrayList&lt;Node&gt; visited)</span> {\r\n    visited.add(n);\r\n    <span class=\"hljs-keyword\">for</span> (Edge e : edgeList) {\r\n      <span class=\"hljs-keyword\">if</span> (e.startNode.equals(n) &amp;&amp; !visited.contains(e.endNode)) {\r\n        depthFirstSearch(e.endNode, visited);\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> visited;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConnectedComponent</span> {\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n    Graph&lt;Character&gt; graphChars = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>&lt;&gt;();\r\n\r\n    <span class=\"hljs-comment\">// Graph 1</span>\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>);\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>);\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>);\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>);\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>);\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;a&#x27;</span>);\r\n\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;y&#x27;</span>);\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;z&#x27;</span>);\r\n\r\n    graphChars.addEdge(<span class=\"hljs-string\">&#x27;w&#x27;</span>, <span class=\"hljs-string\">&#x27;w&#x27;</span>);\r\n\r\n    Graph&lt;Integer&gt; graphInts = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>&lt;&gt;();\r\n\r\n    <span class=\"hljs-comment\">// Graph 2</span>\r\n    graphInts.addEdge(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\r\n    graphInts.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\r\n    graphInts.addEdge(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);\r\n    graphInts.addEdge(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\r\n\r\n    graphInts.addEdge(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>);\r\n    graphInts.addEdge(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">10</span>);\r\n    graphInts.addEdge(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">8</span>);\r\n\r\n    System.out.println(<span class=\"hljs-string\">&quot;Amount of different char-graphs: &quot;</span> + graphChars.countGraphs());\r\n    System.out.println(<span class=\"hljs-string\">&quot;Amount of different int-graphs: &quot;</span> + graphInts.countGraphs());\r\n  }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Febaug",
      "email": "33418541+Febaug@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
