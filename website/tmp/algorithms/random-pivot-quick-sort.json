{
  "slug": "random-pivot-quick-sort",
  "name": "Random Pivot Quick Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/random_pivot_quick_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/random_pivot_quick_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nPicks the random index as the pivot\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> random\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">partition</span>(<span class=\"hljs-params\">A, left_index, right_index</span>):\r\n    pivot = A[left_index]\r\n    i = left_index + <span class=\"hljs-number\">1</span>\r\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(left_index + <span class=\"hljs-number\">1</span>, right_index):\r\n        <span class=\"hljs-keyword\">if</span> A[j] &lt; pivot:\r\n            A[j], A[i] = A[i], A[j]\r\n            i += <span class=\"hljs-number\">1</span>\r\n    A[left_index], A[i - <span class=\"hljs-number\">1</span>] = A[i - <span class=\"hljs-number\">1</span>], A[left_index]\r\n    <span class=\"hljs-keyword\">return</span> i - <span class=\"hljs-number\">1</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort_random</span>(<span class=\"hljs-params\">A, left, right</span>):\r\n    <span class=\"hljs-keyword\">if</span> left &lt; right:\r\n        pivot = random.randint(left, right - <span class=\"hljs-number\">1</span>)\r\n        A[pivot], A[left] = (\r\n            A[left],\r\n            A[pivot],\r\n        )  <span class=\"hljs-comment\"># switches the pivot with the left most bound</span>\r\n        pivot_index = partition(A, left, right)\r\n        quick_sort_random(\r\n            A, left, pivot_index\r\n        )  <span class=\"hljs-comment\"># recursive quicksort to the left of the pivot point</span>\r\n        quick_sort_random(\r\n            A, pivot_index + <span class=\"hljs-number\">1</span>, right\r\n        )  <span class=\"hljs-comment\"># recursive quicksort to the right of the pivot point</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\r\n    arr = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\r\n\r\n    quick_sort_random(arr, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(arr))\r\n\r\n    <span class=\"hljs-built_in\">print</span>(arr)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    main()\r\n"
    },
    "c-plus-plus": {
      "dir": "sorting/random_pivot_quick_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/random_pivot_quick_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of the [Random Pivot Quick\n * Sort](https://www.sanfoundry.com/cpp-program-implement-quick-sort-using-randomisation)\n * algorithm.\n * @details\n *          * A random pivot quick sort algorithm is pretty much same as quick\n * sort with a difference of having a logic of selecting next pivot element from\n * the input array.\n *          * Where in quick sort is fast, but still can give you the time\n * complexity of O(n^2) in worst case.\n *          * To avoid hitting the time complexity of O(n^2), we use the logic\n * of randomize the selection process of pivot element.\n *\n *          ### Logic\n *              * The logic is pretty simple, the only change is in the\n * partitioning algorithm, which is selecting the pivot element.\n *              * Instead of selecting the last or the first element from array\n * for pivot we use a random index to select pivot element.\n *              * This avoids hitting the O(n^2) time complexity in practical\n * use cases.\n *\n *       ### Partition Logic\n *           * Partitions are done such as numbers lower than the &quot;pivot&quot;\n * element is arranged on the left side of the &quot;pivot&quot;, and number larger than\n * the &quot;pivot&quot; element are arranged on the right part of the array.\n *\n *       ### Algorithm\n *           * Select the pivot element randomly using getRandomIndex() function\n * from this namespace.\n *           * Initialize the pInd (partition index) from the start of the\n * array.\n *           * Loop through the array from start to less than end. (from start\n * to &lt; end). (Inside the loop) :-\n *                   * Check if the current element (arr[i]) is less than the\n * pivot element in each iteration.\n *                   * If current element in the iteration is less than the\n * pivot element, then swap the elements at current index (i) and partition\n * index (pInd) and increment the partition index by one.\n *           * At the end of the loop, swap the pivot element with partition\n * index element.\n *           * Return the partition index from the function.\n *\n * @author [Nitin Sharma](https://github.com/foo290)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::is_sorted(), std::swap()</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">/// for std::array</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span>      <span class=\"hljs-comment\">/// for initializing random number generator</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;tuple&gt;</span>      <span class=\"hljs-comment\">/// for returning multiple values form a function at once</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/**\n * @brief Functions for the [Random Pivot Quick\n * Sort](https://www.sanfoundry.com/cpp-program-implement-quick-sort-using-randomisation)\n * implementation\n * @namespace random_pivot_quick_sort\n */</span>\n<span class=\"hljs-keyword\">namespace</span> random_pivot_quick_sort {\n<span class=\"hljs-comment\">/**\n * @brief Utility function to print the array\n * @tparam T size of the array\n * @param arr array used to print its content\n * @returns void\n * */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">showArray</span><span class=\"hljs-params\">(std::array&lt;<span class=\"hljs-type\">int64_t</span>, T&gt; arr)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-built_in\">size</span>(); i++) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Takes the start and end indices of an array and returns a random\n * int64_teger between the range of those two for selecting pivot element.\n *\n * @param start The starting index.\n * @param end The ending index.\n * @returns int64_t A random number between start and end index.\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title\">getRandomIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int64_t</span> start, <span class=\"hljs-type\">int64_t</span> end)</span> </span>{\n    <span class=\"hljs-built_in\">srand</span>(<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));  <span class=\"hljs-comment\">// Initialize random number generator.</span>\n    <span class=\"hljs-type\">int64_t</span> randomPivotIndex = start + <span class=\"hljs-built_in\">rand</span>() % (end - start + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">return</span> randomPivotIndex;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A partition function which handles the partition logic of quick sort.\n * @tparam size size of the array to be passed as argument.\n * @param start The start index of the passed array\n * @param end The ending index of the passed array\n * @returns std::tuple&lt;int64_t , std::array&lt;int64_t , size&gt;&gt; A tuple of pivot\n * index and pivot sorted array.\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> size&gt;\nstd::tuple&lt;<span class=\"hljs-type\">int64_t</span>, std::array&lt;<span class=\"hljs-type\">int64_t</span>, size&gt;&gt; <span class=\"hljs-built_in\">partition</span>(\n    std::array&lt;<span class=\"hljs-type\">int64_t</span>, size&gt; arr, <span class=\"hljs-type\">int64_t</span> start, <span class=\"hljs-type\">int64_t</span> end) {\n    <span class=\"hljs-type\">int64_t</span> pivot = arr[end];  <span class=\"hljs-comment\">// Randomly selected element will be here from</span>\n                               <span class=\"hljs-comment\">// caller function (quickSortRP()).</span>\n    <span class=\"hljs-type\">int64_t</span> pInd = start;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = start; i &lt; end; i++) {\n        <span class=\"hljs-keyword\">if</span> (arr[i] &lt;= pivot) {\n            std::<span class=\"hljs-built_in\">swap</span>(arr[i], arr[pInd]);  <span class=\"hljs-comment\">// swapping the elements from current</span>\n                                           <span class=\"hljs-comment\">// index to pInd.</span>\n            pInd++;\n        }\n    }\n    std::<span class=\"hljs-built_in\">swap</span>(arr[pInd],\n              arr[end]);  <span class=\"hljs-comment\">// swapping the pivot element to its sorted position</span>\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">make_tuple</span>(pInd, arr);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Random pivot quick sort function. This function is the starting point\n * of the algorithm.\n * @tparam size size of the array to be passed as argument.\n * @param start The start index of the passed array\n * @param end The ending index of the passed array\n * @returns std::array&lt;int64_t , size&gt; A fully sorted array in ascending order.\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> size&gt;\n<span class=\"hljs-function\">std::array&lt;<span class=\"hljs-type\">int64_t</span>, size&gt; <span class=\"hljs-title\">quickSortRP</span><span class=\"hljs-params\">(std::array&lt;<span class=\"hljs-type\">int64_t</span>, size&gt; arr,\n                                      <span class=\"hljs-type\">int64_t</span> start, <span class=\"hljs-type\">int64_t</span> end)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (start &lt; end) {\n        <span class=\"hljs-type\">int64_t</span> randomIndex = <span class=\"hljs-built_in\">getRandomIndex</span>(start, end);\n\n        <span class=\"hljs-comment\">// switching the pivot with right most bound.</span>\n        std::<span class=\"hljs-built_in\">swap</span>(arr[end], arr[randomIndex]);\n\n        <span class=\"hljs-type\">int64_t</span> pivotIndex = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-comment\">// getting pivot index and pivot sorted array.</span>\n        std::<span class=\"hljs-built_in\">tie</span>(pivotIndex, arr) = <span class=\"hljs-built_in\">partition</span>(arr, start, end);\n\n        <span class=\"hljs-comment\">// Recursively calling</span>\n        std::array&lt;<span class=\"hljs-type\">int64_t</span>, arr.size()&gt; rightSortingLeft =\n            <span class=\"hljs-built_in\">quickSortRP</span>(arr, start, pivotIndex - <span class=\"hljs-number\">1</span>);\n        std::array&lt;<span class=\"hljs-type\">int64_t</span>, arr.size()&gt; full_sorted =\n            <span class=\"hljs-built_in\">quickSortRP</span>(rightSortingLeft, pivotIndex + <span class=\"hljs-number\">1</span>, end);\n        arr = full_sorted;\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief A function utility to generate unsorted array of given size and range.\n * @tparam size Size of the output array.\n * @param from Stating of the range.\n * @param to Ending of the range.\n * @returns std::array&lt;int64_t , size&gt; Unsorted array of specified size.\n * */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> size&gt;\n<span class=\"hljs-function\">std::array&lt;<span class=\"hljs-type\">int64_t</span>, size&gt; <span class=\"hljs-title\">generateUnsortedArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int64_t</span> from, <span class=\"hljs-type\">int64_t</span> to)</span> </span>{\n    <span class=\"hljs-built_in\">srand</span>(<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));\n    std::array&lt;<span class=\"hljs-type\">int64_t</span>, size&gt; unsortedArray{};\n    <span class=\"hljs-built_in\">assert</span>(from &lt; to);\n    <span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (i &lt; size) {\n        <span class=\"hljs-type\">int64_t</span> randomNum = from + <span class=\"hljs-built_in\">rand</span>() % (to - from + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">if</span> (randomNum) {\n            unsortedArray[i] = randomNum;\n            i++;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> unsortedArray;\n}\n\n}  <span class=\"hljs-comment\">// namespace random_pivot_quick_sort</span>\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief a class containing the necessary test cases\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestCases</span> {\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief A function to print64_t given message on console.\n     * @tparam T Type of the given message.\n     * @returns void\n     * */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">log</span><span class=\"hljs-params\">(T msg)</span> </span>{\n        <span class=\"hljs-comment\">// It&#x27;s just to avoid writing cout and endl</span>\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;[TESTS] : ---&gt; &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;\n    }\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Executes test cases\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">runTests</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running Tests...&quot;</span>);\n\n        <span class=\"hljs-built_in\">testCase_1</span>();\n        <span class=\"hljs-built_in\">testCase_2</span>();\n        <span class=\"hljs-built_in\">testCase_3</span>();\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Test Cases over!&quot;</span>);\n        std::cout &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief A test case with single input\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">testCase_1</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> inputSize = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;This is test case 1 for Random Pivot Quick Sort Algorithm : &quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Description:&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;   EDGE CASE : Only contains one element&quot;</span>);\n        std::array&lt;<span class=\"hljs-type\">int64_t</span>, inputSize&gt; unsorted_arr{<span class=\"hljs-number\">2</span>};\n\n        <span class=\"hljs-type\">int64_t</span> start = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int64_t</span> end = unsorted_arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// length - 1</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running algorithm of data of length 50 ...&quot;</span>);\n        std::array&lt;<span class=\"hljs-type\">int64_t</span>, unsorted_arr.size()&gt; sorted_arr =\n            sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">quickSortRP</span>(unsorted_arr, start,\n                                                          end);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Algorithm finished!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert expression...&quot;</span>);\n        <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(sorted_arr.<span class=\"hljs-built_in\">begin</span>(), sorted_arr.<span class=\"hljs-built_in\">end</span>()));\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assertion check passed!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;[PASS] : TEST CASE 1 PASS!&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief A test case with input array of length 500\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">testCase_2</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> inputSize = <span class=\"hljs-number\">500</span>;\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Description:&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;   BIG INPUT : Contains 500 elements and repeated elements&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;This is test case 2 for Random Pivot Quick Sort Algorithm : &quot;</span>);\n        std::array&lt;<span class=\"hljs-type\">int64_t</span>, inputSize&gt; unsorted_arr =\n            sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">generateUnsortedArray</span>&lt;inputSize&gt;(\n                <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10000</span>);\n\n        <span class=\"hljs-type\">int64_t</span> start = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int64_t</span> end = unsorted_arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// length - 1</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running algorithm of data of length 500 ...&quot;</span>);\n        std::array&lt;<span class=\"hljs-type\">int64_t</span>, unsorted_arr.size()&gt; sorted_arr =\n            sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">quickSortRP</span>(unsorted_arr, start,\n                                                          end);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Algorithm finished!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert expression...&quot;</span>);\n        <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(sorted_arr.<span class=\"hljs-built_in\">begin</span>(), sorted_arr.<span class=\"hljs-built_in\">end</span>()));\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assertion check passed!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;[PASS] : TEST CASE 2 PASS!&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief A test case with array of length 1000.\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">testCase_3</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> inputSize = <span class=\"hljs-number\">1000</span>;\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;This is test case 3 for Random Pivot Quick Sort Algorithm : &quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Description:&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;   LARGE INPUT : Contains 1000 elements and repeated elements&quot;</span>);\n        std::array&lt;<span class=\"hljs-type\">int64_t</span>, inputSize&gt; unsorted_arr =\n            sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">generateUnsortedArray</span>&lt;inputSize&gt;(\n                <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10000</span>);\n\n        <span class=\"hljs-type\">int64_t</span> start = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">int64_t</span> end = unsorted_arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// length - 1</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running algorithm...&quot;</span>);\n        std::array&lt;<span class=\"hljs-type\">int64_t</span>, unsorted_arr.size()&gt; sorted_arr =\n            sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">quickSortRP</span>(unsorted_arr, start,\n                                                          end);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Algorithm finished!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert expression...&quot;</span>);\n        <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(sorted_arr.<span class=\"hljs-built_in\">begin</span>(), sorted_arr.<span class=\"hljs-built_in\">end</span>()));\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assertion check passed!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;[PASS] : TEST CASE 3 PASS!&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n    }\n};\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    TestCases tc = <span class=\"hljs-built_in\">TestCases</span>();\n    tc.<span class=\"hljs-built_in\">runTests</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @param argc commandline argument count (ignored)\n * @param argv commandline array of arguments (ignored)\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// Executes various test cases.</span>\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> inputSize = <span class=\"hljs-number\">10</span>;\n    std::array&lt;<span class=\"hljs-type\">int64_t</span>, inputSize&gt; unsorted_array =\n        sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">generateUnsortedArray</span>&lt;inputSize&gt;(\n            <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">1000</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Unsorted array is : &quot;</span> &lt;&lt; std::endl;\n    sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">showArray</span>(unsorted_array);\n\n    std::array&lt;<span class=\"hljs-type\">int64_t</span>, inputSize&gt; sorted_array =\n        sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">quickSortRP</span>(\n            unsorted_array, <span class=\"hljs-number\">0</span>, unsorted_array.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array is : &quot;</span> &lt;&lt; std::endl;\n    sorting::random_pivot_quick_sort::<span class=\"hljs-built_in\">showArray</span>(sorted_array);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "gattlin1",
      "email": "gattlin1@live.missouristate.edu",
      "commits": 1
    },
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nitin Sharma",
      "email": "32377892+foo290@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
