{
  "slug": "keywordshiftedalphabet",
  "name": "KeywordShiftedAlphabet",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Ciphers/KeywordShiftedAlphabet.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Ciphers/KeywordShiftedAlphabet.js",
      "code": "<span class=\"hljs-comment\">/**\n * Keyword shifted alphabet is a simple cipher using a translation table created with a help of a keyword.\n * Keyword must be a word where each character can occur only once.\n * To create the translation table, we write all the alphabet characters to the first.\n * Second row start with the keyword, then we continue with the rest of the characters that are missing in alphabetical order.\n *\n * |A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z|\n * |K|E|Y|W|O|R|D|A|B|C|F|G|H|I|J|L|M|N|P|Q|S|T|U|V|W|Z|\n *\n * Encryption is then just a matter of writing the matching (same index) letter from the second row instead of the first row:\n * &#x27;Hello world&#x27; -&gt; &#x27;Aoggj ujngw&#x27;\n *\n * Decryption is then just the reverse process of writing the matching (same index) letter from the first row instead of the second row\n * &#x27;Aogg ujngw&#x27; -&gt; &#x27;Hello world&#x27;\n *\n * Non alphabetical characters (space, exclamation mark, ...) are kept as they are\n */</span>\n\n<span class=\"hljs-keyword\">const</span> alphabet = [<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;g&#x27;</span>, <span class=\"hljs-string\">&#x27;h&#x27;</span>, <span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-string\">&#x27;j&#x27;</span>, <span class=\"hljs-string\">&#x27;k&#x27;</span>, <span class=\"hljs-string\">&#x27;l&#x27;</span>, <span class=\"hljs-string\">&#x27;m&#x27;</span>, <span class=\"hljs-string\">&#x27;n&#x27;</span>, <span class=\"hljs-string\">&#x27;o&#x27;</span>, <span class=\"hljs-string\">&#x27;p&#x27;</span>, <span class=\"hljs-string\">&#x27;q&#x27;</span>, <span class=\"hljs-string\">&#x27;r&#x27;</span>, <span class=\"hljs-string\">&#x27;s&#x27;</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>, <span class=\"hljs-string\">&#x27;u&#x27;</span>, <span class=\"hljs-string\">&#x27;v&#x27;</span>, <span class=\"hljs-string\">&#x27;w&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>, <span class=\"hljs-string\">&#x27;y&#x27;</span>, <span class=\"hljs-string\">&#x27;z&#x27;</span>]\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkKeywordValidity</span> (keyword) {\n  keyword.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">char, index</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> rest = keyword.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, index) + keyword.<span class=\"hljs-title function_\">slice</span>(index + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">if</span> (rest.<span class=\"hljs-title function_\">indexOf</span>(char) !== -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n  })\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getEncryptedAlphabet</span> (keyword) {\n  <span class=\"hljs-keyword\">const</span> encryptedAlphabet = keyword.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  alphabet.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">char</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (encryptedAlphabet.<span class=\"hljs-title function_\">indexOf</span>(char) === -<span class=\"hljs-number\">1</span>) {\n      encryptedAlphabet.<span class=\"hljs-title function_\">push</span>(char)\n    }\n  })\n  <span class=\"hljs-keyword\">return</span> encryptedAlphabet\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">translate</span> (sourceAlphabet, targetAlphabet, message) {\n  <span class=\"hljs-keyword\">return</span> message.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">encryptedMessage, char</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> isUpperCase = char === char.<span class=\"hljs-title function_\">toUpperCase</span>()\n    <span class=\"hljs-keyword\">const</span> encryptedCharIndex = sourceAlphabet.<span class=\"hljs-title function_\">indexOf</span>(char.<span class=\"hljs-title function_\">toLowerCase</span>())\n    <span class=\"hljs-keyword\">const</span> encryptedChar = encryptedCharIndex !== -<span class=\"hljs-number\">1</span> ? targetAlphabet[encryptedCharIndex] : char\n    encryptedMessage += isUpperCase ? encryptedChar.<span class=\"hljs-title function_\">toUpperCase</span>() : encryptedChar\n    <span class=\"hljs-keyword\">return</span> encryptedMessage\n  }, <span class=\"hljs-string\">&#x27;&#x27;</span>)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkInputs</span> (keyword, message) {\n  <span class=\"hljs-keyword\">if</span> (!keyword || !message) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Both keyword and message must be specified&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">checkKeywordValidity</span>(keyword)) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Invalid keyword!&#x27;</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">encrypt</span> (keyword, message) {\n  <span class=\"hljs-title function_\">checkInputs</span>(keyword, message)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">translate</span>(alphabet, <span class=\"hljs-title function_\">getEncryptedAlphabet</span>(keyword.<span class=\"hljs-title function_\">toLowerCase</span>()), message)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">decrypt</span> (keyword, message) {\n  <span class=\"hljs-title function_\">checkInputs</span>(keyword, message)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">translate</span>(<span class=\"hljs-title function_\">getEncryptedAlphabet</span>(keyword.<span class=\"hljs-title function_\">toLowerCase</span>()), alphabet, message)\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">encrypt</span>(<span class=\"hljs-string\">&#x27;keyword&#x27;</span>, <span class=\"hljs-string\">&#x27;Hello world!&#x27;</span>)) <span class=\"hljs-comment\">// Prints &#x27;Aoggj ujngw!&#x27;</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">decrypt</span>(<span class=\"hljs-string\">&#x27;keyword&#x27;</span>, <span class=\"hljs-string\">&#x27;Aoggj ujngw!&#x27;</span>)) <span class=\"hljs-comment\">// Prints &#x27;Hello world!</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Bambusek, David",
      "email": "dbambusek@netsuite.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
