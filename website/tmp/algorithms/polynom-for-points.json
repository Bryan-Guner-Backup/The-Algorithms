{
  "slug": "polynom-for-points",
  "name": "Polynom for Points",
  "categories": ["linearalgebra", "src"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "linear_algebra/src/polynom_for_points.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/linear_algebra/src/polynom_for_points.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">points_to_polynomial</span>(<span class=\"hljs-params\">coordinates: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    coordinates is a two dimensional matrix: [[x, y], [x, y], ...]\n    number of points you want to use\n\n    &gt;&gt;&gt; print(points_to_polynomial([]))\n    The program cannot work out a fitting polynomial.\n    &gt;&gt;&gt; print(points_to_polynomial([[]]))\n    The program cannot work out a fitting polynomial.\n    &gt;&gt;&gt; print(points_to_polynomial([[1, 0], [2, 0], [3, 0]]))\n    f(x)=x^2*0.0+x^1*-0.0+x^0*0.0\n    &gt;&gt;&gt; print(points_to_polynomial([[1, 1], [2, 1], [3, 1]]))\n    f(x)=x^2*0.0+x^1*-0.0+x^0*1.0\n    &gt;&gt;&gt; print(points_to_polynomial([[1, 3], [2, 3], [3, 3]]))\n    f(x)=x^2*0.0+x^1*-0.0+x^0*3.0\n    &gt;&gt;&gt; print(points_to_polynomial([[1, 1], [2, 2], [3, 3]]))\n    f(x)=x^2*0.0+x^1*1.0+x^0*0.0\n    &gt;&gt;&gt; print(points_to_polynomial([[1, 1], [2, 4], [3, 9]]))\n    f(x)=x^2*1.0+x^1*-0.0+x^0*0.0\n    &gt;&gt;&gt; print(points_to_polynomial([[1, 3], [2, 6], [3, 11]]))\n    f(x)=x^2*1.0+x^1*-0.0+x^0*2.0\n    &gt;&gt;&gt; print(points_to_polynomial([[1, -3], [2, -6], [3, -11]]))\n    f(x)=x^2*-1.0+x^1*-0.0+x^0*-2.0\n    &gt;&gt;&gt; print(points_to_polynomial([[1, 5], [2, 2], [3, 9]]))\n    f(x)=x^2*5.0+x^1*-18.0+x^0*18.0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">try</span>:\n        check = <span class=\"hljs-number\">1</span>\n        more_check = <span class=\"hljs-number\">0</span>\n        d = coordinates[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(coordinates)):\n            <span class=\"hljs-keyword\">if</span> j == <span class=\"hljs-number\">0</span>:\n                <span class=\"hljs-keyword\">continue</span>\n            <span class=\"hljs-keyword\">if</span> d == coordinates[j][<span class=\"hljs-number\">0</span>]:\n                more_check += <span class=\"hljs-number\">1</span>\n                solved = <span class=\"hljs-string\">&quot;x=&quot;</span> + <span class=\"hljs-built_in\">str</span>(coordinates[j][<span class=\"hljs-number\">0</span>])\n                <span class=\"hljs-keyword\">if</span> more_check == <span class=\"hljs-built_in\">len</span>(coordinates) - <span class=\"hljs-number\">1</span>:\n                    check = <span class=\"hljs-number\">2</span>\n                    <span class=\"hljs-keyword\">break</span>\n                <span class=\"hljs-keyword\">elif</span> more_check &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> more_check != <span class=\"hljs-built_in\">len</span>(coordinates) - <span class=\"hljs-number\">1</span>:\n                    check = <span class=\"hljs-number\">3</span>\n                <span class=\"hljs-keyword\">else</span>:\n                    check = <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(coordinates) == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> coordinates[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">0</span>:\n            check = <span class=\"hljs-number\">2</span>\n            solved = <span class=\"hljs-string\">&quot;x=0&quot;</span>\n    <span class=\"hljs-keyword\">except</span> Exception:\n        check = <span class=\"hljs-number\">3</span>\n\n    x = <span class=\"hljs-built_in\">len</span>(coordinates)\n\n    <span class=\"hljs-keyword\">if</span> check == <span class=\"hljs-number\">1</span>:\n        count_of_line = <span class=\"hljs-number\">0</span>\n        matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]] = []\n        <span class=\"hljs-comment\"># put the x and x to the power values in a matrix</span>\n        <span class=\"hljs-keyword\">while</span> count_of_line &lt; x:\n            count_in_line = <span class=\"hljs-number\">0</span>\n            a = coordinates[count_of_line][<span class=\"hljs-number\">0</span>]\n            count_line: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>] = []\n            <span class=\"hljs-keyword\">while</span> count_in_line &lt; x:\n                count_line.append(a ** (x - (count_in_line + <span class=\"hljs-number\">1</span>)))\n                count_in_line += <span class=\"hljs-number\">1</span>\n            matrix.append(count_line)\n            count_of_line += <span class=\"hljs-number\">1</span>\n\n        count_of_line = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-comment\"># put the y values into a vector</span>\n        vector: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>] = []\n        <span class=\"hljs-keyword\">while</span> count_of_line &lt; x:\n            vector.append(coordinates[count_of_line][<span class=\"hljs-number\">1</span>])\n            count_of_line += <span class=\"hljs-number\">1</span>\n\n        count = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-keyword\">while</span> count &lt; x:\n            zahlen = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">while</span> zahlen &lt; x:\n                <span class=\"hljs-keyword\">if</span> count == zahlen:\n                    zahlen += <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-keyword\">if</span> zahlen == x:\n                    <span class=\"hljs-keyword\">break</span>\n                bruch = matrix[zahlen][count] / matrix[count][count]\n                <span class=\"hljs-keyword\">for</span> counting_columns, item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(matrix[count]):\n                    <span class=\"hljs-comment\"># manipulating all the values in the matrix</span>\n                    matrix[zahlen][counting_columns] -= item * bruch\n                <span class=\"hljs-comment\"># manipulating the values in the vector</span>\n                vector[zahlen] -= vector[count] * bruch\n                zahlen += <span class=\"hljs-number\">1</span>\n            count += <span class=\"hljs-number\">1</span>\n\n        count = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-comment\"># make solutions</span>\n        solution: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>] = []\n        <span class=\"hljs-keyword\">while</span> count &lt; x:\n            solution.append(<span class=\"hljs-built_in\">str</span>(vector[count] / matrix[count][count]))\n            count += <span class=\"hljs-number\">1</span>\n\n        count = <span class=\"hljs-number\">0</span>\n        solved = <span class=\"hljs-string\">&quot;f(x)=&quot;</span>\n\n        <span class=\"hljs-keyword\">while</span> count &lt; x:\n            remove_e: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>] = solution[count].split(<span class=\"hljs-string\">&quot;E&quot;</span>)\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(remove_e) &gt; <span class=\"hljs-number\">1</span>:\n                solution[count] = remove_e[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">&quot;*10^&quot;</span> + remove_e[<span class=\"hljs-number\">1</span>]\n            solved += <span class=\"hljs-string\">&quot;x^&quot;</span> + <span class=\"hljs-built_in\">str</span>(x - (count + <span class=\"hljs-number\">1</span>)) + <span class=\"hljs-string\">&quot;*&quot;</span> + <span class=\"hljs-built_in\">str</span>(solution[count])\n            <span class=\"hljs-keyword\">if</span> count + <span class=\"hljs-number\">1</span> != x:\n                solved += <span class=\"hljs-string\">&quot;+&quot;</span>\n            count += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">return</span> solved\n\n    <span class=\"hljs-keyword\">elif</span> check == <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">return</span> solved\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;The program cannot work out a fitting polynomial.&quot;</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[]]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>]]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>]]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>]]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">11</span>]]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">2</span>, -<span class=\"hljs-number\">6</span>], [<span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">11</span>]]))\n    <span class=\"hljs-built_in\">print</span>(points_to_polynomial([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>]]))\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "avych",
      "email": "7556744+avych@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
