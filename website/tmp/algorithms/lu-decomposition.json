{
  "slug": "lu-decomposition",
  "name": "Lu Decomposition",
  "categories": ["numericalanalysis"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "arithmetic_analysis/lu_decomposition.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/arithmetic_analysis/lu_decomposition.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Lower-Upper (LU) Decomposition.\n\nReference:\n- https://en.wikipedia.org/wiki/LU_decomposition\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Tuple</span>\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lower_upper_decomposition</span>(<span class=\"hljs-params\">table: np.ndarray</span>) -&gt; <span class=\"hljs-type\">Tuple</span>[np.ndarray, np.ndarray]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Lower-Upper (LU) Decomposition\n\n    Example:\n\n    &gt;&gt;&gt; matrix = np.array([[2, -2, 1], [0, 1, 2], [5, 3, 1]])\n    &gt;&gt;&gt; outcome = lower_upper_decomposition(matrix)\n    &gt;&gt;&gt; outcome[0]\n    array([[1. , 0. , 0. ],\n           [0. , 1. , 0. ],\n           [2.5, 8. , 1. ]])\n    &gt;&gt;&gt; outcome[1]\n    array([[  2. ,  -2. ,   1. ],\n           [  0. ,   1. ,   2. ],\n           [  0. ,   0. , -17.5]])\n\n    &gt;&gt;&gt; matrix = np.array([[2, -2, 1], [0, 1, 2]])\n    &gt;&gt;&gt; lower_upper_decomposition(matrix)\n    Traceback (most recent call last):\n    ...\n    ValueError: &#x27;table&#x27; has to be of square shaped array but got a 2x3 array:\n    [[ 2 -2  1]\n     [ 0  1  2]]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Table that contains our data</span>\n    <span class=\"hljs-comment\"># Table has to be a square array so we need to check first</span>\n    rows, columns = np.shape(table)\n    <span class=\"hljs-keyword\">if</span> rows != columns:\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;&#x27;table&#x27; has to be of square shaped array but got a <span class=\"hljs-subst\">{rows}</span>x<span class=\"hljs-subst\">{columns}</span> &quot;</span>\n            + <span class=\"hljs-string\">f&quot;array:\\n<span class=\"hljs-subst\">{table}</span>&quot;</span>\n        )\n    lower = np.zeros((rows, columns))\n    upper = np.zeros((rows, columns))\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(columns):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i):\n            total = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(j):\n                total += lower[i][k] * upper[k][j]\n            lower[i][j] = (table[i][j] - total) / upper[j][j]\n        lower[i][i] = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i, columns):\n            total = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i):\n                total += lower[i][k] * upper[k][j]\n            upper[i][j] = table[i][j] - total\n    <span class=\"hljs-keyword\">return</span> lower, upper\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "numerical_methods/lu_decomposition.h",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/lu_decomposition.h",
      "code": "<span class=\"hljs-comment\">/**\n * @file lu_decomposition.h\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @brief Functions associated with [LU\n * Decomposition](https://en.wikipedia.org/wiki/LU_decomposition)\n * of a square matrix.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> once</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;valarray&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _OPENMP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;omp.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/** Define matrix type as a `std::vector` of `std::valarray` */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-keyword\">using</span> matrix = std::vector&lt;std::valarray&lt;T&gt;&gt;;\n\n<span class=\"hljs-comment\">/** Perform LU decomposition on matrix\n * \\param[in] A matrix to decompose\n * \\param[out] L output L matrix\n * \\param[out] U output U matrix\n * \\returns 0 if no errors\n * \\returns negative if error occurred\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">lu_decomposition</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> matrix&lt;T&gt; &amp;A, matrix&lt;<span class=\"hljs-type\">double</span>&gt; *L, matrix&lt;<span class=\"hljs-type\">double</span>&gt; *U)</span> </span>{\n    <span class=\"hljs-type\">int</span> row, col, j;\n    <span class=\"hljs-type\">int</span> mat_size = A.<span class=\"hljs-built_in\">size</span>();\n\n    <span class=\"hljs-keyword\">if</span> (mat_size != A[<span class=\"hljs-number\">0</span>].<span class=\"hljs-built_in\">size</span>()) {\n        <span class=\"hljs-comment\">// check matrix is a square matrix</span>\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Not a square matrix!\\n&quot;</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n\n    <span class=\"hljs-comment\">// regularize each row</span>\n    <span class=\"hljs-keyword\">for</span> (row = <span class=\"hljs-number\">0</span>; row &lt; mat_size; row++) {\n        <span class=\"hljs-comment\">// Upper triangular matrix</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _OPENMP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> omp for</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n        <span class=\"hljs-keyword\">for</span> (col = row; col &lt; mat_size; col++) {\n            <span class=\"hljs-comment\">// Summation of L[i,j] * U[j,k]</span>\n            <span class=\"hljs-type\">double</span> lu_sum = <span class=\"hljs-number\">0.</span>;\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; row; j++) {\n                lu_sum += L[<span class=\"hljs-number\">0</span>][row][j] * U[<span class=\"hljs-number\">0</span>][j][col];\n            }\n\n            <span class=\"hljs-comment\">// Evaluate U[i,k]</span>\n            U[<span class=\"hljs-number\">0</span>][row][col] = A[row][col] - lu_sum;\n        }\n\n        <span class=\"hljs-comment\">// Lower triangular matrix</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _OPENMP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> omp for</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n        <span class=\"hljs-keyword\">for</span> (col = row; col &lt; mat_size; col++) {\n            <span class=\"hljs-keyword\">if</span> (row == col) {\n                L[<span class=\"hljs-number\">0</span>][row][col] = <span class=\"hljs-number\">1.</span>;\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n\n            <span class=\"hljs-comment\">// Summation of L[i,j] * U[j,k]</span>\n            <span class=\"hljs-type\">double</span> lu_sum = <span class=\"hljs-number\">0.</span>;\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; row; j++) {\n                lu_sum += L[<span class=\"hljs-number\">0</span>][col][j] * U[<span class=\"hljs-number\">0</span>][j][row];\n            }\n\n            <span class=\"hljs-comment\">// Evaluate U[i,k]</span>\n            L[<span class=\"hljs-number\">0</span>][col][row] = (A[col][row] - lu_sum) / U[<span class=\"hljs-number\">0</span>][row][row];\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Compute determinant of an NxN square matrix using LU decomposition.\n * Using LU decomposition, the determinant is given by the product of diagonal\n * elements of matrices L and U.\n *\n * @tparam T datatype of input matrix - int, unsigned int, double, etc\n * @param A input square matrix\n * @return determinant of matrix A\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">determinant_lu</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> matrix&lt;T&gt; &amp;A)</span> </span>{\n    <span class=\"hljs-function\">matrix&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">L</span><span class=\"hljs-params\">(A.size(), std::valarray&lt;<span class=\"hljs-type\">double</span>&gt;(A.size()))</span></span>;\n    <span class=\"hljs-function\">matrix&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">U</span><span class=\"hljs-params\">(A.size(), std::valarray&lt;<span class=\"hljs-type\">double</span>&gt;(A.size()))</span></span>;\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">lu_decomposition</span>(A, &amp;L, &amp;U) &lt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-type\">double</span> result = <span class=\"hljs-number\">1.f</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; A.<span class=\"hljs-built_in\">size</span>(); i++) {\n        result *= L[i][i] * U[i][i];\n    }\n    <span class=\"hljs-keyword\">return</span> result;\n}\n"
    },
    "dart": {
      "dir": "maths/lu_decomposition.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/lu_decomposition.dart",
      "code": "<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Based on https://en.wikipedia.org/wiki/LU<span class=\"hljs-emphasis\">_decomposition</span></span></span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\n\n<span class=\"hljs-keyword\">void</span> swap&lt;T&gt;(<span class=\"hljs-built_in\">List</span>&lt;T&gt; collection, <span class=\"hljs-built_in\">int</span> index1, <span class=\"hljs-built_in\">int</span> index2) {\n  T temp = collection[index1];\n  collection[index1] = collection[index2];\n  collection[index2] = temp;\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MatrixDimensionError</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Error</span> </span>{}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NonInvertibleMatrixError</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Error</span> </span>{}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LUPDecomposition</span> </span>{\n  Matrix lu;\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; pivot;\n\n  LUPDecomposition(<span class=\"hljs-keyword\">this</span>.lu, <span class=\"hljs-keyword\">this</span>.pivot);\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Matrix</span> </span>{\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;&gt; _values;\n\n  <span class=\"hljs-meta\">@override</span>\n  <span class=\"hljs-built_in\">String</span> toString() =&gt; <span class=\"hljs-keyword\">this</span>._values.toString();\n\n  <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">get</span> nRows =&gt; <span class=\"hljs-keyword\">this</span>._values.length;\n  <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">get</span> nColumns =&gt; <span class=\"hljs-keyword\">this</span>.nRows == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-keyword\">this</span>._values[<span class=\"hljs-number\">0</span>].length;\n\n  <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-keyword\">get</span> isSquare =&gt; <span class=\"hljs-keyword\">this</span>.nRows == <span class=\"hljs-keyword\">this</span>.nColumns;\n\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;&gt; <span class=\"hljs-keyword\">get</span> rows =&gt; <span class=\"hljs-keyword\">this</span>._values;\n\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; <span class=\"hljs-keyword\">operator</span> [](<span class=\"hljs-built_in\">int</span> n) =&gt; <span class=\"hljs-keyword\">this</span>._values[n];\n\n  Matrix <span class=\"hljs-keyword\">operator</span> +(Matrix other) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.nRows != other.nRows || <span class=\"hljs-keyword\">this</span>.nColumns != other.nColumns) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MatrixDimensionError();\n    }\n\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;&gt; values = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.nRows; i++) {\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; newRow = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">this</span>.nColumns; j++) {\n        newRow.add(<span class=\"hljs-keyword\">this</span>[i][j] + other[i][j]);\n      }\n      values.add(newRow);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Matrix(values);\n  }\n\n  Matrix <span class=\"hljs-keyword\">operator</span> -(Matrix other) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.nRows != other.nRows || <span class=\"hljs-keyword\">this</span>.nColumns != other.nColumns) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MatrixDimensionError();\n    }\n\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;&gt; values = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.nRows; i++) {\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; newRow = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-keyword\">this</span>.nColumns; j++) {\n        newRow.add(<span class=\"hljs-keyword\">this</span>[i][j] - other[i][j]);\n      }\n\n      values.add(newRow);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Matrix(values);\n  }\n\n  Matrix times(<span class=\"hljs-built_in\">double</span> n) {\n    Matrix output = Matrix.from(<span class=\"hljs-keyword\">this</span>);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; output.nRows; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; output.nColumns; j++) {\n        output[i][j] *= n;\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> output;\n  }\n\n  Matrix <span class=\"hljs-keyword\">operator</span> *(Matrix other) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.nColumns != other.nRows) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MatrixDimensionError();\n    }\n\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;&gt; values = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-keyword\">this</span>.nRows; i++) {\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; newRow = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; other.nColumns; j++) {\n        <span class=\"hljs-built_in\">double</span> sum = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-keyword\">this</span>.nColumns; k++) {\n          sum += <span class=\"hljs-keyword\">this</span>[i][k] * other[k][j];\n        }\n        newRow.add(sum);\n      }\n      values.add(newRow);\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Matrix(values);\n  }\n\n  LUPDecomposition decompose() {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.isSquare) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MatrixDimensionError();\n    }\n\n    <span class=\"hljs-built_in\">int</span> matrixSize = <span class=\"hljs-keyword\">this</span>.nRows;\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; pivot = <span class=\"hljs-built_in\">List</span>.generate(matrixSize + <span class=\"hljs-number\">1</span>, (x) =&gt; x);\n    Matrix output = Matrix.from(<span class=\"hljs-keyword\">this</span>);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; matrixSize; i++) {\n      <span class=\"hljs-built_in\">double</span> maxValue = <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-built_in\">int</span> maxIndex = i;\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = i; j &lt; matrixSize; j++) {\n        <span class=\"hljs-keyword\">if</span> (output[j][i].abs() &gt; maxValue) {\n          maxValue = output[j][i].abs();\n          maxIndex = j;\n        }\n      }\n\n      <span class=\"hljs-keyword\">if</span> (maxIndex != i) {\n        swap(pivot, i, maxIndex);\n        swap(output.rows, i, maxIndex);\n\n        pivot[matrixSize]++;\n      }\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; matrixSize; j++) {\n        output[j][i] /= output[i][i];\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> k = i + <span class=\"hljs-number\">1</span>; k &lt; matrixSize; k++) {\n          output[j][k] -= output[j][i] * output[i][k];\n        }\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> LUPDecomposition(output, pivot);\n  }\n\n  Matrix transposition() {\n    Matrix output = Matrix.zeros(nColumns, nRows);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; output.nRows; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; output.nColumns; j++) {\n        output[i][j] = <span class=\"hljs-keyword\">this</span>[j][i];\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> output;\n  }\n\n  Matrix inversion() {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">this</span>.isSquare) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MatrixDimensionError();\n    }\n\n    LUPDecomposition decomposition = <span class=\"hljs-keyword\">this</span>.decompose();\n    Matrix output = Matrix.from(decomposition.lu);\n\n    <span class=\"hljs-built_in\">int</span> matrixSize = decomposition.lu.nRows;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; matrixSize; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; matrixSize; j++) {\n        output[j][i] = decomposition.pivot[j] == i ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> k = <span class=\"hljs-number\">0</span>; k &lt; j; k++) {\n          output[j][i] -= decomposition.lu[j][k] * output[k][i];\n        }\n      }\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = matrixSize - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span>; j--) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> k = j + <span class=\"hljs-number\">1</span>; k &lt; matrixSize; k++) {\n          output[j][i] -= decomposition.lu[j][k] * output[k][i];\n        }\n        output[j][i] /= decomposition.lu[j][j];\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> output;\n  }\n\n  <span class=\"hljs-built_in\">double</span> determinant() {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">this</span>.nRows == <span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">this</span>.nColumns == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> MatrixDimensionError();\n    }\n\n    LUPDecomposition decomposition = decompose();\n    <span class=\"hljs-built_in\">int</span> matrixSize = decomposition.lu.nColumns;\n    <span class=\"hljs-built_in\">double</span> product = decomposition.lu[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; matrixSize; i++) {\n      product *= decomposition.lu[i][i];\n    }\n\n    <span class=\"hljs-keyword\">if</span> (decomposition.pivot[matrixSize] - matrixSize % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> product;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> -product;\n    }\n  }\n\n  Matrix.eye(<span class=\"hljs-built_in\">int</span> size) {\n    <span class=\"hljs-keyword\">this</span>._values = [];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; row = <span class=\"hljs-built_in\">List</span>.generate(size, (x) =&gt; <span class=\"hljs-number\">0</span>);\n      row[i] = <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">this</span>._values.add(row);\n    }\n  }\n\n  Matrix.from(Matrix matrix) {\n    <span class=\"hljs-keyword\">this</span>._values = matrix.rows.map((row) =&gt; <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;.from(row)).toList();\n  }\n\n  Matrix.zeros(<span class=\"hljs-built_in\">int</span> nRows, <span class=\"hljs-built_in\">int</span> nColumns) {\n    <span class=\"hljs-keyword\">this</span>._values = [];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nRows; i++) {\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; row = [];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; nColumns; j++) {\n        row.add(<span class=\"hljs-number\">0</span>);\n      }\n      <span class=\"hljs-keyword\">this</span>._values.add(row);\n    }\n  }\n\n  Matrix(<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt;&gt; values) {\n    <span class=\"hljs-keyword\">if</span> (values.length != <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">int</span> rowLength = values[<span class=\"hljs-number\">0</span>].length;\n      <span class=\"hljs-keyword\">if</span> (values.any((row) =&gt; row.length != rowLength)) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MatrixDimensionError();\n      }\n    }\n\n    <span class=\"hljs-keyword\">this</span>._values = values;\n  }\n}\n\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; solve(Matrix x, <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; y) {\n  <span class=\"hljs-keyword\">if</span> (x.nColumns != y.length) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> MatrixDimensionError();\n  }\n  LUPDecomposition decomposition = x.decompose();\n\n  <span class=\"hljs-built_in\">int</span> matrixHeight = x.nColumns;\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; output = <span class=\"hljs-built_in\">List</span>.generate(matrixHeight, (x) =&gt; <span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; matrixHeight; i++) {\n    output[i] = y[decomposition.pivot[i]];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++) {\n      output[i] -= decomposition.lu[i][j] * output[j];\n    }\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = matrixHeight - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; matrixHeight; j++) {\n      output[i] -= decomposition.lu[i][j] * output[j];\n    }\n\n    output[i] /= decomposition.lu[i][i];\n  }\n\n  <span class=\"hljs-keyword\">return</span> output;\n}\n\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; ordinaryLeastSquare(Matrix x, Matrix y) {\n  <span class=\"hljs-keyword\">return</span> ((x.transposition() * x).inversion() * x.transposition() * y)\n      .transposition()\n      .rows[<span class=\"hljs-number\">0</span>];\n}\n\n<span class=\"hljs-built_in\">double</span> f(<span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">double</span> y) {\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">2</span> * x) + (<span class=\"hljs-number\">6</span> * y) + <span class=\"hljs-number\">4</span>;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  Matrix a = <span class=\"hljs-keyword\">new</span> Matrix([\n    [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-1</span>],\n    [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">4</span>],\n    [<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">-1</span>]\n  ]);\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; b = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">0</span>];\n\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; solution = solve(a, b);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;x=<span class=\"hljs-subst\">${solution[<span class=\"hljs-number\">0</span>]}</span>, y=<span class=\"hljs-subst\">${solution[<span class=\"hljs-number\">1</span>]}</span>, z=<span class=\"hljs-subst\">${solution[<span class=\"hljs-number\">2</span>]}</span>&quot;</span>);\n\n  Matrix input = Matrix.zeros(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>);\n  Matrix output = Matrix.zeros(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1</span>);\n\n  Random rng = <span class=\"hljs-keyword\">new</span> Random();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n    <span class=\"hljs-built_in\">double</span> x = rng.nextInt(<span class=\"hljs-number\">100</span>).toDouble() + rng.nextDouble();\n    <span class=\"hljs-built_in\">double</span> y = rng.nextInt(<span class=\"hljs-number\">100</span>).toDouble() + rng.nextDouble();\n\n    input[i][<span class=\"hljs-number\">0</span>] = x;\n    input[i][<span class=\"hljs-number\">1</span>] = y;\n    input[i][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">1</span>;\n\n    output[i][<span class=\"hljs-number\">0</span>] = f(x, y);\n  }\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">double</span>&gt; coeffs = ordinaryLeastSquare(input, output);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;f(x, y) = x * <span class=\"hljs-subst\">${coeffs[<span class=\"hljs-number\">0</span>]}</span> + y * <span class=\"hljs-subst\">${coeffs[<span class=\"hljs-number\">1</span>]}</span> + <span class=\"hljs-subst\">${coeffs[<span class=\"hljs-number\">2</span>]}</span>&quot;</span>);\n}\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Numeric/Decomposition/LU.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Numeric/Decomposition/LU.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric.Decomposition</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     LU-decomposition factors the &quot;source&quot; matrix as the product of lower triangular matrix</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and upper triangular matrix.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LU</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Performs LU-decomposition on &quot;source&quot; matrix.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Lower and upper matrices have same shapes as source matrix.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Note: Decomposition can be applied only to square matrices.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;source&quot;&gt;</span>Square matrix to decompose.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Tuple of lower and upper matrix.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Source matrix is not square shaped.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[,] L, <span class=\"hljs-built_in\">double</span>[,] U</span>) <span class=\"hljs-title\">Decompose</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[,] source</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (source.GetLength(<span class=\"hljs-number\">0</span>) != source.GetLength(<span class=\"hljs-number\">1</span>))\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Source matrix is not square shaped.&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> pivot = source.GetLength(<span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-keyword\">var</span> lower = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[pivot, pivot];\n            <span class=\"hljs-keyword\">var</span> upper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[pivot, pivot];\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pivot; i++)\n            {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k = i; k &lt; pivot; k++)\n                {\n                    <span class=\"hljs-built_in\">double</span> sum = <span class=\"hljs-number\">0</span>;\n\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++)\n                    {\n                        sum += lower[i, j] * upper[j, k];\n                    }\n\n                    upper[i, k] = source[i, k] - sum;\n                }\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k = i; k &lt; pivot; k++)\n                {\n                    <span class=\"hljs-keyword\">if</span> (i == k)\n                    {\n                        lower[i, i] = <span class=\"hljs-number\">1</span>;\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        <span class=\"hljs-built_in\">double</span> sum = <span class=\"hljs-number\">0</span>;\n\n                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++)\n                        {\n                            sum += lower[k, j] * upper[j, i];\n                        }\n\n                        lower[k, i] = (source[k, i] - sum) / upper[i, i];\n                    }\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> (L: lower, U: upper);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Eliminates linear equations system represented as A*x=b, using LU-decomposition,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where A - matrix of equation coefficients, b - vector of absolute terms of equations.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;matrix&quot;&gt;</span>Matrix of equation coefficients.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;coefficients&quot;&gt;</span>Vector of absolute terms of equations.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Vector-solution for linear equations system.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Matrix of equation coefficients is not square shaped.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span>[] <span class=\"hljs-title\">Eliminate</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[,] matrix, <span class=\"hljs-built_in\">double</span>[] coefficients</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (matrix.GetLength(<span class=\"hljs-number\">0</span>) != matrix.GetLength(<span class=\"hljs-number\">1</span>))\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Matrix of equation coefficients is not square shaped.&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> pivot = matrix.GetLength(<span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-keyword\">var</span> upperTransform = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[pivot, <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// U * upperTransform = coefficients</span>\n            <span class=\"hljs-keyword\">var</span> solution = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[pivot]; <span class=\"hljs-comment\">// L * solution = upperTransform</span>\n            (<span class=\"hljs-built_in\">double</span>[,] l, <span class=\"hljs-built_in\">double</span>[,] u) = Decompose(matrix);\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; pivot; i++)\n            {\n                <span class=\"hljs-built_in\">double</span> pivotPointSum = <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; i; j++)\n                {\n                    pivotPointSum += upperTransform[j, <span class=\"hljs-number\">0</span>] * l[i, j];\n                }\n\n                upperTransform[i, <span class=\"hljs-number\">0</span>] = (coefficients[i] - pivotPointSum) / l[i, i];\n            }\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = pivot - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)\n            {\n                <span class=\"hljs-built_in\">double</span> pivotPointSum = <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = i; j &lt; pivot; j++)\n                {\n                    pivotPointSum += solution[j] * u[i, j];\n                }\n\n                solution[i] = (upperTransform[i, <span class=\"hljs-number\">0</span>] - pivotPointSum) / u[i, i];\n            }\n\n            <span class=\"hljs-keyword\">return</span> solution;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "arfy slowy",
      "email": "slowy.arfy@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Sven",
      "email": "69042800+Svn-Sp@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rafael García Cuéllar",
      "email": "r.gc@hotmail.es",
      "commits": 1
    },
    {
      "name": "Mavroudo",
      "email": "mavroudo@csd.auth.gr",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
