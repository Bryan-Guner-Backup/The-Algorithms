{
  "slug": "stackpostfixnotation",
  "name": "StackPostfixNotation",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/StackPostfixNotation.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/StackPostfixNotation.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StackPostfixNotation</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">post</span> <span class=\"hljs-operator\">=</span> scanner.nextLine(); <span class=\"hljs-comment\">// Takes input with spaces in between eg. &quot;1 21 +&quot;</span>\n    System.out.println(postfixEvaluate(post));\n    scanner.close();\n  }\n\n  <span class=\"hljs-comment\">// Evaluates the given postfix expression string and returns the result.</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">postfixEvaluate</span><span class=\"hljs-params\">(String exp)</span> {\n    Stack&lt;Integer&gt; s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>&lt;Integer&gt;();\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">tokens</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(exp);\n\n    <span class=\"hljs-keyword\">while</span> (tokens.hasNext()) {\n      <span class=\"hljs-keyword\">if</span> (tokens.hasNextInt()) {\n        s.push(tokens.nextInt()); <span class=\"hljs-comment\">// If int then push to stack</span>\n      } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// else pop top two values and perform the operation</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num2</span> <span class=\"hljs-operator\">=</span> s.pop();\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num1</span> <span class=\"hljs-operator\">=</span> s.pop();\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">op</span> <span class=\"hljs-operator\">=</span> tokens.next();\n\n        <span class=\"hljs-keyword\">if</span> (op.equals(<span class=\"hljs-string\">&quot;+&quot;</span>)) {\n          s.push(num1 + num2);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op.equals(<span class=\"hljs-string\">&quot;-&quot;</span>)) {\n          s.push(num1 - num2);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op.equals(<span class=\"hljs-string\">&quot;*&quot;</span>)) {\n          s.push(num1 * num2);\n        } <span class=\"hljs-keyword\">else</span> {\n          s.push(num1 / num2);\n        }\n\n        <span class=\"hljs-comment\">//  &quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;</span>\n      }\n    }\n    tokens.close();\n    <span class=\"hljs-keyword\">return</span> s.pop();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "cnddhks846@naver.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
