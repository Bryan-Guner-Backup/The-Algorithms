{
  "slug": "subarray-sum",
  "name": "Subarray Sum",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "backtracking/subarray_sum.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/subarray_sum.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Subset-sum](https://en.wikipedia.org/wiki/Subset_sum_problem) (only\n * continuous subsets) problem\n * @details We are given an array and a sum value. The algorithms find all\n * the subarrays of that array with sum equal to the given sum and return such\n * subarrays count. This approach will have \\f$O(n)\\f$ time complexity and\n * \\f$O(n)\\f$ space complexity. <span class=\"hljs-doctag\">NOTE:</span> In this problem, we are only referring to\n * the continuous subsets as subarrays everywhere. Subarrays can be created\n * using deletion operation at the end of the front of an array only. The parent\n * array is also counted in subarrays having 0 number of deletion operations.\n *\n * @author [Swastika Gupta](https://github.com/Swastyy)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>        <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>       <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unordered_map&gt;</span>  <span class=\"hljs-comment\">/// for unordered_map</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>         <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n<span class=\"hljs-comment\">/**\n * @namespace subarray_sum\n * @brief Functions for the [Subset\n * sum](https://en.wikipedia.org/wiki/Subset_sum_problem) implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> subarray_sum {\n<span class=\"hljs-comment\">/**\n * @brief The main function that implements the count of the subarrays\n * @param sum is the required sum of any subarrays\n * @param in_arr is the input array\n * @returns count of the number of subsets with required sum\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">subarray_sum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int64_t</span> sum, <span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; &amp;in_arr)</span> </span>{\n    <span class=\"hljs-type\">int64_t</span> nelement = in_arr.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-type\">int64_t</span> count_of_subset = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int64_t</span> current_sum = <span class=\"hljs-number\">0</span>;\n    std::unordered_map&lt;<span class=\"hljs-type\">int64_t</span>, <span class=\"hljs-type\">int64_t</span>&gt;\n        sumarray;  <span class=\"hljs-comment\">// to store the subarrays count</span>\n                   <span class=\"hljs-comment\">// frequency having some sum value</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; nelement; i++) {\n        current_sum += in_arr[i];\n\n        <span class=\"hljs-keyword\">if</span> (current_sum == sum) {\n            count_of_subset++;\n        }\n        <span class=\"hljs-comment\">// If in case current_sum is greater than the required sum</span>\n        <span class=\"hljs-keyword\">if</span> (sumarray.<span class=\"hljs-built_in\">find</span>(current_sum - sum) != sumarray.<span class=\"hljs-built_in\">end</span>()) {\n            count_of_subset += (sumarray[current_sum - sum]);\n        }\n        sumarray[current_sum]++;\n    }\n    <span class=\"hljs-keyword\">return</span> count_of_subset;\n}\n}  <span class=\"hljs-comment\">// namespace subarray_sum</span>\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 1st test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1st test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array1 = {<span class=\"hljs-number\">-7</span>, <span class=\"hljs-number\">-3</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>};  <span class=\"hljs-comment\">// input array</span>\n    <span class=\"hljs-built_in\">assert</span>(\n        backtracking::subarray_sum::<span class=\"hljs-built_in\">subarray_sum</span>(<span class=\"hljs-number\">0</span>, array1) ==\n        <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// first argument in subarray_sum function is the required sum and</span>\n             <span class=\"hljs-comment\">// second is the input array, answer is the subarray {(-3,-2,5)}</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 2nd test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2nd test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array2 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subarray_sum::<span class=\"hljs-built_in\">subarray_sum</span>(<span class=\"hljs-number\">6</span>, array2) ==\n           <span class=\"hljs-number\">2</span>);  <span class=\"hljs-comment\">// here we are expecting 2 subsets which sum up to 6 i.e.</span>\n                <span class=\"hljs-comment\">// {(1,2,3),(3,3)}</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 3rd test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3rd test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array3 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subarray_sum::<span class=\"hljs-built_in\">subarray_sum</span>(<span class=\"hljs-number\">1</span>, array3) ==\n           <span class=\"hljs-number\">4</span>);  <span class=\"hljs-comment\">// here we are expecting 4 subsets which sum up to 1 i.e.</span>\n                <span class=\"hljs-comment\">// {(1),(1),(1),(1)}</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 4rd test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4th test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array4 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subarray_sum::<span class=\"hljs-built_in\">subarray_sum</span>(<span class=\"hljs-number\">6</span>, array4) ==\n           <span class=\"hljs-number\">3</span>);  <span class=\"hljs-comment\">// here we are expecting 3 subsets which sum up to 6 i.e.</span>\n                <span class=\"hljs-comment\">// {(3,3),(3,3),(3,3)}</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// 5th test</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;5th test &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array5 = {};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::subarray_sum::<span class=\"hljs-built_in\">subarray_sum</span>(<span class=\"hljs-number\">6</span>, array5) ==\n           <span class=\"hljs-number\">0</span>);  <span class=\"hljs-comment\">// here we are expecting 0 subsets which sum up to 6 i.e. we</span>\n                <span class=\"hljs-comment\">// cannot select anything from an empty array</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
