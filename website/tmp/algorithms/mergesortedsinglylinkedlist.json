{
  "slug": "mergesortedsinglylinkedlist",
  "name": "MergeSortedSinglyLinkedList",
  "categories": ["datastructures", "list"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Lists/MergeSortedSinglyLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Lists/MergeSortedSinglyLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Lists;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MergeSortedSinglyLinkedList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SinglyLinkedList</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">SinglyLinkedList</span> <span class=\"hljs-variable\">listA</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>();\n    <span class=\"hljs-type\">SinglyLinkedList</span> <span class=\"hljs-variable\">listB</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>();\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= <span class=\"hljs-number\">10</span>; i += <span class=\"hljs-number\">2</span>) {\n      listA.insert(i);\n      listB.insert(i - <span class=\"hljs-number\">1</span>);\n    }\n    <span class=\"hljs-keyword\">assert</span> listA.toString().equals(<span class=\"hljs-string\">&quot;2-&gt;4-&gt;6-&gt;8-&gt;10&quot;</span>);\n    <span class=\"hljs-keyword\">assert</span> listB.toString().equals(<span class=\"hljs-string\">&quot;1-&gt;3-&gt;5-&gt;7-&gt;9&quot;</span>);\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(listA, listB)</span>.toString().equals(<span class=\"hljs-string\">&quot;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;10&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Merge two sorted SingleLinkedList\n   *\n   * <span class=\"hljs-doctag\">@param</span> listA the first sorted list\n   * <span class=\"hljs-doctag\">@param</span> listB the second sored list\n   * <span class=\"hljs-doctag\">@return</span> merged sorted list\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> SinglyLinkedList <span class=\"hljs-title function_\">merge</span><span class=\"hljs-params\">(SinglyLinkedList listA, SinglyLinkedList listB)</span> {\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">headA</span> <span class=\"hljs-operator\">=</span> listA.getHead();\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">headB</span> <span class=\"hljs-operator\">=</span> listB.getHead();\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> listA.size() + listB.size();\n\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">head</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">tail</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">while</span> (headA != <span class=\"hljs-literal\">null</span> &amp;&amp; headB != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">if</span> (headA.value &lt;= headB.value) {\n        tail.next = headA;\n        headA = headA.next;\n      } <span class=\"hljs-keyword\">else</span> {\n        tail.next = headB;\n        headB = headB.next;\n      }\n      tail = tail.next;\n    }\n    <span class=\"hljs-keyword\">if</span> (headA == <span class=\"hljs-literal\">null</span>) {\n      tail.next = headB;\n    }\n    <span class=\"hljs-keyword\">if</span> (headB == <span class=\"hljs-literal\">null</span>) {\n      tail.next = headA;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>(head.next, size);\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
