{
  "slug": "treap",
  "name": "Treap",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/treap.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/treap.py",
      "code": "<span class=\"hljs-comment\"># flake8: noqa</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Optional</span>, <span class=\"hljs-type\">Tuple</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Treap&#x27;s node\n    Treap is a binary tree by value and heap by priority\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, value: <span class=\"hljs-type\">Optional</span>[<span class=\"hljs-built_in\">int</span>] = <span class=\"hljs-literal\">None</span></span>):\n        self.value = value\n        self.prior = random()\n        self.left: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n        self.right: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">from</span> pprint <span class=\"hljs-keyword\">import</span> pformat\n\n        <span class=\"hljs-keyword\">if</span> self.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> self.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;&#x27;<span class=\"hljs-subst\">{self.value}</span>: <span class=\"hljs-subst\">{self.prior:<span class=\"hljs-number\">.5</span>}</span>&#x27;&quot;</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> pformat(\n                {<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.value}</span>: <span class=\"hljs-subst\">{self.prior:<span class=\"hljs-number\">.5</span>}</span>&quot;</span>: (self.left, self.right)}, indent=<span class=\"hljs-number\">1</span>\n            )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        value = <span class=\"hljs-built_in\">str</span>(self.value) + <span class=\"hljs-string\">&quot; &quot;</span>\n        left = <span class=\"hljs-built_in\">str</span>(self.left <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;&quot;</span>)\n        right = <span class=\"hljs-built_in\">str</span>(self.right <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;&quot;</span>)\n        <span class=\"hljs-keyword\">return</span> value + left + right\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">root: <span class=\"hljs-type\">Optional</span>[Node], value: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">Tuple</span>[<span class=\"hljs-type\">Optional</span>[Node], <span class=\"hljs-type\">Optional</span>[Node]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    We split current tree into 2 trees with value:\n\n    Left tree contains all values less than split value.\n    Right tree contains all values greater or equal, than split value\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># None tree is split into 2 Nones</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">elif</span> root.value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">if</span> value &lt; root.value:\n            <span class=\"hljs-string\">&quot;&quot;&quot;\n            Right tree&#x27;s root will be current node.\n            Now we split(with the same value) current node&#x27;s left son\n            Left tree: left part of that split\n            Right tree&#x27;s left son: right part of that split\n            &quot;&quot;&quot;</span>\n            left, root.left = split(root.left, value)\n            <span class=\"hljs-keyword\">return</span> left, root\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-string\">&quot;&quot;&quot;\n            Just symmetric to previous case\n            &quot;&quot;&quot;</span>\n            root.right, right = split(root.right, value)\n            <span class=\"hljs-keyword\">return</span> root, right\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">left: <span class=\"hljs-type\">Optional</span>[Node], right: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; <span class=\"hljs-type\">Optional</span>[Node]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    We merge 2 trees into one.\n    Note: all left tree&#x27;s values must be less than all right tree&#x27;s\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">not</span> left) <span class=\"hljs-keyword\">or</span> (<span class=\"hljs-keyword\">not</span> right):  <span class=\"hljs-comment\"># If one node is None, return the other</span>\n        <span class=\"hljs-keyword\">return</span> left <span class=\"hljs-keyword\">or</span> right\n    <span class=\"hljs-keyword\">elif</span> left.prior &lt; right.prior:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Left will be root because it has more priority\n        Now we need to merge left&#x27;s right son and right tree\n        &quot;&quot;&quot;</span>\n        left.right = merge(left.right, right)\n        <span class=\"hljs-keyword\">return</span> left\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Symmetric as well\n        &quot;&quot;&quot;</span>\n        right.left = merge(left, right.left)\n        <span class=\"hljs-keyword\">return</span> right\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">root: <span class=\"hljs-type\">Optional</span>[Node], value: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">Optional</span>[Node]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Insert element\n\n    Split current tree with a value into left, right,\n    Insert new node into the middle\n    Merge left, node, right into root\n    &quot;&quot;&quot;</span>\n    node = Node(value)\n    left, right = split(root, value)\n    <span class=\"hljs-keyword\">return</span> merge(merge(left, node), right)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">erase</span>(<span class=\"hljs-params\">root: <span class=\"hljs-type\">Optional</span>[Node], value: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">Optional</span>[Node]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Erase element\n\n    Split all nodes with values less into left,\n    Split all nodes with values greater into right.\n    Merge left, right\n    &quot;&quot;&quot;</span>\n    left, right = split(root, value - <span class=\"hljs-number\">1</span>)\n    _, right = split(right, value)\n    <span class=\"hljs-keyword\">return</span> merge(left, right)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inorder</span>(<span class=\"hljs-params\">root: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Just recursive print of a tree\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root:  <span class=\"hljs-comment\"># None</span>\n        <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">else</span>:\n        inorder(root.left)\n        <span class=\"hljs-built_in\">print</span>(root.value, end=<span class=\"hljs-string\">&quot;,&quot;</span>)\n        inorder(root.right)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">interactTreap</span>(<span class=\"hljs-params\">root: <span class=\"hljs-type\">Optional</span>[Node], args: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-type\">Optional</span>[Node]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Commands:\n    + value to add value into treap\n    - value to erase all nodes with value\n\n        &gt;&gt;&gt; root = interactTreap(None, &quot;+1&quot;)\n        &gt;&gt;&gt; inorder(root)\n        1,\n        &gt;&gt;&gt; root = interactTreap(root, &quot;+3 +5 +17 +19 +2 +16 +4 +0&quot;)\n        &gt;&gt;&gt; inorder(root)\n        0,1,2,3,4,5,16,17,19,\n        &gt;&gt;&gt; root = interactTreap(root, &quot;+4 +4 +4&quot;)\n        &gt;&gt;&gt; inorder(root)\n        0,1,2,3,4,4,4,4,5,16,17,19,\n        &gt;&gt;&gt; root = interactTreap(root, &quot;-0&quot;)\n        &gt;&gt;&gt; inorder(root)\n        1,2,3,4,4,4,4,5,16,17,19,\n        &gt;&gt;&gt; root = interactTreap(root, &quot;-4&quot;)\n        &gt;&gt;&gt; inorder(root)\n        1,2,3,5,16,17,19,\n        &gt;&gt;&gt; root = interactTreap(root, &quot;=0&quot;)\n        Unknown command\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> arg <span class=\"hljs-keyword\">in</span> args.split():\n        <span class=\"hljs-keyword\">if</span> arg[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;+&quot;</span>:\n            root = insert(root, <span class=\"hljs-built_in\">int</span>(arg[<span class=\"hljs-number\">1</span>:]))\n\n        <span class=\"hljs-keyword\">elif</span> arg[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>:\n            root = erase(root, <span class=\"hljs-built_in\">int</span>(arg[<span class=\"hljs-number\">1</span>:]))\n\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Unknown command&quot;</span>)\n\n    <span class=\"hljs-keyword\">return</span> root\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;After each command, program prints treap&quot;&quot;&quot;</span>\n    root = <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;enter numbers to create a tree, + value to add value into treap, &quot;</span>\n        <span class=\"hljs-string\">&quot;- value to erase all nodes with value. &#x27;q&#x27; to quit. &quot;</span>\n    )\n\n    args = <span class=\"hljs-built_in\">input</span>()\n    <span class=\"hljs-keyword\">while</span> args != <span class=\"hljs-string\">&quot;q&quot;</span>:\n        root = interactTreap(root, args)\n        <span class=\"hljs-built_in\">print</span>(root)\n        args = <span class=\"hljs-built_in\">input</span>()\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;good by!&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Hao LI",
      "email": "8520588+Leo-LiHao@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hocnonsense",
      "email": "48747984+Hocnonsense@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Samarth Sehgal",
      "email": "samarthsehgal97@gmail.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Artyom Belousov",
      "email": "flygrounder@yandex.ru",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
