{
  "slug": "check-prime",
  "name": "Check Prime",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/check_prime.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/check_prime.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * Copyright 2020 @author omkarlanghe\n *\n * @file\n * A simple program to check if the given number if prime or not.\n *\n * @brief\n * Reduced all possibilities of a number which cannot be prime.\n * Eg: No even number, except 2 can be a prime number, hence we will increment\n * our loop with i+2 jumping on all odd numbers only. If number is &lt;= 1 or if it\n * is even except 2, break the loop and return false telling number is not\n * prime.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-comment\">/**\n * Function to check if the given number is prime or not.\n * @param num number to be checked.\n * @return if number is prime, it returns @ true, else it returns @ false.\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_prime</span><span class=\"hljs-params\">(T num)</span> </span>{\n    <span class=\"hljs-type\">bool</span> result = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">if</span> (num &lt;= <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (num == <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((num &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (num &gt;= <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">for</span> (T i = <span class=\"hljs-number\">3</span>; (i * i) &lt;= (num); i = (i + <span class=\"hljs-number\">2</span>)) {\n            <span class=\"hljs-keyword\">if</span> ((num % i) == <span class=\"hljs-number\">0</span>) {\n                result = <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> (result);\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// perform self-test</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_prime</span>(<span class=\"hljs-number\">50</span>) == <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_prime</span>(<span class=\"hljs-number\">115249</span>) == <span class=\"hljs-literal\">true</span>);\n\n    <span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">0</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number to check if it is prime or not&quot;</span> &lt;&lt; std::endl;\n    std::cin &gt;&gt; num;\n    <span class=\"hljs-type\">bool</span> result = <span class=\"hljs-built_in\">is_prime</span>(num);\n    <span class=\"hljs-keyword\">if</span> (result) {\n        std::cout &lt;&lt; num &lt;&lt; <span class=\"hljs-string\">&quot; is a prime number&quot;</span> &lt;&lt; std::endl;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; num &lt;&lt; <span class=\"hljs-string\">&quot; is not a prime number&quot;</span> &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "php": {
      "dir": "Maths/CheckPrime.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/Maths/CheckPrime.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">/**\n * This function check whether\n * the provided integer is a prime\n * number or not.\n *\n * <span class=\"hljs-doctag\">@param</span> Integer $number An integer input\n * <span class=\"hljs-doctag\">@return</span> boolean whether the number is prime or not\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isPrime</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$number</span></span>)\n</span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$number</span> === <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$number</span> % <span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-variable\">$number</span> &lt; <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-variable\">$i</span> &lt;= sqrt(<span class=\"hljs-variable\">$number</span>)) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$number</span> % <span class=\"hljs-variable\">$i</span> === <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-variable\">$i</span> += <span class=\"hljs-number\">2</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Moshood Joshua",
      "email": "joshua.moshood@gmail.com",
      "commits": 2
    },
    {
      "name": "Akshay Khale",
      "email": "khaleakshay@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
