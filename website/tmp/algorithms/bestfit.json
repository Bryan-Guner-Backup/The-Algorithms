{
  "slug": "bestfit",
  "name": "BestFit",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/BestFit.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/BestFit.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n\n<span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@author</span> Dekas Dimitrios */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BestFit</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">NO_ALLOCATION</span> <span class=\"hljs-operator\">=</span>\n      -<span class=\"hljs-number\">255</span>; <span class=\"hljs-comment\">// if a process has been allocated in position -255,</span>\n  <span class=\"hljs-comment\">// it means that it has not been actually allocated.</span>\n\n  <span class=\"hljs-comment\">/**\n   * Method to find the maximum valued element of an array filled with positive integers.\n   *\n   * <span class=\"hljs-doctag\">@param</span> array: an array filled with positive integers.\n   * <span class=\"hljs-doctag\">@return</span> the maximum valued element of the array.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findMaxElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] array)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> value : array) {\n      <span class=\"hljs-keyword\">if</span> (value &gt; max) {\n        max = value;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> max;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Method to find the index of the memory block that is going to fit the given process based on\n   * the best fit algorithm.\n   *\n   * <span class=\"hljs-doctag\">@param</span> blocks: the array with the available memory blocks.\n   * <span class=\"hljs-doctag\">@param</span> process: the size of the process.\n   * <span class=\"hljs-doctag\">@return</span> the index of the block that fits, or -255 if no such block exists.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findBestFit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] blockSizes, <span class=\"hljs-type\">int</span> processSize)</span> {\n    <span class=\"hljs-comment\">// Initialize minDiff with an unreachable value by a difference between a blockSize and the</span>\n    <span class=\"hljs-comment\">// processSize.</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">minDiff</span> <span class=\"hljs-operator\">=</span> findMaxElement(blockSizes);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span>\n        NO_ALLOCATION; <span class=\"hljs-comment\">// If there is no block that can fit the process, return NO_ALLOCATION as the</span>\n    <span class=\"hljs-comment\">// result.</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        i &lt; blockSizes.length;\n        i++) { <span class=\"hljs-comment\">// Find the most fitting memory block for the given process.</span>\n      <span class=\"hljs-keyword\">if</span> (blockSizes[i] - processSize &lt; minDiff &amp;&amp; blockSizes[i] - processSize &gt;= <span class=\"hljs-number\">0</span>) {\n        minDiff = blockSizes[i] - processSize;\n        index = i;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> index;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Method to allocate memory to blocks according to the best fit algorithm. It should return an\n   * ArrayList of Integers, where the index is the process ID (zero-indexed) and the value is the\n   * block number (also zero-indexed).\n   *\n   * <span class=\"hljs-doctag\">@param</span> sizeOfBlocks: an int array that contains the sizes of the memory blocks available.\n   * <span class=\"hljs-doctag\">@param</span> sizeOfProcesses: an int array that contains the sizes of the processes we need memory\n   *     blocks for.\n   * <span class=\"hljs-doctag\">@return</span> the ArrayList filled with Integers repressenting the memory allocation that took place.\n   */</span>\n  <span class=\"hljs-keyword\">static</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">bestFit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] sizeOfBlocks, <span class=\"hljs-type\">int</span>[] sizeOfProcesses)</span> {\n    <span class=\"hljs-comment\">// The array list responsible for saving the memory allocations done by the best-fit algorithm</span>\n    ArrayList&lt;Integer&gt; memAlloc = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    <span class=\"hljs-comment\">// Do this for every process</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> processSize : sizeOfProcesses) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">chosenBlockIdx</span> <span class=\"hljs-operator\">=</span>\n          findBestFit(\n              sizeOfBlocks, processSize); <span class=\"hljs-comment\">// Find the index of the memory block going to be used</span>\n      memAlloc.add(chosenBlockIdx); <span class=\"hljs-comment\">// Store the chosen block index in the memAlloc array list</span>\n      <span class=\"hljs-keyword\">if</span> (chosenBlockIdx\n          != NO_ALLOCATION) { <span class=\"hljs-comment\">// Only if a block was chosen to store the process in it,</span>\n        sizeOfBlocks[chosenBlockIdx] -= processSize; <span class=\"hljs-comment\">// resize the block based on the process size</span>\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> memAlloc;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Method to print the memory allocated.\n   *\n   * <span class=\"hljs-doctag\">@param</span> memAllocation: an ArrayList of Integer representing the memory allocation done by the\n   *     bestFit method.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printMemoryAllocation</span><span class=\"hljs-params\">(ArrayList&lt;Integer&gt; memAllocation)</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Process No.\\tBlock No.&quot;</span>);\n    System.out.println(<span class=\"hljs-string\">&quot;===========\\t=========&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; memAllocation.size(); i++) {\n      System.out.print(<span class=\"hljs-string\">&quot; &quot;</span> + i + <span class=\"hljs-string\">&quot;\\t\\t&quot;</span>);\n      <span class=\"hljs-keyword\">if</span> (memAllocation.get(i) != NO_ALLOCATION) System.out.print(memAllocation.get(i));\n      <span class=\"hljs-keyword\">else</span> System.out.print(<span class=\"hljs-string\">&quot;Not Allocated&quot;</span>);\n      System.out.println();\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Dekas Dimitrios",
      "email": "dimitridekas@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
