{
  "slug": "kruskalmst",
  "name": "KruskalMST",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Graphs/KruskalMST.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs/KruskalMST.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DisjointSetTreeNode</span> {\n  <span class=\"hljs-comment\">// Disjoint Set Node to store the parent and rank</span>\n  <span class=\"hljs-title function_\">constructor</span> (key) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">key</span> = key\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">parent</span> = <span class=\"hljs-variable language_\">this</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rank</span> = <span class=\"hljs-number\">0</span>\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DisjointSetTree</span> {\n  <span class=\"hljs-comment\">// Disjoint Set DataStructure</span>\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-comment\">// map to from node name to the node object</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span> = {}\n  }\n\n  makeSet (x) {\n    <span class=\"hljs-comment\">// Function to create a new set with x as its member</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DisjointSetTreeNode</span>(x)\n  }\n\n  findSet (x) {\n    <span class=\"hljs-comment\">// Function to find the set x belongs to (with path-compression)</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x] !== <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x].<span class=\"hljs-property\">parent</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x].<span class=\"hljs-property\">parent</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findSet</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x].<span class=\"hljs-property\">parent</span>.<span class=\"hljs-property\">key</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>[x].<span class=\"hljs-property\">parent</span>\n  }\n\n  union (x, y) {\n    <span class=\"hljs-comment\">// Function to merge 2 disjoint sets</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">link</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findSet</span>(x), <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findSet</span>(y))\n  }\n\n  link (x, y) {\n    <span class=\"hljs-comment\">// Helper function for union operation</span>\n    <span class=\"hljs-keyword\">if</span> (x.<span class=\"hljs-property\">rank</span> &gt; y.<span class=\"hljs-property\">rank</span>) {\n      y.<span class=\"hljs-property\">parent</span> = x\n    } <span class=\"hljs-keyword\">else</span> {\n      x.<span class=\"hljs-property\">parent</span> = y\n      <span class=\"hljs-keyword\">if</span> (x.<span class=\"hljs-property\">rank</span> === y.<span class=\"hljs-property\">rank</span>) {\n        y.<span class=\"hljs-property\">rank</span> += <span class=\"hljs-number\">1</span>\n      }\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span> {\n  <span class=\"hljs-comment\">// Weighted Undirected Graph class</span>\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span> = {}\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nodes</span> = <span class=\"hljs-number\">0</span>\n  }\n\n  addNode (node) {\n    <span class=\"hljs-comment\">// Function to add a node to the graph (connection represented by set)</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node] = {}\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nodes</span> += <span class=\"hljs-number\">1</span>\n  }\n\n  addEdge (node1, node2, weight) {\n    <span class=\"hljs-comment\">// Function to add an edge (adds the node too if they are not present in the graph)</span>\n    <span class=\"hljs-keyword\">if</span> (!(node1 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node1) }\n    <span class=\"hljs-keyword\">if</span> (!(node2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node2) }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node1][node2] = weight\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node2][node1] = weight\n  }\n\n  <span class=\"hljs-title class_\">Kruskal</span>MST () {\n    <span class=\"hljs-comment\">// Kruskal&#x27;s Algorithm to generate a Minimum Spanning Tree (MST) of a graph</span>\n    <span class=\"hljs-comment\">// Details: https://en.wikipedia.org/wiki/Kruskal%27s_algorithm</span>\n    <span class=\"hljs-comment\">// getting the edges in ascending order of weights</span>\n    <span class=\"hljs-keyword\">const</span> edges = []\n    <span class=\"hljs-keyword\">const</span> seen = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> start <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> end <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[start])) {\n        <span class=\"hljs-keyword\">if</span> (!seen.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${start}</span> <span class=\"hljs-subst\">${end}</span>`</span>)) {\n          seen.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${end}</span> <span class=\"hljs-subst\">${start}</span>`</span>)\n          edges.<span class=\"hljs-title function_\">push</span>([start, end, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[start][end]])\n        }\n      }\n    }\n    edges.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a[<span class=\"hljs-number\">2</span>] - b[<span class=\"hljs-number\">2</span>])\n    <span class=\"hljs-comment\">// creating the disjoint set</span>\n    <span class=\"hljs-keyword\">const</span> disjointSet = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DisjointSetTree</span>()\n    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">node</span> =&gt;</span> disjointSet.<span class=\"hljs-title function_\">makeSet</span>(node))\n    <span class=\"hljs-comment\">// MST generation</span>\n    <span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span>()\n    <span class=\"hljs-keyword\">let</span> numEdges = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> (numEdges &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">nodes</span> - <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">const</span> [u, v, w] = edges[index]\n      index += <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">if</span> (disjointSet.<span class=\"hljs-title function_\">findSet</span>(u) !== disjointSet.<span class=\"hljs-title function_\">findSet</span>(v)) {\n        numEdges += <span class=\"hljs-number\">1</span>\n        graph.<span class=\"hljs-title function_\">addEdge</span>(u, v, w)\n        disjointSet.<span class=\"hljs-title function_\">union</span>(u, v)\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> graph\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span> () {\n  <span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span>()\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">100</span>) <span class=\"hljs-comment\">// Removed in MST</span>\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(graph)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(graph.<span class=\"hljs-title class_\">Kruskal</span>MST())\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    }
  },
  "contributors": [
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
