{
  "slug": "matrix-class",
  "name": "Matrix Class",
  "categories": ["matrix"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "matrix/matrix_class.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/matrix/matrix_class.py",
      "code": "<span class=\"hljs-comment\"># An OOP approach to representing and manipulating matrices</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Matrix</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Matrix object generated from a 2D array where each element is an array representing\r\n    a row.\r\n    Rows can contain type int or float.\r\n    Common operations and information available.\r\n    &gt;&gt;&gt; rows = [\r\n    ...     [1, 2, 3],\r\n    ...     [4, 5, 6],\r\n    ...     [7, 8, 9]\r\n    ... ]\r\n    &gt;&gt;&gt; matrix = Matrix(rows)\r\n    &gt;&gt;&gt; print(matrix)\r\n    [[1. 2. 3.]\r\n     [4. 5. 6.]\r\n     [7. 8. 9.]]\r\n\r\n    Matrix rows and columns are available as 2D arrays\r\n    &gt;&gt;&gt; print(matrix.rows)\r\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\r\n    &gt;&gt;&gt; print(matrix.columns())\r\n    [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\r\n\r\n    Order is returned as a tuple\r\n    &gt;&gt;&gt; matrix.order\r\n    (3, 3)\r\n\r\n    Squareness and invertability are represented as bool\r\n    &gt;&gt;&gt; matrix.is_square\r\n    True\r\n    &gt;&gt;&gt; matrix.is_invertable()\r\n    False\r\n\r\n    Identity, Minors, Cofactors and Adjugate are returned as Matrices.  Inverse can be\r\n    a Matrix or Nonetype\r\n    &gt;&gt;&gt; print(matrix.identity())\r\n    [[1. 0. 0.]\r\n     [0. 1. 0.]\r\n     [0. 0. 1.]]\r\n    &gt;&gt;&gt; print(matrix.minors())\r\n    [[-3. -6. -3.]\r\n     [-6. -12. -6.]\r\n     [-3. -6. -3.]]\r\n    &gt;&gt;&gt; print(matrix.cofactors())\r\n    [[-3. 6. -3.]\r\n     [6. -12. 6.]\r\n     [-3. 6. -3.]]\r\n    &gt;&gt;&gt;  # won&#x27;t be apparent due to the nature of the cofactor matrix\r\n    &gt;&gt;&gt; print(matrix.adjugate())\r\n    [[-3. 6. -3.]\r\n     [6. -12. 6.]\r\n     [-3. 6. -3.]]\r\n    &gt;&gt;&gt; print(matrix.inverse())\r\n    None\r\n\r\n    Determinant is an int, float, or Nonetype\r\n    &gt;&gt;&gt; matrix.determinant()\r\n    0\r\n\r\n    Negation, scalar multiplication, addition, subtraction, multiplication and\r\n    exponentiation are available and all return a Matrix\r\n    &gt;&gt;&gt; print(-matrix)\r\n    [[-1. -2. -3.]\r\n     [-4. -5. -6.]\r\n     [-7. -8. -9.]]\r\n    &gt;&gt;&gt; matrix2 = matrix * 3\r\n    &gt;&gt;&gt; print(matrix2)\r\n    [[3. 6. 9.]\r\n     [12. 15. 18.]\r\n     [21. 24. 27.]]\r\n    &gt;&gt;&gt; print(matrix + matrix2)\r\n    [[4. 8. 12.]\r\n     [16. 20. 24.]\r\n     [28. 32. 36.]]\r\n    &gt;&gt;&gt; print(matrix - matrix2)\r\n    [[-2. -4. -6.]\r\n     [-8. -10. -12.]\r\n     [-14. -16. -18.]]\r\n    &gt;&gt;&gt; print(matrix ** 3)\r\n    [[468. 576. 684.]\r\n     [1062. 1305. 1548.]\r\n     [1656. 2034. 2412.]]\r\n\r\n    Matrices can also be modified\r\n    &gt;&gt;&gt; matrix.add_row([10, 11, 12])\r\n    &gt;&gt;&gt; print(matrix)\r\n    [[1. 2. 3.]\r\n     [4. 5. 6.]\r\n     [7. 8. 9.]\r\n     [10. 11. 12.]]\r\n    &gt;&gt;&gt; matrix2.add_column([8, 16, 32])\r\n    &gt;&gt;&gt; print(matrix2)\r\n    [[3. 6. 9. 8.]\r\n     [12. 15. 18. 16.]\r\n     [21. 24. 27. 32.]]\r\n    &gt;&gt;&gt; print(matrix *  matrix2)\r\n    [[90. 108. 126. 136.]\r\n     [198. 243. 288. 304.]\r\n     [306. 378. 450. 472.]\r\n     [414. 513. 612. 640.]]\r\n\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, rows</span>):\r\n        error = TypeError(\r\n            <span class=\"hljs-string\">&quot;Matrices must be formed from a list of zero or more lists containing at &quot;</span>\r\n            <span class=\"hljs-string\">&quot;least one and the same number of values, each of which must be of type &quot;</span>\r\n            <span class=\"hljs-string\">&quot;int or float.&quot;</span>\r\n        )\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(rows) != <span class=\"hljs-number\">0</span>:\r\n            cols = <span class=\"hljs-built_in\">len</span>(rows[<span class=\"hljs-number\">0</span>])\r\n            <span class=\"hljs-keyword\">if</span> cols == <span class=\"hljs-number\">0</span>:\r\n                <span class=\"hljs-keyword\">raise</span> error\r\n            <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> rows:\r\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(row) != cols:\r\n                    <span class=\"hljs-keyword\">raise</span> error\r\n                <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> row:\r\n                    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(value, (<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>)):\r\n                        <span class=\"hljs-keyword\">raise</span> error\r\n            self.rows = rows\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.rows = []\r\n\r\n    <span class=\"hljs-comment\"># MATRIX INFORMATION</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">columns</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> [[row[i] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> self.rows] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(self.rows[<span class=\"hljs-number\">0</span>]))]\r\n\r\n<span class=\"hljs-meta\">    @property</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">num_rows</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.rows)\r\n\r\n<span class=\"hljs-meta\">    @property</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">num_columns</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.rows[<span class=\"hljs-number\">0</span>])\r\n\r\n<span class=\"hljs-meta\">    @property</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">order</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> (self.num_rows, self.num_columns)\r\n\r\n<span class=\"hljs-meta\">    @property</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_square</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self.order[<span class=\"hljs-number\">0</span>] == self.order[<span class=\"hljs-number\">1</span>]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">identity</span>(<span class=\"hljs-params\">self</span>):\r\n        values = [\r\n            [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> column_num != row_num <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> column_num <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)]\r\n            <span class=\"hljs-keyword\">for</span> row_num <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)\r\n        ]\r\n        <span class=\"hljs-keyword\">return</span> Matrix(values)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">determinant</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.is_square:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">if</span> self.order == (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>):\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">if</span> self.order == (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>):\r\n            <span class=\"hljs-keyword\">return</span> self.rows[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\r\n        <span class=\"hljs-keyword\">if</span> self.order == (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>):\r\n            <span class=\"hljs-keyword\">return</span> (self.rows[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] * self.rows[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]) - (\r\n                self.rows[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] * self.rows[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]\r\n            )\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(\r\n                self.rows[<span class=\"hljs-number\">0</span>][column] * self.cofactors().rows[<span class=\"hljs-number\">0</span>][column]\r\n                <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_columns)\r\n            )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_invertable</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">bool</span>(self.determinant())\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_minor</span>(<span class=\"hljs-params\">self, row, column</span>):\r\n        values = [\r\n            [\r\n                self.rows[other_row][other_column]\r\n                <span class=\"hljs-keyword\">for</span> other_column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_columns)\r\n                <span class=\"hljs-keyword\">if</span> other_column != column\r\n            ]\r\n            <span class=\"hljs-keyword\">for</span> other_row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)\r\n            <span class=\"hljs-keyword\">if</span> other_row != row\r\n        ]\r\n        <span class=\"hljs-keyword\">return</span> Matrix(values).determinant()\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_cofactor</span>(<span class=\"hljs-params\">self, row, column</span>):\r\n        <span class=\"hljs-keyword\">if</span> (row + column) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.get_minor(row, column)\r\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span> * self.get_minor(row, column)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minors</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> Matrix(\r\n            [\r\n                [self.get_minor(row, column) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_columns)]\r\n                <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)\r\n            ]\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cofactors</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> Matrix(\r\n            [\r\n                [\r\n                    self.minors().rows[row][column]\r\n                    <span class=\"hljs-keyword\">if</span> (row + column) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\r\n                    <span class=\"hljs-keyword\">else</span> self.minors().rows[row][column] * -<span class=\"hljs-number\">1</span>\r\n                    <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.minors().num_columns)\r\n                ]\r\n                <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.minors().num_rows)\r\n            ]\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">adjugate</span>(<span class=\"hljs-params\">self</span>):\r\n        values = [\r\n            [self.cofactors().rows[column][row] <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_columns)]\r\n            <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)\r\n        ]\r\n        <span class=\"hljs-keyword\">return</span> Matrix(values)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">inverse</span>(<span class=\"hljs-params\">self</span>):\r\n        determinant = self.determinant()\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> determinant <span class=\"hljs-keyword\">else</span> self.adjugate() * (<span class=\"hljs-number\">1</span> / determinant)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self.rows)\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">if</span> self.num_rows == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;[]&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.num_rows == <span class=\"hljs-number\">1</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;[[&quot;</span> + <span class=\"hljs-string\">&quot;. &quot;</span>.join(self.rows[<span class=\"hljs-number\">0</span>]) + <span class=\"hljs-string\">&quot;]]&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> (\r\n            <span class=\"hljs-string\">&quot;[&quot;</span>\r\n            + <span class=\"hljs-string\">&quot;\\n &quot;</span>.join(\r\n                [\r\n                    <span class=\"hljs-string\">&quot;[&quot;</span> + <span class=\"hljs-string\">&quot;. &quot;</span>.join([<span class=\"hljs-built_in\">str</span>(value) <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> row]) + <span class=\"hljs-string\">&quot;.]&quot;</span>\r\n                    <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> self.rows\r\n                ]\r\n            )\r\n            + <span class=\"hljs-string\">&quot;]&quot;</span>\r\n        )\r\n\r\n    <span class=\"hljs-comment\"># MATRIX MANIPULATION</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_row</span>(<span class=\"hljs-params\">self, row, position=<span class=\"hljs-literal\">None</span></span>):\r\n        type_error = TypeError(<span class=\"hljs-string\">&quot;Row must be a list containing all ints and/or floats&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(row, <span class=\"hljs-built_in\">list</span>):\r\n            <span class=\"hljs-keyword\">raise</span> type_error\r\n        <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> row:\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(value, (<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>)):\r\n                <span class=\"hljs-keyword\">raise</span> type_error\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(row) != self.num_columns:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(\r\n                <span class=\"hljs-string\">&quot;Row must be equal in length to the other rows in the matrix&quot;</span>\r\n            )\r\n        <span class=\"hljs-keyword\">if</span> position <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            self.rows.append(row)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.rows = self.rows[<span class=\"hljs-number\">0</span>:position] + [row] + self.rows[position:]\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add_column</span>(<span class=\"hljs-params\">self, column, position=<span class=\"hljs-literal\">None</span></span>):\r\n        type_error = TypeError(\r\n            <span class=\"hljs-string\">&quot;Column must be a list containing all ints and/or floats&quot;</span>\r\n        )\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(column, <span class=\"hljs-built_in\">list</span>):\r\n            <span class=\"hljs-keyword\">raise</span> type_error\r\n        <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> column:\r\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(value, (<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>)):\r\n                <span class=\"hljs-keyword\">raise</span> type_error\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(column) != self.num_rows:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(\r\n                <span class=\"hljs-string\">&quot;Column must be equal in length to the other columns in the matrix&quot;</span>\r\n            )\r\n        <span class=\"hljs-keyword\">if</span> position <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            self.rows = [self.rows[i] + [column[i]] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)]\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            self.rows = [\r\n                self.rows[i][<span class=\"hljs-number\">0</span>:position] + [column[i]] + self.rows[i][position:]\r\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)\r\n            ]\r\n\r\n    <span class=\"hljs-comment\"># MATRIX OPERATIONS</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, other</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(other, Matrix):\r\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;A Matrix can only be compared with another Matrix&quot;</span>)\r\n        <span class=\"hljs-keyword\">return</span> self.rows == other.rows\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__ne__</span>(<span class=\"hljs-params\">self, other</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> self == other\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__neg__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> self * -<span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__add__</span>(<span class=\"hljs-params\">self, other</span>):\r\n        <span class=\"hljs-keyword\">if</span> self.order != other.order:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Addition requires matrices of the same order&quot;</span>)\r\n        <span class=\"hljs-keyword\">return</span> Matrix(\r\n            [\r\n                [self.rows[i][j] + other.rows[i][j] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_columns)]\r\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)\r\n            ]\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__sub__</span>(<span class=\"hljs-params\">self, other</span>):\r\n        <span class=\"hljs-keyword\">if</span> self.order != other.order:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Subtraction requires matrices of the same order&quot;</span>)\r\n        <span class=\"hljs-keyword\">return</span> Matrix(\r\n            [\r\n                [self.rows[i][j] - other.rows[i][j] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_columns)]\r\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_rows)\r\n            ]\r\n        )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(other, (<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>)):\r\n            <span class=\"hljs-keyword\">return</span> Matrix([[element * other <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> row] <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> self.rows])\r\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">isinstance</span>(other, Matrix):\r\n            <span class=\"hljs-keyword\">if</span> self.num_columns != other.num_rows:\r\n                <span class=\"hljs-keyword\">raise</span> ValueError(\r\n                    <span class=\"hljs-string\">&quot;The number of columns in the first matrix must &quot;</span>\r\n                    <span class=\"hljs-string\">&quot;be equal to the number of rows in the second&quot;</span>\r\n                )\r\n            <span class=\"hljs-keyword\">return</span> Matrix(\r\n                [\r\n                    [Matrix.dot_product(row, column) <span class=\"hljs-keyword\">for</span> column <span class=\"hljs-keyword\">in</span> other.columns()]\r\n                    <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> self.rows\r\n                ]\r\n            )\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-keyword\">raise</span> TypeError(\r\n                <span class=\"hljs-string\">&quot;A Matrix can only be multiplied by an int, float, or another matrix&quot;</span>\r\n            )\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__pow__</span>(<span class=\"hljs-params\">self, other</span>):\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">int</span>):\r\n            <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;A Matrix can only be raised to the power of an int&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.is_square:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Only square matrices can be raised to a power&quot;</span>)\r\n        <span class=\"hljs-keyword\">if</span> other == <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">return</span> self.identity()\r\n        <span class=\"hljs-keyword\">if</span> other &lt; <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">if</span> self.is_invertable:\r\n                <span class=\"hljs-keyword\">return</span> self.inverse() ** (-other)\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(\r\n                <span class=\"hljs-string\">&quot;Only invertable matrices can be raised to a negative power&quot;</span>\r\n            )\r\n        result = self\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(other - <span class=\"hljs-number\">1</span>):\r\n            result *= self\r\n        <span class=\"hljs-keyword\">return</span> result\r\n\r\n<span class=\"hljs-meta\">    @classmethod</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dot_product</span>(<span class=\"hljs-params\">cls, row, column</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(row[i] * column[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(row)))\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Jasper",
      "email": "46252815+jasper256@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
