{
  "slug": "shunting-yard",
  "name": "Shunting Yard",
  "categories": ["algorithms", "parsing", "shuntingyard"],
  "body": {},
  "implementations": {
    "swift": {
      "dir": "algorithms/parsing/shunting_yard/shunting_yard.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/algorithms/parsing/shunting_yard/shunting_yard.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">ShuntingYard</span> {\n    <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Operator</span>: <span class=\"hljs-title class_\">String</span>, <span class=\"hljs-title class_\">CaseIterable</span> {\n        <span class=\"hljs-keyword\">case</span> power <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;^&quot;</span>\n        <span class=\"hljs-keyword\">case</span> plus <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;+&quot;</span>\n        <span class=\"hljs-keyword\">case</span> minus <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;-&quot;</span>\n        <span class=\"hljs-keyword\">case</span> times <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;*&quot;</span>\n        <span class=\"hljs-keyword\">case</span> divide <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/&quot;</span>\n    }\n\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">evaluate</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">string</span>: <span class=\"hljs-type\">String</span>) -&gt; <span class=\"hljs-type\">Double</span> {\n        <span class=\"hljs-keyword\">let</span> scanner <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Scanner</span>(string: string)\n        <span class=\"hljs-keyword\">var</span> numberStack: [<span class=\"hljs-type\">Double</span>] <span class=\"hljs-operator\">=</span> []\n        <span class=\"hljs-keyword\">var</span> operatorStack: [<span class=\"hljs-type\">Operator</span>] <span class=\"hljs-operator\">=</span> []\n\n        <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">applyOperator</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">op</span>: <span class=\"hljs-type\">Operator</span>) {\n            <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">let</span> a <span class=\"hljs-operator\">=</span> numberStack.popLast(), <span class=\"hljs-keyword\">let</span> b <span class=\"hljs-operator\">=</span> numberStack.popLast() <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span>\n            }\n\n            numberStack.append(op.apply(a, b))\n        }\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-operator\">!</span>scanner.isAtEnd {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> op <span class=\"hljs-operator\">=</span> scanner.scanOperator() {\n                <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> last <span class=\"hljs-operator\">=</span> operatorStack.last, last.precedence <span class=\"hljs-operator\">&gt;</span> op.precedence <span class=\"hljs-operator\">||</span> (op.leftAssociative <span class=\"hljs-operator\">&amp;&amp;</span> last.precedence <span class=\"hljs-operator\">==</span> op.precedence) {\n                    applyOperator(last)\n                    operatorStack.removeLast()\n                }\n                operatorStack.append(op)\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> number <span class=\"hljs-operator\">=</span> scanner.scanDouble() {\n                numberStack.append(number)\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">break</span>\n            }\n        }\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">let</span> op <span class=\"hljs-operator\">=</span> operatorStack.popLast() {\n            applyOperator(op)\n        }\n\n        <span class=\"hljs-keyword\">return</span> numberStack.first <span class=\"hljs-operator\">??</span> <span class=\"hljs-number\">0</span>\n    }\n}\n\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">ShuntingYard</span>.<span class=\"hljs-title class_\">Operator</span> {\n    <span class=\"hljs-keyword\">var</span> precedence: <span class=\"hljs-type\">Int</span> {\n        <span class=\"hljs-keyword\">switch</span> <span class=\"hljs-keyword\">self</span> {\n        <span class=\"hljs-keyword\">case</span> .power: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>\n        <span class=\"hljs-keyword\">case</span> .divide, .times: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">case</span> .plus, .minus: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n        }\n    }\n\n    <span class=\"hljs-keyword\">var</span> leftAssociative: <span class=\"hljs-type\">Bool</span> {\n        <span class=\"hljs-keyword\">switch</span> <span class=\"hljs-keyword\">self</span> {\n        <span class=\"hljs-keyword\">case</span> .power: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">case</span> .plus, .minus, .times, .divide: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n        }\n    }\n\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">a</span>: <span class=\"hljs-type\">Double</span>, <span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">b</span>: <span class=\"hljs-type\">Double</span>) -&gt; <span class=\"hljs-type\">Double</span> {\n        <span class=\"hljs-keyword\">switch</span> <span class=\"hljs-keyword\">self</span> {\n        <span class=\"hljs-keyword\">case</span> .power: <span class=\"hljs-keyword\">return</span> pow(b, a)\n        <span class=\"hljs-keyword\">case</span> .divide: <span class=\"hljs-keyword\">return</span> b <span class=\"hljs-operator\">/</span> a\n        <span class=\"hljs-keyword\">case</span> .times: <span class=\"hljs-keyword\">return</span> a <span class=\"hljs-operator\">*</span> b\n        <span class=\"hljs-keyword\">case</span> .plus: <span class=\"hljs-keyword\">return</span> a <span class=\"hljs-operator\">+</span> b\n        <span class=\"hljs-keyword\">case</span> .minus: <span class=\"hljs-keyword\">return</span> b <span class=\"hljs-operator\">-</span> a\n        }\n    }\n}\n\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">Scanner</span> {\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">scanOperator</span>() -&gt; <span class=\"hljs-type\">ShuntingYard</span>.<span class=\"hljs-type\">Operator</span>? {\n        <span class=\"hljs-keyword\">for</span> op <span class=\"hljs-keyword\">in</span> <span class=\"hljs-type\">ShuntingYard</span>.<span class=\"hljs-type\">Operator</span>.allCases {\n            <span class=\"hljs-keyword\">if</span> scanString(op.rawValue) <span class=\"hljs-operator\">!=</span> <span class=\"hljs-literal\">nil</span> {\n                <span class=\"hljs-keyword\">return</span> op\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n    }\n}\n\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">testShuntingYard</span>() {\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">x</span>: <span class=\"hljs-type\">String</span>) {\n        <span class=\"hljs-built_in\">print</span>(x,<span class=\"hljs-string\">&quot;=&quot;</span>, <span class=\"hljs-type\">ShuntingYard</span>.evaluate(x))\n    }\n\n    test(<span class=\"hljs-string\">&quot;3 + 4 * 5&quot;</span>)\n    test(<span class=\"hljs-string\">&quot;4 * 5 + 3&quot;</span>)\n    test(<span class=\"hljs-string\">&quot;2 ^ 3 ^ 4&quot;</span>)\n    test(<span class=\"hljs-string\">&quot;10.5 - 4 * 5&quot;</span>)\n    test(<span class=\"hljs-string\">&quot;2 + 3 ^ 4&quot;</span>)\n    test(<span class=\"hljs-string\">&quot;2 * 3 ^ 4&quot;</span>)\n    test(<span class=\"hljs-string\">&quot;3 ^ 4&quot;</span>)\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Sven Weidauer",
      "email": "sven@5sw.de",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
