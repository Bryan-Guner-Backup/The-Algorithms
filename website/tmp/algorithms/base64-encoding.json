{
  "slug": "base64-encoding",
  "name": "Base64 Encoding",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/base64_encoding.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/base64_encoding.py",
      "code": "B64_CHARSET = <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">base64_encode</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">bytes</span></span>) -&gt; <span class=\"hljs-built_in\">bytes</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Encodes data according to RFC4648.\n\n    The data is first transformed to binary and appended with binary digits so that its\n    length becomes a multiple of 6, then each 6 binary digits will match a character in\n    the B64_CHARSET string. The number of appended binary digits would later determine\n    how many &quot;=&quot; sign should be added, the padding.\n    For every 2 binary digits added, a &quot;=&quot; sign is added in the output.\n    We can add any binary digits to make it a multiple of 6, for instance, consider the\n    following example:\n    &quot;AA&quot; -&gt; 0010100100101001 -&gt; 001010 010010 1001\n    As can be seen above, 2 more binary digits should be added, so there&#x27;s 4\n    possibilities here: 00, 01, 10 or 11.\n    That being said, Base64 encoding can be used in Steganography to hide data in these\n    appended digits.\n\n    &gt;&gt;&gt; from base64 import b64encode\n    &gt;&gt;&gt; a = b&quot;This pull request is part of Hacktoberfest20!&quot;\n    &gt;&gt;&gt; b = b&quot;https://tools.ietf.org/html/rfc4648&quot;\n    &gt;&gt;&gt; c = b&quot;A&quot;\n    &gt;&gt;&gt; base64_encode(a) == b64encode(a)\n    True\n    &gt;&gt;&gt; base64_encode(b) == b64encode(b)\n    True\n    &gt;&gt;&gt; base64_encode(c) == b64encode(c)\n    True\n    &gt;&gt;&gt; base64_encode(&quot;abc&quot;)\n    Traceback (most recent call last):\n      ...\n    TypeError: a bytes-like object is required, not &#x27;str&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Make sure the supplied data is a bytes-like object</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(data, <span class=\"hljs-built_in\">bytes</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(\n            <span class=\"hljs-string\">f&quot;a bytes-like object is required, not &#x27;<span class=\"hljs-subst\">{data.__class__.__name__}</span>&#x27;&quot;</span>\n        )\n\n    binary_stream = <span class=\"hljs-string\">&quot;&quot;</span>.join(<span class=\"hljs-built_in\">bin</span>(byte)[<span class=\"hljs-number\">2</span>:].zfill(<span class=\"hljs-number\">8</span>) <span class=\"hljs-keyword\">for</span> byte <span class=\"hljs-keyword\">in</span> data)\n\n    padding_needed = <span class=\"hljs-built_in\">len</span>(binary_stream) % <span class=\"hljs-number\">6</span> != <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">if</span> padding_needed:\n        <span class=\"hljs-comment\"># The padding that will be added later</span>\n        padding = <span class=\"hljs-string\">b&quot;=&quot;</span> * ((<span class=\"hljs-number\">6</span> - <span class=\"hljs-built_in\">len</span>(binary_stream) % <span class=\"hljs-number\">6</span>) // <span class=\"hljs-number\">2</span>)\n\n        <span class=\"hljs-comment\"># Append binary_stream with arbitrary binary digits (0&#x27;s by default) to make its</span>\n        <span class=\"hljs-comment\"># length a multiple of 6.</span>\n        binary_stream += <span class=\"hljs-string\">&quot;0&quot;</span> * (<span class=\"hljs-number\">6</span> - <span class=\"hljs-built_in\">len</span>(binary_stream) % <span class=\"hljs-number\">6</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        padding = <span class=\"hljs-string\">b&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># Encode every 6 binary digits to their corresponding Base64 character</span>\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-string\">&quot;&quot;</span>.join(\n            B64_CHARSET[<span class=\"hljs-built_in\">int</span>(binary_stream[index : index + <span class=\"hljs-number\">6</span>], <span class=\"hljs-number\">2</span>)]\n            <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(binary_stream), <span class=\"hljs-number\">6</span>)\n        ).encode()\n        + padding\n    )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">base64_decode</span>(<span class=\"hljs-params\">encoded_data: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bytes</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Decodes data according to RFC4648.\n\n    This does the reverse operation of base64_encode.\n    We first transform the encoded data back to a binary stream, take off the\n    previously appended binary digits according to the padding, at this point we\n    would have a binary stream whose length is multiple of 8, the last step is\n    to convert every 8 bits to a byte.\n\n    &gt;&gt;&gt; from base64 import b64decode\n    &gt;&gt;&gt; a = &quot;VGhpcyBwdWxsIHJlcXVlc3QgaXMgcGFydCBvZiBIYWNrdG9iZXJmZXN0MjAh&quot;\n    &gt;&gt;&gt; b = &quot;aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ2NDg=&quot;\n    &gt;&gt;&gt; c = &quot;QQ==&quot;\n    &gt;&gt;&gt; base64_decode(a) == b64decode(a)\n    True\n    &gt;&gt;&gt; base64_decode(b) == b64decode(b)\n    True\n    &gt;&gt;&gt; base64_decode(c) == b64decode(c)\n    True\n    &gt;&gt;&gt; base64_decode(&quot;abc&quot;)\n    Traceback (most recent call last):\n      ...\n    AssertionError: Incorrect padding\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Make sure encoded_data is either a string or a bytes-like object</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(encoded_data, <span class=\"hljs-built_in\">bytes</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(encoded_data, <span class=\"hljs-built_in\">str</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(\n            <span class=\"hljs-string\">&quot;argument should be a bytes-like object or ASCII string, not &quot;</span>\n            <span class=\"hljs-string\">f&quot;&#x27;<span class=\"hljs-subst\">{encoded_data.__class__.__name__}</span>&#x27;&quot;</span>\n        )\n\n    <span class=\"hljs-comment\"># In case encoded_data is a bytes-like object, make sure it contains only</span>\n    <span class=\"hljs-comment\"># ASCII characters so we convert it to a string object</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(encoded_data, <span class=\"hljs-built_in\">bytes</span>):\n        <span class=\"hljs-keyword\">try</span>:\n            encoded_data = encoded_data.decode(<span class=\"hljs-string\">&quot;utf-8&quot;</span>)\n        <span class=\"hljs-keyword\">except</span> UnicodeDecodeError:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;base64 encoded data should only contain ASCII characters&quot;</span>)\n\n    padding = encoded_data.count(<span class=\"hljs-string\">&quot;=&quot;</span>)\n\n    <span class=\"hljs-comment\"># Check if the encoded string contains non base64 characters</span>\n    <span class=\"hljs-keyword\">if</span> padding:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">all</span>(\n            char <span class=\"hljs-keyword\">in</span> B64_CHARSET <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> encoded_data[:-padding]\n        ), <span class=\"hljs-string\">&quot;Invalid base64 character(s) found.&quot;</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">all</span>(\n            char <span class=\"hljs-keyword\">in</span> B64_CHARSET <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> encoded_data\n        ), <span class=\"hljs-string\">&quot;Invalid base64 character(s) found.&quot;</span>\n\n    <span class=\"hljs-comment\"># Check the padding</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(encoded_data) % <span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> padding &lt; <span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;Incorrect padding&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> padding:\n        <span class=\"hljs-comment\"># Remove padding if there is one</span>\n        encoded_data = encoded_data[:-padding]\n\n        binary_stream = <span class=\"hljs-string\">&quot;&quot;</span>.join(\n            <span class=\"hljs-built_in\">bin</span>(B64_CHARSET.index(char))[<span class=\"hljs-number\">2</span>:].zfill(<span class=\"hljs-number\">6</span>) <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> encoded_data\n        )[: -padding * <span class=\"hljs-number\">2</span>]\n    <span class=\"hljs-keyword\">else</span>:\n        binary_stream = <span class=\"hljs-string\">&quot;&quot;</span>.join(\n            <span class=\"hljs-built_in\">bin</span>(B64_CHARSET.index(char))[<span class=\"hljs-number\">2</span>:].zfill(<span class=\"hljs-number\">6</span>) <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> encoded_data\n        )\n\n    data = [\n        <span class=\"hljs-built_in\">int</span>(binary_stream[index : index + <span class=\"hljs-number\">8</span>], <span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">for</span> index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(binary_stream), <span class=\"hljs-number\">8</span>)\n    ]\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">bytes</span>(data)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "ciphers/base64_encoding.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers/base64_encoding.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @brief [Base64 Encoding and\n * Decoding](https://en.wikipedia.org/wiki/Base64)\n * @details In programming, [Base64](https://en.wikipedia.org/wiki/Base64) is a\n * group of binary-to-text encoding schemes that represent binary data (more\n * specifically, a sequence of 8-bit bytes) in an ASCII string format by\n * translating the data into a radix-64 representation. The term Base64\n * originates from a specific MIME content transfer encoding. Each non-final\n * Base64 digit represents exactly 6 bits of data. Three 8-bit bytes (i.e., a\n * total of 24 bits) can therefore be represented by four 6-bit Base64\n * digits.\n * @author [Ashish Daulatabad](https://github.com/AshishYUO)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>     <span class=\"hljs-comment\">/// for `std::array`</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for `assert` operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace ciphers\n * @brief Cipher algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> ciphers {\n<span class=\"hljs-comment\">/**\n * @namespace base64_encoding\n * @brief Functions for [Base64 Encoding and\n * Decoding](https://en.wikipedia.org/wiki/Base64) implementation.\n */</span>\n<span class=\"hljs-keyword\">namespace</span> base64_encoding {\n<span class=\"hljs-comment\">// chars denoting the format for encoding and decoding array.</span>\n<span class=\"hljs-comment\">// This array is already decided by</span>\n<span class=\"hljs-comment\">// [RFC4648](https://tools.ietf.org/html/rfc4648#section-4) standard</span>\n<span class=\"hljs-keyword\">const</span> std::string chars =\n    <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;\n<span class=\"hljs-comment\">/**\n * @brief Base64 Encoder\n * @details Converts the given string to Base64 equivalent.\n * @param input Input as a string\n * @returns Base64 encoded string\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">base64_encode</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;input)</span> </span>{\n    std::string base64_string;  <span class=\"hljs-comment\">/// Output of this function: base64 string</span>\n    <span class=\"hljs-comment\">// base64 deals with 6-bit chars encoded as per chars, so</span>\n    <span class=\"hljs-comment\">// we will always filter 6-bits from input.</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; input.<span class=\"hljs-built_in\">size</span>(); i += <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-type\">char</span> first_byte = input[i];  <span class=\"hljs-comment\">/// First byte of the iteration</span>\n        <span class=\"hljs-comment\">// Take first six bits of first character.</span>\n        <span class=\"hljs-comment\">// Encode the first six bits with character defined in string `chars`</span>\n        base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[first_byte &gt;&gt; <span class=\"hljs-number\">2</span>]);\n\n        <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">1</span> &lt; input.<span class=\"hljs-built_in\">size</span>()) {\n            <span class=\"hljs-type\">char</span> second_byte = input[i + <span class=\"hljs-number\">1</span>];  <span class=\"hljs-comment\">/// Second byte of the iteration</span>\n            <span class=\"hljs-comment\">// Take remaining two bits of first character, and four first bits</span>\n            <span class=\"hljs-comment\">// from second character Combine two numbers as 6-bit digits and</span>\n            <span class=\"hljs-comment\">// encode by array chars (first two bits of first byte and next four</span>\n            <span class=\"hljs-comment\">// of second byte)</span>\n            base64_string.<span class=\"hljs-built_in\">push_back</span>(\n                chars[(((first_byte &amp; <span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">4</span>) | ((second_byte &amp; <span class=\"hljs-number\">0xF0</span>) &gt;&gt; <span class=\"hljs-number\">4</span>))]);\n\n            <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">2</span> &lt; input.<span class=\"hljs-built_in\">size</span>()) {\n                <span class=\"hljs-type\">char</span> third_byte = input[i + <span class=\"hljs-number\">2</span>];  <span class=\"hljs-comment\">/// Third byte of the iteration</span>\n                <span class=\"hljs-comment\">// Take remaining four bits of second character, and first two</span>\n                <span class=\"hljs-comment\">// bits from third character Combine two numbers as 6-bit digits</span>\n                <span class=\"hljs-comment\">// and encode by array chars (remaining four bits of second byte</span>\n                <span class=\"hljs-comment\">// and first two of third byte)</span>\n                base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[((third_byte &amp; <span class=\"hljs-number\">0xC0</span>) &gt;&gt; <span class=\"hljs-number\">6</span>) |\n                                              ((second_byte &amp; <span class=\"hljs-number\">0x0F</span>) &lt;&lt; <span class=\"hljs-number\">2</span>)]);\n                <span class=\"hljs-comment\">// Encode remaining 6-bit of third byte by array chars</span>\n                base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[(third_byte &amp; <span class=\"hljs-number\">0x3F</span>)]);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// Take remaining four bits of second character as 6-bit number</span>\n                base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[((second_byte &amp; <span class=\"hljs-number\">0x0F</span>) &lt;&lt; <span class=\"hljs-number\">2</span>)]);\n                base64_string.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>);  <span class=\"hljs-comment\">// padding characters</span>\n            }\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Take remaining two bits of first character as 6-bit number</span>\n            base64_string.<span class=\"hljs-built_in\">push_back</span>(chars[((first_byte &amp; <span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">4</span>)]);\n            base64_string.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>);  <span class=\"hljs-comment\">// padding characters</span>\n            base64_string.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>);  <span class=\"hljs-comment\">// padding characters</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> base64_string;\n}\n<span class=\"hljs-comment\">/**\n * @brief Utility function for finding index\n * @details Utility function for finding the position of a character in array\n * `chars`\n * @param c character to search in array `chars`\n * @returns integer denoting position of character in array `chars`\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint8_t</span> <span class=\"hljs-title\">find_idx</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> c)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (c &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\n        <span class=\"hljs-keyword\">return</span> c - <span class=\"hljs-string\">&#x27;A&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>) {\n        <span class=\"hljs-keyword\">return</span> c - <span class=\"hljs-string\">&#x27;a&#x27;</span> + <span class=\"hljs-number\">26</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c &gt;= <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"hljs-string\">&#x27;9&#x27;</span>) {\n        <span class=\"hljs-keyword\">return</span> c - <span class=\"hljs-string\">&#x27;0&#x27;</span> + <span class=\"hljs-number\">52</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">&#x27;+&#x27;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">62</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (c == <span class=\"hljs-string\">&#x27;/&#x27;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">63</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n<span class=\"hljs-comment\">/**\n * @brief Base64 Decoder\n * @details Decodes the Base64 string\n * @param base64_str Input as a Base64 string\n * @returns Base64 decoded string\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">base64_decode</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;base64_str)</span> </span>{\n    std::string\n        base64_decoded;  <span class=\"hljs-comment\">/// Output of this function: base64 decoded string</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; base64_str.<span class=\"hljs-built_in\">size</span>(); i += <span class=\"hljs-number\">4</span>) {\n        <span class=\"hljs-comment\">/// First 6-bit representation of Base64</span>\n        <span class=\"hljs-type\">char</span> first_byte = base64_str[i];\n        <span class=\"hljs-comment\">/// Second 6-bit representation of Base64</span>\n        <span class=\"hljs-type\">char</span> second_byte = base64_str[i + <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-comment\">// Actual str characters are of 8 bits (or 1 byte):</span>\n        <span class=\"hljs-comment\">// :: 8 bits are decode by taking 6 bits from 1st byte of base64 string</span>\n        <span class=\"hljs-comment\">// and first 2 bits from 2nd byte of base64 string.</span>\n        <span class=\"hljs-type\">char</span> first_actual_byte = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">char</span>&gt;(\n            (<span class=\"hljs-built_in\">find_idx</span>(first_byte) &lt;&lt; <span class=\"hljs-number\">2</span>) | ((<span class=\"hljs-built_in\">find_idx</span>(second_byte)) &gt;&gt; <span class=\"hljs-number\">4</span>));\n        base64_decoded.<span class=\"hljs-built_in\">push_back</span>(first_actual_byte);\n        <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">2</span> &lt; base64_str.<span class=\"hljs-built_in\">size</span>() &amp;&amp; base64_str[i + <span class=\"hljs-number\">2</span>] != <span class=\"hljs-string\">&#x27;=&#x27;</span>) {\n            <span class=\"hljs-comment\">/// Third 6-bit representation of Base64</span>\n            <span class=\"hljs-type\">char</span> third_byte = base64_str[i + <span class=\"hljs-number\">2</span>];\n            <span class=\"hljs-comment\">// :: Next 8 bits are decode by taking remaining 4 bits from 2nd</span>\n            <span class=\"hljs-comment\">// byte of base64 string and first 4 bits from 3rd byte of base64</span>\n            <span class=\"hljs-comment\">// string.</span>\n            <span class=\"hljs-type\">char</span> second_actual_byte =\n                <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">char</span>&gt;(((<span class=\"hljs-built_in\">find_idx</span>(second_byte) &amp; <span class=\"hljs-number\">0x0F</span>) &lt;&lt; <span class=\"hljs-number\">4</span>) |\n                                  (<span class=\"hljs-built_in\">find_idx</span>(third_byte) &gt;&gt; <span class=\"hljs-number\">2</span>));\n            base64_decoded.<span class=\"hljs-built_in\">push_back</span>(second_actual_byte);\n\n            <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">3</span> &lt; base64_str.<span class=\"hljs-built_in\">size</span>() &amp;&amp; base64_str[i + <span class=\"hljs-number\">3</span>] != <span class=\"hljs-string\">&#x27;=&#x27;</span>) {\n                <span class=\"hljs-comment\">/// Fourth 6-bit representation of Base64 string</span>\n                <span class=\"hljs-type\">char</span> fourth_byte = base64_str[i + <span class=\"hljs-number\">3</span>];\n                <span class=\"hljs-comment\">// :: Taking remaining 2 bits from 3rd byte of base64 string</span>\n                <span class=\"hljs-comment\">// and all 6 bits from 4th byte of base64 string.</span>\n                <span class=\"hljs-type\">char</span> third_actual_byte =\n                    <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">char</span>&gt;(((<span class=\"hljs-built_in\">find_idx</span>(third_byte) &amp; <span class=\"hljs-number\">0x03</span>) &lt;&lt; <span class=\"hljs-number\">6</span>) |\n                                      <span class=\"hljs-built_in\">find_idx</span>(fourth_byte));\n                base64_decoded.<span class=\"hljs-built_in\">push_back</span>(third_actual_byte);\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> base64_decoded;\n}\n}  <span class=\"hljs-comment\">// namespace base64_encoding</span>\n}  <span class=\"hljs-comment\">// namespace ciphers</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self test-implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// 1st Test</span>\n    std::string str =\n        <span class=\"hljs-string\">&quot;To err is human, but to really foul things up you need a computer.&quot;</span>;\n    std::string base64_str = ciphers::base64_encoding::<span class=\"hljs-built_in\">base64_encode</span>(str);\n    std::string verify =\n        <span class=\"hljs-string\">&quot;VG8gZXJyIGlzIGh1bWFuLCBidXQgdG8gcmVhbGx5IGZvdWwgdGhpbmdzIHVwIHlvdSBuZW&quot;</span>\n        <span class=\"hljs-string\">&quot;VkIGEgY29tcHV0ZXIu&quot;</span>;\n    <span class=\"hljs-comment\">// verify encoding</span>\n    <span class=\"hljs-built_in\">assert</span>(base64_str == verify);\n    std::string original_str =\n        ciphers::base64_encoding::<span class=\"hljs-built_in\">base64_decode</span>(base64_str);\n    <span class=\"hljs-comment\">// verify decoding</span>\n    <span class=\"hljs-built_in\">assert</span>(original_str == str);\n\n    <span class=\"hljs-comment\">// 2nd Test from [Wikipedia](https://en.wikipedia.org/wiki/Base64)</span>\n    str =\n        <span class=\"hljs-string\">&quot;Man is distinguished, not only by his reason, but by this singular &quot;</span>\n        <span class=\"hljs-string\">&quot;passion from other animals, which is a lust of the mind, that by a &quot;</span>\n        <span class=\"hljs-string\">&quot;perseverance of delight in the continued and indefatigable generation &quot;</span>\n        <span class=\"hljs-string\">&quot;of knowledge, exceeds the short vehemence of any carnal pleasure.&quot;</span>;\n\n    base64_str = ciphers::base64_encoding::<span class=\"hljs-built_in\">base64_encode</span>(str);\n    verify =\n        <span class=\"hljs-string\">&quot;TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieS&quot;</span>\n        <span class=\"hljs-string\">&quot;B0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBh&quot;</span>\n        <span class=\"hljs-string\">&quot;IGx1c3Qgb2YgdGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodC&quot;</span>\n        <span class=\"hljs-string\">&quot;BpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25v&quot;</span>\n        <span class=\"hljs-string\">&quot;d2xlZGdlLCBleGNlZWRzIHRoZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbG&quot;</span>\n        <span class=\"hljs-string\">&quot;Vhc3VyZS4=&quot;</span>;\n    <span class=\"hljs-comment\">// verify encoding</span>\n    <span class=\"hljs-built_in\">assert</span>(base64_str == verify);\n    original_str = ciphers::base64_encoding::<span class=\"hljs-built_in\">base64_decode</span>(base64_str);\n    <span class=\"hljs-comment\">// verify decoding</span>\n    <span class=\"hljs-built_in\">assert</span>(original_str == str);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ashish Bhanu Daulatabad",
      "email": "supersonic12910@gmail.com",
      "commits": 1
    },
    {
      "name": "Hafidh",
      "email": "32499116+hfz1337@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
