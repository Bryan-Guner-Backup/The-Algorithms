{
  "slug": "slowsort",
  "name": "Slowsort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/slowsort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/slowsort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nSlowsort is a sorting algorithm. It is of humorous nature and not useful.\nIt&#x27;s based on the principle of multiply and surrender,\na tongue-in-cheek joke of divide and conquer.\nIt was published in 1986 by Andrei Broder and Jorge Stolfi\nin their paper Pessimal Algorithms and Simplexity Analysis\n(a parody of optimal algorithms and complexity analysis).\n\nSource: https://en.wikipedia.org/wiki/Slowsort\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Optional</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">slowsort</span>(<span class=\"hljs-params\">\n    sequence: <span class=\"hljs-built_in\">list</span>, start: <span class=\"hljs-type\">Optional</span>[<span class=\"hljs-built_in\">int</span>] = <span class=\"hljs-literal\">None</span>, end: <span class=\"hljs-type\">Optional</span>[<span class=\"hljs-built_in\">int</span>] = <span class=\"hljs-literal\">None</span>\n</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Sorts sequence[start..end] (both inclusive) in-place.\n    start defaults to 0 if not given.\n    end defaults to len(sequence) - 1 if not given.\n    It returns None.\n    &gt;&gt;&gt; seq = [1, 6, 2, 5, 3, 4, 4, 5]; slowsort(seq); seq\n    [1, 2, 3, 4, 4, 5, 5, 6]\n    &gt;&gt;&gt; seq = []; slowsort(seq); seq\n    []\n    &gt;&gt;&gt; seq = [2]; slowsort(seq); seq\n    [2]\n    &gt;&gt;&gt; seq = [1, 2, 3, 4]; slowsort(seq); seq\n    [1, 2, 3, 4]\n    &gt;&gt;&gt; seq = [4, 3, 2, 1]; slowsort(seq); seq\n    [1, 2, 3, 4]\n    &gt;&gt;&gt; seq = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]; slowsort(seq, 2, 7); seq\n    [9, 8, 2, 3, 4, 5, 6, 7, 1, 0]\n    &gt;&gt;&gt; seq = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]; slowsort(seq, end = 4); seq\n    [5, 6, 7, 8, 9, 4, 3, 2, 1, 0]\n    &gt;&gt;&gt; seq = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]; slowsort(seq, start = 5); seq\n    [9, 8, 7, 6, 5, 0, 1, 2, 3, 4]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> start <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        start = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">if</span> end <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        end = <span class=\"hljs-built_in\">len</span>(sequence) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">if</span> start &gt;= end:\n        <span class=\"hljs-keyword\">return</span>\n\n    mid = (start + end) // <span class=\"hljs-number\">2</span>\n\n    slowsort(sequence, start, mid)\n    slowsort(sequence, mid + <span class=\"hljs-number\">1</span>, end)\n\n    <span class=\"hljs-keyword\">if</span> sequence[end] &lt; sequence[mid]:\n        sequence[end], sequence[mid] = sequence[mid], sequence[end]\n\n    slowsort(sequence, start, end - <span class=\"hljs-number\">1</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n"
    },
    "c-plus-plus": {
      "dir": "sorting/slow_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/slow_sort.cpp",
      "code": "<span class=\"hljs-comment\">// Returns the sorted vector after performing SlowSort</span>\n<span class=\"hljs-comment\">// It is a sorting algorithm that is of humorous nature and not useful.</span>\n<span class=\"hljs-comment\">// It&#x27;s based on the principle of multiply and surrender, a tongue-in-cheek joke</span>\n<span class=\"hljs-comment\">// of divide and conquer. It was published in 1986 by Andrei Broder and Jorge</span>\n<span class=\"hljs-comment\">// Stolfi in their paper Pessimal Algorithms and Simplexity Analysis. This</span>\n<span class=\"hljs-comment\">// algorithm multiplies a single problem into multiple subproblems It is</span>\n<span class=\"hljs-comment\">// interesting because it is provably the least efficient sorting algorithm that</span>\n<span class=\"hljs-comment\">// can be built asymptotically, and with the restriction that such an algorithm,</span>\n<span class=\"hljs-comment\">// while being slow, must still all the time be working towards a result.</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">SlowSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (i &gt;= j)\n        <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-type\">int</span> m = i + (j - i) / <span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">// midpoint, implemented this way to avoid</span>\n                              <span class=\"hljs-comment\">// overflow</span>\n    <span class=\"hljs-type\">int</span> temp;\n    <span class=\"hljs-built_in\">SlowSort</span>(a, i, m);\n    <span class=\"hljs-built_in\">SlowSort</span>(a, m + <span class=\"hljs-number\">1</span>, j);\n    <span class=\"hljs-keyword\">if</span> (a[j] &lt; a[m]) {\n        temp = a[j];  <span class=\"hljs-comment\">// swapping a[j] &amp; a[m]</span>\n        a[j] = a[m];\n        a[m] = temp;\n    }\n    <span class=\"hljs-built_in\">SlowSort</span>(a, i, j - <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">// Sample Main function</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> size;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the number of elements : &quot;</span>;\n\n    std::cin &gt;&gt; size;\n\n    <span class=\"hljs-type\">int</span> *arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[size];\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the unsorted elements : &quot;</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n        std::cin &gt;&gt; arr[i];\n    }\n\n    <span class=\"hljs-built_in\">SlowSort</span>(arr, <span class=\"hljs-number\">0</span>, size);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array\\n&quot;</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\n        std::cout &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n\n    <span class=\"hljs-keyword\">delete</span>[] arr;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Naveen Hegde",
      "email": "hegdenaveen1@gmail.com",
      "commits": 1
    },
    {
      "name": "Abdeldjaouad Nusayr Medakene",
      "email": "31663979+MrGeek1337@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
