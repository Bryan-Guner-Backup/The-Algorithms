{
  "slug": "n-queens",
  "name": "N Queens",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking/n_queens.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking/n_queens.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n\n The nqueens problem is of placing N queens on a N * N\n chess board such that no queen can attack any other queens placed\n on that chess board.\n This means that one queen cannot have any other queen on its horizontal, vertical and\n diagonal lines.\n\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\nsolution = []\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isSafe</span>(<span class=\"hljs-params\">board: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]], row: <span class=\"hljs-built_in\">int</span>, column: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This function returns a boolean value True if it is safe to place a queen there\n    considering the current state of the board.\n\n    Parameters :\n    board(2D matrix) : board\n    row ,column : coordinates of the cell on a board\n\n    Returns :\n    Boolean Value\n\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\n        <span class=\"hljs-keyword\">if</span> board[row][i] == <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\n        <span class=\"hljs-keyword\">if</span> board[i][column] == <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">for</span> i, j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(<span class=\"hljs-built_in\">range</span>(row, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">range</span>(column, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>)):\n        <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">for</span> i, j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(<span class=\"hljs-built_in\">range</span>(row, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">range</span>(column, <span class=\"hljs-built_in\">len</span>(board))):\n        <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">solve</span>(<span class=\"hljs-params\">board: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]], row: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    It creates a state space tree and calls the safe function until it receives a\n    False Boolean and terminates that branch and backtracks to the next\n    possible solution branch.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> row &gt;= <span class=\"hljs-built_in\">len</span>(board):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        If the row number exceeds N we have board with a successful combination\n        and that combination is appended to the solution list and the board is printed.\n\n        &quot;&quot;&quot;</span>\n        solution.append(board)\n        printboard(board)\n        <span class=\"hljs-built_in\">print</span>()\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        For every row it iterates through each column to check if it is feasible to\n        place a queen there.\n        If all the combinations for that particular branch are successful the board is\n        reinitialized for the next possible combination.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> isSafe(board, row, i):\n            board[row][i] = <span class=\"hljs-number\">1</span>\n            solve(board, row + <span class=\"hljs-number\">1</span>)\n            board[row][i] = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">printboard</span>(<span class=\"hljs-params\">board: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Prints the boards that have a successful combination.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(board)):\n            <span class=\"hljs-keyword\">if</span> board[i][j] == <span class=\"hljs-number\">1</span>:\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Q&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;.&quot;</span>, end=<span class=\"hljs-string\">&quot; &quot;</span>)\n        <span class=\"hljs-built_in\">print</span>()\n\n\n<span class=\"hljs-comment\"># n=int(input(&quot;The no. of queens&quot;))</span>\nn = <span class=\"hljs-number\">8</span>\nboard = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n)]\nsolve(board, <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The total no. of solutions are :&quot;</span>, <span class=\"hljs-built_in\">len</span>(solution))\n"
    },
    "c-plus-plus": {
      "dir": "backtracking/n_queens.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/n_queens.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Eight Queens](https://en.wikipedia.org/wiki/Eight_queens_puzzle)\n * puzzle\n *\n * @details\n * The **eight queens puzzle** is the problem of placing eight chess queens on\n * an 8×8 chessboard so that no two queens threaten each other; thus, a solution\n * requires that no two queens share the same row, column, or diagonal. The\n * eight queens puzzle is an example of the more general **n queens problem** of\n * placing n non-attacking queens on an n×n chessboard, for which solutions\n * exist for all natural numbers n with the exception of n = 2 and n = 3.\n *\n * @author Unknown author\n * @author [David Leal](https://github.com/Panquesito7)\n *\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n  <span class=\"hljs-comment\">/**\n   * @namespace n_queens\n   * @brief Functions for [Eight Queens](https://en.wikipedia.org/wiki/Eight_queens_puzzle) puzzle.\n   */</span>\n  <span class=\"hljs-keyword\">namespace</span> n_queens {\n    <span class=\"hljs-comment\">/**\n    * Utility function to print matrix\n    * @tparam n number of matrix size\n    * @param board matrix where numbers are saved\n    */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printSolution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; &amp;board)</span> </span>{\n      std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\n          std::cout &lt;&lt; <span class=\"hljs-string\">&quot;&quot;</span> &lt;&lt; board[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n      }\n    }\n\n    <span class=\"hljs-comment\">/**\n    * Check if a queen can be placed on matrix\n    * @tparam n number of matrix size\n    * @param board matrix where numbers are saved\n    * @param row current index in rows\n    * @param col current index in columns\n    * @returns `true` if queen can be placed on matrix\n    * @returns `false` if queen can&#x27;t be placed on matrix\n    */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isSafe</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; &amp;board, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> &amp;row,\n                <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> &amp;col)</span> </span>{\n      <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>;\n\n      <span class=\"hljs-comment\">// Check this row on left side</span>\n      <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; col; i++) {\n        <span class=\"hljs-keyword\">if</span> (board[row][i]) {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n      }\n\n      <span class=\"hljs-comment\">// Check upper diagonal on left side</span>\n      <span class=\"hljs-keyword\">for</span> (i = row, j = col; i &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>; i--, j--) {\n        <span class=\"hljs-keyword\">if</span> (board[i][j]) {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n      }\n      <span class=\"hljs-comment\">// Check lower diagonal on left side</span>\n      <span class=\"hljs-keyword\">for</span> (i = row, j = col; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; i &lt; n; i++, j--) {\n        <span class=\"hljs-keyword\">if</span> (board[i][j]) {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n    * Solve n queens problem\n    * @tparam n number of matrix size\n    * @param board matrix where numbers are saved\n    * @param col current index in columns\n    */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solveNQ</span><span class=\"hljs-params\">(std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; board, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> &amp;col)</span> </span>{\n      <span class=\"hljs-keyword\">if</span> (col &gt;= n) {\n        <span class=\"hljs-built_in\">printSolution</span>&lt;n&gt;(board);\n        <span class=\"hljs-keyword\">return</span>;\n      }\n\n      <span class=\"hljs-comment\">// Consider this column and try placing</span>\n      <span class=\"hljs-comment\">// this queen in all rows one by one</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-comment\">// Check if queen can be placed</span>\n        <span class=\"hljs-comment\">// on board[i][col]</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isSafe</span>&lt;n&gt;(board, i, col)) {\n          <span class=\"hljs-comment\">// Place this queen in matrix</span>\n          board[i][col] = <span class=\"hljs-number\">1</span>;\n\n          <span class=\"hljs-comment\">// Recursive to place rest of the queens</span>\n          <span class=\"hljs-built_in\">solveNQ</span>&lt;n&gt;(board, col + <span class=\"hljs-number\">1</span>);\n\n          board[i][col] = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// backtrack</span>\n        }\n      }\n    }\n  } <span class=\"hljs-comment\">// namespace n_queens</span>\n} <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">4</span>;\n  std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; board = {\n    std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, n&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}),\n    std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, n&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}),\n    std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, n&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}),\n    std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, n&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>})\n    };\n\n  backtracking::n_queens::<span class=\"hljs-built_in\">solveNQ</span>&lt;n&gt;(board, <span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "haskell": {
      "dir": "src/Misc/NQueens.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Misc/NQueens.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Misc.NQueens <span class=\"hljs-keyword\">where</span>\n<span class=\"hljs-comment\">{-\nThe n-Queens search is a backtracking algorithm. The n-Queens problem fits n \nnumber of Queens onto a Chess board. As only one Queen can fit per row, a \none-dimensional integer array is used to represent the Queen&#x27;s offset on each \nrow.\n-}</span>\n\n<span class=\"hljs-keyword\">import</span> Data.List (<span class=\"hljs-title\">permutations</span>)\n\n<span class=\"hljs-title\">main</span> = nqueens <span class=\"hljs-number\">8</span>\n<span class=\"hljs-title\">nqueens</span> size = mapM_ (printBoard size) $ take <span class=\"hljs-number\">1</span> $ filter (evaluateBoard size) $ board_permutations size\n\n<span class=\"hljs-comment\">--N sized Chess boards are represented as a one-dimension array.</span>\n<span class=\"hljs-title\">board_permutations</span> size = permutations [<span class=\"hljs-number\">0</span>..size - <span class=\"hljs-number\">1</span>]\n\n<span class=\"hljs-comment\">--Count the number of valid boards for a specified Chess board size.</span>\n<span class=\"hljs-title\">count_boards</span> size = length $ filter (evaluateBoard size) $ board_permutations size\n\n<span class=\"hljs-comment\">--Show every valid board </span>\n<span class=\"hljs-title\">nqueens_list</span> size = mapM_ (printBoard size) $ filter (evaluateBoard size) $ board_permutations size\n\n<span class=\"hljs-comment\">--Board printing function</span>\n<span class=\"hljs-title\">printBoard</span> size board = <span class=\"hljs-keyword\">do</span> \n    printBoard2 size board \n    putStrLn <span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-keyword\">where</span>\n        printBoard2 _ [] = return ()\n        printBoard2 size board = <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">let</span> row = head board\n            printRow size row\n            printBoard2 size $ tail board\n\n<span class=\"hljs-title\">printRow</span> size row = <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-keyword\">let</span> lstring = (replicate row <span class=\"hljs-string\">&quot;. &quot;</span>)\n    <span class=\"hljs-keyword\">let</span> rstring = replicate (size - row - <span class=\"hljs-number\">1</span>) <span class=\"hljs-string\">&quot;. &quot;</span>\n    putStrLn $ concat (lstring ++ [<span class=\"hljs-string\">&quot;Q &quot;</span>] ++ rstring)\n    return ()\n\n<span class=\"hljs-comment\">--Recursively check that prior rows are valid.</span>\n<span class=\"hljs-title\">evaluateBoard</span> _ [] = <span class=\"hljs-type\">True</span>\n<span class=\"hljs-title\">evaluateBoard</span> size rows = (evaluateBoard size $ cut_last rows) &amp;&amp; validate size (cut_last rows) (last_row - <span class=\"hljs-number\">1</span>) (last_row + <span class=\"hljs-number\">1</span>) last_row <span class=\"hljs-keyword\">where</span>\n    last_row = last rows\n\n<span class=\"hljs-comment\">--Validate that a Queen on a row doesn&#x27;t have conflicts with earlier rows.</span>\n<span class=\"hljs-title\">validate</span> _ [] _ _ _ = <span class=\"hljs-type\">True</span>\n<span class=\"hljs-title\">validate</span> size rows left right position = <span class=\"hljs-keyword\">if</span> check_row == left || check_row == right || check_row == position <span class=\"hljs-keyword\">then</span> <span class=\"hljs-type\">False</span> <span class=\"hljs-keyword\">else</span> validate size (cut_last rows) (left - <span class=\"hljs-number\">1</span>) (right + <span class=\"hljs-number\">1</span>) position <span class=\"hljs-keyword\">where</span>\n    check_row = last rows\n\n<span class=\"hljs-title\">cut_last</span> x = reverse $ drop <span class=\"hljs-number\">1</span> $ reverse x\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Problems/NQueens/BacktrackingNQueensSolver.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Problems/NQueens/BacktrackingNQueensSolver.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Problems.NQueens</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BacktrackingNQueensSolver</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Solves N-Queen Problem given a n dimension chessboard and using backtracking with recursion algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     If we find a dead-end within or current solution we go back and try another position for queen.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;n&quot;&gt;</span>Number of rows.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>All solutions.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; BacktrackSolve(<span class=\"hljs-built_in\">int</span> n)\n        {\n            <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-keyword\">nameof</span>(n));\n            }\n\n            <span class=\"hljs-keyword\">return</span> BacktrackSolve(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">bool</span>[n, n], <span class=\"hljs-number\">0</span>);\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; BacktrackSolve(<span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> col)\n        {\n            <span class=\"hljs-keyword\">var</span> solutions = col &lt; board.GetLength(<span class=\"hljs-number\">0</span>) - <span class=\"hljs-number\">1</span>\n                ? HandleIntermediateColumn(board, col)\n                : HandleLastColumn(board);\n            <span class=\"hljs-keyword\">return</span> solutions;\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; HandleIntermediateColumn(<span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> col)\n        {\n            <span class=\"hljs-comment\">// To start placing queens on possible spaces within the board.</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; board.GetLength(<span class=\"hljs-number\">0</span>); i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (CanPlace(board, i, col))\n                {\n                    board[i, col] = <span class=\"hljs-literal\">true</span>;\n\n                    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-function\"><span class=\"hljs-keyword\">var</span> solution <span class=\"hljs-keyword\">in</span> <span class=\"hljs-title\">BacktrackSolve</span>(<span class=\"hljs-params\">board, col + <span class=\"hljs-number\">1</span></span>))</span>\n                    {\n                        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> solution;\n                    }\n\n                    board[i, col] = <span class=\"hljs-literal\">false</span>;\n                }\n            }\n        }\n\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> IEnumerable&lt;<span class=\"hljs-built_in\">bool</span>[,]&gt; HandleLastColumn(<span class=\"hljs-built_in\">bool</span>[,] board)\n        {\n            <span class=\"hljs-keyword\">var</span> n = board.GetLength(<span class=\"hljs-number\">0</span>);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (CanPlace(board, i, n - <span class=\"hljs-number\">1</span>))\n                {\n                    board[i, n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">true</span>;\n\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title\">return</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span>[,]</span>)board.<span class=\"hljs-title\">Clone</span>(<span class=\"hljs-params\"></span>)</span>;\n\n                    board[i, n - <span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span>;\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks whether current queen can be placed in current position,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     outside attacking range of another queen.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;board&quot;&gt;</span>Source board.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;row&quot;&gt;</span>Row coordinate.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;col&quot;&gt;</span>Col coordinate.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true if queen can be placed in given chessboard coordinates; false otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">CanPlace</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span>[,] board, <span class=\"hljs-built_in\">int</span> row, <span class=\"hljs-built_in\">int</span> col</span>)</span>\n        {\n            <span class=\"hljs-comment\">// To check whether there are any queens on current row.</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; col; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (board[row, i])\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n\n            <span class=\"hljs-comment\">// To check diagonal attack top-left range.</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = row - <span class=\"hljs-number\">1</span>, j = col - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>; i--, j--)\n            {\n                <span class=\"hljs-keyword\">if</span> (board[i, j])\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n\n            <span class=\"hljs-comment\">// To check diagonal attack bottom-left range.</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = row + <span class=\"hljs-number\">1</span>, j = col - <span class=\"hljs-number\">1</span>; j &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; i &lt; board.GetLength(<span class=\"hljs-number\">0</span>); i++, j--)\n            {\n                <span class=\"hljs-keyword\">if</span> (board[i, j])\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n            }\n\n            <span class=\"hljs-comment\">// Return true if it can use position.</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "John Law",
      "email": "johnlaw.po@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hetal Kuvadia",
      "email": "hetal.kuvadia@somaiya.edu",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "David Makray",
      "email": "dmakray@gmail.com",
      "commits": 3
    },
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}
