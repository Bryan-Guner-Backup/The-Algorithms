{
  "slug": "longestvalidparentheses",
  "name": "LongestValidParentheses",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Dynamic-Programming/LongestValidParentheses.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/LongestValidParentheses.js",
      "code": "<span class=\"hljs-comment\">/*\n  LeetCode -&gt; https://leetcode.com/problems/longest-valid-parentheses/\n\n  Given a string containing just the characters &#x27;(&#x27; and &#x27;)&#x27;,\n  find the length of the longest valid (well-formed) parentheses substring.\n*/</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">longestValidParentheses</span> = (<span class=\"hljs-params\">s</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> n = s.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> stack = []\n\n  <span class=\"hljs-comment\">// storing results</span>\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n).<span class=\"hljs-title function_\">fill</span>(-<span class=\"hljs-title class_\">Infinity</span>)\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n    <span class=\"hljs-keyword\">const</span> bracket = s[i]\n\n    <span class=\"hljs-keyword\">if</span> (bracket === <span class=\"hljs-string\">&#x27;)&#x27;</span> &amp;&amp; s[stack[stack.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>]] === <span class=\"hljs-string\">&#x27;(&#x27;</span>) {\n      res[i] = <span class=\"hljs-number\">1</span>\n      res[stack[stack.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>]] = <span class=\"hljs-number\">1</span>\n      stack.<span class=\"hljs-title function_\">pop</span>()\n    } <span class=\"hljs-keyword\">else</span> {\n      stack.<span class=\"hljs-title function_\">push</span>(i)\n    }\n  }\n\n  <span class=\"hljs-comment\">// summing all adjacent valid</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n    res[i] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(res[i], res[i] + res[i - <span class=\"hljs-number\">1</span>])\n  }\n\n  <span class=\"hljs-comment\">// adding 0 if there are none so it will return 0 instead of -Infinity</span>\n  res.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(...res)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">longestValidParentheses</span>(<span class=\"hljs-string\">&#x27;)()())&#x27;</span>)) <span class=\"hljs-comment\">// output -&gt; 4</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">longestValidParentheses</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)) <span class=\"hljs-comment\">// output -&gt; 0</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">longestValidParentheses</span>(<span class=\"hljs-string\">&#x27;(()&#x27;</span>)) <span class=\"hljs-comment\">// output -&gt; 2</span>\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    },
    "java": {
      "dir": "DynamicProgramming/LongestValidParentheses.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/LongestValidParentheses.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * Given a string containing just the characters &#x27;(&#x27; and &#x27;)&#x27;, find the length of the longest valid\n * (well-formed) parentheses substring.\n *\n * <span class=\"hljs-doctag\">@author</span> Libin Yang (https://github.com/yanglbme)\n * <span class=\"hljs-doctag\">@since</span> 2018/10/5\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LongestValidParentheses</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getLongestValidParentheses</span><span class=\"hljs-params\">(String s)</span> {\n    <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-literal\">null</span> || s.length() &lt; <span class=\"hljs-number\">2</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-type\">char</span>[] chars = s.toCharArray();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> chars.length;\n    <span class=\"hljs-type\">int</span>[] res = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n    res[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\n    res[<span class=\"hljs-number\">1</span>] = chars[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&#x27;)&#x27;</span> &amp;&amp; chars[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&#x27;(&#x27;</span> ? <span class=\"hljs-number\">2</span> : <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> res[<span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt; n; ++i) {\n      <span class=\"hljs-keyword\">if</span> (chars[i] == <span class=\"hljs-string\">&#x27;)&#x27;</span>) {\n        <span class=\"hljs-keyword\">if</span> (chars[i - <span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&#x27;(&#x27;</span>) {\n          res[i] = res[i - <span class=\"hljs-number\">2</span>] + <span class=\"hljs-number\">2</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> i - res[i - <span class=\"hljs-number\">1</span>] - <span class=\"hljs-number\">1</span>;\n          <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; chars[index] == <span class=\"hljs-string\">&#x27;(&#x27;</span>) {\n            <span class=\"hljs-comment\">// ()(())</span>\n            res[i] = res[i - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">2</span> + (index - <span class=\"hljs-number\">1</span> &gt;= <span class=\"hljs-number\">0</span> ? res[index - <span class=\"hljs-number\">1</span>] : <span class=\"hljs-number\">0</span>);\n          }\n        }\n      }\n      max = Math.max(max, res[i]);\n    }\n\n    <span class=\"hljs-keyword\">return</span> max;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> sc.nextLine();\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;quit&quot;</span>.equals(str)) {\n        <span class=\"hljs-keyword\">break</span>;\n      }\n\n      System.out.println(<span class=\"hljs-string\">&quot;Len is: &quot;</span> + getLongestValidParentheses(str));\n    }\n\n    sc.close();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Suhail Malik",
      "email": "devmsuhail@gmail.com",
      "commits": 1
    },
    {
      "name": "Serwio YK",
      "email": "56473255+Serwios@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
