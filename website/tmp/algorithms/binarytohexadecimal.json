{
  "slug": "binarytohexadecimal",
  "name": "BinaryToHexadecimal",
  "categories": ["conversions"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Conversions/BinaryToHexadecimal.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Conversions/BinaryToHexadecimal.java",
      "code": "<span class=\"hljs-keyword\">package</span> Conversions;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-comment\">/**\n * Converts any Binary Number to a Hexadecimal Number\n *\n * <span class=\"hljs-doctag\">@author</span> Nishita Aggarwal\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BinaryToHexadecimal</span> {\n\n  <span class=\"hljs-comment\">/**\n   * This method converts a binary number to a hexadecimal number.\n   *\n   * <span class=\"hljs-doctag\">@param</span> binary The binary number\n   * <span class=\"hljs-doctag\">@return</span> The hexadecimal number\n   */</span>\n  <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">binToHex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> binary)</span> {\n    <span class=\"hljs-comment\">// hm to store hexadecimal codes for binary numbers within the range: 0000 to 1111 i.e. for</span>\n    <span class=\"hljs-comment\">// decimal numbers 0 to 15</span>\n    HashMap&lt;Integer, String&gt; hm = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n    <span class=\"hljs-comment\">// String to store hexadecimal code</span>\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hex</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) {\n      hm.put(i, String.valueOf(i));\n    }\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">10</span>; i &lt; <span class=\"hljs-number\">16</span>; i++) hm.put(i, String.valueOf((<span class=\"hljs-type\">char</span>) (<span class=\"hljs-string\">&#x27;A&#x27;</span> + i - <span class=\"hljs-number\">10</span>)));\n    <span class=\"hljs-type\">int</span> currbit;\n    <span class=\"hljs-keyword\">while</span> (binary != <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">code4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// to store decimal equivalent of number formed by 4 decimal digits</span>\n      <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">4</span>; i++) {\n        currbit = binary % <span class=\"hljs-number\">10</span>;\n        binary = binary / <span class=\"hljs-number\">10</span>;\n        code4 += currbit * Math.pow(<span class=\"hljs-number\">2</span>, i);\n      }\n      hex = hm.get(code4) + hex;\n    }\n    <span class=\"hljs-keyword\">return</span> hex;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Main method\n   *\n   * <span class=\"hljs-doctag\">@param</span> args Command line arguments\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    System.out.println(<span class=\"hljs-string\">&quot;Enter binary number:&quot;</span>);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">binary</span> <span class=\"hljs-operator\">=</span> sc.nextInt();\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hex</span> <span class=\"hljs-operator\">=</span> binToHex(binary);\n    System.out.println(<span class=\"hljs-string\">&quot;Hexadecimal Code:&quot;</span> + hex);\n    sc.close();\n  }\n}\n"
    },
    "c": {
      "dir": "conversions/binary_to_hexadecimal.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/conversions/binary_to_hexadecimal.c",
      "code": "<span class=\"hljs-comment\">/*\r\n * C Program to Convert Binary to Hexadecimal\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">int</span> binary, hexa = <span class=\"hljs-number\">0</span>, i = <span class=\"hljs-number\">1</span>, remainder;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the binary number: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%ld&quot;</span>, &amp;binary);\r\n    <span class=\"hljs-keyword\">while</span> (binary != <span class=\"hljs-number\">0</span>)\r\n    {\r\n        remainder = binary % <span class=\"hljs-number\">10</span>;\r\n        hexa = hexa + remainder * i;\r\n        i = i * <span class=\"hljs-number\">2</span>;\r\n        binary = binary / <span class=\"hljs-number\">10</span>;\r\n    }\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The equivalent hexadecimal value: %lX&quot;</span>, hexa);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    },
    "dart": {
      "dir": "conversions/binary_to_hexadecimal.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions/binary_to_hexadecimal.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-comment\">//Binary number to hexadecimal number conversion</span>\n<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">String</span>&gt; hex_table = {\n  <span class=\"hljs-string\">&quot;0000&quot;</span>: <span class=\"hljs-string\">&#x27;0&#x27;</span>,\n  <span class=\"hljs-string\">&quot;0001&quot;</span>: <span class=\"hljs-string\">&#x27;1&#x27;</span>,\n  <span class=\"hljs-string\">&quot;0010&quot;</span>: <span class=\"hljs-string\">&#x27;2&#x27;</span>,\n  <span class=\"hljs-string\">&quot;0011&quot;</span>: <span class=\"hljs-string\">&#x27;3&#x27;</span>,\n  <span class=\"hljs-string\">&quot;0100&quot;</span>: <span class=\"hljs-string\">&#x27;4&#x27;</span>,\n  <span class=\"hljs-string\">&quot;0101&quot;</span>: <span class=\"hljs-string\">&#x27;5&#x27;</span>,\n  <span class=\"hljs-string\">&quot;0110&quot;</span>: <span class=\"hljs-string\">&#x27;6&#x27;</span>,\n  <span class=\"hljs-string\">&quot;0111&quot;</span>: <span class=\"hljs-string\">&#x27;7&#x27;</span>,\n  <span class=\"hljs-string\">&quot;1000&quot;</span>: <span class=\"hljs-string\">&#x27;8&#x27;</span>,\n  <span class=\"hljs-string\">&quot;1001&quot;</span>: <span class=\"hljs-string\">&#x27;9&#x27;</span>,\n  <span class=\"hljs-string\">&quot;1010&quot;</span>: <span class=\"hljs-string\">&#x27;A&#x27;</span>,\n  <span class=\"hljs-string\">&quot;1011&quot;</span>: <span class=\"hljs-string\">&#x27;B&#x27;</span>,\n  <span class=\"hljs-string\">&quot;1100&quot;</span>: <span class=\"hljs-string\">&#x27;C&#x27;</span>,\n  <span class=\"hljs-string\">&quot;1101&quot;</span>: <span class=\"hljs-string\">&#x27;D&#x27;</span>,\n  <span class=\"hljs-string\">&quot;1110&quot;</span>: <span class=\"hljs-string\">&#x27;E&#x27;</span>,\n  <span class=\"hljs-string\">&quot;1111&quot;</span>: <span class=\"hljs-string\">&#x27;F&#x27;</span>,\n};\n\n<span class=\"hljs-comment\">// function to take a binary string and to return hex value</span>\n<span class=\"hljs-built_in\">String</span> binary_to_hexadecimal(<span class=\"hljs-built_in\">String</span> bin_string) {\n  <span class=\"hljs-comment\">// checking for unexpected values</span>\n  bin_string = bin_string.trim();\n  <span class=\"hljs-keyword\">if</span> (bin_string == <span class=\"hljs-keyword\">null</span> || bin_string == <span class=\"hljs-string\">&quot;&quot;</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An empty value was passed to the function&quot;</span>);\n  }\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-built_in\">int</span>.parse(bin_string);\n  } <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> FormatException(<span class=\"hljs-string\">&quot;An invalid value was passed to the function&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">// negative number check</span>\n  <span class=\"hljs-built_in\">bool</span> is_negative = bin_string[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&quot;-&quot;</span>;\n  <span class=\"hljs-keyword\">if</span> (is_negative) bin_string = bin_string.substring(<span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-comment\">// add min 0&#x27;s in the end to make right substring length divisible by 4</span>\n  <span class=\"hljs-keyword\">var</span> len_bin = bin_string.length;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= (<span class=\"hljs-number\">4</span> - len_bin % <span class=\"hljs-number\">4</span>) % <span class=\"hljs-number\">4</span>; i++)\n    bin_string = <span class=\"hljs-string\">&#x27;0&#x27;</span> + bin_string;\n\n  <span class=\"hljs-comment\">// coverting the binary values to hex by diving into substring</span>\n  <span class=\"hljs-built_in\">String</span> hex_val = <span class=\"hljs-string\">&quot;&quot;</span>;\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (i != bin_string.length) {\n    <span class=\"hljs-built_in\">String</span> bin_curr = bin_string.substring(i, i + <span class=\"hljs-number\">4</span>);\n    hex_val += hex_table[bin_curr];\n    i += <span class=\"hljs-number\">4</span>;\n  }\n\n  <span class=\"hljs-comment\">// returning the value</span>\n  <span class=\"hljs-keyword\">if</span> (is_negative) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span> + hex_val;\n  }\n  <span class=\"hljs-keyword\">return</span> hex_val;\n}\n\n<span class=\"hljs-comment\">// driver function</span>\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;binary_to_hexadecimal -1111&quot;</span>, () {\n    expect(binary_to_hexadecimal(<span class=\"hljs-string\">&quot;-1111&quot;</span>), equals(<span class=\"hljs-string\">&quot;-F&quot;</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;binary_to_hexadecimal 101011&quot;</span>, () {\n    expect(binary_to_hexadecimal(<span class=\"hljs-string\">&quot;101011&quot;</span>), equals(<span class=\"hljs-string\">&quot;2B&quot;</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;binary_to_hexadecimal rasies error when number is invalid&quot;</span>, () {\n    expect(() =&gt; binary_to_hexadecimal(<span class=\"hljs-string\">&quot;-1011a01&quot;</span>), throwsFormatException);\n  });\n\n  test(<span class=\"hljs-string\">&quot;binary_to_hexadecimal of empty string raises error&quot;</span>, () {\n    expect(() =&gt; binary_to_hexadecimal(<span class=\"hljs-string\">&quot;&quot;</span>), throwsFormatException);\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Vishnu",
      "email": "vishnupothan2@gmail.com",
      "commits": 1
    },
    {
      "name": "Nicola Masarone",
      "email": "nick67.android@gmail.com",
      "commits": 1
    },
    {
      "name": "Nishita Aggarwal",
      "email": "naggarwal97@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
