{
  "slug": "newton-forward-divided-difference-formula",
  "name": "Newton Forward Divided Difference Formula",
  "categories": ["numericalmethods"],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The Newton polynomial can be expressed in a simplified form when $ x_0,x_1,...,x_k $ are arranged consecutively with equal spacing. Introducing the notation $h=x_{i+1} - x_i$ for each $ i = 0, 1,...,k-1$ and $ x = x_0+sh$, the difference $x-x_i$ can be written as $(s-i)h$. So the Newton polynomial becomes $$\\sum_{i=0}^k = {s \\choose i}i!h^i[y_0,...,y_i]. $$This is called the Newton forward divided difference formula.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x*3^x)$$ with $\\varepsilon = 0.0001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> math\nx = np.array([-<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1.0</span>], <span class=\"hljs-built_in\">float</span>)\ny = np.array([-<span class=\"hljs-number\">0.3333333333333333</span>,-<span class=\"hljs-number\">0.28867513459481287</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.8660254037844386</span>, <span class=\"hljs-number\">3.0</span>], <span class=\"hljs-built_in\">float</span>)\neps = <span class=\"hljs-number\">0.0001</span>\nn = <span class=\"hljs-built_in\">len</span>(x)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n    a = <span class=\"hljs-built_in\">float</span>(x[i]*(<span class=\"hljs-number\">3</span>**x[i]))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"f(x\"</span>,i,<span class=\"hljs-string\">\") =\"</span>,a)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">coef</span>(<span class=\"hljs-params\">x, y</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    y.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(x) \n    a = [] \n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n): \n        a.append(y[i]) \n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n): \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n-<span class=\"hljs-number\">1</span>, j-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>): \n            a[i] = <span class=\"hljs-built_in\">float</span>(a[i]-a[i-<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">return</span> np.array(a)  \n<span class=\"hljs-built_in\">print</span>(coef(x, y))\nr = <span class=\"hljs-built_in\">float</span>(-<span class=\"hljs-number\">0.25</span>)\nt = <span class=\"hljs-built_in\">float</span>((r - x[<span class=\"hljs-number\">0</span>])/(x[<span class=\"hljs-number\">1</span>]-x[<span class=\"hljs-number\">0</span>]))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tsum</span>(<span class=\"hljs-params\">t, n</span>):\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, n, <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>*(t-i))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>)\n    \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Eval</span>(<span class=\"hljs-params\">a, x, t</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(a) \n    temp = a[<span class=\"hljs-number\">0</span>]\n    count = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n, <span class=\"hljs-number\">1</span>):\n        temp += (tsum(t, i-<span class=\"hljs-number\">1</span>)*a[i])/math.factorial(i)\n        count = count + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Count of parts in the interpolation formula:\"</span>,count)\n    <span class=\"hljs-keyword\">return</span> temp\nresult = Eval(coef(x,y),x,t)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Value of functions f(x) in\"</span>,r,<span class=\"hljs-string\">\"=\"</span>,result)\n</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">0</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3333333333333333</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">1</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">28867513459481287</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">2</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">3</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8660254037844386</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">4</span> ) = <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-meta\">\n[-0.33333333  0.0446582   0.24401694  0.33333333  0.35726559]</span>\n<span class=\"hljs-attribute\">Count</span> of parts in the interpolation formula: <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">Value</span> of functions f(x) in -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span> = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">06957804087824197</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The Newton polynomial can be expressed in a simplified form when $ x_0,x_1,...,x_k $ are arranged consecutively with equal spacing. Introducing the notation $h=x_{i+1} - x_i$ for each $ i = 0, 1,...,k-1$ and $ x = x_0+sh$, the difference $x-x_i$ can be written as $(s-i)h$. So the Newton polynomial becomes $$\\sum_{i=0}^k = {s \\choose i}i!h^i[y_0,...,y_i]. $$This is called the Newton forward divided difference formula.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x*3^x)$$ with $\\varepsilon = 0.0001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> math\nx = np.array([-<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1.0</span>], <span class=\"hljs-built_in\">float</span>)\ny = np.array([-<span class=\"hljs-number\">0.3333333333333333</span>,-<span class=\"hljs-number\">0.28867513459481287</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.8660254037844386</span>, <span class=\"hljs-number\">3.0</span>], <span class=\"hljs-built_in\">float</span>)\neps = <span class=\"hljs-number\">0.0001</span>\nn = <span class=\"hljs-built_in\">len</span>(x)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n    a = <span class=\"hljs-built_in\">float</span>(x[i]*(<span class=\"hljs-number\">3</span>**x[i]))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"f(x\"</span>,i,<span class=\"hljs-string\">\") =\"</span>,a)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">coef</span>(<span class=\"hljs-params\">x, y</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    y.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(x) \n    a = [] \n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n): \n        a.append(y[i]) \n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n): \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n-<span class=\"hljs-number\">1</span>, j-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>): \n            a[i] = <span class=\"hljs-built_in\">float</span>(a[i]-a[i-<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">return</span> np.array(a)  \n<span class=\"hljs-built_in\">print</span>(coef(x, y))\nr = <span class=\"hljs-built_in\">float</span>(-<span class=\"hljs-number\">0.25</span>)\nt = <span class=\"hljs-built_in\">float</span>((r - x[<span class=\"hljs-number\">0</span>])/(x[<span class=\"hljs-number\">1</span>]-x[<span class=\"hljs-number\">0</span>]))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tsum</span>(<span class=\"hljs-params\">t, n</span>):\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, n, <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>*(t-i))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>)\n    \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Eval</span>(<span class=\"hljs-params\">a, x, t</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(a) \n    temp = a[<span class=\"hljs-number\">0</span>]\n    count = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n, <span class=\"hljs-number\">1</span>):\n        temp += (tsum(t, i-<span class=\"hljs-number\">1</span>)*a[i])/math.factorial(i)\n        count = count + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Count of parts in the interpolation formula:\"</span>,count)\n    <span class=\"hljs-keyword\">return</span> temp\nresult = Eval(coef(x,y),x,t)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Value of functions f(x) in\"</span>,r,<span class=\"hljs-string\">\"=\"</span>,result)\n</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">0</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3333333333333333</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">1</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">28867513459481287</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">2</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">3</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8660254037844386</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">4</span> ) = <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-meta\">\n[-0.33333333  0.0446582   0.24401694  0.33333333  0.35726559]</span>\n<span class=\"hljs-attribute\">Count</span> of parts in the interpolation formula: <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">Value</span> of functions f(x) in -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span> = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">06957804087824197</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The Newton polynomial can be expressed in a simplified form when $ x_0,x_1,...,x_k $ are arranged consecutively with equal spacing. Introducing the notation $h=x_{i+1} - x_i$ for each $ i = 0, 1,...,k-1$ and $ x = x_0+sh$, the difference $x-x_i$ can be written as $(s-i)h$. So the Newton polynomial becomes $$\\sum_{i=0}^k = {s \\choose i}i!h^i[y_0,...,y_i]. $$This is called the Newton forward divided difference formula.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x*3^x)$$ with $\\varepsilon = 0.0001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> math\nx = np.array([-<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1.0</span>], <span class=\"hljs-built_in\">float</span>)\ny = np.array([-<span class=\"hljs-number\">0.3333333333333333</span>,-<span class=\"hljs-number\">0.28867513459481287</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.8660254037844386</span>, <span class=\"hljs-number\">3.0</span>], <span class=\"hljs-built_in\">float</span>)\neps = <span class=\"hljs-number\">0.0001</span>\nn = <span class=\"hljs-built_in\">len</span>(x)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n    a = <span class=\"hljs-built_in\">float</span>(x[i]*(<span class=\"hljs-number\">3</span>**x[i]))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"f(x\"</span>,i,<span class=\"hljs-string\">\") =\"</span>,a)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">coef</span>(<span class=\"hljs-params\">x, y</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    y.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(x) \n    a = [] \n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n): \n        a.append(y[i]) \n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n): \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n-<span class=\"hljs-number\">1</span>, j-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>): \n            a[i] = <span class=\"hljs-built_in\">float</span>(a[i]-a[i-<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">return</span> np.array(a)  \n<span class=\"hljs-built_in\">print</span>(coef(x, y))\nr = <span class=\"hljs-built_in\">float</span>(-<span class=\"hljs-number\">0.25</span>)\nt = <span class=\"hljs-built_in\">float</span>((r - x[<span class=\"hljs-number\">0</span>])/(x[<span class=\"hljs-number\">1</span>]-x[<span class=\"hljs-number\">0</span>]))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tsum</span>(<span class=\"hljs-params\">t, n</span>):\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, n, <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>*(t-i))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>)\n    \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Eval</span>(<span class=\"hljs-params\">a, x, t</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(a) \n    temp = a[<span class=\"hljs-number\">0</span>]\n    count = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n, <span class=\"hljs-number\">1</span>):\n        temp += (tsum(t, i-<span class=\"hljs-number\">1</span>)*a[i])/math.factorial(i)\n        count = count + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Count of parts in the interpolation formula:\"</span>,count)\n    <span class=\"hljs-keyword\">return</span> temp\nresult = Eval(coef(x,y),x,t)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Value of functions f(x) in\"</span>,r,<span class=\"hljs-string\">\"=\"</span>,result)\n</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">0</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3333333333333333</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">1</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">28867513459481287</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">2</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">3</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8660254037844386</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">4</span> ) = <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-meta\">\n[-0.33333333  0.0446582   0.24401694  0.33333333  0.35726559]</span>\n<span class=\"hljs-attribute\">Count</span> of parts in the interpolation formula: <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">Value</span> of functions f(x) in -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span> = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">06957804087824197</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The Newton polynomial can be expressed in a simplified form when $ x_0,x_1,...,x_k $ are arranged consecutively with equal spacing. Introducing the notation $h=x_{i+1} - x_i$ for each $ i = 0, 1,...,k-1$ and $ x = x_0+sh$, the difference $x-x_i$ can be written as $(s-i)h$. So the Newton polynomial becomes $$\\sum_{i=0}^k = {s \\choose i}i!h^i[y_0,...,y_i]. $$This is called the Newton forward divided difference formula.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x*3^x)$$ with $\\varepsilon = 0.0001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> math\nx = np.array([-<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1.0</span>], <span class=\"hljs-built_in\">float</span>)\ny = np.array([-<span class=\"hljs-number\">0.3333333333333333</span>,-<span class=\"hljs-number\">0.28867513459481287</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.8660254037844386</span>, <span class=\"hljs-number\">3.0</span>], <span class=\"hljs-built_in\">float</span>)\neps = <span class=\"hljs-number\">0.0001</span>\nn = <span class=\"hljs-built_in\">len</span>(x)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n    a = <span class=\"hljs-built_in\">float</span>(x[i]*(<span class=\"hljs-number\">3</span>**x[i]))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"f(x\"</span>,i,<span class=\"hljs-string\">\") =\"</span>,a)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">coef</span>(<span class=\"hljs-params\">x, y</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    y.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(x) \n    a = [] \n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n): \n        a.append(y[i]) \n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n): \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n-<span class=\"hljs-number\">1</span>, j-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>): \n            a[i] = <span class=\"hljs-built_in\">float</span>(a[i]-a[i-<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">return</span> np.array(a)  \n<span class=\"hljs-built_in\">print</span>(coef(x, y))\nr = <span class=\"hljs-built_in\">float</span>(-<span class=\"hljs-number\">0.25</span>)\nt = <span class=\"hljs-built_in\">float</span>((r - x[<span class=\"hljs-number\">0</span>])/(x[<span class=\"hljs-number\">1</span>]-x[<span class=\"hljs-number\">0</span>]))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tsum</span>(<span class=\"hljs-params\">t, n</span>):\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, n, <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>*(t-i))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>)\n    \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Eval</span>(<span class=\"hljs-params\">a, x, t</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(a) \n    temp = a[<span class=\"hljs-number\">0</span>]\n    count = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n, <span class=\"hljs-number\">1</span>):\n        temp += (tsum(t, i-<span class=\"hljs-number\">1</span>)*a[i])/math.factorial(i)\n        count = count + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Count of parts in the interpolation formula:\"</span>,count)\n    <span class=\"hljs-keyword\">return</span> temp\nresult = Eval(coef(x,y),x,t)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Value of functions f(x) in\"</span>,r,<span class=\"hljs-string\">\"=\"</span>,result)\n</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">0</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3333333333333333</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">1</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">28867513459481287</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">2</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">3</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8660254037844386</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">4</span> ) = <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-meta\">\n[-0.33333333  0.0446582   0.24401694  0.33333333  0.35726559]</span>\n<span class=\"hljs-attribute\">Count</span> of parts in the interpolation formula: <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">Value</span> of functions f(x) in -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span> = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">06957804087824197</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The Newton polynomial can be expressed in a simplified form when $ x_0,x_1,...,x_k $ are arranged consecutively with equal spacing. Introducing the notation $h=x_{i+1} - x_i$ for each $ i = 0, 1,...,k-1$ and $ x = x_0+sh$, the difference $x-x_i$ can be written as $(s-i)h$. So the Newton polynomial becomes $$\\sum_{i=0}^k = {s \\choose i}i!h^i[y_0,...,y_i]. $$This is called the Newton forward divided difference formula.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x*3^x)$$ with $\\varepsilon = 0.0001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> math\nx = np.array([-<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1.0</span>], <span class=\"hljs-built_in\">float</span>)\ny = np.array([-<span class=\"hljs-number\">0.3333333333333333</span>,-<span class=\"hljs-number\">0.28867513459481287</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.8660254037844386</span>, <span class=\"hljs-number\">3.0</span>], <span class=\"hljs-built_in\">float</span>)\neps = <span class=\"hljs-number\">0.0001</span>\nn = <span class=\"hljs-built_in\">len</span>(x)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n    a = <span class=\"hljs-built_in\">float</span>(x[i]*(<span class=\"hljs-number\">3</span>**x[i]))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"f(x\"</span>,i,<span class=\"hljs-string\">\") =\"</span>,a)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">coef</span>(<span class=\"hljs-params\">x, y</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    y.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(x) \n    a = [] \n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n): \n        a.append(y[i]) \n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n): \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n-<span class=\"hljs-number\">1</span>, j-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>): \n            a[i] = <span class=\"hljs-built_in\">float</span>(a[i]-a[i-<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">return</span> np.array(a)  \n<span class=\"hljs-built_in\">print</span>(coef(x, y))\nr = <span class=\"hljs-built_in\">float</span>(-<span class=\"hljs-number\">0.25</span>)\nt = <span class=\"hljs-built_in\">float</span>((r - x[<span class=\"hljs-number\">0</span>])/(x[<span class=\"hljs-number\">1</span>]-x[<span class=\"hljs-number\">0</span>]))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tsum</span>(<span class=\"hljs-params\">t, n</span>):\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, n, <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>*(t-i))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>)\n    \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Eval</span>(<span class=\"hljs-params\">a, x, t</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(a) \n    temp = a[<span class=\"hljs-number\">0</span>]\n    count = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n, <span class=\"hljs-number\">1</span>):\n        temp += (tsum(t, i-<span class=\"hljs-number\">1</span>)*a[i])/math.factorial(i)\n        count = count + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Count of parts in the interpolation formula:\"</span>,count)\n    <span class=\"hljs-keyword\">return</span> temp\nresult = Eval(coef(x,y),x,t)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Value of functions f(x) in\"</span>,r,<span class=\"hljs-string\">\"=\"</span>,result)\n</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">0</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3333333333333333</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">1</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">28867513459481287</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">2</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">3</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8660254037844386</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">4</span> ) = <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-meta\">\n[-0.33333333  0.0446582   0.24401694  0.33333333  0.35726559]</span>\n<span class=\"hljs-attribute\">Count</span> of parts in the interpolation formula: <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">Value</span> of functions f(x) in -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span> = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">06957804087824197</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The Newton polynomial can be expressed in a simplified form when $ x_0,x_1,...,x_k $ are arranged consecutively with equal spacing. Introducing the notation $h=x_{i+1} - x_i$ for each $ i = 0, 1,...,k-1$ and $ x = x_0+sh$, the difference $x-x_i$ can be written as $(s-i)h$. So the Newton polynomial becomes $$\\sum_{i=0}^k = {s \\choose i}i!h^i[y_0,...,y_i]. $$This is called the Newton forward divided difference formula.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x*3^x)$$ with $\\varepsilon = 0.0001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np \n<span class=\"hljs-keyword\">import</span> math\nx = np.array([-<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">1.0</span>], <span class=\"hljs-built_in\">float</span>)\ny = np.array([-<span class=\"hljs-number\">0.3333333333333333</span>,-<span class=\"hljs-number\">0.28867513459481287</span>, <span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">0.8660254037844386</span>, <span class=\"hljs-number\">3.0</span>], <span class=\"hljs-built_in\">float</span>)\neps = <span class=\"hljs-number\">0.0001</span>\nn = <span class=\"hljs-built_in\">len</span>(x)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n    a = <span class=\"hljs-built_in\">float</span>(x[i]*(<span class=\"hljs-number\">3</span>**x[i]))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"f(x\"</span>,i,<span class=\"hljs-string\">\") =\"</span>,a)\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">coef</span>(<span class=\"hljs-params\">x, y</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    y.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(x) \n    a = [] \n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n): \n        a.append(y[i]) \n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n): \n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n-<span class=\"hljs-number\">1</span>, j-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>): \n            a[i] = <span class=\"hljs-built_in\">float</span>(a[i]-a[i-<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">return</span> np.array(a)  \n<span class=\"hljs-built_in\">print</span>(coef(x, y))\nr = <span class=\"hljs-built_in\">float</span>(-<span class=\"hljs-number\">0.25</span>)\nt = <span class=\"hljs-built_in\">float</span>((r - x[<span class=\"hljs-number\">0</span>])/(x[<span class=\"hljs-number\">1</span>]-x[<span class=\"hljs-number\">0</span>]))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tsum</span>(<span class=\"hljs-params\">t, n</span>):\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-number\">1.0</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, n, <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>*(t-i))\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">sum</span>)\n    \n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Eval</span>(<span class=\"hljs-params\">a, x, t</span>): \n    x.astype(<span class=\"hljs-built_in\">float</span>) \n    n = <span class=\"hljs-built_in\">len</span>(a) \n    temp = a[<span class=\"hljs-number\">0</span>]\n    count = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n, <span class=\"hljs-number\">1</span>):\n        temp += (tsum(t, i-<span class=\"hljs-number\">1</span>)*a[i])/math.factorial(i)\n        count = count + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Count of parts in the interpolation formula:\"</span>,count)\n    <span class=\"hljs-keyword\">return</span> temp\nresult = Eval(coef(x,y),x,t)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Value of functions f(x) in\"</span>,r,<span class=\"hljs-string\">\"=\"</span>,result)\n</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">0</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">3333333333333333</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">1</span> ) = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">28867513459481287</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">2</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">3</span> ) = <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">8660254037844386</span>\n<span class=\"hljs-attribute\">f</span>(x <span class=\"hljs-number\">4</span> ) = <span class=\"hljs-number\">3</span>.<span class=\"hljs-number\">0</span><span class=\"hljs-meta\">\n[-0.33333333  0.0446582   0.24401694  0.33333333  0.35726559]</span>\n<span class=\"hljs-attribute\">Count</span> of parts in the interpolation formula: <span class=\"hljs-number\">5</span>\n<span class=\"hljs-attribute\">Value</span> of functions f(x) in -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">25</span> = -<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">06957804087824197</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "numerical_methods/newton_forward_divided_difference_formula.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/numerical_methods/newton_forward_divided_difference_formula.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;The Newton polynomial can be expressed in a simplified form when $ x_0,x_1,...,x_k $ are arranged consecutively with equal spacing. Introducing the notation $h=x_{i+1} - x_i$ for each $ i = 0, 1,...,k-1$ and $ x = x_0+sh$, the difference $x-x_i$ can be written as $(s-i)h$. So the Newton polynomial becomes $$\\\\sum_{i=0}^k = {s \\\\choose i}i!h^i[y_0,...,y_i]. $$This is called the Newton forward divided difference formula.&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;Let&#x27;s check this method for the next function: $$f(x*3^x)$$ with $\\\\varepsilon = 0.0001$&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-string\">&quot;f(x 0 ) = -0.3333333333333333\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;f(x 1 ) = -0.28867513459481287\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;f(x 2 ) = 0.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;f(x 3 ) = 0.8660254037844386\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;f(x 4 ) = 3.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;[-0.33333333  0.0446582   0.24401694  0.33333333  0.35726559]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;Count of parts in the interpolation formula: 5\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n      <span class=\"hljs-string\">&quot;Value of functions f(x) in -0.25 = -0.06957804087824197\\n&quot;</span>\n     <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;import numpy as np \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;import math\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;x = np.array([-1.0, -0.5, 0, 0.5, 1.0], float)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;y = np.array([-0.3333333333333333,-0.28867513459481287, 0.0, 0.8660254037844386, 3.0], float)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;eps = 0.0001\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;n = len(x)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;for i in range(n):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    a = float(x[i]*(3**x[i]))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    print(\\&quot;f(x\\&quot;,i,\\&quot;) =\\&quot;,a)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def coef(x, y): \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    x.astype(float) \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    y.astype(float) \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    n = len(x) \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    a = [] \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    for i in range(n): \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        a.append(y[i]) \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    for j in range(1, n): \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        for i in range(n-1, j-1, -1): \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;            a[i] = float(a[i]-a[i-1])\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return np.array(a)  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;print(coef(x, y))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;r = float(-0.25)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;t = float((r - x[0])/(x[1]-x[0]))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def tsum(t, n):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    sum = float(1.0)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    for i in range(0, n, 1):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        sum = float(sum*(t-i))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return float(sum)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def Eval(a, x, t): \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    x.astype(float) \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    n = len(a) \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    temp = a[0]\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    count = 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    for i in range(1, n, 1):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        temp += (tsum(t, i-1)*a[i])/math.factorial(i)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        count = count + 1\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    print(\\&quot;Count of parts in the interpolation formula:\\&quot;,count)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return temp\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;result = Eval(coef(x,y),x,t)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;print(\\&quot;Value of functions f(x) in\\&quot;,r,\\&quot;=\\&quot;,result)\\n&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;language&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.7.6&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-punctuation\">}</span>\n"
    }
  },
  "contributors": [
    {
      "name": "CheshirLvova",
      "email": "ksoovnaila@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
