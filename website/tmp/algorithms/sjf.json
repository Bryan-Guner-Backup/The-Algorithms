{
  "slug": "sjf",
  "name": "SJF",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/SJF.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/SJF.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n<span class=\"hljs-comment\">/**\n *\n *\n * &lt;h2&gt;Shortest job first.&lt;/h2&gt;\n *\n * &lt;p&gt;Shortest job first (SJF) or shortest job next, is a scheduling policy that selects the waiting\n * process with the smallest execution time to execute next Shortest Job first has the advantage of\n * having minimum average waiting time among all scheduling algorithms. It is a Greedy Algorithm. It\n * may cause starvation if shorter processes keep coming. This problem has been solved using the\n * concept of aging.\n *\n * <span class=\"hljs-doctag\">@author</span> shivg7706\n * <span class=\"hljs-doctag\">@since</span> 2018/10/27\n */</span>\n<span class=\"hljs-keyword\">import</span> java.util.*;\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Comparator;\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Process</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> pid;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> arrivalTime;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> burstTime;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> priority;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> turnAroundTime;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> waitTime;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> remainingTime;\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Schedule</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> noOfProcess;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">timer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">private</span> ArrayList&lt;Process&gt; processes;\n  <span class=\"hljs-keyword\">private</span> ArrayList&lt;Process&gt; remainingProcess;\n  <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; gantChart;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">float</span> burstAll;\n  <span class=\"hljs-keyword\">private</span> Map&lt;Integer, ArrayList&lt;Process&gt;&gt; arrivals;\n\n  Schedule() {\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n\n    processes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Process&gt;();\n    remainingProcess = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Process&gt;();\n\n    gantChart = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    arrivals = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n\n    System.out.print(<span class=\"hljs-string\">&quot;Enter the no. of processes: &quot;</span>);\n    noOfProcess = in.nextInt();\n    System.out.println(<span class=\"hljs-string\">&quot;Enter the arrival, burst and priority of processes&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; noOfProcess; i++) {\n      <span class=\"hljs-type\">Process</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Process</span>();\n      p.pid = i;\n      p.arrivalTime = in.nextInt();\n      p.burstTime = in.nextInt();\n      p.priority = in.nextInt();\n      p.turnAroundTime = <span class=\"hljs-number\">0</span>;\n      p.waitTime = <span class=\"hljs-number\">0</span>;\n      p.remainingTime = p.burstTime;\n\n      <span class=\"hljs-keyword\">if</span> (arrivals.get(p.arrivalTime) == <span class=\"hljs-literal\">null</span>) {\n        arrivals.put(p.arrivalTime, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Process&gt;());\n      }\n      arrivals.get(p.arrivalTime).add(p);\n      processes.add(p);\n      burstAll += p.burstTime;\n    }\n    in.close();\n  }\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">startScheduling</span><span class=\"hljs-params\">()</span> {\n\n    processes.sort(\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Process&gt;() {\n          <span class=\"hljs-meta\">@Override</span>\n          <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Process a, Process b)</span> {\n            <span class=\"hljs-keyword\">return</span> a.arrivalTime - b.arrivalTime;\n          }\n        });\n\n    <span class=\"hljs-keyword\">while</span> (!(arrivals.size() == <span class=\"hljs-number\">0</span> &amp;&amp; remainingProcess.size() == <span class=\"hljs-number\">0</span>)) {\n      removeFinishedProcess();\n      <span class=\"hljs-keyword\">if</span> (arrivals.get(timer) != <span class=\"hljs-literal\">null</span>) {\n        remainingProcess.addAll(arrivals.get(timer));\n        arrivals.remove(timer);\n      }\n\n      remainingProcess.sort(\n          <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Process&gt;() {\n            <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">alpha</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>;\n            <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">beta</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Process a, Process b)</span> {\n              <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">aRem</span> <span class=\"hljs-operator\">=</span> a.remainingTime;\n              <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bRem</span> <span class=\"hljs-operator\">=</span> b.remainingTime;\n              <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">aprior</span> <span class=\"hljs-operator\">=</span> a.priority;\n              <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">bprior</span> <span class=\"hljs-operator\">=</span> b.priority;\n              <span class=\"hljs-keyword\">return</span> (alpha * aRem + beta * aprior) - (alpha * bRem + beta * bprior);\n            }\n          });\n\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> timeElapsed(timer);\n      ageing(k);\n      timer++;\n    }\n\n    System.out.println(<span class=\"hljs-string\">&quot;Total time required: &quot;</span> + (timer - <span class=\"hljs-number\">1</span>));\n  }\n\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeFinishedProcess</span><span class=\"hljs-params\">()</span> {\n    ArrayList&lt;Integer&gt; completed = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Integer&gt;();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; remainingProcess.size(); i++) {\n      <span class=\"hljs-keyword\">if</span> (remainingProcess.get(i).remainingTime == <span class=\"hljs-number\">0</span>) {\n        completed.add(i);\n      }\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; completed.size(); i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pid</span> <span class=\"hljs-operator\">=</span> remainingProcess.get(completed.get(i)).pid;\n      processes.get(pid).waitTime = remainingProcess.get(completed.get(i)).waitTime;\n      remainingProcess.remove(remainingProcess.get(completed.get(i)));\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">timeElapsed</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> {\n    <span class=\"hljs-keyword\">if</span> (!remainingProcess.isEmpty()) {\n      gantChart.add(i, remainingProcess.get(<span class=\"hljs-number\">0</span>).pid);\n      remainingProcess.get(<span class=\"hljs-number\">0</span>).remainingTime--;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">ageing</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k)</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> k; i &lt; remainingProcess.size(); i++) {\n      remainingProcess.get(i).waitTime++;\n      <span class=\"hljs-keyword\">if</span> (remainingProcess.get(i).waitTime % <span class=\"hljs-number\">7</span> == <span class=\"hljs-number\">0</span>) {\n        remainingProcess.get(i).priority--;\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">solve</span><span class=\"hljs-params\">()</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Gant chart &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; gantChart.size(); i++) {\n      System.out.print(gantChart.get(i) + <span class=\"hljs-string\">&quot; &quot;</span>);\n    }\n    System.out.println();\n\n    <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">waitTimeTot</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">tatTime</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; noOfProcess; i++) {\n      processes.get(i).turnAroundTime = processes.get(i).waitTime + processes.get(i).burstTime;\n\n      waitTimeTot += processes.get(i).waitTime;\n      tatTime += processes.get(i).turnAroundTime;\n\n      System.out.println(\n          <span class=\"hljs-string\">&quot;Process no.: &quot;</span>\n              + i\n              + <span class=\"hljs-string\">&quot; Wait time: &quot;</span>\n              + processes.get(i).waitTime\n              + <span class=\"hljs-string\">&quot; Turn Around Time: &quot;</span>\n              + processes.get(i).turnAroundTime);\n    }\n\n    System.out.println(<span class=\"hljs-string\">&quot;Average Waiting Time: &quot;</span> + waitTimeTot / noOfProcess);\n    System.out.println(<span class=\"hljs-string\">&quot;Average TAT Time: &quot;</span> + tatTime / noOfProcess);\n    System.out.println(<span class=\"hljs-string\">&quot;Throughput: &quot;</span> + (<span class=\"hljs-type\">float</span>) noOfProcess / (timer - <span class=\"hljs-number\">1</span>));\n  }\n}\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SJF</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Schedule</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Schedule</span>();\n    s.startScheduling();\n    s.solve();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "shivg7706",
      "email": "shivamgupta7706@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
