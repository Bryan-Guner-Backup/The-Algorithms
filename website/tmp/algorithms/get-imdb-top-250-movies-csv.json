{
  "slug": "get-imdb-top-250-movies-csv",
  "name": "Get Imdb Top 250 Movies Csv",
  "categories": ["webprogramming"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "web_programming/get_imdb_top_250_movies_csv.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/web_programming/get_imdb_top_250_movies_csv.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> csv\n\n<span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">from</span> bs4 <span class=\"hljs-keyword\">import</span> BeautifulSoup\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_imdb_top_250_movies</span>(<span class=\"hljs-params\">url: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;&quot;</span></span>) -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">float</span>]:\n    url = url <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">&quot;https://www.imdb.com/chart/top/?ref_=nv_mv_250&quot;</span>\n    soup = BeautifulSoup(requests.get(url).text, <span class=\"hljs-string\">&quot;html.parser&quot;</span>)\n    titles = soup.find_all(<span class=\"hljs-string\">&quot;td&quot;</span>, attrs=<span class=\"hljs-string\">&quot;titleColumn&quot;</span>)\n    ratings = soup.find_all(<span class=\"hljs-string\">&quot;td&quot;</span>, class_=<span class=\"hljs-string\">&quot;ratingColumn imdbRating&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> {\n        title.a.text: <span class=\"hljs-built_in\">float</span>(rating.strong.text)\n        <span class=\"hljs-keyword\">for</span> title, rating <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(titles, ratings)\n    }\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">write_movies</span>(<span class=\"hljs-params\">filename: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;IMDb_Top_250_Movies.csv&quot;</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    movies = get_imdb_top_250_movies()\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(filename, <span class=\"hljs-string\">&quot;w&quot;</span>, newline=<span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-keyword\">as</span> out_file:\n        writer = csv.writer(out_file)\n        writer.writerow([<span class=\"hljs-string\">&quot;Movie title&quot;</span>, <span class=\"hljs-string\">&quot;IMDb rating&quot;</span>])\n        <span class=\"hljs-keyword\">for</span> title, rating <span class=\"hljs-keyword\">in</span> movies.items():\n            writer.writerow([title, rating])\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    write_movies()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "nishithshowri006",
      "email": "58651995+nishithshowri006@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
