{
  "slug": "topological-sort-by-kahns-algo",
  "name": "Topological Sort by Kahns Algo",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "graph/topological_sort_by_kahns_algo.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/graph/topological_sort_by_kahns_algo.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;queue&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">topoSortKahn</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> N, <span class=\"hljs-keyword\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt; &amp;adj)</span></span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> nodes = <span class=\"hljs-number\">0</span>, edges = <span class=\"hljs-number\">0</span>;\n    std::cin &gt;&gt; edges &gt;&gt; nodes;\n    <span class=\"hljs-keyword\">if</span> (edges == <span class=\"hljs-number\">0</span> || nodes == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-type\">int</span> u = <span class=\"hljs-number\">0</span>, v = <span class=\"hljs-number\">0</span>;\n\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt; <span class=\"hljs-built_in\">graph</span>(nodes);\n    <span class=\"hljs-comment\">// create graph</span>\n    <span class=\"hljs-comment\">// example</span>\n    <span class=\"hljs-comment\">// 6 6</span>\n    <span class=\"hljs-comment\">// 5 0 5 2 2 3 4 0 4 1 1 3</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; edges; i++) {\n        std::cin &gt;&gt; u &gt;&gt; v;\n        graph[u].<span class=\"hljs-built_in\">push_back</span>(v);\n    }\n\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; topo = <span class=\"hljs-built_in\">topoSortKahn</span>(nodes, graph);\n    <span class=\"hljs-comment\">// topologically sorted nodes</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; nodes; i++) {\n        std::cout &lt;&lt; topo[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n}\n\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">topoSortKahn</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> V,\n                              <span class=\"hljs-keyword\">const</span> std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt; &amp;adj)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">vis</span><span class=\"hljs-params\">(V + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">false</span>)</span></span>;\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">deg</span><span class=\"hljs-params\">(V + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span></span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j : adj[i]) {\n            deg[j]++;\n        }\n    }\n    std::queue&lt;<span class=\"hljs-type\">int</span>&gt; q;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n        <span class=\"hljs-keyword\">if</span> (deg[i] == <span class=\"hljs-number\">0</span>) {\n            q.<span class=\"hljs-built_in\">push</span>(i);\n            vis[i] = <span class=\"hljs-literal\">true</span>;\n        }\n    }\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">arr</span><span class=\"hljs-params\">(V + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>)</span></span>;\n    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (!q.<span class=\"hljs-built_in\">empty</span>()) {\n        <span class=\"hljs-type\">int</span> cur = q.<span class=\"hljs-built_in\">front</span>();\n        q.<span class=\"hljs-built_in\">pop</span>();\n        arr[count++] = cur;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : adj[cur]) {\n            <span class=\"hljs-keyword\">if</span> (!vis[i]) {\n                deg[i]--;\n                <span class=\"hljs-keyword\">if</span> (deg[i] == <span class=\"hljs-number\">0</span>) {\n                    q.<span class=\"hljs-built_in\">push</span>(i);\n                    vis[i] = <span class=\"hljs-literal\">true</span>;\n                }\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aashish",
      "email": "37924603+aashishtri@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
