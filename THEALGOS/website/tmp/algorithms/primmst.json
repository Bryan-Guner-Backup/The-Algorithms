{
  "slug": "primmst",
  "name": "PrimMST",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Graphs/PrimMST.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs/PrimMST.js",
      "code": "<span class=\"hljs-comment\">// Priority Queue Helper functions</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getParentPosition</span> (position) {\n  <span class=\"hljs-comment\">// Get the parent node of the current node</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((position - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>)\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getChildrenPosition</span> (position) {\n  <span class=\"hljs-comment\">// Get the children nodes of the current node</span>\n  <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">2</span> * position + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> * position + <span class=\"hljs-number\">2</span>]\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PriorityQueue</span> {\n  <span class=\"hljs-comment\">// Priority Queue class using Minimum Binary Heap</span>\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span> = []\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span> = {}\n  }\n\n  isEmpty () {\n    <span class=\"hljs-comment\">// Checking if the heap is empty</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>\n  }\n\n  push (key, priority) {\n    <span class=\"hljs-comment\">// Adding element to the queue (equivalent to add)</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-title function_\">push</span>([key, priority])\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[key] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_shiftUp</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[key])\n  }\n\n  pop () {\n    <span class=\"hljs-comment\">// Removing the element with least priority (equivalent to extractMin)</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_swap</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">const</span> [key] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-title function_\">pop</span>()\n    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[key]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_shiftDown</span>(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> key\n  }\n\n  contains (key) {\n    <span class=\"hljs-comment\">// Check if a given key is present in the queue</span>\n    <span class=\"hljs-keyword\">return</span> (key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>)\n  }\n\n  update (key, priority) {\n    <span class=\"hljs-comment\">// Update the priority of the given element (equivalent to decreaseKey)</span>\n    <span class=\"hljs-keyword\">const</span> currPos = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[key]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[currPos][<span class=\"hljs-number\">1</span>] = priority\n    <span class=\"hljs-keyword\">const</span> parentPos = <span class=\"hljs-title function_\">getParentPosition</span>(currPos)\n    <span class=\"hljs-keyword\">const</span> currPriority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[currPos][<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">let</span> parentPriority = <span class=\"hljs-title class_\">Infinity</span>\n    <span class=\"hljs-keyword\">if</span> (parentPos &gt;= <span class=\"hljs-number\">0</span>) {\n      parentPriority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[parentPos][<span class=\"hljs-number\">1</span>]\n    }\n    <span class=\"hljs-keyword\">const</span> [child1Pos, child2Pos] = <span class=\"hljs-title function_\">getChildrenPosition</span>(currPos)\n    <span class=\"hljs-keyword\">let</span> [child1Priority, child2Priority] = [<span class=\"hljs-title class_\">Infinity</span>, <span class=\"hljs-title class_\">Infinity</span>]\n    <span class=\"hljs-keyword\">if</span> (child1Pos &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span>) {\n      child1Priority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[child1Pos][<span class=\"hljs-number\">1</span>]\n    }\n    <span class=\"hljs-keyword\">if</span> (child2Pos &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span>) {\n      child2Priority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[child2Pos][<span class=\"hljs-number\">1</span>]\n    }\n\n    <span class=\"hljs-keyword\">if</span> (parentPos &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; parentPriority &gt; currPriority) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_shiftUp</span>(currPos)\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (child2Pos &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span> &amp;&amp;\n      (child1Priority &lt; currPriority || child2Priority &lt; currPriority)) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_shiftDown</span>(currPos)\n    }\n  }\n\n  _shiftUp (position) {\n    <span class=\"hljs-comment\">// Helper function to shift up a node to proper position (equivalent to bubbleUp)</span>\n    <span class=\"hljs-keyword\">let</span> currPos = position\n    <span class=\"hljs-keyword\">let</span> parentPos = <span class=\"hljs-title function_\">getParentPosition</span>(currPos)\n    <span class=\"hljs-keyword\">let</span> currPriority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[currPos][<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">let</span> parentPriority = <span class=\"hljs-title class_\">Infinity</span>\n    <span class=\"hljs-keyword\">if</span> (parentPos &gt;= <span class=\"hljs-number\">0</span>) {\n      parentPriority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[parentPos][<span class=\"hljs-number\">1</span>]\n    }\n\n    <span class=\"hljs-keyword\">while</span> (parentPos &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; parentPriority &gt; currPriority) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_swap</span>(currPos, parentPos)\n      currPos = parentPos\n      parentPos = <span class=\"hljs-title function_\">getParentPosition</span>(currPos)\n      currPriority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[currPos][<span class=\"hljs-number\">1</span>]\n      <span class=\"hljs-keyword\">try</span> {\n        parentPriority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[parentPos][<span class=\"hljs-number\">1</span>]\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        parentPriority = <span class=\"hljs-title class_\">Infinity</span>\n      }\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[currPos][<span class=\"hljs-number\">0</span>]] = currPos\n  }\n\n  _shiftDown (position) {\n    <span class=\"hljs-comment\">// Helper function to shift down a node to proper position (equivalent to bubbleDown)</span>\n    <span class=\"hljs-keyword\">let</span> currPos = position\n    <span class=\"hljs-keyword\">let</span> [child1Pos, child2Pos] = <span class=\"hljs-title function_\">getChildrenPosition</span>(currPos)\n    <span class=\"hljs-keyword\">let</span> [child1Priority, child2Priority] = [<span class=\"hljs-title class_\">Infinity</span>, <span class=\"hljs-title class_\">Infinity</span>]\n    <span class=\"hljs-keyword\">if</span> (child1Pos &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span>) {\n      child1Priority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[child1Pos][<span class=\"hljs-number\">1</span>]\n    }\n    <span class=\"hljs-keyword\">if</span> (child2Pos &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span>) {\n      child2Priority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[child2Pos][<span class=\"hljs-number\">1</span>]\n    }\n    <span class=\"hljs-keyword\">let</span> currPriority\n    <span class=\"hljs-keyword\">try</span> {\n      currPriority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[currPos][<span class=\"hljs-number\">1</span>]\n    } <span class=\"hljs-keyword\">catch</span> {\n      <span class=\"hljs-keyword\">return</span>\n    }\n\n    <span class=\"hljs-keyword\">while</span> (child2Pos &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span> &amp;&amp;\n      (child1Priority &lt; currPriority || child2Priority &lt; currPriority)) {\n      <span class=\"hljs-keyword\">if</span> (child1Priority &lt; currPriority &amp;&amp; child1Priority &lt; child2Priority) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_swap</span>(child1Pos, currPos)\n        currPos = child1Pos\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_swap</span>(child2Pos, currPos)\n        currPos = child2Pos\n      }\n      [child1Pos, child2Pos] = <span class=\"hljs-title function_\">getChildrenPosition</span>(currPos)\n      <span class=\"hljs-keyword\">try</span> {\n        [child1Priority, child2Priority] = [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[child1Pos][<span class=\"hljs-number\">1</span>], <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[child2Pos][<span class=\"hljs-number\">1</span>]]\n      } <span class=\"hljs-keyword\">catch</span> (error) {\n        [child1Priority, child2Priority] = [<span class=\"hljs-title class_\">Infinity</span>, <span class=\"hljs-title class_\">Infinity</span>]\n      }\n\n      currPriority = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[currPos][<span class=\"hljs-number\">1</span>]\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[currPos][<span class=\"hljs-number\">0</span>]] = currPos\n    <span class=\"hljs-keyword\">if</span> (child1Pos &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>.<span class=\"hljs-property\">length</span> &amp;&amp; child1Priority &lt; currPriority) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_swap</span>(child1Pos, currPos)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[child1Pos][<span class=\"hljs-number\">0</span>]] = child1Pos\n    }\n  }\n\n  _swap (position1, position2) {\n    <span class=\"hljs-comment\">// Helper function to swap 2 nodes</span>\n    [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[position1], <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[position2]] = [<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[position2], <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[position1]]\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[position1][<span class=\"hljs-number\">0</span>]] = position1\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">keys</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_heap</span>[position2][<span class=\"hljs-number\">0</span>]] = position2\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span> {\n  <span class=\"hljs-comment\">// Weighted Undirected Graph class</span>\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span> = {}\n  }\n\n  addNode (node) {\n    <span class=\"hljs-comment\">// Function to add a node to the graph (connection represented by set)</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node] = {}\n  }\n\n  addEdge (node1, node2, weight) {\n    <span class=\"hljs-comment\">// Function to add an edge (adds the node too if they are not present in the graph)</span>\n    <span class=\"hljs-keyword\">if</span> (!(node1 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node1) }\n    <span class=\"hljs-keyword\">if</span> (!(node2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node2) }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node1][node2] = weight\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node2][node1] = weight\n  }\n\n  <span class=\"hljs-title class_\">Prim</span>MST (start) {\n    <span class=\"hljs-comment\">// Prim&#x27;s Algorithm to generate a Minimum Spanning Tree (MST) of a graph</span>\n    <span class=\"hljs-comment\">// Details: https://en.wikipedia.org/wiki/Prim%27s_algorithm</span>\n    <span class=\"hljs-keyword\">const</span> distance = {}\n    <span class=\"hljs-keyword\">const</span> parent = {}\n    <span class=\"hljs-keyword\">const</span> priorityQueue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PriorityQueue</span>()\n    <span class=\"hljs-comment\">// Initialization</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> node <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>) {\n      distance[node] = (node === start.<span class=\"hljs-title function_\">toString</span>() ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-title class_\">Infinity</span>)\n      parent[node] = <span class=\"hljs-literal\">null</span>\n      priorityQueue.<span class=\"hljs-title function_\">push</span>(node, distance[node])\n    }\n    <span class=\"hljs-comment\">// Updating &#x27;distance&#x27; object</span>\n    <span class=\"hljs-keyword\">while</span> (!priorityQueue.<span class=\"hljs-title function_\">isEmpty</span>()) {\n      <span class=\"hljs-keyword\">const</span> node = priorityQueue.<span class=\"hljs-title function_\">pop</span>()\n      <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node]).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">neighbour</span> =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (priorityQueue.<span class=\"hljs-title function_\">contains</span>(neighbour) &amp;&amp; distance[node] + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node][neighbour] &lt; distance[neighbour]) {\n          distance[neighbour] = distance[node] + <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node][neighbour]\n          parent[neighbour] = node\n          priorityQueue.<span class=\"hljs-title function_\">update</span>(neighbour, distance[neighbour])\n        }\n      })\n    }\n\n    <span class=\"hljs-comment\">// MST Generation from the &#x27;parent&#x27; object</span>\n    <span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span>()\n    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(parent).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">node</span> =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (node &amp;&amp; parent[node]) {\n        graph.<span class=\"hljs-title function_\">addEdge</span>(node, parent[node], <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node][parent[node]])\n      }\n    })\n    <span class=\"hljs-keyword\">return</span> graph\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span> () {\n  <span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GraphWeightedUndirectedAdjacencyList</span>()\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">100</span>) <span class=\"hljs-comment\">// Removed in MST</span>\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(graph.<span class=\"hljs-title class_\">Prim</span>MST(<span class=\"hljs-number\">1</span>))\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    },
    "java": {
      "dir": "DataStructures/Graphs/PrimMST.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Graphs/PrimMST.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Graphs;\n\n<span class=\"hljs-comment\">/**\n * A Java program for Prim&#x27;s Minimum Spanning Tree (MST) algorithm. adjacency matrix representation\n * of the graph\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PrimMST</span> {\n  <span class=\"hljs-comment\">// Number of vertices in the graph</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">V</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;\n\n  <span class=\"hljs-comment\">// A utility function to find the vertex with minimum key</span>\n  <span class=\"hljs-comment\">// value, from the set of vertices not yet included in MST</span>\n  <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key[], Boolean mstSet[])</span> {\n    <span class=\"hljs-comment\">// Initialize min value</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> Integer.MAX_VALUE, min_index = -<span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; v &lt; V; v++)\n      <span class=\"hljs-keyword\">if</span> (mstSet[v] == <span class=\"hljs-literal\">false</span> &amp;&amp; key[v] &lt; min) {\n        min = key[v];\n        min_index = v;\n      }\n\n    <span class=\"hljs-keyword\">return</span> min_index;\n  }\n\n  <span class=\"hljs-comment\">// A utility function to print the constructed MST stored in</span>\n  <span class=\"hljs-comment\">// parent[]</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printMST</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> parent[], <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> graph[][])</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Edge   Weight&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; V; i++)\n      System.out.println(parent[i] + <span class=\"hljs-string\">&quot; - &quot;</span> + i + <span class=\"hljs-string\">&quot;    &quot;</span> + graph[i][parent[i]]);\n  }\n\n  <span class=\"hljs-comment\">// Function to construct and print MST for a graph represented</span>\n  <span class=\"hljs-comment\">//  using adjacency matrix representation</span>\n  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">primMST</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> graph[][])</span> {\n    <span class=\"hljs-comment\">// Array to store constructed MST</span>\n    <span class=\"hljs-type\">int</span> parent[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[V];\n\n    <span class=\"hljs-comment\">// Key values used to pick minimum weight edge in cut</span>\n    <span class=\"hljs-type\">int</span> key[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[V];\n\n    <span class=\"hljs-comment\">// To represent set of vertices not yet included in MST</span>\n    Boolean mstSet[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Boolean</span>[V];\n\n    <span class=\"hljs-comment\">// Initialize all keys as INFINITE</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n      key[i] = Integer.MAX_VALUE;\n      mstSet[i] = <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">// Always include first 1st vertex in MST.</span>\n    key[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Make key 0 so that this vertex is</span>\n    <span class=\"hljs-comment\">// picked as first vertex</span>\n    parent[<span class=\"hljs-number\">0</span>] = -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// First node is always root of MST</span>\n\n    <span class=\"hljs-comment\">// The MST will have V vertices</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; count &lt; V - <span class=\"hljs-number\">1</span>; count++) {\n      <span class=\"hljs-comment\">// Pick thd minimum key vertex from the set of vertices</span>\n      <span class=\"hljs-comment\">// not yet included in MST</span>\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">u</span> <span class=\"hljs-operator\">=</span> minKey(key, mstSet);\n\n      <span class=\"hljs-comment\">// Add the picked vertex to the MST Set</span>\n      mstSet[u] = <span class=\"hljs-literal\">true</span>;\n\n      <span class=\"hljs-comment\">// Update key value and parent index of the adjacent</span>\n      <span class=\"hljs-comment\">// vertices of the picked vertex. Consider only those</span>\n      <span class=\"hljs-comment\">// vertices which are not yet included in MST</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; v &lt; V; v++)\n\n        <span class=\"hljs-comment\">// graph[u][v] is non zero only for adjacent vertices of m</span>\n        <span class=\"hljs-comment\">// mstSet[v] is false for vertices not yet included in MST</span>\n        <span class=\"hljs-comment\">// Update the key only if graph[u][v] is smaller than key[v]</span>\n        <span class=\"hljs-keyword\">if</span> (graph[u][v] != <span class=\"hljs-number\">0</span> &amp;&amp; mstSet[v] == <span class=\"hljs-literal\">false</span> &amp;&amp; graph[u][v] &lt; key[v]) {\n          parent[v] = u;\n          key[v] = graph[u][v];\n        }\n    }\n\n    <span class=\"hljs-comment\">// print the constructed MST</span>\n    printMST(parent, V, graph);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">/* Let us create the following graph\n       2    3\n    (0)--(1)--(2)\n    |    / \\   |\n    6| 8/   \\5 |7\n    | /      \\ |\n    (3)-------(4)\n         9          */</span>\n    <span class=\"hljs-type\">PrimMST</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PrimMST</span>();\n    <span class=\"hljs-type\">int</span> graph[][] =\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[][] {\n          {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">5</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>}, {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>},\n        };\n\n    <span class=\"hljs-comment\">// Print the solution</span>\n    t.primMST(graph);\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "cnddhks846@naver.com",
      "commits": 1
    },
    {
      "name": "sangjun2",
      "email": "sj27294626@gmail.com",
      "commits": 1
    },
    {
      "name": "Kenneth Nero",
      "email": "kbn1798@rit.edu",
      "commits": 1
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
