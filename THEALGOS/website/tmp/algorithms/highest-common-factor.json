{
  "slug": "highest-common-factor",
  "name": "Highest Common Factor",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "matlab-octave": {
      "dir": "algorithms/maths/highest_common_factor.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/maths/highest_common_factor.m",
      "code": "ffunction HCF = mini (x, y)\n<span class=\"hljs-comment\">%This function searches for highest common factor</span>\n<span class=\"hljs-comment\">%It first checks if any of the numbers equal to zero, if so the non zero number is the HCF</span>\n<span class=\"hljs-comment\">%If the numbers are different, you minus the bigger number by the smaller one and this is done by recursion. </span>\n  <span class=\"hljs-keyword\">if</span> x==<span class=\"hljs-number\">0</span>\n    HCF = y;\n  <span class=\"hljs-keyword\">elseif</span> y==<span class=\"hljs-number\">0</span>\n    HCF == x;\n  <span class=\"hljs-keyword\">elseif</span> (y == x)\n    HCF = x;\n  <span class=\"hljs-keyword\">elseif</span> (y&gt;x)\n    HCF = mini(y-x,x);\n  <span class=\"hljs-keyword\">else</span> \n    HCF = mini(x-y,y);\n  <span class=\"hljs-keyword\">end</span>\n\n"
    }
  },
  "contributors": [
    {
      "name": "Andrew",
      "email": "andrewzhang2323@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
