{
  "slug": "the-trapezium-method",
  "name": "The Trapezium Method",
  "categories": ["numericalmethods"],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The trapezium rule is a way of estimating the area under a curve. We know that the area under a curve is given by integration, so the trapezium rule gives a method of estimating integrals.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\nn = <span class=\"hljs-number\">4</span> \na = <span class=\"hljs-number\">2.</span>\nb = <span class=\"hljs-number\">3.</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-keyword\">return</span>  (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">trapezoid</span>(<span class=\"hljs-params\">a,b,n</span>):\n  z = (b-a)/n\n  i=a\n  s=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> (i+z)&amp;lt;b:\n    s=s+f(i)\n    i=i+z \n  s=z*(f(a)+f(b))/<span class=\"hljs-number\">2</span>+s\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Result: '</span>,s)\n    \ntrapezoid(a,b,n)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">22</span>.<span class=\"hljs-number\">12539445092147</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The trapezium rule is a way of estimating the area under a curve. We know that the area under a curve is given by integration, so the trapezium rule gives a method of estimating integrals.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\nn = <span class=\"hljs-number\">4</span> \na = <span class=\"hljs-number\">2.</span>\nb = <span class=\"hljs-number\">3.</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-keyword\">return</span>  (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">trapezoid</span>(<span class=\"hljs-params\">a,b,n</span>):\n  z = (b-a)/n\n  i=a\n  s=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> (i+z)&amp;lt;b:\n    s=s+f(i)\n    i=i+z \n  s=z*(f(a)+f(b))/<span class=\"hljs-number\">2</span>+s\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Result: '</span>,s)\n    \ntrapezoid(a,b,n)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">22</span>.<span class=\"hljs-number\">12539445092147</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The trapezium rule is a way of estimating the area under a curve. We know that the area under a curve is given by integration, so the trapezium rule gives a method of estimating integrals.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\nn = <span class=\"hljs-number\">4</span> \na = <span class=\"hljs-number\">2.</span>\nb = <span class=\"hljs-number\">3.</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-keyword\">return</span>  (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">trapezoid</span>(<span class=\"hljs-params\">a,b,n</span>):\n  z = (b-a)/n\n  i=a\n  s=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> (i+z)&amp;lt;b:\n    s=s+f(i)\n    i=i+z \n  s=z*(f(a)+f(b))/<span class=\"hljs-number\">2</span>+s\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Result: '</span>,s)\n    \ntrapezoid(a,b,n)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">22</span>.<span class=\"hljs-number\">12539445092147</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The trapezium rule is a way of estimating the area under a curve. We know that the area under a curve is given by integration, so the trapezium rule gives a method of estimating integrals.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\nn = <span class=\"hljs-number\">4</span> \na = <span class=\"hljs-number\">2.</span>\nb = <span class=\"hljs-number\">3.</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-keyword\">return</span>  (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">trapezoid</span>(<span class=\"hljs-params\">a,b,n</span>):\n  z = (b-a)/n\n  i=a\n  s=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> (i+z)&amp;lt;b:\n    s=s+f(i)\n    i=i+z \n  s=z*(f(a)+f(b))/<span class=\"hljs-number\">2</span>+s\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Result: '</span>,s)\n    \ntrapezoid(a,b,n)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">22</span>.<span class=\"hljs-number\">12539445092147</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The trapezium rule is a way of estimating the area under a curve. We know that the area under a curve is given by integration, so the trapezium rule gives a method of estimating integrals.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\nn = <span class=\"hljs-number\">4</span> \na = <span class=\"hljs-number\">2.</span>\nb = <span class=\"hljs-number\">3.</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-keyword\">return</span>  (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">trapezoid</span>(<span class=\"hljs-params\">a,b,n</span>):\n  z = (b-a)/n\n  i=a\n  s=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> (i+z)&amp;lt;b:\n    s=s+f(i)\n    i=i+z \n  s=z*(f(a)+f(b))/<span class=\"hljs-number\">2</span>+s\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Result: '</span>,s)\n    \ntrapezoid(a,b,n)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">22</span>.<span class=\"hljs-number\">12539445092147</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>The trapezium rule is a way of estimating the area under a curve. We know that the area under a curve is given by integration, so the trapezium rule gives a method of estimating integrals.</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\nn = <span class=\"hljs-number\">4</span> \na = <span class=\"hljs-number\">2.</span>\nb = <span class=\"hljs-number\">3.</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x</span>):\n    <span class=\"hljs-keyword\">return</span>  (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">trapezoid</span>(<span class=\"hljs-params\">a,b,n</span>):\n  z = (b-a)/n\n  i=a\n  s=<span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> (i+z)&amp;lt;b:\n    s=s+f(i)\n    i=i+z \n  s=z*(f(a)+f(b))/<span class=\"hljs-number\">2</span>+s\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Result: '</span>,s)\n    \ntrapezoid(a,b,n)</code></pre></div><div class=\"nb-output\" data-prompt-number=\"1\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">22</span>.<span class=\"hljs-number\">12539445092147</span>\n</pre></div></div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"></code></pre></div></div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "numerical_methods/the_trapezium_method.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/numerical_methods/the_trapezium_method.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;The trapezium rule is a way of estimating the area under a curve. We know that the area under a curve is given by integration, so the trapezium rule gives a method of estimating integrals.&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;Let&#x27;s check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\\\varepsilon = 0.001$&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-string\">&quot;Result:  -22.12539445092147\\n&quot;</span>\n     <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;import math \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;import numpy as np\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;n = 4 \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;a = 2.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;b = 3.\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def f(x):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return  (math.e**x / 2)*(math.cos(x)-math.sin(x))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def trapezoid(a,b,n):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;  z = (b-a)/n\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;  i=a\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;  s=0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;  while (i+z)&lt;b:\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    s=s+f(i)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    i=i+z \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;  s=z*(f(a)+f(b))/2+s\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;  print(&#x27;Result: &#x27;,s)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;trapezoid(a,b,n)&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">null</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;language&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.7.6&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-punctuation\">}</span>\n"
    }
  },
  "contributors": [
    {
      "name": "CheshirLvova",
      "email": "ksoovnaila@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
