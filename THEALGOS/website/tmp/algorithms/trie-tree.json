{
  "slug": "trie-tree",
  "name": "Trie Tree",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/trie_tree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/trie_tree.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [@Arctic2333](https://github.com/Arctic2333)\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @brief Implementation of [Trie](https://en.wikipedia.org/wiki/Trie) data\n * structure for English alphabets in small characters.\n * @note the function ::data_structure::trie::deleteString might be erroneous\n * @see trie_modern.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/** \\namespace data_structures\n * \\brief Data-structure algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> data_structures {\n<span class=\"hljs-comment\">/**\n * @brief [Trie](https://en.wikipedia.org/wiki/Trie) implementation for\n * small-case English alphabets `a-z`\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">trie</span> {\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-type\">uint8_t</span> NUM_CHARS = <span class=\"hljs-number\">26</span>;  <span class=\"hljs-comment\">///&lt; Number of alphabets</span>\n    <span class=\"hljs-comment\">/** @brief Recursive tree nodes as an array of shared-pointers */</span>\n    std::array&lt;std::shared_ptr&lt;trie&gt;, NUM_CHARS &lt;&lt; <span class=\"hljs-number\">1</span>&gt; arr;\n    <span class=\"hljs-type\">bool</span> isEndofWord = <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">///&lt; identifier if a node is terminal node</span>\n\n    <span class=\"hljs-comment\">/**\n     * @brief Convert a character to integer for indexing\n     *\n     * @param ch character to index\n     * @return unsigned integer index\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">uint8_t</span> <span class=\"hljs-title\">char_to_int</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>&amp; ch)</span> <span class=\"hljs-keyword\">const</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (ch &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\n            <span class=\"hljs-keyword\">return</span> ch - <span class=\"hljs-string\">&#x27;A&#x27;</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ch &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class=\"hljs-string\">&#x27;z&#x27;</span>) {\n            <span class=\"hljs-keyword\">return</span> ch - <span class=\"hljs-string\">&#x27;a&#x27;</span> + NUM_CHARS;\n        }\n\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Invalid character present. Exiting...&quot;</span>;\n        std::<span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/** search a string exists inside a given root trie\n     * @param str string to search for\n     * @param index start index to search from\n     * @returns `true` if found\n     * @returns `false` if not found\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::shared_ptr&lt;trie&gt;&amp; root, <span class=\"hljs-keyword\">const</span> std::string&amp; str,\n                <span class=\"hljs-type\">int</span> index)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (index == str.<span class=\"hljs-built_in\">length</span>()) {\n            <span class=\"hljs-keyword\">if</span> (!root-&gt;isEndofWord) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-built_in\">char_to_int</span>(str[index]);\n        <span class=\"hljs-keyword\">if</span> (!root-&gt;arr[j]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">search</span>(root-&gt;arr[j], str, index + <span class=\"hljs-number\">1</span>);\n    }\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-built_in\">trie</span>() = <span class=\"hljs-keyword\">default</span>;  <span class=\"hljs-comment\">///&lt; Class default constructor</span>\n\n    <span class=\"hljs-comment\">/** insert string into the trie\n     * @param str String to insert in the tree\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string&amp; str)</span> </span>{\n        <span class=\"hljs-function\">std::shared_ptr&lt;trie&gt; <span class=\"hljs-title\">root</span><span class=\"hljs-params\">(<span class=\"hljs-literal\">nullptr</span>)</span></span>;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>&amp; ch : str) {\n            <span class=\"hljs-type\">int</span> j = <span class=\"hljs-built_in\">char_to_int</span>(ch);\n            <span class=\"hljs-keyword\">if</span> (root) {\n                <span class=\"hljs-keyword\">if</span> (root-&gt;arr[j]) {\n                    root = root-&gt;arr[j];\n                } <span class=\"hljs-keyword\">else</span> {\n                    std::shared_ptr&lt;trie&gt; <span class=\"hljs-built_in\">temp</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">trie</span>());\n                    root-&gt;arr[j] = temp;\n                    root = temp;\n                }\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[j]) {\n                root = arr[j];\n            } <span class=\"hljs-keyword\">else</span> {\n                std::shared_ptr&lt;trie&gt; <span class=\"hljs-built_in\">temp</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">trie</span>());\n                arr[j] = temp;\n                root = temp;\n            }\n        }\n        root-&gt;isEndofWord = <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-comment\">/** search a string exists inside the trie\n     * @param str string to search for\n     * @param index start index to search from\n     * @returns `true` if found\n     * @returns `false` if not found\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string&amp; str, <span class=\"hljs-type\">int</span> index)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (index == str.<span class=\"hljs-built_in\">length</span>()) {\n            <span class=\"hljs-keyword\">if</span> (!isEndofWord) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-built_in\">char_to_int</span>(str[index]);\n        <span class=\"hljs-keyword\">if</span> (!arr[j]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">search</span>(arr[j], str, index + <span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * removes the string if it is not a prefix of any  other\n     * string, if it is then just sets the ::data_structure::trie::isEndofWord\n     * to false, else removes the given string\n     * @note the function ::data_structure::trie::deleteString might be\n     * erroneous\n     * @todo review the function ::data_structure::trie::deleteString and the\n     * commented lines\n     * @param str string to remove\n     * @param index index to remove from\n     * @returns `true` if successful\n     * @returns `false` if unsuccessful\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">deleteString</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string&amp; str, <span class=\"hljs-type\">int</span> index)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (index == str.<span class=\"hljs-built_in\">length</span>()) {\n            <span class=\"hljs-keyword\">if</span> (!isEndofWord) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            isEndofWord = <span class=\"hljs-literal\">false</span>;\n            <span class=\"hljs-comment\">// following lines - possible source of error?</span>\n            <span class=\"hljs-comment\">// for (int i = 0; i &lt; NUM_CHARS; i++)</span>\n            <span class=\"hljs-comment\">//     if (!arr[i])</span>\n            <span class=\"hljs-comment\">//         return false;</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-type\">int</span> j = <span class=\"hljs-built_in\">char_to_int</span>(str[index]);\n        <span class=\"hljs-keyword\">if</span> (!arr[j]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-type\">bool</span> var = <span class=\"hljs-built_in\">deleteString</span>(str, index + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">if</span> (var) {\n            arr[j].<span class=\"hljs-built_in\">reset</span>();\n            <span class=\"hljs-keyword\">if</span> (isEndofWord) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; NUM_CHARS; i++) {\n                    <span class=\"hljs-keyword\">if</span> (arr[i]) {\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                    }\n                }\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n\n        <span class=\"hljs-comment\">/* should not return here */</span>\n        std::cout &lt;&lt; __func__ &lt;&lt; <span class=\"hljs-string\">&quot;:&quot;</span> &lt;&lt; __LINE__\n                  &lt;&lt; <span class=\"hljs-string\">&quot;Should not reach this line\\n&quot;</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n};\n}  <span class=\"hljs-comment\">// namespace data_structures</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Testing function\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    data_structures::trie root;\n    root.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>);\n    root.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-string\">&quot;World&quot;</span>);\n\n    <span class=\"hljs-built_in\">assert</span>(!root.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>, <span class=\"hljs-number\">0</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;hello - &quot;</span> &lt;&lt; root.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>, <span class=\"hljs-number\">0</span>) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-built_in\">assert</span>(root.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-number\">0</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hello - &quot;</span> &lt;&lt; root.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>, <span class=\"hljs-number\">0</span>) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-built_in\">assert</span>(!root.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;Word&quot;</span>, <span class=\"hljs-number\">0</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Word - &quot;</span> &lt;&lt; root.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;Word&quot;</span>, <span class=\"hljs-number\">0</span>) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-built_in\">assert</span>(root.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;World&quot;</span>, <span class=\"hljs-number\">0</span>));\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;World - &quot;</span> &lt;&lt; root.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;World&quot;</span>, <span class=\"hljs-number\">0</span>) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-comment\">// Following lines of code give erroneous output</span>\n    <span class=\"hljs-comment\">// root.deleteString(&quot;hello&quot;, 0);</span>\n    <span class=\"hljs-comment\">// assert(!root.search(&quot;hello&quot;, 0));</span>\n    <span class=\"hljs-comment\">// std::cout &lt;&lt; &quot;hello - &quot; &lt;&lt; root.search(&quot;world&quot;, 0) &lt;&lt; &quot;\\n&quot;;</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @return 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "苏淞丰",
      "email": "50102735+Arctic2333@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shubhamguptaji",
      "email": "shubham2604gupta@gmail.com",
      "commits": 2
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
