{
  "slug": "gauss-jordan-elimination",
  "name": "Gauss-Jordan Elimination",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Numeric/GaussJordanElimination.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Numeric/GaussJordanElimination.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GaussJordanElimination</span>\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> RowCount { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Method to find a linear equation system using gaussian elimination.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;matrix&quot;&gt;</span>The key matrix to solve via algorithm.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     whether the input matrix has a unique solution or not.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     and solves on the given matrix.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Solve</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[,] matrix</span>)</span>\n        {\n            RowCount = matrix.GetUpperBound(<span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-keyword\">if</span> (!CanMatrixBeUsed(matrix))\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">&quot;Please use a n*(n+1) matrix with Length &gt; 0.&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> pivot = PivotMatrix(<span class=\"hljs-keyword\">ref</span> matrix);\n            <span class=\"hljs-keyword\">if</span> (!pivot)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n\n            Elimination(<span class=\"hljs-keyword\">ref</span> matrix);\n\n            <span class=\"hljs-keyword\">return</span> ElementaryReduction(<span class=\"hljs-keyword\">ref</span> matrix);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To make simple validation of the matrix to be used.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;matrix&quot;&gt;</span>Multidimensional array matrix.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     True: if algorithm can be use for given matrix;</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     False: Otherwise.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">CanMatrixBeUsed</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span>[,] matrix</span>)</span> =&gt; matrix?.Length == RowCount * (RowCount + <span class=\"hljs-number\">1</span>) &amp;&amp; RowCount &gt; <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To prepare given matrix by pivoting rows.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;matrix&quot;&gt;</span>Input matrix.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Matrix.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">PivotMatrix</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">double</span>[,] matrix</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> col = <span class=\"hljs-number\">0</span>; col + <span class=\"hljs-number\">1</span> &lt; RowCount; col++)\n            {\n                <span class=\"hljs-keyword\">if</span> (matrix[col, col] == <span class=\"hljs-number\">0</span>)\n                {\n                    <span class=\"hljs-comment\">// To find a non-zero coefficient</span>\n                    <span class=\"hljs-keyword\">var</span> rowToSwap = FindNonZeroCoefficient(<span class=\"hljs-keyword\">ref</span> matrix, col);\n\n                    <span class=\"hljs-keyword\">if</span> (matrix[rowToSwap, col] != <span class=\"hljs-number\">0</span>)\n                    {\n                        <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">double</span>[RowCount + <span class=\"hljs-number\">1</span>];\n                        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; RowCount + <span class=\"hljs-number\">1</span>; i++)\n                        {\n                            <span class=\"hljs-comment\">// To make the swap with the element above.</span>\n                            tmp[i] = matrix[rowToSwap, i];\n                            matrix[rowToSwap, i] = matrix[col, i];\n                            matrix[col, i] = tmp[i];\n                        }\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        <span class=\"hljs-comment\">// To return that the matrix doesn&#x27;t have a unique solution.</span>\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                    }\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">FindNonZeroCoefficient</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">double</span>[,] matrix, <span class=\"hljs-built_in\">int</span> col</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> rowToSwap = col + <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-comment\">// To find a non-zero coefficient</span>\n            <span class=\"hljs-keyword\">for</span> (; rowToSwap &lt; RowCount; rowToSwap++)\n            {\n                <span class=\"hljs-keyword\">if</span> (matrix[rowToSwap, col] != <span class=\"hljs-number\">0</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> rowToSwap;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> col + <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Applies REF.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;matrix&quot;&gt;</span>Input matrix.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Elimination</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">double</span>[,] matrix</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> srcRow = <span class=\"hljs-number\">0</span>; srcRow + <span class=\"hljs-number\">1</span> &lt; RowCount; srcRow++)\n            {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> destRow = srcRow + <span class=\"hljs-number\">1</span>; destRow &lt; RowCount; destRow++)\n                {\n                    <span class=\"hljs-keyword\">var</span> df = matrix[srcRow, srcRow];\n                    <span class=\"hljs-keyword\">var</span> sf = matrix[destRow, srcRow];\n\n                    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; RowCount + <span class=\"hljs-number\">1</span>; i++)\n                    {\n                        matrix[destRow, i] = matrix[destRow, i] * df - matrix[srcRow, i] * sf;\n                    }\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To continue reducing the matrix using RREF.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;matrix&quot;&gt;</span>Input matrix.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>True if it has a unique solution; false otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">ElementaryReduction</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">ref</span> <span class=\"hljs-built_in\">double</span>[,] matrix</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> row = RowCount - <span class=\"hljs-number\">1</span>; row &gt;= <span class=\"hljs-number\">0</span>; row--)\n            {\n                <span class=\"hljs-keyword\">var</span> element = matrix[row, row];\n                <span class=\"hljs-keyword\">if</span> (element == <span class=\"hljs-number\">0</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                }\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; RowCount + <span class=\"hljs-number\">1</span>; i++)\n                {\n                    matrix[row, i] /= element;\n                }\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> destRow = <span class=\"hljs-number\">0</span>; destRow &lt; row; destRow++)\n                {\n                    matrix[destRow, RowCount] -= matrix[destRow, row] * matrix[row, RowCount];\n                    matrix[destRow, row] = <span class=\"hljs-number\">0</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
