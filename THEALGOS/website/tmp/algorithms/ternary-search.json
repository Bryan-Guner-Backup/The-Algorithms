{
  "slug": "ternary-search",
  "name": "Ternary Search",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "searches/ternary_search.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/searches/ternary_search.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is a type of divide and conquer algorithm which divides the search space into\n3 parts and finds the target value based on the property of the array or list\n(usually monotonic property).\n\nTime Complexity  : O(log3 N)\nSpace Complexity : O(1)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n<span class=\"hljs-comment\"># This is the precision for this function which can be altered.</span>\n<span class=\"hljs-comment\"># It is recommended for users to keep this number greater than or equal to 10.</span>\nprecision = <span class=\"hljs-number\">10</span>\n\n\n<span class=\"hljs-comment\"># This is the linear search that will occur after the search space has become smaller.</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">lin_search</span>(<span class=\"hljs-params\">left: <span class=\"hljs-built_in\">int</span>, right: <span class=\"hljs-built_in\">int</span>, array: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Perform linear search in list. Returns -1 if element is not found.\n\n    Parameters\n    ----------\n    left : int\n        left index bound.\n    right : int\n        right index bound.\n    array : List[int]\n        List of elements to be searched on\n    target : int\n        Element that is searched\n\n    Returns\n    -------\n    int\n        index of element that is looked for.\n\n    Examples\n    --------\n    &gt;&gt;&gt; lin_search(0, 4, [4, 5, 6, 7], 7)\n    3\n    &gt;&gt;&gt; lin_search(0, 3, [4, 5, 6, 7], 7)\n    -1\n    &gt;&gt;&gt; lin_search(0, 2, [-18, 2], -18)\n    0\n    &gt;&gt;&gt; lin_search(0, 1, [5], 5)\n    0\n    &gt;&gt;&gt; lin_search(0, 3, [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;c&#x27;)\n    1\n    &gt;&gt;&gt; lin_search(0, 3, [.1, .4 , -.1], .1)\n    0\n    &gt;&gt;&gt; lin_search(0, 3, [.1, .4 , -.1], -.1)\n    2\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(left, right):\n        <span class=\"hljs-keyword\">if</span> array[i] == target:\n            <span class=\"hljs-keyword\">return</span> i\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">ite_ternary_search</span>(<span class=\"hljs-params\">array: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Iterative method of the ternary search algorithm.\n    &gt;&gt;&gt; test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]\n    &gt;&gt;&gt; ite_ternary_search(test_list, 3)\n    -1\n    &gt;&gt;&gt; ite_ternary_search(test_list, 13)\n    4\n    &gt;&gt;&gt; ite_ternary_search([4, 5, 6, 7], 4)\n    0\n    &gt;&gt;&gt; ite_ternary_search([4, 5, 6, 7], -10)\n    -1\n    &gt;&gt;&gt; ite_ternary_search([-18, 2], -18)\n    0\n    &gt;&gt;&gt; ite_ternary_search([5], 5)\n    0\n    &gt;&gt;&gt; ite_ternary_search([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;c&#x27;)\n    1\n    &gt;&gt;&gt; ite_ternary_search([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;f&#x27;)\n    -1\n    &gt;&gt;&gt; ite_ternary_search([], 1)\n    -1\n    &gt;&gt;&gt; ite_ternary_search([.1, .4 , -.1], .1)\n    0\n    &quot;&quot;&quot;</span>\n\n    left = <span class=\"hljs-number\">0</span>\n    right = <span class=\"hljs-built_in\">len</span>(array)\n    <span class=\"hljs-keyword\">while</span> left &lt;= right:\n        <span class=\"hljs-keyword\">if</span> right - left &lt; precision:\n            <span class=\"hljs-keyword\">return</span> lin_search(left, right, array, target)\n\n        one_third = (left + right) / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>\n        two_third = <span class=\"hljs-number\">2</span> * (left + right) / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> array[one_third] == target:\n            <span class=\"hljs-keyword\">return</span> one_third\n        <span class=\"hljs-keyword\">elif</span> array[two_third] == target:\n            <span class=\"hljs-keyword\">return</span> two_third\n\n        <span class=\"hljs-keyword\">elif</span> target &lt; array[one_third]:\n            right = one_third - <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">elif</span> array[two_third] &lt; target:\n            left = two_third + <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">else</span>:\n\n            left = one_third + <span class=\"hljs-number\">1</span>\n            right = two_third - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rec_ternary_search</span>(<span class=\"hljs-params\">left: <span class=\"hljs-built_in\">int</span>, right: <span class=\"hljs-built_in\">int</span>, array: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Recursive method of the ternary search algorithm.\n\n    &gt;&gt;&gt; test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42]\n    &gt;&gt;&gt; rec_ternary_search(0, len(test_list), test_list, 3)\n    -1\n    &gt;&gt;&gt; rec_ternary_search(4, len(test_list), test_list, 42)\n    8\n    &gt;&gt;&gt; rec_ternary_search(0, 2, [4, 5, 6, 7], 4)\n    0\n    &gt;&gt;&gt; rec_ternary_search(0, 3, [4, 5, 6, 7], -10)\n    -1\n    &gt;&gt;&gt; rec_ternary_search(0, 1, [-18, 2], -18)\n    0\n    &gt;&gt;&gt; rec_ternary_search(0, 1, [5], 5)\n    0\n    &gt;&gt;&gt; rec_ternary_search(0, 2, [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;c&#x27;)\n    1\n    &gt;&gt;&gt; rec_ternary_search(0, 2, [&#x27;a&#x27;, &#x27;c&#x27;, &#x27;d&#x27;], &#x27;f&#x27;)\n    -1\n    &gt;&gt;&gt; rec_ternary_search(0, 0, [], 1)\n    -1\n    &gt;&gt;&gt; rec_ternary_search(0, 3, [.1, .4 , -.1], .1)\n    0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> left &lt; right:\n        <span class=\"hljs-keyword\">if</span> right - left &lt; precision:\n            <span class=\"hljs-keyword\">return</span> lin_search(left, right, array, target)\n        one_third = (left + right) / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>\n        two_third = <span class=\"hljs-number\">2</span> * (left + right) / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">if</span> array[one_third] == target:\n            <span class=\"hljs-keyword\">return</span> one_third\n        <span class=\"hljs-keyword\">elif</span> array[two_third] == target:\n            <span class=\"hljs-keyword\">return</span> two_third\n\n        <span class=\"hljs-keyword\">elif</span> target &lt; array[one_third]:\n            <span class=\"hljs-keyword\">return</span> rec_ternary_search(left, one_third - <span class=\"hljs-number\">1</span>, array, target)\n        <span class=\"hljs-keyword\">elif</span> array[two_third] &lt; target:\n            <span class=\"hljs-keyword\">return</span> rec_ternary_search(two_third + <span class=\"hljs-number\">1</span>, right, array, target)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> rec_ternary_search(one_third + <span class=\"hljs-number\">1</span>, two_third - <span class=\"hljs-number\">1</span>, array, target)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by comma:\\n&quot;</span>).strip()\n    collection = [<span class=\"hljs-built_in\">int</span>(item.strip()) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-keyword\">assert</span> collection == <span class=\"hljs-built_in\">sorted</span>(collection), <span class=\"hljs-string\">f&quot;List must be ordered.\\n<span class=\"hljs-subst\">{collection}</span>.&quot;</span>\n    target = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the number to be found in the list:\\n&quot;</span>).strip())\n    result1 = ite_ternary_search(collection, target)\n    result2 = rec_ternary_search(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(collection) - <span class=\"hljs-number\">1</span>, collection, target)\n    <span class=\"hljs-keyword\">if</span> result2 != -<span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Iterative search: <span class=\"hljs-subst\">{target}</span> found at positions: <span class=\"hljs-subst\">{result1}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Recursive search: <span class=\"hljs-subst\">{target}</span> found at positions: <span class=\"hljs-subst\">{result2}</span>&quot;</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Not found&quot;</span>)\n"
    },
    "javascript": {
      "dir": "Search/TernarySearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search/TernarySearch.js",
      "code": "<span class=\"hljs-comment\">/* Ternary search is similar to binary search but it divide the sorted array\n * into three parts and determine which part the key lies in. The array will\n * be divided into three intervals by using two middle points, mid1 and mid2.\n * The value of the key will first compared with the two mid points, the value\n * will be returned if there is a match. Then, if the value of the key is less\n * than mid1, narrow the interval to the first part. Else, if the value of the\n * key is greater than mid2, narrow the interval to the third part. Otherwise,\n * narrow the interval to the middle part. Repeat the steps until the value is\n * found or the interval is empty(value not found after checking all elements).\n *\n * Reference: https://www.geeksforgeeks.org/ternary-search/\n */</span>\n\n<span class=\"hljs-comment\">/*\n*  Doctests\n*\n*  &gt; ternarySearchRecursive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n*  2\n*  &gt; ternarySearchIterative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8)\n*  7\n*  &gt; ternarySearchRecursive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0)\n*  -1\n*  &gt; ternarySearchIterative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 12)\n*  -1\n*  &gt; ternarySearchRecursive([&quot;Ali&quot;, &quot;Cathrynli&quot;, &quot;Josuke&quot;, &quot;Thomas&quot;], &quot;Cathrynli&quot;)\n*  1\n*  &gt; ternarySearchRecursive([&quot;Ali&quot;, &quot;Cathrynli&quot;, &quot;Josuke&quot;, &quot;Thomas&quot;], &quot;Josuke&quot;)\n*  2\n*  &gt; ternarySearchRecursive([&quot;Ali&quot;, &quot;Cathrynli&quot;, &quot;Josuke&quot;, &quot;Thomas&quot;], &quot;Angela&quot;)\n*  -1\n*/</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ternarySearchRecursive</span> (arr, key, low = <span class=\"hljs-number\">0</span>, high = arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) {\n  <span class=\"hljs-keyword\">if</span> (high &gt;= low) {\n    <span class=\"hljs-comment\">// find the mid1 and mid2</span>\n    <span class=\"hljs-keyword\">const</span> mid1 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(low + (high - low) / <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-keyword\">const</span> mid2 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(high - (high - low) / <span class=\"hljs-number\">3</span>)\n\n    <span class=\"hljs-comment\">// check if key is found at any mid</span>\n    <span class=\"hljs-keyword\">if</span> (arr[mid1] === key) {\n      <span class=\"hljs-comment\">// return index of key if found</span>\n      <span class=\"hljs-keyword\">return</span> mid1\n    }\n    <span class=\"hljs-keyword\">if</span> (arr[mid2] === key) {\n      <span class=\"hljs-comment\">// return index of key if found</span>\n      <span class=\"hljs-keyword\">return</span> mid2\n    }\n\n    <span class=\"hljs-comment\">// since the key is not found at mid,</span>\n    <span class=\"hljs-comment\">// check in which region it is present</span>\n    <span class=\"hljs-comment\">// and repeat the Search operation</span>\n    <span class=\"hljs-comment\">// in that region</span>\n    <span class=\"hljs-keyword\">if</span> (key &lt; arr[mid1]) {\n      <span class=\"hljs-comment\">// the key lies in between low and mid1</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">ternarySearchRecursive</span>(arr, key, low, mid1 - <span class=\"hljs-number\">1</span>)\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &gt; arr[mid2]) {\n      <span class=\"hljs-comment\">// the key lies in between mid2 and high</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">ternarySearchRecursive</span>(arr, key, mid2 + <span class=\"hljs-number\">1</span>, high)\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// the key lies in between mid1 and mid2</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">ternarySearchRecursive</span>(arr, key, mid1 + <span class=\"hljs-number\">1</span>, mid2 - <span class=\"hljs-number\">1</span>)\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// if low &gt; high =&gt; we have searched the whole array without finding the item</span>\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n  }\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ternarySearchIterative</span> (arr, key, low = <span class=\"hljs-number\">0</span>, high = arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>) {\n  <span class=\"hljs-keyword\">while</span> (high &gt;= low) {\n    <span class=\"hljs-comment\">// find the mid1 and mid2</span>\n    <span class=\"hljs-keyword\">const</span> mid1 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(low + (high - low) / <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-keyword\">const</span> mid2 = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(high - (high - low) / <span class=\"hljs-number\">3</span>)\n\n    <span class=\"hljs-comment\">// check if key is found at any mid</span>\n    <span class=\"hljs-keyword\">if</span> (arr[mid1] === key) {\n      <span class=\"hljs-comment\">// return index of key if found</span>\n      <span class=\"hljs-keyword\">return</span> mid1\n    }\n    <span class=\"hljs-keyword\">if</span> (arr[mid2] === key) {\n      <span class=\"hljs-comment\">// return index of key if found</span>\n      <span class=\"hljs-keyword\">return</span> mid2\n    }\n\n    <span class=\"hljs-comment\">// since the key is not found at mid,</span>\n    <span class=\"hljs-comment\">// check in which region it is present</span>\n    <span class=\"hljs-comment\">// and repeat the Search operation</span>\n    <span class=\"hljs-comment\">// in that region</span>\n    <span class=\"hljs-keyword\">if</span> (key &lt; arr[mid1]) {\n      <span class=\"hljs-comment\">// the key lies in between low and mid1</span>\n      high = mid1 - <span class=\"hljs-number\">1</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &gt; arr[mid2]) {\n      <span class=\"hljs-comment\">// the key lies in between mid2 and high</span>\n      low = mid2 + <span class=\"hljs-number\">1</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// the key lies in between mid1 and mid2</span>\n      low = mid1 + <span class=\"hljs-number\">1</span>\n      high = mid2 - <span class=\"hljs-number\">1</span>\n    }\n  }\n  <span class=\"hljs-comment\">// the key was not found</span>\n  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n}\n\n<span class=\"hljs-keyword\">export</span> { ternarySearchRecursive, ternarySearchIterative }\n"
    },
    "c-plus-plus": {
      "dir": "search/ternary_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search/ternary_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief [Ternary search](https://en.wikipedia.org/wiki/Ternary_search)\n * algorithm\n *\n * This is a divide and conquer algorithm.\n * It does this by dividing the search space by 3 parts and\n * using its property (usually monotonic property) to find\n * the desired index.\n *\n * * Time Complexity : O(log3 n)\n * * Space Complexity : O(1) (without the array)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * The absolutePrecision can be modified to fit preference but\n * it is recommended to not go lower than 10 due to errors that\n * may occur.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> absolutePrecision 10</span>\n<span class=\"hljs-comment\">/**\n * The value of _target should be decided or can be decided later\n * by using the variable of the function.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _target 10</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 10000000  <span class=\"hljs-comment\">///&lt; Maximum length of array</span></span>\n\n<span class=\"hljs-comment\">/**\n * get_input function is to receive input from standard IO\n * @todo @christianbender Get input from STDIO or write input to memory as done\n * above.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">get_input</span><span class=\"hljs-params\">()</span> </span>{}\n\n<span class=\"hljs-comment\">/**\n * This is the iterative method of the ternary search which returns the index of\n * the element.\n * \\param[in] left lower interval limit\n * \\param[in] right upper interval limit\n * \\param[in] A array to search in\n * \\param[in] target value to search for\n * \\returns index where the target value was found\n * \\returns -1 if target value not found\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">it_ternary_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right, <span class=\"hljs-type\">int</span> A[], <span class=\"hljs-type\">int</span> target)</span> </span>{\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">if</span> (left &lt; right) {\n            <span class=\"hljs-keyword\">if</span> (right - left &lt; absolutePrecision) {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = left; i &lt;= right; i++)\n                    <span class=\"hljs-keyword\">if</span> (A[i] == target)\n                        <span class=\"hljs-keyword\">return</span> i;\n\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n            }\n\n            <span class=\"hljs-type\">int</span> oneThird = (left + right) / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-type\">int</span> twoThird = (left + right) * <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-keyword\">if</span> (A[oneThird] == target)\n                <span class=\"hljs-keyword\">return</span> oneThird;\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (A[twoThird] == target)\n                <span class=\"hljs-keyword\">return</span> twoThird;\n\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target &gt; A[twoThird])\n                left = twoThird + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (target &lt; A[oneThird])\n                right = oneThird - <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-keyword\">else</span>\n                left = oneThird + <span class=\"hljs-number\">1</span>, right = twoThird - <span class=\"hljs-number\">1</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * This is the recursive method of the ternary search which returns the index of\n * the element.\n * \\param[in] left lower interval limit\n * \\param[in] right upper interval limit\n * \\param[in] A array to search in\n * \\param[in] target value to search for\n * \\returns index where the target value was found\n * \\returns -1 if target value not found\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">rec_ternary_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right, <span class=\"hljs-type\">int</span> A[], <span class=\"hljs-type\">int</span> target)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (left &lt; right) {\n        <span class=\"hljs-keyword\">if</span> (right - left &lt; absolutePrecision) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = left; i &lt;= right; i++)\n                <span class=\"hljs-keyword\">if</span> (A[i] == target)\n                    <span class=\"hljs-keyword\">return</span> i;\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n\n        <span class=\"hljs-type\">int</span> oneThird = (left + right) / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-type\">int</span> twoThird = (left + right) * <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">if</span> (A[oneThird] == target)\n            <span class=\"hljs-keyword\">return</span> oneThird;\n        <span class=\"hljs-keyword\">if</span> (A[twoThird] == target)\n            <span class=\"hljs-keyword\">return</span> twoThird;\n\n        <span class=\"hljs-keyword\">if</span> (target &lt; A[oneThird])\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">rec_ternary_search</span>(left, oneThird - <span class=\"hljs-number\">1</span>, A, target);\n        <span class=\"hljs-keyword\">if</span> (target &gt; A[twoThird])\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">rec_ternary_search</span>(twoThird + <span class=\"hljs-number\">1</span>, right, A, target);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">rec_ternary_search</span>(oneThird + <span class=\"hljs-number\">1</span>, twoThird - <span class=\"hljs-number\">1</span>, A, target);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * ternary_search is a template function\n * You could either use it_ternary_search or rec_ternary_search according to\n * preference.\n * \\param [in] N length of array\n * \\param[in] A array to search in\n * \\param[in] target value to search for\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">ternary_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> N, <span class=\"hljs-type\">int</span> A[], <span class=\"hljs-type\">int</span> target)</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-built_in\">it_ternary_search</span>(<span class=\"hljs-number\">0</span>, N - <span class=\"hljs-number\">1</span>, A, target) &lt;&lt; <span class=\"hljs-string\">&#x27;\\t&#x27;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-built_in\">rec_ternary_search</span>(<span class=\"hljs-number\">0</span>, N - <span class=\"hljs-number\">1</span>, A, target) &lt;&lt; <span class=\"hljs-string\">&#x27;\\t&#x27;</span>;\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> N = <span class=\"hljs-number\">21</span>;\n    <span class=\"hljs-type\">int</span> A[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>};\n    <span class=\"hljs-built_in\">get_input</span>();\n    <span class=\"hljs-built_in\">ternary_search</span>(N, A, _target);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Searches/TernarySearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Searches/TernarySearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> Searches;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.String.format;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n<span class=\"hljs-keyword\">import</span> java.util.stream.Stream;\n\n<span class=\"hljs-comment\">/**\n * A ternary search algorithm is a technique in computer science for finding the minimum or maximum\n * of a unimodal function The algorithm determines either that the minimum or maximum cannot be in\n * the first third of the domain or that it cannot be in the last third of the domain, then repeats\n * on the remaining third.\n *\n * &lt;p&gt;Worst-case performance Θ(log3(N)) Best-case performance O(1) Average performance Θ(log3(N))\n * Worst-case space complexity O(1)\n *\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\n * <span class=\"hljs-doctag\">@see</span> SearchAlgorithm\n * <span class=\"hljs-doctag\">@see</span> IterativeBinarySearch\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TernarySearch</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> arr The **Sorted** array in which we will search the element.\n   * <span class=\"hljs-doctag\">@param</span> value The value that we want to search for.\n   * <span class=\"hljs-doctag\">@return</span> The index of the element if found. Else returns -1.\n   */</span>\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] arr, T value)</span> {\n    <span class=\"hljs-keyword\">return</span> ternarySearch(arr, value, <span class=\"hljs-number\">0</span>, arr.length - <span class=\"hljs-number\">1</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> arr The **Sorted** array in which we will search the element.\n   * <span class=\"hljs-doctag\">@param</span> key The value that we want to search for.\n   * <span class=\"hljs-doctag\">@param</span> start The starting index from which we will start Searching.\n   * <span class=\"hljs-doctag\">@param</span> end The ending index till which we will Search.\n   * <span class=\"hljs-doctag\">@return</span> Returns the index of the Element if found. Else returns -1.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">ternarySearch</span><span class=\"hljs-params\">(T[] arr, T key, <span class=\"hljs-type\">int</span> start, <span class=\"hljs-type\">int</span> end)</span> {\n    <span class=\"hljs-keyword\">if</span> (start &gt; end) {\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-comment\">/* First boundary: add 1/3 of length to start */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid1</span> <span class=\"hljs-operator\">=</span> start + (end - start) / <span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-comment\">/* Second boundary: add 2/3 of length to start */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mid2</span> <span class=\"hljs-operator\">=</span> start + <span class=\"hljs-number\">2</span> * (end - start) / <span class=\"hljs-number\">3</span>;\n\n    <span class=\"hljs-keyword\">if</span> (key.compareTo(arr[mid1]) == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> mid1;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.compareTo(arr[mid2]) == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> mid2;\n    }\n\n    <span class=\"hljs-comment\">/* Search the first (1/3) rd part of the array.*/</span>\n\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.compareTo(arr[mid1]) &lt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> ternarySearch(arr, key, start, --mid1);\n    }\n    <span class=\"hljs-comment\">/* Search 3rd (1/3)rd part of the array */</span>\n\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key.compareTo(arr[mid2]) &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> ternarySearch(arr, key, ++mid2, end);\n    }\n    <span class=\"hljs-comment\">/* Search middle (1/3)rd part of the array */</span>\n\n    <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> ternarySearch(arr, key, mid1, mid2);\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// just generate data</span>\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100000</span>;\n    Integer[] integers =\n        Stream.generate(() -&gt; r.nextInt(maxElement)).limit(size).sorted().toArray(Integer[]::<span class=\"hljs-keyword\">new</span>);\n\n    <span class=\"hljs-comment\">// the element that should be found</span>\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">shouldBeFound</span> <span class=\"hljs-operator\">=</span> integers[r.nextInt(size - <span class=\"hljs-number\">1</span>)];\n\n    <span class=\"hljs-type\">TernarySearch</span> <span class=\"hljs-variable\">search</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TernarySearch</span>();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> search.find(integers, shouldBeFound);\n\n    System.out.println(\n        format(\n            <span class=\"hljs-string\">&quot;Should be found: %d. Found %d at index %d. An array length %d&quot;</span>,\n            shouldBeFound, integers[atIndex], atIndex, size));\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">toCheck</span> <span class=\"hljs-operator\">=</span> Arrays.binarySearch(integers, shouldBeFound);\n    System.out.println(\n        format(\n            <span class=\"hljs-string\">&quot;Found by system method at an index: %d. Is equal: %b&quot;</span>, toCheck, toCheck == atIndex));\n  }\n}\n"
    },
    "c": {
      "dir": "searching/ternary_search.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/searching/ternary_search.c",
      "code": "\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Function to perform Ternary Search</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">ternarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r, <span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span> ar[])</span>\n{\n    <span class=\"hljs-keyword\">if</span> (r &gt;= l)\n    {\n        <span class=\"hljs-comment\">// Find the mid1 and mid2</span>\n        <span class=\"hljs-type\">int</span> mid1 = l + (r - l) / <span class=\"hljs-number\">3</span>;\n        <span class=\"hljs-type\">int</span> mid2 = r - (r - l) / <span class=\"hljs-number\">3</span>;\n\n        <span class=\"hljs-comment\">// Check if key is present at any mid</span>\n        <span class=\"hljs-keyword\">if</span> (ar[mid1] == key)\n        {\n            <span class=\"hljs-keyword\">return</span> mid1;\n        }\n        <span class=\"hljs-keyword\">if</span> (ar[mid2] == key)\n        {\n            <span class=\"hljs-keyword\">return</span> mid2;\n        }\n\n        <span class=\"hljs-comment\">// Since key is not present at mid,</span>\n        <span class=\"hljs-comment\">// check in which region it is present</span>\n        <span class=\"hljs-comment\">// then repeat the Search operation</span>\n        <span class=\"hljs-comment\">// in that region</span>\n\n        <span class=\"hljs-keyword\">if</span> (key &lt; ar[mid1])\n        {\n            <span class=\"hljs-comment\">// The key lies in between l and mid1</span>\n            <span class=\"hljs-keyword\">return</span> ternarySearch(l, mid1 - <span class=\"hljs-number\">1</span>, key, ar);\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &gt; ar[mid2])\n        {\n            <span class=\"hljs-comment\">// The key lies in between mid2 and r</span>\n            <span class=\"hljs-keyword\">return</span> ternarySearch(mid2 + <span class=\"hljs-number\">1</span>, r, key, ar);\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-comment\">// The key lies in between mid1 and mid2</span>\n            <span class=\"hljs-keyword\">return</span> ternarySearch(mid1 + <span class=\"hljs-number\">1</span>, mid2 - <span class=\"hljs-number\">1</span>, key, ar);\n        }\n    }\n\n    <span class=\"hljs-comment\">// Key not found</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-comment\">// Driver code</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> l, r, p, key;\n\n    <span class=\"hljs-comment\">// Get the array</span>\n    <span class=\"hljs-comment\">// Sort the array if not sorted</span>\n    <span class=\"hljs-type\">int</span> ar[] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>};\n\n    <span class=\"hljs-comment\">// Starting index</span>\n    l = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// length of array</span>\n    r = <span class=\"hljs-number\">9</span>;\n\n    <span class=\"hljs-comment\">// Checking for 5</span>\n\n    <span class=\"hljs-comment\">// Key to be searched in the array</span>\n    key = <span class=\"hljs-number\">5</span>;\n\n    <span class=\"hljs-comment\">// Search the key using ternarySearch</span>\n    p = ternarySearch(l, r, key, ar);\n\n    <span class=\"hljs-comment\">// Print the result</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Index of %d is %d\\n&quot;</span>, key, p);\n\n    <span class=\"hljs-comment\">// Checking for 50</span>\n\n    <span class=\"hljs-comment\">// Key to be searched in the array</span>\n    key = <span class=\"hljs-number\">50</span>;\n\n    <span class=\"hljs-comment\">// Search the key using ternarySearch</span>\n    p = ternarySearch(l, r, key, ar);\n\n    <span class=\"hljs-comment\">// Print the result</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Index of %d is %d&quot;</span>, key, p);\n}"
    },
    "dart": {
      "dir": "search/ternary_Search.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/search/ternary_Search.dart",
      "code": "<span class=\"hljs-comment\">//Title:Ternary Search</span>\n<span class=\"hljs-comment\">//Author:Shawn</span>\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\n\n<span class=\"hljs-built_in\">int</span> ternarySearch(<span class=\"hljs-keyword\">var</span> l, <span class=\"hljs-keyword\">var</span> r, <span class=\"hljs-keyword\">var</span> key, <span class=\"hljs-keyword\">var</span> arr) {\n  <span class=\"hljs-keyword\">if</span> (r &gt;= <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-comment\">//Find the mid1 and mid2</span>\n    <span class=\"hljs-keyword\">var</span> mid1 = (l + (r - l) / <span class=\"hljs-number\">3</span>).toInt();\n    <span class=\"hljs-keyword\">var</span> mid2 = (r - (r - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">3</span>).toInt();\n\n    <span class=\"hljs-comment\">//Check if key is present at any mid</span>\n    <span class=\"hljs-keyword\">if</span> (arr[mid1] == key) <span class=\"hljs-keyword\">return</span> mid1;\n\n    <span class=\"hljs-keyword\">if</span> (arr[mid2] == key) <span class=\"hljs-keyword\">return</span> mid2;\n\n    <span class=\"hljs-comment\">/*Since Key is not present at mid\n     * check in which region it is present\n     * then repeat the Search operation\n     * in that region\n     */</span>\n\n    <span class=\"hljs-keyword\">if</span> (key &lt; arr[mid1]) {\n      <span class=\"hljs-comment\">//The Key lies in between 1 and mid1</span>\n      <span class=\"hljs-keyword\">return</span> ternarySearch(l, mid1 - <span class=\"hljs-number\">1</span>, key, arr);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (key &gt; arr[mid2]) {\n      <span class=\"hljs-comment\">//The key lies in between mid2 and r</span>\n      <span class=\"hljs-keyword\">return</span> ternarySearch(mid2 + <span class=\"hljs-number\">1</span>, r, key, arr);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">//The key lies in between mid1 and mid2</span>\n      <span class=\"hljs-keyword\">return</span> ternarySearch(mid1 + <span class=\"hljs-number\">1</span>, mid2 - <span class=\"hljs-number\">1</span>, key, arr);\n    }\n  }\n\n  <span class=\"hljs-comment\">//Key not found</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-comment\">//Driver code</span>\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-keyword\">var</span> l, r, p, key;\n\n  <span class=\"hljs-comment\">//Get the array</span>\n  <span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>];\n\n  <span class=\"hljs-comment\">//Print the array</span>\n  <span class=\"hljs-built_in\">print</span>(arr);\n\n  <span class=\"hljs-comment\">//Starting index</span>\n  l = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-comment\">// length of array</span>\n  r = arr.length;\n\n  <span class=\"hljs-comment\">//Checking for 5</span>\n  <span class=\"hljs-comment\">//Key to be searched in the array</span>\n  key = <span class=\"hljs-number\">5</span>;\n\n  <span class=\"hljs-comment\">//Search the key using ternarySearch</span>\n  p = ternarySearch(l, r, key, arr);\n\n  <span class=\"hljs-comment\">//Print the result</span>\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Index of &quot;</span> + key.toString() + <span class=\"hljs-string\">&quot; is &quot;</span> + p.toString());\n}\n"
    },
    "ruby": {
      "dir": "searches/ternary_search.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/searches/ternary_search.rb",
      "code": "<span class=\"hljs-comment\">#         Ternary Search</span>\n<span class=\"hljs-comment\"># -------------------------------</span>\n<span class=\"hljs-comment\"># Ternary search is a searching technique that is used to search the position of a specific value in an array.</span>\n<span class=\"hljs-comment\"># Ternary search is a divide-and-conquer algorithm.</span>\n<span class=\"hljs-comment\"># It is mandatory for the array to be sorted (in which you will search for an element).</span>\n<span class=\"hljs-comment\"># The array is divided into three parts and then we determine in which part the element exists.</span>\n<span class=\"hljs-comment\"># In this search, after each iteration it neglects 1/3 part of the array and repeats the same operations on the remaining ⅔.</span>\n<span class=\"hljs-comment\"># Time Complexity: O(log3 n)</span>\n<span class=\"hljs-comment\"># Space Complexity: O(1)</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ternary_search</span><span class=\"hljs-params\">(l, r, key, arr)</span></span>\n    <span class=\"hljs-comment\"># l is the starting index and r is the ending index of the array/sub-array.</span>\n  <span class=\"hljs-keyword\">if</span> r &gt;= l\n      <span class=\"hljs-comment\"># find mid1 and mid2</span>\n      mid1 = l + (r - l) / <span class=\"hljs-number\">3</span>\n      mid2 = r - (r - l) / <span class=\"hljs-number\">3</span>\n      <span class=\"hljs-comment\"># check if key is equal to mid1</span>\n      <span class=\"hljs-keyword\">if</span> arr[mid1] == key\n          mid1\n      <span class=\"hljs-comment\"># check if key is equal to mid2</span>\n      <span class=\"hljs-keyword\">elsif</span> arr[mid2] == key\n          mid2\n      <span class=\"hljs-comment\"># Since key is not present at mid, check in which region it is present</span>\n      <span class=\"hljs-comment\"># then repeat the Search operation in that region</span>\n      <span class=\"hljs-keyword\">elsif</span> key &lt; arr[mid1]\n          ternary_search(l, mid1 - <span class=\"hljs-number\">1</span>, key, arr)\n      <span class=\"hljs-keyword\">elsif</span> key &gt; arr[mid2]\n          ternary_search(mid2 + <span class=\"hljs-number\">1</span>, r, key, arr)\n      <span class=\"hljs-keyword\">else</span>\n          ternary_search(mid1 + <span class=\"hljs-number\">1</span>, mid2 - <span class=\"hljs-number\">1</span>, key, arr)\n      <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nputs <span class=\"hljs-string\">&quot;Enter a space-separated list:&quot;</span>\narr = gets.chomp.split(<span class=\"hljs-string\">&#x27; &#x27;</span>).map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\nputs <span class=\"hljs-string\">&quot;Enter a value to be searched:&quot;</span>\nkey = gets.chomp.to_i\nputs <span class=\"hljs-keyword\">if</span> ternary_search(<span class=\"hljs-number\">0</span>, arr.length - <span class=\"hljs-number\">1</span>, key, arr) != <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-string\">&quot;Found at index <span class=\"hljs-subst\">#{ternary_search(<span class=\"hljs-number\">0</span>, arr.length - <span class=\"hljs-number\">1</span>, key, arr)}</span>&quot;</span>\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-string\">&quot;Not found&quot;</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/search/TernarySearch.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/search/TernarySearch.kt",
      "code": "<span class=\"hljs-keyword\">package</span> search\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Complexity Analysis:\r\n * \r\n * Time Complexity: O(log3 n)\r\n * Space Complexity: O(1)\r\n * \r\n */</span>\r\n\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">ternarySearch</span><span class=\"hljs-params\">(l: <span class=\"hljs-type\">Double</span>, r: <span class=\"hljs-type\">Double</span>, func: (<span class=\"hljs-type\">Double</span>) -&gt; <span class=\"hljs-type\">Double</span>, eps: <span class=\"hljs-type\">Double</span> = <span class=\"hljs-number\">1e-3</span>)</span></span>: <span class=\"hljs-built_in\">Double</span> {\r\n    <span class=\"hljs-keyword\">var</span> left = l\r\n    <span class=\"hljs-keyword\">var</span> right = r\r\n    <span class=\"hljs-keyword\">while</span> (right - left &gt; eps) {\r\n        <span class=\"hljs-keyword\">val</span> midFirst = left + (right - left) / <span class=\"hljs-number\">3</span>\r\n        <span class=\"hljs-keyword\">val</span> midSecond = right - (right - left) / <span class=\"hljs-number\">3</span>\r\n        <span class=\"hljs-keyword\">if</span> (func(midFirst) &lt; func(midSecond)) {\r\n            left = midFirst\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n            right = midSecond\r\n        }\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> left\r\n}\r\n"
    },
    "matlab-octave": {
      "dir": "algorithms/Searching/ternarySearch.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/Searching/ternarySearch.m",
      "code": "<span class=\"hljs-comment\">%% Ternary Search</span>\n<span class=\"hljs-comment\">% This function ternary searches target value in sorted (in increasing order) array. </span>\n<span class=\"hljs-comment\">%%First, we compare the key with the element at mid1. If found equal, we return mid1.</span>\n<span class=\"hljs-comment\">%If not, then we compare the key with the element at mid2. If found equal, we return mid2.</span>\n<span class=\"hljs-comment\">%If not, then we check whether the key is less than the element at mid1. If yes, then recur to the first part.</span>\n<span class=\"hljs-comment\">%If not, then we check whether the key is greater than the element at mid2. If yes, then recur to the third part.</span>\n<span class=\"hljs-comment\">%If not, then we recur to the second (middle) part.</span>\n\n\n<span class=\"hljs-comment\">% function for ternary search</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">[numComparisons, returnindex ]</span> = <span class=\"hljs-title\">ternarySearch</span><span class=\"hljs-params\">( array, target, firstIndex , lastIndex)</span></span>\nnumComparisons = <span class=\"hljs-number\">0</span>;\nlastIndex = <span class=\"hljs-built_in\">length</span>(array);\nfirstIndex = <span class=\"hljs-number\">1</span>;\n\nmid1 = firstIndex + (lastIndex - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">3</span>;    <span class=\"hljs-comment\">%calculating mid1</span>\nmid2 = lastIndex - (lastIndex - <span class=\"hljs-number\">1</span>)/ <span class=\"hljs-number\">3</span>;      <span class=\"hljs-comment\">%calculating mid1</span>\nxmid1 = <span class=\"hljs-number\">0</span>;\nxmid2 = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">if</span>(array(mid1)== target)\n    xmid1 = mid1;\n    \n<span class=\"hljs-keyword\">elseif</span>(array(mid2) == target)\n    xmid2 = mid2;\n<span class=\"hljs-keyword\">elseif</span>(target &gt; array(mid1))\n\n    ternarySearch(array,mid2+<span class=\"hljs-number\">1</span>,lastIndex, target);\n<span class=\"hljs-keyword\">elseif</span>(target &lt; array(mid1))\n    ternarySearch(array,firstIndex,mid1 - <span class=\"hljs-number\">1</span>, target);\n<span class=\"hljs-keyword\">else</span>\n  \n    ternarySearch(array,mid1+<span class=\"hljs-number\">1</span>,mid2<span class=\"hljs-number\">-1</span>,target);\n<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Ilya Gospodarik",
      "email": "ilyagospodarik@gmail.com",
      "commits": 1
    },
    {
      "name": "KAUSHAL DEVRARI",
      "email": "71590645+KaushalDevrari@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Abhinav Anand",
      "email": "manasgmishra@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ajinkya-ch",
      "email": "ajinkyajc@gmail.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "Uday Patel",
      "email": "udaykpatel@hotmail.com",
      "commits": 1
    },
    {
      "name": "poloso",
      "email": "posorio@sier.com.co",
      "commits": 1
    },
    {
      "name": "Dmytro Litvinov",
      "email": "litvinov.dmytro.it@gmail.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 2
    },
    {
      "name": "josuke00",
      "email": "thianqiwee00@gmail.com",
      "commits": 2
    },
    {
      "name": "Ribhav Pahuja",
      "email": "pahujaribhav984@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
