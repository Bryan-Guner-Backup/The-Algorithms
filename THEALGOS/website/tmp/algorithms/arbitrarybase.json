{
  "slug": "arbitrarybase",
  "name": "ArbitraryBase",
  "categories": ["conversions"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Conversions/ArbitraryBase.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Conversions/ArbitraryBase.js",
      "code": "<span class=\"hljs-comment\">/**\n* Converts a string from one base to other\n* <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} stringInBaseOne String in input base\n* <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} baseOneCharacters Character set for the input base\n* <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} baseTwoCharacters Character set for the output base\n* <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">string</span>}\n*/</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">convertArbitraryBase</span> = (<span class=\"hljs-params\">stringInBaseOne, baseOneCharacters, baseTwoCharacters</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> ([stringInBaseOne, baseOneCharacters, baseTwoCharacters].<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">arg</span> =&gt;</span> <span class=\"hljs-keyword\">typeof</span> arg).<span class=\"hljs-title function_\">some</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">type</span> =&gt;</span> type !== <span class=\"hljs-string\">&#x27;string&#x27;</span>)) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Only string arguments are allowed&#x27;</span>)\n  }\n  [baseOneCharacters, baseTwoCharacters].<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">baseString</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> charactersInBase = [...baseString]\n    <span class=\"hljs-keyword\">if</span> (charactersInBase.<span class=\"hljs-property\">length</span> !== <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(charactersInBase).<span class=\"hljs-property\">size</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Duplicate characters in character set are not allowed&#x27;</span>)\n    }\n  })\n  <span class=\"hljs-keyword\">const</span> reversedStringOneChars = [...stringInBaseOne].<span class=\"hljs-title function_\">reverse</span>()\n  <span class=\"hljs-keyword\">const</span> stringOneBase = baseOneCharacters.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">let</span> placeValue = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> digit <span class=\"hljs-keyword\">of</span> reversedStringOneChars) {\n    <span class=\"hljs-keyword\">const</span> digitNumber = baseOneCharacters.<span class=\"hljs-title function_\">indexOf</span>(digit)\n    <span class=\"hljs-keyword\">if</span> (digitNumber === -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">`Not a valid character: <span class=\"hljs-subst\">${digit}</span>`</span>)\n    }\n    value += (digitNumber * placeValue)\n    placeValue *= stringOneBase\n  }\n  <span class=\"hljs-keyword\">let</span> stringInBaseTwo = <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> stringTwoBase = baseTwoCharacters.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">while</span> (value &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">const</span> remainder = value % stringTwoBase\n    stringInBaseTwo = baseTwoCharacters.<span class=\"hljs-title function_\">charAt</span>(remainder) + stringInBaseTwo\n    value /= stringTwoBase\n  }\n  <span class=\"hljs-keyword\">const</span> baseTwoZero = baseTwoCharacters.<span class=\"hljs-title function_\">charAt</span>(<span class=\"hljs-number\">0</span>)\n  <span class=\"hljs-keyword\">return</span> stringInBaseTwo.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RegExp</span>(<span class=\"hljs-string\">`^<span class=\"hljs-subst\">${baseTwoZero}</span>+`</span>), <span class=\"hljs-string\">&#x27;&#x27;</span>)\n}\n\n(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">convertArbitraryBase</span>(<span class=\"hljs-string\">&#x27;98&#x27;</span>, <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>, <span class=\"hljs-string\">&#x27;01234567&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">convertArbitraryBase</span>(<span class=\"hljs-string\">&#x27;98&#x27;</span>, <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>, <span class=\"hljs-string\">&#x27;abcdefgh&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">convertArbitraryBase</span>(<span class=\"hljs-string\">&#x27;129&#x27;</span>, <span class=\"hljs-string\">&#x27;0123456789&#x27;</span>, <span class=\"hljs-string\">&#x27;01234567&#x27;</span>))\n})()\n"
    }
  },
  "contributors": [
    {
      "name": "Kaustubh Badrike",
      "email": "kaustubh.badrike15@siesgst.ac.in",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
