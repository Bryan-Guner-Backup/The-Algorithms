{
  "slug": "armstrongnumber",
  "name": "ArmstrongNumber",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths/ArmstrongNumber.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/ArmstrongNumber.js",
      "code": "<span class=\"hljs-comment\">/**\n * Author: dephraiim\n * License: GPL-3.0 or later\n *\n * An Armstrong number is equal to the sum of its own digits each raised to the power of the number of digits.\n * For example, 370 is an Armstrong number because 3*3*3 + 7*7*7 + 0*0*0 = 370.\n * An Armstrong number is often called Narcissistic number.\n *\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">armstrongNumber</span> = (<span class=\"hljs-params\">num</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (num &lt; <span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">typeof</span> num !== <span class=\"hljs-string\">&#x27;number&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\n  <span class=\"hljs-keyword\">let</span> newSum = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">const</span> numArr = num.<span class=\"hljs-title function_\">toString</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  numArr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">num</span>) =&gt;</span> {\n    newSum += <span class=\"hljs-built_in\">parseInt</span>(num) ** numArr.<span class=\"hljs-property\">length</span>\n  })\n\n  <span class=\"hljs-keyword\">return</span> newSum === num\n}\n\n<span class=\"hljs-keyword\">export</span> { armstrongNumber }\n"
    },
    "c-plus-plus": {
      "dir": "math/armstrong_number.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/armstrong_number.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * \\brief Program to check if a number is an [Armstrong/Narcissistic\n * number](https://en.wikipedia.org/wiki/Narcissistic_number) in decimal system.\n *\n * \\details\n * Armstrong number or [Narcissistic\n * number](https://en.wikipedia.org/wiki/Narcissistic_number) is a number that\n * is the sum of its own digits raised to the power of the number of digits.\n * @author iamnambiar\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Function to calculate the total number of digits in the number.\n * @param num Number\n * @return Total number of digits.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">number_of_digits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num)</span> </span>{\n    <span class=\"hljs-type\">int</span> total_digits = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (num &gt; <span class=\"hljs-number\">0</span>) {\n        num = num / <span class=\"hljs-number\">10</span>;\n        ++total_digits;\n    }\n    <span class=\"hljs-keyword\">return</span> total_digits;\n}\n\n<span class=\"hljs-comment\">/**\n * Function to check whether the number is armstrong number or not.\n * @param num Number\n * @return `true` if the number is armstrong.\n * @return `false` if the number is not armstrong.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_armstrong</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> </span>{\n    <span class=\"hljs-comment\">// If the number is less than 0, then it is not a armstrong number.</span>\n    <span class=\"hljs-keyword\">if</span> (number &lt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> temp = number;\n    <span class=\"hljs-comment\">// Finding the total number of digits in the number</span>\n    <span class=\"hljs-type\">int</span> total_digits = <span class=\"hljs-built_in\">number_of_digits</span>(number);\n    <span class=\"hljs-keyword\">while</span> (temp &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-type\">int</span> rem = temp % <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-comment\">// Finding each digit raised to the power total digit and add it to the</span>\n        <span class=\"hljs-comment\">// total sum</span>\n        sum = sum + std::<span class=\"hljs-built_in\">pow</span>(rem, total_digits);\n        temp = temp / <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> number == sum;\n}\n\n<span class=\"hljs-comment\">/**\n * Function for testing the is_armstrong() function\n * with all the test cases.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// is_armstrong(370) returns true.</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_armstrong</span>(<span class=\"hljs-number\">370</span>) == <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-comment\">// is_armstrong(225) returns false.</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_armstrong</span>(<span class=\"hljs-number\">225</span>) == <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-comment\">// is_armstrong(-23) returns false.</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_armstrong</span>(<span class=\"hljs-number\">-23</span>) == <span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-comment\">// is_armstrong(153) returns true.</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_armstrong</span>(<span class=\"hljs-number\">153</span>) == <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-comment\">// is_armstrong(0) returns true.</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_armstrong</span>(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-comment\">// is_armstrong(12) returns false.</span>\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">is_armstrong</span>(<span class=\"hljs-number\">12</span>) == <span class=\"hljs-literal\">false</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * Main Function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "misc/armstrong_number.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/armstrong_number.c",
      "code": "<span class=\"hljs-comment\">// A number is called as Armstrong number if sum of cubes of digits of number is</span>\n<span class=\"hljs-comment\">// equal to the number itself.</span>\n<span class=\"hljs-comment\">// For Example 153 is an Armstrong number because 153 = 1³+5³+3³.</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Function to calculate x raised to the power y</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">power</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> y)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">if</span> (y % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> power(x, y / <span class=\"hljs-number\">2</span>) * power(x, y / <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-keyword\">return</span> x * power(x, y / <span class=\"hljs-number\">2</span>) * power(x, y / <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">// Function to calculate order of the number</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">order</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span>\n{\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (x)\n    {\n        n++;\n        x = x / <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> n;\n}\n\n<span class=\"hljs-comment\">// Function to check whether the given number is</span>\n<span class=\"hljs-comment\">// Armstrong number or not</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isArmstrong</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span>\n{\n    <span class=\"hljs-comment\">// Calling order function</span>\n    <span class=\"hljs-type\">int</span> n = order(x);\n    <span class=\"hljs-type\">int</span> temp = x, sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (temp)\n    {\n        <span class=\"hljs-type\">int</span> r = temp % <span class=\"hljs-number\">10</span>;\n        sum += power(r, n);\n        temp = temp / <span class=\"hljs-number\">10</span>;\n    }\n\n    <span class=\"hljs-comment\">// If satisfies Armstrong condition</span>\n    <span class=\"hljs-keyword\">if</span> (sum == x)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">153</span>;\n    <span class=\"hljs-keyword\">if</span> (isArmstrong(x) == <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;True\\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;False\\n&quot;</span>);\n\n    x = <span class=\"hljs-number\">1253</span>;\n    <span class=\"hljs-keyword\">if</span> (isArmstrong(x) == <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;True\\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;False\\n&quot;</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "dart": {
      "dir": "maths/Armstrong_number.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/Armstrong_number.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\n\n<span class=\"hljs-built_in\">bool</span> Armstrong_no(<span class=\"hljs-keyword\">var</span> x) {\n  <span class=\"hljs-keyword\">var</span> n = x;\n  <span class=\"hljs-keyword\">var</span> s = n.toString();\n  <span class=\"hljs-keyword\">var</span> d = s.length;\n  <span class=\"hljs-keyword\">var</span> sum = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">var</span> r = n % <span class=\"hljs-number\">10</span>;\n    sum = sum + pow(r, d);\n    n = n ~/ <span class=\"hljs-number\">10</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> sum == x;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> x <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">370</span>, <span class=\"hljs-number\">371</span>]) {\n    <span class=\"hljs-keyword\">if</span> (Armstrong_no(x)) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">${x}</span> is armstrong number&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">${x}</span> is not Armstrong number&quot;</span>);\n    }\n  }\n}\n"
    },
    "ruby": {
      "dir": "maths/armstrong_number.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/armstrong_number.rb",
      "code": "<span class=\"hljs-comment\"># A ruby program to determine whether a given number is an Armstrong number</span>\n<span class=\"hljs-comment\"># Wiki url: https://en.wikipedia.org/wiki/Narcissistic_number</span>\n<span class=\"hljs-comment\"># other resources: https://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap04/arms.html</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Examples: -&gt; 153 = (1 * 1 * 1) + (5 * 5 * 5) + (3 * 3 * 3) [Armstrong number] and -&gt; 125 != (1 * 1 * 1) + (2 * 2 * 2) + (5 * 5 * 5)</span>\n<span class=\"hljs-comment\"># -&gt; 1634 = (1 * 1 * 1 * 1) + (6 * 6 * 6 * 6) + (3 * 3 * 3 * 3) + (4 * 4 * 4 * 4)</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">armstrong_number</span><span class=\"hljs-params\">(number)</span></span>\n  num = number\n  sum = <span class=\"hljs-number\">0</span>\n  len = number.digits.count\n  <span class=\"hljs-keyword\">while</span>(number != <span class=\"hljs-number\">0</span>)\n    remainder = number % <span class=\"hljs-number\">10</span>\n    sum += remainder ** len\n    number /= <span class=\"hljs-number\">10</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-keyword\">if</span> num == sum\n    <span class=\"hljs-string\">&quot;The number <span class=\"hljs-subst\">#{num}</span> is an Armstrong number.&quot;</span>\n  <span class=\"hljs-keyword\">else</span>\n    <span class=\"hljs-string\">&quot;The number <span class=\"hljs-subst\">#{num}</span> is not an Armstrong number.&quot;</span>\n  <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">rescue</span>\n    <span class=\"hljs-string\">&quot;Error: Please provide number only!&quot;</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Valid inputs</span>\n<span class=\"hljs-comment\">#</span>\nputs armstrong_number(<span class=\"hljs-number\">153</span>)\n<span class=\"hljs-comment\"># The number 153 is an Armstrong number.</span>\n\nputs armstrong_number(<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-comment\"># The number 0 is an Armstrong number.</span>\n\nputs armstrong_number(<span class=\"hljs-number\">370</span>)\n<span class=\"hljs-comment\"># The number 370 is an Armstrong number.</span>\n\nputs armstrong_number(<span class=\"hljs-number\">10</span>)\n<span class=\"hljs-comment\"># The number 10 is not an Armstrong number.</span>\n\nputs armstrong_number(<span class=\"hljs-number\">1634</span>)\n<span class=\"hljs-comment\"># The number 1634 is an Armstrong number.</span>\n\nputs armstrong_number(<span class=\"hljs-number\">123</span>)\n<span class=\"hljs-comment\"># The number 123 is not an Armstrong number.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Invalid inputs</span>\n<span class=\"hljs-comment\">#</span>\nputs armstrong_number(<span class=\"hljs-string\">&quot;153&quot;</span>)\n<span class=\"hljs-comment\"># Error: Please provide number only!</span>\n\nputs armstrong_number(<span class=\"hljs-string\">&quot;a&quot;</span>)\n<span class=\"hljs-comment\"># Error: Please provide number only!</span>\n"
    },
    "julia": {
      "dir": "src/math/armstrong_number.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/armstrong_number.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    is_armstrong(x)\n\nProgram to check if a number is an [Armstrong/Narcissistic number](https://en.wikipedia.org/wiki/Narcissistic_number) in decimal system.\n\nArmstrong number is a number that is the sum of its own digits raised to the power of the number of digits.\n\nContributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee)\n\nA positive integer is called an Armstrong number (of order n) if\n\n`abcd... = a^n + b^n + c^n + d^n +....`\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> is_armstrong(x)\n    <span class=\"hljs-comment\"># If the number is less than 0, then it is not a armstrong number.</span>\n    <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">elseif</span> x == <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-comment\"># Finding the total number of digits in the number</span>\n        length = <span class=\"hljs-built_in\">Int</span>(floor(log10(x) + <span class=\"hljs-number\">1</span>))\n        result = <span class=\"hljs-number\">0</span>\n        temp = x\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:length\n            val = temp % <span class=\"hljs-number\">10</span>\n            <span class=\"hljs-comment\"># Finding each digit raised to the power total digit and add it to the total sum</span>\n            result = result + <span class=\"hljs-built_in\">Int</span>(trunc(val))^length\n            temp = temp / <span class=\"hljs-number\">10</span>\n        <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">return</span> x == result ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Jean-Francois Baffier",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "IlyaIskra",
      "email": "70522988+IlyaIskra@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sahil Afrid Farookhi",
      "email": "msafarookhi@gmail.com",
      "commits": 2
    },
    {
      "name": "Ephraim Atta-Duncan",
      "email": "55143799+dephraiim@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Shivam Singhal",
      "email": "shivamsinghal0610@gmail.com",
      "commits": 2
    },
    {
      "name": "Abhishek Maletha",
      "email": "67141747+Abhishek-photon@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
