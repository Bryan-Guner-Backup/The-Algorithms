{
  "slug": "sudokusolver",
  "name": "SudokuSolver",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Dynamic-Programming/SudokuSolver.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/SudokuSolver.js",
      "code": "<span class=\"hljs-keyword\">const</span> _board = [\n  [<span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;4&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;6&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>, <span class=\"hljs-string\">&#x27;6&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;4&#x27;</span>, <span class=\"hljs-string\">&#x27;8&#x27;</span>, <span class=\"hljs-string\">&#x27;5&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;5&#x27;</span>, <span class=\"hljs-string\">&#x27;8&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;4&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;5&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;7&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;6&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;7&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;8&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;4&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;2&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;7&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;6&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;8&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;3&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>, <span class=\"hljs-string\">&#x27;.&#x27;</span>]\n]\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">isValid</span> = (<span class=\"hljs-params\">board, row, col, k</span>) =&gt; {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">9</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-number\">3</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(row / <span class=\"hljs-number\">3</span>) + <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(i / <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-keyword\">const</span> n = <span class=\"hljs-number\">3</span> * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(col / <span class=\"hljs-number\">3</span>) + i % <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-keyword\">if</span> (board[row][i] === k || board[i][col] === k || board[m][n] === k) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sodokoSolver</span> = (<span class=\"hljs-params\">data</span>) =&gt; {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">9</span>; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">9</span>; j++) {\n      <span class=\"hljs-keyword\">if</span> (data[i][j] === <span class=\"hljs-string\">&#x27;.&#x27;</span>) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">1</span>; k &lt;= <span class=\"hljs-number\">9</span>; k++) {\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isValid</span>(data, i, j, k)) {\n            data[i][j] = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${k}</span>`</span>\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">sodokoSolver</span>(data)) {\n              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n            } <span class=\"hljs-keyword\">else</span> {\n              data[i][j] = <span class=\"hljs-string\">&#x27;.&#x27;</span>\n            }\n          }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n<span class=\"hljs-comment\">// testing</span>\n(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">sodokoSolver</span>(_board)) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(_board)\n  }\n})()\n"
    },
    "c": {
      "dir": "misc/sudoku_solver.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/sudoku_solver.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Sudoku Solver using recursive implementation of brute-force algorithm\n *\n * @details\n * Given an incomplete N*N Sudoku and asked to solve it using the\n * following recursive algorithm:\n * 1. Scan the Sudoku from left to right row-wise to search for an empty cell.\n * 2. If there are no empty cells, print the Sudoku. Go to step 5.\n * 3. In the empty cell, try putting numbers 1 to N\n * while ensuring that no two numbers in a single row, column, or box are same.\n * Go back to step 1.\n * 4. Declare that the Sudoku is Invalid.\n * 5. Exit.\n *\n * @authors [Anuj Shah](https://github.com/anujms1999)\n * @authors [Krishna Vedala](https://github.com/kvedala)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/** @addtogroup sudoku Sudoku solver\n * @{\n */</span>\n<span class=\"hljs-comment\">/** Structure to hold the matrix and dimensions\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sudoku</span>\n{</span>\n    <span class=\"hljs-type\">uint8_t</span> *a; <span class=\"hljs-comment\">/**&lt; matrix as a flattened 1D row-major array */</span>\n    <span class=\"hljs-type\">uint8_t</span> N;  <span class=\"hljs-comment\">/**&lt; number of elements */</span>\n    <span class=\"hljs-type\">uint8_t</span> N2; <span class=\"hljs-comment\">/**&lt; block of elements */</span>\n};\n\n<span class=\"hljs-comment\">/**\n * Check if `x`^th row is valid\n * @param a ::sudoku to check\n * @param x row to check\n * @param y ignored column\n * @param v value to check if it repeats\n * @returns `true` if valid\n * @returns `false` if in-valid\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">OKrow</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> sudoku *a, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> v)</span>\n{\n    <span class=\"hljs-type\">int</span> offset = x * a-&gt;N;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; a-&gt;N; j++)\n        <span class=\"hljs-keyword\">if</span> (a-&gt;a[offset + j] == v)\n            <span class=\"hljs-comment\">// if the value is found in the row</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Check if `y`^th column is valid\n * @param a ::sudoku to check\n * @param x ignored row\n * @param y column to check\n * @param v value to check if it repeats\n * @returns `true` if valid\n * @returns `false` if in-valid\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">OKcol</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> sudoku *a, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> v)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; a-&gt;N; i++)\n        <span class=\"hljs-keyword\">if</span> (a-&gt;a[i * a-&gt;N + y] == v)\n            <span class=\"hljs-comment\">// if the value is found in the column</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Check if a 3x3 box is valid\n * @param a matrix to check\n * @param x row index of the element to check\n * @param y column index of the element to check\n * @param v value to check if it repeats\n * @returns `true` if valid\n * @returns `false` if in-valid\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">OKbox</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> sudoku *a, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> v)</span>\n{\n    <span class=\"hljs-comment\">/* get start indices of the box that the current (x,y) lies in\n       remember that in C/C++, division operation always rounds towards\n       -infinity for signed integers and towards 0 for unsigned integers\n    */</span>\n    <span class=\"hljs-type\">int</span> bi = x - x % a-&gt;N2, bj = y - y % a-&gt;N2;\n    <span class=\"hljs-comment\">// printf(&quot;Checking box: (%d,%d)\\n&quot;, bi, bj);</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = bi; i &lt; (bi + a-&gt;N2); i++)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = bj; j &lt; (bj + a-&gt;N2); j++)\n            <span class=\"hljs-keyword\">if</span> (a-&gt;a[i * a-&gt;N + j] == v)\n                <span class=\"hljs-comment\">// if the value is found in the box</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Check if element `v` is valid to place at (x,y) location.\n * @param a ::sudoku to check\n * @param x row to place value\n * @param y column to place value\n * @param v value to check if it is valid\n * @returns `true` if valid\n * @returns `false` if in-valid\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">OK</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> sudoku *a, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> v)</span>\n{\n    <span class=\"hljs-type\">bool</span> result = OKrow(a, x, y, v);\n    <span class=\"hljs-keyword\">if</span> (result)\n        result = OKcol(a, x, y, v);\n    <span class=\"hljs-keyword\">if</span> (result)\n        result = OKbox(a, x, y, v);\n\n    <span class=\"hljs-keyword\">return</span> result;\n}\n\n<span class=\"hljs-comment\">/**\n * Print the matrix to stdout\n * @param [in] a array to print\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> sudoku *a)</span>\n{\n    <span class=\"hljs-type\">int</span> i, j;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; a-&gt;N; i++)\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; a-&gt;N; j++)\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%&quot;</span> SCNu8 <span class=\"hljs-string\">&quot;%c&quot;</span>, a-&gt;a[i * a-&gt;N + j],\n                   (j == a-&gt;N - <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">&#x27;\\n&#x27;</span> : <span class=\"hljs-string\">&#x27; &#x27;</span>));\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Find and get the location for next empty cell.\n *\n * @param [in] a pointer to sudoku instance\n * @param [out] x pointer to row index of next unknown\n * @param [out] y pointer to column index of next unknown\n * @returns `true` if an empty location was found\n * @returns `false` if no more empty locations found\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">get_next_unknown</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> sudoku *a, <span class=\"hljs-type\">int</span> *x, <span class=\"hljs-type\">int</span> *y)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; a-&gt;N; i++)\n    {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; a-&gt;N; j++)\n        {\n            <span class=\"hljs-keyword\">if</span> (a-&gt;a[i * a-&gt;N + j] == <span class=\"hljs-number\">0</span>)\n            {\n                *x = i;\n                *y = j;\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">/* no unknown locations found */</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function to solve a partially filled sudoku matrix. For each unknown\n * value (0), the function fills a possible value and calls the function again\n * to check forvalid solution.\n *\n * @param [in,out] a sudoku matrix to solve\n * @return `true` if solution found\n * @return `false` if no solution found\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">solve</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> sudoku *a)</span>\n{\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">uint32_t</span> counter = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> i, j;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">char</span> prefix[<span class=\"hljs-number\">100</span>] = <span class=\"hljs-string\">&quot;&quot;</span>;  <span class=\"hljs-comment\">// enough memory</span>\n\n    <span class=\"hljs-keyword\">if</span> (!get_next_unknown(a, &amp;i, &amp;j))\n    {\n        <span class=\"hljs-comment\">/* no more empty location found\n           implies all good in the matrix\n         */</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-comment\">/* try all possible values for the unknown */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> v = <span class=\"hljs-number\">1</span>; v &lt;= a-&gt;N; v++)\n    { <span class=\"hljs-comment\">/* try all possible values 1 thru N */</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%sTry (%d,%d) = %&quot;</span> SCNu8 <span class=\"hljs-string\">&quot;... &quot;</span>, prefix, i, j, v);\n        counter++;\n        <span class=\"hljs-keyword\">if</span> (OK(a, i, j, v))\n        {\n            <span class=\"hljs-comment\">/* if assignment checks satisfy, set the value and\n             continue with remaining elements */</span>\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;passed (counter=%&quot;</span> SCNu32 <span class=\"hljs-string\">&quot;)\\n&quot;</span>, counter);\n            a-&gt;a[i * a-&gt;N + j] = v;\n            <span class=\"hljs-built_in\">strcat</span>(prefix, <span class=\"hljs-string\">&quot;  &quot;</span>);\n            <span class=\"hljs-keyword\">if</span> (solve(a))\n            {\n                <span class=\"hljs-comment\">/* solution found */</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%sBacktrack (%d,%d) &lt;- %&quot;</span> SCNu8 <span class=\"hljs-string\">&quot; (counter=%&quot;</span> SCNu32 <span class=\"hljs-string\">&quot;)\\n&quot;</span>,\n                   prefix, i, j, a-&gt;a[i * a-&gt;N + j], counter);\n\n            prefix[<span class=\"hljs-built_in\">strlen</span>(prefix) - <span class=\"hljs-number\">2</span>] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;  <span class=\"hljs-comment\">// truncate the prefix</span>\n            a-&gt;a[i * a-&gt;N + j] = <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\r&quot;</span>);\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-comment\">/** @} */</span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test begin...\\n&quot;</span>);\n\n    <span class=\"hljs-type\">uint8_t</span> test_array[] = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n                            <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n                            <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>,\n                            <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n                            <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sudoku</span> <span class=\"hljs-title\">a</span> =</span> {.N = <span class=\"hljs-number\">9</span>, .N2 = <span class=\"hljs-number\">3</span>, .a = test_array};\n    assert(solve(&amp;a));  <span class=\"hljs-comment\">// ensure that solution is obtained</span>\n\n    <span class=\"hljs-type\">uint8_t</span> expected[] = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>,\n                          <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>,\n                          <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>,\n                          <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>,\n                          <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">9</span>};\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; a.N; i++)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; a.N; j++)\n            assert(a.a[i * a.N + j] == expected[i * a.N + j]);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Test passed\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/** \\brief Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    test();\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sudoku</span> <span class=\"hljs-title\">a</span>;</span>  <span class=\"hljs-comment\">// store the matrix as a 1D array</span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%&quot;</span> SCNu8, &amp;(a.N));\n    a.a = (<span class=\"hljs-type\">uint8_t</span> *)<span class=\"hljs-built_in\">malloc</span>(a.N * a.N * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">uint8_t</span>));\n    a.N2 = (<span class=\"hljs-type\">uint8_t</span>)<span class=\"hljs-built_in\">sqrt</span>(a.N);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; a.N; i++)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; a.N; j++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%&quot;</span> SCNu8, &amp;(a.a[i * a.N + j]));\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Entered a %udx%ud matrix with block size: %&quot;</span> SCNu8 <span class=\"hljs-string\">&quot;\\n&quot;</span>, a.N, a.N,\n           a.N2);\n    <span class=\"hljs-comment\">// print(&amp;a);</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\n&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (solve(&amp;a))\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Valid solution found!\\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Invalid\\n&quot;</span>);\n    print(&amp;a);\n\n    <span class=\"hljs-built_in\">free</span>(a.a);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Shadab Ali",
      "email": "shadabali604@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
