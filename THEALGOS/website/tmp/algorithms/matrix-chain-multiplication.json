{
  "slug": "matrix-chain-multiplication",
  "name": "Matrix Chain Multiplication",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming/matrix_chain_multiplication.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/matrix_chain_multiplication.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 10</span>\n\n<span class=\"hljs-comment\">// dp table to store the solution for already computed sub problems</span>\n<span class=\"hljs-type\">int</span> dp[MAX][MAX];\n\n<span class=\"hljs-comment\">// Function to find the most efficient way to multiply the given sequence of</span>\n<span class=\"hljs-comment\">// matrices</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">MatrixChainMultiplication</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> dim[], <span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> </span>{\n    <span class=\"hljs-comment\">// base case: one matrix</span>\n    <span class=\"hljs-keyword\">if</span> (j &lt;= i + <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// stores minimum number of scalar multiplications (i.e., cost)</span>\n    <span class=\"hljs-comment\">// needed to compute the matrix M[i+1]...M[j] = M[i..j]</span>\n    <span class=\"hljs-type\">int</span> min = INT_MAX;\n\n    <span class=\"hljs-comment\">// if dp[i][j] is not calculated (calculate it!!)</span>\n\n    <span class=\"hljs-keyword\">if</span> (dp[i][j] == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">// take the minimum over each possible position at which the</span>\n        <span class=\"hljs-comment\">// sequence of matrices can be split</span>\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> k = i + <span class=\"hljs-number\">1</span>; k &lt;= j - <span class=\"hljs-number\">1</span>; k++) {\n            <span class=\"hljs-comment\">// recur for M[i+1]..M[k] to get a i x k matrix</span>\n            <span class=\"hljs-type\">int</span> cost = <span class=\"hljs-built_in\">MatrixChainMultiplication</span>(dim, i, k);\n\n            <span class=\"hljs-comment\">// recur for M[k+1]..M[j] to get a k x j matrix</span>\n            cost += <span class=\"hljs-built_in\">MatrixChainMultiplication</span>(dim, k, j);\n\n            <span class=\"hljs-comment\">// cost to multiply two (i x k) and (k x j) matrix</span>\n            cost += dim[i] * dim[k] * dim[j];\n\n            <span class=\"hljs-keyword\">if</span> (cost &lt; min)\n                min = cost;  <span class=\"hljs-comment\">// store the minimum cost</span>\n        }\n        dp[i][j] = min;\n    }\n\n    <span class=\"hljs-comment\">// return min cost to multiply M[j+1]..M[j]</span>\n    <span class=\"hljs-keyword\">return</span> dp[i][j];\n}\n\n<span class=\"hljs-comment\">// main function</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Matrix i has Dimensions dim[i-1] &amp; dim[i] for i=1..n</span>\n    <span class=\"hljs-comment\">// input is 10 x 30 matrix, 30 x 5 matrix, 5 x 60 matrix</span>\n    <span class=\"hljs-type\">int</span> dim[] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">60</span>};\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(dim) / <span class=\"hljs-built_in\">sizeof</span>(dim[<span class=\"hljs-number\">0</span>]);\n\n    <span class=\"hljs-comment\">// Function Calling: MatrixChainMultiplications(dimensions_array, starting,</span>\n    <span class=\"hljs-comment\">// ending);</span>\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;Minimum cost is &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">MatrixChainMultiplication</span>(dim, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>)\n         &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}"
    },
    "java": {
      "dir": "DynamicProgramming/MatrixChainMultiplication.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/MatrixChainMultiplication.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MatrixChainMultiplication</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;Matrix&gt; mArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> size;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] m;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[][] s;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span>[] p;\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      String[] mSize = input(<span class=\"hljs-string\">&quot;input size of matrix A(&quot;</span> + count + <span class=\"hljs-string\">&quot;) ( ex. 10 20 ) : &quot;</span>);\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">col</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(mSize[<span class=\"hljs-number\">0</span>]);\n      <span class=\"hljs-keyword\">if</span> (col == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> Integer.parseInt(mSize[<span class=\"hljs-number\">1</span>]);\n\n      <span class=\"hljs-type\">Matrix</span> <span class=\"hljs-variable\">matrix</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Matrix</span>(count, col, row);\n      mArray.add(matrix);\n      count++;\n    }\n    <span class=\"hljs-keyword\">for</span> (Matrix m : mArray) {\n      System.out.format(<span class=\"hljs-string\">&quot;A(%d)  =  %2d  x  %2d%n&quot;</span>, m.count(), m.col(), m.row());\n    }\n\n    size = mArray.size();\n    m = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size + <span class=\"hljs-number\">1</span>][size + <span class=\"hljs-number\">1</span>];\n    s = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size + <span class=\"hljs-number\">1</span>][size + <span class=\"hljs-number\">1</span>];\n    p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size + <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size + <span class=\"hljs-number\">1</span>; i++) {\n      Arrays.fill(m[i], -<span class=\"hljs-number\">1</span>);\n      Arrays.fill(s[i], -<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; p.length; i++) {\n      p[i] = i == <span class=\"hljs-number\">0</span> ? mArray.get(i).col() : mArray.get(i - <span class=\"hljs-number\">1</span>).row();\n    }\n\n    matrixChainOrder();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n      System.out.print(<span class=\"hljs-string\">&quot;-------&quot;</span>);\n    }\n    System.out.println();\n    printArray(m);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n      System.out.print(<span class=\"hljs-string\">&quot;-------&quot;</span>);\n    }\n    System.out.println();\n    printArray(s);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n      System.out.print(<span class=\"hljs-string\">&quot;-------&quot;</span>);\n    }\n    System.out.println();\n\n    System.out.println(<span class=\"hljs-string\">&quot;Optimal solution : &quot;</span> + m[<span class=\"hljs-number\">1</span>][size]);\n    System.out.print(<span class=\"hljs-string\">&quot;Optimal parens : &quot;</span>);\n    printOptimalParens(<span class=\"hljs-number\">1</span>, size);\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printOptimalParens</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">int</span> j)</span> {\n    <span class=\"hljs-keyword\">if</span> (i == j) {\n      System.out.print(<span class=\"hljs-string\">&quot;A&quot;</span> + i);\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.print(<span class=\"hljs-string\">&quot;(&quot;</span>);\n      printOptimalParens(i, s[i][j]);\n      printOptimalParens(s[i][j] + <span class=\"hljs-number\">1</span>, j);\n      System.out.print(<span class=\"hljs-string\">&quot;)&quot;</span>);\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[][] array)</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; size + <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; size + <span class=\"hljs-number\">1</span>; j++) {\n        System.out.print(String.format(<span class=\"hljs-string\">&quot;%7d&quot;</span>, array[i][j]));\n      }\n      System.out.println();\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">matrixChainOrder</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; size + <span class=\"hljs-number\">1</span>; i++) {\n      m[i][i] = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">l</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; l &lt; size + <span class=\"hljs-number\">1</span>; l++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; size - l + <span class=\"hljs-number\">2</span>; i++) {\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i + l - <span class=\"hljs-number\">1</span>;\n        m[i][j] = Integer.MAX_VALUE;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> i; k &lt; j; k++) {\n          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> m[i][k] + m[k + <span class=\"hljs-number\">1</span>][j] + p[i - <span class=\"hljs-number\">1</span>] * p[k] * p[j];\n          <span class=\"hljs-keyword\">if</span> (q &lt; m[i][j]) {\n            m[i][j] = q;\n            s[i][j] = k;\n          }\n        }\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String[] input(String string) {\n    System.out.print(string);\n    <span class=\"hljs-keyword\">return</span> (scan.nextLine().split(<span class=\"hljs-string\">&quot; &quot;</span>));\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Matrix</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> count;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> col;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> row;\n\n  Matrix(<span class=\"hljs-type\">int</span> count, <span class=\"hljs-type\">int</span> col, <span class=\"hljs-type\">int</span> row) {\n    <span class=\"hljs-built_in\">this</span>.count = count;\n    <span class=\"hljs-built_in\">this</span>.col = col;\n    <span class=\"hljs-built_in\">this</span>.row = row;\n  }\n\n  <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> count;\n  }\n\n  <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">col</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> col;\n  }\n\n  <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">row</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> row;\n  }\n}\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/dynamicProgramming/MatrixChainMultiplication.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/dynamicProgramming/MatrixChainMultiplication.kt",
      "code": "<span class=\"hljs-keyword\">package</span> dynamicProgramming\n\n<span class=\"hljs-comment\">/*\n * This is a dynamic programming implementation of matrix chain multiplication.\n * @Params p- array which represents the chain of matrices such that the ith matrix Ai is of dimension p[i-1] x p[i]\n * @Return minimum number of multiplications needed to multiply the chain\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">MatrixChainOrder</span><span class=\"hljs-params\">(p: <span class=\"hljs-type\">IntArray</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\n\n    <span class=\"hljs-keyword\">val</span> m = Array(p.size) { IntArray(p.size) }\n    <span class=\"hljs-keyword\">var</span> i: <span class=\"hljs-built_in\">Int</span>\n    <span class=\"hljs-keyword\">var</span> j: <span class=\"hljs-built_in\">Int</span>\n    <span class=\"hljs-keyword\">var</span> k: <span class=\"hljs-built_in\">Int</span>\n    <span class=\"hljs-keyword\">var</span> L: <span class=\"hljs-built_in\">Int</span>\n    <span class=\"hljs-keyword\">var</span> q: <span class=\"hljs-built_in\">Int</span>\n\n    i = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt; p.size) {\n        m[i][i] = <span class=\"hljs-number\">0</span>\n        i++\n    }\n\n    L = <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">while</span> (L &lt; p.size) {\n        i = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span> (i &lt; p.size - L + <span class=\"hljs-number\">1</span>) {\n            j = i + L - <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> (j == p.size) {\n                i++\n                <span class=\"hljs-keyword\">continue</span>\n            }\n            m[i][j] = <span class=\"hljs-built_in\">Int</span>.MAX_VALUE\n            k = i\n            <span class=\"hljs-keyword\">while</span> (k &lt;= j - <span class=\"hljs-number\">1</span>) {\n\n                q = (m[i][k] + m[k + <span class=\"hljs-number\">1</span>][j]\n                        + p[i - <span class=\"hljs-number\">1</span>] * p[k] * p[j])\n                <span class=\"hljs-keyword\">if</span> (q &lt; m[i][j]) m[i][j] = q\n                k++\n            }\n            i++\n        }\n        L++\n    }\n    <span class=\"hljs-keyword\">return</span> m[<span class=\"hljs-number\">1</span>][p.size - <span class=\"hljs-number\">1</span>]\n}"
    }
  },
  "contributors": [
    {
      "name": "Abhishek",
      "email": "raabhishek2@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "SunggyuLee",
      "email": "sq0216@gmail.com",
      "commits": 1
    },
    {
      "name": "Abhishek Chaturvedi",
      "email": "abhishekchaturvedi987@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
