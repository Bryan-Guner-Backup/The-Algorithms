{
  "slug": "perlinnoise",
  "name": "PerlinNoise",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/PerlinNoise.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/PerlinNoise.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * For detailed info and implementation see: &lt;a\n * href=&quot;http://devmag.org.za/2009/04/25/perlin-noise/&quot;&gt;Perlin-Noise&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PerlinNoise</span> {\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> width width of noise array\n   * <span class=\"hljs-doctag\">@param</span> height height of noise array\n   * <span class=\"hljs-doctag\">@param</span> octaveCount numbers of layers used for blending noise\n   * <span class=\"hljs-doctag\">@param</span> persistence value of impact each layer get while blending\n   * <span class=\"hljs-doctag\">@param</span> seed used for randomizer\n   * <span class=\"hljs-doctag\">@return</span> float array containing calculated &quot;Perlin-Noise&quot; values\n   */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span>[][] generatePerlinNoise(\n      <span class=\"hljs-type\">int</span> width, <span class=\"hljs-type\">int</span> height, <span class=\"hljs-type\">int</span> octaveCount, <span class=\"hljs-type\">float</span> persistence, <span class=\"hljs-type\">long</span> seed) {\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span>[][] base = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">float</span>[width][height];\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span>[][] perlinNoise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">float</span>[width][height];\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span>[][][] noiseLayers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">float</span>[octaveCount][][];\n\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>(seed);\n    <span class=\"hljs-comment\">// fill base array with random values as base for noise</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\n        base[x][y] = random.nextFloat();\n      }\n    }\n\n    <span class=\"hljs-comment\">// calculate octaves with different roughness</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">octave</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; octave &lt; octaveCount; octave++) {\n      noiseLayers[octave] = generatePerlinNoiseLayer(base, width, height, octave);\n    }\n\n    <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">amplitude</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1f</span>;\n    <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">totalAmplitude</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0f</span>;\n\n    <span class=\"hljs-comment\">// calculate perlin noise by blending each layer together with specific persistence</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">octave</span> <span class=\"hljs-operator\">=</span> octaveCount - <span class=\"hljs-number\">1</span>; octave &gt;= <span class=\"hljs-number\">0</span>; octave--) {\n      amplitude *= persistence;\n      totalAmplitude += amplitude;\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\n          <span class=\"hljs-comment\">// adding each value of the noise layer to the noise</span>\n          <span class=\"hljs-comment\">// by increasing amplitude the rougher noises will have more impact</span>\n          perlinNoise[x][y] += noiseLayers[octave][x][y] * amplitude;\n        }\n      }\n    }\n\n    <span class=\"hljs-comment\">// normalize values so that they stay between 0..1</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\n        perlinNoise[x][y] /= totalAmplitude;\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> perlinNoise;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> base base random float array\n   * <span class=\"hljs-doctag\">@param</span> width width of noise array\n   * <span class=\"hljs-doctag\">@param</span> height height of noise array\n   * <span class=\"hljs-doctag\">@param</span> octave current layer\n   * <span class=\"hljs-doctag\">@return</span> float array containing calculated &quot;Perlin-Noise-Layer&quot; values\n   */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span>[][] generatePerlinNoiseLayer(<span class=\"hljs-type\">float</span>[][] base, <span class=\"hljs-type\">int</span> width, <span class=\"hljs-type\">int</span> height, <span class=\"hljs-type\">int</span> octave) {\n    <span class=\"hljs-type\">float</span>[][] perlinNoiseLayer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">float</span>[width][height];\n\n    <span class=\"hljs-comment\">// calculate period (wavelength) for different shapes</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">period</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span> &lt;&lt; octave; <span class=\"hljs-comment\">// 2^k</span>\n    <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">frequency</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1f</span> / period; <span class=\"hljs-comment\">// 1/2^k</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\n      <span class=\"hljs-comment\">// calculates the horizontal sampling indices</span>\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x0</span> <span class=\"hljs-operator\">=</span> (x / period) * period;\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x1</span> <span class=\"hljs-operator\">=</span> (x0 + period) % width;\n      <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">horizintalBlend</span> <span class=\"hljs-operator\">=</span> (x - x0) * frequency;\n\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\n        <span class=\"hljs-comment\">// calculates the vertical sampling indices</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y0</span> <span class=\"hljs-operator\">=</span> (y / period) * period;\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y1</span> <span class=\"hljs-operator\">=</span> (y0 + period) % height;\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">verticalBlend</span> <span class=\"hljs-operator\">=</span> (y - y0) * frequency;\n\n        <span class=\"hljs-comment\">// blend top corners</span>\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">top</span> <span class=\"hljs-operator\">=</span> interpolate(base[x0][y0], base[x1][y0], horizintalBlend);\n\n        <span class=\"hljs-comment\">// blend bottom corners</span>\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">bottom</span> <span class=\"hljs-operator\">=</span> interpolate(base[x0][y1], base[x1][y1], horizintalBlend);\n\n        <span class=\"hljs-comment\">// blend top and bottom interpolation to get the final blend value for this cell</span>\n        perlinNoiseLayer[x][y] = interpolate(top, bottom, verticalBlend);\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> perlinNoiseLayer;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> a value of point a\n   * <span class=\"hljs-doctag\">@param</span> b value of point b\n   * <span class=\"hljs-doctag\">@param</span> alpha determine which value has more impact (closer to 0 -&gt; a, closer to 1 -&gt; b)\n   * <span class=\"hljs-doctag\">@return</span> interpolated value\n   */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">interpolate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> a, <span class=\"hljs-type\">float</span> b, <span class=\"hljs-type\">float</span> alpha)</span> {\n    <span class=\"hljs-keyword\">return</span> a * (<span class=\"hljs-number\">1</span> - alpha) + alpha * b;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> width;\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> height;\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> octaveCount;\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span> persistence;\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> seed;\n    <span class=\"hljs-keyword\">final</span> String charset;\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span>[][] perlinNoise;\n\n    System.out.println(<span class=\"hljs-string\">&quot;Width (int): &quot;</span>);\n    width = in.nextInt();\n\n    System.out.println(<span class=\"hljs-string\">&quot;Height (int): &quot;</span>);\n    height = in.nextInt();\n\n    System.out.println(<span class=\"hljs-string\">&quot;Octave count (int): &quot;</span>);\n    octaveCount = in.nextInt();\n\n    System.out.println(<span class=\"hljs-string\">&quot;Persistence (float): &quot;</span>);\n    persistence = in.nextFloat();\n\n    System.out.println(<span class=\"hljs-string\">&quot;Seed (long): &quot;</span>);\n    seed = in.nextLong();\n\n    System.out.println(<span class=\"hljs-string\">&quot;Charset (String): &quot;</span>);\n    charset = in.next();\n\n    perlinNoise = generatePerlinNoise(width, height, octaveCount, persistence, seed);\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] chars = charset.toCharArray();\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">length</span> <span class=\"hljs-operator\">=</span> chars.length;\n    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">step</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1f</span> / length;\n    <span class=\"hljs-comment\">// output based on charset</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">y</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> step;\n        <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">noiseValue</span> <span class=\"hljs-operator\">=</span> perlinNoise[x][y];\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> c : chars) {\n          <span class=\"hljs-keyword\">if</span> (noiseValue &lt;= value) {\n            System.out.print(c);\n            <span class=\"hljs-keyword\">break</span>;\n          }\n\n          value += step;\n        }\n      }\n\n      System.out.println();\n    }\n    in.close();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Kromzem",
      "email": "kromzem.games@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
