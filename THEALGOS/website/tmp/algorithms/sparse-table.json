{
  "slug": "sparse-table",
  "name": "Sparse Table",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "range_queries/sparse_table.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/range_queries/sparse_table.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file sparse_table.cpp\n * @brief Implementation of [Sparse Table](https://en.wikipedia.org/wiki/Range_minimum_query) data structure\n *\n * @details\n * Sparse Table is a data structure, that allows answering range queries.\n * It can answer most range queries in O(logn), but its true power is answering range minimum queries\n * or equivalent range maximum queries). For those queries it can compute the answer in O(1) time.\n *\n * * Running Time Complexity \\n\n * * Build : O(NlogN) \\n\n * * Range Query : O(1) \\n\n*/</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace range_queries\n * @brief Range Queries algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> range_queries {\n<span class=\"hljs-comment\">/**\n * @namespace sparse_table\n * @brief Range queries using sparse-tables\n */</span>\n <span class=\"hljs-keyword\">namespace</span> sparse_table {\n<span class=\"hljs-comment\">/**\n * This function precomputes intial log table for further use.\n * @param n value of the size of the input array\n * @return corresponding vector of the log table\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">template</span>&lt;<span class=\"hljs-keyword\">typename</span> T&gt;\nstd::vector&lt;T&gt; <span class=\"hljs-title\">computeLogs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;T&gt;&amp; A)</span> </span>{\n    <span class=\"hljs-type\">int</span> n = A.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">logs</span><span class=\"hljs-params\">(n)</span></span>;\n    logs[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span> ; i &lt; n ; i++) {\n        logs[i] = logs[i/<span class=\"hljs-number\">2</span>] + <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> logs;\n}\n\n<span class=\"hljs-comment\">/**\n * This functions builds the primary data structure sparse table\n * @param n value of the size of the input array\n * @param A array of the input integers\n * @param logs array of the log table\n * @return created sparse table data structure\n */</span>\n<span class=\"hljs-keyword\">template</span>&lt;<span class=\"hljs-keyword\">typename</span> T&gt;\nstd::vector&lt;std::vector&lt;T&gt; &gt; <span class=\"hljs-built_in\">buildTable</span>(<span class=\"hljs-keyword\">const</span> std::vector&lt;T&gt;&amp; A, <span class=\"hljs-keyword\">const</span> std::vector&lt;T&gt;&amp; logs) {\n    <span class=\"hljs-type\">int</span> n = A.<span class=\"hljs-built_in\">size</span>();\n    std::vector&lt;std::vector&lt;T&gt; &gt; <span class=\"hljs-built_in\">table</span>(<span class=\"hljs-number\">20</span>, std::<span class=\"hljs-built_in\">vector</span>&lt;T&gt;(n+<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>));\n    <span class=\"hljs-type\">int</span> curLen = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span> ; i &lt;= logs[n] ; i++) {\n        curLen = <span class=\"hljs-number\">1</span> &lt;&lt; i;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span> ; j + curLen &lt; n ; j++) {\n            <span class=\"hljs-keyword\">if</span> (curLen == <span class=\"hljs-number\">1</span>) {\n                table[i][j] = A[j];\n            }\n            <span class=\"hljs-keyword\">else</span> {\n                table[i][j] = std::<span class=\"hljs-built_in\">min</span>(table[i<span class=\"hljs-number\">-1</span>][j], table[i<span class=\"hljs-number\">-1</span>][j + curLen/<span class=\"hljs-number\">2</span>]);\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> table;\n}\n\n<span class=\"hljs-comment\">/**\n * This function is the query function to get the range minimum value\n * @param beg beginning index of the query range\n * @param end ending index of the query range\n * @param logs array of the log table\n * @param table sparse table data structure for the input array\n * @return minimum value for the [beg, end] range for the input array\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">template</span>&lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getMinimum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> beg, <span class=\"hljs-type\">int</span> end, <span class=\"hljs-keyword\">const</span> std::vector&lt;T&gt;&amp; logs, <span class=\"hljs-keyword\">const</span> std::vector&lt;std::vector&lt;T&gt; &gt;&amp; table)</span> </span>{\n    <span class=\"hljs-type\">int</span> p = logs[end - beg + <span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-type\">int</span> pLen = <span class=\"hljs-number\">1</span> &lt;&lt; p;\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">min</span>(table[p][beg], table[p][end - pLen + <span class=\"hljs-number\">1</span>]);\n}\n}\n} <span class=\"hljs-comment\">// namespace range_queries</span>\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; A{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">9</span>};\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; logs = range_queries::sparse_table::<span class=\"hljs-built_in\">computeLogs</span>(A);\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt;  table = range_queries::sparse_table::<span class=\"hljs-built_in\">buildTable</span>(A, logs);\n    <span class=\"hljs-built_in\">assert</span>(range_queries::sparse_table::<span class=\"hljs-built_in\">getMinimum</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, logs, table) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(range_queries::sparse_table::<span class=\"hljs-built_in\">getMinimum</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, logs, table) == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(range_queries::sparse_table::<span class=\"hljs-built_in\">getMinimum</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, logs, table) == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n"
    }
  },
  "contributors": [
    {
      "name": "Mann Patel",
      "email": "46739555+manncodes@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Arpan Mukherjee",
      "email": "player.arpan@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
