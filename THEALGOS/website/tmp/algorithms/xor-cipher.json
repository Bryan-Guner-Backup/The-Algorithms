{
  "slug": "xor-cipher",
  "name": "Xor Cipher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/xor_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/xor_cipher.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n        author: Christian Bender\n        date: 21.12.2017\n        class: XORCipher\n\n        This class implements the XOR-cipher algorithm and provides\n        some useful methods for encrypting and decrypting strings and\n        files.\n\n        Overview about methods\n\n        - encrypt : list of char\n        - decrypt : list of char\n        - encrypt_string : str\n        - decrypt_string : str\n        - encrypt_file : boolean\n        - decrypt_file : boolean\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">XORCipher</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, key: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        simple constructor that receives a key or uses\n        default key = 0\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># private field</span>\n        self.__key = key\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encrypt</span>(<span class=\"hljs-params\">self, content: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: &#x27;content&#x27; of type string and &#x27;key&#x27; of type int\n        output: encrypted string &#x27;content&#x27; as a list of chars\n        if key not passed the method uses the key by the constructor.\n        otherwise key = 1\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># precondition</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(key, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(content, <span class=\"hljs-built_in\">str</span>)\n\n        key = key <span class=\"hljs-keyword\">or</span> self.__key <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># make sure key can be any size</span>\n        <span class=\"hljs-keyword\">while</span> key &gt; <span class=\"hljs-number\">255</span>:\n            key -= <span class=\"hljs-number\">255</span>\n\n        <span class=\"hljs-comment\"># This will be returned</span>\n        ans = []\n\n        <span class=\"hljs-keyword\">for</span> ch <span class=\"hljs-keyword\">in</span> content:\n            ans.append(<span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-built_in\">ord</span>(ch) ^ key))\n\n        <span class=\"hljs-keyword\">return</span> ans\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt</span>(<span class=\"hljs-params\">self, content: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: &#x27;content&#x27; of type list and &#x27;key&#x27; of type int\n        output: decrypted string &#x27;content&#x27; as a list of chars\n        if key not passed the method uses the key by the constructor.\n        otherwise key = 1\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># precondition</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(key, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(content, <span class=\"hljs-built_in\">list</span>)\n\n        key = key <span class=\"hljs-keyword\">or</span> self.__key <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># make sure key can be any size</span>\n        <span class=\"hljs-keyword\">while</span> key &gt; <span class=\"hljs-number\">255</span>:\n            key -= <span class=\"hljs-number\">255</span>\n\n        <span class=\"hljs-comment\"># This will be returned</span>\n        ans = []\n\n        <span class=\"hljs-keyword\">for</span> ch <span class=\"hljs-keyword\">in</span> content:\n            ans.append(<span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-built_in\">ord</span>(ch) ^ key))\n\n        <span class=\"hljs-keyword\">return</span> ans\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encrypt_string</span>(<span class=\"hljs-params\">self, content: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: &#x27;content&#x27; of type string and &#x27;key&#x27; of type int\n        output: encrypted string &#x27;content&#x27;\n        if key not passed the method uses the key by the constructor.\n        otherwise key = 1\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># precondition</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(key, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(content, <span class=\"hljs-built_in\">str</span>)\n\n        key = key <span class=\"hljs-keyword\">or</span> self.__key <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># make sure key can be any size</span>\n        <span class=\"hljs-keyword\">while</span> key &gt; <span class=\"hljs-number\">255</span>:\n            key -= <span class=\"hljs-number\">255</span>\n\n        <span class=\"hljs-comment\"># This will be returned</span>\n        ans = <span class=\"hljs-string\">&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">for</span> ch <span class=\"hljs-keyword\">in</span> content:\n            ans += <span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-built_in\">ord</span>(ch) ^ key)\n\n        <span class=\"hljs-keyword\">return</span> ans\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt_string</span>(<span class=\"hljs-params\">self, content: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: &#x27;content&#x27; of type string and &#x27;key&#x27; of type int\n        output: decrypted string &#x27;content&#x27;\n        if key not passed the method uses the key by the constructor.\n        otherwise key = 1\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># precondition</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(key, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(content, <span class=\"hljs-built_in\">str</span>)\n\n        key = key <span class=\"hljs-keyword\">or</span> self.__key <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># make sure key can be any size</span>\n        <span class=\"hljs-keyword\">while</span> key &gt; <span class=\"hljs-number\">255</span>:\n            key -= <span class=\"hljs-number\">255</span>\n\n        <span class=\"hljs-comment\"># This will be returned</span>\n        ans = <span class=\"hljs-string\">&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">for</span> ch <span class=\"hljs-keyword\">in</span> content:\n            ans += <span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-built_in\">ord</span>(ch) ^ key)\n\n        <span class=\"hljs-keyword\">return</span> ans\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encrypt_file</span>(<span class=\"hljs-params\">self, file: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: filename (str) and a key (int)\n        output: returns true if encrypt process was\n        successful otherwise false\n        if key not passed the method uses the key by the constructor.\n        otherwise key = 1\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># precondition</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(file, <span class=\"hljs-built_in\">str</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(key, <span class=\"hljs-built_in\">int</span>)\n\n        <span class=\"hljs-keyword\">try</span>:\n            <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file) <span class=\"hljs-keyword\">as</span> fin:\n                <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;encrypt.out&quot;</span>, <span class=\"hljs-string\">&quot;w+&quot;</span>) <span class=\"hljs-keyword\">as</span> fout:\n\n                    <span class=\"hljs-comment\"># actual encrypt-process</span>\n                    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> fin:\n                        fout.write(self.encrypt_string(line, key))\n\n        <span class=\"hljs-keyword\">except</span> OSError:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt_file</span>(<span class=\"hljs-params\">self, file: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: filename (str) and a key (int)\n        output: returns true if decrypt process was\n        successful otherwise false\n        if key not passed the method uses the key by the constructor.\n        otherwise key = 1\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># precondition</span>\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(file, <span class=\"hljs-built_in\">str</span>) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(key, <span class=\"hljs-built_in\">int</span>)\n\n        <span class=\"hljs-keyword\">try</span>:\n            <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file) <span class=\"hljs-keyword\">as</span> fin:\n                <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;decrypt.out&quot;</span>, <span class=\"hljs-string\">&quot;w+&quot;</span>) <span class=\"hljs-keyword\">as</span> fout:\n\n                    <span class=\"hljs-comment\"># actual encrypt-process</span>\n                    <span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> fin:\n                        fout.write(self.decrypt_string(line, key))\n\n        <span class=\"hljs-keyword\">except</span> OSError:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n\n<span class=\"hljs-comment\"># Tests</span>\n<span class=\"hljs-comment\"># crypt = XORCipher()</span>\n<span class=\"hljs-comment\"># key = 67</span>\n\n<span class=\"hljs-comment\"># # test encrypt</span>\n<span class=\"hljs-comment\"># print(crypt.encrypt(&quot;hallo welt&quot;,key))</span>\n<span class=\"hljs-comment\"># # test decrypt</span>\n<span class=\"hljs-comment\"># print(crypt.decrypt(crypt.encrypt(&quot;hallo welt&quot;,key), key))</span>\n\n<span class=\"hljs-comment\"># # test encrypt_string</span>\n<span class=\"hljs-comment\"># print(crypt.encrypt_string(&quot;hallo welt&quot;,key))</span>\n\n<span class=\"hljs-comment\"># # test decrypt_string</span>\n<span class=\"hljs-comment\"># print(crypt.decrypt_string(crypt.encrypt_string(&quot;hallo welt&quot;,key),key))</span>\n\n<span class=\"hljs-comment\"># if (crypt.encrypt_file(&quot;test.txt&quot;,key)):</span>\n<span class=\"hljs-comment\">#       print(&quot;encrypt successful&quot;)</span>\n<span class=\"hljs-comment\"># else:</span>\n<span class=\"hljs-comment\">#       print(&quot;encrypt unsuccessful&quot;)</span>\n\n<span class=\"hljs-comment\"># if (crypt.decrypt_file(&quot;encrypt.out&quot;,key)):</span>\n<span class=\"hljs-comment\">#       print(&quot;decrypt successful&quot;)</span>\n<span class=\"hljs-comment\"># else:</span>\n<span class=\"hljs-comment\">#       print(&quot;decrypt unsuccessful&quot;)</span>\n"
    },
    "javascript": {
      "dir": "Ciphers/XORCipher.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Ciphers/XORCipher.js",
      "code": "<span class=\"hljs-comment\">/**\n * The XOR cipher is a type of additive cipher.\n * Each character is bitwise XORed with the key.\n * We loop through the input string, XORing each\n * character with the key.\n */</span>\n\n<span class=\"hljs-comment\">/**\n * Encrypt using an XOR cipher\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">str</span> - String to be encrypted\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Number</span>} <span class=\"hljs-variable\">key</span> - key for encryption\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">String</span>} encrypted string\n */</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">XOR</span> (str, key) {\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-string\">&#x27;&#x27;</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> elem <span class=\"hljs-keyword\">of</span> str) {\n    result += <span class=\"hljs-title class_\">String</span>.<span class=\"hljs-title function_\">fromCharCode</span>(elem.<span class=\"hljs-title function_\">charCodeAt</span>(<span class=\"hljs-number\">0</span>) ^ key)\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">const</span> encryptedString = <span class=\"hljs-title function_\">XOR</span>(<span class=\"hljs-string\">&#x27;test string&#x27;</span>, <span class=\"hljs-number\">32</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Encrypted: &#x27;</span>, encryptedString)\n<span class=\"hljs-keyword\">const</span> decryptedString = <span class=\"hljs-title function_\">XOR</span>(encryptedString, <span class=\"hljs-number\">32</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Decrypted: &#x27;</span>, decryptedString)\n"
    },
    "c-plus-plus": {
      "dir": "ciphers/xor_cipher.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers/xor_cipher.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file xor_cipher.cpp\n * @brief Implementation of [XOR cipher](https://en.wikipedia.org/wiki/XOR_cipher) algorithm.\n *\n * @details\n * In cryptography, the simple XOR cipher is a type of additive cipher, an encryption \n * algorithm that operates according to the principles: \n *\n * * \\f$A {\\oplus} 0 = A\\f$\n * * \\f$A {\\oplus} A = 0\\f$\n * * \\f$ (A {\\oplus} B) {\\oplus} C = A {\\oplus} (B {\\oplus} C)\\f$\n * * \\f$ (B {\\oplus} A) {\\oplus} B = B {\\oplus} 0 = B \\f$\n * \n * \n * where \\f$\\oplus\\f$ symbol denotes the exclusive disjunction (XOR) operation.\n * This operation is sometimes called modulus 2 addition (or subtraction, which is identical).\n * With this logic, a string of text can be encrypted by applying the bitwise XOR operator to\n * every character using a given key. To decrypt the output, merely reapplying the XOR function \n * with the key will remove the cipher.\n * \n * ### Algorithm\n * Choose the key for encryption and apply XOR operation to each character of a string. \n * Reapplying XOR operation to each character of encrypted string will give original string back.\n * \n * \\note This program implements XOR Cipher for string with ASCII characters. \n * \n * @author [Deep Raval](https://github.com/imdeep2905)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n\n<span class=\"hljs-comment\">/** \\namespace ciphers\n * \\brief Algorithms for encryption and decryption\n */</span>\n<span class=\"hljs-keyword\">namespace</span> ciphers {\n    <span class=\"hljs-comment\">/** \\namespace XOR\n     * \\brief Functions for [XOR cipher](https://en.wikipedia.org/wiki/XOR_cipher) algorithm.\n     */</span>\n    <span class=\"hljs-keyword\">namespace</span> XOR {   \n        <span class=\"hljs-comment\">/**\n         * Encrypt given text using XOR cipher.\n         * @param text text to be encrypted\n         * @param key to be used for encyption\n         * @return new encrypted text\n         */</span>\n        <span class=\"hljs-function\">std::string <span class=\"hljs-title\">encrypt</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;text, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> &amp;key)</span> </span>{\n            std::string encrypted_text = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// Empty string to store encrypted text</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;c: text) { <span class=\"hljs-comment\">// Going through each character</span>\n                <span class=\"hljs-type\">char</span> encrypted_char = <span class=\"hljs-built_in\">char</span>(c ^ key); <span class=\"hljs-comment\">// Applying encyption</span>\n                encrypted_text += encrypted_char; <span class=\"hljs-comment\">// Appending encrypted character</span>\n            }\n            <span class=\"hljs-keyword\">return</span> encrypted_text; <span class=\"hljs-comment\">// Returning encrypted text</span>\n        }\n        <span class=\"hljs-comment\">/**\n         * Decrypt given text using XOR cipher.\n         * @param text text to be encrypted\n         * @param key to be used for decryption\n         * @return new decrypted text\n         */</span>        \n        <span class=\"hljs-function\">std::string <span class=\"hljs-title\">decrypt</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;text, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> &amp;key)</span> </span>{\n            std::string decrypted_text = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// Empty string to store decrypted text</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;c : text) { <span class=\"hljs-comment\">// Going through each character</span>\n                <span class=\"hljs-type\">char</span> decrypted_char = <span class=\"hljs-built_in\">char</span>(c ^ key); <span class=\"hljs-comment\">// Applying decryption</span>\n                decrypted_text += decrypted_char; <span class=\"hljs-comment\">// Appending decrypted character</span>\n            }\n            <span class=\"hljs-keyword\">return</span> decrypted_text; <span class=\"hljs-comment\">// Returning decrypted text</span>\n        }\n    } <span class=\"hljs-comment\">// namespace XOR</span>\n} <span class=\"hljs-comment\">// namespace ciphers</span>\n\n<span class=\"hljs-comment\">/**\n * Function to test above algorithm\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Test 1</span>\n    std::string text1 = <span class=\"hljs-string\">&quot;Whipalsh! : Do watch this movie...&quot;</span>;\n    std::string encrypted1 = ciphers::XOR::<span class=\"hljs-built_in\">encrypt</span>(text1, <span class=\"hljs-number\">17</span>);\n    std::string decrypted1 = ciphers::XOR::<span class=\"hljs-built_in\">decrypt</span>(encrypted1, <span class=\"hljs-number\">17</span>);\n    <span class=\"hljs-built_in\">assert</span>(text1 == decrypted1);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text : &quot;</span> &lt;&lt; text1;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Encrypted text (with key = 17) : &quot;</span> &lt;&lt; encrypted1;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Decrypted text : &quot;</span>&lt;&lt; decrypted1 &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test 2</span>\n    std::string text2 = <span class=\"hljs-string\">&quot;-&gt;Valar M0rghulis&lt;-&quot;</span>;\n    std::string encrypted2 = ciphers::XOR::<span class=\"hljs-built_in\">encrypt</span>(text2, <span class=\"hljs-number\">29</span>);\n    std::string decrypted2 = ciphers::XOR::<span class=\"hljs-built_in\">decrypt</span>(encrypted2, <span class=\"hljs-number\">29</span>);\n    <span class=\"hljs-built_in\">assert</span>(text2 == decrypted2);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text : &quot;</span> &lt;&lt; text2;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Encrypted text (with key = 29) : &quot;</span> &lt;&lt; encrypted2;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot; , Decrypted text : &quot;</span>&lt;&lt; decrypted2 &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Driver Code */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Testing</span>\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "go": {
      "dir": "ciphers/xor/xorCipher.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/ciphers/xor/xorCipher.go",
      "code": "<span class=\"hljs-comment\">// Package xor is an encryption algorithm that operates the exclusive disjunction(XOR)</span>\n<span class=\"hljs-comment\">// ref: https://en.wikipedia.org/wiki/XOR_cipher</span>\n<span class=\"hljs-keyword\">package</span> xor\n\n<span class=\"hljs-comment\">// Encrypt encrypts with Xor encryption after converting each character to byte</span>\n<span class=\"hljs-comment\">// The returned value might not be readable because there is no guarantee</span>\n<span class=\"hljs-comment\">// which is within the ASCII range</span>\n<span class=\"hljs-comment\">// If using other type such as string, []int, or some other types,</span>\n<span class=\"hljs-comment\">// add the statements for converting the type to []byte.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Encrypt</span><span class=\"hljs-params\">(key <span class=\"hljs-keyword\">byte</span>, plaintext []<span class=\"hljs-keyword\">byte</span>)</span> []<span class=\"hljs-title\">byte</span></span> {\n\tcipherText := []<span class=\"hljs-keyword\">byte</span>{}\n\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> plaintext {\n\t\tcipherText = <span class=\"hljs-built_in\">append</span>(cipherText, key^ch)\n\t}\n\t<span class=\"hljs-keyword\">return</span> cipherText\n}\n\n<span class=\"hljs-comment\">// Decrypt decrypts with Xor encryption</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Decrypt</span><span class=\"hljs-params\">(key <span class=\"hljs-keyword\">byte</span>, cipherText []<span class=\"hljs-keyword\">byte</span>)</span> []<span class=\"hljs-title\">byte</span></span> {\n\tplainText := []<span class=\"hljs-keyword\">byte</span>{}\n\t<span class=\"hljs-keyword\">for</span> _, ch := <span class=\"hljs-keyword\">range</span> cipherText {\n\t\tplainText = <span class=\"hljs-built_in\">append</span>(plainText, key^ch)\n\t}\n\t<span class=\"hljs-keyword\">return</span> plainText\n}\n"
    },
    "php": {
      "dir": "ciphers/XORCipher.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/ciphers/XORCipher.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">// The XOR cipher is a type of additive cipher.</span>\n<span class=\"hljs-comment\">// Each character is bitwise XORed with the key.</span>\n<span class=\"hljs-comment\">// We loop through the input string, XORing each</span>\n<span class=\"hljs-comment\">// character with the key.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">xor_cipher</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$inp_string</span>, <span class=\"hljs-keyword\">string</span> <span class=\"hljs-variable\">$key</span></span>)\n</span>{\n\n    <span class=\"hljs-variable\">$key_len</span> = strlen(<span class=\"hljs-variable\">$key</span>);\n    <span class=\"hljs-variable\">$result</span> = <span class=\"hljs-keyword\">array</span>();\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$idx</span> = <span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$idx</span> &lt; strlen(<span class=\"hljs-variable\">$inp_string</span>);<span class=\"hljs-variable\">$idx</span>++)\n    {\n        array_push(<span class=\"hljs-variable\">$result</span>, <span class=\"hljs-variable\">$inp_string</span>[<span class=\"hljs-variable\">$idx</span>] ^ <span class=\"hljs-variable\">$key</span>[<span class=\"hljs-variable\">$idx</span> % <span class=\"hljs-variable\">$key_len</span>]);\n    }\n\n    <span class=\"hljs-keyword\">return</span> join(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-variable\">$result</span>);\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Rohit Chattopadhyay",
      "email": "rohit.chattopadhyay1@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "task4233",
      "email": "tks.m1205@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "LethargicLeprechaun",
      "email": "64550669+LethargicLeprechaun@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Deep Raval",
      "email": "deepraval2905@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "CapofWeird",
      "email": "40702379+CapofWeird@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}
