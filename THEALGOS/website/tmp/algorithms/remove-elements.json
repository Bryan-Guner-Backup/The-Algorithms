{
  "slug": "remove-elements",
  "name": "Remove Elements",
  "categories": ["datastructures", "array"],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "data_structures/arrays/remove_elements.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/remove_elements.rb",
      "code": "<span class=\"hljs-comment\"># Arrays - Remove Elements</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given an array nums and a value val, remove all instances of that value in-place and return the new length.</span>\n<span class=\"hljs-comment\"># Do not allocate extra space for another array,</span>\n<span class=\"hljs-comment\"># you must do this by modifying the input array in-place with O(1) extra memory.</span>\n<span class=\"hljs-comment\"># The order of elements can be changed. It doesn&#x27;t matter what you leave beyond the new length.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: nums = [3,2,2,3], val = 3</span>\n<span class=\"hljs-comment\"># Output: 2, nums = [2,2]</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: nums = [0,1,2,2,3,0,4,2], val = 2</span>\n<span class=\"hljs-comment\"># Output: 5, nums = [0,1,4,0,3]</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 1: Use `delete_if` Ruby method</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time complexity: O(n)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">remove_elements</span><span class=\"hljs-params\">(nums, val)</span></span>\n  nums.delete_if{ <span class=\"hljs-params\">|num|</span> num == val }\n  nums.length\n<span class=\"hljs-keyword\">end</span>\n\nputs remove_elements([<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-comment\"># =&gt; 2</span>\nputs remove_elements([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\"># =&gt; 5</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: Use `delete_at`, `unshift`, and `shift` Ruby method</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time complexity: O(n)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">remove_elements</span><span class=\"hljs-params\">(nums, val)</span></span>\n  result_length = nums.length\n  shift_length = <span class=\"hljs-number\">0</span>\n  nums.each_with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num, i|</span>\n    <span class=\"hljs-keyword\">if</span> num == val\n      nums.delete_at(i)\n      nums.unshift(<span class=\"hljs-string\">&#x27;removed&#x27;</span>)\n      result_length -=<span class=\"hljs-number\">1</span>\n      shift_length += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n  nums.shift(shift_length)\n  result_length\n<span class=\"hljs-keyword\">end</span>\n\nputs remove_elements([<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-comment\"># =&gt; 2</span>\nputs remove_elements([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\"># =&gt; 5</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 3: Two-pointers</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Complexity analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time complexity: O(n).</span>\n<span class=\"hljs-comment\"># Assume the array has a total of n elements,</span>\n<span class=\"hljs-comment\"># both pointer1 and pointer2 traverse at most 2n steps.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Space complexity: O(1).</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">remove_element</span><span class=\"hljs-params\">(nums, val)</span></span>\n  pointer1 = <span class=\"hljs-number\">0</span>\n\n  nums.each_with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|num, pointer2|</span>\n    <span class=\"hljs-keyword\">if</span> val != num\n      nums[pointer1] = nums[pointer2]\n      pointer1 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  pointer1\n<span class=\"hljs-keyword\">end</span>\n\nputs remove_elements([<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-comment\"># =&gt; 2</span>\nputs remove_elements([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\"># =&gt; 5</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 4: Two-pointers (Optimized)</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Complexity analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time complexity: O(n). Both pointer1 and pointer2 traverse at most n steps.</span>\n<span class=\"hljs-comment\"># In this approach, the number of assignment operations is equal to the</span>\n<span class=\"hljs-comment\"># number of elements to remove.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Space complexity: O(1)</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">remove_element</span><span class=\"hljs-params\">(nums, val)</span></span>\n  pointer1 = <span class=\"hljs-number\">0</span>\n  pointer2 = nums.length\n\n  <span class=\"hljs-keyword\">while</span> pointer1 &lt; pointer2\n    <span class=\"hljs-keyword\">if</span> nums[pointer1] == val\n      pointer2 -= <span class=\"hljs-number\">1</span>\n      nums[pointer1] = nums[pointer2]\n    <span class=\"hljs-keyword\">else</span>\n      pointer1 += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  pointer1\n<span class=\"hljs-keyword\">end</span>\n\nputs remove_elements([<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-comment\"># =&gt; 2</span>\nputs remove_elements([<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-comment\"># =&gt; 5</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 3
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}
