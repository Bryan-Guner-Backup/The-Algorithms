{
  "slug": "skip-list",
  "name": "Skip List",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/linked_list/skip_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/linked_list/skip_list.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nBased on &quot;Skip Lists: A Probabilistic Alternative to Balanced Trees&quot; by William Pugh\nhttps://epaperpress.com/sortsearch/download/skiplist.pdf\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> random <span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, <span class=\"hljs-type\">Optional</span>, TypeVar\n\nKT = TypeVar(<span class=\"hljs-string\">&quot;KT&quot;</span>)\nVT = TypeVar(<span class=\"hljs-string\">&quot;VT&quot;</span>)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>(<span class=\"hljs-type\">Generic</span>[KT, VT]):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, key: KT, value: VT</span>):\n        self.key = key\n        self.value = value\n        self.forward: <span class=\"hljs-built_in\">list</span>[Node[KT, VT]] = []\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :return: Visual representation of Node\n\n        &gt;&gt;&gt; node = Node(&quot;Key&quot;, 2)\n        &gt;&gt;&gt; repr(node)\n        &#x27;Node(Key: 2)&#x27;\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;Node(<span class=\"hljs-subst\">{self.key}</span>: <span class=\"hljs-subst\">{self.value}</span>)&quot;</span>\n\n<span class=\"hljs-meta\">    @property</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">level</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :return: Number of forward references\n\n        &gt;&gt;&gt; node = Node(&quot;Key&quot;, 2)\n        &gt;&gt;&gt; node.level\n        0\n        &gt;&gt;&gt; node.forward.append(Node(&quot;Key2&quot;, 4))\n        &gt;&gt;&gt; node.level\n        1\n        &gt;&gt;&gt; node.forward.append(Node(&quot;Key3&quot;, 6))\n        &gt;&gt;&gt; node.level\n        2\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.forward)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SkipList</span>(<span class=\"hljs-type\">Generic</span>[KT, VT]):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, p: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0.5</span>, max_level: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">16</span></span>):\n        self.head = Node(<span class=\"hljs-string\">&quot;root&quot;</span>, <span class=\"hljs-literal\">None</span>)\n        self.level = <span class=\"hljs-number\">0</span>\n        self.p = p\n        self.max_level = max_level\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :return: Visual representation of SkipList\n\n        &gt;&gt;&gt; skip_list = SkipList()\n        &gt;&gt;&gt; print(skip_list)\n        SkipList(level=0)\n        &gt;&gt;&gt; skip_list.insert(&quot;Key1&quot;, &quot;Value&quot;)\n        &gt;&gt;&gt; print(skip_list) # doctest: +ELLIPSIS\n        SkipList(level=...\n        [root]--...\n        [Key1]--Key1...\n        None    *...\n        &gt;&gt;&gt; skip_list.insert(&quot;Key2&quot;, &quot;OtherValue&quot;)\n        &gt;&gt;&gt; print(skip_list) # doctest: +ELLIPSIS\n        SkipList(level=...\n        [root]--...\n        [Key1]--Key1...\n        [Key2]--Key2...\n        None    *...\n        &quot;&quot;&quot;</span>\n\n        items = <span class=\"hljs-built_in\">list</span>(self)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(items) == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;SkipList(level=<span class=\"hljs-subst\">{self.level}</span>)&quot;</span>\n\n        label_size = <span class=\"hljs-built_in\">max</span>((<span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">str</span>(item)) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> items), default=<span class=\"hljs-number\">4</span>)\n        label_size = <span class=\"hljs-built_in\">max</span>(label_size, <span class=\"hljs-number\">4</span>) + <span class=\"hljs-number\">4</span>\n\n        node = self.head\n        lines = []\n\n        forwards = node.forward.copy()\n        lines.append(<span class=\"hljs-string\">f&quot;[<span class=\"hljs-subst\">{node.key}</span>]&quot;</span>.ljust(label_size, <span class=\"hljs-string\">&quot;-&quot;</span>) + <span class=\"hljs-string\">&quot;* &quot;</span> * <span class=\"hljs-built_in\">len</span>(forwards))\n        lines.append(<span class=\"hljs-string\">&quot; &quot;</span> * label_size + <span class=\"hljs-string\">&quot;| &quot;</span> * <span class=\"hljs-built_in\">len</span>(forwards))\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(node.forward) != <span class=\"hljs-number\">0</span>:\n            node = node.forward[<span class=\"hljs-number\">0</span>]\n\n            lines.append(\n                <span class=\"hljs-string\">f&quot;[<span class=\"hljs-subst\">{node.key}</span>]&quot;</span>.ljust(label_size, <span class=\"hljs-string\">&quot;-&quot;</span>)\n                + <span class=\"hljs-string\">&quot; &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(n.key) <span class=\"hljs-keyword\">if</span> n.key == node.key <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&quot;|&quot;</span> <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> forwards)\n            )\n            lines.append(<span class=\"hljs-string\">&quot; &quot;</span> * label_size + <span class=\"hljs-string\">&quot;| &quot;</span> * <span class=\"hljs-built_in\">len</span>(forwards))\n            forwards[: node.level] = node.forward\n\n        lines.append(<span class=\"hljs-string\">&quot;None&quot;</span>.ljust(label_size) + <span class=\"hljs-string\">&quot;* &quot;</span> * <span class=\"hljs-built_in\">len</span>(forwards))\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;SkipList(level=<span class=\"hljs-subst\">{self.level}</span>)\\n&quot;</span> + <span class=\"hljs-string\">&quot;\\n&quot;</span>.join(lines)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>):\n        node = self.head\n\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(node.forward) != <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">yield</span> node.forward[<span class=\"hljs-number\">0</span>].key\n            node = node.forward[<span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_level</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :return: Random level from [1, self.max_level] interval.\n                 Higher values are less likely.\n        &quot;&quot;&quot;</span>\n\n        level = <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">while</span> random() &lt; self.p <span class=\"hljs-keyword\">and</span> level &lt; self.max_level:\n            level += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">return</span> level\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_locate_node</span>(<span class=\"hljs-params\">self, key</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-type\">Optional</span>[Node[KT, VT]], <span class=\"hljs-built_in\">list</span>[Node[KT, VT]]]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :param key: Searched key,\n        :return: Tuple with searched node (or None if given key is not present)\n                 and list of nodes that refer (if key is present) of should refer to\n                 given node.\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># Nodes with refer or should refer to output node</span>\n        update_vector = []\n\n        node = self.head\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">reversed</span>(<span class=\"hljs-built_in\">range</span>(self.level)):\n            <span class=\"hljs-comment\"># i &lt; node.level - When node level is lesser than `i` decrement `i`.</span>\n            <span class=\"hljs-comment\"># node.forward[i].key &lt; key - Jumping to node with key value higher</span>\n            <span class=\"hljs-comment\">#                             or equal to searched key would result</span>\n            <span class=\"hljs-comment\">#                             in skipping searched key.</span>\n            <span class=\"hljs-keyword\">while</span> i &lt; node.level <span class=\"hljs-keyword\">and</span> node.forward[i].key &lt; key:\n                node = node.forward[i]\n            <span class=\"hljs-comment\"># Each leftmost node (relative to searched node) will potentially have to</span>\n            <span class=\"hljs-comment\"># be updated.</span>\n            update_vector.append(node)\n\n        update_vector.reverse()  <span class=\"hljs-comment\"># Note that we were inserting values in reverse order.</span>\n\n        <span class=\"hljs-comment\"># len(node.forward) != 0 - If current node doesn&#x27;t contain any further</span>\n        <span class=\"hljs-comment\">#                          references then searched key is not present.</span>\n        <span class=\"hljs-comment\"># node.forward[0].key == key - Next node key should be equal to search key</span>\n        <span class=\"hljs-comment\">#                              if key is present.</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(node.forward) != <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> node.forward[<span class=\"hljs-number\">0</span>].key == key:\n            <span class=\"hljs-keyword\">return</span> node.forward[<span class=\"hljs-number\">0</span>], update_vector\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>, update_vector\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">self, key: KT</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :param key: Key to remove from list.\n\n        &gt;&gt;&gt; skip_list = SkipList()\n        &gt;&gt;&gt; skip_list.insert(2, &quot;Two&quot;)\n        &gt;&gt;&gt; skip_list.insert(1, &quot;One&quot;)\n        &gt;&gt;&gt; skip_list.insert(3, &quot;Three&quot;)\n        &gt;&gt;&gt; list(skip_list)\n        [1, 2, 3]\n        &gt;&gt;&gt; skip_list.delete(2)\n        &gt;&gt;&gt; list(skip_list)\n        [1, 3]\n        &quot;&quot;&quot;</span>\n\n        node, update_vector = self._locate_node(key)\n\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">for</span> i, update_node <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(update_vector):\n                <span class=\"hljs-comment\"># Remove or replace all references to removed node.</span>\n                <span class=\"hljs-keyword\">if</span> update_node.level &gt; i <span class=\"hljs-keyword\">and</span> update_node.forward[i].key == key:\n                    <span class=\"hljs-keyword\">if</span> node.level &gt; i:\n                        update_node.forward[i] = node.forward[i]\n                    <span class=\"hljs-keyword\">else</span>:\n                        update_node.forward = update_node.forward[:i]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, key: KT, value: VT</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :param key: Key to insert.\n        :param value: Value associated with given key.\n\n        &gt;&gt;&gt; skip_list = SkipList()\n        &gt;&gt;&gt; skip_list.insert(2, &quot;Two&quot;)\n        &gt;&gt;&gt; skip_list.find(2)\n        &#x27;Two&#x27;\n        &gt;&gt;&gt; list(skip_list)\n        [2]\n        &quot;&quot;&quot;</span>\n\n        node, update_vector = self._locate_node(key)\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            node.value = value\n        <span class=\"hljs-keyword\">else</span>:\n            level = self.random_level()\n\n            <span class=\"hljs-keyword\">if</span> level &gt; self.level:\n                <span class=\"hljs-comment\"># After level increase we have to add additional nodes to head.</span>\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.level - <span class=\"hljs-number\">1</span>, level):\n                    update_vector.append(self.head)\n                self.level = level\n\n            new_node = Node(key, value)\n\n            <span class=\"hljs-keyword\">for</span> i, update_node <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(update_vector[:level]):\n                <span class=\"hljs-comment\"># Change references to pass through new node.</span>\n                <span class=\"hljs-keyword\">if</span> update_node.level &gt; i:\n                    new_node.forward.append(update_node.forward[i])\n\n                <span class=\"hljs-keyword\">if</span> update_node.level &lt; i + <span class=\"hljs-number\">1</span>:\n                    update_node.forward.append(new_node)\n                <span class=\"hljs-keyword\">else</span>:\n                    update_node.forward[i] = new_node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find</span>(<span class=\"hljs-params\">self, key: VT</span>) -&gt; <span class=\"hljs-type\">Optional</span>[VT]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        :param key: Search key.\n        :return: Value associated with given key or None if given key is not present.\n\n        &gt;&gt;&gt; skip_list = SkipList()\n        &gt;&gt;&gt; skip_list.find(2)\n        &gt;&gt;&gt; skip_list.insert(2, &quot;Two&quot;)\n        &gt;&gt;&gt; skip_list.find(2)\n        &#x27;Two&#x27;\n        &gt;&gt;&gt; skip_list.insert(2, &quot;Three&quot;)\n        &gt;&gt;&gt; skip_list.find(2)\n        &#x27;Three&#x27;\n        &quot;&quot;&quot;</span>\n\n        node, _ = self._locate_node(key)\n\n        <span class=\"hljs-keyword\">if</span> node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            <span class=\"hljs-keyword\">return</span> node.value\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_insert</span>():\n    skip_list = SkipList()\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">3</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">12</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key3&quot;</span>, <span class=\"hljs-number\">41</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key4&quot;</span>, -<span class=\"hljs-number\">19</span>)\n\n    node = skip_list.head\n    all_values = {}\n    <span class=\"hljs-keyword\">while</span> node.level != <span class=\"hljs-number\">0</span>:\n        node = node.forward[<span class=\"hljs-number\">0</span>]\n        all_values[node.key] = node.value\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(all_values) == <span class=\"hljs-number\">4</span>\n    <span class=\"hljs-keyword\">assert</span> all_values[<span class=\"hljs-string\">&quot;Key1&quot;</span>] == <span class=\"hljs-number\">3</span>\n    <span class=\"hljs-keyword\">assert</span> all_values[<span class=\"hljs-string\">&quot;Key2&quot;</span>] == <span class=\"hljs-number\">12</span>\n    <span class=\"hljs-keyword\">assert</span> all_values[<span class=\"hljs-string\">&quot;Key3&quot;</span>] == <span class=\"hljs-number\">41</span>\n    <span class=\"hljs-keyword\">assert</span> all_values[<span class=\"hljs-string\">&quot;Key4&quot;</span>] == -<span class=\"hljs-number\">19</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_insert_overrides_existing_value</span>():\n    skip_list = SkipList()\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">10</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">12</span>)\n\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key5&quot;</span>, <span class=\"hljs-number\">7</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key7&quot;</span>, <span class=\"hljs-number\">10</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key10&quot;</span>, <span class=\"hljs-number\">5</span>)\n\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key7&quot;</span>, <span class=\"hljs-number\">7</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key5&quot;</span>, <span class=\"hljs-number\">5</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key10&quot;</span>, <span class=\"hljs-number\">10</span>)\n\n    node = skip_list.head\n    all_values = {}\n    <span class=\"hljs-keyword\">while</span> node.level != <span class=\"hljs-number\">0</span>:\n        node = node.forward[<span class=\"hljs-number\">0</span>]\n        all_values[node.key] = node.value\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(all_values) != <span class=\"hljs-number\">4</span>:\n        <span class=\"hljs-built_in\">print</span>()\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(all_values) == <span class=\"hljs-number\">4</span>\n    <span class=\"hljs-keyword\">assert</span> all_values[<span class=\"hljs-string\">&quot;Key1&quot;</span>] == <span class=\"hljs-number\">12</span>\n    <span class=\"hljs-keyword\">assert</span> all_values[<span class=\"hljs-string\">&quot;Key7&quot;</span>] == <span class=\"hljs-number\">7</span>\n    <span class=\"hljs-keyword\">assert</span> all_values[<span class=\"hljs-string\">&quot;Key5&quot;</span>] == <span class=\"hljs-number\">5</span>\n    <span class=\"hljs-keyword\">assert</span> all_values[<span class=\"hljs-string\">&quot;Key10&quot;</span>] == <span class=\"hljs-number\">10</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_searching_empty_list_returns_none</span>():\n    skip_list = SkipList()\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Some key&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_search</span>():\n    skip_list = SkipList()\n\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">20</span>)\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key2&quot;</span>) == <span class=\"hljs-number\">20</span>\n\n    skip_list.insert(<span class=\"hljs-string\">&quot;Some Key&quot;</span>, <span class=\"hljs-number\">10</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">8</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;V&quot;</span>, <span class=\"hljs-number\">13</span>)\n\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Y&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key2&quot;</span>) == <span class=\"hljs-number\">8</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Some Key&quot;</span>) == <span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;V&quot;</span>) == <span class=\"hljs-number\">13</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_deleting_item_from_empty_list_do_nothing</span>():\n    skip_list = SkipList()\n    skip_list.delete(<span class=\"hljs-string\">&quot;Some key&quot;</span>)\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(skip_list.head.forward) == <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_deleted_items_are_not_founded_by_find_method</span>():\n    skip_list = SkipList()\n\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">12</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;V&quot;</span>, <span class=\"hljs-number\">13</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;X&quot;</span>, <span class=\"hljs-number\">14</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">15</span>)\n\n    skip_list.delete(<span class=\"hljs-string\">&quot;V&quot;</span>)\n    skip_list.delete(<span class=\"hljs-string\">&quot;Key2&quot;</span>)\n\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;V&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key2&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_delete_removes_only_given_key</span>():\n    skip_list = SkipList()\n\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">12</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;V&quot;</span>, <span class=\"hljs-number\">13</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;X&quot;</span>, <span class=\"hljs-number\">14</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">15</span>)\n\n    skip_list.delete(<span class=\"hljs-string\">&quot;V&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;V&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;X&quot;</span>) == <span class=\"hljs-number\">14</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key1&quot;</span>) == <span class=\"hljs-number\">12</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key2&quot;</span>) == <span class=\"hljs-number\">15</span>\n\n    skip_list.delete(<span class=\"hljs-string\">&quot;X&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;V&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;X&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key1&quot;</span>) == <span class=\"hljs-number\">12</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key2&quot;</span>) == <span class=\"hljs-number\">15</span>\n\n    skip_list.delete(<span class=\"hljs-string\">&quot;Key1&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;V&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;X&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key1&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key2&quot;</span>) == <span class=\"hljs-number\">15</span>\n\n    skip_list.delete(<span class=\"hljs-string\">&quot;Key2&quot;</span>)\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;V&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;X&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key1&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n    <span class=\"hljs-keyword\">assert</span> skip_list.find(<span class=\"hljs-string\">&quot;Key2&quot;</span>) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_delete_doesnt_leave_dead_nodes</span>():\n    skip_list = SkipList()\n\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key1&quot;</span>, <span class=\"hljs-number\">12</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;V&quot;</span>, <span class=\"hljs-number\">13</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;X&quot;</span>, <span class=\"hljs-number\">142</span>)\n    skip_list.insert(<span class=\"hljs-string\">&quot;Key2&quot;</span>, <span class=\"hljs-number\">15</span>)\n\n    skip_list.delete(<span class=\"hljs-string\">&quot;X&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">traverse_keys</span>(<span class=\"hljs-params\">node</span>):\n        <span class=\"hljs-keyword\">yield</span> node.key\n        <span class=\"hljs-keyword\">for</span> forward_node <span class=\"hljs-keyword\">in</span> node.forward:\n            <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> traverse_keys(forward_node)\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">set</span>(traverse_keys(skip_list.head))) == <span class=\"hljs-number\">4</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_iter_always_yields_sorted_values</span>():\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_sorted</span>(<span class=\"hljs-params\">lst</span>):\n        <span class=\"hljs-keyword\">for</span> item, next_item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(lst, lst[<span class=\"hljs-number\">1</span>:]):\n            <span class=\"hljs-keyword\">if</span> next_item &lt; item:\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    skip_list = SkipList()\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n        skip_list.insert(i, i)\n    <span class=\"hljs-keyword\">assert</span> is_sorted(<span class=\"hljs-built_in\">list</span>(skip_list))\n    skip_list.delete(<span class=\"hljs-number\">5</span>)\n    skip_list.delete(<span class=\"hljs-number\">8</span>)\n    skip_list.delete(<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">assert</span> is_sorted(<span class=\"hljs-built_in\">list</span>(skip_list))\n    skip_list.insert(-<span class=\"hljs-number\">12</span>, -<span class=\"hljs-number\">12</span>)\n    skip_list.insert(<span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">77</span>)\n    <span class=\"hljs-keyword\">assert</span> is_sorted(<span class=\"hljs-built_in\">list</span>(skip_list))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pytests</span>():\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">100</span>):\n        <span class=\"hljs-comment\"># Repeat test 100 times due to the probabilistic nature of skip list</span>\n        <span class=\"hljs-comment\"># random values == random bugs</span>\n        test_insert()\n        test_insert_overrides_existing_value()\n\n        test_searching_empty_list_returns_none()\n        test_search()\n\n        test_deleting_item_from_empty_list_do_nothing()\n        test_deleted_items_are_not_founded_by_find_method()\n        test_delete_removes_only_given_key()\n        test_delete_doesnt_leave_dead_nodes()\n\n        test_iter_always_yields_sorted_values()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; pytests()\n    &quot;&quot;&quot;</span>\n\n    skip_list = SkipList()\n    skip_list.insert(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;2&quot;</span>)\n    skip_list.insert(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;4&quot;</span>)\n    skip_list.insert(<span class=\"hljs-number\">6</span>, <span class=\"hljs-string\">&quot;4&quot;</span>)\n    skip_list.insert(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;5&quot;</span>)\n    skip_list.insert(<span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;4&quot;</span>)\n    skip_list.insert(<span class=\"hljs-number\">9</span>, <span class=\"hljs-string\">&quot;4&quot;</span>)\n\n    skip_list.delete(<span class=\"hljs-number\">4</span>)\n\n    <span class=\"hljs-built_in\">print</span>(skip_list)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "c-plus-plus": {
      "dir": "data_structures/skip_list.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/skip_list.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file skip_list.cpp\n * @brief Data structure for fast searching and insertion in \\f$O(\\log n)\\f$\n * time\n * @details\n * A skip list is a data structure that is used for storing a sorted list of\n * items with a help of hierarchy of linked lists that connect increasingly\n * sparse subsequences of the items\n *\n * References used: [GeeksForGeek](https://www.geeksforgeeks.org/skip-list/),\n * [OpenGenus](https://iq.opengenus.org/skip-list) for PseudoCode and Code\n * @author [enqidu](https://github.com/enqidu)\n * @author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/** \\namespace data_structures\n * \\brief Data-structure algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> data_structures {\n<span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-type\">int</span> MAX_LEVEL = <span class=\"hljs-number\">2</span>;        <span class=\"hljs-comment\">///&lt; Maximum level of skip list</span>\n<span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-type\">float</span> PROBABILITY = <span class=\"hljs-number\">0.5</span>;  <span class=\"hljs-comment\">///&lt; Current probability for &quot;coin toss&quot;</span>\n\n<span class=\"hljs-comment\">/**\n *  Node structure [Key][Node*, Node*...]\n */</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">int</span> key;      <span class=\"hljs-comment\">///&lt; key integer</span>\n    <span class=\"hljs-type\">void</span>* value;  <span class=\"hljs-comment\">///&lt; pointer of value</span>\n    std::vector&lt;std::shared_ptr&lt;Node&gt;&gt;\n        forward;  <span class=\"hljs-comment\">///&lt; nodes of the given one in all levels</span>\n\n    <span class=\"hljs-comment\">/**\n     * Creates node with provided key, level and value\n     * @param key is number that is used for comparision\n     * @param level is the maximum level node&#x27;s going to added\n     */</span>\n    <span class=\"hljs-built_in\">Node</span>(<span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span> level, <span class=\"hljs-type\">void</span>* value = <span class=\"hljs-literal\">nullptr</span>) : <span class=\"hljs-built_in\">key</span>(key), <span class=\"hljs-built_in\">value</span>(value) {\n        <span class=\"hljs-comment\">// Initialization of forward vector</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; (level + <span class=\"hljs-number\">1</span>); i++) {\n            forward.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-literal\">nullptr</span>);\n        }\n    }\n};\n\n<span class=\"hljs-comment\">/**\n * SkipList class implementation with basic methods\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SkipList</span> {\n    <span class=\"hljs-type\">int</span> level;                     <span class=\"hljs-comment\">///&lt; Maximum level of the skiplist</span>\n    std::shared_ptr&lt;Node&gt; header;  <span class=\"hljs-comment\">///&lt; Pointer to the header node</span>\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * Skip List constructor. Initializes header, start\n     * Node for searching in the list\n     */</span>\n    <span class=\"hljs-built_in\">SkipList</span>() {\n        level = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-comment\">// Header initialization</span>\n        header = std::<span class=\"hljs-built_in\">make_shared</span>&lt;Node&gt;(<span class=\"hljs-number\">-1</span>, MAX_LEVEL);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns random level of the skip list.\n     * Every higher level is 2 times less likely.\n     * @return random level for skip list\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">randomLevel</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-type\">int</span> lvl = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">float</span>&gt;(std::<span class=\"hljs-built_in\">rand</span>()) / RAND_MAX &lt; PROBABILITY &amp;&amp;\n               lvl &lt; MAX_LEVEL) {\n            lvl++;\n        }\n        <span class=\"hljs-keyword\">return</span> lvl;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Inserts elements with given key and value;\n     * It&#x27;s level is computed by randomLevel() function.\n     * @param key is number that is used for comparision\n     * @param value pointer to a value, that can be any type\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">void</span>* value)</span> </span>{\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Inserting&quot;</span> &lt;&lt; key &lt;&lt; <span class=\"hljs-string\">&quot;...&quot;</span>;\n        std::shared_ptr&lt;Node&gt; x = header;\n        std::array&lt;std::shared_ptr&lt;Node&gt;, MAX_LEVEL + <span class=\"hljs-number\">1</span>&gt; update;\n        update.<span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-literal\">nullptr</span>);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = level; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n            <span class=\"hljs-keyword\">while</span> (x-&gt;forward[i] != <span class=\"hljs-literal\">nullptr</span> &amp;&amp; x-&gt;forward[i]-&gt;key &lt; key) {\n                x = x-&gt;forward[i];\n            }\n            update[i] = x;\n        }\n\n        x = x-&gt;forward[<span class=\"hljs-number\">0</span>];\n\n        <span class=\"hljs-type\">bool</span> doesnt_exist = (x == <span class=\"hljs-literal\">nullptr</span> || x-&gt;key != key);\n        <span class=\"hljs-keyword\">if</span> (doesnt_exist) {\n            <span class=\"hljs-type\">int</span> rlevel = <span class=\"hljs-built_in\">randomLevel</span>();\n\n            <span class=\"hljs-keyword\">if</span> (rlevel &gt; level) {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = level + <span class=\"hljs-number\">1</span>; i &lt; rlevel + <span class=\"hljs-number\">1</span>; i++) update[i] = header;\n\n                <span class=\"hljs-comment\">// Update current level</span>\n                level = rlevel;\n            }\n\n            std::shared_ptr&lt;Node&gt; n =\n                std::<span class=\"hljs-built_in\">make_shared</span>&lt;Node&gt;(key, rlevel, value);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= rlevel; i++) {\n                n-&gt;forward[i] = update[i]-&gt;forward[i];\n                update[i]-&gt;forward[i] = n;\n            }\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Inserted&quot;</span> &lt;&lt; std::endl;\n\n        } <span class=\"hljs-keyword\">else</span> {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Exists&quot;</span> &lt;&lt; std::endl;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Deletes an element by key and prints if has been removed successfully\n     * @param key is number that is used for comparision.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">deleteElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> </span>{\n        std::shared_ptr&lt;Node&gt; x = header;\n\n        std::array&lt;std::shared_ptr&lt;Node&gt;, MAX_LEVEL + <span class=\"hljs-number\">1</span>&gt; update;\n        update.<span class=\"hljs-built_in\">fill</span>(<span class=\"hljs-literal\">nullptr</span>);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = level; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n            <span class=\"hljs-keyword\">while</span> (x-&gt;forward[i] != <span class=\"hljs-literal\">nullptr</span> &amp;&amp; x-&gt;forward[i]-&gt;key &lt; key) {\n                x = x-&gt;forward[i];\n            }\n            update[i] = x;\n        }\n\n        x = x-&gt;forward[<span class=\"hljs-number\">0</span>];\n\n        <span class=\"hljs-type\">bool</span> doesnt_exist = (x == <span class=\"hljs-literal\">nullptr</span> || x-&gt;key != key);\n\n        <span class=\"hljs-keyword\">if</span> (!doesnt_exist) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= level; i++) {\n                <span class=\"hljs-keyword\">if</span> (update[i]-&gt;forward[i] != x) {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n                update[i]-&gt;forward[i] = x-&gt;forward[i];\n            }\n            <span class=\"hljs-comment\">/* Remove empty levels*/</span>\n            <span class=\"hljs-keyword\">while</span> (level &gt; <span class=\"hljs-number\">0</span> &amp;&amp; header-&gt;forward[level] == <span class=\"hljs-literal\">nullptr</span>) level--;\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Deleted&quot;</span> &lt;&lt; std::endl;\n        } <span class=\"hljs-keyword\">else</span> {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Doesn&#x27;t exist&quot;</span> &lt;&lt; std::endl;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Searching element in skip list structure\n     * @param key is number that is used for comparision\n     * @return pointer to the value of the node\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span>* <span class=\"hljs-title\">searchElement</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> </span>{\n        std::shared_ptr&lt;Node&gt; x = header;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Searching for &quot;</span> &lt;&lt; key &lt;&lt; std::endl;\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = level; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n            <span class=\"hljs-keyword\">while</span> (x-&gt;forward[i] &amp;&amp; x-&gt;forward[i]-&gt;key &lt; key) x = x-&gt;forward[i];\n        }\n\n        x = x-&gt;forward[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">if</span> (x &amp;&amp; x-&gt;key == key) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Found&quot;</span> &lt;&lt; std::endl;\n            <span class=\"hljs-keyword\">return</span> x-&gt;value;\n        } <span class=\"hljs-keyword\">else</span> {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Not Found&quot;</span> &lt;&lt; std::endl;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nullptr</span>;\n        }\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Display skip list level\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">displayList</span><span class=\"hljs-params\">()</span> </span>{\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Displaying list:\\n&quot;</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= level; i++) {\n            std::shared_ptr&lt;Node&gt; node = header-&gt;forward[i];\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Level &quot;</span> &lt;&lt; (i) &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span>;\n            <span class=\"hljs-keyword\">while</span> (node != <span class=\"hljs-literal\">nullptr</span>) {\n                std::cout &lt;&lt; node-&gt;key &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n                node = node-&gt;forward[i];\n            }\n            std::cout &lt;&lt; std::endl;\n        }\n    }\n};\n\n}  <span class=\"hljs-comment\">// namespace data_structures</span>\n\n<span class=\"hljs-comment\">/**\n * Main function:\n * Creates and inserts random 2^[number of levels]\n * elements into the skip lists and than displays it\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">nullptr</span>));\n\n    data_structures::SkipList lst;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; (<span class=\"hljs-number\">1</span> &lt;&lt; (data_structures::MAX_LEVEL + <span class=\"hljs-number\">1</span>)); j++) {\n        <span class=\"hljs-type\">int</span> k = (std::<span class=\"hljs-built_in\">rand</span>() % (<span class=\"hljs-number\">1</span> &lt;&lt; (data_structures::MAX_LEVEL + <span class=\"hljs-number\">2</span>)) + <span class=\"hljs-number\">1</span>);\n        lst.<span class=\"hljs-built_in\">insertElement</span>(k, &amp;j);\n    }\n\n    lst.<span class=\"hljs-built_in\">displayList</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 7
    },
    {
      "name": "enqidu",
      "email": "dachikurcxalia@gmail.com",
      "commits": 33
    }
  ],
  "explanationUrl": {}
}
