{
  "slug": "hash-search",
  "name": "Hash Search",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "search/hash_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search/hash_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief Hash Search Algorithm - Best Time Complexity Ω(1)\n *\n * \\copyright 2020 Arctic2333\n *\n * In this algorithm, we use the method of division and reservation remainder to\n * construct the hash function, and use the method of chain address to solve the\n * conflict, that is, we link a chain list after the data, and store all the\n * records whose keywords are synonyms in the same linear chain list.\n *\n * @warning This program is only for educational purposes. It has serious flaws\n * in implementation with regards to memory management resulting in large\n * amounts of memory leaks.\n * @todo fix the program for memory leaks and better structure in C++ and not C\n * fashion\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 6      <span class=\"hljs-comment\">///&lt; Determines how much data</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> HASHMAX 5  <span class=\"hljs-comment\">///&lt; Determines the length of the hash table</span></span>\n\n<span class=\"hljs-type\">int</span> data[MAX] = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>};  <span class=\"hljs-comment\">//!&lt; test data</span>\n\n<span class=\"hljs-comment\">/**\n * a one-way linked list\n */</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">list</span> {\n    <span class=\"hljs-type\">int</span> key;            <span class=\"hljs-comment\">//!&lt; key value for node</span>\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">list</span>* next;  <span class=\"hljs-comment\">//!&lt; pointer to next link in the chain</span>\n} node,                 <span class=\"hljs-comment\">/**&lt; define node as one item list */</span>\n    *link;              <span class=\"hljs-comment\">///&lt; pointer to nodes</span>\n\nnode hashtab[HASHMAX];  <span class=\"hljs-comment\">///&lt; array of nodes</span>\n\n<span class=\"hljs-comment\">// int counter = 1;</span>\n\n<span class=\"hljs-comment\">/**\n * Mode of hash detection :\n * Division method\n * \\param [in] key to hash\n * \\returns hash value for `key`\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">h</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> </span>{ <span class=\"hljs-keyword\">return</span> key % HASHMAX; }\n\n<span class=\"hljs-comment\">/**\n * The same after the remainder will be added after the same hash header\n * To avoid conflict, zipper method is used\n * Insert elements into the linked list in the header\n * \\param [in] key key to add to list\n * \\warning dynamic memory allocated to `n` never gets freed.\n * \\todo fix memory leak\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">create_list</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> </span>{  <span class=\"hljs-comment\">// Construct hash table</span>\n    link p, n;\n    <span class=\"hljs-type\">int</span> index;\n    n = (link)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-built_in\">sizeof</span>(node));\n    n-&gt;key = key;\n    n-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    index = <span class=\"hljs-built_in\">h</span>(key);\n    p = hashtab[index].next;\n    <span class=\"hljs-keyword\">if</span> (p != <span class=\"hljs-literal\">NULL</span>) {\n        n-&gt;next = p;\n        hashtab[index].next = n;\n    } <span class=\"hljs-keyword\">else</span> {\n        hashtab[index].next = n;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Input the key to be searched, and get the hash header position through the H\n * (int key) function, then one-dimensional linear search. If found @return\n * element depth and number of searches If not found @return -1\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">hash_search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key, <span class=\"hljs-type\">int</span>* counter)</span> </span>{  <span class=\"hljs-comment\">// Hash lookup function</span>\n    link pointer;\n    <span class=\"hljs-type\">int</span> index;\n\n    *counter = <span class=\"hljs-number\">0</span>;\n    index = <span class=\"hljs-built_in\">h</span>(key);\n    pointer = hashtab[index].next;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;data[&quot;</span> &lt;&lt; index &lt;&lt; <span class=\"hljs-string\">&quot;]:&quot;</span>;\n\n    <span class=\"hljs-keyword\">while</span> (pointer != <span class=\"hljs-literal\">NULL</span>) {\n        counter[<span class=\"hljs-number\">0</span>]++;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;data[&quot;</span> &lt;&lt; pointer-&gt;key &lt;&lt; <span class=\"hljs-string\">&quot;]:&quot;</span>;\n        <span class=\"hljs-keyword\">if</span> (pointer-&gt;key == key)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">else</span>\n            pointer = pointer-&gt;next;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/** main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    link p;\n    <span class=\"hljs-type\">int</span> key, index, i, counter;  <span class=\"hljs-comment\">// Key is the value to be found</span>\n    index = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// You can write the input mode here</span>\n    <span class=\"hljs-keyword\">while</span> (index &lt; MAX) {  <span class=\"hljs-comment\">// Construct hash table</span>\n        <span class=\"hljs-built_in\">create_list</span>(data[index]);\n        index++;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; HASHMAX; i++) {  <span class=\"hljs-comment\">// Output hash table</span>\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;hashtab [&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;]\\n&quot;</span>;\n\n        p = hashtab[i].next;\n\n        <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;please int key:&quot;</span>;\n            <span class=\"hljs-keyword\">if</span> (p-&gt;key &gt; <span class=\"hljs-number\">0</span>)\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;[&quot;</span> &lt;&lt; p-&gt;key &lt;&lt; <span class=\"hljs-string\">&quot;]&quot;</span>;\n            p = p-&gt;next;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-keyword\">while</span> (key != <span class=\"hljs-number\">-1</span>) {\n        <span class=\"hljs-comment\">// You can write the input mode here</span>\n        <span class=\"hljs-comment\">// test key = 10</span>\n        key = <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">hash_search</span>(key, &amp;counter))\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;search time = &quot;</span> &lt;&lt; counter &lt;&lt; std::endl;\n        <span class=\"hljs-keyword\">else</span>\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;no found!\\n&quot;</span>;\n        key = <span class=\"hljs-number\">-1</span>;  <span class=\"hljs-comment\">// Exit test</span>\n        <span class=\"hljs-comment\">/* The test sample is returned as:\n         * data[0]:data[5]:data[15]:data[10]:search time = 3 The search is\n         * successful. There are 10 in this set of data */</span>\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "苏淞丰",
      "email": "50102735+Arctic2333@users.noreply.github.com",
      "commits": 9
    }
  ],
  "explanationUrl": {}
}
