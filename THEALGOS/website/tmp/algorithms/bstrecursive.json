{
  "slug": "bstrecursive",
  "name": "BSTRecursive",
  "categories": ["datastructures", "tree"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Trees/BSTRecursive.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Trees/BSTRecursive.java",
      "code": "<span class=\"hljs-comment\">/**\n *\n *\n * &lt;h1&gt;Binary Search Tree (Recursive)&lt;/h1&gt;\n *\n * An implementation of BST recursively. In recursive implementation the checks are down the tree\n * First root is checked if not found then its childs are checked Binary Search Tree is a binary\n * tree which satisfies three properties: left child is less than root node, right child is grater\n * than root node, both left and right childs must themselves be a BST.\n *\n * &lt;p&gt;I have made public functions as methods and to actually implement recursive approach I have\n * used private methods\n *\n * <span class=\"hljs-doctag\">@author</span> [Lakhan Nad](https://github.com/Lakhan-Nad)\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BSTRecursive</span> {\n  <span class=\"hljs-comment\">/** only data member is root of BST */</span>\n  <span class=\"hljs-keyword\">private</span> Node root;\n\n  <span class=\"hljs-comment\">/** Constructor use to initialize node as null */</span>\n  BSTRecursive() {\n    root = <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-comment\">/** main function for tests */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">BSTIterative</span> <span class=\"hljs-variable\">tree</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BSTIterative</span>();\n    tree.add(<span class=\"hljs-number\">5</span>);\n    tree.add(<span class=\"hljs-number\">10</span>);\n    tree.add(<span class=\"hljs-number\">9</span>);\n    <span class=\"hljs-keyword\">assert</span> !tree.find(<span class=\"hljs-number\">4</span>) : <span class=\"hljs-string\">&quot;4 is not yet present in BST&quot;</span>;\n    <span class=\"hljs-keyword\">assert</span> tree.find(<span class=\"hljs-number\">10</span>) : <span class=\"hljs-string\">&quot;10 should be present in BST&quot;</span>;\n    tree.remove(<span class=\"hljs-number\">9</span>);\n    <span class=\"hljs-keyword\">assert</span> !tree.find(<span class=\"hljs-number\">9</span>) : <span class=\"hljs-string\">&quot;9 was just deleted from BST&quot;</span>;\n    tree.remove(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">assert</span> !tree.find(<span class=\"hljs-number\">1</span>) : <span class=\"hljs-string\">&quot;Since 1 was not present so find deleting would do no change&quot;</span>;\n    tree.add(<span class=\"hljs-number\">20</span>);\n    tree.add(<span class=\"hljs-number\">70</span>);\n    <span class=\"hljs-keyword\">assert</span> tree.find(<span class=\"hljs-number\">70</span>) : <span class=\"hljs-string\">&quot;70 was inserted but not found&quot;</span>;\n    <span class=\"hljs-comment\">/*\n     Will print in following order\n     5 10 20 70\n    */</span>\n    tree.inorder();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Recursive method to delete a data if present in BST.\n   *\n   * <span class=\"hljs-doctag\">@param</span> node the current node to search for data\n   * <span class=\"hljs-doctag\">@param</span> data the value to be deleted\n   * <span class=\"hljs-doctag\">@return</span> Node the updated value of root parameter after delete operation\n   */</span>\n  <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> data)</span> {\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n      System.out.println(<span class=\"hljs-string\">&quot;No such data present in BST.&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data &gt; data) {\n      node.left = delete(node.left, data);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data &lt; data) {\n      node.right = delete(node.right, data);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (node.right == <span class=\"hljs-literal\">null</span> &amp;&amp; node.left == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// If it is leaf node</span>\n        node = <span class=\"hljs-literal\">null</span>;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.left == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// If only right node is present</span>\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> node.right;\n        node.right = <span class=\"hljs-literal\">null</span>;\n        node = temp;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.right == <span class=\"hljs-literal\">null</span>) { <span class=\"hljs-comment\">// Only left node is present</span>\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> node.left;\n        node.left = <span class=\"hljs-literal\">null</span>;\n        node = temp;\n      } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// both child are present</span>\n        <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> node.right;\n        <span class=\"hljs-comment\">// Find leftmost child of right subtree</span>\n        <span class=\"hljs-keyword\">while</span> (temp.left != <span class=\"hljs-literal\">null</span>) {\n          temp = temp.left;\n        }\n        node.data = temp.data;\n        node.right = delete(node.right, temp.data);\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> node;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Recursive insertion of value in BST.\n   *\n   * <span class=\"hljs-doctag\">@param</span> node to check if the data can be inserted in current node or its subtree\n   * <span class=\"hljs-doctag\">@param</span> data the value to be inserted\n   * <span class=\"hljs-doctag\">@return</span> the modified value of the root parameter after insertion\n   */</span>\n  <span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> data)</span> {\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n      node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(data);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data &gt; data) {\n      node.left = insert(node.left, data);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data &lt; data) {\n      node.right = insert(node.right, data);\n    }\n    <span class=\"hljs-keyword\">return</span> node;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Recursively print Preorder traversal of the BST\n   *\n   * <span class=\"hljs-doctag\">@param</span> node the root node\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preOrder</span><span class=\"hljs-params\">(Node node)</span> {\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\n      preOrder(node.left);\n    }\n    <span class=\"hljs-keyword\">if</span> (node.right != <span class=\"hljs-literal\">null</span>) {\n      preOrder(node.right);\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Recursively print Postorder travesal of BST.\n   *\n   * <span class=\"hljs-doctag\">@param</span> node the root node\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postOrder</span><span class=\"hljs-params\">(Node node)</span> {\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\n      postOrder(node.left);\n    }\n    <span class=\"hljs-keyword\">if</span> (node.right != <span class=\"hljs-literal\">null</span>) {\n      postOrder(node.right);\n    }\n    System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Recursively print Inorder traversal of BST.\n   *\n   * <span class=\"hljs-doctag\">@param</span> node the root node\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">inOrder</span><span class=\"hljs-params\">(Node node)</span> {\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (node.left != <span class=\"hljs-literal\">null</span>) {\n      inOrder(node.left);\n    }\n    System.out.print(node.data + <span class=\"hljs-string\">&quot; &quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (node.right != <span class=\"hljs-literal\">null</span>) {\n      inOrder(node.right);\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Serach recursively if the given value is present in BST or not.\n   *\n   * <span class=\"hljs-doctag\">@param</span> node the current node to check\n   * <span class=\"hljs-doctag\">@param</span> data the value to be checked\n   * <span class=\"hljs-doctag\">@return</span> boolean if data is present or not\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> data)</span> {\n    <span class=\"hljs-keyword\">if</span> (node == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data == data) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.data &gt; data) {\n      <span class=\"hljs-keyword\">return</span> search(node.left, data);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> search(node.right, data);\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * add in BST. if the value is not already present it is inserted or else no change takes place.\n   *\n   * <span class=\"hljs-doctag\">@param</span> data the value to be inserted\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\n    <span class=\"hljs-built_in\">this</span>.root = insert(<span class=\"hljs-built_in\">this</span>.root, data);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * If data is present in BST delete it else do nothing.\n   *\n   * <span class=\"hljs-doctag\">@param</span> data the value to be removed\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\n    <span class=\"hljs-built_in\">this</span>.root = delete(<span class=\"hljs-built_in\">this</span>.root, data);\n  }\n\n  <span class=\"hljs-comment\">/** To call inorder traversal on tree */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">inorder</span><span class=\"hljs-params\">()</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Inorder traversal of this tree is:&quot;</span>);\n    inOrder(<span class=\"hljs-built_in\">this</span>.root);\n    System.out.println(); <span class=\"hljs-comment\">// for next line</span>\n  }\n\n  <span class=\"hljs-comment\">/** To call postorder traversal on tree */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">postorder</span><span class=\"hljs-params\">()</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Postorder traversal of this tree is:&quot;</span>);\n    postOrder(<span class=\"hljs-built_in\">this</span>.root);\n    System.out.println(); <span class=\"hljs-comment\">// for next li</span>\n  }\n\n  <span class=\"hljs-comment\">/** To call preorder traversal on tree. */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">preorder</span><span class=\"hljs-params\">()</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;Preorder traversal of this tree is:&quot;</span>);\n    preOrder(<span class=\"hljs-built_in\">this</span>.root);\n    System.out.println(); <span class=\"hljs-comment\">// for next li</span>\n  }\n\n  <span class=\"hljs-comment\">/**\n   * To check if given value is present in tree or not.\n   *\n   * <span class=\"hljs-doctag\">@param</span> data the data to be found for\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\n    <span class=\"hljs-keyword\">if</span> (search(<span class=\"hljs-built_in\">this</span>.root, data)) {\n      System.out.println(data + <span class=\"hljs-string\">&quot; is present in given BST.&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    System.out.println(data + <span class=\"hljs-string\">&quot; not found.&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">/** The Node class used for building binary search tree */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">int</span> data;\n    Node left;\n    Node right;\n\n    <span class=\"hljs-comment\">/** Constructor with data as parameter */</span>\n    Node(<span class=\"hljs-type\">int</span> d) {\n      data = d;\n      left = <span class=\"hljs-literal\">null</span>;\n      right = <span class=\"hljs-literal\">null</span>;\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "lakhan_nad",
      "email": "lakhannad1999@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
