{
  "slug": "sublist-search",
  "name": "Sublist Search",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "search/sublist_search.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/search/sublist_search.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of the [Sublist Search\n * Algorithm](https://www.geeksforgeeks.org/sublist-search-search-a-linked-list-in-another-list)\n * @details\n *\n * ### Algorithm\n *\n *  * Sublist search is used to detect a presence of one list in another list.\n *  * Suppose we have a single-node list (let&#x27;s say the first list), and we\n *  want to ensure that the list is present in another list (let&#x27;s say the\n * second list), then we can perform the sublist search to find it.\n *\n *  * For instance, the first list contains these elements: 23 -&gt; 30 -&gt; 41,\n *  and the second list contains these elements: 10 -&gt; 15 -&gt; 23 -&gt; 30 -&gt; 41\n *  -&gt; 49. At a glance, we see that the first list presents in the second list.\n *\n * ### Working\n *\n *  * The sublist search algorithm works by comparing the first element\n *  of the first list with the first element of the second list.\n *  * If the two values don&#x27;t match, it goes to the next element of the\n *  second list. It does this until the two values match.\n *\n * @author [Nitin Sharma](https://github.com/foo290)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace search\n * @brief Searching algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> search {\n<span class=\"hljs-comment\">/**\n * @namespace sublist_search\n * @brief Functions for the [Sublist\n * Search](https://www.geeksforgeeks.org/sublist-search-search-a-linked-list-in-another-list)\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sublist_search {\n<span class=\"hljs-comment\">/**\n * @brief A Node structure representing a single link Node in a linked list\n */</span>\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">uint32_t</span> data = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">///&lt; the key/value of the node</span>\n    Node *next{};       <span class=\"hljs-comment\">///&lt; pointer to the next node</span>\n};\n\n<span class=\"hljs-comment\">/**\n * @brief A simple function to print the linked list\n * @param start The head of the linked list\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printLinkedList</span><span class=\"hljs-params\">(Node *start)</span> </span>{\n    <span class=\"hljs-keyword\">while</span> (start != <span class=\"hljs-literal\">nullptr</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;-&gt;&quot;</span> &lt;&lt; start-&gt;data;\n        start = start-&gt;next;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Give a vector of data,\n * it adds each element of vector in the linked list and return the address of\n * head pointer.\n * @param data A vector of &quot;int&quot; containing the data that is supposed to be\n * stored in nodes of linked list.\n * @returns Node* A head pointer to the linked list.\n */</span>\n<span class=\"hljs-function\">Node *<span class=\"hljs-title\">makeLinkedList</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; &amp;data)</span> </span>{\n    <span class=\"hljs-comment\">/// This is used in test cases for rapidly creating linked list with 100+</span>\n    <span class=\"hljs-comment\">/// elements, instead of hard-coding 100 elements in test cases.</span>\n    Node *head = <span class=\"hljs-literal\">nullptr</span>;\n    Node *tail = <span class=\"hljs-literal\">nullptr</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : data) {\n        Node *node = <span class=\"hljs-keyword\">new</span> Node;\n        node-&gt;data = i;\n        node-&gt;next = <span class=\"hljs-literal\">nullptr</span>;\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">nullptr</span>) {\n            head = node;\n            tail = node;\n        } <span class=\"hljs-keyword\">else</span> {\n            tail-&gt;next = node;\n            tail = tail-&gt;next;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> head;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main searching function\n * @param sublist A linked list which is supposed to be searched in mainList.\n * @param mainList A linked list in which sublist will be searched.\n * @returns true if the sublist is found\n * @returns false if the sublist is NOT found\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">sublistSearch</span><span class=\"hljs-params\">(Node *sublist, Node *mainList)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (sublist == <span class=\"hljs-literal\">nullptr</span> || mainList == <span class=\"hljs-literal\">nullptr</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">/// Initialize target pointer to the head node of sublist.</span>\n    Node *target_ptr = sublist;\n\n    <span class=\"hljs-keyword\">while</span> (mainList != <span class=\"hljs-literal\">nullptr</span>) {\n        <span class=\"hljs-comment\">/// Initialize main pointer to the current node of main list.</span>\n        Node *main_ptr = mainList;\n\n        <span class=\"hljs-keyword\">while</span> (target_ptr != <span class=\"hljs-literal\">nullptr</span>) {\n            <span class=\"hljs-keyword\">if</span> (main_ptr == <span class=\"hljs-literal\">nullptr</span>) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (main_ptr-&gt;data == target_ptr-&gt;data) {\n                <span class=\"hljs-comment\">/// If the data of target node and main node is equal then move</span>\n                <span class=\"hljs-comment\">/// to the next node of both lists.</span>\n                target_ptr = target_ptr-&gt;next;\n                main_ptr = main_ptr-&gt;next;\n\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> (target_ptr == <span class=\"hljs-literal\">nullptr</span>) {\n            <span class=\"hljs-comment\">/// Is target pointer becomes null that means the target list is</span>\n            <span class=\"hljs-comment\">/// been traversed without returning false. Which means the sublist</span>\n            <span class=\"hljs-comment\">/// has been found and return ture.</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-comment\">/// set the target pointer again to stating point of target list.</span>\n        target_ptr = sublist;\n\n        <span class=\"hljs-comment\">/// set the main pointer to the next element of the main list and repeat</span>\n        <span class=\"hljs-comment\">/// the algo.</span>\n        mainList = mainList-&gt;next;\n    }\n\n    <span class=\"hljs-comment\">/// If the main list is exhausted, means sublist does not found, return</span>\n    <span class=\"hljs-comment\">/// false</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n}  <span class=\"hljs-comment\">// namespace sublist_search</span>\n}  <span class=\"hljs-comment\">// namespace search</span>\n\n<span class=\"hljs-comment\">/**\n * @brief class encapsulating the necessary test cases\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestCases</span> {\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief A function to print given message on console.\n     * @tparam T Type of the given message.\n     * @returns void\n     * */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">log</span><span class=\"hljs-params\">(T msg)</span> </span>{\n        <span class=\"hljs-comment\">// It&#x27;s just to avoid writing cout and endl</span>\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;[TESTS] : ---&gt; &quot;</span> &lt;&lt; msg &lt;&lt; std::endl;\n    }\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/**\n     * @brief Executes test cases\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">runTests</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Running Tests...&quot;</span>);\n\n        <span class=\"hljs-built_in\">testCase_1</span>();\n        <span class=\"hljs-built_in\">testCase_2</span>();\n        <span class=\"hljs-built_in\">testCase_3</span>();\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Test Cases over!&quot;</span>);\n        std::cout &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief A test case contains edge case, Only contains one element.\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">testCase_1</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">bool</span> expectedOutput = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">///&lt; Expected output of this test</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;This is test case 1 for sublist search Algorithm : &quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Description:&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;   EDGE CASE : Only contains one element&quot;</span>);\n\n        std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; sublistData = {\n            <span class=\"hljs-number\">6</span>};  <span class=\"hljs-comment\">///&lt; Data to make linked list which will be the sublist</span>\n        std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; mainlistData = {\n            <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>,\n            <span class=\"hljs-number\">8</span>};  <span class=\"hljs-comment\">///&lt; Data to make linked list which will be the main list</span>\n\n        search::sublist_search::Node *sublistLL =\n            search::sublist_search::<span class=\"hljs-built_in\">makeLinkedList</span>(\n                sublistData);  <span class=\"hljs-comment\">///&lt; Sublist to be searched</span>\n        search::sublist_search::Node *mainlistLL =\n            search::sublist_search::<span class=\"hljs-built_in\">makeLinkedList</span>(\n                mainlistData);  <span class=\"hljs-comment\">///&lt; Main list in which sublist is to be</span>\n                                <span class=\"hljs-comment\">///&lt; searched</span>\n\n        <span class=\"hljs-type\">bool</span> exists = search::sublist_search::<span class=\"hljs-built_in\">sublistSearch</span>(\n            sublistLL, mainlistLL);  <span class=\"hljs-comment\">///&lt; boolean, if sublist exist or not</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert expression...&quot;</span>);\n        <span class=\"hljs-built_in\">assert</span>(exists == expectedOutput);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assertion check passed!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;[PASS] : TEST CASE 1 PASS!&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n\n        <span class=\"hljs-built_in\">delete</span> (sublistLL);\n        <span class=\"hljs-built_in\">delete</span> (mainlistLL);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief A test case which contains main list of 100 elements and sublist\n     * of 20.\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">testCase_2</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">bool</span> expectedOutput = <span class=\"hljs-literal\">true</span>;  <span class=\"hljs-comment\">/// Expected output of this test</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;This is test case 2 for sublist search Algorithm : &quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Description:&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;   contains main list of 100 elements and sublist of 20&quot;</span>);\n\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">sublistData</span><span class=\"hljs-params\">(\n            <span class=\"hljs-number\">20</span>)</span></span>;  <span class=\"hljs-comment\">///&lt; Data to make linked list which will be the sublist</span>\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">mainlistData</span><span class=\"hljs-params\">(\n            <span class=\"hljs-number\">100</span>)</span></span>;  <span class=\"hljs-comment\">///&lt; Main list in which sublist is to be searched</span>\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100</span>; i++) {\n            <span class=\"hljs-comment\">/// Inserts 100 elements in main list</span>\n            mainlistData[i] = i + <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">45</span>; i &lt; <span class=\"hljs-number\">65</span>; i++) {\n            <span class=\"hljs-comment\">/// Inserts 20 elements in sublist</span>\n            sublistData[temp] = i + <span class=\"hljs-number\">1</span>;\n            temp++;\n        }\n\n        search::sublist_search::Node *sublistLL =\n            search::sublist_search::<span class=\"hljs-built_in\">makeLinkedList</span>(\n                sublistData);  <span class=\"hljs-comment\">///&lt; Sublist to be searched</span>\n        search::sublist_search::Node *mainlistLL =\n            search::sublist_search::<span class=\"hljs-built_in\">makeLinkedList</span>(\n                mainlistData);  <span class=\"hljs-comment\">///&lt; Main list in which sublist is to be</span>\n                                <span class=\"hljs-comment\">///&lt; searched</span>\n\n        <span class=\"hljs-type\">bool</span> exists = search::sublist_search::<span class=\"hljs-built_in\">sublistSearch</span>(\n            sublistLL, mainlistLL);  <span class=\"hljs-comment\">///&lt; boolean, if sublist exist or not</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert expression...&quot;</span>);\n        <span class=\"hljs-built_in\">assert</span>(exists == expectedOutput);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assertion check passed!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;[PASS] : TEST CASE 2 PASS!&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief A test case which contains main list of 50 elements and sublist\n     * of 20.\n     * @returns void\n     * */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">testCase_3</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">bool</span> expectedOutput = <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">///&lt; Expected output of this test</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;This is test case 3 for sublist search Algorithm : &quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Description:&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;   contains main list of 50 elements and sublist of 20&quot;</span>);\n\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">sublistData</span><span class=\"hljs-params\">(<span class=\"hljs-number\">20</span>)</span></span>;  <span class=\"hljs-comment\">///&lt; Sublist to be searched</span>\n        <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; <span class=\"hljs-title\">mainlistData</span><span class=\"hljs-params\">(\n            <span class=\"hljs-number\">50</span>)</span></span>;  <span class=\"hljs-comment\">///&lt; Main list in which sublist is to be searched</span>\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">50</span>; i++) {\n            <span class=\"hljs-comment\">/// Inserts 100 elements in main list</span>\n            mainlistData.<span class=\"hljs-built_in\">push_back</span>(i + <span class=\"hljs-number\">1</span>);\n        }\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">45</span>; i &lt; <span class=\"hljs-number\">65</span>; i++) {\n            <span class=\"hljs-comment\">/// Inserts 20 elements in sublist</span>\n            sublistData.<span class=\"hljs-built_in\">push_back</span>(i + <span class=\"hljs-number\">1</span>);\n        }\n\n        search::sublist_search::Node *sublistLL =\n            search::sublist_search::<span class=\"hljs-built_in\">makeLinkedList</span>(\n                sublistData);  <span class=\"hljs-comment\">///&lt; Sublist to be searched</span>\n        search::sublist_search::Node *mainlistLL =\n            search::sublist_search::<span class=\"hljs-built_in\">makeLinkedList</span>(\n                mainlistData);  <span class=\"hljs-comment\">///&lt; Main list in which sublist is to be</span>\n                                <span class=\"hljs-comment\">///&lt; searched</span>\n\n        <span class=\"hljs-type\">bool</span> exists = search::sublist_search::<span class=\"hljs-built_in\">sublistSearch</span>(\n            sublistLL, mainlistLL);  <span class=\"hljs-comment\">///&lt; boolean, if sublist exist or not</span>\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Checking assert expression...&quot;</span>);\n        <span class=\"hljs-built_in\">assert</span>(exists == expectedOutput);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;Assertion check passed!&quot;</span>);\n\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;[PASS] : TEST CASE 3 PASS!&quot;</span>);\n        <span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">&quot;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&quot;</span>\n            <span class=\"hljs-string\">&quot;~&quot;</span>);\n    }\n};\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    TestCases tc;\n    tc.<span class=\"hljs-built_in\">runTests</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @param argc commandline argument count (ignored)\n * @param argv commandline array of arguments (ignored)\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> *argv[])</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; mainlistData = {\n        <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>};  <span class=\"hljs-comment\">///&lt; Main list in which sublist is to be searched</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; sublistData = {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>};  <span class=\"hljs-comment\">///&lt; Sublist to be searched</span>\n\n    search::sublist_search::Node *mainlistLL =\n        search::sublist_search::<span class=\"hljs-built_in\">makeLinkedList</span>(mainlistData);\n    search::sublist_search::Node *sublistLL =\n        search::sublist_search::<span class=\"hljs-built_in\">makeLinkedList</span>(\n            sublistData);  <span class=\"hljs-comment\">///&lt; Main list in which sublist is to be</span>\n                           <span class=\"hljs-comment\">///&lt; searched</span>\n\n    <span class=\"hljs-type\">bool</span> exists = search::sublist_search::<span class=\"hljs-built_in\">sublistSearch</span>(\n        sublistLL,\n        mainlistLL);  <span class=\"hljs-comment\">///&lt; boolean to check if the sublist exists or not</span>\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sublist: &quot;</span> &lt;&lt; std::endl;\n    search::sublist_search::<span class=\"hljs-built_in\">printLinkedList</span>(sublistLL);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Main list: &quot;</span> &lt;&lt; std::endl;\n    search::sublist_search::<span class=\"hljs-built_in\">printLinkedList</span>(mainlistLL);\n    std::cout &lt;&lt; std::endl;\n\n    <span class=\"hljs-keyword\">if</span> (exists) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;[TRUE] - sublist found in main list\\n&quot;</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;[FALSE] - sublist NOT found in main list\\n&quot;</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Nitin Sharma",
      "email": "32377892+foo290@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
