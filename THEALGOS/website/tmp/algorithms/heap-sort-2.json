{
  "slug": "heap-sort-2",
  "name": "Heap Sort 2",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting/heap_sort_2.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/heap_sort_2.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [Dhruv Pasricha](https://github.com/DhruvPasricha)\n * @brief [Heap Sort](https://en.wikipedia.org/wiki/Heapsort) implementation\n * @details\n * Heap-sort is a comparison-based sorting algorithm.\n * Heap-sort can be thought of as an improved selection sort:\n * like selection sort, heap sort divides its input into a sorted\n * and an unsorted region, and it iteratively shrinks the unsorted\n * region by extracting the largest element from it and inserting\n * it into the sorted region.\n *\n * Unlike selection sort,\n * heap sort does not waste time with a linear-time scan of the\n * unsorted region; rather, heap sort maintains the unsorted region\n * in a heap data structure to more quickly find the largest element\n * in each step.\n * Time Complexity : O(Nlog(N))\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>    <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>   <span class=\"hljs-comment\">/// for dynamic memory allocation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span>     <span class=\"hljs-comment\">/// for random numbers generation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span> <span class=\"hljs-comment\">/// for uint8_t, int8_t</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief Swapped two numbers using pointer\n * @param first pointer of first number\n * @param second pointer of second number\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> *first, <span class=\"hljs-type\">int8_t</span> *second)</span>\n{\n    <span class=\"hljs-type\">int8_t</span> temp = *first;\n    *first = *second;\n    *second = temp;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief heapifyDown Adjusts new root to the correct position in the heap\n * This heapify procedure can be thought of as building a heap from\n * the top down by successively shifting downward to establish the\n * heap property.\n * @param arr array to be sorted\n * @param size size of array\n * @return void\n*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">heapifyDown</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> *arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint8_t</span> size)</span>\n{\n    <span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span> &lt; size)\n    {\n        <span class=\"hljs-type\">uint8_t</span> maxChild = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span> &lt; size &amp;&amp; arr[<span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>] &gt; arr[maxChild])\n        {\n            maxChild = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">2</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (arr[maxChild] &gt; arr[i])\n        {\n            swap(&amp;arr[i], &amp;arr[maxChild]);\n            i = maxChild;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief heapifyUp Adjusts arr[i] to the correct position in the heap\n * This heapify procedure can be thought of as building a heap from\n * the bottom up by successively shifting upward to establish the\n * heap property.\n * @param arr array to be sorted\n * @param i index of the pushed element\n * @return void\n*/</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">heapifyUp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> *arr, <span class=\"hljs-type\">uint8_t</span> i)</span>\n{\n    <span class=\"hljs-keyword\">while</span> (i &gt; <span class=\"hljs-number\">0</span> &amp;&amp; arr[i / <span class=\"hljs-number\">2</span>] &lt; arr[i])\n    {\n        swap(&amp;arr[i / <span class=\"hljs-number\">2</span>], &amp;arr[i]);\n        i /= <span class=\"hljs-number\">2</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Heap Sort algorithm\n * @param arr array to be sorted\n * @param size size of the array\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">heapSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int8_t</span> *arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint8_t</span> size)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (size &lt;= <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        <span class=\"hljs-comment\">// Pushing `arr[i]` to the heap</span>\n\n        <span class=\"hljs-comment\">/*heapifyUp Adjusts arr[i] to the correct position in the heap*/</span>\n        heapifyUp(arr, i);\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = size - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">1</span>; i--)\n    {\n        <span class=\"hljs-comment\">// Moving current root to the end</span>\n        swap(&amp;arr[<span class=\"hljs-number\">0</span>], &amp;arr[i]);\n\n        <span class=\"hljs-comment\">// `heapifyDown` adjusts new root to the correct position in the heap</span>\n        heapifyDown(arr, i);\n\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint8_t</span> size = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-type\">int8_t</span> *arr = (<span class=\"hljs-type\">int8_t</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int8_t</span>));\n\n    <span class=\"hljs-comment\">/* generate size random numbers from 0 to 100 */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        arr[i] = rand() % <span class=\"hljs-number\">100</span>;\n    }\n    heapSort(arr, size);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint8_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; ++i)\n    {\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-built_in\">free</span>(arr);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">// Intializes random number generator</span>\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\n\n    test(); <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "DhruvPasricha",
      "email": "78498002+DhruvPasricha@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
