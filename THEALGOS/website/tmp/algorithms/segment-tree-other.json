{
  "slug": "segment-tree-other",
  "name": "Segment Tree Other",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/segment_tree_other.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/segment_tree_other.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nSegment_tree creates a segment tree with a given array and function,\nallowing queries to be done later in log(N) time\nfunction takes 2 values and returns a same type value\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> collections.abc <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Sequence</span>\n<span class=\"hljs-keyword\">from</span> queue <span class=\"hljs-keyword\">import</span> Queue\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SegmentTreeNode</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, start, end, val, left=<span class=\"hljs-literal\">None</span>, right=<span class=\"hljs-literal\">None</span></span>):\n        self.start = start\n        self.end = end\n        self.val = val\n        self.mid = (start + end) // <span class=\"hljs-number\">2</span>\n        self.left = left\n        self.right = right\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;val: <span class=\"hljs-subst\">{self.val}</span>, start: <span class=\"hljs-subst\">{self.start}</span>, end: <span class=\"hljs-subst\">{self.end}</span>&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SegmentTree</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; import operator\n    &gt;&gt;&gt; num_arr = SegmentTree([2, 1, 5, 3, 4], operator.add)\n    &gt;&gt;&gt; for node in num_arr.traverse():\n    ...     print(node)\n    ...\n    val: 15, start: 0, end: 4\n    val: 8, start: 0, end: 2\n    val: 7, start: 3, end: 4\n    val: 3, start: 0, end: 1\n    val: 5, start: 2, end: 2\n    val: 3, start: 3, end: 3\n    val: 4, start: 4, end: 4\n    val: 2, start: 0, end: 0\n    val: 1, start: 1, end: 1\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; num_arr.update(1, 5)\n    &gt;&gt;&gt; for node in num_arr.traverse():\n    ...     print(node)\n    ...\n    val: 19, start: 0, end: 4\n    val: 12, start: 0, end: 2\n    val: 7, start: 3, end: 4\n    val: 7, start: 0, end: 1\n    val: 5, start: 2, end: 2\n    val: 3, start: 3, end: 3\n    val: 4, start: 4, end: 4\n    val: 2, start: 0, end: 0\n    val: 5, start: 1, end: 1\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; num_arr.query_range(3, 4)\n    7\n    &gt;&gt;&gt; num_arr.query_range(2, 2)\n    5\n    &gt;&gt;&gt; num_arr.query_range(1, 3)\n    13\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; max_arr = SegmentTree([2, 1, 5, 3, 4], max)\n    &gt;&gt;&gt; for node in max_arr.traverse():\n    ...     print(node)\n    ...\n    val: 5, start: 0, end: 4\n    val: 5, start: 0, end: 2\n    val: 4, start: 3, end: 4\n    val: 2, start: 0, end: 1\n    val: 5, start: 2, end: 2\n    val: 3, start: 3, end: 3\n    val: 4, start: 4, end: 4\n    val: 2, start: 0, end: 0\n    val: 1, start: 1, end: 1\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; max_arr.update(1, 5)\n    &gt;&gt;&gt; for node in max_arr.traverse():\n    ...     print(node)\n    ...\n    val: 5, start: 0, end: 4\n    val: 5, start: 0, end: 2\n    val: 4, start: 3, end: 4\n    val: 5, start: 0, end: 1\n    val: 5, start: 2, end: 2\n    val: 3, start: 3, end: 3\n    val: 4, start: 4, end: 4\n    val: 2, start: 0, end: 0\n    val: 5, start: 1, end: 1\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; max_arr.query_range(3, 4)\n    4\n    &gt;&gt;&gt; max_arr.query_range(2, 2)\n    5\n    &gt;&gt;&gt; max_arr.query_range(1, 3)\n    5\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; min_arr = SegmentTree([2, 1, 5, 3, 4], min)\n    &gt;&gt;&gt; for node in min_arr.traverse():\n    ...     print(node)\n    ...\n    val: 1, start: 0, end: 4\n    val: 1, start: 0, end: 2\n    val: 3, start: 3, end: 4\n    val: 1, start: 0, end: 1\n    val: 5, start: 2, end: 2\n    val: 3, start: 3, end: 3\n    val: 4, start: 4, end: 4\n    val: 2, start: 0, end: 0\n    val: 1, start: 1, end: 1\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; min_arr.update(1, 5)\n    &gt;&gt;&gt; for node in min_arr.traverse():\n    ...     print(node)\n    ...\n    val: 2, start: 0, end: 4\n    val: 2, start: 0, end: 2\n    val: 3, start: 3, end: 4\n    val: 2, start: 0, end: 1\n    val: 5, start: 2, end: 2\n    val: 3, start: 3, end: 3\n    val: 4, start: 4, end: 4\n    val: 2, start: 0, end: 0\n    val: 5, start: 1, end: 1\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; min_arr.query_range(3, 4)\n    3\n    &gt;&gt;&gt; min_arr.query_range(2, 2)\n    5\n    &gt;&gt;&gt; min_arr.query_range(1, 3)\n    3\n    &gt;&gt;&gt;\n\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, collection: <span class=\"hljs-type\">Sequence</span>, function</span>):\n        self.collection = collection\n        self.fn = function\n        <span class=\"hljs-keyword\">if</span> self.collection:\n            self.root = self._build_tree(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(collection) - <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">update</span>(<span class=\"hljs-params\">self, i, val</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Update an element in log(N) time\n        :param i: position to be update\n        :param val: new value\n        &gt;&gt;&gt; import operator\n        &gt;&gt;&gt; num_arr = SegmentTree([2, 1, 5, 3, 4], operator.add)\n        &gt;&gt;&gt; num_arr.update(1, 5)\n        &gt;&gt;&gt; num_arr.query_range(1, 3)\n        13\n        &quot;&quot;&quot;</span>\n        self._update_tree(self.root, i, val)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">query_range</span>(<span class=\"hljs-params\">self, i, j</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Get range query value in log(N) time\n        :param i: left element index\n        :param j: right element index\n        :return: element combined in the range [i, j]\n        &gt;&gt;&gt; import operator\n        &gt;&gt;&gt; num_arr = SegmentTree([2, 1, 5, 3, 4], operator.add)\n        &gt;&gt;&gt; num_arr.update(1, 5)\n        &gt;&gt;&gt; num_arr.query_range(3, 4)\n        7\n        &gt;&gt;&gt; num_arr.query_range(2, 2)\n        5\n        &gt;&gt;&gt; num_arr.query_range(1, 3)\n        13\n        &gt;&gt;&gt;\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self._query_range(self.root, i, j)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_build_tree</span>(<span class=\"hljs-params\">self, start, end</span>):\n        <span class=\"hljs-keyword\">if</span> start == end:\n            <span class=\"hljs-keyword\">return</span> SegmentTreeNode(start, end, self.collection[start])\n        mid = (start + end) // <span class=\"hljs-number\">2</span>\n        left = self._build_tree(start, mid)\n        right = self._build_tree(mid + <span class=\"hljs-number\">1</span>, end)\n        <span class=\"hljs-keyword\">return</span> SegmentTreeNode(start, end, self.fn(left.val, right.val), left, right)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_update_tree</span>(<span class=\"hljs-params\">self, node, i, val</span>):\n        <span class=\"hljs-keyword\">if</span> node.start == i <span class=\"hljs-keyword\">and</span> node.end == i:\n            node.val = val\n            <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-keyword\">if</span> i &lt;= node.mid:\n            self._update_tree(node.left, i, val)\n        <span class=\"hljs-keyword\">else</span>:\n            self._update_tree(node.right, i, val)\n        node.val = self.fn(node.left.val, node.right.val)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_query_range</span>(<span class=\"hljs-params\">self, node, i, j</span>):\n        <span class=\"hljs-keyword\">if</span> node.start == i <span class=\"hljs-keyword\">and</span> node.end == j:\n            <span class=\"hljs-keyword\">return</span> node.val\n\n        <span class=\"hljs-keyword\">if</span> i &lt;= node.mid:\n            <span class=\"hljs-keyword\">if</span> j &lt;= node.mid:\n                <span class=\"hljs-comment\"># range in left child tree</span>\n                <span class=\"hljs-keyword\">return</span> self._query_range(node.left, i, j)\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-comment\"># range in left child tree and right child tree</span>\n                <span class=\"hljs-keyword\">return</span> self.fn(\n                    self._query_range(node.left, i, node.mid),\n                    self._query_range(node.right, node.mid + <span class=\"hljs-number\">1</span>, j),\n                )\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># range in right child tree</span>\n            <span class=\"hljs-keyword\">return</span> self._query_range(node.right, i, j)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">traverse</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">if</span> self.root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n            queue = Queue()\n            queue.put(self.root)\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> queue.empty():\n                node = queue.get()\n                <span class=\"hljs-keyword\">yield</span> node\n\n                <span class=\"hljs-keyword\">if</span> node.left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n                    queue.put(node.left)\n\n                <span class=\"hljs-keyword\">if</span> node.right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n                    queue.put(node.right)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> operator\n\n    <span class=\"hljs-keyword\">for</span> fn <span class=\"hljs-keyword\">in</span> [operator.add, <span class=\"hljs-built_in\">max</span>, <span class=\"hljs-built_in\">min</span>]:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;*&quot;</span> * <span class=\"hljs-number\">50</span>)\n        arr = SegmentTree([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], fn)\n        <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> arr.traverse():\n            <span class=\"hljs-built_in\">print</span>(node)\n        <span class=\"hljs-built_in\">print</span>()\n\n        arr.update(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>)\n        <span class=\"hljs-keyword\">for</span> node <span class=\"hljs-keyword\">in</span> arr.traverse():\n            <span class=\"hljs-built_in\">print</span>(node)\n        <span class=\"hljs-built_in\">print</span>()\n\n        <span class=\"hljs-built_in\">print</span>(arr.query_range(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>))  <span class=\"hljs-comment\"># 7</span>\n        <span class=\"hljs-built_in\">print</span>(arr.query_range(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>))  <span class=\"hljs-comment\"># 5</span>\n        <span class=\"hljs-built_in\">print</span>(arr.query_range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>))  <span class=\"hljs-comment\"># 13</span>\n        <span class=\"hljs-built_in\">print</span>()\n"
    }
  },
  "contributors": [
    {
      "name": "lanzhiwang",
      "email": "hzhilamp@163.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
