{
  "slug": "kadanealgorithm",
  "name": "KadaneAlgorithm",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DynamicProgramming/KadaneAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/KadaneAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-comment\">/**\n * Program to implement Kadaneâ€™s Algorithm to calculate maximum contiguous subarray sum of an array\n * Time Complexity: O(n)\n *\n * <span class=\"hljs-doctag\">@author</span> Nishita Aggarwal\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KadaneAlgorithm</span> {\n\n  <span class=\"hljs-comment\">/**\n   * This method implements Kadane&#x27;s Algorithm\n   *\n   * <span class=\"hljs-doctag\">@param</span> arr The input array\n   * <span class=\"hljs-doctag\">@return</span> The maximum contiguous subarray sum of the array\n   */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">largestContiguousSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[])</span> {\n    <span class=\"hljs-type\">int</span> i, len = arr.length, cursum = <span class=\"hljs-number\">0</span>, maxsum = Integer.MIN_VALUE;\n    <span class=\"hljs-keyword\">if</span> (len == <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// empty array</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n      cursum += arr[i];\n      <span class=\"hljs-keyword\">if</span> (cursum &gt; maxsum) {\n        maxsum = cursum;\n      }\n      <span class=\"hljs-keyword\">if</span> (cursum &lt;= <span class=\"hljs-number\">0</span>) {\n        cursum = <span class=\"hljs-number\">0</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> maxsum;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Main method\n   *\n   * <span class=\"hljs-doctag\">@param</span> args Command line arguments\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">sc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    <span class=\"hljs-type\">int</span> n, arr[], i;\n    n = sc.nextInt();\n    arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n      arr[i] = sc.nextInt();\n    }\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxContSum</span> <span class=\"hljs-operator\">=</span> largestContiguousSum(arr);\n    System.out.println(maxContSum);\n    sc.close();\n  }\n}\n"
    },
    "haskell": {
      "dir": "src/Maths/KadaneAlgorithm.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Maths/KadaneAlgorithm.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Maths.KadaneAlgorithm <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-comment\">-- Sample Input List </span>\n<span class=\"hljs-title\">inputList</span> :: [<span class=\"hljs-type\">Integer</span>]\n<span class=\"hljs-title\">inputList</span> = [<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, -<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]\n\n\n<span class=\"hljs-comment\">-- Helper function that updates values of maxSoFar and maxEndingHere</span>\n<span class=\"hljs-comment\">-- and call itself recursively over the values of the list </span>\n<span class=\"hljs-comment\">-- and when the list is empty, return the maxSoFar value</span>\n<span class=\"hljs-comment\">-- with the start and end indices.</span>\n<span class=\"hljs-title\">maxSubArrayHelper</span> :: <span class=\"hljs-type\">Integer</span> -&gt; <span class=\"hljs-type\">Integer</span> -&gt; <span class=\"hljs-type\">Integer</span> -&gt; <span class=\"hljs-type\">Integer</span> -&gt; <span class=\"hljs-type\">Integer</span> -&gt; [<span class=\"hljs-type\">Integer</span>] -&gt; (<span class=\"hljs-type\">Integer</span>, <span class=\"hljs-type\">Integer</span>, <span class=\"hljs-type\">Integer</span>)\n<span class=\"hljs-title\">maxSubArrayHelper</span> maxSoFar _ _ start end [] = (maxSoFar, start, end)\n<span class=\"hljs-title\">maxSubArrayHelper</span> maxSoFar maxEndingHere i start end (x:xs) = \n    <span class=\"hljs-keyword\">let</span> i&#x27; = i + <span class=\"hljs-number\">1</span>\n        maxEndingHere&#x27; = maxEndingHere + x\n    <span class=\"hljs-keyword\">in</span> \n        <span class=\"hljs-keyword\">if</span> maxSoFar &lt; maxEndingHere&#x27; <span class=\"hljs-keyword\">then</span> \n            maxSubArrayHelper maxEndingHere&#x27; maxEndingHere&#x27; i&#x27; start i xs\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> maxEndingHere&#x27; &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n            maxSubArrayHelper maxSoFar <span class=\"hljs-number\">0</span> i&#x27; i&#x27; i&#x27; xs\n        <span class=\"hljs-keyword\">else</span> \n            maxSubArrayHelper maxSoFar maxEndingHere&#x27; i&#x27; start end xs\n\n<span class=\"hljs-comment\">-- Initially maxSoFar (maximum sum till the previous iteration), </span>\n<span class=\"hljs-comment\">-- maxEndingHere (maximum sum till end index of the current iteration),</span>\n<span class=\"hljs-comment\">-- start (start index) and end (end index) are sent as 0</span>\n<span class=\"hljs-title\">maxSubArray</span> :: [<span class=\"hljs-type\">Integer</span>] -&gt; (<span class=\"hljs-type\">Integer</span>, <span class=\"hljs-type\">Integer</span>, <span class=\"hljs-type\">Integer</span>)\n<span class=\"hljs-title\">maxSubArray</span> = maxSubArrayHelper <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-comment\">-- Outputs (sum, start, end)</span>\n<span class=\"hljs-comment\">-- sum - sum from start to end indices of the input array</span>\n<span class=\"hljs-comment\">-- start:end - the subarray with max sum</span>\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    print (maxSubArray inputList)"
    }
  },
  "contributors": [
    {
      "name": "shashank152k",
      "email": "shashank152k@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Nishita Aggarwal",
      "email": "naggarwal97@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
