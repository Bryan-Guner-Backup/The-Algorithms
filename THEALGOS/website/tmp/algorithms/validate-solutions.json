{
  "slug": "validate-solutions",
  "name": "Validate Solutions",
  "categories": ["scripts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "scripts/validate_solutions.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/scripts/validate_solutions.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n<span class=\"hljs-keyword\">import</span> hashlib\n<span class=\"hljs-keyword\">import</span> importlib.util\n<span class=\"hljs-keyword\">import</span> json\n<span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> pathlib\n<span class=\"hljs-keyword\">from</span> types <span class=\"hljs-keyword\">import</span> ModuleType\n\n<span class=\"hljs-keyword\">import</span> pytest\n<span class=\"hljs-keyword\">import</span> requests\n\nPROJECT_EULER_DIR_PATH = pathlib.Path.cwd().joinpath(<span class=\"hljs-string\">&quot;project_euler&quot;</span>)\nPROJECT_EULER_ANSWERS_PATH = pathlib.Path.cwd().joinpath(\n    <span class=\"hljs-string\">&quot;scripts&quot;</span>, <span class=\"hljs-string\">&quot;project_euler_answers.json&quot;</span>\n)\n\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(PROJECT_EULER_ANSWERS_PATH) <span class=\"hljs-keyword\">as</span> file_handle:\n    PROBLEM_ANSWERS: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>] = json.load(file_handle)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">convert_path_to_module</span>(<span class=\"hljs-params\">file_path: pathlib.Path</span>) -&gt; ModuleType:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Converts a file path to a Python module&quot;&quot;&quot;</span>\n    spec = importlib.util.spec_from_file_location(file_path.name, <span class=\"hljs-built_in\">str</span>(file_path))\n    module = importlib.util.module_from_spec(spec)  <span class=\"hljs-comment\"># type: ignore</span>\n    spec.loader.exec_module(module)  <span class=\"hljs-comment\"># type: ignore</span>\n    <span class=\"hljs-keyword\">return</span> module\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">all_solution_file_paths</span>() -&gt; <span class=\"hljs-built_in\">list</span>[pathlib.Path]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Collects all the solution file path in the Project Euler directory&quot;&quot;&quot;</span>\n    solution_file_paths = []\n    <span class=\"hljs-keyword\">for</span> problem_dir_path <span class=\"hljs-keyword\">in</span> PROJECT_EULER_DIR_PATH.iterdir():\n        <span class=\"hljs-keyword\">if</span> problem_dir_path.is_file() <span class=\"hljs-keyword\">or</span> problem_dir_path.name.startswith(<span class=\"hljs-string\">&quot;_&quot;</span>):\n            <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">for</span> file_path <span class=\"hljs-keyword\">in</span> problem_dir_path.iterdir():\n            <span class=\"hljs-keyword\">if</span> file_path.suffix != <span class=\"hljs-string\">&quot;.py&quot;</span> <span class=\"hljs-keyword\">or</span> file_path.name.startswith((<span class=\"hljs-string\">&quot;_&quot;</span>, <span class=\"hljs-string\">&quot;test&quot;</span>)):\n                <span class=\"hljs-keyword\">continue</span>\n            solution_file_paths.append(file_path)\n    <span class=\"hljs-keyword\">return</span> solution_file_paths\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_files_url</span>() -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Return the pull request number which triggered this action.&quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(os.environ[<span class=\"hljs-string\">&quot;GITHUB_EVENT_PATH&quot;</span>]) <span class=\"hljs-keyword\">as</span> file:\n        event = json.load(file)\n    <span class=\"hljs-keyword\">return</span> event[<span class=\"hljs-string\">&quot;pull_request&quot;</span>][<span class=\"hljs-string\">&quot;url&quot;</span>] + <span class=\"hljs-string\">&quot;/files&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">added_solution_file_path</span>() -&gt; <span class=\"hljs-built_in\">list</span>[pathlib.Path]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Collects only the solution file path which got added in the current\n    pull request.\n\n    This will only be triggered if the script is ran from GitHub Actions.\n    &quot;&quot;&quot;</span>\n    solution_file_paths = []\n    headers = {\n        <span class=\"hljs-string\">&quot;Accept&quot;</span>: <span class=\"hljs-string\">&quot;application/vnd.github.v3+json&quot;</span>,\n        <span class=\"hljs-string\">&quot;Authorization&quot;</span>: <span class=\"hljs-string\">&quot;token &quot;</span> + os.environ[<span class=\"hljs-string\">&quot;GITHUB_TOKEN&quot;</span>],\n    }\n    files = requests.get(get_files_url(), headers=headers).json()\n    <span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> files:\n        filepath = pathlib.Path.cwd().joinpath(file[<span class=\"hljs-string\">&quot;filename&quot;</span>])\n        <span class=\"hljs-keyword\">if</span> (\n            filepath.suffix != <span class=\"hljs-string\">&quot;.py&quot;</span>\n            <span class=\"hljs-keyword\">or</span> filepath.name.startswith((<span class=\"hljs-string\">&quot;_&quot;</span>, <span class=\"hljs-string\">&quot;test&quot;</span>))\n            <span class=\"hljs-keyword\">or</span> <span class=\"hljs-keyword\">not</span> filepath.name.startswith(<span class=\"hljs-string\">&quot;sol&quot;</span>)\n        ):\n            <span class=\"hljs-keyword\">continue</span>\n        solution_file_paths.append(filepath)\n    <span class=\"hljs-keyword\">return</span> solution_file_paths\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">collect_solution_file_paths</span>() -&gt; <span class=\"hljs-built_in\">list</span>[pathlib.Path]:\n    <span class=\"hljs-keyword\">if</span> os.environ.get(<span class=\"hljs-string\">&quot;CI&quot;</span>) <span class=\"hljs-keyword\">and</span> os.environ.get(<span class=\"hljs-string\">&quot;GITHUB_EVENT_NAME&quot;</span>) == <span class=\"hljs-string\">&quot;pull_request&quot;</span>:\n        <span class=\"hljs-comment\"># Return only if there are any, otherwise default to all solutions</span>\n        <span class=\"hljs-keyword\">if</span> filepaths := added_solution_file_path():\n            <span class=\"hljs-keyword\">return</span> filepaths\n    <span class=\"hljs-keyword\">return</span> all_solution_file_paths()\n\n\n<span class=\"hljs-meta\">@pytest.mark.parametrize(<span class=\"hljs-params\">\n    <span class=\"hljs-string\">&quot;solution_path&quot;</span>,\n    collect_solution_file_paths(<span class=\"hljs-params\"></span>),\n    ids=<span class=\"hljs-keyword\">lambda</span> path: <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{path.parent.name}</span>/<span class=\"hljs-subst\">{path.name}</span>&quot;</span>,\n</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_project_euler</span>(<span class=\"hljs-params\">solution_path: pathlib.Path</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;Testing for all Project Euler solutions&quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># problem_[extract this part] and pad it with zeroes for width 3</span>\n    problem_number: <span class=\"hljs-built_in\">str</span> = solution_path.parent.name[<span class=\"hljs-number\">8</span>:].zfill(<span class=\"hljs-number\">3</span>)\n    expected: <span class=\"hljs-built_in\">str</span> = PROBLEM_ANSWERS[problem_number]\n    solution_module = convert_path_to_module(solution_path)\n    answer = <span class=\"hljs-built_in\">str</span>(solution_module.solution())  <span class=\"hljs-comment\"># type: ignore</span>\n    answer = hashlib.sha256(answer.encode()).hexdigest()\n    <span class=\"hljs-keyword\">assert</span> (\n        answer == expected\n    ), <span class=\"hljs-string\">f&quot;Expected solution to <span class=\"hljs-subst\">{problem_number}</span> to have hash <span class=\"hljs-subst\">{expected}</span>, got <span class=\"hljs-subst\">{answer}</span>&quot;</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Malte JÃ¼rgens",
      "email": "maltejur@web.de",
      "commits": 1
    },
    {
      "name": "Aniruddha Bhattacharjee",
      "email": "aniruddha97bhatt@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
