{
  "slug": "strassen-matrix-multiplication",
  "name": "Strassen Matrix Multiplication",
  "categories": ["divideandconquer"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer/strassen_matrix_multiplication.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer/strassen_matrix_multiplication.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> math\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">default_matrix_multiplication</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">list</span>, b: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Multiplication only for 2x2 matrices\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(a) != <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(a[<span class=\"hljs-number\">0</span>]) != <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(b) != <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(b[<span class=\"hljs-number\">0</span>]) != <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Matrices are not 2x2&quot;</span>)\n    new_matrix = [\n        [a[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] * b[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] + a[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] * b[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>], a[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] * b[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] + a[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] * b[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]],\n        [a[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] * b[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] + a[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] * b[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>], a[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] * b[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] + a[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] * b[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]],\n    ]\n    <span class=\"hljs-keyword\">return</span> new_matrix\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">matrix_addition</span>(<span class=\"hljs-params\">matrix_a: <span class=\"hljs-built_in\">list</span>, matrix_b: <span class=\"hljs-built_in\">list</span></span>):\n    <span class=\"hljs-keyword\">return</span> [\n        [matrix_a[row][col] + matrix_b[row][col] <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(matrix_a[row]))]\n        <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(matrix_a))\n    ]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">matrix_subtraction</span>(<span class=\"hljs-params\">matrix_a: <span class=\"hljs-built_in\">list</span>, matrix_b: <span class=\"hljs-built_in\">list</span></span>):\n    <span class=\"hljs-keyword\">return</span> [\n        [matrix_a[row][col] - matrix_b[row][col] <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(matrix_a[row]))]\n        <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(matrix_a))\n    ]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split_matrix</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">list</span>, <span class=\"hljs-built_in\">list</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Given an even length matrix, returns the top_left, top_right, bot_left, bot_right\n    quadrant.\n\n    &gt;&gt;&gt; split_matrix([[4,3,2,4],[2,3,1,1],[6,5,4,3],[8,4,1,6]])\n    ([[4, 3], [2, 3]], [[2, 4], [1, 1]], [[6, 5], [8, 4]], [[4, 3], [1, 6]])\n    &gt;&gt;&gt; split_matrix([\n    ...     [4,3,2,4,4,3,2,4],[2,3,1,1,2,3,1,1],[6,5,4,3,6,5,4,3],[8,4,1,6,8,4,1,6],\n    ...     [4,3,2,4,4,3,2,4],[2,3,1,1,2,3,1,1],[6,5,4,3,6,5,4,3],[8,4,1,6,8,4,1,6]\n    ... ])  # doctest: +NORMALIZE_WHITESPACE\n    ([[4, 3, 2, 4], [2, 3, 1, 1], [6, 5, 4, 3], [8, 4, 1, 6]], [[4, 3, 2, 4],\n      [2, 3, 1, 1], [6, 5, 4, 3], [8, 4, 1, 6]], [[4, 3, 2, 4], [2, 3, 1, 1],\n      [6, 5, 4, 3], [8, 4, 1, 6]], [[4, 3, 2, 4], [2, 3, 1, 1], [6, 5, 4, 3],\n      [8, 4, 1, 6]])\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(a) % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(a[<span class=\"hljs-number\">0</span>]) % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;Odd matrices are not supported!&quot;</span>)\n\n    matrix_length = <span class=\"hljs-built_in\">len</span>(a)\n    mid = matrix_length // <span class=\"hljs-number\">2</span>\n\n    top_right = [[a[i][j] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(mid, matrix_length)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(mid)]\n    bot_right = [\n        [a[i][j] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(mid, matrix_length)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(mid, matrix_length)\n    ]\n\n    top_left = [[a[i][j] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(mid)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(mid)]\n    bot_left = [[a[i][j] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(mid)] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(mid, matrix_length)]\n\n    <span class=\"hljs-keyword\">return</span> top_left, top_right, bot_left, bot_right\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">matrix_dimensions</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(matrix), <span class=\"hljs-built_in\">len</span>(matrix[<span class=\"hljs-number\">0</span>])\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_matrix</span>(<span class=\"hljs-params\">matrix: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(matrix)):\n        <span class=\"hljs-built_in\">print</span>(matrix[i])\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">actual_strassen</span>(<span class=\"hljs-params\">matrix_a: <span class=\"hljs-built_in\">list</span>, matrix_b: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Recursive function to calculate the product of two matrices, using the Strassen\n    Algorithm.  It only supports even length matrices.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> matrix_dimensions(matrix_a) == (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>):\n        <span class=\"hljs-keyword\">return</span> default_matrix_multiplication(matrix_a, matrix_b)\n\n    a, b, c, d = split_matrix(matrix_a)\n    e, f, g, h = split_matrix(matrix_b)\n\n    t1 = actual_strassen(a, matrix_subtraction(f, h))\n    t2 = actual_strassen(matrix_addition(a, b), h)\n    t3 = actual_strassen(matrix_addition(c, d), e)\n    t4 = actual_strassen(d, matrix_subtraction(g, e))\n    t5 = actual_strassen(matrix_addition(a, d), matrix_addition(e, h))\n    t6 = actual_strassen(matrix_subtraction(b, d), matrix_addition(g, h))\n    t7 = actual_strassen(matrix_subtraction(a, c), matrix_addition(e, f))\n\n    top_left = matrix_addition(matrix_subtraction(matrix_addition(t5, t4), t2), t6)\n    top_right = matrix_addition(t1, t2)\n    bot_left = matrix_addition(t3, t4)\n    bot_right = matrix_subtraction(matrix_subtraction(matrix_addition(t1, t5), t3), t7)\n\n    <span class=\"hljs-comment\"># construct the new matrix from our 4 quadrants</span>\n    new_matrix = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(top_right)):\n        new_matrix.append(top_left[i] + top_right[i])\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(bot_right)):\n        new_matrix.append(bot_left[i] + bot_right[i])\n    <span class=\"hljs-keyword\">return</span> new_matrix\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">strassen</span>(<span class=\"hljs-params\">matrix1: <span class=\"hljs-built_in\">list</span>, matrix2: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; strassen([[2,1,3],[3,4,6],[1,4,2],[7,6,7]], [[4,2,3,4],[2,1,1,1],[8,6,4,2]])\n    [[34, 23, 19, 15], [68, 46, 37, 28], [28, 18, 15, 12], [96, 62, 55, 48]]\n    &gt;&gt;&gt; strassen([[3,7,5,6,9],[1,5,3,7,8],[1,4,4,5,7]], [[2,4],[5,2],[1,7],[5,5],[7,8]])\n    [[139, 163], [121, 134], [100, 121]]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> matrix_dimensions(matrix1)[<span class=\"hljs-number\">1</span>] != matrix_dimensions(matrix2)[<span class=\"hljs-number\">0</span>]:\n        <span class=\"hljs-keyword\">raise</span> Exception(\n            <span class=\"hljs-string\">f&quot;Unable to multiply these matrices, please check the dimensions. \\n&quot;</span>\n            <span class=\"hljs-string\">f&quot;Matrix A:<span class=\"hljs-subst\">{matrix1}</span> \\nMatrix B:<span class=\"hljs-subst\">{matrix2}</span>&quot;</span>\n        )\n    dimension1 = matrix_dimensions(matrix1)\n    dimension2 = matrix_dimensions(matrix2)\n\n    <span class=\"hljs-keyword\">if</span> dimension1[<span class=\"hljs-number\">0</span>] == dimension1[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">and</span> dimension2[<span class=\"hljs-number\">0</span>] == dimension2[<span class=\"hljs-number\">1</span>]:\n        <span class=\"hljs-keyword\">return</span> [matrix1, matrix2]\n\n    maximum = <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">max</span>(dimension1), <span class=\"hljs-built_in\">max</span>(dimension2))\n    maxim = <span class=\"hljs-built_in\">int</span>(math.<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>, math.ceil(math.log2(maximum))))\n    new_matrix1 = matrix1\n    new_matrix2 = matrix2\n\n    <span class=\"hljs-comment\"># Adding zeros to the matrices so that the arrays dimensions are the same and also</span>\n    <span class=\"hljs-comment\"># power of 2</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, maxim):\n        <span class=\"hljs-keyword\">if</span> i &lt; dimension1[<span class=\"hljs-number\">0</span>]:\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(dimension1[<span class=\"hljs-number\">1</span>], maxim):\n                new_matrix1[i].append(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            new_matrix1.append([<span class=\"hljs-number\">0</span>] * maxim)\n        <span class=\"hljs-keyword\">if</span> i &lt; dimension2[<span class=\"hljs-number\">0</span>]:\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(dimension2[<span class=\"hljs-number\">1</span>], maxim):\n                new_matrix2[i].append(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            new_matrix2.append([<span class=\"hljs-number\">0</span>] * maxim)\n\n    final_matrix = actual_strassen(new_matrix1, new_matrix2)\n\n    <span class=\"hljs-comment\"># Removing the additional zeros</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, maxim):\n        <span class=\"hljs-keyword\">if</span> i &lt; dimension1[<span class=\"hljs-number\">0</span>]:\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(dimension2[<span class=\"hljs-number\">1</span>], maxim):\n                final_matrix[i].pop()\n        <span class=\"hljs-keyword\">else</span>:\n            final_matrix.pop()\n    <span class=\"hljs-keyword\">return</span> final_matrix\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    matrix1 = [\n        [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>],\n        [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>],\n        [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>],\n        [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>],\n        [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>],\n        [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>],\n        [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>],\n        [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>],\n        [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>],\n        [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>],\n    ]\n    matrix2 = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">7</span>], [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">4</span>]]\n    <span class=\"hljs-built_in\">print</span>(strassen(matrix1, matrix2))\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "AlexLeka98",
      "email": "32596824+AlexLeka98@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
