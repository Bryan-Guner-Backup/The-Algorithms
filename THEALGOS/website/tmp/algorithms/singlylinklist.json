{
  "slug": "singlylinklist",
  "name": "SinglyLinkList",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Linked-List/SinglyLinkList.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Linked-List/SinglyLinkList.js",
      "code": "<span class=\"hljs-comment\">/* SinglyLinkedList!!\n* A linked list is implar to an array, it hold values.\n* However, links in a linked list do not have indexes. With\n* a linked list you do not need to predetermine it&#x27;s size as\n* it grows and shrinks as it is edited. This is an example of\n* a singly linked list.\n*/</span>\n\n<span class=\"hljs-comment\">// Functions - add, remove, indexOf, elementAt, addAt, removeAt, view</span>\n\n<span class=\"hljs-comment\">// class LinkedList and constructor</span>\n<span class=\"hljs-comment\">// Creates a LinkedList</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">LinkedList</span> = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">LinkedList</span> () {\n    <span class=\"hljs-comment\">// Length of linklist and head is null at start</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = <span class=\"hljs-literal\">null</span>\n  }\n\n  <span class=\"hljs-comment\">// class node (constructor)</span>\n  <span class=\"hljs-comment\">// Creating Node with element&#x27;s value</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Node</span> = (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Node</span> (element) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">element</span> = element\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">next</span> = <span class=\"hljs-literal\">null</span>\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Node</span>\n  }())\n\n  <span class=\"hljs-comment\">// Returns length</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">size</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>\n  }\n\n  <span class=\"hljs-comment\">// Returns the head</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">head</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n  }\n\n  <span class=\"hljs-comment\">// Creates a node and adds it to linklist</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">add</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element</span>) {\n    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(element)\n    <span class=\"hljs-comment\">// Check if its the first element</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> === <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = node\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">let</span> currentNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n\n      <span class=\"hljs-comment\">// Loop till there is node present in the list</span>\n      <span class=\"hljs-keyword\">while</span> (currentNode.<span class=\"hljs-property\">next</span>) {\n        currentNode = currentNode.<span class=\"hljs-property\">next</span>\n      }\n\n      <span class=\"hljs-comment\">// Adding node to the end of the list</span>\n      currentNode.<span class=\"hljs-property\">next</span> = node\n    }\n    <span class=\"hljs-comment\">// Increment the length</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>++\n  }\n\n  <span class=\"hljs-comment\">// Removes the node with the value as param</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">remove</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element</span>) {\n    <span class=\"hljs-keyword\">let</span> currentNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n    <span class=\"hljs-keyword\">let</span> previousNode\n\n    <span class=\"hljs-comment\">// Check if the head node is the element to remove</span>\n    <span class=\"hljs-keyword\">if</span> (currentNode.<span class=\"hljs-property\">element</span> === element) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = currentNode.<span class=\"hljs-property\">next</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// Check which node is the node to remove</span>\n      <span class=\"hljs-keyword\">while</span> (currentNode.<span class=\"hljs-property\">element</span> !== element) {\n        previousNode = currentNode\n        currentNode = currentNode.<span class=\"hljs-property\">next</span>\n      }\n\n      <span class=\"hljs-comment\">// Removing the currentNode</span>\n      previousNode.<span class=\"hljs-property\">next</span> = currentNode.<span class=\"hljs-property\">next</span>\n    }\n\n    <span class=\"hljs-comment\">// Decrementing the length</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>--\n  }\n\n  <span class=\"hljs-comment\">// Return if the list is empty</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">isEmpty</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// Returns the index of the element passed as param otherwise -1</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">indexOf</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element</span>) {\n    <span class=\"hljs-keyword\">let</span> currentNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n    <span class=\"hljs-keyword\">let</span> index = -<span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> (currentNode) {\n      index++\n\n      <span class=\"hljs-comment\">// Checking if the node is the element we are searching for</span>\n      <span class=\"hljs-keyword\">if</span> (currentNode.<span class=\"hljs-property\">element</span> === element) {\n        <span class=\"hljs-keyword\">return</span> index + <span class=\"hljs-number\">1</span>\n      }\n      currentNode = currentNode.<span class=\"hljs-property\">next</span>\n    }\n\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-comment\">// Returns the element at an index</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">elementAt</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) {\n    <span class=\"hljs-keyword\">let</span> currentNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> (count &lt; index) {\n      count++\n      currentNode = currentNode.<span class=\"hljs-property\">next</span>\n    }\n    <span class=\"hljs-keyword\">return</span> currentNode.<span class=\"hljs-property\">element</span>\n  }\n\n  <span class=\"hljs-comment\">// Adds the element at specified index</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">addAt</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index, element</span>) {\n    index--\n    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(element)\n\n    <span class=\"hljs-keyword\">let</span> currentNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n    <span class=\"hljs-keyword\">let</span> previousNode\n    <span class=\"hljs-keyword\">let</span> currentIndex = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\">// Check if index is out of bounds of list</span>\n    <span class=\"hljs-keyword\">if</span> (index &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    }\n\n    <span class=\"hljs-comment\">// Check if index is the start of list</span>\n    <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>) {\n      node.<span class=\"hljs-property\">next</span> = currentNode\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = node\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">while</span> (currentIndex &lt; index) {\n        currentIndex++\n        previousNode = currentNode\n        currentNode = currentNode.<span class=\"hljs-property\">next</span>\n      }\n\n      <span class=\"hljs-comment\">// Adding the node at specified index</span>\n      node.<span class=\"hljs-property\">next</span> = currentNode\n      previousNode.<span class=\"hljs-property\">next</span> = node\n    }\n\n    <span class=\"hljs-comment\">// Incrementing the length</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>++\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n\n  <span class=\"hljs-comment\">// Removes the node at specified index</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">removeAt</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) {\n    index--\n    <span class=\"hljs-keyword\">let</span> currentNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n    <span class=\"hljs-keyword\">let</span> previousNode\n    <span class=\"hljs-keyword\">let</span> currentIndex = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\">// Check if index is present in list</span>\n    <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span> || index &gt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n    }\n\n    <span class=\"hljs-comment\">// Check if element is the first element</span>\n    <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = currentNode.<span class=\"hljs-property\">next</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">while</span> (currentIndex &lt; index) {\n        currentIndex++\n        previousNode = currentNode\n        currentNode = currentNode.<span class=\"hljs-property\">next</span>\n      }\n      previousNode.<span class=\"hljs-property\">next</span> = currentNode.<span class=\"hljs-property\">next</span>\n    }\n\n    <span class=\"hljs-comment\">// Decrementing the length</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>--\n    <span class=\"hljs-keyword\">return</span> currentNode.<span class=\"hljs-property\">element</span>\n  }\n\n  <span class=\"hljs-comment\">// Function to view the LinkedList</span>\n  <span class=\"hljs-title class_\">LinkedList</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">view</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">let</span> currentNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> (count &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">length</span>) {\n      count++\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(currentNode.<span class=\"hljs-property\">element</span>)\n      currentNode = currentNode.<span class=\"hljs-property\">next</span>\n    }\n  }\n\n  <span class=\"hljs-comment\">// returns the constructor</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">LinkedList</span>\n}())\n\n<span class=\"hljs-comment\">// Implementation of LinkedList</span>\n<span class=\"hljs-keyword\">const</span> linklist = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>()\nlinklist.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">2</span>)\nlinklist.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">5</span>)\nlinklist.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">8</span>)\nlinklist.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">12</span>)\nlinklist.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">17</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(linklist.<span class=\"hljs-title function_\">size</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(linklist.<span class=\"hljs-title function_\">removeAt</span>(<span class=\"hljs-number\">4</span>))\nlinklist.<span class=\"hljs-title function_\">addAt</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">15</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(linklist.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-number\">8</span>))\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(linklist.<span class=\"hljs-title function_\">size</span>())\nlinklist.<span class=\"hljs-title function_\">view</span>()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
