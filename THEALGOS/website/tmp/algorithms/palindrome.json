{
  "slug": "palindrome",
  "name": "Palindrome",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/palindrome.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/palindrome.py",
      "code": "<span class=\"hljs-comment\"># Algorithms to determine if a string is palindrome</span>\n\ntest_data = {\n    <span class=\"hljs-string\">&quot;MALAYALAM&quot;</span>: <span class=\"hljs-literal\">True</span>,\n    <span class=\"hljs-string\">&quot;String&quot;</span>: <span class=\"hljs-literal\">False</span>,\n    <span class=\"hljs-string\">&quot;rotor&quot;</span>: <span class=\"hljs-literal\">True</span>,\n    <span class=\"hljs-string\">&quot;level&quot;</span>: <span class=\"hljs-literal\">True</span>,\n    <span class=\"hljs-string\">&quot;A&quot;</span>: <span class=\"hljs-literal\">True</span>,\n    <span class=\"hljs-string\">&quot;BB&quot;</span>: <span class=\"hljs-literal\">True</span>,\n    <span class=\"hljs-string\">&quot;ABC&quot;</span>: <span class=\"hljs-literal\">False</span>,\n    <span class=\"hljs-string\">&quot;amanaplanacanalpanama&quot;</span>: <span class=\"hljs-literal\">True</span>,  <span class=\"hljs-comment\"># &quot;a man a plan a canal panama&quot;</span>\n}\n<span class=\"hljs-comment\"># Ensure our test data is valid</span>\n<span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">all</span>((key == key[::-<span class=\"hljs-number\">1</span>]) <span class=\"hljs-keyword\">is</span> value <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> test_data.items())\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_palindrome</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return True if s is a palindrome otherwise return False.\n\n    &gt;&gt;&gt; all(is_palindrome(key) is value for key, value in test_data.items())\n    True\n    &quot;&quot;&quot;</span>\n\n    start_i = <span class=\"hljs-number\">0</span>\n    end_i = <span class=\"hljs-built_in\">len</span>(s) - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> start_i &lt; end_i:\n        <span class=\"hljs-keyword\">if</span> s[start_i] == s[end_i]:\n            start_i += <span class=\"hljs-number\">1</span>\n            end_i -= <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_palindrome_recursive</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return True if s is a palindrome otherwise return False.\n\n    &gt;&gt;&gt; all(is_palindrome_recursive(key) is value for key, value in test_data.items())\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(s) &lt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">if</span> s[<span class=\"hljs-number\">0</span>] == s[<span class=\"hljs-built_in\">len</span>(s) - <span class=\"hljs-number\">1</span>]:\n        <span class=\"hljs-keyword\">return</span> is_palindrome_recursive(s[<span class=\"hljs-number\">1</span>:-<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_palindrome_slice</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return True if s is a palindrome otherwise return False.\n\n    &gt;&gt;&gt; all(is_palindrome_slice(key) is value for key, value in test_data.items())\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> s == s[::-<span class=\"hljs-number\">1</span>]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">for</span> key, value <span class=\"hljs-keyword\">in</span> test_data.items():\n        <span class=\"hljs-keyword\">assert</span> is_palindrome(key) <span class=\"hljs-keyword\">is</span> is_palindrome_recursive(key)\n        <span class=\"hljs-keyword\">assert</span> is_palindrome(key) <span class=\"hljs-keyword\">is</span> is_palindrome_slice(key)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{key:<span class=\"hljs-number\">21</span>}</span> <span class=\"hljs-subst\">{value}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;a man a plan a canal panama&quot;</span>)\n"
    },
    "javascript": {
      "dir": "Recursive/Palindrome.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Recursive/Palindrome.js",
      "code": "\n<span class=\"hljs-comment\">// Check whether the given string is Palindrome or not</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Palindrome</span> = (<span class=\"hljs-params\">str</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> str !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n    str = str.<span class=\"hljs-title function_\">toString</span>()\n  }\n\n  <span class=\"hljs-keyword\">if</span> (str === <span class=\"hljs-literal\">null</span> || str === <span class=\"hljs-literal\">undefined</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n\n  <span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span> || str.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n  }\n\n  <span class=\"hljs-keyword\">if</span> (str[<span class=\"hljs-number\">0</span>] !== str[str.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>]) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Palindrome</span>(str.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>, str.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>))\n  }\n};\n\n<span class=\"hljs-comment\">// testing</span>\n(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Palindrome: String: a = &#x27;</span>, <span class=\"hljs-title class_\">Palindrome</span>(<span class=\"hljs-string\">&#x27;a&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Palindrome: String: abba = &#x27;</span>, <span class=\"hljs-title class_\">Palindrome</span>(<span class=\"hljs-string\">&#x27;abba&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Palindrome: String: ababa = &#x27;</span>, <span class=\"hljs-title class_\">Palindrome</span>(<span class=\"hljs-string\">&#x27;ababa&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Not Palindrome: String: abbxa = &#x27;</span>, <span class=\"hljs-title class_\">Palindrome</span>(<span class=\"hljs-string\">&#x27;abbxa&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Not Palindrome: String: abxa = &#x27;</span>, <span class=\"hljs-title class_\">Palindrome</span>(<span class=\"hljs-string\">&#x27;abxa&#x27;</span>))\n})()\n"
    },
    "java": {
      "dir": "strings/Palindrome.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/strings/Palindrome.java",
      "code": "<span class=\"hljs-keyword\">package</span> strings;\n\n<span class=\"hljs-comment\">/** Wikipedia: https://en.wikipedia.org/wiki/Palindrome */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Palindrome</span> {\n\n  <span class=\"hljs-comment\">/** Driver Code */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    String[] palindromes = {<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;aba&quot;</span>, <span class=\"hljs-string\">&quot;123321&quot;</span>};\n    <span class=\"hljs-keyword\">for</span> (String s : palindromes) {\n      <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(s)</span> &amp;&amp; isPalindromeRecursion(s) &amp;&amp; isPalindrome1(s);\n    }\n\n    String[] notPalindromes = {<span class=\"hljs-string\">&quot;abb&quot;</span>, <span class=\"hljs-string\">&quot;abc&quot;</span>, <span class=\"hljs-string\">&quot;abc123&quot;</span>};\n    <span class=\"hljs-keyword\">for</span> (String s : notPalindromes) {\n      <span class=\"hljs-keyword\">assert</span> !isPalindrome(s) &amp;&amp; !isPalindromeRecursion(s) &amp;&amp; !isPalindrome1(s);\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if a string is palindrome string or not\n   *\n   * <span class=\"hljs-doctag\">@param</span> s a string to check\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if given string is palindrome, otherwise {<span class=\"hljs-doctag\">@code</span> false}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(String s)</span> {\n    <span class=\"hljs-keyword\">return</span> (s == <span class=\"hljs-literal\">null</span> || s.length() &lt;= <span class=\"hljs-number\">1</span>) || s.equals(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(s).reverse().toString());\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if a string is palindrome string or not using recursion\n   *\n   * <span class=\"hljs-doctag\">@param</span> s a string to check\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if given string is palindrome, otherwise {<span class=\"hljs-doctag\">@code</span> false}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPalindromeRecursion</span><span class=\"hljs-params\">(String s)</span> {\n    <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-literal\">null</span> || s.length() &lt;= <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (s.charAt(<span class=\"hljs-number\">0</span>) != s.charAt(s.length() - <span class=\"hljs-number\">1</span>)) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> isPalindrome(s.substring(<span class=\"hljs-number\">1</span>, s.length() - <span class=\"hljs-number\">1</span>));\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if a string is palindrome string or not another way\n   *\n   * <span class=\"hljs-doctag\">@param</span> s a string to check\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if given string is palindrome, otherwise {<span class=\"hljs-doctag\">@code</span> false}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPalindrome1</span><span class=\"hljs-params\">(String s)</span> {\n    <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-literal\">null</span> || s.length() &lt;= <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, j = s.length() - <span class=\"hljs-number\">1</span>; i &lt; j; ++i, --j) {\n      <span class=\"hljs-keyword\">if</span> (s.charAt(i) != s.charAt(j)) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n}\n"
    },
    "c": {
      "dir": "misc/palindrome.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/palindrome.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Program to identify if a number is [palindrome\n * number](https://en.wikipedia.org/wiki/Palindrome) or not.\n * @see project_euler/problem_4/sol1.c\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span>;\n\n<span class=\"hljs-comment\">/** Driver Code */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    assert(isPalindrome(<span class=\"hljs-number\">0</span>));\n    assert(isPalindrome(<span class=\"hljs-number\">1</span>));\n    assert(isPalindrome(<span class=\"hljs-number\">12321</span>));\n    assert(!isPalindrome(<span class=\"hljs-number\">1234</span>));\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Check given number whether is palindrome number or not\n * @param number number to check\n * @return `true` if given number is palindrome number\n * @return `false` if number is not a palindrome number\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">isPalindrome</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span>\n{\n    <span class=\"hljs-type\">int</span> reversedNumber = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> originalNumber = number;\n    <span class=\"hljs-keyword\">while</span> (number != <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-type\">int</span> remainder = number % <span class=\"hljs-number\">10</span>;\n        reversedNumber = reversedNumber * <span class=\"hljs-number\">10</span> + remainder;\n        number /= <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> originalNumber == reversedNumber;\n}\n"
    },
    "haskell": {
      "dir": "src/Maths/Palindrome.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Maths/Palindrome.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Maths.Palindrome <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">palinedrome</span> :: <span class=\"hljs-type\">Eq</span> a =&gt; [a] -&gt; <span class=\"hljs-type\">Bool</span>\n<span class=\"hljs-title\">palinedrome</span> xs = (xs == reverse xs)\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n  print (palinedrome [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>])"
    },
    "ruby": {
      "dir": "data_structures/arrays/strings/palindrome.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/strings/palindrome.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Valid Palindrome</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given a string s, determine if it is a palindrome,</span>\n<span class=\"hljs-comment\"># considering only alphanumeric characters and ignoring cases.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 1:</span>\n<span class=\"hljs-comment\"># Input: s = &quot;A man, a plan, a canal: Panama&quot;</span>\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 2:</span>\n<span class=\"hljs-comment\"># Input: s = &quot;race a car&quot;</span>\n<span class=\"hljs-comment\"># Output: false</span>\n<span class=\"hljs-comment\"># Explanation: &quot;raceacar&quot; is not a palindrome.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Constraints:</span>\n<span class=\"hljs-comment\"># 1 &lt;= s.length &lt;= 2 * 105</span>\n<span class=\"hljs-comment\"># s consists only of printable ASCII characters.</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@param</span> {String} s</span>\n<span class=\"hljs-comment\"># <span class=\"hljs-doctag\">@return</span> {Boolean}</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 1: Using Ruby method .reverse</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n)</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_palindrome</span><span class=\"hljs-params\">(s)</span></span>\n  letters_only = s.downcase.gsub(<span class=\"hljs-regexp\">/[^0-9a-z]/i</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)\n  letters_only.reverse == letters_only\n<span class=\"hljs-keyword\">end</span>\n\ns = <span class=\"hljs-string\">&#x27;A man, a plan, a canal: Panama&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span>\n\ns = <span class=\"hljs-string\">&#x27;race a car&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: false</span>\n<span class=\"hljs-comment\"># Explanation: &quot;raceacar&quot; is not a palindrome.</span>\n\ns = <span class=\"hljs-string\">&#x27;ab_a&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: &quot;aba&quot; is a palindrome.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: Reversed array</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Complexity Analysis:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n), in length n of the string.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># We need to iterate through the string: When we filter out non-alphanumeric characters and convert the remaining</span>\n<span class=\"hljs-comment\"># characters to lower-case. When we reverse the string. When we compare the original and the reversed strings. </span>\n<span class=\"hljs-comment\"># Each iteration runs linearly in time (since each character operation completes in constant time). </span>\n<span class=\"hljs-comment\"># Thus, the effective run-time complexity is linear.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Space Complexity: O(n), in length n of the string. We need O(n) additional</span>\n<span class=\"hljs-comment\"># space to store the filtered string and the reversed string.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_palindrome</span><span class=\"hljs-params\">(s)</span></span>\n  letters_only_array = s.downcase.gsub(<span class=\"hljs-regexp\">/[^0-9a-z]/i</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>).split(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  reversed_array = []\n  letters_only_array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|letter|</span>\n    reversed_array.unshift(letter)\n  <span class=\"hljs-keyword\">end</span>\n  letters_only_array == reversed_array\n<span class=\"hljs-keyword\">end</span>\n\ns = <span class=\"hljs-string\">&#x27;A man, a plan, a canal: Panama&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span>\n\ns = <span class=\"hljs-string\">&#x27;race a car&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: false</span>\n<span class=\"hljs-comment\"># Explanation: &quot;raceacar&quot; is not a palindrome.</span>\n\ns = <span class=\"hljs-string\">&#x27;ab_a&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: &quot;aba&quot; is a palindrome.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: Two Pointers</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Complexity Analysis:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n), in length n of the string. We traverse over each</span>\n<span class=\"hljs-comment\"># character at most once until the two pointers meet in the middle, or when</span>\n<span class=\"hljs-comment\"># we break and return early.</span>\n<span class=\"hljs-comment\"># Space Complexity: O(1). No extra space required, at all.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_palindrome</span><span class=\"hljs-params\">(s)</span></span>\n  letters_only = s.downcase.gsub(<span class=\"hljs-regexp\">/[^0-9a-z]/i</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>)\n  p1 = <span class=\"hljs-number\">0</span>\n  p2 = letters_only.length - <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">while</span> p1 &lt; p2\n    <span class=\"hljs-keyword\">if</span> letters_only[p1] == letters_only[p2]\n      p1 += <span class=\"hljs-number\">1</span>\n      p2 -= <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-literal\">true</span>\n<span class=\"hljs-keyword\">end</span>\n\ns = <span class=\"hljs-string\">&#x27;A man, a plan, a canal: Panama&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: &quot;amanaplanacanalpanama&quot; is a palindrome.</span>\n\ns = <span class=\"hljs-string\">&#x27;race a car&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: false</span>\n<span class=\"hljs-comment\"># Explanation: &quot;raceacar&quot; is not a palindrome.</span>\n\ns = <span class=\"hljs-string\">&#x27;ab_a&#x27;</span>\nputs is_palindrome(s)\n<span class=\"hljs-comment\"># Output: true</span>\n<span class=\"hljs-comment\"># Explanation: &quot;aba&quot; is a palindrome.</span>\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/other/Palindrome.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/other/Palindrome.kt",
      "code": "<span class=\"hljs-keyword\">package</span> other\n\n<span class=\"hljs-keyword\">import</span> java.text.Normalizer\n<span class=\"hljs-keyword\">import</span> java.util.regex.Pattern\n\n<span class=\"hljs-comment\">/**\n * A palindrome is a word, number, phrase, or other sequence\n * of characters which reads the same backward as forward,\n * such as madam, racecar. There are also numeric palindromes,\n * particularly date/time stamps using short digits 11/11/11 11:11\n * and long digits 02/02/2020\n *\n * This function\n * <span class=\"hljs-doctag\">@param</span> text The text to be checked if it is a palindrome\n * <span class=\"hljs-doctag\">@return</span> return true if the text is a Palindrome\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">isPalindrome</span><span class=\"hljs-params\">(text: <span class=\"hljs-type\">String</span>)</span></span>: <span class=\"hljs-built_in\">Boolean</span> {\n\n    <span class=\"hljs-keyword\">val</span> normalizedText = text.normalize()\n    <span class=\"hljs-keyword\">for</span>(i <span class=\"hljs-keyword\">in</span> normalizedText.indices)\n        <span class=\"hljs-keyword\">if</span>(normalizedText[i] != normalizedText[normalizedText.length - (i + <span class=\"hljs-number\">1</span>)])\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> String.<span class=\"hljs-title\">normalize</span><span class=\"hljs-params\">()</span></span>: String {\n    <span class=\"hljs-keyword\">val</span> nfdNormalizedString = Normalizer.normalize(<span class=\"hljs-keyword\">this</span>, Normalizer.Form.NFD)\n    <span class=\"hljs-keyword\">return</span> Pattern\n        .compile(<span class=\"hljs-string\">&quot;\\\\p{InCombiningDiacriticalMarks}+&quot;</span>)\n        .matcher(nfdNormalizedString)\n        .replaceAll(<span class=\"hljs-string\">&quot;&quot;</span>)\n        .toLowerCase()\n        .replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n\n}"
    }
  },
  "contributors": [
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "najtmarr",
      "email": "najtmarr@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Ali Hassan",
      "email": "malihassan20@gmail.com",
      "commits": 1
    },
    {
      "name": "Nour B",
      "email": "56294154+nourrrrrrrr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Furaha Damién",
      "email": "furaha.damien@mail.mcgill.ca",
      "commits": 1
    },
    {
      "name": "jasonptong",
      "email": "43040084+jasonptong@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Prasoon",
      "email": "prasoonpandey06@gmail.com",
      "commits": 1
    },
    {
      "name": "percy07",
      "email": "56677891+percy07@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Shivam Arora",
      "email": "shivam.arora@inficold.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 2
    },
    {
      "name": "alessandro_gsantos",
      "email": "alessandro.santos@bemobi.com.br",
      "commits": 2
    },
    {
      "name": "liamdp",
      "email": "liam.pickering@outlook.com",
      "commits": 2
    },
    {
      "name": "Gerasimos Alexiou",
      "email": "jerrak0s@gmail.com",
      "commits": 2
    },
    {
      "name": "Ephraim Atta-Duncan",
      "email": "55143799+dephraiim@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 4
    },
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
