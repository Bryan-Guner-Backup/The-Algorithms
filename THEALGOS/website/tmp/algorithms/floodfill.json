{
  "slug": "floodfill",
  "name": "FloodFill",
  "categories": ["recursive"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Recursive/FloodFill.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Recursive/FloodFill.js",
      "code": "<span class=\"hljs-comment\">/**\r\n * Flood fill, also called seed fill, is an algorithm that determines and alters the area connected\r\n * to a given node in a multi-dimensional array with some matching attribute. It is used in the\r\n * &quot;bucket&quot; fill tool of paint programs to fill connected, similarly-colored areas with a different\r\n * color. (description adapted from https://en.wikipedia.org/wiki/Flood_fill) (see also:\r\n * https://www.techiedelight.com/flood-fill-algorithm/).\r\n */</span>\r\n\r\n<span class=\"hljs-keyword\">const</span> neighbors = [[-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>], [-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\r\n\r\n<span class=\"hljs-keyword\">const</span> black = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\r\n<span class=\"hljs-keyword\">const</span> green = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>]\r\n<span class=\"hljs-keyword\">const</span> violet = [<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>]\r\n<span class=\"hljs-keyword\">const</span> white = [<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>]\r\n<span class=\"hljs-keyword\">const</span> orange = [<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">128</span>, <span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">// eslint-disable-line</span>\r\n\r\n<span class=\"hljs-comment\">/*\r\nDoctests\r\n&gt; testBreadthFirst([1, 1], green, orange, [1, 1]);\r\norange\r\n&gt; testBreadthFirst([1, 1], green, orange, [0, 1]);\r\nviolet\r\n&gt; testBreadthFirst([1, 1], green, orange, [6, 4]);\r\nwhite\r\n&gt; testDepthFirst([1, 1], green, orange, [1, 1]);\r\norange\r\n&gt; testDepthFirst([1, 1], green, orange, [0, 1]);\r\nviolet\r\n&gt; testDepthFirst([1, 1], green, orange, [6, 4]);\r\nwhite\r\n*/</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n* Implements the flood fill algorithm through a breadth-first approach using a queue.\r\n*\r\n* <span class=\"hljs-doctag\">@param</span> rgbData The image to which the algorithm is applied.\r\n* <span class=\"hljs-doctag\">@param</span> location The start location on the image.\r\n* <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n* <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n*/</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">breadthFirstSearch</span> (rgbData, location, targetColor, replacementColor) {\r\n  <span class=\"hljs-keyword\">if</span> (location[<span class=\"hljs-number\">0</span>] &lt; <span class=\"hljs-number\">0</span> ||\r\n    location[<span class=\"hljs-number\">0</span>] &gt;= rgbData.<span class=\"hljs-property\">length</span> ||\r\n    location[<span class=\"hljs-number\">1</span>] &lt; <span class=\"hljs-number\">0</span> ||\r\n    location[<span class=\"hljs-number\">1</span>] &gt;= rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;location should point to a pixel within the rgbData&#x27;</span>)\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">const</span> queue = []\r\n  queue.<span class=\"hljs-title function_\">push</span>(location)\r\n\r\n  <span class=\"hljs-keyword\">while</span> (queue.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\r\n    <span class=\"hljs-title function_\">breadthFirstFill</span>(rgbData, location, targetColor, replacementColor, queue)\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n* Implements the flood fill algorithm through a depth-first approach using recursion.\r\n*\r\n* <span class=\"hljs-doctag\">@param</span> rgbData The image to which the algorithm is applied.\r\n* <span class=\"hljs-doctag\">@param</span> location The start location on the image.\r\n* <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n* <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n*/</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">depthFirstSearch</span> (rgbData, location, targetColor, replacementColor) {\r\n  <span class=\"hljs-keyword\">if</span> (location[<span class=\"hljs-number\">0</span>] &lt; <span class=\"hljs-number\">0</span> ||\r\n    location[<span class=\"hljs-number\">0</span>] &gt;= rgbData.<span class=\"hljs-property\">length</span> ||\r\n    location[<span class=\"hljs-number\">1</span>] &lt; <span class=\"hljs-number\">0</span> ||\r\n    location[<span class=\"hljs-number\">1</span>] &gt;= rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>) {\r\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;location should point to a pixel within the rgbData&#x27;</span>)\r\n  }\r\n\r\n  <span class=\"hljs-title function_\">depthFirstFill</span>(rgbData, location, targetColor, replacementColor)\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n* Utility-function to implement the breadth-first loop\r\n*\r\n* <span class=\"hljs-doctag\">@param</span> rgbData The image to which the algorithm is applied.\r\n* <span class=\"hljs-doctag\">@param</span> location The start location on the image.\r\n* <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n* <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n* <span class=\"hljs-doctag\">@param</span> queue The locations that still need to be visited.\r\n*/</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">breadthFirstFill</span> (rgbData, location, targetColor, replacementColor, queue) {\r\n  <span class=\"hljs-keyword\">const</span> currentLocation = queue[<span class=\"hljs-number\">0</span>]\r\n  queue.<span class=\"hljs-title function_\">shift</span>()\r\n\r\n  <span class=\"hljs-keyword\">if</span> (rgbData[currentLocation[<span class=\"hljs-number\">0</span>]][currentLocation[<span class=\"hljs-number\">1</span>]] === targetColor) {\r\n    rgbData[currentLocation[<span class=\"hljs-number\">0</span>]][currentLocation[<span class=\"hljs-number\">1</span>]] = replacementColor\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; neighbors.<span class=\"hljs-property\">length</span>; i++) {\r\n      <span class=\"hljs-keyword\">const</span> x = currentLocation[<span class=\"hljs-number\">0</span>] + neighbors[i][<span class=\"hljs-number\">0</span>]\r\n      <span class=\"hljs-keyword\">const</span> y = currentLocation[<span class=\"hljs-number\">1</span>] + neighbors[i][<span class=\"hljs-number\">1</span>]\r\n      <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; rgbData.<span class=\"hljs-property\">length</span> &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>) {\r\n        queue.<span class=\"hljs-title function_\">push</span>([x, y])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n* Utility-function to implement the depth-first loop\r\n*\r\n* <span class=\"hljs-doctag\">@param</span> rgbData The image to which the algorithm is applied.\r\n* <span class=\"hljs-doctag\">@param</span> location The start location on the image.\r\n* <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n* <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n*/</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">depthFirstFill</span> (rgbData, location, targetColor, replacementColor) {\r\n  <span class=\"hljs-keyword\">if</span> (rgbData[location[<span class=\"hljs-number\">0</span>]][location[<span class=\"hljs-number\">1</span>]] === targetColor) {\r\n    rgbData[location[<span class=\"hljs-number\">0</span>]][location[<span class=\"hljs-number\">1</span>]] = replacementColor\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; neighbors.<span class=\"hljs-property\">length</span>; i++) {\r\n      <span class=\"hljs-keyword\">const</span> x = location[<span class=\"hljs-number\">0</span>] + neighbors[i][<span class=\"hljs-number\">0</span>]\r\n      <span class=\"hljs-keyword\">const</span> y = location[<span class=\"hljs-number\">1</span>] + neighbors[i][<span class=\"hljs-number\">1</span>]\r\n      <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; rgbData.<span class=\"hljs-property\">length</span> &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>) {\r\n        <span class=\"hljs-title function_\">depthFirstFill</span>(rgbData, [x, y], targetColor, replacementColor)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n* Generates the rgbData-matrix for the tests\r\n*\r\n* <span class=\"hljs-doctag\">@return</span> example rgbData-matrix\r\n*/</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateTestRgbData</span> () {\r\n  <span class=\"hljs-keyword\">const</span> layout = [\r\n    [violet, violet, green, green, black, green, green],\r\n    [violet, green, green, black, green, green, green],\r\n    [green, green, green, black, green, green, green],\r\n    [black, black, green, black, white, white, green],\r\n    [violet, violet, black, violet, violet, white, white],\r\n    [green, green, green, violet, violet, violet, violet],\r\n    [violet, violet, violet, violet, violet, violet, violet]\r\n  ]\r\n\r\n  <span class=\"hljs-comment\">// transpose layout-matrix so the x-index comes before the y-index</span>\r\n  <span class=\"hljs-keyword\">const</span> transposed = []\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>; x &lt; layout[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>; x++) {\r\n    transposed[x] = []\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">0</span>; y &lt; layout.<span class=\"hljs-property\">length</span>; y++) {\r\n      transposed[x][y] = layout[y][x]\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> transposed\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n* Utility-function to test the function &quot;breadthFirstSearch&quot;\r\n*\r\n* <span class=\"hljs-doctag\">@param</span> fillLocation The start location on the image where the flood fill is applied.\r\n* <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n* <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n* <span class=\"hljs-doctag\">@param</span> testLocation The location of the color to be checked.\r\n* <span class=\"hljs-doctag\">@return</span> The color at testLocation\r\n*/</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">testBreadthFirst</span> (fillLocation, targetColor, replacementColor, testLocation) {<span class=\"hljs-comment\">// eslint-disable-line</span>\r\n  <span class=\"hljs-keyword\">const</span> rgbData = <span class=\"hljs-title function_\">generateTestRgbData</span>()\r\n  <span class=\"hljs-title function_\">breadthFirstSearch</span>(rgbData, fillLocation, targetColor, replacementColor)\r\n  <span class=\"hljs-keyword\">return</span> rgbData[testLocation[<span class=\"hljs-number\">0</span>]][testLocation[<span class=\"hljs-number\">1</span>]]\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n* Utility-function to test the function &quot;depthFirstSearch&quot;\r\n*\r\n* <span class=\"hljs-doctag\">@param</span> fillLocation The start location on the image where the flood fill is applied.\r\n* <span class=\"hljs-doctag\">@param</span> targetColor The old color to be replaced.\r\n* <span class=\"hljs-doctag\">@param</span> replacementColor The new color to replace the old one.\r\n* <span class=\"hljs-doctag\">@param</span> testLocation The location of the color to be checked.\r\n* <span class=\"hljs-doctag\">@return</span> The color at testLocation\r\n*/</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">testDepthFirst</span> (fillLocation, targetColor, replacementColor, testLocation) {<span class=\"hljs-comment\">// eslint-disable-line</span>\r\n  <span class=\"hljs-keyword\">const</span> rgbData = <span class=\"hljs-title function_\">generateTestRgbData</span>()\r\n  <span class=\"hljs-title function_\">depthFirstSearch</span>(rgbData, fillLocation, targetColor, replacementColor)\r\n  <span class=\"hljs-keyword\">return</span> rgbData[testLocation[<span class=\"hljs-number\">0</span>]][testLocation[<span class=\"hljs-number\">1</span>]]\r\n}\r\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Other/FloodFill.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Other/FloodFill.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\r\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\r\n<span class=\"hljs-keyword\">using</span> System.Drawing;\r\n<span class=\"hljs-keyword\">using</span> System.Numerics;\r\n\r\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\r\n{\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Flood fill, also called seed fill, is an algorithm that determines and</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> alters the area connected to a given node in a multi-dimensional array with</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> some matching attribute. It is used in the &quot;bucket&quot; fill tool of paint</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> programs to fill connected, similarly-colored areas with a different color.</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> (description adapted from https://en.wikipedia.org/wiki/Flood_fill)</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> (see also: https://www.techiedelight.com/flood-fill-algorithm/).</span>\r\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">FloodFill</span>\r\n    {\r\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> List&lt;(<span class=\"hljs-built_in\">int</span> xOffset, <span class=\"hljs-built_in\">int</span> yOffset)&gt; neighbors = <span class=\"hljs-keyword\">new</span> List&lt;(<span class=\"hljs-built_in\">int</span> xOffset, <span class=\"hljs-built_in\">int</span> yOffset)&gt; { (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>), (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) };\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Implements the flood fill algorithm through a breadth-first approach using a queue.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmap&quot;&gt;</span>The bitmap to which the algorithm is applied.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;location&quot;&gt;</span>The start location on the bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;targetColor&quot;&gt;</span>The old color to be replaced.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;replacementColor&quot;&gt;</span>The new color to replace the old one.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BreadthFirstSearch</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (location.x &lt; <span class=\"hljs-number\">0</span> || location.x &gt;= bitmap.Width || location.y &lt; <span class=\"hljs-number\">0</span> || location.y &gt;= bitmap.Height)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(location), <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(location)}</span> should point to a pixel within the bitmap&quot;</span>);\r\n            }\r\n\r\n            <span class=\"hljs-keyword\">var</span> queue = <span class=\"hljs-keyword\">new</span> List&lt;(<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y)&gt;();\r\n            queue.Add(location);\r\n\r\n            <span class=\"hljs-keyword\">while</span> (queue.Count &gt; <span class=\"hljs-number\">0</span>)\r\n            {\r\n                BreadthFirstFill(bitmap, location, targetColor, replacementColor, queue);\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> Implements the flood fill algorithm through a depth-first approach through recursion.</span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmap&quot;&gt;</span>The bitmap to which the algorithm is applied.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;location&quot;&gt;</span>The start location on the bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;targetColor&quot;&gt;</span>The old color to be replaced.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;replacementColor&quot;&gt;</span>The new color to replace the old one.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DepthFirstSearch</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (location.x &lt; <span class=\"hljs-number\">0</span> || location.x &gt;= bitmap.Width || location.y &lt; <span class=\"hljs-number\">0</span> || location.y &gt;= bitmap.Height)\r\n            {\r\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(location), <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(location)}</span> should point to a pixel within the bitmap&quot;</span>);\r\n            }\r\n\r\n            DepthFirstFill(bitmap, location, targetColor, replacementColor);\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">BreadthFirstFill</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor, List&lt;(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>)&gt; queue)</span>\r\n        {\r\n            (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y) currentLocation = queue[<span class=\"hljs-number\">0</span>];\r\n            queue.RemoveAt(<span class=\"hljs-number\">0</span>);\r\n\r\n            <span class=\"hljs-keyword\">if</span> (bitmap.GetPixel(currentLocation.x, currentLocation.y) == targetColor)\r\n            {\r\n                bitmap.SetPixel(currentLocation.x, currentLocation.y, replacementColor);\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; neighbors.Count; i++)\r\n                {\r\n                    <span class=\"hljs-built_in\">int</span> x = currentLocation.x + neighbors[i].xOffset;\r\n                    <span class=\"hljs-built_in\">int</span> y = currentLocation.y + neighbors[i].yOffset;\r\n                    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; bitmap.Width &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; bitmap.Height)\r\n                    {\r\n                        queue.Add((x, y));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">DepthFirstFill</span>(<span class=\"hljs-params\">Bitmap bitmap, (<span class=\"hljs-built_in\">int</span> x, <span class=\"hljs-built_in\">int</span> y</span>) location, Color targetColor, Color replacementColor)</span>\r\n        {\r\n            <span class=\"hljs-keyword\">if</span> (bitmap.GetPixel(location.x, location.y) == targetColor)\r\n            {\r\n                bitmap.SetPixel(location.x, location.y, replacementColor);\r\n\r\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; neighbors.Count; i++)\r\n                {\r\n                    <span class=\"hljs-built_in\">int</span> x = location.x + neighbors[i].xOffset;\r\n                    <span class=\"hljs-built_in\">int</span> y = location.y + neighbors[i].yOffset;\r\n                    <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; bitmap.Width &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; bitmap.Height)\r\n                    {\r\n                        DepthFirstFill(bitmap, (x, y), targetColor, replacementColor);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
