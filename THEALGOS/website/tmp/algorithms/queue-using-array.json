{
  "slug": "queue-using-array",
  "name": "Queue Using Array",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/queue_using_array.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/queue_using_array.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of Linear [Queue using array]\n * (https://www.geeksforgeeks.org/array-implementation-of-queue-simple/).\n * @details\n * The Linear Queue is a data structure used for holding a sequence of\n * values, which can be added to the end line (enqueue), removed from\n * head of line (dequeue) and displayed.\n * ### Algorithm\n * Values can be added by increasing the `rear` variable by 1 (which points to\n * the end of the array), then assigning new value to `rear`&#x27;s element of the\n * array.\n *\n * Values can be removed by increasing the `front` variable by 1 (which points\n * to the first of the array), so it cannot reached any more.\n *\n * @author [Pooja](https://github.com/pooja-git11)\n * @author [Farbod Ahmadian](https://github.com/farbodahm)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>     <span class=\"hljs-comment\">/// for std::array</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n\n<span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-type\">uint16_t</span> max_size{<span class=\"hljs-number\">10</span>};  <span class=\"hljs-comment\">///&lt; Maximum size of the queue</span>\n\n<span class=\"hljs-comment\">/**\n * @namespace data_structures\n * @brief Algorithms with data structures\n */</span>\n<span class=\"hljs-keyword\">namespace</span> data_structures {\n\n<span class=\"hljs-comment\">/**\n * @namespace queue_using_array\n * @brief Functions for [Queue using Array]\n * (https://www.geeksforgeeks.org/array-implementation-of-queue-simple/)\n * implementation.\n */</span>\n<span class=\"hljs-keyword\">namespace</span> queue_using_array {\n\n<span class=\"hljs-comment\">/**\n * @brief Queue_Array class containing the main data and also index of head and\n * tail of the array.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Queue_Array</span> {\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int16_t</span>&amp;)</span></span>;  <span class=\"hljs-comment\">///&lt; Add element to the first of the queue</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span></span>;                 <span class=\"hljs-comment\">///&lt; Delete element from back of the queue</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>;          <span class=\"hljs-comment\">///&lt; Show all saved data</span>\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-type\">int8_t</span> front{<span class=\"hljs-number\">-1</span>};                     <span class=\"hljs-comment\">///&lt; Index of head of the array</span>\n    <span class=\"hljs-type\">int8_t</span> rear{<span class=\"hljs-number\">-1</span>};                      <span class=\"hljs-comment\">///&lt; Index of tail of the array</span>\n    std::array&lt;<span class=\"hljs-type\">int16_t</span>, max_size&gt; arr{};  <span class=\"hljs-comment\">///&lt; All stored data</span>\n};\n\n<span class=\"hljs-comment\">/**\n * @brief Adds new element to the end of the queue\n * @param ele to be added to the end of the queue\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Queue_Array::enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int16_t</span>&amp; ele)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (rear == arr.<span class=\"hljs-built_in\">size</span>() - <span class=\"hljs-number\">1</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nStack is full&quot;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (front == <span class=\"hljs-number\">-1</span> &amp;&amp; rear == <span class=\"hljs-number\">-1</span>) {\n        front = <span class=\"hljs-number\">0</span>;\n        rear = <span class=\"hljs-number\">0</span>;\n        arr[rear] = ele;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (rear &lt; arr.<span class=\"hljs-built_in\">size</span>()) {\n        ++rear;\n        arr[rear] = ele;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Remove element that is located at the first of the queue\n * @returns data that is deleted if queue is not empty\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">Queue_Array::dequeue</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int8_t</span> d{<span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-keyword\">if</span> (front == <span class=\"hljs-number\">-1</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nstack is empty &quot;</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (front == rear) {\n        d = arr.<span class=\"hljs-built_in\">at</span>(front);\n        front = rear = <span class=\"hljs-number\">-1</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        d = arr.<span class=\"hljs-built_in\">at</span>(front++);\n    }\n\n    <span class=\"hljs-keyword\">return</span> d;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Utility function to show all elements in the queue\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Queue_Array::display</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (front == <span class=\"hljs-number\">-1</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nStack is empty&quot;</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int16_t</span> i{front}; i &lt;= rear; ++i) std::cout &lt;&lt; arr.<span class=\"hljs-built_in\">at</span>(i) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n}\n\n}  <span class=\"hljs-comment\">// namespace queue_using_array</span>\n}  <span class=\"hljs-comment\">// namespace data_structures</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @details\n * Allows the user to add and delete values from the queue.\n * Also allows user to display values in the queue.\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> op{<span class=\"hljs-number\">0</span>}, data{<span class=\"hljs-number\">0</span>};\n    data_structures::queue_using_array::Queue_Array ob;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n1. enqueue(Insertion) &quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n2. dequeue(Deletion)&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n3. Display&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n4. Exit&quot;</span>;\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter your choice &quot;</span>;\n        std::cin &gt;&gt; op;\n        <span class=\"hljs-keyword\">if</span> (op == <span class=\"hljs-number\">1</span>) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter data  &quot;</span>;\n            std::cin &gt;&gt; data;\n            ob.<span class=\"hljs-built_in\">enqueue</span>(data);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op == <span class=\"hljs-number\">2</span>) {\n            data = ob.<span class=\"hljs-built_in\">dequeue</span>();\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\ndequeue element is:\\t&quot;</span> &lt;&lt; data;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op == <span class=\"hljs-number\">3</span>) {\n            ob.<span class=\"hljs-built_in\">display</span>();\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (op == <span class=\"hljs-number\">4</span>) {\n            <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nWrong choice &quot;</span>;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "Farbod Ahmadian",
      "email": "farbodahmadian2014@gmail.com",
      "commits": 1
    },
    {
      "name": "Pooja",
      "email": "pooja016mca19@igdtuw.ac.in",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
