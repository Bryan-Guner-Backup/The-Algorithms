{
  "slug": "euler-method",
  "name": "Euler Method",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/euler_method.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/euler_method.py",
      "code": "<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">explicit_euler</span>(<span class=\"hljs-params\">ode_func, y0, x0, step_size, x_end</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate numeric solution at each step to an ODE using Euler&#x27;s Method\n\n    https://en.wikipedia.org/wiki/Euler_method\n\n    Arguments:\n    ode_func -- The ode as a function of x and y\n    y0 -- the initial value for y\n    x0 -- the initial value for x\n    stepsize -- the increment value for x\n    x_end -- the end value for x\n\n    &gt;&gt;&gt; # the exact solution is math.exp(x)\n    &gt;&gt;&gt; def f(x, y):\n    ...     return y\n    &gt;&gt;&gt; y0 = 1\n    &gt;&gt;&gt; y = explicit_euler(f, y0, 0.0, 0.01, 5)\n    &gt;&gt;&gt; y[-1]\n    144.77277243257308\n    &quot;&quot;&quot;</span>\n    N = <span class=\"hljs-built_in\">int</span>(np.ceil((x_end - x0) / step_size))\n    y = np.zeros((N + <span class=\"hljs-number\">1</span>,))\n    y[<span class=\"hljs-number\">0</span>] = y0\n    x = x0\n\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N):\n        y[k + <span class=\"hljs-number\">1</span>] = y[k] + step_size * ode_func(x, y[k])\n        x += step_size\n\n    <span class=\"hljs-keyword\">return</span> y\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Maths/EulerMethod.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/EulerMethod.js",
      "code": "<span class=\"hljs-comment\">/*\r\nIn mathematics and computational science, the Euler method (also called forward Euler method) is a first-order numerical procedure for solving ordinary differential equations (ODEs) with a given initial value. It is the most basic explicit method for numerical integration of ordinary differential equations. The method proceeds in a series of steps. At each step the y-value is calculated by evaluating the differential equation at the previous step, multiplying the result with the step-size and adding it to the last y-value: y_n+1 = y_n + stepSize * f(x_n, y_n).\r\n(description adapted from https://en.wikipedia.org/wiki/Euler_method )\r\n(see also: https://www.geeksforgeeks.org/euler-method-solving-differential-equation/ )\r\n*/</span>\r\n\r\n<span class=\"hljs-comment\">/*\r\nDoctests\r\n&gt; eulerStep(0, 0.1, 0, function(x, y){return x})\r\n0\r\n&gt; eulerStep(2, 1, 1, function(x, y){return x * x})\r\n5\r\n&gt; eulerFull(0, 3, 1, 0, function(x, y){return x})\r\n[{&quot;x&quot;: 0, &quot;y&quot;: 0}, {&quot;x&quot;: 1, &quot;y&quot;: 0}, {&quot;x&quot;: 2, &quot;y&quot;: 1}, {&quot;x&quot;: 3, &quot;y&quot;: 3}]\r\n&gt; eulerFull(3, 4, 0.5, 1, function(x, y){return x * x})\r\n[{&quot;x&quot;: 3, &quot;y&quot;: 1}, {&quot;x&quot;: 3.5, &quot;y&quot;: 5.5}, {&quot;x&quot;: 4, &quot;y&quot;: 11.625}]\r\n*/</span>\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">eulerStep</span> (xCurrent, stepSize, yCurrent, differentialEquation) {\r\n  <span class=\"hljs-comment\">// calculates the next y-value based on the current value of x, y and the stepSize</span>\r\n  <span class=\"hljs-keyword\">const</span> yNext = yCurrent + stepSize * <span class=\"hljs-title function_\">differentialEquation</span>(xCurrent, yCurrent)\r\n  <span class=\"hljs-keyword\">return</span> yNext\r\n}\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">eulerFull</span> (xStart, xEnd, stepSize, yStart, differentialEquation) {\r\n  <span class=\"hljs-comment\">// loops through all the steps until xEnd is reached, adds a point for each step and then returns all the points</span>\r\n  <span class=\"hljs-keyword\">const</span> points = [{ <span class=\"hljs-attr\">x</span>: xStart, <span class=\"hljs-attr\">y</span>: yStart }]\r\n  <span class=\"hljs-keyword\">let</span> yCurrent = yStart\r\n  <span class=\"hljs-keyword\">let</span> xCurrent = xStart\r\n\r\n  <span class=\"hljs-keyword\">while</span> (xCurrent &lt; xEnd) {\r\n    <span class=\"hljs-comment\">// Euler method for next step</span>\r\n    yCurrent = <span class=\"hljs-title function_\">eulerStep</span>(xCurrent, stepSize, yCurrent, differentialEquation)\r\n    xCurrent += stepSize\r\n    points.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">x</span>: xCurrent, <span class=\"hljs-attr\">y</span>: yCurrent })\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">return</span> points\r\n}\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">plotLine</span> (label, points, width, height) {\r\n  <span class=\"hljs-comment\">// utility function to plot the results</span>\r\n\r\n  <span class=\"hljs-comment\">// container needed to control the size of the canvas</span>\r\n  <span class=\"hljs-keyword\">const</span> container = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;div&#x27;</span>)\r\n  container.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">width</span> = width + <span class=\"hljs-string\">&#x27;px&#x27;</span>\r\n  container.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">height</span> = height + <span class=\"hljs-string\">&#x27;px&#x27;</span>\r\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">append</span>(container)\r\n\r\n  <span class=\"hljs-comment\">// the canvas for plotting</span>\r\n  <span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>)\r\n  container.<span class=\"hljs-title function_\">append</span>(canvas)\r\n\r\n  <span class=\"hljs-comment\">// Chart-class from chartjs</span>\r\n  <span class=\"hljs-keyword\">const</span> chart = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chart</span>(canvas, { <span class=\"hljs-comment\">// eslint-disable-line</span>\r\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;scatter&#x27;</span>,\r\n    <span class=\"hljs-attr\">data</span>: {\r\n      <span class=\"hljs-attr\">datasets</span>: [{\r\n        <span class=\"hljs-attr\">label</span>: label,\r\n        <span class=\"hljs-attr\">data</span>: points,\r\n        <span class=\"hljs-attr\">showLine</span>: <span class=\"hljs-literal\">true</span>,\r\n        <span class=\"hljs-attr\">fill</span>: <span class=\"hljs-literal\">false</span>,\r\n        <span class=\"hljs-attr\">tension</span>: <span class=\"hljs-number\">0</span>,\r\n        <span class=\"hljs-attr\">borderColor</span>: <span class=\"hljs-string\">&#x27;black&#x27;</span>\r\n      }]\r\n    },\r\n    <span class=\"hljs-attr\">options</span>: {\r\n      <span class=\"hljs-attr\">maintainAspectRatio</span>: <span class=\"hljs-literal\">false</span>,\r\n      <span class=\"hljs-attr\">responsive</span>: <span class=\"hljs-literal\">true</span>\r\n    }\r\n  })\r\n}\r\n\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleEquation1</span> (x, y) {\r\n  <span class=\"hljs-keyword\">return</span> x\r\n}\r\n\r\n<span class=\"hljs-comment\">// example from https://en.wikipedia.org/wiki/Euler_method</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleEquation2</span> (x, y) {\r\n  <span class=\"hljs-keyword\">return</span> y\r\n}\r\n\r\n<span class=\"hljs-comment\">// example from https://www.geeksforgeeks.org/euler-method-solving-differential-equation/</span>\r\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">exampleEquation3</span> (x, y) {\r\n  <span class=\"hljs-keyword\">return</span> x + y + x * y\r\n}\r\n\r\n<span class=\"hljs-keyword\">const</span> points1 = <span class=\"hljs-title function_\">eulerFull</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0</span>, exampleEquation1)\r\n<span class=\"hljs-keyword\">const</span> points2 = <span class=\"hljs-title function_\">eulerFull</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">1</span>, exampleEquation2)\r\n<span class=\"hljs-keyword\">const</span> points3 = <span class=\"hljs-title function_\">eulerFull</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.025</span>, <span class=\"hljs-number\">1</span>, exampleEquation3)\r\n\r\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(points1)\r\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(points2)\r\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(points3)\r\n\r\n<span class=\"hljs-comment\">// plot the results if the script is executed in a browser with a window-object</span>\r\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">window</span> !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span>) {\r\n  <span class=\"hljs-keyword\">const</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>)\r\n\r\n  <span class=\"hljs-comment\">// using chartjs</span>\r\n  script.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">&#x27;https://www.chartjs.org/dist/2.9.4/Chart.min.js&#x27;</span>\r\n  script.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\r\n    <span class=\"hljs-title function_\">plotLine</span>(<span class=\"hljs-string\">&#x27;example 1: dy/dx = x&#x27;</span>, points1, <span class=\"hljs-number\">600</span>, <span class=\"hljs-number\">400</span>)\r\n    <span class=\"hljs-title function_\">plotLine</span>(<span class=\"hljs-string\">&#x27;example 2: dy/dx = y&#x27;</span>, points2, <span class=\"hljs-number\">600</span>, <span class=\"hljs-number\">400</span>)\r\n    <span class=\"hljs-title function_\">plotLine</span>(<span class=\"hljs-string\">&#x27;example 3: dy/dx = x + y + x * y&#x27;</span>, points3, <span class=\"hljs-number\">600</span>, <span class=\"hljs-number\">400</span>)\r\n  }\r\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">append</span>(script)\r\n}\n"
    },
    "java": {
      "dir": "Maths/EulerMethod.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/EulerMethod.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.function.BiFunction;\n\n<span class=\"hljs-comment\">/**\n * In mathematics and computational science, the Euler method (also called forward Euler method) is\n * a first-order numerical procedure for solving ordinary differential equations (ODEs) with a given\n * initial value. It is the most basic explicit method for numerical integration of ordinary\n * differential equations. The method proceeds in a series of steps. At each step the y-value is\n * calculated by evaluating the differential equation at the previous step, multiplying the result\n * with the step-size and adding it to the last y-value: y_n+1 = y_n + stepSize * f(x_n, y_n).\n * (description adapted from https://en.wikipedia.org/wiki/Euler_method ) (see also:\n * https://www.geeksforgeeks.org/euler-method-solving-differential-equation/ )\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EulerMethod</span> {\n\n  <span class=\"hljs-comment\">/** Illustrates how the algorithm is used in 3 examples and prints the results to the console. */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    System.out.println(<span class=\"hljs-string\">&quot;example 1:&quot;</span>);\n    BiFunction&lt;Double, Double, Double&gt; exampleEquation1 = (x, y) -&gt; x;\n    ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; points1 = eulerFull(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0</span>, exampleEquation1);\n    <span class=\"hljs-keyword\">assert</span> points1.get(points1.size() - <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">7.800000000000003</span>;\n    points1.forEach(\n        point -&gt; System.out.println(String.format(<span class=\"hljs-string\">&quot;x: %1$f; y: %2$f&quot;</span>, point[<span class=\"hljs-number\">0</span>], point[<span class=\"hljs-number\">1</span>])));\n\n    <span class=\"hljs-comment\">// example from https://en.wikipedia.org/wiki/Euler_method</span>\n    System.out.println(<span class=\"hljs-string\">&quot;\\n\\nexample 2:&quot;</span>);\n    BiFunction&lt;Double, Double, Double&gt; exampleEquation2 = (x, y) -&gt; y;\n    ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; points2 = eulerFull(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">1</span>, exampleEquation2);\n    <span class=\"hljs-keyword\">assert</span> points2.get(points2.size() - <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">45.25925556817596</span>;\n    points2.forEach(\n        point -&gt; System.out.println(String.format(<span class=\"hljs-string\">&quot;x: %1$f; y: %2$f&quot;</span>, point[<span class=\"hljs-number\">0</span>], point[<span class=\"hljs-number\">1</span>])));\n\n    <span class=\"hljs-comment\">// example from https://www.geeksforgeeks.org/euler-method-solving-differential-equation/</span>\n    System.out.println(<span class=\"hljs-string\">&quot;\\n\\nexample 3:&quot;</span>);\n    BiFunction&lt;Double, Double, Double&gt; exampleEquation3 = (x, y) -&gt; x + y + x * y;\n    ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; points3 = eulerFull(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.025</span>, <span class=\"hljs-number\">1</span>, exampleEquation3);\n    <span class=\"hljs-keyword\">assert</span> points3.get(points3.size() - <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">1.1116729841674804</span>;\n    points3.forEach(\n        point -&gt; System.out.println(String.format(<span class=\"hljs-string\">&quot;x: %1$f; y: %2$f&quot;</span>, point[<span class=\"hljs-number\">0</span>], point[<span class=\"hljs-number\">1</span>])));\n  }\n\n  <span class=\"hljs-comment\">/**\n   * calculates the next y-value based on the current value of x, y and the stepSize the console.\n   *\n   * <span class=\"hljs-doctag\">@param</span> xCurrent Current x-value.\n   * <span class=\"hljs-doctag\">@param</span> stepSize Step-size on the x-axis.\n   * <span class=\"hljs-doctag\">@param</span> yCurrent Current y-value.\n   * <span class=\"hljs-doctag\">@param</span> differentialEquation The differential equation to be solved.\n   * <span class=\"hljs-doctag\">@return</span> The next y-value.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">eulerStep</span><span class=\"hljs-params\">(\n      <span class=\"hljs-type\">double</span> xCurrent,\n      <span class=\"hljs-type\">double</span> stepSize,\n      <span class=\"hljs-type\">double</span> yCurrent,\n      BiFunction&lt;Double, Double, Double&gt; differentialEquation)</span> {\n    <span class=\"hljs-keyword\">if</span> (stepSize &lt;= <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;stepSize should be greater than zero&quot;</span>);\n    }\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">yNext</span> <span class=\"hljs-operator\">=</span> yCurrent + stepSize * differentialEquation.apply(xCurrent, yCurrent);\n    <span class=\"hljs-keyword\">return</span> yNext;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Loops through all the steps until xEnd is reached, adds a point for each step and then returns\n   * all the points\n   *\n   * <span class=\"hljs-doctag\">@param</span> xStart First x-value.\n   * <span class=\"hljs-doctag\">@param</span> xEnd Last x-value.\n   * <span class=\"hljs-doctag\">@param</span> stepSize Step-size on the x-axis.\n   * <span class=\"hljs-doctag\">@param</span> yStart First y-value.\n   * <span class=\"hljs-doctag\">@param</span> differentialEquation The differential equation to be solved.\n   * <span class=\"hljs-doctag\">@return</span> The points constituting the solution of the differential equation.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; eulerFull(\n      <span class=\"hljs-type\">double</span> xStart,\n      <span class=\"hljs-type\">double</span> xEnd,\n      <span class=\"hljs-type\">double</span> stepSize,\n      <span class=\"hljs-type\">double</span> yStart,\n      BiFunction&lt;Double, Double, Double&gt; differentialEquation) {\n    <span class=\"hljs-keyword\">if</span> (xStart &gt;= xEnd) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;xEnd should be greater than xStart&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (stepSize &lt;= <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;stepSize should be greater than zero&quot;</span>);\n    }\n\n    ArrayList&lt;<span class=\"hljs-type\">double</span>[]&gt; points = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;<span class=\"hljs-type\">double</span>[]&gt;();\n    <span class=\"hljs-type\">double</span>[] firstPoint = {xStart, yStart};\n    points.add(firstPoint);\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">yCurrent</span> <span class=\"hljs-operator\">=</span> yStart;\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">xCurrent</span> <span class=\"hljs-operator\">=</span> xStart;\n\n    <span class=\"hljs-keyword\">while</span> (xCurrent &lt; xEnd) {\n      <span class=\"hljs-comment\">// Euler method for next step</span>\n      yCurrent = eulerStep(xCurrent, stepSize, yCurrent, differentialEquation);\n      xCurrent += stepSize;\n      <span class=\"hljs-type\">double</span>[] point = {xCurrent, yCurrent};\n      points.add(point);\n    }\n\n    <span class=\"hljs-keyword\">return</span> points;\n  }\n}\n"
    },
    "julia": {
      "dir": "src/math/euler_method.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/euler_method.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    euler_method(f, x0, span, h=1.0e-2)\n\nCalculate the solution to a differential equation using forward euler method.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> euler_method(f, x0, span, h=<span class=\"hljs-number\">1.0e-2</span>)\n    s, e = span\n    steps = floor((e - s) / h) |&gt; <span class=\"hljs-built_in\">Int</span>\n    x = <span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Float64</span>}(<span class=\"hljs-literal\">undef</span>, steps)\n\tt = <span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Float64</span>}(<span class=\"hljs-literal\">undef</span>, steps)\n    x[<span class=\"hljs-number\">1</span>] = x0\n\tt[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:(steps - <span class=\"hljs-number\">1</span>)\n        x[i + <span class=\"hljs-number\">1</span>] = x[i] + h * f(x[i], t[i])\n\t\tt[i + <span class=\"hljs-number\">1</span>] = t[i] + h\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> x, t\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Numeric/EulerMethod.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Numeric/EulerMethod.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Numeric</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     In mathematics and computational science, the Euler method (also called forward Euler method)</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is a first-order numerical procedure for solving ordinary differential equations (ODEs)</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     with a given initial value (aka. Cauchy problem). It is the most basic explicit method for numerical integration</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     of ordinary differential equations. The method proceeds in a series of steps. At each step</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the y-value is calculated by evaluating the differential equation at the previous step,</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     multiplying the result with the step-size and adding it to the last y-value:</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     y_n+1 = y_n + stepSize * f(x_n, y_n).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (description adapted from https://en.wikipedia.org/wiki/Euler_method )</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (see also: https://www.geeksforgeeks.org/euler-method-solving-differential-equation/ ).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">EulerMethod</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Loops through all the steps until xEnd is reached, adds a point for each step and then</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     returns all the points.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;xStart&quot;&gt;</span>Initial conditions x-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;xEnd&quot;&gt;</span>Last x-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;stepSize&quot;&gt;</span>Step-size on the x-axis.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;yStart&quot;&gt;</span>Initial conditions y-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;yDerivative&quot;&gt;</span>The right hand side of the differential equation.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The solution of the Cauchy problem.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;<span class=\"hljs-built_in\">double</span>[]&gt; EulerFull(\n            <span class=\"hljs-built_in\">double</span> xStart,\n            <span class=\"hljs-built_in\">double</span> xEnd,\n            <span class=\"hljs-built_in\">double</span> stepSize,\n            <span class=\"hljs-built_in\">double</span> yStart,\n            Func&lt;<span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">double</span>&gt; yDerivative)\n        {\n            <span class=\"hljs-keyword\">if</span> (xStart &gt;= xEnd)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\n                    <span class=\"hljs-keyword\">nameof</span>(xEnd),\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(xEnd)}</span> should be greater than <span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(xStart)}</span>&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (stepSize &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\n                    <span class=\"hljs-keyword\">nameof</span>(stepSize),\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(stepSize)}</span> should be greater than zero&quot;</span>);\n            }\n\n            List&lt;<span class=\"hljs-built_in\">double</span>[]&gt; points = <span class=\"hljs-keyword\">new</span>();\n            <span class=\"hljs-built_in\">double</span>[] firstPoint = { xStart, yStart };\n            points.Add(firstPoint);\n            <span class=\"hljs-keyword\">var</span> yCurrent = yStart;\n            <span class=\"hljs-keyword\">var</span> xCurrent = xStart;\n\n            <span class=\"hljs-keyword\">while</span> (xCurrent &lt; xEnd)\n            {\n                yCurrent = EulerStep(xCurrent, stepSize, yCurrent, yDerivative);\n                xCurrent += stepSize;\n                <span class=\"hljs-built_in\">double</span>[] point = { xCurrent, yCurrent };\n                points.Add(point);\n            }\n\n            <span class=\"hljs-keyword\">return</span> points;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Calculates the next y-value based on the current value of x, y and the stepSize.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;xCurrent&quot;&gt;</span>Current x-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;stepSize&quot;&gt;</span>Step-size on the x-axis.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;yCurrent&quot;&gt;</span>Current y-value.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;yDerivative&quot;&gt;</span>The right hand side of the differential equation.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The next y-value.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">EulerStep</span>(<span class=\"hljs-params\">\n            <span class=\"hljs-built_in\">double</span> xCurrent,\n            <span class=\"hljs-built_in\">double</span> stepSize,\n            <span class=\"hljs-built_in\">double</span> yCurrent,\n            Func&lt;<span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">double</span>, <span class=\"hljs-built_in\">double</span>&gt; yDerivative</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> yNext = yCurrent + stepSize * yDerivative(xCurrent, yCurrent);\n            <span class=\"hljs-keyword\">return</span> yNext;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Jean-Francois Baffier",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
