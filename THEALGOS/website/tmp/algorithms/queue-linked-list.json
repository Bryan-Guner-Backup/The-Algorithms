{
  "slug": "queue-linked-list",
  "name": "Queue Linked List",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/linked_list/queue_linked_list.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/linked_list/queue_linked_list.c",
      "code": "<span class=\"hljs-comment\">/* Queue using Linked List - Program to create a queue ADT using linked list.\nADT should support the following operations 1)  Createqueue 2)  Insert into the\nqueue 3)  Delete from the queue 4)  destroyqueue\n*/</span>\n\n<span class=\"hljs-comment\">/* queue q declared globally */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> NULL 0</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\n};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">queue</span>\n{</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">front</span>, *<span class=\"hljs-title\">rear</span>;</span>\n};\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">queue</span> <span class=\"hljs-title\">q</span>;</span>\n\n<span class=\"hljs-comment\">/* This function initializes the queue to empty by making both front and rear as\n * NULL */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">createqueue</span><span class=\"hljs-params\">()</span> { q.front = q.rear = <span class=\"hljs-literal\">NULL</span>; }\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">empty</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-keyword\">if</span> (q.front == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">pnode</span>;</span>\n\n    pnode = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    <span class=\"hljs-keyword\">if</span> (pnode == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Memory overflow. Unable to insert.\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n    }\n\n    pnode-&gt;data = x;\n    pnode-&gt;next = <span class=\"hljs-literal\">NULL</span>; <span class=\"hljs-comment\">/* New node is always last node */</span>\n\n    <span class=\"hljs-keyword\">if</span> (empty())\n        q.front = q.rear = pnode;\n    <span class=\"hljs-keyword\">else</span>\n    {\n        (q.rear)-&gt;next = pnode;\n        q.rear = pnode;\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">removes</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> x;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span>;</span>\n\n    <span class=\"hljs-keyword\">if</span> (empty())\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Queue Underflow. Unable to remove.\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">1</span>);\n    }\n\n    p = q.front;\n    x = (q.front)-&gt;data;\n    q.front = (q.front)-&gt;next;\n    <span class=\"hljs-keyword\">if</span> (q.front == <span class=\"hljs-literal\">NULL</span>) <span class=\"hljs-comment\">/* Queue contained only one node */</span>\n        q.rear = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-built_in\">free</span>(p);\n    <span class=\"hljs-keyword\">return</span> x;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span>;</span>\n\n    <span class=\"hljs-keyword\">if</span> (empty())\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Queue empty. No data to display \\n&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Queue from front to rear is as shown: \\n&quot;</span>);\n\n        p = q.front;\n        <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, p-&gt;data);\n            p = p-&gt;next;\n        }\n\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    }\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">destroyqueue</span><span class=\"hljs-params\">()</span> { q.front = q.rear = <span class=\"hljs-literal\">NULL</span>; }\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> x, ch;\n\n    createqueue();\n\n    <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\n  Menu: \\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1:Insert \\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;2:Remove \\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;3:exit \\n&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter your choice: &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;ch);\n\n        <span class=\"hljs-keyword\">switch</span> (ch)\n        {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter element to be inserted: &quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;x);\n            insert(x);\n            show();\n            <span class=\"hljs-keyword\">break</span>;\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            x = removes();\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Element removed is: %d\\n&quot;</span>, x);\n            show();\n            <span class=\"hljs-keyword\">break</span>;\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    } <span class=\"hljs-keyword\">while</span> (ch != <span class=\"hljs-number\">3</span>);\n\n    destroyqueue();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Shubham Sah",
      "email": "42349247+shubhamsah@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
