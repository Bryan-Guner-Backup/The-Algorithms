{
  "slug": "stackes6",
  "name": "StackES6",
  "categories": ["datastructures", "stack"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Data-Structures/Stack/StackES6.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Data-Structures/Stack/StackES6.js",
      "code": "<span class=\"hljs-comment\">/* Stack data-structure. It&#x27;s work is based on the LIFO method (last-IN-first-OUT).\n * It means that elements added to the stack are placed on the top and only the\n * last element (from the top) can be reached. After we get access to the last\n * element, he pops from the stack.\n * This is a class-based implementation of a Stack. It provides functions\n * &#x27;push&#x27; - to add an element, &#x27;pop&#x27; - to remove an element from the top.\n * Also it implements &#x27;length&#x27;, &#x27;last&#x27; and &#x27;isEmpty&#x27; properties and\n * static isStack method to check is an object the instance of Stack class.\n */</span>\n\n<span class=\"hljs-comment\">// Class declaration</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Stack</span> {\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span> = []\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> = <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// Adds a value to the end of the Stack</span>\n  push (newValue) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>.<span class=\"hljs-title function_\">push</span>(newValue)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> += <span class=\"hljs-number\">1</span>\n  }\n\n  <span class=\"hljs-comment\">// Returns and removes the last element of the Stack</span>\n  pop () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> !== <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> -= <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>.<span class=\"hljs-title function_\">pop</span>()\n    }\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Stack Underflow&#x27;</span>)\n  }\n\n  <span class=\"hljs-comment\">// Returns the number of elements in the Stack</span>\n  get length () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span>\n  }\n\n  <span class=\"hljs-comment\">// Returns true if stack is empty, false otherwise</span>\n  get isEmpty () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> === <span class=\"hljs-number\">0</span>\n  }\n\n  <span class=\"hljs-comment\">// Returns the last element without removing it</span>\n  get last () {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">top</span> !== <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">stack</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>]\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  }\n\n  <span class=\"hljs-comment\">// Checks if an object is the instance os the Stack class</span>\n  <span class=\"hljs-keyword\">static</span> isStack (el) {\n    <span class=\"hljs-keyword\">return</span> el <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Stack</span>\n  }\n}\n<span class=\"hljs-keyword\">const</span> newStack = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Stack</span>()\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Is it a Stack?,&#x27;</span>, <span class=\"hljs-title class_\">Stack</span>.<span class=\"hljs-title function_\">isStack</span>(newStack))\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Is stack empty? &#x27;</span>, newStack.<span class=\"hljs-property\">isEmpty</span>)\nnewStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;Hello world&#x27;</span>)\nnewStack.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">42</span>)\nnewStack.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">7</span> })\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;The length of stack is &#x27;</span>, newStack.<span class=\"hljs-property\">length</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Is stack empty? &#x27;</span>, newStack.<span class=\"hljs-property\">isEmpty</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Give me the last one &#x27;</span>, newStack.<span class=\"hljs-property\">last</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Pop the latest &#x27;</span>, newStack.<span class=\"hljs-title function_\">pop</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Pop the latest &#x27;</span>, newStack.<span class=\"hljs-title function_\">pop</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Pop the latest &#x27;</span>, newStack.<span class=\"hljs-title function_\">pop</span>())\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Is stack empty? &#x27;</span>, newStack.<span class=\"hljs-property\">isEmpty</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Kolotushkin Maxim",
      "email": "58226682+Makso83@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
