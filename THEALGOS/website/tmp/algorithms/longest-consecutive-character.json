{
  "slug": "longest-consecutive-character",
  "name": "Longest Consecutive Character",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/Strings/GeneralStringAlgorithms.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Strings/GeneralStringAlgorithms.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Strings</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Implements simple algorithms on strings.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GeneralStringAlgorithms</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Finds character that creates longest consecutive substring with single character.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;input&quot;&gt;</span>String to find in.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Tuple containing char and number of times it appeared in a row.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Tuple&lt;<span class=\"hljs-built_in\">char</span>, <span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-title\">FindLongestConsecutiveCharacters</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> input</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> maxChar = input[<span class=\"hljs-number\">0</span>];\n\n            <span class=\"hljs-keyword\">var</span> max = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">var</span> current = <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; input.Length; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (input[i] == input[i - <span class=\"hljs-number\">1</span>])\n                {\n                    current++;\n                    <span class=\"hljs-keyword\">if</span> (current &gt; max)\n                    {\n                        max = current;\n                        maxChar = input[i];\n                    }\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    current = <span class=\"hljs-number\">1</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Tuple&lt;<span class=\"hljs-built_in\">char</span>, <span class=\"hljs-built_in\">int</span>&gt;(maxChar, max);\n        }\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
