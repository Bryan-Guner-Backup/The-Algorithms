{
  "slug": "edit-distance",
  "name": "Edit Distance",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming/edit_distance.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/edit_distance.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nAuthor  : Turfa Auliarachman\nDate    : October 12, 2016\n\nThis is a pure Python implementation of Dynamic Programming solution to the edit\ndistance problem.\n\nThe problem is :\nGiven two strings A and B. Find the minimum number of operations to string B such that\nA = B. The permitted operations are removal,  insertion, and substitution.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EditDistance</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Use :\n    solver              = EditDistance()\n    editDistanceResult  = solver.solve(firstString, secondString)\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.__prepare__()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__prepare__</span>(<span class=\"hljs-params\">self, N=<span class=\"hljs-number\">0</span>, M=<span class=\"hljs-number\">0</span></span>):\n        self.dp = [[-<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, M)] <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, N)]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__solveDP</span>(<span class=\"hljs-params\">self, x, y</span>):\n        <span class=\"hljs-keyword\">if</span> x == -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> y + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">elif</span> y == -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> x + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">elif</span> self.dp[x][y] &gt; -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> self.dp[x][y]\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">if</span> self.A[x] == self.B[y]:\n                self.dp[x][y] = self.__solveDP(x - <span class=\"hljs-number\">1</span>, y - <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                self.dp[x][y] = <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(\n                    self.__solveDP(x, y - <span class=\"hljs-number\">1</span>),\n                    self.__solveDP(x - <span class=\"hljs-number\">1</span>, y),\n                    self.__solveDP(x - <span class=\"hljs-number\">1</span>, y - <span class=\"hljs-number\">1</span>),\n                )\n\n            <span class=\"hljs-keyword\">return</span> self.dp[x][y]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">solve</span>(<span class=\"hljs-params\">self, A, B</span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(A, <span class=\"hljs-built_in\">bytes</span>):\n            A = A.decode(<span class=\"hljs-string\">&quot;ascii&quot;</span>)\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(B, <span class=\"hljs-built_in\">bytes</span>):\n            B = B.decode(<span class=\"hljs-string\">&quot;ascii&quot;</span>)\n\n        self.A = <span class=\"hljs-built_in\">str</span>(A)\n        self.B = <span class=\"hljs-built_in\">str</span>(B)\n\n        self.__prepare__(<span class=\"hljs-built_in\">len</span>(A), <span class=\"hljs-built_in\">len</span>(B))\n\n        <span class=\"hljs-keyword\">return</span> self.__solveDP(<span class=\"hljs-built_in\">len</span>(A) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(B) - <span class=\"hljs-number\">1</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">min_distance_bottom_up</span>(<span class=\"hljs-params\">word1: <span class=\"hljs-built_in\">str</span>, word2: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; min_distance_bottom_up(&quot;intention&quot;, &quot;execution&quot;)\n    5\n    &gt;&gt;&gt; min_distance_bottom_up(&quot;intention&quot;, &quot;&quot;)\n    9\n    &gt;&gt;&gt; min_distance_bottom_up(&quot;&quot;, &quot;&quot;)\n    0\n    &quot;&quot;&quot;</span>\n    m = <span class=\"hljs-built_in\">len</span>(word1)\n    n = <span class=\"hljs-built_in\">len</span>(word2)\n    dp = [[<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m + <span class=\"hljs-number\">1</span>)]\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(m + <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n + <span class=\"hljs-number\">1</span>):\n\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># first string is empty</span>\n                dp[i][j] = j\n            <span class=\"hljs-keyword\">elif</span> j == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># second string is empty</span>\n                dp[i][j] = i\n            <span class=\"hljs-keyword\">elif</span> (\n                word1[i - <span class=\"hljs-number\">1</span>] == word2[j - <span class=\"hljs-number\">1</span>]\n            ):  <span class=\"hljs-comment\"># last character of both substing is equal</span>\n                dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]\n            <span class=\"hljs-keyword\">else</span>:\n                insert = dp[i][j - <span class=\"hljs-number\">1</span>]\n                delete = dp[i - <span class=\"hljs-number\">1</span>][j]\n                replace = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]\n                dp[i][j] = <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(insert, delete, replace)\n    <span class=\"hljs-keyword\">return</span> dp[m][n]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    solver = EditDistance()\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;****************** Testing Edit Distance DP Algorithm ******************&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>()\n\n    S1 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the first string: &quot;</span>).strip()\n    S2 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter the second string: &quot;</span>).strip()\n\n    <span class=\"hljs-built_in\">print</span>()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The minimum Edit Distance is: %d&quot;</span> % (solver.solve(S1, S2)))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;The minimum Edit Distance is: %d&quot;</span> % (min_distance_bottom_up(S1, S2)))\n    <span class=\"hljs-built_in\">print</span>()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;*************** End of Testing Edit Distance DP Algorithm ***************&quot;</span>)\n"
    },
    "javascript": {
      "dir": "Dynamic-Programming/EditDistance.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/EditDistance.js",
      "code": "<span class=\"hljs-comment\">/*\nWikipedia -&gt; https://en.wikipedia.org/wiki/Edit_distance\n\nQ. -&gt; Given two strings `word1` and `word2`. You can perform these operations on any of the string to make both strings similar.\n    - Insert\n    - Remove\n    - Replace\nFind the minimum operation cost required to make both same. Each operation cost is 1.\n\nAlgorithm details -&gt;\ntime complexity - O(n*m)\nspace complexity - O(n*m)\n*/</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">minimumEditDistance</span> = (<span class=\"hljs-params\">word1, word2</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> n = word1.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> m = word2.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(m + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> [])\n\n  <span class=\"hljs-comment\">/*\n    fill dp matrix with default values -\n        - first row is filled considering no elements in word2.\n        - first column filled considering no elements in word1.\n    */</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; n + <span class=\"hljs-number\">1</span>; i++) {\n    dp[<span class=\"hljs-number\">0</span>][i] = i\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; m + <span class=\"hljs-number\">1</span>; i++) {\n    dp[i][<span class=\"hljs-number\">0</span>] = i\n  }\n\n  <span class=\"hljs-comment\">/*\n        indexing is 1 based for dp matrix as we defined some known values at first row and first column/\n    */</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; m + <span class=\"hljs-number\">1</span>; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">1</span>; j &lt; n + <span class=\"hljs-number\">1</span>; j++) {\n      <span class=\"hljs-keyword\">const</span> letter1 = word1[j - <span class=\"hljs-number\">1</span>]\n      <span class=\"hljs-keyword\">const</span> letter2 = word2[i - <span class=\"hljs-number\">1</span>]\n\n      <span class=\"hljs-keyword\">if</span> (letter1 === letter2) {\n        dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]\n      } <span class=\"hljs-keyword\">else</span> {\n        dp[i][j] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">min</span>(dp[i - <span class=\"hljs-number\">1</span>][j], dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>], dp[i][j - <span class=\"hljs-number\">1</span>]) + <span class=\"hljs-number\">1</span>\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> dp[m][n]\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">minimumEditDistance</span>(<span class=\"hljs-string\">&#x27;horse&#x27;</span>, <span class=\"hljs-string\">&#x27;ros&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">minimumEditDistance</span>(<span class=\"hljs-string\">&#x27;cat&#x27;</span>, <span class=\"hljs-string\">&#x27;cut&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">minimumEditDistance</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;abc&#x27;</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">minimumEditDistance</span>(<span class=\"hljs-string\">&#x27;google&#x27;</span>, <span class=\"hljs-string\">&#x27;glgool&#x27;</span>))\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    },
    "c-plus-plus": {
      "dir": "dynamic_programming/edit_distance.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/edit_distance.cpp",
      "code": "<span class=\"hljs-comment\">/* Given two strings str1 &amp; str2\n * and below operations that can\n * be performed on str1. Find\n * minimum number of edits\n * (operations) required to convert\n * &#x27;str1&#x27; into &#x27;str2&#x27;/\n * a. Insert\n * b. Remove\n * c. Replace\n * All of the above operations are\n * of equal cost\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y, <span class=\"hljs-type\">int</span> z)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-built_in\">min</span>(x, y), z); }\n\n<span class=\"hljs-comment\">/* A Naive recursive C++ program to find\n * minimum number of operations to convert\n * str1 to str2.\n * O(3^m)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">editDist</span><span class=\"hljs-params\">(string str1, string str2, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (m == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> n;\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> m;\n\n    <span class=\"hljs-comment\">// If last characters are same then continue</span>\n    <span class=\"hljs-comment\">// for the rest of them.</span>\n    <span class=\"hljs-keyword\">if</span> (str1[m - <span class=\"hljs-number\">1</span>] == str2[n - <span class=\"hljs-number\">1</span>])\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">editDist</span>(str1, str2, m - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-comment\">// If last not same, then 3 possibilities</span>\n    <span class=\"hljs-comment\">// a.Insert b.Remove c. Replace</span>\n    <span class=\"hljs-comment\">// Get min of three and continue for rest.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-built_in\">editDist</span>(str1, str2, m, n - <span class=\"hljs-number\">1</span>),\n                   <span class=\"hljs-built_in\">editDist</span>(str1, str2, m - <span class=\"hljs-number\">1</span>, n),\n                   <span class=\"hljs-built_in\">editDist</span>(str1, str2, m - <span class=\"hljs-number\">1</span>, n - <span class=\"hljs-number\">1</span>));\n}\n\n<span class=\"hljs-comment\">/* A DP based program\n * O(m x n)\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">editDistDP</span><span class=\"hljs-params\">(string str1, string str2, <span class=\"hljs-type\">int</span> m, <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-comment\">// Create Table for SubProblems</span>\n    <span class=\"hljs-type\">int</span> dp[m + <span class=\"hljs-number\">1</span>][n + <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-comment\">// Fill d[][] in bottom up manner</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= m; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt;= n; j++) {\n            <span class=\"hljs-comment\">// If str1 empty. Then add all of str2</span>\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>)\n                dp[i][j] = j;\n\n            <span class=\"hljs-comment\">// If str2 empty. Then add all of str1</span>\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span>)\n                dp[i][j] = i;\n\n            <span class=\"hljs-comment\">// If character same. Recur for remaining</span>\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str1[i - <span class=\"hljs-number\">1</span>] == str2[j - <span class=\"hljs-number\">1</span>])\n                dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];\n\n            <span class=\"hljs-keyword\">else</span>\n                dp[i][j] = <span class=\"hljs-number\">1</span> + <span class=\"hljs-built_in\">min</span>(dp[i][j - <span class=\"hljs-number\">1</span>],     <span class=\"hljs-comment\">// Insert</span>\n                                   dp[i - <span class=\"hljs-number\">1</span>][j],     <span class=\"hljs-comment\">// Remove</span>\n                                   dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]  <span class=\"hljs-comment\">// Replace</span>\n                               );\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> dp[m][n];\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    string str1 = <span class=\"hljs-string\">&quot;sunday&quot;</span>;\n    string str2 = <span class=\"hljs-string\">&quot;saturday&quot;</span>;\n\n    cout &lt;&lt; <span class=\"hljs-built_in\">editDist</span>(str1, str2, str1.<span class=\"hljs-built_in\">length</span>(), str2.<span class=\"hljs-built_in\">length</span>()) &lt;&lt; endl;\n    cout &lt;&lt; <span class=\"hljs-built_in\">editDistDP</span>(str1, str2, str1.<span class=\"hljs-built_in\">length</span>(), str2.<span class=\"hljs-built_in\">length</span>()) &lt;&lt; endl;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "DynamicProgramming/EditDistance.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/EditDistance.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-comment\">/**\n * A DynamicProgramming based solution for Edit Distance problem In Java Description of Edit\n * Distance with an Example:\n *\n * &lt;p&gt;Edit distance is a way of quantifying how dissimilar two strings (e.g., words) are to one\n * another, by counting the minimum number of operations required to transform one string into the\n * other. The distance operations are the removal, insertion, or substitution of a character in the\n * string.\n *\n * &lt;p&gt;\n *\n * &lt;p&gt;The Distance between &quot;kitten&quot; and &quot;sitting&quot; is 3. A minimal edit script that transforms the\n * former into the latter is:\n *\n * &lt;p&gt;kitten → sitten (substitution of &quot;s&quot; for &quot;k&quot;) sitten → sittin (substitution of &quot;i&quot; for &quot;e&quot;)\n * sittin → sitting (insertion of &quot;g&quot; at the end).\n *\n * <span class=\"hljs-doctag\">@author</span> SUBHAM SANGHAI\n */</span>\n<span class=\"hljs-keyword\">import</span> java.util.Scanner;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EditDistance</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">minDistance</span><span class=\"hljs-params\">(String word1, String word2)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len1</span> <span class=\"hljs-operator\">=</span> word1.length();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len2</span> <span class=\"hljs-operator\">=</span> word2.length();\n    <span class=\"hljs-comment\">// len1+1, len2+1, because finally return dp[len1][len2]</span>\n    <span class=\"hljs-type\">int</span>[][] dp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[len1 + <span class=\"hljs-number\">1</span>][len2 + <span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-comment\">/* If second string is empty, the only option is to\n    insert all characters of first string into second*/</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= len1; i++) {\n      dp[i][<span class=\"hljs-number\">0</span>] = i;\n    }\n    <span class=\"hljs-comment\">/* If first string is empty, the only option is to\n    insert all characters of second string into first*/</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt;= len2; j++) {\n      dp[<span class=\"hljs-number\">0</span>][j] = j;\n    }\n    <span class=\"hljs-comment\">// iterate though, and check last char</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; len1; i++) {\n      <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c1</span> <span class=\"hljs-operator\">=</span> word1.charAt(i);\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; len2; j++) {\n        <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c2</span> <span class=\"hljs-operator\">=</span> word2.charAt(j);\n        <span class=\"hljs-comment\">// if last two chars equal</span>\n        <span class=\"hljs-keyword\">if</span> (c1 == c2) {\n          <span class=\"hljs-comment\">// update dp value for +1 length</span>\n          dp[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">1</span>] = dp[i][j];\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-comment\">/* if two characters are different ,\n          then take the minimum of the various operations(i.e insertion,removal,substitution)*/</span>\n          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">replace</span> <span class=\"hljs-operator\">=</span> dp[i][j] + <span class=\"hljs-number\">1</span>;\n          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">insert</span> <span class=\"hljs-operator\">=</span> dp[i][j + <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>;\n          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">delete</span> <span class=\"hljs-operator\">=</span> dp[i + <span class=\"hljs-number\">1</span>][j] + <span class=\"hljs-number\">1</span>;\n\n          <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> replace &gt; insert ? insert : replace;\n          min = delete &gt; min ? min : delete;\n          dp[i + <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">1</span>] = min;\n        }\n      }\n    }\n    <span class=\"hljs-comment\">/* return the final answer , after traversing through both the strings*/</span>\n    <span class=\"hljs-keyword\">return</span> dp[len1][len2];\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    String s1, s2;\n    System.out.println(<span class=\"hljs-string\">&quot;Enter the First String&quot;</span>);\n    s1 = input.nextLine();\n    System.out.println(<span class=\"hljs-string\">&quot;Enter the Second String&quot;</span>);\n    s2 = input.nextLine();\n    <span class=\"hljs-comment\">// ans stores the final Edit Distance between the two strings</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ans</span> <span class=\"hljs-operator\">=</span> minDistance(s1, s2);\n    System.out.println(\n        <span class=\"hljs-string\">&quot;The minimum Edit Distance between \\&quot;&quot;</span> + s1 + <span class=\"hljs-string\">&quot;\\&quot; and \\&quot;&quot;</span> + s2 + <span class=\"hljs-string\">&quot;\\&quot; is &quot;</span> + ans);\n    input.close();\n  }\n}\n"
    },
    "rust": {
      "dir": "src/dynamic_programming/edit_distance.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/edit_distance.rs",
      "code": "<span class=\"hljs-comment\">//! Compute the edit distance between two strings</span>\n\n<span class=\"hljs-keyword\">use</span> std::cmp::min;\n\n<span class=\"hljs-comment\">/// edit_distance(str_a, str_b) returns the edit distance between the two</span>\n<span class=\"hljs-comment\">/// strings This edit distance is defined as being 1 point per insertion,</span>\n<span class=\"hljs-comment\">/// substitution, or deletion which must be made to make the strings equal.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// This function iterates over the bytes in the string, so it may not behave</span>\n<span class=\"hljs-comment\">/// entirely as expected for non-ASCII strings.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// # Complexity</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// - time complexity: O(nm),</span>\n<span class=\"hljs-comment\">/// - space complexity: O(nm),</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// where n and m are lengths of `str_a` and `str_b`</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">edit_distance</span>(str_a: &amp;<span class=\"hljs-type\">str</span>, str_b: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u32</span> {\n    <span class=\"hljs-comment\">// distances[i][j] = distance between a[..i] and b[..j]</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">distances</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; str_b.<span class=\"hljs-title function_ invoke__\">len</span>() + <span class=\"hljs-number\">1</span>]; str_a.<span class=\"hljs-title function_ invoke__\">len</span>() + <span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-comment\">// Initialize cases in which one string is empty</span>\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..=str_b.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        distances[<span class=\"hljs-number\">0</span>][j] = j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n    }\n    <span class=\"hljs-title function_ invoke__\">for</span> (i, item) <span class=\"hljs-keyword\">in</span> distances.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n        item[<span class=\"hljs-number\">0</span>] = i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=str_a.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=str_b.<span class=\"hljs-title function_ invoke__\">len</span>() {\n            distances[i][j] = <span class=\"hljs-title function_ invoke__\">min</span>(distances[i - <span class=\"hljs-number\">1</span>][j] + <span class=\"hljs-number\">1</span>, distances[i][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">if</span> str_a.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()[i - <span class=\"hljs-number\">1</span>] == str_b.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()[j - <span class=\"hljs-number\">1</span>] {\n                distances[i][j] = <span class=\"hljs-title function_ invoke__\">min</span>(distances[i][j], distances[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]);\n            } <span class=\"hljs-keyword\">else</span> {\n                distances[i][j] = <span class=\"hljs-title function_ invoke__\">min</span>(distances[i][j], distances[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>);\n            }\n        }\n    }\n    distances[str_a.<span class=\"hljs-title function_ invoke__\">len</span>()][str_b.<span class=\"hljs-title function_ invoke__\">len</span>()]\n}\n\n<span class=\"hljs-comment\">/// The space efficient version of the above algorithm.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Instead of storing the `m * n` matrix expicitly, only one row (of length `n`) is stored.</span>\n<span class=\"hljs-comment\">/// It keeps overwriting itself based on its previous values with the help of two scalars,</span>\n<span class=\"hljs-comment\">/// gradually reaching the last row. Then, the score is `matrix[n]`.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// # Complexity</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// - time complexity: O(nm),</span>\n<span class=\"hljs-comment\">/// - space complexity: O(n),</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// where n and m are lengths of `str_a` and `str_b`</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">edit_distance_se</span>(str_a: &amp;<span class=\"hljs-type\">str</span>, str_b: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u32</span> {\n    <span class=\"hljs-keyword\">let</span> (str_a, str_b) = (str_a.<span class=\"hljs-title function_ invoke__\">as_bytes</span>(), str_b.<span class=\"hljs-title function_ invoke__\">as_bytes</span>());\n    <span class=\"hljs-keyword\">let</span> (m, n) = (str_a.<span class=\"hljs-title function_ invoke__\">len</span>(), str_b.<span class=\"hljs-title function_ invoke__\">len</span>());\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">distances</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">u32</span>&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; n + <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// the dynamic programming matrix (only 1 row stored)</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">s</span>: <span class=\"hljs-type\">u32</span>; <span class=\"hljs-comment\">// distances[i - 1][j - 1] or distances[i - 1][j]</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">c</span>: <span class=\"hljs-type\">u32</span>; <span class=\"hljs-comment\">// distances[i][j - 1] or distances[i][j]</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">char_a</span>: <span class=\"hljs-type\">u8</span>; <span class=\"hljs-comment\">// str_a[i - 1] the i-th character in str_a; only needs to be computed once per row</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">char_b</span>: <span class=\"hljs-type\">u8</span>; <span class=\"hljs-comment\">// str_b[j - 1] the j-th character in str_b</span>\n\n    <span class=\"hljs-comment\">// 0th row</span>\n    <span class=\"hljs-title function_ invoke__\">for</span> (j, v) <span class=\"hljs-keyword\">in</span> distances.<span class=\"hljs-title function_ invoke__\">iter_mut</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>().<span class=\"hljs-title function_ invoke__\">take</span>(n + <span class=\"hljs-number\">1</span>).<span class=\"hljs-title function_ invoke__\">skip</span>(<span class=\"hljs-number\">1</span>) {\n        *v = j <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n    }\n    <span class=\"hljs-comment\">// rows 1 to m</span>\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=m {\n        s = (i - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n        c = i <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u32</span>;\n        char_a = str_a[i - <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..=n {\n            <span class=\"hljs-comment\">// c is distances[i][j-1] and s is distances[i-1][j-1] at the beginning of each round of iteration</span>\n            char_b = str_b[j - <span class=\"hljs-number\">1</span>];\n            c = <span class=\"hljs-title function_ invoke__\">min</span>(\n                s + <span class=\"hljs-keyword\">if</span> char_a == char_b { <span class=\"hljs-number\">0</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-number\">1</span> },\n                <span class=\"hljs-title function_ invoke__\">min</span>(c + <span class=\"hljs-number\">1</span>, distances[j] + <span class=\"hljs-number\">1</span>),\n            );\n            <span class=\"hljs-comment\">// c is updated to distances[i][j], and will thus become distances[i][j-1] for the next cell</span>\n            s = distances[j]; <span class=\"hljs-comment\">// here distances[j] means distances[i-1][j] becuase it has not been overwritten yet</span>\n                              <span class=\"hljs-comment\">// s is updated to distances[i-1][j], and will thus become distances[i-1][j-1] for the next cell</span>\n            distances[j] = c; <span class=\"hljs-comment\">// now distances[j] is updated to distances[i][j], and will thus become distances[i-1][j] for the next ROW</span>\n        }\n    }\n\n    distances[n]\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">equal_strings</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Hello, world!&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Hello, world!&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_edit_difference</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Hell, world!&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#2&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#10&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Hell, world!&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#2&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Test_Case_#1&quot;</span>, <span class=\"hljs-string\">&quot;Test_Case_#10&quot;</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">several_differences</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;My Cat&quot;</span>, <span class=\"hljs-string\">&quot;My Case&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Goodbye, world!&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-title function_ invoke__\">edit_distance</span>(<span class=\"hljs-string\">&quot;Test_Case_#3&quot;</span>, <span class=\"hljs-string\">&quot;Case #3&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;My Cat&quot;</span>, <span class=\"hljs-string\">&quot;My Case&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Hello, world!&quot;</span>, <span class=\"hljs-string\">&quot;Goodbye, world!&quot;</span>));\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-title function_ invoke__\">edit_distance_se</span>(<span class=\"hljs-string\">&quot;Test_Case_#3&quot;</span>, <span class=\"hljs-string\">&quot;Case #3&quot;</span>));\n    }\n}\n"
    },
    "php": {
      "dir": "String/EditDistance.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/String/EditDistance.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n<span class=\"hljs-comment\">/**\n * Edit distance (Levenshtein distance).\n * Compute the difference between two sequences, ie, the minimum number of changes\n * to get to $str2 from $str1\n * <span class=\"hljs-doctag\">@param</span> string $str1\n * <span class=\"hljs-doctag\">@param</span> string $str2\n * <span class=\"hljs-doctag\">@return</span> int the minimum number of changes to transform one string into another\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">editDistance</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$str1</span>, <span class=\"hljs-variable\">$str2</span></span>)\n</span>{\n    <span class=\"hljs-variable\">$lenStr1</span> = strlen(<span class=\"hljs-variable\">$str1</span>);\n    <span class=\"hljs-variable\">$lenStr2</span> = strlen(<span class=\"hljs-variable\">$str2</span>);\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$lenStr1</span> == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$lenStr2</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$lenStr2</span> == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$lenStr1</span>;\n    }\n\n    <span class=\"hljs-variable\">$distanceVectorInit</span> = [];\n    <span class=\"hljs-variable\">$distanceVectorFinal</span> = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$lenStr1</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-variable\">$i</span>++) {\n        <span class=\"hljs-variable\">$distanceVectorInit</span>[] = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-variable\">$distanceVectorFinal</span>[] = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$lenStr1</span> + <span class=\"hljs-number\">1</span>; <span class=\"hljs-variable\">$i</span>++) {\n        <span class=\"hljs-variable\">$distanceVectorInit</span>[<span class=\"hljs-variable\">$i</span>] = <span class=\"hljs-variable\">$i</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$lenStr2</span>; <span class=\"hljs-variable\">$i</span>++) {\n        <span class=\"hljs-variable\">$distanceVectorFinal</span>[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-variable\">$i</span> + <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-comment\">// use formula to fill in the rest of the row</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$j</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$j</span> &lt; <span class=\"hljs-variable\">$lenStr1</span>; <span class=\"hljs-variable\">$j</span>++) {\n            <span class=\"hljs-variable\">$substitutionCost</span> = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$str1</span>[<span class=\"hljs-variable\">$j</span>] == <span class=\"hljs-variable\">$str2</span>[<span class=\"hljs-variable\">$i</span>]) {\n                <span class=\"hljs-variable\">$substitutionCost</span> = <span class=\"hljs-variable\">$distanceVectorInit</span>[<span class=\"hljs-variable\">$j</span>];\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-variable\">$substitutionCost</span> = <span class=\"hljs-variable\">$distanceVectorInit</span>[<span class=\"hljs-variable\">$j</span>] + <span class=\"hljs-number\">1</span>;\n            }\n\n            <span class=\"hljs-variable\">$distanceVectorFinal</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>] = min(<span class=\"hljs-variable\">$distanceVectorInit</span>[<span class=\"hljs-variable\">$j</span>+<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">1</span>, min(<span class=\"hljs-variable\">$distanceVectorFinal</span>[<span class=\"hljs-variable\">$j</span>] + <span class=\"hljs-number\">1</span>, <span class=\"hljs-variable\">$substitutionCost</span>));\n        }\n\n        <span class=\"hljs-variable\">$distanceVectorInit</span> = <span class=\"hljs-variable\">$distanceVectorFinal</span>;\n    }\n\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$distanceVectorFinal</span>[<span class=\"hljs-variable\">$lenStr1</span>];\n}"
    },
    "kotlin": {
      "dir": "src/main/kotlin/dynamicProgramming/EditDistance.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/dynamicProgramming/EditDistance.kt",
      "code": "<span class=\"hljs-keyword\">package</span> dynamicProgramming\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">min</span><span class=\"hljs-params\">(x: <span class=\"hljs-type\">Int</span>, y: <span class=\"hljs-type\">Int</span>, z: <span class=\"hljs-type\">Int</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\n    <span class=\"hljs-keyword\">if</span> (x &lt;= y &amp;&amp; x &lt;= z) <span class=\"hljs-keyword\">return</span> x\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> (y &lt;= x &amp;&amp; y &lt;= z) y <span class=\"hljs-keyword\">else</span> z\n}\n\n<span class=\"hljs-comment\">/*\n * This is a dynamic programming implementation of edit distance.\n * @Params str1,str2 - strings to be compared\n * @Return minimum number of operations to convert one string to another\n * */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">editDistance</span><span class=\"hljs-params\">(str1: <span class=\"hljs-type\">String</span>, str2: <span class=\"hljs-type\">String</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\n    <span class=\"hljs-keyword\">val</span> dp = Array(str1.length + <span class=\"hljs-number\">1</span>) { IntArray(str2.length + <span class=\"hljs-number\">1</span>) }\n\n    <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0.</span>.str1.length) {\n        <span class=\"hljs-keyword\">for</span> (j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0.</span>.str2.length) {\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>) dp[i][j] = j\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (j == <span class=\"hljs-number\">0</span>) dp[i][j] = i\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str1[i - <span class=\"hljs-number\">1</span>]\n                    == str2[j - <span class=\"hljs-number\">1</span>]) dp[i][j] = dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">else</span> dp[i][j] = (<span class=\"hljs-number\">1</span>\n                    + min(dp[i][j - <span class=\"hljs-number\">1</span>],\n                    dp[i - <span class=\"hljs-number\">1</span>][j],\n                    dp[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>]))\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> dp[str1.length][str2.length]\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Abhishek",
      "email": "raabhishek2@gmail.com",
      "commits": 1
    },
    {
      "name": "Juan Martín Enríquez",
      "email": "juan@flydreamers.com",
      "commits": 1
    },
    {
      "name": "Matthias Gilch",
      "email": "matthias.gilch.mg@gmail.com",
      "commits": 1
    },
    {
      "name": "Tianyi Shi",
      "email": "ShiTianyi2001@outlook.com",
      "commits": 1
    },
    {
      "name": "Suhail Malik",
      "email": "suhailmalik8057@gmail.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "CrazyMerlyn",
      "email": "crazy.d.merlyn@gmail.com",
      "commits": 1
    },
    {
      "name": "Rohit Chugh",
      "email": "rohitchugh.95@gmail.com",
      "commits": 1
    },
    {
      "name": "Sanders Lin",
      "email": "45224617+SandersLin@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Turfa Auliarachman",
      "email": "turfa_auliarachman@rocketmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "JarredAllen",
      "email": "jarredallen73@gmail.com",
      "commits": 2
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
