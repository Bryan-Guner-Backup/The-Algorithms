{
  "slug": "is-square-free",
  "name": "Is Square Free",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/is_square_free.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/is_square_free.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nReferences: wikipedia:square free number\r\npython/black : True\r\nflake8 : True\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_square_free</span>(<span class=\"hljs-params\">factors: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    # doctest: +NORMALIZE_WHITESPACE\r\n    This functions takes a list of prime factors as input.\r\n    returns True if the factors are square free.\r\n    &gt;&gt;&gt; is_square_free([1, 1, 2, 3, 4])\r\n    False\r\n\r\n    These are wrong but should return some value\r\n    it simply checks for repition in the numbers.\r\n    &gt;&gt;&gt; is_square_free([1, 3, 4, &#x27;sd&#x27;, 0.0])\r\n    True\r\n\r\n    &gt;&gt;&gt; is_square_free([1, 0.5, 2, 0.0])\r\n    True\r\n    &gt;&gt;&gt; is_square_free([1, 2, 2, 5])\r\n    False\r\n    &gt;&gt;&gt; is_square_free(&#x27;asd&#x27;)\r\n    True\r\n    &gt;&gt;&gt; is_square_free(24)\r\n    Traceback (most recent call last):\r\n        ...\r\n    TypeError: &#x27;int&#x27; object is not iterable\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">set</span>(factors)) == <span class=\"hljs-built_in\">len</span>(factors)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
