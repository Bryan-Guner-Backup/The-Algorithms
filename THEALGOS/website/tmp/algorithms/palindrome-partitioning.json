{
  "slug": "palindrome-partitioning",
  "name": "Palindrome Partitioning",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming/palindrome_partitioning.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/palindrome_partitioning.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implements [Palindrome\n * Partitioning](https://leetcode.com/problems/palindrome-partitioning-ii/)\n * algorithm, giving you the minimum number of partitions you need to make\n *\n * @details\n * palindrome partitioning uses dynamic programming and goes to all the possible\n * partitions to find the minimum you are given a string and you need to give\n * minimum number of partitions needed to divide it into a number of palindromes\n * [Palindrome Partitioning]\n * (https://www.geeksforgeeks.org/palindrome-partitioning-dp-17/) overall time\n * complexity O(n^2) For example: example 1:- String : &quot;nitik&quot; Output : 2 =&gt; &quot;n\n * | iti | k&quot; For example: example 2:- String : &quot;ababbbabbababa&quot; Output : 3 =&gt;\n * &quot;aba | b | bbabb | ababa&quot;\n * @author [Sujay Kaushik] (https://github.com/sujaykaushik008)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">// for std::min</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">// for std::assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span>    <span class=\"hljs-comment\">// for INT_MAX</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace dynamic_programming\n * @brief Dynamic Programming algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\n\n<span class=\"hljs-comment\">/**\n * @namespace palindrome_partitioning\n * @brief Functions for [Palindrome\n * Partitioning](https://leetcode.com/problems/palindrome-partitioning-ii/)\n * algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> palindrome_partitioning {\n\n<span class=\"hljs-comment\">/**\n * Function implementing palindrome partitioning algorithm using lookup table\n * method.\n * @param str input string\n * @returns minimum number of partitions\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">pal_part</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;str)</span> </span>{\n    <span class=\"hljs-type\">int</span> n = str.<span class=\"hljs-built_in\">size</span>();\n\n    <span class=\"hljs-comment\">// creating lookup table for minimum number of cuts</span>\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt; <span class=\"hljs-built_in\">cuts</span>(n, std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n, <span class=\"hljs-number\">0</span>));\n\n    <span class=\"hljs-comment\">// creating lookup table for palindrome checking</span>\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; &gt; <span class=\"hljs-built_in\">is_palindrome</span>(n,\n                                                  std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">bool</span>&gt;(n, <span class=\"hljs-literal\">false</span>));\n\n    <span class=\"hljs-comment\">// initialization</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        is_palindrome[i][i] = <span class=\"hljs-literal\">true</span>;\n        cuts[i][i] = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> len = <span class=\"hljs-number\">2</span>; len &lt;= n; len++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> start_index = <span class=\"hljs-number\">0</span>; start_index &lt; n - len + <span class=\"hljs-number\">1</span>; start_index++) {\n            <span class=\"hljs-type\">int</span> end_index = start_index + len - <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-keyword\">if</span> (len == <span class=\"hljs-number\">2</span>) {\n                is_palindrome[start_index][end_index] =\n                    (str[start_index] == str[end_index]);\n            } <span class=\"hljs-keyword\">else</span> {\n                is_palindrome[start_index][end_index] =\n                    (str[start_index] == str[end_index]) &amp;&amp;\n                    is_palindrome[start_index + <span class=\"hljs-number\">1</span>][end_index - <span class=\"hljs-number\">1</span>];\n            }\n\n            <span class=\"hljs-keyword\">if</span> (is_palindrome[start_index][end_index]) {\n                cuts[start_index][end_index] = <span class=\"hljs-number\">0</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                cuts[start_index][end_index] = INT_MAX;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> partition = start_index; partition &lt;= end_index - <span class=\"hljs-number\">1</span>;\n                     partition++) {\n                    cuts[start_index][end_index] =\n                        std::<span class=\"hljs-built_in\">min</span>(cuts[start_index][end_index],\n                                 cuts[start_index][partition] +\n                                     cuts[partition + <span class=\"hljs-number\">1</span>][end_index] + <span class=\"hljs-number\">1</span>);\n                }\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> cuts[<span class=\"hljs-number\">0</span>][n - <span class=\"hljs-number\">1</span>];\n}\n}  <span class=\"hljs-comment\">// namespace palindrome_partitioning</span>\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test Function\n * @return void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// custom input vector</span>\n    std::vector&lt;std::string&gt; custom_input{<span class=\"hljs-string\">&quot;nitik&quot;</span>, <span class=\"hljs-string\">&quot;ababbbabbababa&quot;</span>, <span class=\"hljs-string\">&quot;abdc&quot;</span>};\n\n    <span class=\"hljs-comment\">// calculated output vector by pal_part Function</span>\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">calculated_output</span><span class=\"hljs-params\">(<span class=\"hljs-number\">3</span>)</span></span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\n        calculated_output[i] =\n            dynamic_programming::palindrome_partitioning::<span class=\"hljs-built_in\">pal_part</span>(\n                custom_input[i]);\n    }\n\n    <span class=\"hljs-comment\">// expected output vector</span>\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; expected_output{<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\n\n    <span class=\"hljs-comment\">// Testing implementation via assert function</span>\n    <span class=\"hljs-comment\">// It will throw error if any of the expected test fails</span>\n    <span class=\"hljs-comment\">// Else it will give nothing</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\n        <span class=\"hljs-built_in\">assert</span>(expected_output[i] == calculated_output[i]);\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All tests passed successfully!\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the test</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/dynamic_programming/PalindromePartitioning.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/dynamic_programming/PalindromePartitioning.kt",
      "code": "<span class=\"hljs-keyword\">package</span> dynamic_programming\n\n<span class=\"hljs-comment\">/**\n * Palindrome Partitioning Algorithm\n *\n * You are given a string as input, and task is to find the minimum number of partitions to be made,\n * in the string sot that the resulting strings are all palindrome\n * eg. s = &quot;nitik&quot;\n * string s can be partitioned as n | iti | k into 3 palindromes, thus the number of partions are 2\n * Time Complexity = O(n^2)\n *\n * */</span>\n\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> String is the string to be checked\n * <span class=\"hljs-doctag\">@param</span> Int is the starting index of the string in consideration\n * <span class=\"hljs-doctag\">@param</span> Int is the ending index of the string in consideration\n * <span class=\"hljs-doctag\">@return</span> whether string is a palindrome or not\n **/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">isPalindrome</span><span class=\"hljs-params\">(string: <span class=\"hljs-type\">String</span>, i: <span class=\"hljs-type\">Int</span>, j: <span class=\"hljs-type\">Int</span>)</span></span>: <span class=\"hljs-built_in\">Boolean</span> {\n    <span class=\"hljs-keyword\">for</span> (l <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0.</span>.(j - i) / <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">if</span> (string[l + i] != string[j - l]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> String is the string to be checked\n * <span class=\"hljs-doctag\">@param</span> Int is the starting index of the string in consideration\n * <span class=\"hljs-doctag\">@param</span> Int is the ending index of the string in consideration\n * <span class=\"hljs-doctag\">@return</span> minimum number of partitions required\n **/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">palindromePartition</span><span class=\"hljs-params\">(string: <span class=\"hljs-type\">String</span>, i: <span class=\"hljs-type\">Int</span>, j: <span class=\"hljs-type\">Int</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\n    <span class=\"hljs-keyword\">if</span> (i &gt;= j) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n    <span class=\"hljs-keyword\">if</span> (isPalindrome(string, i, j)) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n    }\n    <span class=\"hljs-keyword\">if</span> (dp[i][j] != -<span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">return</span> dp[i][j]\n    }\n    <span class=\"hljs-keyword\">var</span> mn = <span class=\"hljs-built_in\">Int</span>.MAX_VALUE\n    <span class=\"hljs-keyword\">for</span> (k <span class=\"hljs-keyword\">in</span> i until j) {\n        <span class=\"hljs-keyword\">val</span> temp: <span class=\"hljs-built_in\">Int</span> = palindromePartition(string, i, k) + palindromePartition(string, k + <span class=\"hljs-number\">1</span>, j) + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> (temp &lt; mn) {\n            mn = temp\n        }\n    }\n    dp[i][j] = mn\n    <span class=\"hljs-keyword\">return</span> dp[i][j]\n}\n\n\n<span class=\"hljs-comment\">/**\n * memoization table\n **/</span>\n<span class=\"hljs-keyword\">lateinit</span> <span class=\"hljs-keyword\">var</span> dp: Array&lt;Array&lt;<span class=\"hljs-built_in\">Int</span>&gt;&gt;\n\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> String the string on which algorithm is to be operated\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(string: <span class=\"hljs-type\">String</span>)</span></span>: <span class=\"hljs-built_in\">Int</span> {\n    dp = Array(string.length) { Array(string.length) { -<span class=\"hljs-number\">1</span> } }\n    <span class=\"hljs-keyword\">return</span> palindromePartition(string, <span class=\"hljs-number\">0</span>, string.length - <span class=\"hljs-number\">1</span>)\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "Sujay008",
      "email": "45827775+sujaykaushik008@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
