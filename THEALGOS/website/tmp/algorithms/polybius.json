{
  "slug": "polybius",
  "name": "Polybius",
  "categories": ["ciphers", "polybius"],
  "body": {},
  "implementations": {
    "go": {
      "dir": "ciphers/polybius/polybius.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/ciphers/polybius/polybius.go",
      "code": "<span class=\"hljs-comment\">// Package polybius is encrypting method with polybius square</span>\n<span class=\"hljs-comment\">// ref: https://en.wikipedia.org/wiki/Polybius_square#Hybrid_Polybius_Playfair_Cipher</span>\n<span class=\"hljs-keyword\">package</span> polybius\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\n\t<span class=\"hljs-string\">&quot;strings&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Polybius is struct having size, characters, and key</span>\n<span class=\"hljs-keyword\">type</span> Polybius <span class=\"hljs-keyword\">struct</span> {\n\tsize       <span class=\"hljs-keyword\">int</span>\n\tcharacters <span class=\"hljs-keyword\">string</span>\n\tkey        <span class=\"hljs-keyword\">string</span>\n}\n\n<span class=\"hljs-comment\">// NewPolybius returns a pointer to object of Polybius.</span>\n<span class=\"hljs-comment\">// If the size of &quot;chars&quot; is longer than &quot;size&quot;,</span>\n<span class=\"hljs-comment\">// &quot;chars&quot; are truncated to &quot;size&quot;.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewPolybius</span><span class=\"hljs-params\">(key <span class=\"hljs-keyword\">string</span>, size <span class=\"hljs-keyword\">int</span>, chars <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(*Polybius, error)</span></span> {\n\tkey = strings.ToUpper(key)\n\tchars = strings.ToUpper(chars)[:size]\n\t<span class=\"hljs-keyword\">for</span> idx, ch := <span class=\"hljs-keyword\">range</span> chars {\n\t\t<span class=\"hljs-keyword\">if</span> strings.Contains(chars[idx+<span class=\"hljs-number\">1</span>:], <span class=\"hljs-keyword\">string</span>(ch)) {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;\\&quot;chars\\&quot; contains same character: %c&quot;</span>, ch)\n\t\t}\n\t}\n\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(key) != size*size {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;len(key): %d must be as long as size squared: %d&quot;</span>, <span class=\"hljs-built_in\">len</span>(key), size*size)\n\t}\n\t<span class=\"hljs-keyword\">return</span> &amp;Polybius{size, chars, key}, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Encrypt encrypts with polybius encryption</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Polybius)</span> <span class=\"hljs-title\">Encrypt</span><span class=\"hljs-params\">(text <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span> {\n\tencryptedText := <span class=\"hljs-string\">&quot;&quot;</span>\n\t<span class=\"hljs-keyword\">for</span> _, char := <span class=\"hljs-keyword\">range</span> strings.ToUpper(text) {\n\t\tencryptedChar, err := p.encipher(char)\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;failed encipher: %w&quot;</span>, err)\n\t\t}\n\t\tencryptedText += encryptedChar\n\t}\n\t<span class=\"hljs-keyword\">return</span> encryptedText, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Decrypt decrypts with polybius encryption</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Polybius)</span> <span class=\"hljs-title\">Decrypt</span><span class=\"hljs-params\">(text <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span> {\n\tchars := []<span class=\"hljs-keyword\">rune</span>(strings.ToUpper(text))\n\tdecryptedText := <span class=\"hljs-string\">&quot;&quot;</span>\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(chars); i += <span class=\"hljs-number\">2</span> {\n\t\tdecryptedChar, err := p.decipher(chars[i:<span class=\"hljs-keyword\">int</span>(math.Min(<span class=\"hljs-keyword\">float64</span>(i+<span class=\"hljs-number\">2</span>), <span class=\"hljs-keyword\">float64</span>(<span class=\"hljs-built_in\">len</span>(chars))))])\n\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;failed decipher: %w&quot;</span>, err)\n\t\t}\n\t\tdecryptedText += decryptedChar\n\t}\n\t<span class=\"hljs-keyword\">return</span> decryptedText, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Polybius)</span> <span class=\"hljs-title\">encipher</span><span class=\"hljs-params\">(char <span class=\"hljs-keyword\">rune</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span> {\n\tindex := strings.IndexRune(p.key, char)\n\t<span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;%c does not exist in keys&quot;</span>, char)\n\t}\n\trow := index / p.size\n\tcol := index % p.size\n\tchars := []<span class=\"hljs-keyword\">rune</span>(p.characters)\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">string</span>([]<span class=\"hljs-keyword\">rune</span>{chars[row], chars[col]}), <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(p *Polybius)</span> <span class=\"hljs-title\">decipher</span><span class=\"hljs-params\">(chars []<span class=\"hljs-keyword\">rune</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(chars) != <span class=\"hljs-number\">2</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;the size of \\&quot;chars\\&quot; must be even&quot;</span>)\n\t}\n\trow := strings.IndexRune(p.characters, chars[<span class=\"hljs-number\">0</span>])\n\t<span class=\"hljs-keyword\">if</span> row &lt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;%c does not exist in characters&quot;</span>, chars[<span class=\"hljs-number\">0</span>])\n\t}\n\tcol := strings.IndexRune(p.characters, chars[<span class=\"hljs-number\">1</span>])\n\t<span class=\"hljs-keyword\">if</span> col &lt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<span class=\"hljs-string\">&quot;%c does not exist in characters&quot;</span>, chars[<span class=\"hljs-number\">1</span>])\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">string</span>([]<span class=\"hljs-keyword\">rune</span>(p.key)[row*p.size+col]), <span class=\"hljs-literal\">nil</span>\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Carlo Federico Vescovo",
      "email": "vescovocarlofederico@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "task4233",
      "email": "tks.m1205@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
