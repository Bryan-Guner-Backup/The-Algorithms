{
  "slug": "randomized-heap",
  "name": "Randomized Heap",
  "categories": ["datastructures", "heap"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/heap/randomized_heap.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/heap/randomized_heap.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Generic</span>, Iterable, <span class=\"hljs-type\">List</span>, <span class=\"hljs-type\">Optional</span>, TypeVar\n\nT = TypeVar(<span class=\"hljs-string\">&quot;T&quot;</span>)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RandomizedHeapNode</span>(<span class=\"hljs-type\">Generic</span>[T]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    One node of the randomized heap. Contains the value and references to\n    two children.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, value: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self._value: T = value\n        self.left: <span class=\"hljs-type\">Optional</span>[RandomizedHeapNode[T]] = <span class=\"hljs-literal\">None</span>\n        self.right: <span class=\"hljs-type\">Optional</span>[RandomizedHeapNode[T]] = <span class=\"hljs-literal\">None</span>\n\n<span class=\"hljs-meta\">    @property</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">value</span>(<span class=\"hljs-params\">self</span>) -&gt; T:\n        <span class=\"hljs-string\">&quot;&quot;&quot;Return the value of the node.&quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self._value\n\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">\n        root1: <span class=\"hljs-type\">Optional</span>[RandomizedHeapNode[T]], root2: <span class=\"hljs-type\">Optional</span>[RandomizedHeapNode[T]]\n    </span>) -&gt; <span class=\"hljs-type\">Optional</span>[RandomizedHeapNode[T]]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;Merge 2 nodes together.&quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root1:\n            <span class=\"hljs-keyword\">return</span> root2\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> root2:\n            <span class=\"hljs-keyword\">return</span> root1\n\n        <span class=\"hljs-keyword\">if</span> root1.value &gt; root2.value:\n            root1, root2 = root2, root1\n\n        <span class=\"hljs-keyword\">if</span> random.choice([<span class=\"hljs-literal\">True</span>, <span class=\"hljs-literal\">False</span>]):\n            root1.left, root1.right = root1.right, root1.left\n\n        root1.left = RandomizedHeapNode.merge(root1.left, root2)\n\n        <span class=\"hljs-keyword\">return</span> root1\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RandomizedHeap</span>(<span class=\"hljs-type\">Generic</span>[T]):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A data structure that allows inserting a new value and to pop the smallest\n    values. Both operations take O(logN) time where N is the size of the\n    structure.\n    Wiki: https://en.wikipedia.org/wiki/Randomized_meldable_heap\n\n    &gt;&gt;&gt; RandomizedHeap([2, 3, 1, 5, 1, 7]).to_sorted_list()\n    [1, 1, 2, 3, 5, 7]\n\n    &gt;&gt;&gt; rh = RandomizedHeap()\n    &gt;&gt;&gt; rh.pop()\n    Traceback (most recent call last):\n        ...\n    IndexError: Can&#x27;t get top element for the empty heap.\n\n    &gt;&gt;&gt; rh.insert(1)\n    &gt;&gt;&gt; rh.insert(-1)\n    &gt;&gt;&gt; rh.insert(0)\n    &gt;&gt;&gt; rh.to_sorted_list()\n    [-1, 0, 1]\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Optional</span>[Iterable[T]] = (<span class=\"hljs-params\"></span>)</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; rh = RandomizedHeap([3, 1, 3, 7])\n        &gt;&gt;&gt; rh.to_sorted_list()\n        [1, 3, 3, 7]\n        &quot;&quot;&quot;</span>\n        self._root: <span class=\"hljs-type\">Optional</span>[RandomizedHeapNode[T]] = <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data:\n            self.insert(item)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert</span>(<span class=\"hljs-params\">self, value: T</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Insert the value into the heap.\n\n        &gt;&gt;&gt; rh = RandomizedHeap()\n        &gt;&gt;&gt; rh.insert(3)\n        &gt;&gt;&gt; rh.insert(1)\n        &gt;&gt;&gt; rh.insert(3)\n        &gt;&gt;&gt; rh.insert(7)\n        &gt;&gt;&gt; rh.to_sorted_list()\n        [1, 3, 3, 7]\n        &quot;&quot;&quot;</span>\n        self._root = RandomizedHeapNode.merge(self._root, RandomizedHeapNode(value))\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>) -&gt; T:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Pop the smallest value from the heap and return it.\n\n        &gt;&gt;&gt; rh = RandomizedHeap([3, 1, 3, 7])\n        &gt;&gt;&gt; rh.pop()\n        1\n        &gt;&gt;&gt; rh.pop()\n        3\n        &gt;&gt;&gt; rh.pop()\n        3\n        &gt;&gt;&gt; rh.pop()\n        7\n        &gt;&gt;&gt; rh.pop()\n        Traceback (most recent call last):\n            ...\n        IndexError: Can&#x27;t get top element for the empty heap.\n        &quot;&quot;&quot;</span>\n        result = self.top()\n        self._root = RandomizedHeapNode.merge(self._root.left, self._root.right)\n\n        <span class=\"hljs-keyword\">return</span> result\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">top</span>(<span class=\"hljs-params\">self</span>) -&gt; T:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the smallest value from the heap.\n\n        &gt;&gt;&gt; rh = RandomizedHeap()\n        &gt;&gt;&gt; rh.insert(3)\n        &gt;&gt;&gt; rh.top()\n        3\n        &gt;&gt;&gt; rh.insert(1)\n        &gt;&gt;&gt; rh.top()\n        1\n        &gt;&gt;&gt; rh.insert(3)\n        &gt;&gt;&gt; rh.top()\n        1\n        &gt;&gt;&gt; rh.insert(7)\n        &gt;&gt;&gt; rh.top()\n        1\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self._root:\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;Can&#x27;t get top element for the empty heap.&quot;</span>)\n        <span class=\"hljs-keyword\">return</span> self._root.value\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Clear the heap.\n\n        &gt;&gt;&gt; rh = RandomizedHeap([3, 1, 3, 7])\n        &gt;&gt;&gt; rh.clear()\n        &gt;&gt;&gt; rh.pop()\n        Traceback (most recent call last):\n            ...\n        IndexError: Can&#x27;t get top element for the empty heap.\n        &quot;&quot;&quot;</span>\n        self._root = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">to_sorted_list</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">List</span>[T]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns sorted list containing all the values in the heap.\n\n        &gt;&gt;&gt; rh = RandomizedHeap([3, 1, 3, 7])\n        &gt;&gt;&gt; rh.to_sorted_list()\n        [1, 3, 3, 7]\n        &quot;&quot;&quot;</span>\n        result = []\n        <span class=\"hljs-keyword\">while</span> self:\n            result.append(self.pop())\n\n        <span class=\"hljs-keyword\">return</span> result\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__bool__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Check if the heap is not empty.\n\n        &gt;&gt;&gt; rh = RandomizedHeap()\n        &gt;&gt;&gt; bool(rh)\n        False\n        &gt;&gt;&gt; rh.insert(1)\n        &gt;&gt;&gt; bool(rh)\n        True\n        &gt;&gt;&gt; rh.clear()\n        &gt;&gt;&gt; bool(rh)\n        False\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self._root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Phil Bazun",
      "email": "Phil9lne@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
