{
  "slug": "count-inversions",
  "name": "Count Inversions",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/count_inversions.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/count_inversions.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Counting Inversions using [Merge\n Sort](https://en.wikipedia.org/wiki/Merge_sort)\n *\n * @details\n * Program to count the number of inversions in an array\n * using merge-sort.\n *\n * The count of inversions help to determine how close the array\n * is to be sorted in ASCENDING order.\n *\n * two elements a[i] and a[j] form an inversion if `a[i]` &gt; `a[j]` and i &lt; j\n *\n * Time Complexity --&gt; `O(n.log n)`\n\n * Space Complexity --&gt; `O(n)` ; additional array `temp[1..n]`\n * ### Algorithm\n\n *   1. The idea is similar to merge sort, divide the array into two equal or\n almost\n *      equal halves in each step until the base case is reached.\n *   2. Create a function merge that counts the number of inversions when two\n halves of\n *      the array are merged, create two indices i and j, i is the index for\n first half\n *      and j is an index of the second half. if `a[i]` is greater than `a[j]`,\n then there are (mid – i)\n *      inversions, Because left and right subarrays are sorted, so all the\n remaining elements\n *      in left-subarray (a[i+1], a[i+2] … a[mid]) will be greater than a[j].\n *   3. Create a recursive function to divide the array into halves and find the\n answer by summing\n *      the number of inversions is the first half, number of inversion in the\n second half and\n *      the number of inversions by merging the two.\n *   4. The base case of recursion is when there is only one element in the\n given half.\n *   5. Print the answer\n *\n * @author [Rakshit Raj](https://github.com/rakshitraj)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>   <span class=\"hljs-comment\">/// for typedef datatype uint64_t</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/**\n * @namespace inversion\n * @brief Functions for counting inversions using Merge Sort algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> inversion {\n\n<span class=\"hljs-comment\">// Functions used ---&gt;</span>\n<span class=\"hljs-comment\">// int mergeSort(int* arr, int* temp, int left, int right);</span>\n<span class=\"hljs-comment\">// int merge(int* arr, int* temp, int left, int mid, int right);</span>\n<span class=\"hljs-comment\">// int countInversion(int* arr, const int size);</span>\n<span class=\"hljs-comment\">// void show(int* arr, const int size);</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function to merge two sub-arrays.\n *\n * @details\n * merge() function is called from mergeSort()\n * to merge the array after it split for sorting\n * by the mergeSort() funtion.\n *\n * In this case the merge fuction will also count and return\n * inversions detected when merging the sub arrays.\n *\n * @param arr    input array, data-menber of vector\n * @param temp   stores the resultant merged array\n * @param left   lower bound of `arr[]` and left-sub-array\n * @param mid    midpoint, upper bound of left sub-array,\n *               `(mid+1)` gives the lower bound of right-sub-array\n * @param right  upper bound of `arr[]` and right-sub-array\n * @returns number of inversions found in merge step\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(T* arr, T* temp, <span class=\"hljs-type\">uint32_t</span> left, <span class=\"hljs-type\">uint32_t</span> mid, <span class=\"hljs-type\">uint32_t</span> right)</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> i = left;       <span class=\"hljs-comment\">/* i --&gt; index of left sub-array */</span>\n    <span class=\"hljs-type\">uint32_t</span> j = mid + <span class=\"hljs-number\">1</span>;    <span class=\"hljs-comment\">/* j --&gt; index for right sub-array */</span>\n    <span class=\"hljs-type\">uint32_t</span> k = left;       <span class=\"hljs-comment\">/* k --&gt; index for resultant array temp */</span>\n    <span class=\"hljs-type\">uint32_t</span> inv_count = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// inversion count</span>\n\n    <span class=\"hljs-keyword\">while</span> ((i &lt;= mid) &amp;&amp; (j &lt;= right)) {\n        <span class=\"hljs-keyword\">if</span> (arr[i] &lt;= arr[j]) {\n            temp[k++] = arr[i++];\n        } <span class=\"hljs-keyword\">else</span> {\n            temp[k++] = arr[j++];\n            inv_count +=\n                (mid - i +\n                 <span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">// tricky; may vary depending on selection of sub-array</span>\n        }\n    }\n    <span class=\"hljs-comment\">// Add remaining elements from the larger subarray to the end of temp</span>\n    <span class=\"hljs-keyword\">while</span> (i &lt;= mid) {\n        temp[k++] = arr[i++];\n    }\n    <span class=\"hljs-keyword\">while</span> (j &lt;= right) {\n        temp[k++] = arr[j++];\n    }\n    <span class=\"hljs-comment\">// Copy temp[] to arr[]</span>\n    <span class=\"hljs-keyword\">for</span> (k = left; k &lt;= right; k++) {\n        arr[k] = temp[k];\n    }\n    <span class=\"hljs-keyword\">return</span> inv_count;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Implement merge Sort and count inverions while merging\n *\n * @details\n * The mergeSort() function implements Merge Sort, a\n * Divide and conquer algorithm, it divides the input\n * array into two halves and calls itself for each\n * sub-array and then calls the merge() function to\n * merge the two halves.\n *\n * @param arr   - array to be sorted\n * @param temp  - merged resultant array\n * @param left  - lower bound of array\n * @param right - upper bound of array\n * @returns number of inversions in array\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">mergeSort</span><span class=\"hljs-params\">(T* arr, T* temp, <span class=\"hljs-type\">uint32_t</span> left, <span class=\"hljs-type\">uint32_t</span> right)</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> mid = <span class=\"hljs-number\">0</span>, inv_count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">if</span> (right &gt; left) {\n        <span class=\"hljs-comment\">// midpoint to split the array</span>\n        mid = (right + left) / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-comment\">// Add inversions in left and right sub-arrays</span>\n        inv_count += <span class=\"hljs-built_in\">mergeSort</span>(arr, temp, left, mid);  <span class=\"hljs-comment\">// left sub-array</span>\n        inv_count += <span class=\"hljs-built_in\">mergeSort</span>(arr, temp, mid + <span class=\"hljs-number\">1</span>, right);\n\n        <span class=\"hljs-comment\">// inversions in the merge step</span>\n        inv_count += <span class=\"hljs-built_in\">merge</span>(arr, temp, left, mid, right);\n    }\n    <span class=\"hljs-keyword\">return</span> inv_count;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Function countInversion() returns the number of inversion\n * present in the input array. Inversions are an estimate of\n * how close or far off the array is to being sorted.\n *\n * @details\n * Number of inversions in a sorted array is 0.\n * Number of inversion in an array[1...n] sorted in\n * non-ascending order is n(n-1)/2, since each pair of elements\n * contitute an inversion.\n *\n * @param arr   - array, data member of std::vector&lt;int&gt;, input for counting\n * inversions\n * @param array_size    - number of elementa in the array\n * @returns number of inversions in input array, sorts the array\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">T</span>&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint32_t</span> <span class=\"hljs-title\">countInversion</span><span class=\"hljs-params\">(T* arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint32_t</span> size)</span> </span>{\n    std::vector&lt;T&gt; temp;\n    temp.<span class=\"hljs-built_in\">reserve</span>(size);\n    temp.<span class=\"hljs-built_in\">assign</span>(size, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">mergeSort</span>(arr, temp.<span class=\"hljs-built_in\">data</span>(), <span class=\"hljs-number\">0</span>, size - <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief UTILITY function to print array.\n * @param arr[]   array to print\n * @param array_size    size of input array arr[]\n * @returns void\n *\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">(T* arr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint32_t</span> array_size)</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Printing array: \\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; array_size; i++) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; arr[i];\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n}\n\n}  <span class=\"hljs-comment\">// namespace inversion</span>\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Test 1</span>\n    std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; arr1 = {\n        <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">97</span>, <span class=\"hljs-number\">96</span>, <span class=\"hljs-number\">95</span>, <span class=\"hljs-number\">94</span>, <span class=\"hljs-number\">93</span>, <span class=\"hljs-number\">92</span>, <span class=\"hljs-number\">91</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">88</span>, <span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">86</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">84</span>,\n        <span class=\"hljs-number\">83</span>,  <span class=\"hljs-number\">82</span>, <span class=\"hljs-number\">81</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">79</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">76</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">74</span>, <span class=\"hljs-number\">73</span>, <span class=\"hljs-number\">72</span>, <span class=\"hljs-number\">71</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">69</span>, <span class=\"hljs-number\">68</span>, <span class=\"hljs-number\">67</span>,\n        <span class=\"hljs-number\">66</span>,  <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">62</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">58</span>, <span class=\"hljs-number\">57</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">53</span>, <span class=\"hljs-number\">52</span>, <span class=\"hljs-number\">51</span>, <span class=\"hljs-number\">50</span>,\n        <span class=\"hljs-number\">49</span>,  <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">46</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">39</span>, <span class=\"hljs-number\">38</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">33</span>,\n        <span class=\"hljs-number\">32</span>,  <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">27</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">16</span>,\n        <span class=\"hljs-number\">15</span>,  <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">9</span>,  <span class=\"hljs-number\">8</span>,  <span class=\"hljs-number\">7</span>,  <span class=\"hljs-number\">6</span>,  <span class=\"hljs-number\">5</span>,  <span class=\"hljs-number\">4</span>,  <span class=\"hljs-number\">3</span>,  <span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">1</span>};\n    <span class=\"hljs-type\">uint32_t</span> size1 = arr1.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-type\">uint32_t</span> inv_count1 = <span class=\"hljs-number\">4950</span>;\n    <span class=\"hljs-type\">uint32_t</span> result1 = sorting::inversion::<span class=\"hljs-built_in\">countInversion</span>(arr1.<span class=\"hljs-built_in\">data</span>(), size1);\n    <span class=\"hljs-built_in\">assert</span>(inv_count1 == result1);\n    <span class=\"hljs-comment\">// Test 2</span>\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; arr2 = {<span class=\"hljs-number\">22</span>, <span class=\"hljs-number\">66</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">43</span>};\n    <span class=\"hljs-type\">uint32_t</span> size2 = arr2.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-type\">uint32_t</span> inv_count2 = <span class=\"hljs-number\">20</span>;\n    <span class=\"hljs-type\">uint32_t</span> result2 = sorting::inversion::<span class=\"hljs-built_in\">countInversion</span>(arr2.<span class=\"hljs-built_in\">data</span>(), size2);\n    <span class=\"hljs-built_in\">assert</span>(inv_count2 == result2);\n    <span class=\"hljs-comment\">// Test 3</span>\n    std::vector&lt;<span class=\"hljs-type\">double</span>&gt; arr3 = {<span class=\"hljs-number\">33.1</span>, <span class=\"hljs-number\">45.2</span>, <span class=\"hljs-number\">65.4</span>, <span class=\"hljs-number\">76.5</span>, <span class=\"hljs-number\">1.0</span>,\n                                <span class=\"hljs-number\">2.9</span>,  <span class=\"hljs-number\">5.4</span>,  <span class=\"hljs-number\">7.7</span>,  <span class=\"hljs-number\">88.9</span>, <span class=\"hljs-number\">12.4</span>};\n    <span class=\"hljs-type\">uint32_t</span> size3 = arr3.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-type\">uint32_t</span> inv_count3 = <span class=\"hljs-number\">21</span>;\n    <span class=\"hljs-type\">uint32_t</span> result3 = sorting::inversion::<span class=\"hljs-built_in\">countInversion</span>(arr3.<span class=\"hljs-built_in\">data</span>(), size3);\n    <span class=\"hljs-built_in\">assert</span>(inv_count3 == result3);\n    <span class=\"hljs-comment\">// Test 4</span>\n    std::vector&lt;<span class=\"hljs-type\">char</span>&gt; arr4 = {<span class=\"hljs-string\">&#x27;a&#x27;</span>, <span class=\"hljs-string\">&#x27;b&#x27;</span>, <span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;d&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>};\n    <span class=\"hljs-type\">uint32_t</span> size4 = arr4.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-type\">uint32_t</span> inv_count4 = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">uint32_t</span> result4 = sorting::inversion::<span class=\"hljs-built_in\">countInversion</span>(arr4.<span class=\"hljs-built_in\">data</span>(), size4);\n    <span class=\"hljs-built_in\">assert</span>(inv_count4 == result4);\n}\n\n<span class=\"hljs-comment\">// /**</span>\n<span class=\"hljs-comment\">//  * @brief Program Body contains all main funtionality</span>\n<span class=\"hljs-comment\">//  * @returns void</span>\n<span class=\"hljs-comment\">//  */</span>\n<span class=\"hljs-comment\">// template &lt;typename T&gt;</span>\n<span class=\"hljs-comment\">// static void body() {</span>\n<span class=\"hljs-comment\">//     // Input your own sequence</span>\n<span class=\"hljs-comment\">//     uint_t size;</span>\n<span class=\"hljs-comment\">//     T input;</span>\n<span class=\"hljs-comment\">//     std::cout &lt;&lt; &quot;Enter number of elements:&quot;;</span>\n<span class=\"hljs-comment\">//     std::cin &gt;&gt; size;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//     std::vector&lt;T&gt; arr;</span>\n<span class=\"hljs-comment\">//     arr.reserve(size);</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//     std::cout &lt;&lt; &quot;Enter elements --&gt;\\n&quot;;</span>\n<span class=\"hljs-comment\">//     for (uint64_t i=1; i&lt;=size; i++) {</span>\n<span class=\"hljs-comment\">//         std::cout &lt;&lt; &quot;Element &quot;&lt;&lt; i &lt;&lt;&quot; :&quot;;</span>\n<span class=\"hljs-comment\">//         std::cin &gt;&gt; input;</span>\n<span class=\"hljs-comment\">//         arr.push_back(input);</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//     if (size != arr.size()) {</span>\n<span class=\"hljs-comment\">//         size = arr.size();</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//     std::cout &lt;&lt; &quot;\\n&quot;;</span>\n<span class=\"hljs-comment\">//     sorting::inversion::show(arr.data(), size);</span>\n<span class=\"hljs-comment\">//     std::cout &lt;&lt; &quot;\\n&quot;;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//     // Counting inversions</span>\n<span class=\"hljs-comment\">//     std::cout &lt;&lt; &quot;\\nThe number of inversions: &quot;&lt;&lt;</span>\n<span class=\"hljs-comment\">//     sorting::inversion::countInversion(arr.data(), size) &lt;&lt; &quot;\\n&quot;;</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">//     // Output sorted array</span>\n<span class=\"hljs-comment\">//     std::cout &lt;&lt; &quot;\\nSorted array --&gt;  \\n&quot;;</span>\n<span class=\"hljs-comment\">//     sorting::inversion::show(arr.data(), size);</span>\n<span class=\"hljs-comment\">// }</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// Run test implementations</span>\n    <span class=\"hljs-comment\">// body(); // test your own array</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Rakshit Raj",
      "email": "rraj.rakshit@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
