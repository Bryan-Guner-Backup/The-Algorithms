{
  "slug": "one-dimensional",
  "name": "One Dimensional",
  "categories": ["cellularautomata"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "cellular_automata/one_dimensional.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/cellular_automata/one_dimensional.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nReturn an image of 16 generations of one-dimensional cellular automata based on a given\nruleset number\nhttps://mathworld.wolfram.com/ElementaryCellularAutomaton.html\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image\n\n<span class=\"hljs-comment\"># Define the first generation of cells</span>\n<span class=\"hljs-comment\"># fmt: off</span>\nCELLS = [[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>,\n          <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]]\n<span class=\"hljs-comment\"># fmt: on</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">format_ruleset</span>(<span class=\"hljs-params\">ruleset: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; format_ruleset(11100)\n    [0, 0, 0, 1, 1, 1, 0, 0]\n    &gt;&gt;&gt; format_ruleset(0)\n    [0, 0, 0, 0, 0, 0, 0, 0]\n    &gt;&gt;&gt; format_ruleset(11111111)\n    [1, 1, 1, 1, 1, 1, 1, 1]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">int</span>(c) <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{ruleset:08}</span>&quot;</span>[:<span class=\"hljs-number\">8</span>]]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">new_generation</span>(<span class=\"hljs-params\">cells: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], rule: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], time: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    population = <span class=\"hljs-built_in\">len</span>(cells[<span class=\"hljs-number\">0</span>])  <span class=\"hljs-comment\"># 31</span>\n    next_generation = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(population):\n        <span class=\"hljs-comment\"># Get the neighbors of each cell</span>\n        <span class=\"hljs-comment\"># Handle neighbours outside bounds by using 0 as their value</span>\n        left_neighbor = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> cells[time][i - <span class=\"hljs-number\">1</span>]\n        right_neighbor = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> i == population - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> cells[time][i + <span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-comment\"># Define a new cell and add it to the new generation</span>\n        situation = <span class=\"hljs-number\">7</span> - <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{left_neighbor}</span><span class=\"hljs-subst\">{cells[time][i]}</span><span class=\"hljs-subst\">{right_neighbor}</span>&quot;</span>, <span class=\"hljs-number\">2</span>)\n        next_generation.append(rule[situation])\n    <span class=\"hljs-keyword\">return</span> next_generation\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_image</span>(<span class=\"hljs-params\">cells: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]</span>) -&gt; Image.Image:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Convert the cells into a greyscale PIL.Image.Image and return it to the caller.\n    &gt;&gt;&gt; from random import random\n    &gt;&gt;&gt; cells = [[random() for w in range(31)] for h in range(16)]\n    &gt;&gt;&gt; img = generate_image(cells)\n    &gt;&gt;&gt; isinstance(img, Image.Image)\n    True\n    &gt;&gt;&gt; img.width, img.height\n    (31, 16)\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Create the output image</span>\n    img = Image.new(<span class=\"hljs-string\">&quot;RGB&quot;</span>, (<span class=\"hljs-built_in\">len</span>(cells[<span class=\"hljs-number\">0</span>]), <span class=\"hljs-built_in\">len</span>(cells)))\n    pixels = img.load()\n    <span class=\"hljs-comment\"># Generates image</span>\n    <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(img.width):\n        <span class=\"hljs-keyword\">for</span> h <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(img.height):\n            color = <span class=\"hljs-number\">255</span> - <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">255</span> * cells[h][w])\n            pixels[w, h] = (color, color, color)\n    <span class=\"hljs-keyword\">return</span> img\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    rule_num = <span class=\"hljs-built_in\">bin</span>(<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Rule:\\n&quot;</span>).strip()))[<span class=\"hljs-number\">2</span>:]\n    rule = format_ruleset(<span class=\"hljs-built_in\">int</span>(rule_num))\n    <span class=\"hljs-keyword\">for</span> time <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">16</span>):\n        CELLS.append(new_generation(CELLS, rule, time))\n    img = generate_image(CELLS)\n    <span class=\"hljs-comment\"># Uncomment to save the image</span>\n    <span class=\"hljs-comment\"># img.save(f&quot;rule_{rule_num}.png&quot;)</span>\n    img.show()\n"
    }
  },
  "contributors": [
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "Novice :)",
      "email": "72334601+noviicee@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hasenn",
      "email": "eliottarloveyrier@live.fr",
      "commits": 1
    },
    {
      "name": "8Dion8",
      "email": "62215043+8Dion8@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
