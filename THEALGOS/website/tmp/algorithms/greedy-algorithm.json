{
  "slug": "greedy-algorithm",
  "name": "Greedy Algorithm",
  "categories": ["knapsack"],
  "body": {},
  "implementations": {
    "julia": {
      "dir": "src/knapsack/greedy_algorithm.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/knapsack/greedy_algorithm.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nFor greedy algorithm, it will take the element based on the optimal value in the array at each loop in the function\n\nThis does 0-1 (each item can be chosen only once) knapsack :\npack capacity = capacity\nweight of each item = weights\nvalue of each item = values\n\nEach loop the function will find the highest value in the array and check if the capacity is enough to store it, if enough then \nthe value will be added into the total_max_value. \nAfter that the highest current value will be deleted.\n\n```\njulia&gt; zero_one_pack!(20,[1,3,11],[2,5,30])\n37\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> zero_one_pack!(capacity::N, weights::V, values::V\n) <span class=\"hljs-keyword\">where</span> {N &lt;: <span class=\"hljs-built_in\">Number</span>,V &lt;: <span class=\"hljs-built_in\">AbstractVector</span>}\n    total_max_value = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> capacity &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (length(weights)!=<span class=\"hljs-number\">0</span> || length(values)!=<span class=\"hljs-number\">0</span>)\n        max_value, index = findmax(values) <span class=\"hljs-comment\"># get the highest value and index in the vector</span>\n        <span class=\"hljs-keyword\">if</span> capacity &gt;= weights[index]\n            total_max_value += max_value \n            capacity -= weights[index]\n        <span class=\"hljs-keyword\">end</span>\n        splice!(values, index)\n        splice!(weights, index)\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> total_max_value\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nThis does complete/infinite (each item can be chosen infinite times) knapsack :\npack capacity = capacity\nweight of each item = weights\nvalue of each item = values\n\nEach loop the function will find the highest value in the array and check if the capacity is enough to store it, if enough then \nthe value will be added into the total_max_value until the capacity cannot hold the weight of the highest current value. \nAfter that the highest current value will be deleted.\n\n```\njulia&gt; complete_pack!(20,[1,2,9],[1,3,20])\n43\n```\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> complete_pack!(capacity::N, weights::V, values::V\n) <span class=\"hljs-keyword\">where</span> {N &lt;: <span class=\"hljs-built_in\">Number</span>,V &lt;: <span class=\"hljs-built_in\">AbstractVector</span>}\n    total_max_value = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> capacity &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (length(weights)!=<span class=\"hljs-number\">0</span> || length(values)!=<span class=\"hljs-number\">0</span>)\n        max_value, index = findmax(values)\n        <span class=\"hljs-keyword\">while</span> capacity &gt;= weights[index] \n            total_max_value += max_value \n            capacity -= weights[index]\n        <span class=\"hljs-keyword\">end</span>\n        splice!(values, index)\n        splice!(weights, index)\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> total_max_value\n<span class=\"hljs-keyword\">end</span>"
    }
  },
  "contributors": [
    {
      "name": "KheeLong",
      "email": "kheelong0387@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
