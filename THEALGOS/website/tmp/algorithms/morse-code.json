{
  "slug": "morse-code",
  "name": "Morse Code",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "ciphers/morse_code.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers/morse_code.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [Deep Raval](https://github.com/imdeep2905)\n *\n * @brief Implementation of [Morse Code]\n * (https://en.wikipedia.org/wiki/Morse_code).\n *\n * @details\n * Morse code is a method used in telecommunication to encode text characters\n * as standardized sequences of two different signal durations, called dots\n * and dashes or dits and dahs. Morse code is named after Samuel Morse, an\n * inventor of the telegraph.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/** \\namespace ciphers\n * \\brief Algorithms for encryption and decryption\n */</span>\n<span class=\"hljs-keyword\">namespace</span> ciphers {\n<span class=\"hljs-comment\">/** \\namespace morse\n * \\brief Functions for [Morse Code]\n * (https://en.wikipedia.org/wiki/Morse_code).\n */</span>\n<span class=\"hljs-keyword\">namespace</span> morse {\n<span class=\"hljs-comment\">/**\n * Get the morse representation for given character.\n * @param c Character\n * @returns morse representation string of character\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">char_to_morse</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> &amp;c)</span> </span>{\n    <span class=\"hljs-comment\">// return corresponding morse code</span>\n    <span class=\"hljs-built_in\">switch</span> (c) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.-&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-...&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;c&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-.-.&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;d&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-..&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;e&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;f&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;..-.&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;g&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;--.&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;h&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;....&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;i&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;..&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;j&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.---&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;k&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-.-&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;l&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.-..&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;m&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;--&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;n&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-.&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;o&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;---&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;p&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.--.&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;q&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;--.-&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;r&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.-.&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;s&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;...&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;t&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;u&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;..-&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;v&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;...-&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;w&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.--&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;x&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-..-&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;y&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-.--&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;z&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;--..&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;1&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.----&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;2&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;..---&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;3&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;...--&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;4&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;....-&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;5&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;.....&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;6&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-....&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;7&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;--...&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;8&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;---..&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;9&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;----.&quot;</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;0&#x27;</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-----&quot;</span>;\n        <span class=\"hljs-keyword\">default</span>:\n            std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Found invalid character: &quot;</span> &lt;&lt; c &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span> &lt;&lt; std::endl;\n            std::<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    }\n}\n<span class=\"hljs-comment\">/**\n * Get character from the morse representation.\n * @param s Morse representation\n * @returns corresponding character\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">char</span> <span class=\"hljs-title\">morse_to_char</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;s)</span> </span>{\n    <span class=\"hljs-comment\">// return corresponding character</span>\n    <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.-&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-...&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-.-.&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;c&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-..&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;d&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;e&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;..-.&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;f&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;--.&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;g&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;....&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;h&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;..&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;i&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.---&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;j&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-.-&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;k&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.-..&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;l&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;--&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;m&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-.&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;n&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;---&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;o&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.--.&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;p&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;--.-&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;q&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.-.&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;r&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;...&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;s&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;t&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;..-&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;u&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;...-&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;v&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.--&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;w&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-..-&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;x&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-.--&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;y&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;--..&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;z&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.----&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;1&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;..---&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;2&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;...--&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;3&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;....-&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;4&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;.....&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;5&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-....&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;6&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;--...&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;7&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;---..&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;8&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;----.&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;9&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (s == <span class=\"hljs-string\">&quot;-----&quot;</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;0&#x27;</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cerr &lt;&lt; <span class=\"hljs-string\">&quot;Found invalid Morse code: &quot;</span> &lt;&lt; s &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span> &lt;&lt; std::endl;\n        std::<span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    }\n}\n<span class=\"hljs-comment\">/**\n * Encrypt given text using morse code.\n * @param text text to be encrypted\n * @returns new encrypted text\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">encrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;text)</span> </span>{\n    std::string encrypted_text = <span class=\"hljs-string\">&quot;&quot;</span>;  <span class=\"hljs-comment\">// Empty string to store encrypted text</span>\n    <span class=\"hljs-comment\">// Going through each character of text and converting it</span>\n    <span class=\"hljs-comment\">// to morse representation</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> &amp;c : text) {\n        encrypted_text += ciphers::morse::<span class=\"hljs-built_in\">char_to_morse</span>(c) + <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> encrypted_text;  <span class=\"hljs-comment\">// Returning encrypted text</span>\n}\n<span class=\"hljs-comment\">/**\n * Decrypt given morse coded text.\n * @param text text to be decrypted\n * @returns new decrypted text\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">decrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;text)</span> </span>{\n    <span class=\"hljs-comment\">// Going through each character of text and converting it</span>\n    <span class=\"hljs-comment\">// back to normal representation.</span>\n    std::string decrypted_text = <span class=\"hljs-string\">&quot;&quot;</span>;  <span class=\"hljs-comment\">// Empty string to store decrypted text</span>\n    <span class=\"hljs-comment\">// Spliting string (with delimiter = &quot; &quot;) and storing it</span>\n    <span class=\"hljs-comment\">// in vector</span>\n    std::<span class=\"hljs-type\">size_t</span> pos_start = <span class=\"hljs-number\">0</span>, pos_end = <span class=\"hljs-number\">0</span>, delim_len = <span class=\"hljs-number\">1</span>;\n    std::vector&lt;std::string&gt; splits;\n    <span class=\"hljs-keyword\">while</span> ((pos_end = text.<span class=\"hljs-built_in\">find</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>, pos_start)) != std::string::npos) {\n        std::string token = text.<span class=\"hljs-built_in\">substr</span>(pos_start, pos_end - pos_start);\n        pos_start = pos_end + delim_len;\n        splits.<span class=\"hljs-built_in\">push_back</span>(token);\n    }\n\n    <span class=\"hljs-comment\">// Traversing through each morse code string</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> std::string &amp;s : splits) {\n        <span class=\"hljs-comment\">// Add corresponding character</span>\n        decrypted_text += ciphers::morse::<span class=\"hljs-built_in\">morse_to_char</span>(s);\n    }\n\n    <span class=\"hljs-keyword\">return</span> decrypted_text;  <span class=\"hljs-comment\">// Returning decrypted text</span>\n}\n}  <span class=\"hljs-comment\">// namespace morse</span>\n}  <span class=\"hljs-comment\">// namespace ciphers</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function to test above algorithm\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Test 1</span>\n    std::string text1 = <span class=\"hljs-string\">&quot;01234567890&quot;</span>;\n    std::string encrypted1 = ciphers::morse::<span class=\"hljs-built_in\">encrypt</span>(text1);\n    std::string decrypted1 = ciphers::morse::<span class=\"hljs-built_in\">decrypt</span>(encrypted1);\n    <span class=\"hljs-built_in\">assert</span>(text1 == decrypted1);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text : &quot;</span> &lt;&lt; text1 &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Encrypted text : &quot;</span> &lt;&lt; encrypted1 &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Decrypted text : &quot;</span> &lt;&lt; decrypted1 &lt;&lt; std::endl;\n    <span class=\"hljs-comment\">// Test 2</span>\n    std::string text2 = <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;\n    std::string encrypted2 = ciphers::morse::<span class=\"hljs-built_in\">encrypt</span>(text2);\n    std::string decrypted2 = ciphers::morse::<span class=\"hljs-built_in\">decrypt</span>(encrypted2);\n    <span class=\"hljs-built_in\">assert</span>(text2 == decrypted2);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Original text : &quot;</span> &lt;&lt; text2 &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Encrypted text : &quot;</span> &lt;&lt; encrypted2 &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Decrypted text : &quot;</span> &lt;&lt; decrypted2 &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Testing</span>\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Deep Raval",
      "email": "deepraval2905@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
