{
  "slug": "pascaltriangle",
  "name": "PascalTriangle",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Maths/PascalTriangle.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/PascalTriangle.js",
      "code": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">addRow</span> = (<span class=\"hljs-params\">triangle</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> previous = triangle[triangle.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>]\n  <span class=\"hljs-keyword\">const</span> newRow = [<span class=\"hljs-number\">1</span>]\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; previous.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> current = previous[i]\n    <span class=\"hljs-keyword\">const</span> next = previous[i + <span class=\"hljs-number\">1</span>]\n    newRow.<span class=\"hljs-title function_\">push</span>(current + next)\n  }\n  newRow.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">return</span> triangle.<span class=\"hljs-title function_\">push</span>(newRow)\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">generate</span> = (<span class=\"hljs-params\">numRows</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> triangle = [[<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\n\n  <span class=\"hljs-keyword\">if</span> (numRows === <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> []\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (numRows === <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> [[<span class=\"hljs-number\">1</span>]]\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (numRows === <span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-keyword\">return</span> [[<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]]\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt; numRows; i++) {\n      <span class=\"hljs-title function_\">addRow</span>(triangle)\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> triangle\n}\n\n<span class=\"hljs-keyword\">export</span> { generate }\n"
    },
    "c-plus-plus": {
      "dir": "others/pascal_triangle.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others/pascal_triangle.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Pascal&#x27;s triangle implementation\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>  <span class=\"hljs-comment\">// required for Visual C</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iomanip&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Print the triangle\n * \\param [in] arr  2D-array containing Pascal numbers\n * \\param [in] n    depth of Pascal triangle to print\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show_pascal</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **arr, <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n + i; ++j) {\n            <span class=\"hljs-keyword\">if</span> (arr[i][j] == <span class=\"hljs-number\">0</span>)\n                std::cout &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(<span class=\"hljs-number\">4</span>) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n            <span class=\"hljs-keyword\">else</span>\n                std::cout &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(<span class=\"hljs-number\">4</span>) &lt;&lt; arr[i][j];\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Print the triangle\n * \\param [in,out] arr  array containing Pascal numbers\n * \\param [in] n    depth of Pascal triangle to print\n * \\result arr pointer returned\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> **<span class=\"hljs-title\">pascal_triangle</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **arr, <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = n - i - <span class=\"hljs-number\">1</span>; j &lt; n + i; ++j) {\n            <span class=\"hljs-keyword\">if</span> (j == n - i - <span class=\"hljs-number\">1</span> || j == n + i - <span class=\"hljs-number\">1</span>)\n                arr[i][j] = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// The edge of the Pascal triangle goes in 1</span>\n            <span class=\"hljs-keyword\">else</span>\n                arr[i][j] = arr[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>] + arr[i - <span class=\"hljs-number\">1</span>][j + <span class=\"hljs-number\">1</span>];\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n\n<span class=\"hljs-comment\">/**\n * main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Set Pascal&#x27;s Triangle Height&quot;</span> &lt;&lt; std::endl;\n    std::cin &gt;&gt; n;\n\n    <span class=\"hljs-comment\">// memory allocation (Assign two-dimensional array to store Pascal triangle)</span>\n    <span class=\"hljs-type\">int</span> **arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span> *[n];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        arr[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[<span class=\"hljs-number\">2</span> * n - <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-built_in\">memset</span>(arr[i], <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">sizeof</span>(<span class=\"hljs-type\">int</span>) * (<span class=\"hljs-number\">2</span> * n - <span class=\"hljs-number\">1</span>));\n    }\n\n    <span class=\"hljs-built_in\">pascal_triangle</span>(arr, n);\n    <span class=\"hljs-built_in\">show_pascal</span>(arr, n);\n\n    <span class=\"hljs-comment\">// deallocation</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        <span class=\"hljs-keyword\">delete</span>[] arr[i];\n    }\n    <span class=\"hljs-keyword\">delete</span>[] arr;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Nour B",
      "email": "56294154+nourrrrrrrr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "joker123",
      "email": "56662119+leechiyun@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ephraim Atta-Duncan",
      "email": "55143799+dephraiim@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
