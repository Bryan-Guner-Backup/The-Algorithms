{
  "slug": "selectionsortlinkedlist",
  "name": "Selectionsortlinkedlist",
  "categories": ["operationsondatastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "operations_on_datastructures/selectionsortlinkedlist.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/operations_on_datastructures/selectionsortlinkedlist.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-comment\">// node defined</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">node</span> {\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-type\">int</span> data;\n    node *link;\n    <span class=\"hljs-built_in\">node</span>(<span class=\"hljs-type\">int</span> d) {\n        data = d;\n        link = <span class=\"hljs-literal\">NULL</span>;\n    }\n};\n\n<span class=\"hljs-comment\">// printing the linked list</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(node *head)</span> </span>{\n    node *current = head;\n    <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">NULL</span>) {\n        cout &lt;&lt; current-&gt;data &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        current = current-&gt;link;\n    }\n    cout &lt;&lt; endl;\n}\n\n<span class=\"hljs-comment\">// creating the linked list with &#x27;n&#x27; nodes</span>\n<span class=\"hljs-function\">node *<span class=\"hljs-title\">createlist</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\n    node *head = <span class=\"hljs-literal\">NULL</span>;\n    node *t = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        node *temp = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-type\">int</span> num;\n        cin &gt;&gt; num;\n        temp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">node</span>(num);\n        <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">NULL</span>) {\n            head = temp;\n            t = temp;\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> (t-&gt;link == <span class=\"hljs-literal\">NULL</span>)\n            t-&gt;link = temp;\n        t = temp;\n    }\n    <span class=\"hljs-keyword\">return</span> head;\n}\n\n<span class=\"hljs-comment\">// performing selection sort on the linked list in an iterative manner</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">my_selection_sort_linked_list</span><span class=\"hljs-params\">(node *&amp;head)</span> </span>{\n    node *min = head;  <span class=\"hljs-comment\">// throughout the algorithm &#x27;min&#x27; is used to denote the</span>\n                       <span class=\"hljs-comment\">// node with min value out of all the nodes left for</span>\n                       <span class=\"hljs-comment\">// scanning while scanning if we find a node &#x27;X&#x27; with</span>\n                       <span class=\"hljs-comment\">// value lesser than min, then we update the pointers in</span>\n                       <span class=\"hljs-comment\">// such a way that &#x27;X&#x27; becomes the predecessor of &#x27;min&#x27;</span>\n    node *current =\n        min-&gt;link;  <span class=\"hljs-comment\">// &#x27;current&#x27; refers to the current node we are scanning</span>\n    node *previous = min;  <span class=\"hljs-comment\">//&#x27;previous&#x27; refers to the node that is previous to</span>\n                           <span class=\"hljs-comment\">// the current node</span>\n    node *temp =\n        <span class=\"hljs-literal\">NULL</span>;  <span class=\"hljs-comment\">// &#x27;temp&#x27; in this algo is used to point to the last node of the</span>\n               <span class=\"hljs-comment\">// sorted part of the linked list.</span>\n               <span class=\"hljs-comment\">// eg. If at any time instance the state of the linked list is</span>\n               <span class=\"hljs-comment\">// suppose 1-&gt;2-&gt;5-&gt;3-&gt;8-&gt;NULL then, we see that &quot;1-&gt;2&quot; is the</span>\n               <span class=\"hljs-comment\">// sorted part of the LL, and therefore temp will be pointing to</span>\n               <span class=\"hljs-comment\">// the last node of the sorted part,i.e,&#x27;2&#x27; We keep on arranging</span>\n               <span class=\"hljs-comment\">// the Linked list in such a way that after each iteration the</span>\n               <span class=\"hljs-comment\">// node with &#x27;min&#x27; value is placed at its correct position. Eg.</span>\n               <span class=\"hljs-comment\">// Let suppose initially we have 5-&gt;4-&gt;1-&gt;3-&gt;2-&gt;NULL After 1st</span>\n               <span class=\"hljs-comment\">// iteration : 1-&gt;4-&gt;5-&gt;3-&gt;2-&gt;NULL and so on</span>\n\n    <span class=\"hljs-keyword\">while</span> (\n        min-&gt;link !=\n        <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// so that all the nodes are scanned or until there exists a node</span>\n    {\n        <span class=\"hljs-comment\">// pick the first node from the unsorted part and assume that it is the</span>\n        <span class=\"hljs-comment\">// minimum and then start scanning from the next node</span>\n\n        <span class=\"hljs-keyword\">while</span> (current != <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// suppose you choose the min node to be X,</span>\n                                 <span class=\"hljs-comment\">// then scan starts from the (X+1)th node until</span>\n                                 <span class=\"hljs-comment\">// its NULL. current = (X+1)th node and min = X</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (current-&gt;data &lt; min-&gt;data)  <span class=\"hljs-comment\">// if the current node is smaller</span>\n                                            <span class=\"hljs-comment\">// than the presumed node &#x27;min&#x27;</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (temp == <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// temp stays null for the first iteration,</span>\n                                   <span class=\"hljs-comment\">// therefore it symbolizes that we are</span>\n                                   <span class=\"hljs-comment\">// scanning for the first time</span>\n                {\n                    <span class=\"hljs-keyword\">if</span> (previous ==\n                        min)  <span class=\"hljs-comment\">// if the &#x27;previous&#x27; is pointing to the &#x27;min&#x27; node</span>\n                    {\n                        <span class=\"hljs-comment\">// Update the pointers</span>\n                        head = current;  <span class=\"hljs-comment\">// update the head pointer with the</span>\n                                         <span class=\"hljs-comment\">// current node</span>\n                        min-&gt;link = current-&gt;link;\n                        current-&gt;link = previous;\n                        min = current;\n                        current = previous-&gt;link;\n                    } <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// if the &#x27;previous&#x27; is not pointing to the &#x27;min&#x27;</span>\n                            <span class=\"hljs-comment\">// node</span>\n                    {\n                        <span class=\"hljs-comment\">// Update the pointers</span>\n                        head = current;  <span class=\"hljs-comment\">// update the head pointer with the</span>\n                                         <span class=\"hljs-comment\">// current node</span>\n                        previous-&gt;link = current-&gt;link;\n                        current-&gt;link = min;\n                        min = current;\n                        current = previous-&gt;link;\n                    }\n                } <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// if &#x27;temp&#x27; is not NULL, i.e., its not the 1st</span>\n                        <span class=\"hljs-comment\">// iteration</span>\n                {\n                    temp-&gt;link = current;\n                    previous-&gt;link = current-&gt;link;\n                    current-&gt;link = min;\n                    min = current;\n                    current = previous-&gt;link;\n                }\n            } <span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// if the current node is greater than min, just move the</span>\n                    <span class=\"hljs-comment\">// previous and the current pointer a step further</span>\n            {\n                previous = previous-&gt;link;\n                current = current-&gt;link;\n            }\n        }\n\n        <span class=\"hljs-comment\">// update the pointers. Set &#x27;temp&#x27; to the last node in the sorted part.</span>\n        <span class=\"hljs-comment\">// Make &#x27;min&#x27; move a step further so that &#x27;min&#x27; points to the 1st node</span>\n        <span class=\"hljs-comment\">// of the unsorted part start the iteration again</span>\n        temp = min;\n        min = min-&gt;link;\n        previous = min;\n        current = min-&gt;link;\n    }\n}\n\n<span class=\"hljs-comment\">// Test cases:</span>\n\n<span class=\"hljs-comment\">// enter the no. of nodes : 5</span>\n<span class=\"hljs-comment\">// 8 9 3 1 4</span>\n<span class=\"hljs-comment\">// original list is : 8 9 3 1 4</span>\n<span class=\"hljs-comment\">// sorted list is : 1 3 4 8 9</span>\n\n<span class=\"hljs-comment\">// enter the no. of nodes : 3</span>\n<span class=\"hljs-comment\">// -1 -2 -3</span>\n<span class=\"hljs-comment\">// original list is : -1 -2 -3</span>\n<span class=\"hljs-comment\">// sorted list is : -3 -2 -1</span>\n\n<span class=\"hljs-comment\">// enter the no. of nodes : 8</span>\n<span class=\"hljs-comment\">// 8 7 6 5 4 3 2 1</span>\n<span class=\"hljs-comment\">// original list is : 8 7 6 5 4 3 2 1</span>\n<span class=\"hljs-comment\">// sorted list is : 1 2 3 4 5 6 7 8</span>\n\n<span class=\"hljs-comment\">// enter the no. of nodes : 6</span>\n<span class=\"hljs-comment\">// 5 3 4 1 -2 -4</span>\n<span class=\"hljs-comment\">// original list is : 5 3 4 1 -2 -4</span>\n<span class=\"hljs-comment\">// sorted list is : -4 -2 1 3 4 5</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    node *head = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-type\">int</span> n;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;enter the no. of nodes : &quot;</span>;  <span class=\"hljs-comment\">// taking input from user about the</span>\n                                          <span class=\"hljs-comment\">// number of nodes in linked list</span>\n    cin &gt;&gt; n;\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    head = <span class=\"hljs-built_in\">createlist</span>(n);  <span class=\"hljs-comment\">// creating the list</span>\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;original list is : &quot;</span>;\n    <span class=\"hljs-built_in\">print</span>(head);                          <span class=\"hljs-comment\">// printing the original linked list</span>\n    <span class=\"hljs-built_in\">my_selection_sort_linked_list</span>(head);  <span class=\"hljs-comment\">// applying selection sort</span>\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;sorted list is : &quot;</span>;\n    <span class=\"hljs-built_in\">print</span>(head);  <span class=\"hljs-comment\">// printing the sorted linked list</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Deepak25101997",
      "email": "deepak.k25101997@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
