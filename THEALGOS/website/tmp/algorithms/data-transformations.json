{
  "slug": "data-transformations",
  "name": "Data Transformations",
  "categories": ["machinelearning"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning/data_transformations.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning/data_transformations.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nNormalization Wikipedia: https://en.wikipedia.org/wiki/Normalization\nNormalization is the process of converting numerical data to a standard range of values.\nThis range is typically between [0, 1] or [-1, 1]. The equation for normalization is\nx_norm = (x - x_min)/(x_max - x_min) where x_norm is the normalized value, x is the\nvalue, x_min is the minimum value within the column or list of data, and x_max is the\nmaximum value within the column or list of data. Normalization is used to speed up the\ntraining of data and put all of the data on a similar scale. This is useful because\nvariance in the range of values of a dataset can heavily impact optimization\n(particularly Gradient Descent).\n\nStandardization Wikipedia: https://en.wikipedia.org/wiki/Standardization\nStandardization is the process of converting numerical data to a normally distributed\nrange of values. This range will have a mean of 0 and standard deviation of 1. This is\nalso known as z-score normalization. The equation for standardization is\nx_std = (x - mu)/(sigma) where mu is the mean of the column or list of values and sigma\nis the standard deviation of the column or list of values.\n\nChoosing between Normalization &amp; Standardization is more of an art of a science, but it\nis often recommended to run experiments with both to see which performs better.\nAdditionally, a few rules of thumb are:\n    1. gaussian (normal) distributions work better with standardization\n    2. non-gaussian (non-normal) distributions work better with normalization\n    3. If a column or list of values has extreme values / outliers, use standardization\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> statistics <span class=\"hljs-keyword\">import</span> mean, stdev\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">normalization</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">list</span>, ndigits: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">3</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns a normalized list of values\n    @params: data, a list of values to normalize\n    @returns: a list of normalized values (rounded to ndigits decimal places)\n    @examples:\n    &gt;&gt;&gt; normalization([2, 7, 10, 20, 30, 50])\n    [0.0, 0.104, 0.167, 0.375, 0.583, 1.0]\n    &gt;&gt;&gt; normalization([5, 10, 15, 20, 25])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># variables for calculation</span>\n    x_min = <span class=\"hljs-built_in\">min</span>(data)\n    x_max = <span class=\"hljs-built_in\">max</span>(data)\n    <span class=\"hljs-comment\"># normalize data</span>\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">round</span>((x - x_min) / (x_max - x_min), ndigits) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> data]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">standardization</span>(<span class=\"hljs-params\">data: <span class=\"hljs-built_in\">list</span>, ndigits: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">3</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns a standardized list of values\n    @params: data, a list of values to standardize\n    @returns: a list of standardized values (rounded to ndigits decimal places)\n    @examples:\n    &gt;&gt;&gt; standardization([2, 7, 10, 20, 30, 50])\n    [-0.999, -0.719, -0.551, 0.009, 0.57, 1.69]\n    &gt;&gt;&gt; standardization([5, 10, 15, 20, 25])\n    [-1.265, -0.632, 0.0, 0.632, 1.265]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># variables for calculation</span>\n    mu = mean(data)\n    sigma = stdev(data)\n    <span class=\"hljs-comment\"># standardize data</span>\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">round</span>((x - mu) / (sigma), ndigits) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> data]\n"
    }
  },
  "contributors": [
    {
      "name": "Dan Murphy",
      "email": "danielmurph8@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
