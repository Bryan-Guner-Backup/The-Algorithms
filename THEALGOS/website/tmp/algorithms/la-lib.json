{
  "slug": "la-lib",
  "name": "La Lib",
  "categories": ["linearalgebra", "src"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Linear-Algebra/src/la_lib.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Linear-Algebra/src/la_lib.js",
      "code": "<span class=\"hljs-comment\">/*\n    author: Christian Bender\n    license: MIT-license\n\n    The namespace LinearAlgebra contains useful classes and functions for dealing with\n    linear algebra under JavaScript.\n*/</span>\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">LinearAlgebra</span>;\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">LinearAlgebra</span>) {\n  <span class=\"hljs-comment\">/*\n        class: Vector\n        This class represents a vector of arbitrary size and operations on it.\n    */</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Vector</span> = <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@class</span> */</span> (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// constructor</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Vector</span> (N, comps) {\n      <span class=\"hljs-keyword\">if</span> (comps === <span class=\"hljs-literal\">undefined</span>) {\n        comps = []\n      }\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(N)\n      <span class=\"hljs-keyword\">if</span> (comps.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] = <span class=\"hljs-number\">0.0</span>\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (N === comps.<span class=\"hljs-property\">length</span>) {\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span> = comps\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Vector: invalide size!&#x27;</span>)\n        }\n      }\n    } <span class=\"hljs-comment\">// end of constructor</span>\n    <span class=\"hljs-comment\">// returns the size of this vector.</span>\n    <span class=\"hljs-comment\">// not the eulidean length!</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">size</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>.<span class=\"hljs-property\">length</span>\n    }\n    <span class=\"hljs-comment\">// computes the eulidean length.</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">eulideanLength</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>.<span class=\"hljs-property\">length</span>; i++) {\n        sum += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] * <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i]\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(sum)\n    }\n    <span class=\"hljs-comment\">// getter for the components of the vector.</span>\n    <span class=\"hljs-comment\">// returns a specified component (index)</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">component</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[index]\n    }\n    <span class=\"hljs-comment\">// setter for a specified component of this vector.</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">changeComponent</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index, value</span>) {\n      <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>.<span class=\"hljs-property\">length</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[index] = value\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;changeComponent: index out of bounds!&#x27;</span>)\n      }\n    }\n    <span class=\"hljs-comment\">// vector addition</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">add</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">other</span>) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>() === other.<span class=\"hljs-title function_\">size</span>()) {\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SIZE</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>()\n        <span class=\"hljs-keyword\">const</span> ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>(<span class=\"hljs-variable constant_\">SIZE</span>)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable constant_\">SIZE</span>; i++) {\n          ans.<span class=\"hljs-title function_\">changeComponent</span>(i, (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] + other.<span class=\"hljs-title function_\">component</span>(i)))\n        }\n        <span class=\"hljs-keyword\">return</span> ans\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;add: vector must have same size!&#x27;</span>)\n      }\n    }\n    <span class=\"hljs-comment\">// vector subtraction</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">sub</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">other</span>) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>() === other.<span class=\"hljs-title function_\">size</span>()) {\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SIZE</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>()\n        <span class=\"hljs-keyword\">const</span> ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>(<span class=\"hljs-variable constant_\">SIZE</span>)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable constant_\">SIZE</span>; i++) {\n          ans.<span class=\"hljs-title function_\">changeComponent</span>(i, (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] - other.<span class=\"hljs-title function_\">component</span>(i)))\n        }\n        <span class=\"hljs-keyword\">return</span> ans\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;add: vector must have same size!&#x27;</span>)\n      }\n    }\n    <span class=\"hljs-comment\">// dot-product</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">dot</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">other</span>) {\n      <span class=\"hljs-keyword\">let</span> sum = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">if</span> (other.<span class=\"hljs-title function_\">size</span>() === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>()) {\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SIZE</span> = other.<span class=\"hljs-title function_\">size</span>()\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable constant_\">SIZE</span>; i++) {\n          sum += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] * other.<span class=\"hljs-title function_\">component</span>(i)\n        }\n        <span class=\"hljs-keyword\">return</span> sum\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;dot: vectors must have same size!&#x27;</span>)\n      }\n    }\n    <span class=\"hljs-comment\">// scalar multiplication</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">scalar</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">s</span>) {\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SIZE</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>()\n      <span class=\"hljs-keyword\">const</span> ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>(<span class=\"hljs-variable constant_\">SIZE</span>)\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable constant_\">SIZE</span>; i++) {\n        ans.<span class=\"hljs-title function_\">changeComponent</span>(i, (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] * s))\n      }\n      <span class=\"hljs-keyword\">return</span> ans\n    }\n    <span class=\"hljs-comment\">// returns a string representation of this vector.</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">toString</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">let</span> ans = <span class=\"hljs-string\">&#x27;(&#x27;</span>\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SIZE</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>.<span class=\"hljs-property\">length</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable constant_\">SIZE</span>; i++) {\n        <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-variable constant_\">SIZE</span> - <span class=\"hljs-number\">1</span>) {\n          ans += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] + <span class=\"hljs-string\">&#x27;,&#x27;</span>\n        } <span class=\"hljs-keyword\">else</span> {\n          ans += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] + <span class=\"hljs-string\">&#x27;)&#x27;</span>\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> ans\n    }\n    <span class=\"hljs-comment\">// converts this vector in a unit basis vector and returns it.</span>\n    <span class=\"hljs-comment\">// the One is on position &#x27;pos&#x27;</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">createUnitBasis</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">pos</span>) {\n      <span class=\"hljs-keyword\">if</span> (pos &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; pos &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>.<span class=\"hljs-property\">length</span>) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>.<span class=\"hljs-property\">length</span>; i++) {\n          <span class=\"hljs-keyword\">if</span> (i === pos) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] = <span class=\"hljs-number\">1.0</span>\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] = <span class=\"hljs-number\">0.0</span>\n          }\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;createUnitBasis: index out of bounds&#x27;</span>)\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n    }\n    <span class=\"hljs-comment\">// normalizes this vector and returns it.</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">norm</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SIZE</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>()\n      <span class=\"hljs-keyword\">const</span> quotient = <span class=\"hljs-number\">1.0</span> / <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">eulideanLength</span>()\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable constant_\">SIZE</span>; i++) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] * quotient\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>\n    }\n    <span class=\"hljs-comment\">// returns true if the vectors are equal otherwise false.</span>\n    <span class=\"hljs-title class_\">Vector</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">equal</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">other</span>) {\n      <span class=\"hljs-keyword\">let</span> ans = <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">SIZE</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">size</span>()\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">EPSILON</span> = <span class=\"hljs-number\">0.001</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable constant_\">SIZE</span> === other.<span class=\"hljs-title function_\">size</span>()) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable constant_\">SIZE</span>; i++) {\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">components</span>[i] - other.<span class=\"hljs-title function_\">component</span>(i)) &gt; <span class=\"hljs-variable constant_\">EPSILON</span>) {\n            ans = <span class=\"hljs-literal\">false</span>\n          }\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        ans = <span class=\"hljs-literal\">false</span>\n      }\n      <span class=\"hljs-keyword\">return</span> ans\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Vector</span>\n  }()) <span class=\"hljs-comment\">// end of class Vector</span>\n  <span class=\"hljs-title class_\">LinearAlgebra</span>.<span class=\"hljs-property\">Vector</span> = <span class=\"hljs-title class_\">Vector</span>\n  <span class=\"hljs-comment\">// -------------- global functions ---------------------------------</span>\n  <span class=\"hljs-comment\">// returns a unit basis vector of size N with a One on position &#x27;pos&#x27;</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">unitBasisVector</span> (N, pos) {\n    <span class=\"hljs-keyword\">const</span> ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>(N)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n      <span class=\"hljs-keyword\">if</span> (i === pos) {\n        ans.<span class=\"hljs-title function_\">changeComponent</span>(i, <span class=\"hljs-number\">1.0</span>)\n      } <span class=\"hljs-keyword\">else</span> {\n        ans.<span class=\"hljs-title function_\">changeComponent</span>(i, <span class=\"hljs-number\">0</span>)\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> ans\n  }\n  <span class=\"hljs-title class_\">LinearAlgebra</span>.<span class=\"hljs-property\">unitBasisVector</span> = unitBasisVector\n  <span class=\"hljs-comment\">// returns a random vector with integer components (between &#x27;a&#x27; and &#x27;b&#x27;) of size N.</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">randomVectorInt</span> (N, a, b) {\n    <span class=\"hljs-keyword\">const</span> ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>(N)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n      ans.<span class=\"hljs-title function_\">changeComponent</span>(i, (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>((<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * b) + a)))\n    }\n    <span class=\"hljs-keyword\">return</span> ans\n  }\n  <span class=\"hljs-title class_\">LinearAlgebra</span>.<span class=\"hljs-property\">randomVectorInt</span> = randomVectorInt\n  <span class=\"hljs-comment\">// returns a random vector with floating point components (between &#x27;a&#x27; and &#x27;b&#x27;) of size N.</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">randomVectorFloat</span> (N, a, b) {\n    <span class=\"hljs-keyword\">const</span> ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vector</span>(N)\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n      ans.<span class=\"hljs-title function_\">changeComponent</span>(i, ((<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * b) + a))\n    }\n    <span class=\"hljs-keyword\">return</span> ans\n  }\n  <span class=\"hljs-title class_\">LinearAlgebra</span>.<span class=\"hljs-property\">randomVectorFloat</span> = randomVectorFloat\n  <span class=\"hljs-comment\">// ------------------ end of global functions -----------------------------</span>\n  <span class=\"hljs-comment\">/*\n        class: Matrix\n        This class represents a matrix of arbitrary size and operations on it.\n    */</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Matrix</span> = <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@class</span> */</span> (<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// constructor for zero-matrix or fix number matrix.</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Matrix</span> (row, col, comps) {\n      <span class=\"hljs-keyword\">if</span> (comps === <span class=\"hljs-literal\">undefined</span>) {\n        comps = []\n      }\n      <span class=\"hljs-keyword\">if</span> (comps.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span> = []\n        <span class=\"hljs-keyword\">let</span> rowVector = []\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; row; i++) {\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; col; j++) {\n            rowVector[j] = <span class=\"hljs-number\">0</span>\n          }\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[i] = rowVector\n          rowVector = []\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span> = comps\n      }\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span> = row\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span> = col\n    }\n    <span class=\"hljs-comment\">// returns the specified component.</span>\n    <span class=\"hljs-title class_\">Matrix</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">component</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) {\n      <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span> &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[x][y]\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;component: index out of bounds&#x27;</span>)\n      }\n    }\n    <span class=\"hljs-comment\">// changes the specified component with value &#x27;value&#x27;.</span>\n    <span class=\"hljs-title class_\">Matrix</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">changeComponent</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y, value</span>) {\n      <span class=\"hljs-keyword\">if</span> (x &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; x &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span> &amp;&amp; y &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; y &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[x][y] = value\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;changeComponent: index out of bounds&#x27;</span>)\n      }\n    }\n    <span class=\"hljs-comment\">// returns a string representation of this matrix.</span>\n    <span class=\"hljs-title class_\">Matrix</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">toString</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">let</span> ans = <span class=\"hljs-string\">&#x27;&#x27;</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span>; i++) {\n        ans += <span class=\"hljs-string\">&#x27;|&#x27;</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>; j++) {\n          <span class=\"hljs-keyword\">if</span> (j &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span> - <span class=\"hljs-number\">1</span>) {\n            ans += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[i][j] + <span class=\"hljs-string\">&#x27;,&#x27;</span>\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span> - <span class=\"hljs-number\">1</span>) {\n              ans += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[i][j] + <span class=\"hljs-string\">&#x27;|\\n&#x27;</span>\n            } <span class=\"hljs-keyword\">else</span> {\n              ans += <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[i][j] + <span class=\"hljs-string\">&#x27;|&#x27;</span>\n            }\n          }\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> ans\n    }\n    <span class=\"hljs-comment\">// returns the dimension rows x cols as number array</span>\n    <span class=\"hljs-title class_\">Matrix</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">dimension</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">const</span> ans = []\n      ans[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span>\n      ans[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>\n      <span class=\"hljs-keyword\">return</span> ans\n    }\n    <span class=\"hljs-comment\">// matrix addition. returns the result.</span>\n    <span class=\"hljs-title class_\">Matrix</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">add</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">other</span>) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span> === other.<span class=\"hljs-title function_\">dimension</span>()[<span class=\"hljs-number\">0</span>] &amp;&amp;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span> === other.<span class=\"hljs-title function_\">dimension</span>()[<span class=\"hljs-number\">1</span>]) {\n        <span class=\"hljs-keyword\">const</span> ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Matrix</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span>; i++) {\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>; j++) {\n            ans.<span class=\"hljs-title function_\">changeComponent</span>(i, j, (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[i][j] + other.<span class=\"hljs-title function_\">component</span>(i, j)))\n          }\n        }\n        <span class=\"hljs-keyword\">return</span> ans\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;add: matrices must have same dimension!&#x27;</span>)\n      }\n    }\n    <span class=\"hljs-comment\">// returns true if the matrices are equal, otherwise false.</span>\n    <span class=\"hljs-title class_\">Matrix</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">equal</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">other</span>) {\n      <span class=\"hljs-keyword\">let</span> ans = <span class=\"hljs-literal\">true</span>\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">EPSILON</span> = <span class=\"hljs-number\">0.001</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span> === other.<span class=\"hljs-title function_\">dimension</span>()[<span class=\"hljs-number\">0</span>] &amp;&amp;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span> === other.<span class=\"hljs-title function_\">dimension</span>()[<span class=\"hljs-number\">1</span>]) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span>; i++) {\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>; j++) {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">abs</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[i][j] - other.<span class=\"hljs-title function_\">component</span>(i, j)) &gt; <span class=\"hljs-variable constant_\">EPSILON</span>) {\n              ans = <span class=\"hljs-literal\">false</span>\n            }\n          }\n        }\n      } <span class=\"hljs-keyword\">else</span> {\n        ans = <span class=\"hljs-literal\">false</span>\n      }\n      <span class=\"hljs-keyword\">return</span> ans\n    }\n    <span class=\"hljs-comment\">// matrix-scalar multiplication</span>\n    <span class=\"hljs-title class_\">Matrix</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">scalar</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">c</span>) {\n      <span class=\"hljs-keyword\">const</span> ans = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Matrix</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>)\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rows</span>; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cols</span>; j++) {\n          ans.<span class=\"hljs-title function_\">changeComponent</span>(i, j, (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">matrix</span>[i][j] * c))\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> ans\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Matrix</span>\n  }()) <span class=\"hljs-comment\">// end of class Matrix</span>\n  <span class=\"hljs-title class_\">LinearAlgebra</span>.<span class=\"hljs-property\">Matrix</span> = <span class=\"hljs-title class_\">Matrix</span>\n})(<span class=\"hljs-title class_\">LinearAlgebra</span> || (<span class=\"hljs-title class_\">LinearAlgebra</span> = {})) <span class=\"hljs-comment\">// end of namespace LinearAlgebra</span>\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">LinearAlgebra</span> }\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
