{
  "slug": "acronym",
  "name": "Acronym",
  "categories": ["exercism", "acronym"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "exercism/acronym/acronym.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/exercism/acronym/acronym.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctype.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">abbreviate</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *phrase)</span>\n{\n    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">80</span>];\n    <span class=\"hljs-built_in\">strcpy</span>(str, phrase);\n    <span class=\"hljs-type\">char</span> *p_str = str;\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">char</span> acr[<span class=\"hljs-number\">80</span>];\n    <span class=\"hljs-built_in\">strcpy</span>(acr, <span class=\"hljs-string\">&quot;&quot;</span>);\n\n    <span class=\"hljs-comment\">/* for counting the words */</span>\n    <span class=\"hljs-type\">int</span> counter = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* for position the words */</span>\n    <span class=\"hljs-type\">int</span> index = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* for -loop variable */</span>\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/*\n        counts the empty-characters.\n        for determine the number of words\n    */</span>\n    <span class=\"hljs-keyword\">while</span> (p_str &amp;&amp; (i &lt; <span class=\"hljs-number\">80</span>))\n    {\n        <span class=\"hljs-keyword\">if</span> (*p_str == <span class=\"hljs-string\">&#x27; &#x27;</span>)\n        {\n            counter++;\n        }\n        <span class=\"hljs-keyword\">if</span> (i &lt; <span class=\"hljs-number\">80</span>)\n        {\n            p_str++;\n            i++;\n        }\n    }\n\n    i = <span class=\"hljs-number\">0</span>;\n    counter++;\n    <span class=\"hljs-type\">char</span> **words = (<span class=\"hljs-type\">char</span> **)<span class=\"hljs-built_in\">malloc</span>(counter * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span> *));\n\n    <span class=\"hljs-comment\">/* initalizes words-array with empty strings */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; counter; i++)\n    {\n        words[i] = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">80</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));\n        <span class=\"hljs-built_in\">strcpy</span>(words[i], <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">/* rewind string */</span>\n    p_str = str;\n\n    <span class=\"hljs-type\">char</span> *p_start = p_str;\n\n    <span class=\"hljs-comment\">/* collects each word in array &#x27;words&#x27; */</span>\n    <span class=\"hljs-keyword\">while</span> (p_str &amp;&amp; (i &lt;= <span class=\"hljs-number\">80</span>))\n    {\n        <span class=\"hljs-keyword\">if</span> (*p_str == <span class=\"hljs-string\">&#x27; &#x27;</span>)\n        {\n            *p_str = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\n            <span class=\"hljs-built_in\">strncat</span>(words[index], p_start, <span class=\"hljs-number\">80</span>);\n            index++;\n            p_start = p_str + <span class=\"hljs-number\">1</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (i &lt;= <span class=\"hljs-number\">80</span>)\n        {\n            p_str++;\n            i++;\n        }\n    }\n\n    <span class=\"hljs-comment\">/* adds the last word */</span>\n    *p_str = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\n    <span class=\"hljs-built_in\">strncat</span>(words[index], p_start, <span class=\"hljs-number\">80</span>);\n    index++;\n\n    <span class=\"hljs-comment\">/* builds the actual acronym */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; index; i++)\n    {\n        <span class=\"hljs-comment\">/* capitalize the first character */</span>\n        words[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-built_in\">toupper</span>(words[i][<span class=\"hljs-number\">0</span>]);\n        words[i][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\n        <span class=\"hljs-built_in\">strcat</span>(acr, words[i]);\n    }\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; counter; i++) <span class=\"hljs-built_in\">free</span>(words[i]);\n    <span class=\"hljs-built_in\">free</span>(words);\n\n    <span class=\"hljs-keyword\">return</span> acr;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
