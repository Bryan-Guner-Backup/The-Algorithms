{
  "slug": "wave-sort",
  "name": "Wave Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/wave_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/wave_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of the [Wave\n * sort](https://www.geeksforgeeks.org/sort-array-wave-form-2/) algorithm\n * @details\n * Wave Sort is a sorting algorithm that works in \\f$O(nlogn)\\f$ time assuming\n * the sort function used works in \\f$O(nlogn)\\f$ time.\n * @author [Swastika Gupta](https://github.com/Swastyy)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::is_sorted, std::swap</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-comment\">/**\n * @namespace wave_sort\n * @brief Functions for the [Wave\n * sort](https://www.geeksforgeeks.org/sort-array-wave-form-2/) implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> wave_sort {\n<span class=\"hljs-comment\">/**\n * @brief The main function implements that implements the Wave Sort algorithm\n * @tparam T type of array\n * @param in_arr array to be sorted\n * @returns arr the wave sorted array\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">waveSort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::vector&lt;T&gt; &amp;in_arr, <span class=\"hljs-type\">int64_t</span> n)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;T&gt; <span class=\"hljs-title\">arr</span><span class=\"hljs-params\">(in_arr)</span></span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        arr[i] = in_arr[i];\n    }\n    std::<span class=\"hljs-built_in\">sort</span>(arr.<span class=\"hljs-built_in\">begin</span>(), arr.<span class=\"hljs-built_in\">end</span>());\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; i += <span class=\"hljs-number\">2</span>) {  <span class=\"hljs-comment\">// swap all the adjacent elements</span>\n        std::<span class=\"hljs-built_in\">swap</span>(arr[i], arr[i + <span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n}  <span class=\"hljs-comment\">// namespace wave_sort</span>\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// [10, 90, 49, 2, 1, 5, 23] return [2, 1, 10, 5, 49, 23, 90]</span>\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array1 = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">23</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; arr1 = sorting::wave_sort::<span class=\"hljs-built_in\">waveSort</span>(array1, <span class=\"hljs-number\">7</span>);\n    <span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; o1 = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">90</span>};\n    <span class=\"hljs-built_in\">assert</span>(arr1 == o1);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// [1, 3, 4, 2, 7, 8] return [2, 1, 4, 3, 8, 7]</span>\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array2 = {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; arr2 = sorting::wave_sort::<span class=\"hljs-built_in\">waveSort</span>(array2, <span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; o2 = {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>};\n    <span class=\"hljs-built_in\">assert</span>(arr2 == o2);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// [3, 3, 3, 3] return [3, 3, 3, 3]</span>\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array3 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; arr3 = sorting::wave_sort::<span class=\"hljs-built_in\">waveSort</span>(array3, <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; o3 = {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>};\n    <span class=\"hljs-built_in\">assert</span>(arr3 == o3);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// [9, 4, 6, 8, 14, 3] return [4, 3, 8, 6, 14, 9]</span>\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; array4 = {<span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">3</span>};\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4... &quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; arr4 = sorting::wave_sort::<span class=\"hljs-built_in\">waveSort</span>(array4, <span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; o4 = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">9</span>};\n    <span class=\"hljs-built_in\">assert</span>(arr4 == o4);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
