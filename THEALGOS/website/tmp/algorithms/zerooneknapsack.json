{
  "slug": "zerooneknapsack",
  "name": "ZeroOneKnapsack",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Dynamic-Programming/ZeroOneKnapsack.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/ZeroOneKnapsack.js",
      "code": "<span class=\"hljs-comment\">/**\n * A Dynamic Programming based solution for calculating Zero One Knapsack\n * https://en.wikipedia.org/wiki/Knapsack_problem\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">zeroOneKnapsack</span> = (<span class=\"hljs-params\">arr, n, cap, cache</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (cap === <span class=\"hljs-number\">0</span> || n === <span class=\"hljs-number\">0</span>) {\n    cache[n][cap] = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">return</span> cache[n][cap]\n  }\n  <span class=\"hljs-keyword\">if</span> (cache[n][cap] !== -<span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> cache[n][cap]\n  }\n  <span class=\"hljs-keyword\">if</span> (arr[n - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] &lt;= cap) {\n    cache[n][cap] = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(arr[n - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] + <span class=\"hljs-title function_\">zeroOneKnapsack</span>(arr, n - <span class=\"hljs-number\">1</span>, cap - arr[n - <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>], cache), <span class=\"hljs-title function_\">zeroOneKnapsack</span>(arr, n - <span class=\"hljs-number\">1</span>, cap, cache))\n    <span class=\"hljs-keyword\">return</span> cache[n][cap]\n  } <span class=\"hljs-keyword\">else</span> {\n    cache[n][cap] = <span class=\"hljs-title function_\">zeroOneKnapsack</span>(arr, n - <span class=\"hljs-number\">1</span>, cap, cache)\n    <span class=\"hljs-keyword\">return</span> cache[n][cap]\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-comment\">/*\n  Problem Statement:\n  You are a thief carrying a single bag with limited capacity S. The museum you stole had N artifact that you could steal. Unfortunately you might not be able to steal all the artifact because of your limited bag capacity.\n  You have to cherry pick the artifact in order to maximize the total value of the artifacts you stole.\n\n  Link for the Problem: https://www.hackerrank.com/contests/srin-aadc03/challenges/classic-01-knapsack\n  */</span>\n  <span class=\"hljs-keyword\">let</span> input = <span class=\"hljs-string\">`1\n    4 5\n    1 8\n    2 4\n    3 0\n    2 5\n    2 3`</span>\n\n  input = input.<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n  input.<span class=\"hljs-title function_\">shift</span>()\n  <span class=\"hljs-keyword\">const</span> length = input.<span class=\"hljs-property\">length</span>\n\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> (i &lt; length) {\n    <span class=\"hljs-keyword\">const</span> cap = <span class=\"hljs-title class_\">Number</span>(input[i].<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>)[<span class=\"hljs-number\">0</span>])\n    <span class=\"hljs-keyword\">const</span> currlen = <span class=\"hljs-title class_\">Number</span>(input[i].<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>)[<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-keyword\">let</span> j = i + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">const</span> arr = []\n    <span class=\"hljs-keyword\">while</span> (j &lt;= i + currlen) {\n      arr.<span class=\"hljs-title function_\">push</span>(input[j])\n      j++\n    }\n    <span class=\"hljs-keyword\">const</span> newArr = arr.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span>\n      e.<span class=\"hljs-title function_\">trim</span>().<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-title class_\">Number</span>)\n    )\n    <span class=\"hljs-keyword\">const</span> cache = []\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= currlen; i++) {\n      <span class=\"hljs-keyword\">const</span> temp = []\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt;= cap; j++) {\n        temp.<span class=\"hljs-title function_\">push</span>(-<span class=\"hljs-number\">1</span>)\n      }\n      cache.<span class=\"hljs-title function_\">push</span>(temp)\n    }\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">zeroOneKnapsack</span>(newArr, currlen, cap, cache)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result)\n    i += currlen + <span class=\"hljs-number\">1</span>\n  }\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    }
  },
  "contributors": [
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Omkarnath Parida",
      "email": "pomkarnath98@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
