{
  "slug": "rail-fence-cipher",
  "name": "Rail Fence Cipher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/rail_fence_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/rail_fence_cipher.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; https://en.wikipedia.org/wiki/Rail_fence_cipher &quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encrypt</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Shuffles the character of a string by placing each of them\r\n    in a grid (the height is dependent on the key) in a zigzag\r\n    formation and reading it left to right.\r\n\r\n    &gt;&gt;&gt; encrypt(&quot;Hello World&quot;, 4)\r\n    &#x27;HWe olordll&#x27;\r\n\r\n    &gt;&gt;&gt; encrypt(&quot;This is a message&quot;, 0)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Height of grid can&#x27;t be 0 or negative\r\n\r\n    &gt;&gt;&gt; encrypt(b&quot;This is a byte string&quot;, 5)\r\n    Traceback (most recent call last):\r\n        ...\r\n    TypeError: sequence item 0: expected str instance, int found\r\n    &quot;&quot;&quot;</span>\r\n    temp_grid: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]] = [[] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(key)]\r\n    lowest = key - <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> key &lt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Height of grid can&#x27;t be 0 or negative&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> key == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">len</span>(input_string) &lt;= key:\r\n        <span class=\"hljs-keyword\">return</span> input_string\r\n\r\n    <span class=\"hljs-keyword\">for</span> position, character <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(input_string):\r\n        num = position % (lowest * <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># puts it in bounds</span>\r\n        num = <span class=\"hljs-built_in\">min</span>(num, lowest * <span class=\"hljs-number\">2</span> - num)  <span class=\"hljs-comment\"># creates zigzag pattern</span>\r\n        temp_grid[num].append(character)\r\n    grid = [<span class=\"hljs-string\">&quot;&quot;</span>.join(row) <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> temp_grid]\r\n    output_string = <span class=\"hljs-string\">&quot;&quot;</span>.join(grid)\r\n\r\n    <span class=\"hljs-keyword\">return</span> output_string\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Generates a template based on the key and fills it in with\r\n    the characters of the input string and then reading it in\r\n    a zigzag formation.\r\n\r\n    &gt;&gt;&gt; decrypt(&quot;HWe olordll&quot;, 4)\r\n    &#x27;Hello World&#x27;\r\n\r\n    &gt;&gt;&gt; decrypt(&quot;This is a message&quot;, -10)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: Height of grid can&#x27;t be 0 or negative\r\n\r\n    &gt;&gt;&gt; decrypt(&quot;My key is very big&quot;, 100)\r\n    &#x27;My key is very big&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    grid = []\r\n    lowest = key - <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> key &lt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Height of grid can&#x27;t be 0 or negative&quot;</span>)\r\n    <span class=\"hljs-keyword\">if</span> key == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> input_string\r\n\r\n    temp_grid: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]] = [[] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(key)]  <span class=\"hljs-comment\"># generates template</span>\r\n    <span class=\"hljs-keyword\">for</span> position <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(input_string)):\r\n        num = position % (lowest * <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># puts it in bounds</span>\r\n        num = <span class=\"hljs-built_in\">min</span>(num, lowest * <span class=\"hljs-number\">2</span> - num)  <span class=\"hljs-comment\"># creates zigzag pattern</span>\r\n        temp_grid[num].append(<span class=\"hljs-string\">&quot;*&quot;</span>)\r\n\r\n    counter = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> temp_grid:  <span class=\"hljs-comment\"># fills in the characters</span>\r\n        splice = input_string[counter : counter + <span class=\"hljs-built_in\">len</span>(row)]\r\n        grid.append([character <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> splice])\r\n        counter += <span class=\"hljs-built_in\">len</span>(row)\r\n\r\n    output_string = <span class=\"hljs-string\">&quot;&quot;</span>  <span class=\"hljs-comment\"># reads as zigzag</span>\r\n    <span class=\"hljs-keyword\">for</span> position <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(input_string)):\r\n        num = position % (lowest * <span class=\"hljs-number\">2</span>)  <span class=\"hljs-comment\"># puts it in bounds</span>\r\n        num = <span class=\"hljs-built_in\">min</span>(num, lowest * <span class=\"hljs-number\">2</span> - num)  <span class=\"hljs-comment\"># creates zigzag pattern</span>\r\n        output_string += grid[num][<span class=\"hljs-number\">0</span>]\r\n        grid[num].pop(<span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-keyword\">return</span> output_string\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bruteforce</span>(<span class=\"hljs-params\">input_string: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">str</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Uses decrypt function by guessing every key\r\n\r\n    &gt;&gt;&gt; bruteforce(&quot;HWe olordll&quot;)[4]\r\n    &#x27;Hello World&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    results = {}\r\n    <span class=\"hljs-keyword\">for</span> key_guess <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(input_string)):  <span class=\"hljs-comment\"># tries every key</span>\r\n        results[key_guess] = decrypt(input_string, key_guess)\r\n    <span class=\"hljs-keyword\">return</span> results\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "PotatoK123",
      "email": "56174807+PotatoK123@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
