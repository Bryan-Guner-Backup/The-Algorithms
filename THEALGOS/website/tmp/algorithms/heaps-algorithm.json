{
  "slug": "heaps-algorithm",
  "name": "Heaps Algorithm",
  "categories": ["divideandconquer"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer/heaps_algorithm.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer/heaps_algorithm.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nHeap&#x27;s algorithm returns the list of all permutations possible from a list.\nIt minimizes movement by generating each permutation from the previous one\nby swapping only two elements.\nMore information:\nhttps://en.wikipedia.org/wiki/Heap%27s_algorithm.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">heaps</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Pure python implementation of the Heap&#x27;s algorithm (recursive version),\n    returning all permutations of a list.\n    &gt;&gt;&gt; heaps([])\n    [()]\n    &gt;&gt;&gt; heaps([0])\n    [(0,)]\n    &gt;&gt;&gt; heaps([-1, 1])\n    [(-1, 1), (1, -1)]\n    &gt;&gt;&gt; heaps([1, 2, 3])\n    [(1, 2, 3), (2, 1, 3), (3, 1, 2), (1, 3, 2), (2, 3, 1), (3, 2, 1)]\n    &gt;&gt;&gt; from itertools import permutations\n    &gt;&gt;&gt; sorted(heaps([1,2,3])) == sorted(permutations([1,2,3]))\n    True\n    &gt;&gt;&gt; all(sorted(heaps(x)) == sorted(permutations(x))\n    ...     for x in ([], [0], [-1, 1], [1, 2, 3]))\n    True\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) &lt;= <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">tuple</span>(arr)]\n\n    res = []\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate</span>(<span class=\"hljs-params\">k: <span class=\"hljs-built_in\">int</span>, arr: <span class=\"hljs-built_in\">list</span></span>):\n        <span class=\"hljs-keyword\">if</span> k == <span class=\"hljs-number\">1</span>:\n            res.append(<span class=\"hljs-built_in\">tuple</span>(arr[:]))\n            <span class=\"hljs-keyword\">return</span>\n\n        generate(k - <span class=\"hljs-number\">1</span>, arr)\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(k - <span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> k % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># k is even</span>\n                arr[i], arr[k - <span class=\"hljs-number\">1</span>] = arr[k - <span class=\"hljs-number\">1</span>], arr[i]\n            <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># k is odd</span>\n                arr[<span class=\"hljs-number\">0</span>], arr[k - <span class=\"hljs-number\">1</span>] = arr[k - <span class=\"hljs-number\">1</span>], arr[<span class=\"hljs-number\">0</span>]\n            generate(k - <span class=\"hljs-number\">1</span>, arr)\n\n    generate(<span class=\"hljs-built_in\">len</span>(arr), arr)\n    <span class=\"hljs-keyword\">return</span> res\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    arr = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-built_in\">print</span>(heaps(arr))\n"
    },
    "dart": {
      "dir": "other/heaps_algorithm.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/other/heaps_algorithm.dart",
      "code": "<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Swap given [index1] and [index2] in given [collection]</span></span>\n<span class=\"hljs-keyword\">void</span> swap&lt;T&gt;(<span class=\"hljs-built_in\">List</span>&lt;T&gt; collection, <span class=\"hljs-built_in\">int</span> index1, <span class=\"hljs-built_in\">int</span> index2) {\n  T temp = collection[index1];\n  collection[index1] = collection[index2];\n  collection[index2] = temp;\n}\n\n<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Returns all permutations of given [collection]</span></span>\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;T&gt;&gt; permutations&lt;T&gt;(<span class=\"hljs-built_in\">List</span>&lt;T&gt; collection) {\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; stack = <span class=\"hljs-built_in\">List</span>.generate(collection.length, (x) =&gt; <span class=\"hljs-number\">0</span>);\n\n  <span class=\"hljs-built_in\">List</span>&lt;T&gt; currentPermutation = <span class=\"hljs-built_in\">List</span>.from(collection);\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">List</span>&lt;T&gt;&gt; output = [collection];\n\n  <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (i &lt; collection.length) {\n    <span class=\"hljs-keyword\">if</span> (stack[i] &lt; i) {\n      <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n        swap(currentPermutation, <span class=\"hljs-number\">0</span>, i);\n      } <span class=\"hljs-keyword\">else</span> {\n        swap(currentPermutation, stack[i], i);\n      }\n      output.add(<span class=\"hljs-built_in\">List</span>.from(currentPermutation));\n      stack[i]++;\n      i = <span class=\"hljs-number\">0</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      stack[i] = <span class=\"hljs-number\">0</span>;\n      i++;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> output;\n}\n\nmain() {\n  <span class=\"hljs-built_in\">print</span>(permutations([]));\n  <span class=\"hljs-built_in\">print</span>(permutations([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]));\n  <span class=\"hljs-built_in\">print</span>(permutations([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]));\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;3! = <span class=\"hljs-subst\">${permutations([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]).length}</span>&quot;</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;4! = <span class=\"hljs-subst\">${permutations([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]).length}</span>&quot;</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;5! = <span class=\"hljs-subst\">${permutations([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]).length}</span>&quot;</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;6! = <span class=\"hljs-subst\">${permutations([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]).length}</span>&quot;</span>);\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Guillaume Rochedix",
      "email": "33205665+grochedix@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
