{
  "slug": "count-of-set-bits",
  "name": "Count of Set Bits",
  "categories": ["bitmanipulation"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "bit_manipulation/count_of_set_bits.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/bit_manipulation/count_of_set_bits.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation to [count sets\n * bits](https://www.geeksforgeeks.org/count-set-bits-in-an-integer/) in an\n * integer.\n *\n * @details\n * We are given an integer number. Let’s say, number. The task is to first\n * calculate the binary digit of a number and then calculate the total set bits\n * of a number.\n *\n * Set bits in a binary number is represented by 1. Whenever we calculate the\n * binary number of an integer value it is formed as the combination of 0’s and\n * 1’s. So digit 1 is known as a set bit in computer terms.\n * Time Complexity: O(log n)\n * Space complexity: O(1)\n * @author [Swastika Gupta](https://github.com/Swastyy)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace bit_manipulation\n * @brief Bit manipulation algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> bit_manipulation {\n<span class=\"hljs-comment\">/**\n * @namespace count_of_set_bits\n * @brief Functions for the [count sets\n * bits](https://www.geeksforgeeks.org/count-set-bits-in-an-integer/)\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> count_of_set_bits {\n<span class=\"hljs-comment\">/**\n * @brief The main function implements set bit count\n * @param n is the number whose set bit will be counted\n * @returns the count of the number set bit in the binary representation of `n`\n */</span>\n<span class=\"hljs-function\">std::<span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">countSetBits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// &quot;count&quot; variable is used to count number of 1&#x27;s in binary</span>\n                    <span class=\"hljs-comment\">// representation of the number</span>\n    <span class=\"hljs-keyword\">while</span> (n != <span class=\"hljs-number\">0</span>) {\n        count += n &amp; <span class=\"hljs-number\">1</span>;\n        n = n &gt;&gt; <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// n=n/2</span>\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n}\n}  <span class=\"hljs-comment\">// namespace count_of_set_bits</span>\n}  <span class=\"hljs-comment\">// namespace bit_manipulation</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// n = 4 return 1</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">// n = 6 return 2</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">6</span>) == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-comment\">// n = 13 return 3</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">13</span>) == <span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-comment\">// n = 9 return 2</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">9</span>) == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-comment\">// n = 15 return 4</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">15</span>) == <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-comment\">// n = 25 return 3</span>\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::count_of_set_bits::<span class=\"hljs-built_in\">countSetBits</span>(<span class=\"hljs-number\">25</span>) == <span class=\"hljs-number\">3</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;All test cases successfully passed!&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
