{
  "slug": "depthfirstsearchiterative",
  "name": "DepthFirstSearchIterative",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Graphs/DepthFirstSearchIterative.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs/DepthFirstSearchIterative.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GraphUnweightedUndirected</span> {\n  <span class=\"hljs-comment\">// Unweighted Undirected Graph class</span>\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span> = {}\n  }\n\n  addNode (node) {\n    <span class=\"hljs-comment\">// Function to add a node to the graph (connection represented by set)</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\n  }\n\n  addEdge (node1, node2) {\n    <span class=\"hljs-comment\">// Function to add an edge (adds the node too if they are not present in the graph)</span>\n    <span class=\"hljs-keyword\">if</span> (!(node1 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node1) }\n    <span class=\"hljs-keyword\">if</span> (!(node2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>)) { <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addNode</span>(node2) }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node1].<span class=\"hljs-title function_\">add</span>(node2)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[node2].<span class=\"hljs-title function_\">add</span>(node1)\n  }\n\n  DFSIterative (node, value) {\n    <span class=\"hljs-comment\">// DFS Function to search if a node with the given value is present in the graph</span>\n    <span class=\"hljs-keyword\">const</span> stack = [node]\n    <span class=\"hljs-keyword\">const</span> visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\n    <span class=\"hljs-keyword\">while</span> (stack.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">const</span> currNode = stack.<span class=\"hljs-title function_\">pop</span>()\n      <span class=\"hljs-comment\">// if the current node contains the value being searched for, true is returned</span>\n      <span class=\"hljs-keyword\">if</span> (currNode === value) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span> }\n      <span class=\"hljs-comment\">// adding the current node to the visited set</span>\n      visited.<span class=\"hljs-title function_\">add</span>(currNode)\n      <span class=\"hljs-comment\">// adding neighbours in the stack</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> neighbour <span class=\"hljs-keyword\">of</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">connections</span>[currNode]) {\n        <span class=\"hljs-keyword\">if</span> (!visited.<span class=\"hljs-title function_\">has</span>(neighbour)) {\n          stack.<span class=\"hljs-title function_\">push</span>(neighbour)\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span> () {\n  <span class=\"hljs-keyword\">const</span> graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GraphUnweightedUndirected</span>()\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)\n  graph.<span class=\"hljs-title function_\">addEdge</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(graph.<span class=\"hljs-title function_\">DFSIterative</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(graph.<span class=\"hljs-title function_\">DFSIterative</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">100</span>))\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    }
  },
  "contributors": [
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
