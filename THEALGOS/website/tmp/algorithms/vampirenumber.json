{
  "slug": "vampirenumber",
  "name": "VampireNumber",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Maths/VampireNumber.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/VampireNumber.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n\n<span class=\"hljs-comment\">/**\n * n number theory, a vampire number (or true vampire number) is a composite natural number with an\n * even number of digits, that can be factored into two natural numbers each with half as many\n * digits as the original number and not both with trailing zeroes, where the two factors contain\n * precisely all the digits of the original number, in any order, counting multiplicity. The first\n * vampire number is 1260 = 21 Ã— 60. *\n *\n * &lt;p&gt;* link: https://en.wikipedia.org/wiki/Vampire_number *\n *\n * &lt;p&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VampireNumber</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    test(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">1000</span>);\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> startValue, <span class=\"hljs-type\">int</span> stopValue)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">countofRes</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> startValue; i &lt;= stopValue; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i; j &lt;= stopValue; j++) {\n        <span class=\"hljs-comment\">// System.out.println(i+ &quot; &quot;+ j);</span>\n        <span class=\"hljs-keyword\">if</span> (isVampireNumber(i, j, <span class=\"hljs-literal\">true</span>)) {\n          countofRes++;\n          res.append(<span class=\"hljs-string\">&quot;&quot;</span> + countofRes + <span class=\"hljs-string\">&quot;: = ( &quot;</span> + i + <span class=\"hljs-string\">&quot;,&quot;</span> + j + <span class=\"hljs-string\">&quot; = &quot;</span> + i * j + <span class=\"hljs-string\">&quot;)&quot;</span> + <span class=\"hljs-string\">&quot;\\n&quot;</span>);\n        }\n      }\n    }\n    System.out.println(res);\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isVampireNumber</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b, <span class=\"hljs-type\">boolean</span> noPseudoVamireNumbers)</span> {\n\n    <span class=\"hljs-comment\">// this is for pseudoVampireNumbers  pseudovampire number need not be of length n/2 digits for</span>\n    <span class=\"hljs-comment\">// example</span>\n    <span class=\"hljs-comment\">// 126 = 6 x 21</span>\n    <span class=\"hljs-keyword\">if</span> (noPseudoVamireNumbers) {\n      <span class=\"hljs-keyword\">if</span> (a * <span class=\"hljs-number\">10</span> &lt;= b || b * <span class=\"hljs-number\">10</span> &lt;= a) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      }\n    }\n\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">mulDigits</span> <span class=\"hljs-operator\">=</span> splitIntoDigits(a * b, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">faktorDigits</span> <span class=\"hljs-operator\">=</span> splitIntoDigits(a, b);\n\n    <span class=\"hljs-keyword\">return</span> mulDigits.equals(faktorDigits);\n  }\n\n  <span class=\"hljs-comment\">// methode to Split the numbers to Digits</span>\n  <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">splitIntoDigits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num, <span class=\"hljs-type\">int</span> num2)</span> {\n\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n\n    ArrayList&lt;Integer&gt; digits = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n    <span class=\"hljs-keyword\">while</span> (num &gt; <span class=\"hljs-number\">0</span>) {\n      digits.add(num % <span class=\"hljs-number\">10</span>);\n      num /= <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-keyword\">while</span> (num2 &gt; <span class=\"hljs-number\">0</span>) {\n      digits.add(num2 % <span class=\"hljs-number\">10</span>);\n      num2 /= <span class=\"hljs-number\">10</span>;\n    }\n    Collections.sort(digits);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i : digits) {\n      res.append(i);\n    }\n\n    <span class=\"hljs-keyword\">return</span> res.toString();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "ben",
      "email": "ben.riegel@mni.thm.de",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
