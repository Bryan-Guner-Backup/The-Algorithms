{
  "slug": "can-string-be-rearranged-as-palindrome",
  "name": "Can String Be Rearranged as Palindrome",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/can_string_be_rearranged_as_palindrome.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/can_string_be_rearranged_as_palindrome.py",
      "code": "<span class=\"hljs-comment\"># Created by susmith98</span>\n\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n<span class=\"hljs-keyword\">from</span> timeit <span class=\"hljs-keyword\">import</span> timeit\n\n<span class=\"hljs-comment\"># Problem Description:</span>\n<span class=\"hljs-comment\"># Check if characters of the given string can be rearranged to form a palindrome.</span>\n<span class=\"hljs-comment\"># Counter is faster for long strings and non-Counter is faster for short strings.</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">can_string_be_rearranged_as_palindrome_counter</span>(<span class=\"hljs-params\">\n    input_str: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;&quot;</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A Palindrome is a String that reads the same forward as it does backwards.\n    Examples of Palindromes mom, dad, malayalam\n    &gt;&gt;&gt; can_string_be_rearranged_as_palindrome_counter(&quot;Momo&quot;)\n    True\n    &gt;&gt;&gt; can_string_be_rearranged_as_palindrome_counter(&quot;Mother&quot;)\n    False\n    &gt;&gt;&gt; can_string_be_rearranged_as_palindrome_counter(&quot;Father&quot;)\n    False\n    &gt;&gt;&gt; can_string_be_rearranged_as_palindrome_counter(&quot;A man a plan a canal Panama&quot;)\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(c % <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> Counter(input_str.replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).lower()).values()) &lt; <span class=\"hljs-number\">2</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">can_string_be_rearranged_as_palindrome</span>(<span class=\"hljs-params\">input_str: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;&quot;</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A Palindrome is a String that reads the same forward as it does backwards.\n    Examples of Palindromes mom, dad, malayalam\n    &gt;&gt;&gt; can_string_be_rearranged_as_palindrome(&quot;Momo&quot;)\n    True\n    &gt;&gt;&gt; can_string_be_rearranged_as_palindrome(&quot;Mother&quot;)\n    False\n    &gt;&gt;&gt; can_string_be_rearranged_as_palindrome(&quot;Father&quot;)\n    False\n    &gt;&gt;&gt; can_string_be_rearranged_as_palindrome_counter(&quot;A man a plan a canal Panama&quot;)\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(input_str) == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n    lower_case_input_str = input_str.replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).lower()\n    <span class=\"hljs-comment\"># character_freq_dict: Stores the frequency of every character in the input string</span>\n    character_freq_dict = {}\n\n    <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> lower_case_input_str:\n        character_freq_dict[character] = character_freq_dict.get(character, <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Above line of code is equivalent to:\n    1) Getting the frequency of current character till previous index\n    &gt;&gt;&gt; character_freq =  character_freq_dict.get(character, 0)\n    2) Incrementing the frequency of current character by 1\n    &gt;&gt;&gt; character_freq = character_freq + 1\n    3) Updating the frequency of current character\n    &gt;&gt;&gt; character_freq_dict[character] = character_freq\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    OBSERVATIONS:\n    Even length palindrome\n    -&gt; Every character appears even no.of times.\n    Odd length palindrome\n    -&gt; Every character appears even no.of times except for one character.\n    LOGIC:\n    Step 1: We&#x27;ll count number of characters that appear odd number of times i.e oddChar\n    Step 2:If we find more than 1 character that appears odd number of times,\n    It is not possible to rearrange as a palindrome\n    &quot;&quot;&quot;</span>\n    oddChar = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> character_count <span class=\"hljs-keyword\">in</span> character_freq_dict.values():\n        <span class=\"hljs-keyword\">if</span> character_count % <span class=\"hljs-number\">2</span>:\n            oddChar += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> oddChar &gt; <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">benchmark</span>(<span class=\"hljs-params\">input_str: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;&quot;</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Benchmark code for comparing above 2 functions\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nFor string = &quot;</span>, input_str, <span class=\"hljs-string\">&quot;:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; can_string_be_rearranged_as_palindrome_counter()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\n        can_string_be_rearranged_as_palindrome_counter(input_str),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(\n            <span class=\"hljs-string\">&quot;z.can_string_be_rearranged_as_palindrome_counter(z.check_str)&quot;</span>,\n            setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>,\n        ),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;&gt; can_string_be_rearranged_as_palindrome()&quot;</span>,\n        <span class=\"hljs-string\">&quot;\\tans =&quot;</span>,\n        can_string_be_rearranged_as_palindrome(input_str),\n        <span class=\"hljs-string\">&quot;\\ttime =&quot;</span>,\n        timeit(\n            <span class=\"hljs-string\">&quot;z.can_string_be_rearranged_as_palindrome(z.check_str)&quot;</span>,\n            setup=<span class=\"hljs-string\">&quot;import __main__ as z&quot;</span>,\n        ),\n        <span class=\"hljs-string\">&quot;seconds&quot;</span>,\n    )\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    check_str = <span class=\"hljs-built_in\">input</span>(\n        <span class=\"hljs-string\">&quot;Enter string to determine if it can be rearranged as a palindrome or not: &quot;</span>\n    ).strip()\n    benchmark(check_str)\n    status = can_string_be_rearranged_as_palindrome_counter(check_str)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{check_str}</span> can <span class=\"hljs-subst\">{<span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-keyword\">if</span> status <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&#x27;not &#x27;</span>}</span>be rearranged as a palindrome&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Susmith98",
      "email": "33018940+susmith98@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
