{
  "slug": "median-filter",
  "name": "Median Filter",
  "categories": ["digitalimageprocessing", "filters"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "digital_image_processing/filters/median_filter.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/digital_image_processing/filters/median_filter.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nImplementation of median filter algorithm\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> cv2 <span class=\"hljs-keyword\">import</span> COLOR_BGR2GRAY, cvtColor, imread, imshow, waitKey\n<span class=\"hljs-keyword\">from</span> numpy <span class=\"hljs-keyword\">import</span> divide, int8, multiply, ravel, sort, zeros_like\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">median_filter</span>(<span class=\"hljs-params\">gray_img, mask=<span class=\"hljs-number\">3</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    :param gray_img: gray image\n    :param mask: mask size\n    :return: image with median filter\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># set image borders</span>\n    bd = <span class=\"hljs-built_in\">int</span>(mask / <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-comment\"># copy image size</span>\n    median_img = zeros_like(gray_img)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(bd, gray_img.shape[<span class=\"hljs-number\">0</span>] - bd):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(bd, gray_img.shape[<span class=\"hljs-number\">1</span>] - bd):\n            <span class=\"hljs-comment\"># get mask according with mask</span>\n            kernel = ravel(gray_img[i - bd : i + bd + <span class=\"hljs-number\">1</span>, j - bd : j + bd + <span class=\"hljs-number\">1</span>])\n            <span class=\"hljs-comment\"># calculate mask median</span>\n            median = sort(kernel)[int8(divide((multiply(mask, mask)), <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>)]\n            median_img[i, j] = median\n    <span class=\"hljs-keyword\">return</span> median_img\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-comment\"># read original image</span>\n    img = imread(<span class=\"hljs-string\">&quot;../image_data/lena.jpg&quot;</span>)\n    <span class=\"hljs-comment\"># turn image in gray scale value</span>\n    gray = cvtColor(img, COLOR_BGR2GRAY)\n\n    <span class=\"hljs-comment\"># get values with two different mask size</span>\n    median3x3 = median_filter(gray, <span class=\"hljs-number\">3</span>)\n    median5x5 = median_filter(gray, <span class=\"hljs-number\">5</span>)\n\n    <span class=\"hljs-comment\"># show result images</span>\n    imshow(<span class=\"hljs-string\">&quot;median filter with 3x3 mask&quot;</span>, median3x3)\n    imshow(<span class=\"hljs-string\">&quot;median filter with 5x5 mask&quot;</span>, median5x5)\n    waitKey(<span class=\"hljs-number\">0</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Matheus T. Guimar√£es",
      "email": "matheusguimr@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Marvin M. Michum",
      "email": "mrvnmchm@gmail.com",
      "commits": 1
    },
    {
      "name": "Shoujue Xu",
      "email": "lightxusj@126.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
