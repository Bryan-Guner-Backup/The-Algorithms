{
  "slug": "aa-tree",
  "name": "AA Tree",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "DataStructures/AATree/AATree.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/DataStructures/AATree/AATree.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.AATree</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     A simple self-balancing binary search tree.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     AA Trees are a form of self-balancing binary search tree named after their inventor</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Arne Anderson. AA Trees are designed to be simple to understand and implement.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This is accomplished by limiting how nodes can be added to the tree.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This simplifies rebalancing operations.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     More information: https://en.wikipedia.org/wiki/AA_tree .</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;TKey&quot;&gt;</span>The type of key for the AA tree.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AATree</span>&lt;<span class=\"hljs-title\">TKey</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The comparer function to use to compare the keys.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Comparer&lt;TKey&gt; comparer;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;AATree{TKey}&quot; /&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AATree</span>(<span class=\"hljs-params\"></span>)\n            : <span class=\"hljs-title\">this</span>(<span class=\"hljs-params\">Comparer&lt;TKey&gt;.Default</span>)</span>\n        {\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;AATree{TKey}&quot; /&gt;</span> class with a custom comparer.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;customComparer&quot;&gt;</span>The custom comparer to use to compare keys.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">AATree</span>(<span class=\"hljs-params\">Comparer&lt;TKey&gt; customComparer</span>)</span> =&gt; comparer = customComparer;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the root of the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> AATreeNode&lt;TKey&gt;? Root { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">set</span>; }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the number of elements in the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Count { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">set</span>; }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Add a single element to the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>The element to add to the tree.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\">TKey key</span>)</span>\n        {\n            Root = Add(key, Root);\n            Count++;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Add multiple elements to the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;keys&quot;&gt;</span>The elements to add to the tree.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddRange</span>(<span class=\"hljs-params\">IEnumerable&lt;TKey&gt; keys</span>)</span>\n        {\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> keys)\n            {\n                Root = Add(key, Root);\n                Count++;\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Remove a single element from the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Element to remove.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Remove</span>(<span class=\"hljs-params\">TKey key</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (!Contains(key, Root))\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(key)}</span> is not in the tree&quot;</span>);\n            }\n\n            Root = Remove(key, Root);\n            Count--;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Checks if the specified element is in the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>The element to look for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true if the element is in the tree, false otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Contains</span>(<span class=\"hljs-params\">TKey key</span>)</span> =&gt; Contains(key, Root);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the largest element in the tree. (ie. the element in the right most node).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The largest element in the tree according to the stored comparer.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if the tree is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TKey <span class=\"hljs-title\">GetMax</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (Root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Tree is empty!&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> GetMax(Root).Key;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the smallest element in the tree. (ie. the element in the left most node).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The smallest element in the tree according to the stored comparer.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;throws&gt;</span>InvalidOperationException if the tree is empty.<span class=\"hljs-doctag\">&lt;/throws&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> TKey <span class=\"hljs-title\">GetMin</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (Root <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;Tree is empty!&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">return</span> GetMin(Root).Key;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets all the elements in the tree in in-order order.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Sequence of elements in in-order order.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;TKey&gt; <span class=\"hljs-title\">GetKeysInOrder</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> List&lt;TKey&gt;();\n            InOrderWalk(Root);\n            <span class=\"hljs-keyword\">return</span> result;\n\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">InOrderWalk</span>(<span class=\"hljs-params\">AATreeNode&lt;TKey&gt;? node</span>)</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                InOrderWalk(node.Left);\n                result.Add(node.Key);\n                InOrderWalk(node.Right);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets all the elements in the tree in pre-order order.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Sequence of elements in pre-order order.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;TKey&gt; <span class=\"hljs-title\">GetKeysPreOrder</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> List&lt;TKey&gt;();\n            PreOrderWalk(Root);\n            <span class=\"hljs-keyword\">return</span> result;\n\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PreOrderWalk</span>(<span class=\"hljs-params\">AATreeNode&lt;TKey&gt;? node</span>)</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                result.Add(node.Key);\n                PreOrderWalk(node.Left);\n                PreOrderWalk(node.Right);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets all the elements in the tree in post-order order.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Sequence of elements in post-order order.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;TKey&gt; <span class=\"hljs-title\">GetKeysPostOrder</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> List&lt;TKey&gt;();\n            PostOrderWalk(Root);\n            <span class=\"hljs-keyword\">return</span> result;\n\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">PostOrderWalk</span>(<span class=\"hljs-params\">AATreeNode&lt;TKey&gt;? node</span>)</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n\n                PostOrderWalk(node.Left);\n                PostOrderWalk(node.Right);\n                result.Add(node.Key);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Recursive function to add an element to the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>The element to add.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>The node to search for a empty spot.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The node with the added element.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;ArgumentException&quot;&gt;</span>Thrown if key is already in the tree.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> AATreeNode&lt;TKey&gt; <span class=\"hljs-title\">Add</span>(<span class=\"hljs-params\">TKey key, AATreeNode&lt;TKey&gt;? node</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AATreeNode&lt;TKey&gt;(key, <span class=\"hljs-number\">1</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (comparer.Compare(key, node.Key) &lt; <span class=\"hljs-number\">0</span>)\n            {\n                node.Left = Add(key, node.Left);\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (comparer.Compare(key, node.Key) &gt; <span class=\"hljs-number\">0</span>)\n            {\n                node.Right = Add(key, node.Right);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentException(<span class=\"hljs-string\">$&quot;Key \\&quot;<span class=\"hljs-subst\">{key}</span>\\&quot; already in tree!&quot;</span>, <span class=\"hljs-keyword\">nameof</span>(key));\n            }\n\n            <span class=\"hljs-keyword\">return</span> Split(Skew(node)) !;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Recursive function to remove an element from the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>The element to remove.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>The node to search from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The node with the specified element removed.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> AATreeNode&lt;TKey&gt;? Remove(TKey key, AATreeNode&lt;TKey&gt;? node)\n        {\n            <span class=\"hljs-keyword\">if</span> (node <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n            }\n\n            <span class=\"hljs-keyword\">if</span> (comparer.Compare(key, node.Key) &lt; <span class=\"hljs-number\">0</span>)\n            {\n                node.Left = Remove(key, node.Left);\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (comparer.Compare(key, node.Key) &gt; <span class=\"hljs-number\">0</span>)\n            {\n                node.Right = Remove(key, node.Right);\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-keyword\">if</span> (node.Left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> &amp;&amp; node.Right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n                }\n\n                <span class=\"hljs-keyword\">if</span> (node.Left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n                {\n                    <span class=\"hljs-keyword\">var</span> successor = GetMin(node.Right!);\n                    node.Right = Remove(successor.Key, node.Right);\n                    node.Key = successor.Key;\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-keyword\">var</span> predecessor = GetMax(node.Left);\n                    node.Left = Remove(predecessor.Key, node.Left);\n                    node.Key = predecessor.Key;\n                }\n            }\n\n            node = DecreaseLevel(node);\n            node = Skew(node);\n            node!.Right = Skew(node.Right);\n\n            <span class=\"hljs-keyword\">if</span> (node.Right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\n            {\n                node.Right.Right = Skew(node.Right.Right);\n            }\n\n            node = Split(node);\n            node!.Right = Split(node.Right);\n            <span class=\"hljs-keyword\">return</span> node;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Recursive function to check if the element exists in the tree.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>The element to check for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>The node to search from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>true if the element exists in the tree, false otherwise.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Contains</span>(<span class=\"hljs-params\">TKey key, AATreeNode&lt;TKey&gt;? node</span>)</span> =&gt;\n            node <span class=\"hljs-keyword\">is</span> { }\n            &amp;&amp; comparer.Compare(key, node.Key) <span class=\"hljs-keyword\">is</span> { } v\n            &amp;&amp; v <span class=\"hljs-keyword\">switch</span>\n            {\n                { } <span class=\"hljs-keyword\">when</span> v &gt; <span class=\"hljs-number\">0</span> =&gt; Contains(key, node.Right),\n                { } <span class=\"hljs-keyword\">when</span> v &lt; <span class=\"hljs-number\">0</span> =&gt; Contains(key, node.Left),\n                _ =&gt; <span class=\"hljs-literal\">true</span>,\n            };\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Recursive to find the maximum/right-most element.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>The node to traverse from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The node with the maximum/right-most element.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> AATreeNode&lt;TKey&gt; <span class=\"hljs-title\">GetMax</span>(<span class=\"hljs-params\">AATreeNode&lt;TKey&gt; node</span>)</span>\n        {\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\n            {\n                <span class=\"hljs-keyword\">if</span> (node.Right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> node;\n                }\n\n                node = node.Right;\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Recursive to find the minimum/left-most element.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>The node to traverse from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The node with the minimum/left-most element.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> AATreeNode&lt;TKey&gt; <span class=\"hljs-title\">GetMin</span>(<span class=\"hljs-params\">AATreeNode&lt;TKey&gt; node</span>)</span>\n        {\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\n            {\n                <span class=\"hljs-keyword\">if</span> (node.Left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n                {\n                    <span class=\"hljs-keyword\">return</span> node;\n                }\n\n                node = node.Left;\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Remove right-horizontal links and replaces them with left-horizontal links.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Accomplishes this by performing a right rotation.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>The node to rebalance from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The rebalanced node.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> AATreeNode&lt;TKey&gt;? Skew(AATreeNode&lt;TKey&gt;? node)\n        {\n            <span class=\"hljs-keyword\">if</span> (node?.Left <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> || node.Left.Level != node.Level)\n            {\n                <span class=\"hljs-keyword\">return</span> node;\n            }\n\n            <span class=\"hljs-keyword\">var</span> left = node.Left;\n            node.Left = left.Right;\n            left.Right = node;\n            <span class=\"hljs-keyword\">return</span> left;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Reduces the number of right-horizontal links.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Accomplishes this by performing a left rotation, and incrementing level.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>The node to rebalance from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The rebalanced node.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> AATreeNode&lt;TKey&gt;? Split(AATreeNode&lt;TKey&gt;? node)\n        {\n            <span class=\"hljs-keyword\">if</span> (node?.Right?.Right <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> || node.Level != node.Right.Right.Level)\n            {\n                <span class=\"hljs-keyword\">return</span> node;\n            }\n\n            <span class=\"hljs-keyword\">var</span> right = node.Right;\n            node.Right = right.Left;\n            right.Left = node;\n            right.Level++;\n            <span class=\"hljs-keyword\">return</span> right;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Decreases the level of node if necessary.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;node&quot;&gt;</span>The node to decrease level from.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The node with modified level.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> AATreeNode&lt;TKey&gt; <span class=\"hljs-title\">DecreaseLevel</span>(<span class=\"hljs-params\">AATreeNode&lt;TKey&gt; node</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> newLevel = Math.Min(GetLevel(node.Left), GetLevel(node.Right)) + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">if</span> (newLevel &gt;= node.Level)\n            {\n                <span class=\"hljs-keyword\">return</span> node;\n            }\n\n            node.Level = newLevel;\n            <span class=\"hljs-keyword\">if</span> (node.Right <span class=\"hljs-keyword\">is</span> { } &amp;&amp; newLevel &lt; node.Right.Level)\n            {\n                node.Right.Level = newLevel;\n            }\n\n            <span class=\"hljs-keyword\">return</span> node;\n\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">GetLevel</span>(<span class=\"hljs-params\">AATreeNode&lt;TKey&gt;? x</span>)</span> =&gt; x?.Level ?? <span class=\"hljs-number\">0</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Walt",
      "email": "32001362+Walt280@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
