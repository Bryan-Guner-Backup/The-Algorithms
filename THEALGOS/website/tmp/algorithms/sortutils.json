{
  "slug": "sortutils",
  "name": "SortUtils",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Sorts/SortUtils.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Sorts/SortUtils.java",
      "code": "<span class=\"hljs-keyword\">package</span> Sorts;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-comment\">/**\n * The class contains util methods\n *\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\n */</span>\n<span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SortUtils</span> {\n\n  <span class=\"hljs-comment\">/**\n   * Helper method for swapping places in array\n   *\n   * <span class=\"hljs-doctag\">@param</span> array The array which elements we want to swap\n   * <span class=\"hljs-doctag\">@param</span> idx index of the first element\n   * <span class=\"hljs-doctag\">@param</span> idy index of the second element\n   */</span>\n  <span class=\"hljs-keyword\">static</span> &lt;T&gt; <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(T[] array, <span class=\"hljs-type\">int</span> idx, <span class=\"hljs-type\">int</span> idy)</span> {\n    <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">swap</span> <span class=\"hljs-operator\">=</span> array[idx];\n    array[idx] = array[idy];\n    array[idy] = swap;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * This method checks if first element is less than the other element\n   *\n   * <span class=\"hljs-doctag\">@param</span> v first element\n   * <span class=\"hljs-doctag\">@param</span> w second element\n   * <span class=\"hljs-doctag\">@return</span> true if the first element is less than the second element\n   */</span>\n  <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">less</span><span class=\"hljs-params\">(T v, T w)</span> {\n    <span class=\"hljs-keyword\">return</span> v.compareTo(w) &lt; <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * This method checks if first element is greater than the other element\n   *\n   * <span class=\"hljs-doctag\">@param</span> v first element\n   * <span class=\"hljs-doctag\">@param</span> w second element\n   * <span class=\"hljs-doctag\">@return</span> true if the first element is greater than the second element\n   */</span>\n  <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">greater</span><span class=\"hljs-params\">(T v, T w)</span> {\n    <span class=\"hljs-keyword\">return</span> v.compareTo(w) &gt; <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Prints a list\n   *\n   * <span class=\"hljs-doctag\">@param</span> toPrint - a list which should be printed\n   */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(List&lt;?&gt; toPrint)</span> {\n    toPrint.stream().map(Object::toString).map(str -&gt; str + <span class=\"hljs-string\">&quot; &quot;</span>).forEach(System.out::print);\n\n    System.out.println();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Prints an array\n   *\n   * <span class=\"hljs-doctag\">@param</span> toPrint - an array which should be printed\n   */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(Object[] toPrint)</span> {\n    System.out.println(Arrays.toString(toPrint));\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Swaps all position from {<span class=\"hljs-doctag\">@param</span> left} to @{<span class=\"hljs-doctag\">@param</span> right} for {<span class=\"hljs-doctag\">@param</span> array}\n   *\n   * <span class=\"hljs-doctag\">@param</span> array is an array\n   * <span class=\"hljs-doctag\">@param</span> left is a left flip border of the array\n   * <span class=\"hljs-doctag\">@param</span> right is a right flip border of the array\n   */</span>\n  <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">flip</span><span class=\"hljs-params\">(T[] array, <span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span> {\n    <span class=\"hljs-keyword\">while</span> (left &lt;= right) {\n      swap(array, left++, right--);\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Igor Kvashnin",
      "email": "astralcake@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
