{
  "slug": "disjoint-set",
  "name": "Disjoint Set",
  "categories": ["datastructures", "disjointset"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/disjoint_set/disjoint_set.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/disjoint_set/disjoint_set.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\n    disjoint set\r\n    Reference: https://en.wikipedia.org/wiki/Disjoint-set_data_structure\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):\r\n        self.data = data\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_set</span>(<span class=\"hljs-params\">x</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    make x as a set.\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-comment\"># rank is the distance from x to its&#x27; parent</span>\r\n    <span class=\"hljs-comment\"># root&#x27;s rank is 0</span>\r\n    x.rank = <span class=\"hljs-number\">0</span>\r\n    x.parent = x\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">union_set</span>(<span class=\"hljs-params\">x, y</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    union two sets.\r\n    set with bigger rank should be parent, so that the\r\n    disjoint set tree will be more flat.\r\n    &quot;&quot;&quot;</span>\r\n    x, y = find_set(x), find_set(y)\r\n    <span class=\"hljs-keyword\">if</span> x.rank &gt; y.rank:\r\n        y.parent = x\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        x.parent = y\r\n        <span class=\"hljs-keyword\">if</span> x.rank == y.rank:\r\n            y.rank += <span class=\"hljs-number\">1</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_set</span>(<span class=\"hljs-params\">x</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    return the parent of x\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> x != x.parent:\r\n        x.parent = find_set(x.parent)\r\n    <span class=\"hljs-keyword\">return</span> x.parent\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_python_set</span>(<span class=\"hljs-params\">node: Node</span>) -&gt; <span class=\"hljs-built_in\">set</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return a Python Standard Library set that contains i.\r\n    &quot;&quot;&quot;</span>\r\n    sets = ({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>})\r\n    <span class=\"hljs-keyword\">for</span> s <span class=\"hljs-keyword\">in</span> sets:\r\n        <span class=\"hljs-keyword\">if</span> node.data <span class=\"hljs-keyword\">in</span> s:\r\n            <span class=\"hljs-keyword\">return</span> s\r\n    <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{node.data}</span> is not in <span class=\"hljs-subst\">{sets}</span>&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_disjoint_set</span>():\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; test_disjoint_set()\r\n    &quot;&quot;&quot;</span>\r\n    vertex = [Node(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">6</span>)]\r\n    <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> vertex:\r\n        make_set(v)\r\n\r\n    union_set(vertex[<span class=\"hljs-number\">0</span>], vertex[<span class=\"hljs-number\">1</span>])\r\n    union_set(vertex[<span class=\"hljs-number\">1</span>], vertex[<span class=\"hljs-number\">2</span>])\r\n    union_set(vertex[<span class=\"hljs-number\">3</span>], vertex[<span class=\"hljs-number\">4</span>])\r\n    union_set(vertex[<span class=\"hljs-number\">3</span>], vertex[<span class=\"hljs-number\">5</span>])\r\n\r\n    <span class=\"hljs-keyword\">for</span> node0 <span class=\"hljs-keyword\">in</span> vertex:\r\n        <span class=\"hljs-keyword\">for</span> node1 <span class=\"hljs-keyword\">in</span> vertex:\r\n            <span class=\"hljs-keyword\">if</span> find_python_set(node0).isdisjoint(find_python_set(node1)):\r\n                <span class=\"hljs-keyword\">assert</span> find_set(node0) != find_set(node1)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                <span class=\"hljs-keyword\">assert</span> find_set(node0) == find_set(node1)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    test_disjoint_set()\r\n"
    },
    "c-plus-plus": {
      "dir": "data_structures/disjoint_set.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/disjoint_set.cpp",
      "code": "<span class=\"hljs-comment\">/**\n *\n * \\file\n * \\brief [Disjoint Sets Data Structure\n * (Disjoint Sets)](https://en.wikipedia.org/wiki/Disjoint-set_data_structure)\n *\n * \\author [leoyang429](https://github.com/leoyang429)\n *\n * \\details\n * A disjoint set data structure (also called union find or merge find set)\n * is a data structure that tracks a set of elements partitioned into a number\n * of disjoint (non-overlapping) subsets.\n * Some situations where disjoint sets can be used are-\n * to find connected components of a graph, kruskal&#x27;s algorithm for finding\n * Minimum Spanning Tree etc.\n * There are two operation which we perform on disjoint sets -\n * 1) Union\n * 2) Find\n *\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> std::cout;\n<span class=\"hljs-keyword\">using</span> std::endl;\n<span class=\"hljs-keyword\">using</span> std::vector;\n\nvector&lt;<span class=\"hljs-type\">int</span>&gt; root, rank;\n\n<span class=\"hljs-comment\">/**\n *\n * Function to create a set\n * @param n number of element\n *\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">CreateSet</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> </span>{\n    root = <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n + <span class=\"hljs-number\">1</span>);\n    rank = <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; ++i) {\n        root[i] = i;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n *\n * Find operation takes a number x and returns the set to which this number\n * belongs to.\n * @param x element of some set\n * @return set to which x belongs to\n *\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">Find</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (root[x] == x) {\n        <span class=\"hljs-keyword\">return</span> x;\n    }\n    <span class=\"hljs-keyword\">return</span> root[x] = <span class=\"hljs-built_in\">Find</span>(root[x]);\n}\n\n<span class=\"hljs-comment\">/**\n *\n * A utility function to check if x and y are from same set or not\n * @param x element of some set\n * @param y element of some set\n *\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">InSameUnion</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Find</span>(x) == <span class=\"hljs-built_in\">Find</span>(y); }\n\n<span class=\"hljs-comment\">/**\n *\n * Union operation combines two disjoint sets to make a single set\n * in this union function we pass two elements and check if they are\n * from different sets then combine those sets\n * @param x element of some set\n * @param y element of some set\n *\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Union</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">int</span> y)</span> </span>{\n    <span class=\"hljs-type\">int</span> a = <span class=\"hljs-built_in\">Find</span>(x), b = <span class=\"hljs-built_in\">Find</span>(y);\n    <span class=\"hljs-keyword\">if</span> (a != b) {\n        <span class=\"hljs-keyword\">if</span> (rank[a] &lt; rank[b]) {\n            root[a] = b;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (rank[a] &gt; rank[b]) {\n            root[b] = a;\n        } <span class=\"hljs-keyword\">else</span> {\n            root[a] = b;\n            ++rank[b];\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// tests CreateSet &amp; Find</span>\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-built_in\">CreateSet</span>(n);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">100</span>; ++i) {\n        <span class=\"hljs-keyword\">if</span> (root[i] != i) {\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;Fail&quot;</span> &lt;&lt; endl;\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n    <span class=\"hljs-comment\">// tests InSameUnion &amp; Union</span>\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;1 and 2 are initially not in the same subset&quot;</span> &lt;&lt; endl;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">InSameUnion</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)) {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;Fail&quot;</span> &lt;&lt; endl;\n    }\n    <span class=\"hljs-built_in\">Union</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;1 and 2 are now in the same subset&quot;</span> &lt;&lt; endl;\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">InSameUnion</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)) {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;Fail&quot;</span> &lt;&lt; endl;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "julia": {
      "dir": "src/data_structures/disjoint_set/disjoint_set.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/data_structures/disjoint_set/disjoint_set.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis can contain a maximum of `length(par)` parenting-relations\npar is an array of `Int`, which is the index of the parent node.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">mutable struct</span> DisjointSet\n    par::<span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>}\n    <span class=\"hljs-keyword\">function</span> DisjointSet(size)\n        x=[i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:size]\n        <span class=\"hljs-keyword\">return</span> new(x)\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nFind the ancestor of node `x`.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> find(set::DisjointSet,x::<span class=\"hljs-built_in\">Int</span>)::<span class=\"hljs-built_in\">Int</span>\n    <span class=\"hljs-keyword\">if</span> set.par[x]==x <span class=\"hljs-keyword\">return</span> x\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> set.par[x]=find(set,set.par[x])\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">function</span> Base.merge!(set::DisjointSet,x::<span class=\"hljs-built_in\">Int</span>,y::<span class=\"hljs-built_in\">Int</span>)\n    x=find(set,x)\n    y=find(set,y)\n    set.par[x]=y\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Rratic",
      "email": "73381027+Rratic@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "luoheng",
      "email": "1301089462@qq.com",
      "commits": 1
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 2
    },
    {
      "name": "Leo Yang",
      "email": "junjiey3@illinois.edu",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
