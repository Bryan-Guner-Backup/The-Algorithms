{
  "slug": "a-star",
  "name": "A Star",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning/astar.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning/astar.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThe A* algorithm combines features of uniform-cost search and pure\nheuristic search to efficiently compute optimal solutions.\nA* algorithm is a best-first search algorithm in which the cost\nassociated with a node is f(n) = g(n) + h(n),\nwhere g(n) is the cost of the path from the initial state to node n and\nh(n) is the heuristic estimate or the cost or a path\nfrom node n to a goal.A* algorithm introduces a heuristic into a\nregular graph-searching algorithm,\nessentially planning ahead at each step so a more optimal decision\nis made.A* also known as the algorithm with brains\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cell</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Class cell represents a cell in the world which have the property\n    position : The position of the represented by  tupleof x and y\n    coordinates initially set to (0,0)\n    parent : This contains the parent cell object which we visited\n    before arrinving this cell\n    g,h,f : The parameters for constructing the heuristic function\n    which can be any function. for simplicity used line\n    distance\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.position = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n        self.parent = <span class=\"hljs-literal\">None</span>\n\n        self.g = <span class=\"hljs-number\">0</span>\n        self.h = <span class=\"hljs-number\">0</span>\n        self.f = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    overrides equals method because otherwise cell assign will give\n    wrong results\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__eq__</span>(<span class=\"hljs-params\">self, cell</span>):\n        <span class=\"hljs-keyword\">return</span> self.position == cell.position\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">showcell</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(self.position)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Gridworld</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Gridworld class represents the  external world here a grid M*M\n    matrix\n    world_size: create a numpy array with the given world_size default is 5\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, world_size=(<span class=\"hljs-params\"><span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span></span>)</span>):\n        self.w = np.zeros(world_size)\n        self.world_x_limit = world_size[<span class=\"hljs-number\">0</span>]\n        self.world_y_limit = world_size[<span class=\"hljs-number\">1</span>]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">print</span>(self.w)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_neigbours</span>(<span class=\"hljs-params\">self, cell</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the neighbours of cell\n        &quot;&quot;&quot;</span>\n        neughbour_cord = [\n            (-<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>),\n            (-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>),\n            (-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>),\n            (<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span>),\n            (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>),\n            (<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>),\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>),\n            (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>),\n        ]\n        current_x = cell.position[<span class=\"hljs-number\">0</span>]\n        current_y = cell.position[<span class=\"hljs-number\">1</span>]\n        neighbours = []\n        <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> neughbour_cord:\n            x = current_x + n[<span class=\"hljs-number\">0</span>]\n            y = current_y + n[<span class=\"hljs-number\">1</span>]\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= x &lt; self.world_x_limit <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= y &lt; self.world_y_limit:\n                c = Cell()\n                c.position = (x, y)\n                c.parent = cell\n                neighbours.append(c)\n        <span class=\"hljs-keyword\">return</span> neighbours\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">astar</span>(<span class=\"hljs-params\">world, start, goal</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Implementation of a start algorithm\n    world : Object of the world object\n    start : Object of the cell as  start position\n    stop  : Object of the cell as goal position\n\n    &gt;&gt;&gt; p = Gridworld()\n    &gt;&gt;&gt; start = Cell()\n    &gt;&gt;&gt; start.position = (0,0)\n    &gt;&gt;&gt; goal = Cell()\n    &gt;&gt;&gt; goal.position = (4,4)\n    &gt;&gt;&gt; astar(p, start, goal)\n    [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4)]\n    &quot;&quot;&quot;</span>\n    _<span class=\"hljs-built_in\">open</span> = []\n    _closed = []\n    _<span class=\"hljs-built_in\">open</span>.append(start)\n\n    <span class=\"hljs-keyword\">while</span> _<span class=\"hljs-built_in\">open</span>:\n        min_f = np.argmin([n.f <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> _<span class=\"hljs-built_in\">open</span>])\n        current = _<span class=\"hljs-built_in\">open</span>[min_f]\n        _closed.append(_<span class=\"hljs-built_in\">open</span>.pop(min_f))\n        <span class=\"hljs-keyword\">if</span> current == goal:\n            <span class=\"hljs-keyword\">break</span>\n        <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> world.get_neigbours(current):\n            <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> _closed:\n                <span class=\"hljs-keyword\">if</span> c == n:\n                    <span class=\"hljs-keyword\">continue</span>\n            n.g = current.g + <span class=\"hljs-number\">1</span>\n            x1, y1 = n.position\n            x2, y2 = goal.position\n            n.h = (y2 - y1) ** <span class=\"hljs-number\">2</span> + (x2 - x1) ** <span class=\"hljs-number\">2</span>\n            n.f = n.h + n.g\n\n            <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> _<span class=\"hljs-built_in\">open</span>:\n                <span class=\"hljs-keyword\">if</span> c == n <span class=\"hljs-keyword\">and</span> c.f &lt; n.f:\n                    <span class=\"hljs-keyword\">continue</span>\n            _<span class=\"hljs-built_in\">open</span>.append(n)\n    path = []\n    <span class=\"hljs-keyword\">while</span> current.parent <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:\n        path.append(current.position)\n        current = current.parent\n    path.append(current.position)\n    <span class=\"hljs-keyword\">return</span> path[::-<span class=\"hljs-number\">1</span>]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    world = Gridworld()\n    <span class=\"hljs-comment\">#   stat position and Goal</span>\n    start = Cell()\n    start.position = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n    goal = Cell()\n    goal.position = (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;path from <span class=\"hljs-subst\">{start.position}</span> to <span class=\"hljs-subst\">{goal.position}</span>&quot;</span>)\n    s = astar(world, start, goal)\n    <span class=\"hljs-comment\">#   Just for visual reasons</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> s:\n        world.w[i] = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-built_in\">print</span>(world.w)\n"
    },
    "java": {
      "dir": "DataStructures/Graphs/A_Star.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Graphs/A_Star.java",
      "code": "<span class=\"hljs-comment\">/*\n\tTime Complexity = O(E), where E is equal to the number of edges\n*/</span>\n\n<span class=\"hljs-keyword\">package</span> A_Star;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A_Star</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Graph</span> {\n    <span class=\"hljs-comment\">// Graph&#x27;s structure can be changed only applying changes to this class.</span>\n    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Edge&gt;[] graph;\n\n    <span class=\"hljs-comment\">// Initialise ArrayLists in Constructor</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Graph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\n      <span class=\"hljs-built_in\">this</span>.graph = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>[size];\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; size; i++) {\n        <span class=\"hljs-built_in\">this</span>.graph[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\n      }\n    }\n\n    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Edge&gt; <span class=\"hljs-title function_\">getNeighbours</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from)</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.graph[from];\n    }\n\n    <span class=\"hljs-comment\">// Graph is bidirectional, for just one direction remove second instruction of this method.</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(Edge edge)</span> {\n      <span class=\"hljs-built_in\">this</span>.graph[edge.getFrom()].add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(edge.getFrom(), edge.getTo(), edge.getWeight()));\n      <span class=\"hljs-built_in\">this</span>.graph[edge.getTo()].add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(edge.getTo(), edge.getFrom(), edge.getWeight()));\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Edge</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> from;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> to;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> weight;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Edge</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to, <span class=\"hljs-type\">int</span> weight)</span> {\n      <span class=\"hljs-built_in\">this</span>.from = from;\n      <span class=\"hljs-built_in\">this</span>.to = to;\n      <span class=\"hljs-built_in\">this</span>.weight = weight;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getFrom</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> from;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getTo</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> to;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWeight</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> weight;\n    }\n  }\n\n  <span class=\"hljs-comment\">// class to iterate during the algorithm execution, and also used to return the solution.</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PathAndDistance</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> distance; <span class=\"hljs-comment\">// distance advanced so far.</span>\n    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; path; <span class=\"hljs-comment\">// list of visited nodes in this path.</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>\n        estimated; <span class=\"hljs-comment\">// heuristic value associated to the last node od the path (current node).</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">PathAndDistance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> distance, ArrayList&lt;Integer&gt; path, <span class=\"hljs-type\">int</span> estimated)</span> {\n      <span class=\"hljs-built_in\">this</span>.distance = distance;\n      <span class=\"hljs-built_in\">this</span>.path = path;\n      <span class=\"hljs-built_in\">this</span>.estimated = estimated;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getDistance</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> distance;\n    }\n\n    <span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title function_\">getPath</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> path;\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getEstimated</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> estimated;\n    }\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printSolution</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.path != <span class=\"hljs-literal\">null</span>)\n        System.out.println(\n            <span class=\"hljs-string\">&quot;Optimal path: &quot;</span> + <span class=\"hljs-built_in\">this</span>.path.toString() + <span class=\"hljs-string\">&quot;, distance: &quot;</span> + <span class=\"hljs-built_in\">this</span>.distance);\n      <span class=\"hljs-keyword\">else</span> System.out.println(<span class=\"hljs-string\">&quot;There is no path available to connect the points&quot;</span>);\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initializeGraph</span><span class=\"hljs-params\">(Graph graph, ArrayList&lt;Integer&gt; data)</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; data.size(); i += <span class=\"hljs-number\">4</span>) {\n      graph.addEdge(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Edge</span>(data.get(i), data.get(i + <span class=\"hljs-number\">1</span>), data.get(i + <span class=\"hljs-number\">2</span>)));\n    }\n    <span class=\"hljs-comment\">/*\n    .x. node\n    (y) cost\n    - or | or / bidirectional connection\n\n                          ( 98)- .7. -(86)- .4.\n                            |\n                    ( 85)- .17. -(142)- .18. -(92)- .8. -(87)- .11.\n                      |\n                     . 1. -------------------- (160)\n                      |  \\                       |\n                    (211) \\                     .6.\n                      |    \\                     |\n                     . 5.  (101)-.13. -(138)   (115)\n                      |           |     |     /\n                    ( 99)       ( 97)   |    /\n                      |           |     |   /\n        .12. -(151)- .15. -(80)- .14.   |  /\n         |            |           |     | /\n       ( 71)        (140)       (146)- .2. -(120)\n         |            |                       |\n        .19. -( 75)- . 0.        .10. -(75)- .3.\n                      |            |\n                    (118)        ( 70)\n                      |            |\n                     .16. -(111)- .9.\n     */</span>\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// heuristic function optimistic values</span>\n    <span class=\"hljs-type\">int</span>[] heuristic = {\n      <span class=\"hljs-number\">366</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-number\">242</span>, <span class=\"hljs-number\">161</span>, <span class=\"hljs-number\">178</span>, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">151</span>, <span class=\"hljs-number\">226</span>, <span class=\"hljs-number\">244</span>, <span class=\"hljs-number\">241</span>, <span class=\"hljs-number\">234</span>, <span class=\"hljs-number\">380</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">193</span>, <span class=\"hljs-number\">253</span>, <span class=\"hljs-number\">329</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">199</span>, <span class=\"hljs-number\">374</span>\n    };\n\n    <span class=\"hljs-type\">Graph</span> <span class=\"hljs-variable\">graph</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Graph</span>(<span class=\"hljs-number\">20</span>);\n    ArrayList&lt;Integer&gt; graphData =\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(\n            Arrays.asList(\n                <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">140</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">118</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">71</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">151</span>,\n                <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">111</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">70</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">14</span>,\n                <span class=\"hljs-number\">146</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">138</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">115</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">99</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">14</span>,\n                <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">97</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">211</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">101</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">160</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-literal\">null</span>,\n                <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">86</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">142</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">92</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">87</span>));\n    initializeGraph(graph, graphData);\n\n    <span class=\"hljs-type\">PathAndDistance</span> <span class=\"hljs-variable\">solution</span> <span class=\"hljs-operator\">=</span> aStar(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, graph, heuristic);\n    solution.printSolution();\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> PathAndDistance <span class=\"hljs-title function_\">aStar</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to, Graph graph, <span class=\"hljs-type\">int</span>[] heuristic)</span> {\n    <span class=\"hljs-comment\">// nodes are prioritised by the less value of the current distance of their paths, and the</span>\n    <span class=\"hljs-comment\">// estimated value</span>\n    <span class=\"hljs-comment\">// given by the heuristic function to reach the destination point from the current point.</span>\n    PriorityQueue&lt;PathAndDistance&gt; queue =\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt(a -&gt; (a.getDistance() + a.getEstimated())));\n\n    <span class=\"hljs-comment\">// dummy data to start the algorithm from the beginning point</span>\n    queue.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(from)), <span class=\"hljs-number\">0</span>));\n\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">solutionFound</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-type\">PathAndDistance</span> <span class=\"hljs-variable\">currentData</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">null</span>, -<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">while</span> (!queue.isEmpty() &amp;&amp; !solutionFound) {\n      currentData = queue.poll(); <span class=\"hljs-comment\">// first in the queue, best node so keep exploring.</span>\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">currentPosition</span> <span class=\"hljs-operator\">=</span>\n          currentData.getPath().get(currentData.getPath().size() - <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// current node.</span>\n      <span class=\"hljs-keyword\">if</span> (currentPosition == to) solutionFound = <span class=\"hljs-literal\">true</span>;\n      <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">for</span> (Edge edge : graph.getNeighbours(currentPosition))\n          <span class=\"hljs-keyword\">if</span> (!currentData.getPath().contains(edge.getTo())) { <span class=\"hljs-comment\">// Avoid Cycles</span>\n            ArrayList&lt;Integer&gt; updatedPath = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(currentData.getPath());\n            updatedPath.add(edge.getTo()); <span class=\"hljs-comment\">// Add the new node to the path, update the distance,</span>\n            <span class=\"hljs-comment\">// and the heuristic function value associated to that path.</span>\n            queue.add(\n                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(\n                    currentData.getDistance() + edge.getWeight(),\n                    updatedPath,\n                    heuristic[edge.getTo()]));\n          }\n    }\n    <span class=\"hljs-keyword\">return</span> (solutionFound) ? currentData : <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PathAndDistance</span>(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">null</span>, -<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-comment\">// Out of while loop, if there is a solution, the current Data stores the optimal path, and its</span>\n    <span class=\"hljs-comment\">// distance</span>\n  }\n}\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Search/AStar/AStar.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Search/AStar/AStar.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Search.AStar</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Contains the code for A* Pathfinding.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AStar</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Resets the Nodes in the list.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;nodes&quot;&gt;</span>Resets the nodes to be used again.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ResetNodes</span>(<span class=\"hljs-params\">List&lt;Node&gt; nodes</span>)</span>\n        {\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> node <span class=\"hljs-keyword\">in</span> nodes)\n            {\n                node.CurrentCost = <span class=\"hljs-number\">0</span>;\n                node.EstimatedCost = <span class=\"hljs-number\">0</span>;\n                node.Parent = <span class=\"hljs-literal\">null</span>;\n                node.State = NodeState.Unconsidered;\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Generates the Path from an (solved) node graph, before it gets reset.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;target&quot;&gt;</span>The node where we want to go.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The Path to the target node.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Node&gt; <span class=\"hljs-title\">GeneratePath</span>(<span class=\"hljs-params\">Node target</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> ret = <span class=\"hljs-keyword\">new</span> List&lt;Node&gt;();\n            <span class=\"hljs-keyword\">var</span> current = target;\n            <span class=\"hljs-keyword\">while</span> (!(current <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>))\n            {\n                ret.Add(current);\n                current = current.Parent;\n            }\n\n            ret.Reverse();\n            <span class=\"hljs-keyword\">return</span> ret;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Computes the path from =&gt; to.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;from&quot;&gt;</span>Start node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;to&quot;&gt;</span>end node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Path from start to end.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Node&gt; <span class=\"hljs-title\">Compute</span>(<span class=\"hljs-params\">Node <span class=\"hljs-keyword\">from</span>, Node to</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> done = <span class=\"hljs-keyword\">new</span> List&lt;Node&gt;();\n\n            <span class=\"hljs-comment\">// A priority queue that will sort our nodes based on the total cost estimate</span>\n            <span class=\"hljs-keyword\">var</span> open = <span class=\"hljs-keyword\">new</span> PriorityQueue&lt;Node&gt;();\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> node <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">from</span>.ConnectedNodes)\n            {\n                <span class=\"hljs-comment\">// Add connecting nodes if traversable</span>\n                <span class=\"hljs-keyword\">if</span> (node.Traversable)\n                {\n                    <span class=\"hljs-comment\">// Calculate the Costs</span>\n                    node.CurrentCost = <span class=\"hljs-keyword\">from</span>.CurrentCost + <span class=\"hljs-keyword\">from</span>.DistanceTo(node) * node.TraversalCostMultiplier;\n                    node.EstimatedCost = <span class=\"hljs-keyword\">from</span>.CurrentCost + node.DistanceTo(to);\n\n                    <span class=\"hljs-comment\">// Enqueue</span>\n                    open.Enqueue(node);\n                }\n            }\n\n            <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>)\n            {\n                <span class=\"hljs-comment\">// End Condition( Path not found )</span>\n                <span class=\"hljs-keyword\">if</span> (open.Count == <span class=\"hljs-number\">0</span>)\n                {\n                    ResetNodes(done);\n                    ResetNodes(open.GetData());\n                    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> List&lt;Node&gt;();\n                }\n\n                <span class=\"hljs-comment\">// Selecting next Element from queue</span>\n                <span class=\"hljs-keyword\">var</span> current = open.Dequeue();\n\n                <span class=\"hljs-comment\">// Add it to the done list</span>\n                done.Add(current);\n\n                current.State = NodeState.Closed;\n\n                <span class=\"hljs-comment\">// EndCondition( Path was found )</span>\n                <span class=\"hljs-keyword\">if</span> (current == to)\n                {\n                    <span class=\"hljs-keyword\">var</span> ret = GeneratePath(to); <span class=\"hljs-comment\">// Create the Path</span>\n\n                    <span class=\"hljs-comment\">// Reset all Nodes that were used.</span>\n                    ResetNodes(done);\n                    ResetNodes(open.GetData());\n                    <span class=\"hljs-keyword\">return</span> ret;\n                }\n\n                AddOrUpdateConnected(current, to, open);\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AddOrUpdateConnected</span>(<span class=\"hljs-params\">Node current, Node to, PriorityQueue&lt;Node&gt; queue</span>)</span>\n        {\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> connected <span class=\"hljs-keyword\">in</span> current.ConnectedNodes)\n            {\n                <span class=\"hljs-keyword\">if</span> (!connected.Traversable ||\n                    connected.State == NodeState.Closed)\n                {\n                    <span class=\"hljs-keyword\">continue</span>; <span class=\"hljs-comment\">// Do ignore already checked and not traversable nodes.</span>\n                }\n\n                <span class=\"hljs-comment\">// Adds a previously not &quot;seen&quot; node into the Queue</span>\n                <span class=\"hljs-keyword\">if</span> (connected.State == NodeState.Unconsidered)\n                {\n                    connected.Parent = current;\n                    connected.CurrentCost =\n                        current.CurrentCost + current.DistanceTo(connected) * connected.TraversalCostMultiplier;\n                    connected.EstimatedCost = connected.CurrentCost + connected.DistanceTo(to);\n                    connected.State = NodeState.Open;\n                    queue.Enqueue(connected);\n                }\n                <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (current != connected)\n                {\n                    <span class=\"hljs-comment\">// Updating the cost of the node if the current way is cheaper than the previous</span>\n                    <span class=\"hljs-keyword\">var</span> newCCost = current.CurrentCost + current.DistanceTo(connected);\n                    <span class=\"hljs-keyword\">var</span> newTCost = newCCost + current.EstimatedCost;\n                    <span class=\"hljs-keyword\">if</span> (newTCost &lt; connected.TotalCost)\n                    {\n                        connected.Parent = current;\n                        connected.CurrentCost = newCCost;\n                    }\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    <span class=\"hljs-comment\">// Codacy made me do it.</span>\n                    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> PathfindingException(\n                        <span class=\"hljs-string\">&quot;Detected the same node twice. Confusion how this could ever happen&quot;</span>);\n                }\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Tim Akermann",
      "email": "ti.akermann@gmail.com",
      "commits": 1
    },
    {
      "name": "Sohan Rudra",
      "email": "sohanrudra@gmail.com",
      "commits": 1
    },
    {
      "name": "Milton Chandro Bhowmick",
      "email": "miltonbhowmick6@gmail.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Erwin Lejeune",
      "email": "erwin.lejeune15@gmail.com",
      "commits": 1
    },
    {
      "name": "Jeffin Francis",
      "email": "francisjeffin07@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "MarcosVillacanas",
      "email": "marcosvillacanas@icloud.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
