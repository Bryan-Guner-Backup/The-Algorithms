{
  "slug": "fibonacci-sum",
  "name": "Fibonacci Sum",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/fibonacci_sum.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/fibonacci_sum.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief An algorithm to calculate the sum of [Fibonacci\n * Sequence](https://en.wikipedia.org/wiki/Fibonacci_number): \\f$\\mathrm{F}(n) +\n * \\mathrm{F}(n+1) + .. + \\mathrm{F}(m)\\f$\n * @details An algorithm to calculate the sum of Fibonacci Sequence:\n * \\f$\\mathrm{F}(n) + \\mathrm{F}(n+1) + .. + \\mathrm{F}(m)\\f$ where\n * \\f$\\mathrm{F}(i)\\f$ denotes the i-th Fibonacci Number . Note that F(0) = 0\n * and F(1) = 1. The value of the sum is calculated using matrix exponentiation.\n * Reference source:\n * https://stackoverflow.com/questions/4357223/finding-the-sum-of-fibonacci-numbers\n * @author [Sarthak Sahu](https://github.com/SarthakSahu1009)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for std::cin and std::cout</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * @namespace fibonacci_sum\n * @brief Functions for the sum of the Fibonacci Sequence: \\f$\\mathrm{F}(n) +\n * \\mathrm{F}(n+1) + .. + \\mathrm{F}(m)\\f$\n */</span>\n<span class=\"hljs-keyword\">namespace</span> fibonacci_sum {\n<span class=\"hljs-keyword\">using</span> matrix = std::vector&lt;std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt; &gt;;\n\n<span class=\"hljs-comment\">/**\n * Function to multiply two matrices\n * @param T matrix 1\n * @param A martix 2\n * @returns resultant matrix\n */</span>\nmath::<span class=\"hljs-function\">fibonacci_sum::matrix <span class=\"hljs-title\">multiply</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> math::fibonacci_sum::matrix &amp;T,\n                                     <span class=\"hljs-keyword\">const</span> math::fibonacci_sum::matrix &amp;A)</span> </span>{\n    math::<span class=\"hljs-function\">fibonacci_sum::matrix <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>, std::vector&lt;<span class=\"hljs-type\">uint64_t</span>&gt;(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>))</span></span>;\n\n    <span class=\"hljs-comment\">// multiplying matrices</span>\n    result[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = T[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] * A[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] + T[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] * A[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];\n    result[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = T[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] * A[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] + T[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] * A[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];\n    result[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = T[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] * A[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] + T[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] * A[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>];\n    result[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = T[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] * A[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] + T[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] * A[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">return</span> result;\n}\n\n<span class=\"hljs-comment\">/**\n * Function to compute A^n where A is a matrix.\n * @param T matrix\n * @param ex power\n * @returns resultant matrix\n */</span>\nmath::<span class=\"hljs-function\">fibonacci_sum::matrix <span class=\"hljs-title\">power</span><span class=\"hljs-params\">(math::fibonacci_sum::matrix T, <span class=\"hljs-type\">uint64_t</span> ex)</span> </span>{\n    math::fibonacci_sum::matrix A{{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>}};\n    <span class=\"hljs-keyword\">if</span> (ex == <span class=\"hljs-number\">0</span> || ex == <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">return</span> T;\n    }\n\n    T = <span class=\"hljs-built_in\">power</span>(T, ex / <span class=\"hljs-number\">2</span>);\n    T = <span class=\"hljs-built_in\">multiply</span>(T, T);\n    <span class=\"hljs-keyword\">if</span> (ex &amp; <span class=\"hljs-number\">1</span>) {\n        T = <span class=\"hljs-built_in\">multiply</span>(T, A);\n    }\n    <span class=\"hljs-keyword\">return</span> T;\n}\n\n<span class=\"hljs-comment\">/**\n * Function to compute sum of fibonacci sequence from 0 to n.\n * @param n number\n * @returns uint64_t ans, the sum of sequence\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">result</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\n    math::fibonacci_sum::matrix T{{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>}};\n    T = <span class=\"hljs-built_in\">power</span>(T, n);\n    <span class=\"hljs-type\">uint64_t</span> ans = T[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>];\n    ans = (ans - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">return</span> ans;\n}\n\n<span class=\"hljs-comment\">/**\n * Function to compute sum of fibonacci sequence from n to m.\n * @param n start of sequence\n * @param m end of sequence\n * @returns uint64_t the sum of sequence\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">fiboSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n, <span class=\"hljs-type\">uint64_t</span> m)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">result</span>(m + <span class=\"hljs-number\">2</span>) - <span class=\"hljs-built_in\">result</span>(n + <span class=\"hljs-number\">1</span>));\n}\n}  <span class=\"hljs-comment\">// namespace fibonacci_sum</span>\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * Function for testing fiboSum function.\n * test cases and assert statement.\n * @returns `void`\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> n = <span class=\"hljs-number\">0</span>, m = <span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-type\">uint64_t</span> test_1 = math::fibonacci_sum::<span class=\"hljs-built_in\">fiboSum</span>(n, m);\n    <span class=\"hljs-built_in\">assert</span>(test_1 == <span class=\"hljs-number\">4</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 1!&quot;</span> &lt;&lt; std::endl;\n\n    n = <span class=\"hljs-number\">3</span>;\n    m = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-type\">uint64_t</span> test_2 = math::fibonacci_sum::<span class=\"hljs-built_in\">fiboSum</span>(n, m);\n    <span class=\"hljs-built_in\">assert</span>(test_2 == <span class=\"hljs-number\">10</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 2!&quot;</span> &lt;&lt; std::endl;\n\n    n = <span class=\"hljs-number\">5</span>;\n    m = <span class=\"hljs-number\">7</span>;\n    <span class=\"hljs-type\">uint64_t</span> test_3 = math::fibonacci_sum::<span class=\"hljs-built_in\">fiboSum</span>(n, m);\n    <span class=\"hljs-built_in\">assert</span>(test_3 == <span class=\"hljs-number\">26</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 3!&quot;</span> &lt;&lt; std::endl;\n\n    n = <span class=\"hljs-number\">7</span>;\n    m = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-type\">uint64_t</span> test_4 = math::fibonacci_sum::<span class=\"hljs-built_in\">fiboSum</span>(n, m);\n    <span class=\"hljs-built_in\">assert</span>(test_4 == <span class=\"hljs-number\">123</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 4!&quot;</span> &lt;&lt; std::endl;\n\n    n = <span class=\"hljs-number\">9</span>;\n    m = <span class=\"hljs-number\">12</span>;\n    <span class=\"hljs-type\">uint64_t</span> test_5 = math::fibonacci_sum::<span class=\"hljs-built_in\">fiboSum</span>(n, m);\n    <span class=\"hljs-built_in\">assert</span>(test_5 == <span class=\"hljs-number\">322</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 5!&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
