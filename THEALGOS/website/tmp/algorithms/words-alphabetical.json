{
  "slug": "words-alphabetical",
  "name": "Words Alphabetical",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/binary_trees/words_alphabetical.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/binary_trees/words_alphabetical.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Printing the [words contained in a\n * file](http://www.dailyfreecode.com/Code/word-list-reads-text-file-makes-2050.aspx)\n * named `file.txt` in alphabetical order and also their frequencies in to\n * another file &quot;wordcount.txt&quot;\n * @details\n * Given a file (`file.txt`) containing words (like a publication or a novel),\n * where words are separated by a space, newline, or underscore.\n * This program prints (writes or outputs) to another file (`wordcount.txt`),\n * the individual words contained in &#x27;file.txt&#x27; with their frequencies (number\n * of occurences) each on a newline and in alphabetical order. This program uses\n * the binary tree data structure to accomplish this task.\n * @author [Randy Kwalar](https://github.com/RandyKdev)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctype.h&gt;</span>     <span class=\"hljs-comment\">/// for type checks</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;inttypes.h&gt;</span>  <span class=\"hljs-comment\">/// for uint64_t based types, int64_t based types</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span>   <span class=\"hljs-comment\">/// for boolean data type</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span>     <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span>    <span class=\"hljs-comment\">/// for memory allocation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span>    <span class=\"hljs-comment\">/// for string operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief structure defining a node in the binary tree\n */</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>\n{</span>\n    <span class=\"hljs-type\">char</span> *word;          <span class=\"hljs-comment\">///&lt; the word (value) of the node</span>\n    <span class=\"hljs-type\">uint64_t</span> frequency;  <span class=\"hljs-comment\">///&lt; number of occurences of the word</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">left</span>;</span>   <span class=\"hljs-comment\">///&lt; pointer to the left child node</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">right</span>;</span>  <span class=\"hljs-comment\">///&lt; pointer to the right child node</span>\n};\n\n<span class=\"hljs-comment\">/**\n * @brief Ends program due to an error\n * @param errorMessage the error message to be printed\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">endProgramAbruptly</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *errorMessage)</span>\n{\n    <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;%s\\n&quot;</span>, errorMessage);\n    <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Frees memory when program is terminating\n * @param node pointer to current node\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">freeTreeMemory</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *node)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">NULL</span>)\n    {\n        freeTreeMemory(node-&gt;left);\n        freeTreeMemory(node-&gt;right);\n        <span class=\"hljs-built_in\">free</span>(node-&gt;word);  <span class=\"hljs-comment\">// freeing node-&gt;word because memory was allocated</span>\n                           <span class=\"hljs-comment\">// using malloc</span>\n        <span class=\"hljs-built_in\">free</span>(node);  <span class=\"hljs-comment\">// freeing node because memory was allocated using malloc</span>\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Stores word in memory\n * @param word word to be stored in memory\n * @returns a pointer to the newly allocated word if the word IS stored successfully\n * @returns `NULL` if the word is NOT stored\n */</span>\n<span class=\"hljs-type\">char</span> *<span class=\"hljs-title function_\">getPointerToWord</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *word)</span>\n{\n    <span class=\"hljs-type\">char</span> *<span class=\"hljs-built_in\">string</span> =\n        (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">malloc</span>((<span class=\"hljs-built_in\">strlen</span>(word) + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));  <span class=\"hljs-comment\">///&lt; pointer to string</span>\n    <span class=\"hljs-comment\">// + 1 is for the &#x27;\\0&#x27; character</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">string</span> != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">strcpy</span>(<span class=\"hljs-built_in\">string</span>, word);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">string</span>;\n    }\n    endProgramAbruptly(\n        <span class=\"hljs-string\">&quot;\\nA problem occurred while reserving memory for the word\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Closes the file after reading or writing\n * @param file pointer to the file to be closed\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">closeFile</span><span class=\"hljs-params\">(FILE *file)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (fclose(file)) {\n        endProgramAbruptly(<span class=\"hljs-string\">&quot;\\nA Problem Occurred while closing a file\\n&quot;</span>);\n     }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Reserves memory for new node\n * @returns a pointer to the newly allocated node if memory IS successfully reserved\n * @returns `NULL` if memory is NOT reserved\n */</span>\n<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-title function_\">allocateMemoryForNode</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">node</span> =</span>\n        (<span class=\"hljs-keyword\">struct</span> Node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Node));  <span class=\"hljs-comment\">///&lt; pointer to the node</span>\n    <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> node;\n    }\n    endProgramAbruptly(\n        <span class=\"hljs-string\">&quot;\\nA problem occurred while reserving memory for the structure\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Writes contents of tree to another file alphabetically\n * @param node pointer to current node\n * @param file pointer to file\n * @returns void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">writeContentOfTreeToFile</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Node *node, FILE *file)</span>\n{\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">///&lt; for word numbering in the write file</span>\n    <span class=\"hljs-keyword\">if</span> (node != <span class=\"hljs-literal\">NULL</span>)       <span class=\"hljs-comment\">// checks if the node is valid</span>\n    {\n        writeContentOfTreeToFile(\n            node-&gt;left,\n            file);  <span class=\"hljs-comment\">// calls `writeContentOfTreeToFile` for left sub tree</span>\n        <span class=\"hljs-built_in\">fprintf</span>(file, <span class=\"hljs-string\">&quot;%-5lu \\t %-9lu \\t %s \\n&quot;</span>, i++, node-&gt;frequency,\n                node-&gt;word);  <span class=\"hljs-comment\">// prints the word number, word frequency and word</span>\n                              <span class=\"hljs-comment\">// in tabular format to the file</span>\n        writeContentOfTreeToFile(\n            node-&gt;right,\n            file);  <span class=\"hljs-comment\">// calls `writeContentOfTreeToFile` for right sub tree</span>\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Adds word (node) to the correct position in tree\n * @param word word to be inserted in to the tree\n * @param currentNode node which is being compared\n * @returns a pointer to the root node\n */</span>\n<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-title function_\">addWordToTree</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *word, <span class=\"hljs-keyword\">struct</span> Node *currentNode)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (currentNode == <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// checks if `currentNode` is `NULL`</span>\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">currentNode</span> =</span>\n            allocateMemoryForNode();  <span class=\"hljs-comment\">// allocates memory for new node</span>\n        currentNode-&gt;word = getPointerToWord(word);  <span class=\"hljs-comment\">// stores `word` in memory</span>\n        currentNode-&gt;frequency = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// initializes the word frequency to 1</span>\n        currentNode-&gt;left = <span class=\"hljs-literal\">NULL</span>;    <span class=\"hljs-comment\">// sets left node to `NULL`</span>\n        currentNode-&gt;right = <span class=\"hljs-literal\">NULL</span>;   <span class=\"hljs-comment\">// sets right node to `NULL`</span>\n        <span class=\"hljs-keyword\">return</span> currentNode;          <span class=\"hljs-comment\">// returns pointer to newly created node</span>\n    }\n\n    <span class=\"hljs-type\">int64_t</span> compared = <span class=\"hljs-built_in\">strcmp</span>(word, currentNode-&gt;word);  <span class=\"hljs-comment\">///&lt; holds compare state</span>\n\n    <span class=\"hljs-keyword\">if</span> (compared &gt; <span class=\"hljs-number\">0</span>) {\n        currentNode-&gt;right = addWordToTree(word,\n            currentNode-&gt;right);  <span class=\"hljs-comment\">// adds `word` to right sub tree if `word` is</span>\n                                  <span class=\"hljs-comment\">// alphabetically greater than `currentNode-&gt;word`</span>\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (compared &lt; <span class=\"hljs-number\">0</span>) {\n        currentNode-&gt;left = addWordToTree(word,\n            currentNode-&gt;left);  <span class=\"hljs-comment\">// adds `word` to left sub tree if `word` is</span>\n                                 <span class=\"hljs-comment\">// alphabetically less than `currentNode-&gt;word`</span>\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        currentNode-&gt;frequency++; <span class=\"hljs-comment\">// increments `currentNode` frequency if `word` is the same as `currentNode-&gt;word`</span>\n    }\n\n    <span class=\"hljs-keyword\">return</span> currentNode; <span class=\"hljs-comment\">// returns pointer to current node</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Reads words from file to tree\n * @param file file to be read from\n * @param root root node of tree\n * @returns a pointer to the root node\n */</span>\n<span class=\"hljs-keyword\">struct</span> Node *<span class=\"hljs-title function_\">readWordsInFileToTree</span><span class=\"hljs-params\">(FILE *file, <span class=\"hljs-keyword\">struct</span> Node *root)</span>\n{\n    <span class=\"hljs-comment\">// longest english word = 45 chars</span>\n    <span class=\"hljs-comment\">// +1 for &#x27;\\0&#x27; = 46 chars</span>\n    <span class=\"hljs-type\">char</span> *inputString =\n        (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">46</span> * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));  <span class=\"hljs-comment\">///&lt; pointer to the input string</span>\n\n    <span class=\"hljs-type\">char</span> inputChar;                <span class=\"hljs-comment\">///&lt; temp storage of characters</span>\n    <span class=\"hljs-type\">bool</span> isPrevCharAlpha = <span class=\"hljs-literal\">false</span>;  <span class=\"hljs-comment\">///&lt; bool to mark the end of a word</span>\n    <span class=\"hljs-type\">uint8_t</span> pos = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">///&lt; position in inputString to place the inputChar</span>\n\n    <span class=\"hljs-keyword\">while</span> ((inputChar = fgetc(file)) != EOF)\n    {\n        <span class=\"hljs-keyword\">if</span> (pos &gt; <span class=\"hljs-number\">0</span>)\n            isPrevCharAlpha = <span class=\"hljs-built_in\">isalpha</span>(inputString[pos - <span class=\"hljs-number\">1</span>]);\n\n        <span class=\"hljs-comment\">// checks if character is letter</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isalpha</span>(inputChar))\n        {\n            inputString[pos++] = <span class=\"hljs-built_in\">tolower</span>(inputChar);\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n\n        <span class=\"hljs-comment\">// checks if character is &#x27; or - and if it is preceded by a letter eg</span>\n        <span class=\"hljs-comment\">// yours-not, persons&#x27; (valid)</span>\n        <span class=\"hljs-keyword\">if</span> ((inputChar == <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> || inputChar == <span class=\"hljs-string\">&#x27;-&#x27;</span>) &amp;&amp; isPrevCharAlpha)\n        {\n            inputString[pos++] = inputChar;\n            <span class=\"hljs-keyword\">continue</span>;\n        }\n\n        <span class=\"hljs-comment\">// makes sure that there is something valid in inputString</span>\n        <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-number\">0</span>)\n            <span class=\"hljs-keyword\">continue</span>;\n\n        <span class=\"hljs-comment\">// if last character is not letter and is not &#x27; then replace by \\0</span>\n        <span class=\"hljs-keyword\">if</span> (!isPrevCharAlpha &amp;&amp; inputString[pos - <span class=\"hljs-number\">1</span>] != <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span>)\n            pos--;\n        inputString[pos] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\n        pos = <span class=\"hljs-number\">0</span>;\n        isPrevCharAlpha = <span class=\"hljs-literal\">false</span>;\n        root = addWordToTree(inputString, root);\n    }\n\n    <span class=\"hljs-comment\">// this is to catch the case for the EOF being immediately after the last</span>\n    <span class=\"hljs-comment\">// letter or &#x27;</span>\n    <span class=\"hljs-keyword\">if</span> (pos &gt; <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (!isPrevCharAlpha &amp;&amp; inputString[pos - <span class=\"hljs-number\">1</span>] != <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span>)\n            pos--;\n        inputString[pos] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\n        root = addWordToTree(inputString, root);\n    }\n\n    <span class=\"hljs-built_in\">free</span>(inputString);\n    <span class=\"hljs-keyword\">return</span> root;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">root</span> =</span> <span class=\"hljs-literal\">NULL</span>;  <span class=\"hljs-comment\">///&lt; pointer to the root node</span>\n    FILE *file = <span class=\"hljs-literal\">NULL</span>;         <span class=\"hljs-comment\">///&lt; pointer to the file</span>\n\n    file = fopen(<span class=\"hljs-string\">&quot;file.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>);  <span class=\"hljs-comment\">// creates test file in write mode</span>\n\n    <span class=\"hljs-built_in\">fprintf</span>(file,\n            <span class=\"hljs-string\">&quot;hey_this, is a. test input \\n to a_file&quot;</span>);  <span class=\"hljs-comment\">// writes test data to</span>\n                                                         <span class=\"hljs-comment\">// test file</span>\n\n    closeFile(file);                <span class=\"hljs-comment\">// closes test file</span>\n    file = fopen(<span class=\"hljs-string\">&quot;file.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>);  <span class=\"hljs-comment\">// reopens test file in read mode</span>\n\n    root = readWordsInFileToTree(file,\n                                 root);  <span class=\"hljs-comment\">// reads words from test file to tree</span>\n\n    <span class=\"hljs-comment\">// Tests to check if words were added to correct position in tree and also</span>\n    <span class=\"hljs-comment\">// if their frequencies were added correctly</span>\n    assert(<span class=\"hljs-built_in\">strcmp</span>(root-&gt;word, <span class=\"hljs-string\">&quot;hey&quot;</span>) == <span class=\"hljs-number\">0</span>);\n    assert(root-&gt;frequency == <span class=\"hljs-number\">1</span>);\n    assert(<span class=\"hljs-built_in\">strcmp</span>(root-&gt;left-&gt;word, <span class=\"hljs-string\">&quot;a&quot;</span>) == <span class=\"hljs-number\">0</span>);\n    assert(root-&gt;left-&gt;frequency == <span class=\"hljs-number\">2</span>);\n    assert(<span class=\"hljs-built_in\">strcmp</span>(root-&gt;right-&gt;word, <span class=\"hljs-string\">&quot;this&quot;</span>) == <span class=\"hljs-number\">0</span>);\n    assert(<span class=\"hljs-built_in\">strcmp</span>(root-&gt;left-&gt;right-&gt;word, <span class=\"hljs-string\">&quot;file&quot;</span>) == <span class=\"hljs-number\">0</span>);\n    assert(<span class=\"hljs-built_in\">strcmp</span>(root-&gt;right-&gt;left-&gt;word, <span class=\"hljs-string\">&quot;is&quot;</span>) == <span class=\"hljs-number\">0</span>);\n\n    closeFile(file);     <span class=\"hljs-comment\">// closes test file</span>\n    remove(<span class=\"hljs-string\">&quot;file.txt&quot;</span>);  <span class=\"hljs-comment\">// deletes test file from storage</span>\n\n    file = fopen(<span class=\"hljs-string\">&quot;wordcount.txt&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>);  <span class=\"hljs-comment\">// creates write file</span>\n    <span class=\"hljs-built_in\">fprintf</span>(file, <span class=\"hljs-string\">&quot;%-5s \\t %9s \\t %s \\n&quot;</span>, <span class=\"hljs-string\">&quot;S/N&quot;</span>, <span class=\"hljs-string\">&quot;FREQUENCY&quot;</span>,\n            <span class=\"hljs-string\">&quot;WORD&quot;</span>);  <span class=\"hljs-comment\">// prints the heading to `wordcount.txt`</span>\n    writeContentOfTreeToFile(\n        root, file);  <span class=\"hljs-comment\">// writes content of tree to file (`wordcount.txt`)</span>\n\n    <span class=\"hljs-comment\">// Here is how the output to `wordcount.txt` should look like</span>\n    <span class=\"hljs-type\">char</span> *correctString =\n        <span class=\"hljs-string\">&quot;S/N   \t FREQUENCY \t WORD \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;1     \t 2         \t a \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;2     \t 1         \t file \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;3     \t 1         \t hey \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;4     \t 1         \t input \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;5     \t 1         \t is \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;6     \t 1         \t n \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;7     \t 1         \t test \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;8     \t 1         \t this \\n&quot;</span>\n        <span class=\"hljs-string\">&quot;9     \t 1         \t to \\n&quot;</span>;\n\n    <span class=\"hljs-type\">int16_t</span> inputChar;  <span class=\"hljs-comment\">// holds the current character in `wordcount.txt`</span>\n    <span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// holds the current index in `correctString`</span>\n\n    <span class=\"hljs-comment\">// Checks if the content in `wordcount.txt` is as expected (the same as in</span>\n    <span class=\"hljs-comment\">// `correctString`)</span>\n    <span class=\"hljs-keyword\">while</span> ((inputChar = fgetc(file)) != EOF) {\n        assert(inputChar == correctString[i++]);\n    }\n\n    closeFile(file);          <span class=\"hljs-comment\">// closes `wordcount.txt`</span>\n    remove(<span class=\"hljs-string\">&quot;wordcount.txt&quot;</span>);  <span class=\"hljs-comment\">// deletes `wordcount.txt`</span>\n\n    freeTreeMemory(root);  <span class=\"hljs-comment\">// frees memory taken up by the tree</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    test();  <span class=\"hljs-comment\">// run self-test implementations</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Randy Kwalar",
      "email": "rkwalar@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
