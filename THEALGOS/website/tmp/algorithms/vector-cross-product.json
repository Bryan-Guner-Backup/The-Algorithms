{
  "slug": "vector-cross-product",
  "name": "Vector Cross Product",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/vector_cross_product.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/vector_cross_product.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n *\n * @brief Calculates the [Cross Product](https://en.wikipedia.org/wiki/Cross_product) and the magnitude of two mathematical 3D vectors.\n *\n *\n * @details Cross Product of two vectors gives a vector.\n * Direction Ratios of a vector are the numeric parts of the given vector. They are the tree parts of the\n * vector which determine the magnitude (value) of the vector.\n * The method of finding a cross product is the same as finding the determinant of an order 3 matrix consisting\n * of the first row with unit vectors of magnitude 1, the second row with the direction ratios of the\n * first vector and the third row with the direction ratios of the second vector.\n * The magnitude of a vector is it&#x27;s value expressed as a number.\n * Let the direction ratios of the first vector, P be: a, b, c\n * Let the direction ratios of the second vector, Q be: x, y, z\n * Therefore the calculation for the cross product can be arranged as:\n *\n * ```\n * P x Q:\n *  \t1\t1\t1\n *  \ta\tb\tc\n *  \tx\ty\tz\n * ```\n *\n * The direction ratios (DR) are calculated as follows:\n *  \t1st DR, J:  (b * z) - (c * y)\n *  \t2nd DR, A: -((a * z) - (c * x))\n *  \t3rd DR, N:  (a * y) - (b * x)\n *\n * Therefore, the direction ratios of the cross product are: J, A, N\n * The following C++ Program calculates the direction ratios of the cross products of two vector.\n * The program uses a function, cross() for doing so.\n * The direction ratios for the first and the second vector has to be passed one by one seperated by a space character.\n *\n * Magnitude of a vector is the square root of the sum of the squares of the direction ratios.\n *\n * ### Example:\n * An example of a running instance of the executable program:\n *\n * \tPass the first Vector: 1 2 3\n *\tPass the second Vector: 4 5 6\n *\tThe cross product is: -3 6 -3\n *\tMagnitude: 7.34847\n *\n * @author [Shreyas Sable](https://github.com/Shreyas-OwO)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Math algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n\t<span class=\"hljs-comment\">/**\n\t * @namespace vector_cross\n\t * @brief Functions for Vector Cross Product algorithms\n\t */</span>\n\t<span class=\"hljs-keyword\">namespace</span> vector_cross {\n\t\t<span class=\"hljs-comment\">/**\n\t\t * @brief Function to calculate the cross product of the passed arrays containing the direction ratios of the two mathematical vectors.\n\t\t * @param A contains the direction ratios of the first mathematical vector.\n\t\t * @param B contains the direction ration of the second mathematical vector.\n\t\t * @returns the direction ratios of the cross product.\n\t\t */</span>\n\t\t<span class=\"hljs-function\">std::array&lt;<span class=\"hljs-type\">double</span>, 3&gt; <span class=\"hljs-title\">cross</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">3</span>&gt; &amp;A, <span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">3</span>&gt; &amp;B)</span> </span>{\n\t\t\tstd::array&lt;<span class=\"hljs-type\">double</span>, 3&gt; product;\n\t\t\t<span class=\"hljs-comment\">/// Performs the cross product as shown in @algorithm.</span>\n\t\t\tproduct[<span class=\"hljs-number\">0</span>] = (A[<span class=\"hljs-number\">1</span>] * B[<span class=\"hljs-number\">2</span>]) - (A[<span class=\"hljs-number\">2</span>] * B[<span class=\"hljs-number\">1</span>]);\n\t\t\tproduct[<span class=\"hljs-number\">1</span>] = -((A[<span class=\"hljs-number\">0</span>] * B[<span class=\"hljs-number\">2</span>]) - (A[<span class=\"hljs-number\">2</span>] * B[<span class=\"hljs-number\">0</span>]));\n\t\t\tproduct[<span class=\"hljs-number\">2</span>] = (A[<span class=\"hljs-number\">0</span>] * B[<span class=\"hljs-number\">1</span>]) - (A[<span class=\"hljs-number\">1</span>] * B[<span class=\"hljs-number\">0</span>]);\n\t\t\t<span class=\"hljs-keyword\">return</span> product;\n\t\t}\n\n\t\t<span class=\"hljs-comment\">/**\n\t\t * @brief Calculates the magnitude of the mathematical vector from it&#x27;s direction ratios.\n\t\t * @param vec an array containing the direction ratios of a mathematical vector.\n\t\t * @returns type: double description: the magnitude of the mathematical vector from the given direction ratios.\n\t\t */</span>\n\t\t<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">mag</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">3</span>&gt; &amp;vec)</span> </span>{\n\t\t\t<span class=\"hljs-type\">double</span> magnitude = <span class=\"hljs-built_in\">sqrt</span>((vec[<span class=\"hljs-number\">0</span>] * vec[<span class=\"hljs-number\">0</span>]) + (vec[<span class=\"hljs-number\">1</span>] * vec[<span class=\"hljs-number\">1</span>]) + (vec[<span class=\"hljs-number\">2</span>] * vec[<span class=\"hljs-number\">2</span>]));\n\t\t\t<span class=\"hljs-keyword\">return</span> magnitude;\n\t\t}\n\t} <span class=\"hljs-comment\">/// namespace vector_cross</span>\n} <span class=\"hljs-comment\">/// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * @brief test function.\n * @details test the cross() and the mag() functions.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n\t<span class=\"hljs-comment\">/// Tests the cross() function.</span>\n\tstd::array&lt;<span class=\"hljs-type\">double</span>, 3&gt; t_vec = math::vector_cross::<span class=\"hljs-built_in\">cross</span>({<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>});\n\t<span class=\"hljs-built_in\">assert</span>(t_vec[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">-3</span> &amp;&amp; t_vec[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">6</span> &amp;&amp; t_vec[<span class=\"hljs-number\">2</span>] == <span class=\"hljs-number\">-3</span>);\n\n\t<span class=\"hljs-comment\">/// Tests the mag() function.</span>\n\t<span class=\"hljs-type\">double</span> t_mag = math::vector_cross::<span class=\"hljs-built_in\">mag</span>({<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">0</span>});\n\t<span class=\"hljs-built_in\">assert</span>(t_mag == <span class=\"hljs-number\">10</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main Function\n * @details Asks the user to enter the direction ratios for each of the two mathematical vectors using std::cin\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n\t<span class=\"hljs-comment\">/// Tests the functions with sample input before asking for user input.</span>\n\t<span class=\"hljs-built_in\">test</span>();\n\n\tstd::array&lt;<span class=\"hljs-type\">double</span>, 3&gt; vec1;\n\tstd::array&lt;<span class=\"hljs-type\">double</span>, 3&gt; vec2;\n\n\t<span class=\"hljs-comment\">/// Gets the values for the first vector.</span>\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPass the first Vector: &quot;</span>;\n\tstd::cin &gt;&gt; vec1[<span class=\"hljs-number\">0</span>] &gt;&gt; vec1[<span class=\"hljs-number\">1</span>] &gt;&gt; vec1[<span class=\"hljs-number\">2</span>];\n\n\t<span class=\"hljs-comment\">/// Gets the values for the second vector.</span>\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPass the second Vector: &quot;</span>;\n\tstd::cin &gt;&gt; vec2[<span class=\"hljs-number\">0</span>] &gt;&gt; vec2[<span class=\"hljs-number\">1</span>] &gt;&gt; vec2[<span class=\"hljs-number\">2</span>];\n\n\t<span class=\"hljs-comment\">/// Displays the output out.</span>\n\tstd::array&lt;<span class=\"hljs-type\">double</span>, 3&gt; product = math::vector_cross::<span class=\"hljs-built_in\">cross</span>(vec1, vec2);\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nThe cross product is: &quot;</span> &lt;&lt; product[<span class=\"hljs-number\">0</span>] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; product[<span class=\"hljs-number\">1</span>] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span> &lt;&lt; product[<span class=\"hljs-number\">2</span>] &lt;&lt; std::endl;\n\n\t<span class=\"hljs-comment\">/// Displays the magnitude of the cross product.</span>\n\tstd::cout &lt;&lt; <span class=\"hljs-string\">&quot;Magnitude: &quot;</span> &lt;&lt; math::vector_cross::<span class=\"hljs-built_in\">mag</span>(product) &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span> &lt;&lt; std::endl;\n\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
