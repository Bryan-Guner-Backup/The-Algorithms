{
  "slug": "binary-or-operator",
  "name": "Binary or Operator",
  "categories": ["bitmanipulation"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "bit_manipulation/binary_or_operator.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/bit_manipulation/binary_or_operator.py",
      "code": "<span class=\"hljs-comment\"># https://www.tutorialspoint.com/python3/bitwise_operators_example.htm</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">binary_or</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Take in 2 integers, convert them to binary, and return a binary number that is the\r\n    result of a binary or operation on the integers provided.\r\n\r\n    &gt;&gt;&gt; binary_or(25, 32)\r\n    &#x27;0b111001&#x27;\r\n    &gt;&gt;&gt; binary_or(37, 50)\r\n    &#x27;0b110111&#x27;\r\n    &gt;&gt;&gt; binary_or(21, 30)\r\n    &#x27;0b11111&#x27;\r\n    &gt;&gt;&gt; binary_or(58, 73)\r\n    &#x27;0b1111011&#x27;\r\n    &gt;&gt;&gt; binary_or(0, 255)\r\n    &#x27;0b11111111&#x27;\r\n    &gt;&gt;&gt; binary_or(0, 256)\r\n    &#x27;0b100000000&#x27;\r\n    &gt;&gt;&gt; binary_or(0, -1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    ValueError: the value of both input must be positive\r\n    &gt;&gt;&gt; binary_or(0, 1.1)\r\n    Traceback (most recent call last):\r\n        ...\r\n    TypeError: &#x27;float&#x27; object cannot be interpreted as an integer\r\n    &gt;&gt;&gt; binary_or(&quot;0&quot;, &quot;1&quot;)\r\n    Traceback (most recent call last):\r\n        ...\r\n    TypeError: &#x27;&lt;&#x27; not supported between instances of &#x27;str&#x27; and &#x27;int&#x27;\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> a &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> b &lt; <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;the value of both input must be positive&quot;</span>)\r\n    a_binary = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">bin</span>(a))[<span class=\"hljs-number\">2</span>:]  <span class=\"hljs-comment\"># remove the leading &quot;0b&quot;</span>\r\n    b_binary = <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">bin</span>(b))[<span class=\"hljs-number\">2</span>:]\r\n    max_len = <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">len</span>(a_binary), <span class=\"hljs-built_in\">len</span>(b_binary))\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;0b&quot;</span> + <span class=\"hljs-string\">&quot;&quot;</span>.join(\r\n        <span class=\"hljs-built_in\">str</span>(<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-keyword\">in</span> (char_a, char_b)))\r\n        <span class=\"hljs-keyword\">for</span> char_a, char_b <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(a_binary.zfill(max_len), b_binary.zfill(max_len))\r\n    )\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n"
    },
    "ruby": {
      "dir": "bit_manipulation/binary_or_operator.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/bit_manipulation/binary_or_operator.rb",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">binary_or</span><span class=\"hljs-params\">(x, y)</span></span>\n  raise <span class=\"hljs-string\">&#x27;Input must only contain positive integers&#x27;</span> <span class=\"hljs-keyword\">if</span> x &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> y &lt; <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-string\">&quot;0b&quot;</span> + (x <span class=\"hljs-params\">| y).to_s(2)\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">begin</span>\n  binary_or(-1, 0)\n<span class=\"hljs-keyword\">rescue</span> =&gt; e\n  puts e.message\n<span class=\"hljs-keyword\">end</span>\n# Input must only contain positive integers\n\nputs binary_or(1, 1)\n# 0b1\nputs binary_or(0, 1)\n# 0b1\nputs binary_or(1024, 1024)\n# 0b10000000000\nputs binary_or(0, 1023)\n# 0b1111111111\nputs binary_or(16, 58)\n# 0b110010\n\n</span>"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Firejay3",
      "email": "68265194+Firejay3@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vijay Siva",
      "email": "vijay.sivasubramaniam@instacart.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
