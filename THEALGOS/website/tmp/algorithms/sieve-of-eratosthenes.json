{
  "slug": "sieve-of-eratosthenes",
  "name": "Sieve of Eratosthenes",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/sieve_of_eratosthenes.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/sieve_of_eratosthenes.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nSieve of Eratosthones\r\n\r\nThe sieve of Eratosthenes is an algorithm used to find prime numbers, less than or\r\nequal to a given value.\r\nIllustration:\r\nhttps://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif\r\nReference: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\r\n\r\ndoctest provider: Bruno Simas Hadlich (https://github.com/brunohadlich)\r\nAlso thanks to Dmitry (https://github.com/LizardWizzard) for finding the problem\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prime_sieve</span>(<span class=\"hljs-params\">num: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Returns a list with all prime numbers up to n.\r\n\r\n    &gt;&gt;&gt; prime_sieve(50)\r\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\r\n    &gt;&gt;&gt; prime_sieve(25)\r\n    [2, 3, 5, 7, 11, 13, 17, 19, 23]\r\n    &gt;&gt;&gt; prime_sieve(10)\r\n    [2, 3, 5, 7]\r\n    &gt;&gt;&gt; prime_sieve(9)\r\n    [2, 3, 5, 7]\r\n    &gt;&gt;&gt; prime_sieve(2)\r\n    [2]\r\n    &gt;&gt;&gt; prime_sieve(1)\r\n    []\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">if</span> num &lt;= <span class=\"hljs-number\">0</span>:\r\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{num}</span>: Invalid input, please enter a positive integer.&quot;</span>)\r\n\r\n    sieve = [<span class=\"hljs-literal\">True</span>] * (num + <span class=\"hljs-number\">1</span>)\r\n    prime = []\r\n    start = <span class=\"hljs-number\">2</span>\r\n    end = <span class=\"hljs-built_in\">int</span>(math.sqrt(num))\r\n\r\n    <span class=\"hljs-keyword\">while</span> start &lt;= end:\r\n        <span class=\"hljs-comment\"># If start is a prime</span>\r\n        <span class=\"hljs-keyword\">if</span> sieve[start] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n            prime.append(start)\r\n\r\n            <span class=\"hljs-comment\"># Set multiples of start be False</span>\r\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(start * start, num + <span class=\"hljs-number\">1</span>, start):\r\n                <span class=\"hljs-keyword\">if</span> sieve[i] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n                    sieve[i] = <span class=\"hljs-literal\">False</span>\r\n\r\n        start += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(end + <span class=\"hljs-number\">1</span>, num + <span class=\"hljs-number\">1</span>):\r\n        <span class=\"hljs-keyword\">if</span> sieve[j] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n            prime.append(j)\r\n\r\n    <span class=\"hljs-keyword\">return</span> prime\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-built_in\">print</span>(prime_sieve(<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter a positive integer: &quot;</span>).strip())))\r\n"
    },
    "javascript": {
      "dir": "Maths/SieveOfEratosthenes.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/SieveOfEratosthenes.js",
      "code": "<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sieveOfEratosthenes</span> = (<span class=\"hljs-params\">n</span>) =&gt; {\n  <span class=\"hljs-comment\">/*\n   * Calculates prime numbers till a number n\n   * :param n: Number upto which to calculate primes\n   * :return: A boolean list contaning only primes\n   */</span>\n  <span class=\"hljs-keyword\">const</span> primes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(n + <span class=\"hljs-number\">1</span>)\n  primes.<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// set all as true initially</span>\n  primes[<span class=\"hljs-number\">0</span>] = primes[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// Handling case for 0 and 1</span>\n  <span class=\"hljs-keyword\">const</span> sqrtn = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">ceil</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">sqrt</span>(n))\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt;= sqrtn; i++) {\n    <span class=\"hljs-keyword\">if</span> (primes[i]) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i * i; j &lt;= n; j += i) {\n        <span class=\"hljs-comment\">/*\n        Optimization.\n        Let j start from i * i, not 2 * i, because smaller multiples of i have been marked false.\n\n        For example, let i = 4.\n        We do not have to check from 8(4 * 2) to 12(4 * 3)\n        because they have been already marked false when i=2 and i=3.\n        */</span>\n        primes[j] = <span class=\"hljs-literal\">false</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> primes\n}\n\n<span class=\"hljs-keyword\">export</span> { sieveOfEratosthenes }\n"
    },
    "c-plus-plus": {
      "dir": "math/sieve_of_eratosthenes.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/sieve_of_eratosthenes.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Get list of prime numbers using Sieve of Eratosthenes\n * @details\n * Sieve of Eratosthenes is an algorithm that finds all the primes\n * between 2 and N.\n *\n * Time Complexity  : \\f$O(N \\cdot\\log \\log N)\\f$\n * &lt;br/&gt;Space Complexity : \\f$O(N)\\f$\n *\n * @see primes_up_to_billion.cpp prime_numbers.cpp\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * This is the function that finds the primes and eliminates the multiples.\n * Contains a common optimization to start eliminating multiples of\n * a prime p starting from p * p since all of the lower multiples\n * have been already eliminated.\n * @param N number of primes to check\n * @return is_prime a vector of `N + 1` booleans identifying if `i`^th number is a prime or not\n */</span>\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">sieve</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> N)</span> </span>{\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; <span class=\"hljs-title\">is_prime</span><span class=\"hljs-params\">(N + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>)</span></span>;\n    is_prime[<span class=\"hljs-number\">0</span>] = is_prime[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">2</span>; i * i &lt;= N; i++) {\n        <span class=\"hljs-keyword\">if</span> (is_prime[i]) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> j = i * i; j &lt;= N; j += i) {\n                is_prime[j] = <span class=\"hljs-literal\">false</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> is_prime;\n}\n\n<span class=\"hljs-comment\">/**\n * This function prints out the primes to STDOUT\n * @param N number of primes to check\n * @param is_prime a vector of `N + 1` booleans identifying if `i`^th number is a prime or not\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint32_t</span> N, <span class=\"hljs-keyword\">const</span> std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; &amp;is_prime)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint32_t</span> i = <span class=\"hljs-number\">2</span>; i &lt;= N; i++) {\n        <span class=\"hljs-keyword\">if</span> (is_prime[i]) {\n            std::cout &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&#x27; &#x27;</span>;\n        }\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * Test implementations\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">//                    0      1      2     3     4      5     6      7     8      9      10</span>\n  std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; ans{<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">false</span>};\n  <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">sieve</span>(<span class=\"hljs-number\">10</span>) == ans);\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">tests</span>();\n\n    <span class=\"hljs-type\">uint32_t</span> N = <span class=\"hljs-number\">100</span>;\n    std::vector&lt;<span class=\"hljs-type\">bool</span>&gt; is_prime = <span class=\"hljs-built_in\">sieve</span>(N);\n    <span class=\"hljs-built_in\">print</span>(N, is_prime);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Others/SieveOfEratosthenes.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/SieveOfEratosthenes.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@author</span> Varun Upadhyay (https://github.com/varunu28) */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SieveOfEratosthenes</span> {\n\n  <span class=\"hljs-comment\">/**\n   * This method implements the Sieve of Eratosthenes Algorithm\n   *\n   * <span class=\"hljs-doctag\">@param</span> n The number till which we have to check for prime Prints all the prime numbers till n\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">findPrimesTillN</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span> {\n    <span class=\"hljs-type\">int</span>[] arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\n      arr[i] = <span class=\"hljs-number\">1</span>;\n    }\n\n    arr[<span class=\"hljs-number\">0</span>] = arr[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i &lt;= Math.sqrt(n); i++) {\n      <span class=\"hljs-keyword\">if</span> (arr[i] == <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; i * j &lt;= n; j++) {\n          arr[i * j] = <span class=\"hljs-number\">0</span>;\n        }\n      }\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n + <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-keyword\">if</span> (arr[i] == <span class=\"hljs-number\">1</span>) {\n        System.out.print(i + <span class=\"hljs-string\">&quot; &quot;</span>);\n      }\n    }\n\n    System.out.println();\n  }\n\n  <span class=\"hljs-comment\">// Driver Program</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n\n    <span class=\"hljs-comment\">// Prints 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</span>\n    findPrimesTillN(n);\n  }\n}\n"
    },
    "dart": {
      "dir": "maths/sieve_of_eratosthenes.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/sieve_of_eratosthenes.dart",
      "code": "<span class=\"hljs-comment\">/*\n  * Source:\n  *   https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n  * \n  * Description:\n  *   Calculates prime numbers till a number n\n  * \n  * Time Complexity:\n  *   O(n log(log(n)))\n  */</span>\n\n<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt; sieve_of_eratosthenes(<span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-comment\">// Input: n: int</span>\n  <span class=\"hljs-comment\">// Output: is_prime: List&lt;bool&gt; denoting whether ith element is prime or not</span>\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt; is_prime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>.filled(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">true</span>);\n  is_prime[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">false</span>;\n  is_prime[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">false</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span>; i * i &lt;= n; i++) {\n    <span class=\"hljs-keyword\">if</span> (is_prime[i]) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = i * i; j &lt;= n; j += i) {\n        <span class=\"hljs-comment\">// mark all multiples of i as false</span>\n        is_prime[j] = <span class=\"hljs-keyword\">false</span>;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> is_prime;\n}\n\nmain() {\n  <span class=\"hljs-comment\">// Prints all the primes under 50</span>\n  <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">bool</span>&gt; primes = sieve_of_eratosthenes(<span class=\"hljs-number\">50</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt;= <span class=\"hljs-number\">50</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (primes[i]) {\n      <span class=\"hljs-built_in\">print</span>(i);\n    }\n  }\n}\n"
    },
    "julia": {
      "dir": "src/math/sieve_of_eratosthenes.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/sieve_of_eratosthenes.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nSieve of Eratosthenes is an algorithm for finding all the primes upto a limit `n`.\n\nReference:\n-https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> eratosthenes(n)\n    primes = fill(<span class=\"hljs-literal\">true</span>,n)\n    primes[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-literal\">false</span>\n    <span class=\"hljs-keyword\">for</span> p = <span class=\"hljs-number\">2</span>:n\n        primes[p] || <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">for</span> i = <span class=\"hljs-number\">2</span>:div(n,p)\n            primes[p*i] = <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    findall(primes)\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Other/SieveOfEratosthenes.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Other/SieveOfEratosthenes.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n<span class=\"hljs-keyword\">using</span> System.Numerics;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SieveOfEratosthenes</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     TODO.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;count&quot;&gt;</span>TODO. 2.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>TODO. 3.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;BigInteger&gt; <span class=\"hljs-title\">GetPrimeNumbers</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> count</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> output = <span class=\"hljs-keyword\">new</span> List&lt;BigInteger&gt;();\n            <span class=\"hljs-keyword\">for</span> (BigInteger n = <span class=\"hljs-number\">2</span>; output.Count &lt; count; n++)\n            {\n                <span class=\"hljs-keyword\">if</span> (output.All(x =&gt; n % x != <span class=\"hljs-number\">0</span>))\n                {\n                    output.Add(n);\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> output;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Varun Upadhyay",
      "email": "varun.u28@gmail.com",
      "commits": 1
    },
    {
      "name": "Ved Mahajan",
      "email": "vsmahajan2k@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Daniil Efimenko",
      "email": "dan.ef1999@gmail.com",
      "commits": 1
    },
    {
      "name": "utkarsh",
      "email": "ucponia@gmail.com",
      "commits": 1
    },
    {
      "name": "JimmyJoo",
      "email": "jimmyjoo1029@gmail.com",
      "commits": 1
    },
    {
      "name": "Samarth Jain",
      "email": "53353139+samjain2907@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 1
    },
    {
      "name": "obelisk0114",
      "email": "obelisk0114@yahoo.com.tw",
      "commits": 1
    },
    {
      "name": "Joyce",
      "email": "jycyeo@yahoo.com.sg",
      "commits": 1
    },
    {
      "name": "Farhan",
      "email": "farhankasmani956@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 2
    },
    {
      "name": "Ephraim Atta-Duncan",
      "email": "55143799+dephraiim@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 6
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}
