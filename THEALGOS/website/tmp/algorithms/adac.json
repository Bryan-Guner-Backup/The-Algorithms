{
  "slug": "adac",
  "name": "Adac",
  "categories": ["strings", "multiplestringmatching", "advancedahocorasick"],
  "body": {},
  "implementations": {
    "go": {
      "dir": "strings/multiple-string-matching/advanced-aho-corasick/adac.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/strings/multiple-string-matching/advanced-aho-corasick/adac.go",
      "code": "<span class=\"hljs-keyword\">package</span> advancedahocorasick\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;time&quot;</span>\n)\n\n<span class=\"hljs-comment\">// User defined.</span>\n<span class=\"hljs-comment\">// Set to true to print various extra stuff out (slows down the execution)</span>\n<span class=\"hljs-comment\">// Set to false for quick and quiet execution.</span>\n<span class=\"hljs-comment\">// const debugMode bool = true // <span class=\"hljs-doctag\">TODO:</span> very convoluted algorithm need time to read through it properly</span>\n\n<span class=\"hljs-comment\">// Result structure</span>\n<span class=\"hljs-keyword\">type</span> Result <span class=\"hljs-keyword\">struct</span> {\n\toccurrences <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>][]<span class=\"hljs-keyword\">int</span>\n}\n\n<span class=\"hljs-comment\">// Implementation of Advanced Aho-Corasick algorithm (Prefix based).</span>\n<span class=\"hljs-comment\">// Searches for a set of strings (patterns.txt) in text.txt.</span>\n<span class=\"hljs-comment\">// func main() {</span>\n<span class=\"hljs-comment\">// \tpatFile, err := ioutil.ReadFile(&quot;../patterns.txt&quot;)</span>\n<span class=\"hljs-comment\">// \tif err != nil {</span>\n<span class=\"hljs-comment\">// \t\tlog.Fatal(err)</span>\n<span class=\"hljs-comment\">// \t}</span>\n<span class=\"hljs-comment\">// \ttextFile, err := ioutil.ReadFile(&quot;../text.txt&quot;)</span>\n<span class=\"hljs-comment\">// \tif err != nil {</span>\n<span class=\"hljs-comment\">// \t\tlog.Fatal(err)</span>\n<span class=\"hljs-comment\">// \t}</span>\n<span class=\"hljs-comment\">// \tpatterns := strings.Split(string(patFile), &quot; &quot;)</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\nRunning: Advanced Aho-Corasick algorithm.\\n\\n&quot;)</span>\n<span class=\"hljs-comment\">// \tif debugMode == true {</span>\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;Searching for %d patterns/words:\\n&quot;, len(patterns))</span>\n<span class=\"hljs-comment\">// \t}</span>\n<span class=\"hljs-comment\">// \tfor i := 0; i &lt; len(patterns); i++ {</span>\n<span class=\"hljs-comment\">// \t\tif len(patterns[i]) &gt; len(textFile) {</span>\n<span class=\"hljs-comment\">// \t\t\tlog.Fatal(&quot;There is a pattern that is longer than text! Pattern number:&quot;, i+1)</span>\n<span class=\"hljs-comment\">// \t\t}</span>\n<span class=\"hljs-comment\">// \t\tif debugMode == true {</span>\n<span class=\"hljs-comment\">// \t\t\tfmt.Printf(&quot;%q &quot;, patterns[i])</span>\n<span class=\"hljs-comment\">// \t\t}</span>\n<span class=\"hljs-comment\">// \t}</span>\n<span class=\"hljs-comment\">// \tif debugMode == true {</span>\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;\\n\\nIn text (%d chars long): \\n%q\\n\\n&quot;, len(textFile), textFile)</span>\n<span class=\"hljs-comment\">// \t}</span>\n<span class=\"hljs-comment\">// \tr := ahoCorasick(string(textFile), patterns)</span>\n<span class=\"hljs-comment\">// \tfor key, value := range r.occurrences { //prints all occurrences of each pattern (if there was at least one)</span>\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;\\nThere were %d occurrences for word: %q at positions: &quot;, len(value), key)</span>\n<span class=\"hljs-comment\">// \t\tfor i := range value {</span>\n<span class=\"hljs-comment\">// \t\t\tfmt.Printf(&quot;%d&quot;, value[i])</span>\n<span class=\"hljs-comment\">// \t\t\tif i != len(value)-1 {</span>\n<span class=\"hljs-comment\">// \t\t\t\tfmt.Printf(&quot;, &quot;)</span>\n<span class=\"hljs-comment\">// \t\t\t}</span>\n<span class=\"hljs-comment\">// \t\t}</span>\n<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;.&quot;)</span>\n<span class=\"hljs-comment\">// \t}</span>\n<span class=\"hljs-comment\">// \treturn</span>\n<span class=\"hljs-comment\">// }</span>\n\n<span class=\"hljs-comment\">// AhoCorasick Function performing the Advanced Aho-Corasick alghoritm.</span>\n<span class=\"hljs-comment\">// Finds and prints occurrences of each pattern.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">AhoCorasick</span><span class=\"hljs-params\">(t <span class=\"hljs-keyword\">string</span>, p []<span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">Result</span></span> {\n\tstartTime := time.Now()\n\toccurrences := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>)\n\tac, f := BuildExtendedAc(p)\n\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\n\\nAC:\\n\\n&quot;)</span>\n\t<span class=\"hljs-comment\">// }</span>\n\tcurrent := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> pos := <span class=\"hljs-number\">0</span>; pos &lt; <span class=\"hljs-built_in\">len</span>(t); pos++ {\n\t\t<span class=\"hljs-keyword\">if</span> GetTransition(current, t[pos], ac) != <span class=\"hljs-number\">-1</span> {\n\t\t\tcurrent = GetTransition(current, t[pos], ac)\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tcurrent = <span class=\"hljs-number\">0</span>\n\t\t}\n\t\t_, ok := f[current]\n\t\t<span class=\"hljs-keyword\">if</span> ok {\n\t\t\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> f[current] {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> p[f[current][i]] == GetWord(pos-<span class=\"hljs-built_in\">len</span>(p[f[current][i]])+<span class=\"hljs-number\">1</span>, pos, t) { <span class=\"hljs-comment\">//check for word match</span>\n\t\t\t\t\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t\t\t\t\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;Occurrence at position %d, %q = %q\\n&quot;, pos-len(p[f[current][i]])+1, p[f[current][i]], p[f[current][i]])</span>\n\t\t\t\t\t<span class=\"hljs-comment\">// }</span>\n\t\t\t\t\tnewOccurrences := IntArrayCapUp(occurrences[f[current][i]])\n\t\t\t\t\toccurrences[f[current][i]] = newOccurrences\n\t\t\t\t\toccurrences[f[current][i]][<span class=\"hljs-built_in\">len</span>(newOccurrences)<span class=\"hljs-number\">-1</span>] = pos - <span class=\"hljs-built_in\">len</span>(p[f[current][i]]) + <span class=\"hljs-number\">1</span>\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telapsed := time.Since(startTime)\n\tfmt.Printf(<span class=\"hljs-string\">&quot;\\n\\nElapsed %f secs\\n&quot;</span>, elapsed.Seconds())\n\n\t<span class=\"hljs-keyword\">var</span> resultOccurrences = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>][]<span class=\"hljs-keyword\">int</span>)\n\t<span class=\"hljs-keyword\">for</span> key, value := <span class=\"hljs-keyword\">range</span> occurrences {\n\t\tresultOccurrences[p[key]] = value\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> Result{\n\t\tresultOccurrences,\n\t}\n}\n\n<span class=\"hljs-comment\">// BuildExtendedAc Functions that builds extended Aho Corasick automaton.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BuildExtendedAc</span><span class=\"hljs-params\">(p []<span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(acToReturn <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>, f <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>)</span></span> {\n\tacTrie, stateIsTerminal, f := ConstructTrie(p)\n\ts := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(stateIsTerminal)) <span class=\"hljs-comment\">//supply function</span>\n\ti := <span class=\"hljs-number\">0</span>                                 <span class=\"hljs-comment\">//root of acTrie</span>\n\tacToReturn = acTrie\n\ts[i] = <span class=\"hljs-number\">-1</span>\n\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\n\\nAC construction: \\n&quot;)</span>\n\t<span class=\"hljs-comment\">// }</span>\n\t<span class=\"hljs-keyword\">for</span> current := <span class=\"hljs-number\">1</span>; current &lt; <span class=\"hljs-built_in\">len</span>(stateIsTerminal); current++ {\n\t\to, parent := GetParent(current, acTrie)\n\t\tdown := s[parent]\n\t\t<span class=\"hljs-keyword\">for</span> StateExists(down, acToReturn) &amp;&amp; GetTransition(down, o, acToReturn) == <span class=\"hljs-number\">-1</span> {\n\t\t\tdown = s[down]\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> StateExists(down, acToReturn) {\n\t\t\ts[current] = GetTransition(down, o, acToReturn)\n\t\t\t<span class=\"hljs-keyword\">if</span> stateIsTerminal[s[current]] {\n\t\t\t\tstateIsTerminal[current] = <span class=\"hljs-literal\">true</span>\n\t\t\t\tf[current] = ArrayUnion(f[current], f[s[current]]) <span class=\"hljs-comment\">//F(Current) &lt;- F(Current) union F(S(Current))</span>\n\t\t\t\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t\t\t\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot; f[%d] set to: &quot;, current)</span>\n\t\t\t\t<span class=\"hljs-comment\">// \tfor i := range f[current] {</span>\n\t\t\t\t<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;%d\\n&quot;, f[current][i])</span>\n\t\t\t\t<span class=\"hljs-comment\">// \t}</span>\n\t\t\t\t<span class=\"hljs-comment\">// }</span>\n\t\t\t}\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\ts[current] = i <span class=\"hljs-comment\">//initial state?</span>\n\t\t}\n\t}\n\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\nsupply function: \\n&quot;)</span>\n\t<span class=\"hljs-comment\">// \tfor i := range s {</span>\n\t<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;\\ns[%d]=%d&quot;, i, s[i])</span>\n\t<span class=\"hljs-comment\">// \t}</span>\n\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\n\\n&quot;)</span>\n\t<span class=\"hljs-comment\">// \tfor i, j := range f {</span>\n\t<span class=\"hljs-comment\">// \t\tfmt.Printf(&quot;f[%d]=&quot;, i)</span>\n\t<span class=\"hljs-comment\">// \t\tfor k := range j {</span>\n\t<span class=\"hljs-comment\">// \t\t\tfmt.Printf(&quot;%d\\n&quot;, j[k])</span>\n\t<span class=\"hljs-comment\">// \t\t}</span>\n\t<span class=\"hljs-comment\">// \t}</span>\n\t<span class=\"hljs-comment\">// }</span>\n\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\n\\nAdAC completion: \\n&quot;)</span>\n\t<span class=\"hljs-comment\">// }</span>\n\t<span class=\"hljs-comment\">// advanced Aho-Corasick part</span>\n\ta := ComputeAlphabet(p) <span class=\"hljs-comment\">// concat of all patterns in p</span>\n\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-keyword\">range</span> a {\n\t\t<span class=\"hljs-keyword\">if</span> GetTransition(i, a[j], acToReturn) == <span class=\"hljs-number\">-1</span> {\n\t\t\tCreateTransition(i, a[j], i, acToReturn)\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">for</span> current := <span class=\"hljs-number\">1</span>; current &lt; <span class=\"hljs-built_in\">len</span>(stateIsTerminal); current++ {\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-keyword\">range</span> a {\n\t\t\t<span class=\"hljs-keyword\">if</span> GetTransition(current, a[j], acToReturn) == <span class=\"hljs-number\">-1</span> {\n\t\t\t\tCreateTransition(current, a[j], GetTransition(s[current], a[j], acToReturn), acToReturn)\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> acToReturn, f\n}\n\n<span class=\"hljs-comment\">// ConstructTrie Function that constructs Trie as an automaton for a set of reversed &amp; trimmed strings.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ConstructTrie</span><span class=\"hljs-params\">(p []<span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(trie <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>, stateIsTerminal []<span class=\"hljs-keyword\">bool</span>, f <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>)</span></span> {\n\ttrie = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>)\n\tstateIsTerminal = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">bool</span>, <span class=\"hljs-number\">1</span>)\n\tf = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>][]<span class=\"hljs-keyword\">int</span>)\n\tstate := <span class=\"hljs-number\">1</span>\n\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\n\\nTrie construction: \\n&quot;)</span>\n\t<span class=\"hljs-comment\">// }</span>\n\tCreateNewState(<span class=\"hljs-number\">0</span>, trie)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(p); i++ {\n\t\tcurrent := <span class=\"hljs-number\">0</span>\n\t\tj := <span class=\"hljs-number\">0</span>\n\t\t<span class=\"hljs-keyword\">for</span> j &lt; <span class=\"hljs-built_in\">len</span>(p[i]) &amp;&amp; GetTransition(current, p[i][j], trie) != <span class=\"hljs-number\">-1</span> {\n\t\t\tcurrent = GetTransition(current, p[i][j], trie)\n\t\t\tj++\n\t\t}\n\t\t<span class=\"hljs-keyword\">for</span> j &lt; <span class=\"hljs-built_in\">len</span>(p[i]) {\n\t\t\tstateIsTerminal = BoolArrayCapUp(stateIsTerminal)\n\t\t\tCreateNewState(state, trie)\n\t\t\tstateIsTerminal[state] = <span class=\"hljs-literal\">false</span>\n\t\t\tCreateTransition(current, p[i][j], state, trie)\n\t\t\tcurrent = state\n\t\t\tj++\n\t\t\tstate++\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> stateIsTerminal[current] {\n\t\t\tnewArray := IntArrayCapUp(f[current])\n\t\t\tnewArray[<span class=\"hljs-built_in\">len</span>(newArray)<span class=\"hljs-number\">-1</span>] = i\n\t\t\tf[current] = newArray <span class=\"hljs-comment\">// F(Current) &lt;- F(Current) union {i}</span>\n\t\t\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t\t\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot; and %d&quot;, i)</span>\n\t\t\t<span class=\"hljs-comment\">// }</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tstateIsTerminal[current] = <span class=\"hljs-literal\">true</span>\n\t\t\tf[current] = []<span class=\"hljs-keyword\">int</span>{i} <span class=\"hljs-comment\">// F(Current) &lt;- {i}</span>\n\t\t\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t\t\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\n%d is terminal for word number %d&quot;, current, i)</span>\n\t\t\t<span class=\"hljs-comment\">// }</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> trie, stateIsTerminal, f\n}\n\n<span class=\"hljs-comment\">// Contains Returns &#x27;true&#x27; if arry of int&#x27;s &#x27;s&#x27; contains int &#x27;e&#x27;, &#x27;false&#x27; otherwise.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Contains</span><span class=\"hljs-params\">(s []<span class=\"hljs-keyword\">int</span>, e <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> {\n\t<span class=\"hljs-keyword\">for</span> _, a := <span class=\"hljs-keyword\">range</span> s {\n\t\t<span class=\"hljs-keyword\">if</span> a == e {\n\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n}\n\n<span class=\"hljs-comment\">// GetWord Function that returns word found in text &#x27;t&#x27; at position range &#x27;begin&#x27; to &#x27;end&#x27;.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetWord</span><span class=\"hljs-params\">(begin, end <span class=\"hljs-keyword\">int</span>, t <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">for</span> end &gt;= <span class=\"hljs-built_in\">len</span>(t) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>\n\t}\n\td := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">uint8</span>, end-begin+<span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-keyword\">for</span> j, i := <span class=\"hljs-number\">0</span>, begin; i &lt;= end; i, j = i+<span class=\"hljs-number\">1</span>, j+<span class=\"hljs-number\">1</span> {\n\t\td[j] = t[i]\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">string</span>(d)\n}\n\n<span class=\"hljs-comment\">// ComputeAlphabet Function that returns string of all the possible characters in given patterns.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ComputeAlphabet</span><span class=\"hljs-params\">(p []<span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(s <span class=\"hljs-keyword\">string</span>)</span></span> {\n\ts = p[<span class=\"hljs-number\">0</span>]\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-built_in\">len</span>(p); i++ {\n\t\ts = s + p[i]\n\t}\n\t<span class=\"hljs-keyword\">return</span> s\n}\n\n<span class=\"hljs-comment\">// IntArrayCapUp Dynamically increases an array size of int&#x27;s by 1.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">IntArrayCapUp</span><span class=\"hljs-params\">(old []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-built_in\">new</span> []<span class=\"hljs-keyword\">int</span>)</span></span> {\n\t<span class=\"hljs-built_in\">new</span> = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">cap</span>(old)+<span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-built_in\">copy</span>(<span class=\"hljs-built_in\">new</span>, old) <span class=\"hljs-comment\">//copy(dst,src)</span>\n\t<span class=\"hljs-comment\">// old = new</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">new</span>\n}\n\n<span class=\"hljs-comment\">// BoolArrayCapUp Dynamically increases an array size of bool&#x27;s by 1.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">BoolArrayCapUp</span><span class=\"hljs-params\">(old []<span class=\"hljs-keyword\">bool</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-built_in\">new</span> []<span class=\"hljs-keyword\">bool</span>)</span></span> {\n\t<span class=\"hljs-built_in\">new</span> = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">bool</span>, <span class=\"hljs-built_in\">cap</span>(old)+<span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-built_in\">copy</span>(<span class=\"hljs-built_in\">new</span>, old)\n\t<span class=\"hljs-comment\">// old = new</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">new</span>\n}\n\n<span class=\"hljs-comment\">// ArrayUnion Concats two arrays of int&#x27;s into one.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ArrayUnion</span><span class=\"hljs-params\">(to, from []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(concat []<span class=\"hljs-keyword\">int</span>)</span></span> {\n\tconcat = to\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> from {\n\t\t<span class=\"hljs-keyword\">if</span> !Contains(concat, from[i]) {\n\t\t\tconcat = IntArrayCapUp(concat)\n\t\t\tconcat[<span class=\"hljs-built_in\">len</span>(concat)<span class=\"hljs-number\">-1</span>] = from[i]\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> concat\n}\n\n<span class=\"hljs-comment\">// GetParent Function that finds the first previous state of a state and returns it.</span>\n<span class=\"hljs-comment\">// Used for trie where there is only one parent.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetParent</span><span class=\"hljs-params\">(state <span class=\"hljs-keyword\">int</span>, at <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">uint8</span>, <span class=\"hljs-keyword\">int</span>)</span></span> {\n\t<span class=\"hljs-keyword\">for</span> beginState, transitions := <span class=\"hljs-keyword\">range</span> at {\n\t\t<span class=\"hljs-keyword\">for</span> c, endState := <span class=\"hljs-keyword\">range</span> transitions {\n\t\t\t<span class=\"hljs-keyword\">if</span> endState == state {\n\t\t\t\t<span class=\"hljs-keyword\">return</span> c, beginState\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">//unreachable</span>\n}\n\n<span class=\"hljs-comment\">// CreateNewState Automaton function for creating a new state &#x27;state&#x27;.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CreateNewState</span><span class=\"hljs-params\">(state <span class=\"hljs-keyword\">int</span>, at <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>)</span></span> {\n\tat[state] = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>)\n\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\ncreated state %d&quot;, state)</span>\n\t<span class=\"hljs-comment\">// }</span>\n}\n\n<span class=\"hljs-comment\">// CreateTransition Creates a transition for function σ(state,letter) = end.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CreateTransition</span><span class=\"hljs-params\">(fromState <span class=\"hljs-keyword\">int</span>, overChar <span class=\"hljs-keyword\">uint8</span>, toState <span class=\"hljs-keyword\">int</span>, at <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>)</span></span> {\n\tat[fromState][overChar] = toState\n\t<span class=\"hljs-comment\">// if debugMode == true {</span>\n\t<span class=\"hljs-comment\">// \tfmt.Printf(&quot;\\n    σ(%d,%c)=%d;&quot;, fromState, overChar, toState)</span>\n\t<span class=\"hljs-comment\">// }</span>\n}\n\n<span class=\"hljs-comment\">// GetTransition Returns ending state for transition σ(fromState,overChar), &#x27;-1&#x27; if there is none.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">GetTransition</span><span class=\"hljs-params\">(fromState <span class=\"hljs-keyword\">int</span>, overChar <span class=\"hljs-keyword\">uint8</span>, at <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(toState <span class=\"hljs-keyword\">int</span>)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> !StateExists(fromState, at) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\t}\n\ttoState, ok := at[fromState][overChar]\n\t<span class=\"hljs-keyword\">if</span> !ok {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> toState\n}\n\n<span class=\"hljs-comment\">// StateExists Checks if state &#x27;state&#x27; exists. Returns &#x27;true&#x27; if it does, &#x27;false&#x27; otherwise.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">StateExists</span><span class=\"hljs-params\">(state <span class=\"hljs-keyword\">int</span>, at <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">int</span>]<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">uint8</span>]<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">bool</span></span> {\n\t_, ok := at[state]\n\t<span class=\"hljs-keyword\">if</span> !ok || state == <span class=\"hljs-number\">-1</span> || at[state] == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n}\n"
    }
  },
  "contributors": [
    {
      "name": "halafi",
      "email": "filiphalas74@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
