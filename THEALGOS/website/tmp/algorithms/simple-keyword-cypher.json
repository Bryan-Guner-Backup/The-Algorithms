{
  "slug": "simple-keyword-cypher",
  "name": "Simple Keyword Cypher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/simple_keyword_cypher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/simple_keyword_cypher.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove_duplicates</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Removes duplicate alphabetic characters in a keyword (letter is ignored after its\n        first appearance).\n    :param key: Keyword to use\n    :return: String with duplicates removed\n    &gt;&gt;&gt; remove_duplicates(&#x27;Hello World!!&#x27;)\n    &#x27;Helo Wrd&#x27;\n    &quot;&quot;&quot;</span>\n\n    key_no_dups = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> ch <span class=\"hljs-keyword\">in</span> key:\n        <span class=\"hljs-keyword\">if</span> ch == <span class=\"hljs-string\">&quot; &quot;</span> <span class=\"hljs-keyword\">or</span> ch <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> key_no_dups <span class=\"hljs-keyword\">and</span> ch.isalpha():\n            key_no_dups += ch\n    <span class=\"hljs-keyword\">return</span> key_no_dups\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_cipher_map</span>(<span class=\"hljs-params\">key: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns a cipher map given a keyword.\n    :param key: keyword to use\n    :return: dictionary cipher map\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Create alphabet list</span>\n    alphabet = [<span class=\"hljs-built_in\">chr</span>(i + <span class=\"hljs-number\">65</span>) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">26</span>)]\n    <span class=\"hljs-comment\"># Remove duplicate characters from key</span>\n    key = remove_duplicates(key.upper())\n    offset = <span class=\"hljs-built_in\">len</span>(key)\n    <span class=\"hljs-comment\"># First fill cipher with key characters</span>\n    cipher_alphabet = {alphabet[i]: char <span class=\"hljs-keyword\">for</span> i, char <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(key)}\n    <span class=\"hljs-comment\"># Then map remaining characters in alphabet to</span>\n    <span class=\"hljs-comment\"># the alphabet from the beginning</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(cipher_alphabet), <span class=\"hljs-number\">26</span>):\n        char = alphabet[i - offset]\n        <span class=\"hljs-comment\"># Ensure we are not mapping letters to letters previously mapped</span>\n        <span class=\"hljs-keyword\">while</span> char <span class=\"hljs-keyword\">in</span> key:\n            offset -= <span class=\"hljs-number\">1</span>\n            char = alphabet[i - offset]\n        cipher_alphabet[alphabet[i]] = char\n    <span class=\"hljs-keyword\">return</span> cipher_alphabet\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encipher</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">str</span>, cipher_map: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Enciphers a message given a cipher map.\n    :param message: Message to encipher\n    :param cipher_map: Cipher map\n    :return: enciphered string\n    &gt;&gt;&gt; encipher(&#x27;Hello World!!&#x27;, create_cipher_map(&#x27;Goodbye!!&#x27;))\n    &#x27;CYJJM VMQJB!!&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(cipher_map.get(ch, ch) <span class=\"hljs-keyword\">for</span> ch <span class=\"hljs-keyword\">in</span> message.upper())\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decipher</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">str</span>, cipher_map: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Deciphers a message given a cipher map\n    :param message: Message to decipher\n    :param cipher_map: Dictionary mapping to use\n    :return: Deciphered string\n    &gt;&gt;&gt; cipher_map = create_cipher_map(&#x27;Goodbye!!&#x27;)\n    &gt;&gt;&gt; decipher(encipher(&#x27;Hello World!!&#x27;, cipher_map), cipher_map)\n    &#x27;HELLO WORLD!!&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Reverse our cipher mappings</span>\n    rev_cipher_map = {v: k <span class=\"hljs-keyword\">for</span> k, v <span class=\"hljs-keyword\">in</span> cipher_map.items()}\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(rev_cipher_map.get(ch, ch) <span class=\"hljs-keyword\">for</span> ch <span class=\"hljs-keyword\">in</span> message.upper())\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Handles I/O\n    :return: void\n    &quot;&quot;&quot;</span>\n    message = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter message to encode or decode: &quot;</span>).strip()\n    key = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter keyword: &quot;</span>).strip()\n    option = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Encipher or decipher? E/D:&quot;</span>).strip()[<span class=\"hljs-number\">0</span>].lower()\n    <span class=\"hljs-keyword\">try</span>:\n        func = {<span class=\"hljs-string\">&quot;e&quot;</span>: encipher, <span class=\"hljs-string\">&quot;d&quot;</span>: decipher}[option]\n    <span class=\"hljs-keyword\">except</span> KeyError:\n        <span class=\"hljs-keyword\">raise</span> KeyError(<span class=\"hljs-string\">&quot;invalid input option&quot;</span>)\n    cipher_map = create_cipher_map(key)\n    <span class=\"hljs-built_in\">print</span>(func(message, cipher_map))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "achance6",
      "email": "45263295+achance6@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
