{
  "slug": "strand-sort",
  "name": "Strand Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/strand_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/strand_sort.py",
      "code": "<span class=\"hljs-keyword\">import</span> operator\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">strand_sort</span>(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">list</span>, reverse: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span>, solution: <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Strand sort implementation\n    source: https://en.wikipedia.org/wiki/Strand_sort\n\n    :param arr: Unordered input list\n    :param reverse: Descent ordering flag\n    :param solution: Ordered items container\n\n    Examples:\n    &gt;&gt;&gt; strand_sort([4, 2, 5, 3, 0, 1])\n    [0, 1, 2, 3, 4, 5]\n\n    &gt;&gt;&gt; strand_sort([4, 2, 5, 3, 0, 1], reverse=True)\n    [5, 4, 3, 2, 1, 0]\n    &quot;&quot;&quot;</span>\n    _operator = operator.lt <span class=\"hljs-keyword\">if</span> reverse <span class=\"hljs-keyword\">else</span> operator.gt\n    solution = solution <span class=\"hljs-keyword\">or</span> []\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> arr:\n        <span class=\"hljs-keyword\">return</span> solution\n\n    sublist = [arr.pop(<span class=\"hljs-number\">0</span>)]\n    <span class=\"hljs-keyword\">for</span> i, item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(arr):\n        <span class=\"hljs-keyword\">if</span> _operator(item, sublist[-<span class=\"hljs-number\">1</span>]):\n            sublist.append(item)\n            arr.pop(i)\n\n    <span class=\"hljs-comment\">#  merging sublist into solution list</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> solution:\n        solution.extend(sublist)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">while</span> sublist:\n            item = sublist.pop(<span class=\"hljs-number\">0</span>)\n            <span class=\"hljs-keyword\">for</span> i, xx <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(solution):\n                <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> _operator(item, xx):\n                    solution.insert(i, item)\n                    <span class=\"hljs-keyword\">break</span>\n            <span class=\"hljs-keyword\">else</span>:\n                solution.append(item)\n\n    strand_sort(arr, reverse, solution)\n    <span class=\"hljs-keyword\">return</span> solution\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">assert</span> strand_sort([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]) == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n    <span class=\"hljs-keyword\">assert</span> strand_sort([<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], reverse=<span class=\"hljs-literal\">True</span>) == [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\n"
    },
    "c-plus-plus": {
      "dir": "sorting/strand_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/strand_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file strand_sort.cpp\n * @brief Implementation of [Strand Sort](https://en.wikipedia.org/wiki/Strand_sort) algorithm.\n *\n * @details\n * Strand Sort is a sorting algorithm that works in \\f$O(n)\\f$ time if list is already sorted and works in \\f$O(n^2)\\f$ in worst case.\n * \n * It is passed over the array to be sorted once and the ascending (sequential) numbers are taken.\n * After the first iteration, the sequential sub-array is put on the empty sorted array.\n * The main sequence is passed over again and a new sub-sequence is created in order.\n * Now that the sorted array is not empty, the newly extracted substring is merged with the sorted array.\n * Repeat types 3 and 4 until the sub-sequence and main sequence are empty.\n * \n * @author [Mertcan Davulcu](https://github.com/mertcandav)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;list&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n    <span class=\"hljs-comment\">/**\n    * @namespace strand\n    * @brief Functions for [Strand Sort](https://en.wikipedia.org/wiki/Strand_sort) algorithm\n    */</span>\n    <span class=\"hljs-keyword\">namespace</span> strand {\n        <span class=\"hljs-comment\">/**\n        * @brief Apply sorting\n        * @tparam element type of list\n        * @param lst List to be sorted\n        * @returns Sorted list&lt;T&gt; instance\n        */</span>\n        <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n        <span class=\"hljs-function\">std::list&lt;T&gt; <span class=\"hljs-title\">strand_sort</span><span class=\"hljs-params\">(std::list&lt;T&gt; lst)</span> </span>{\n            <span class=\"hljs-keyword\">if</span> (lst.<span class=\"hljs-built_in\">size</span>() &lt; <span class=\"hljs-number\">2</span>) { <span class=\"hljs-comment\">// Returns list if empty or contains only one element</span>\n                <span class=\"hljs-keyword\">return</span> lst; <span class=\"hljs-comment\">// Returns list</span>\n            }\n            std::list&lt;T&gt; result; <span class=\"hljs-comment\">// Define new &quot;result&quot; named list instance.</span>\n            std::list&lt;T&gt; sorted; <span class=\"hljs-comment\">// Define new &quot;sorted&quot; named list instance.</span>\n            <span class=\"hljs-keyword\">while</span>(!lst.<span class=\"hljs-built_in\">empty</span>()) <span class=\"hljs-comment\">/* if lst is not empty */</span> {\n                sorted.<span class=\"hljs-built_in\">push_back</span>(lst.<span class=\"hljs-built_in\">front</span>()); <span class=\"hljs-comment\">// Adds the first element of &quot;lst&quot; list to the bottom of the &quot;sorted&quot; list.</span>\n                lst.<span class=\"hljs-built_in\">pop_front</span>(); <span class=\"hljs-comment\">// Remove first element of &quot;lst&quot; list.</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> it = lst.<span class=\"hljs-built_in\">begin</span>(); it != lst.<span class=\"hljs-built_in\">end</span>(); ) { <span class=\"hljs-comment\">// Return the loop as long as the current iterator is not equal to the last literator of the &quot;lst&quot; list.</span>\n                    <span class=\"hljs-keyword\">if</span> (sorted.<span class=\"hljs-built_in\">back</span>() &lt;= *it) { <span class=\"hljs-comment\">// If the last reference of the &quot;sorted&quot; list is less than or equal to the current iterator reference.</span>\n                        sorted.<span class=\"hljs-built_in\">push_back</span>(*it); <span class=\"hljs-comment\">// Adds the iterator retrieved in the loop under the &quot;sorted&quot; list.</span>\n                        it = lst.<span class=\"hljs-built_in\">erase</span>(it); <span class=\"hljs-comment\">// Deletes the element with the current iterator and assigns the deleted element to the iterator.</span>\n                    } <span class=\"hljs-keyword\">else</span> {\n                        it++; <span class=\"hljs-comment\">// Next iterator.</span>\n                    }\n                }\n                result.<span class=\"hljs-built_in\">merge</span>(sorted); <span class=\"hljs-comment\">// Merge &quot;result&quot; list with &quot;sorted&quot; list.</span>\n            }\n            <span class=\"hljs-keyword\">return</span> result; <span class=\"hljs-comment\">// Returns sorted list</span>\n        }\n    }  <span class=\"hljs-comment\">// namespace strand</span>\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function for testing\n * @return N/A\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::list&lt;<span class=\"hljs-type\">int</span>&gt; lst = { <span class=\"hljs-number\">-333</span>, <span class=\"hljs-number\">525</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">94</span>, <span class=\"hljs-number\">52</span>, <span class=\"hljs-number\">33</span> };\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Before: &quot;</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> item: lst) {\n        std::cout &lt;&lt; item &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n\n    lst = sorting::strand::<span class=\"hljs-built_in\">strand_sort</span>(lst); <span class=\"hljs-comment\">// Sort list.</span>\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nAfter: &quot;</span>;\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> item: lst) {\n        std::cout &lt;&lt; item &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
