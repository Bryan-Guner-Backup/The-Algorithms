{
  "slug": "lerp",
  "name": "Lerp",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/lerp.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/lerp.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">lerp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> k0, <span class=\"hljs-type\">float</span> k1, <span class=\"hljs-type\">float</span> t)</span> { <span class=\"hljs-keyword\">return</span> k0 + t * (k1 - k0); }\n\n<span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">lerp_precise</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> k0, <span class=\"hljs-type\">int</span> k1, <span class=\"hljs-type\">float</span> t)</span> { <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span> - t) * k0 + t * k1; }\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">float</span> start = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">float</span> finish = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-type\">float</span> steps = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Input a number, this is the bigger bound of the lerp:\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%f&quot;</span>, &amp;finish);\n\n    <span class=\"hljs-built_in\">printf</span>(\n        <span class=\"hljs-string\">&quot;Input a number, this is in how many steps you want to divide the &quot;</span>\n        <span class=\"hljs-string\">&quot;lerp:\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%f&quot;</span>, &amp;steps);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; steps + <span class=\"hljs-number\">1</span>; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%f\\n&quot;</span>, lerp(start, finish, i / steps));\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
