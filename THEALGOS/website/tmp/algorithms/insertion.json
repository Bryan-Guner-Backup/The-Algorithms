{
  "slug": "insertion",
  "name": "Insertion",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "rust": {
      "dir": "src/sorting/insertion.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/insertion.rs",
      "code": "<span class=\"hljs-keyword\">use</span> std::cmp;\n\n<span class=\"hljs-meta\">#[allow(dead_code)]</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">insertion_sort</span>&lt;T&gt;(arr: &amp;[T]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;T&gt;\n<span class=\"hljs-keyword\">where</span>\n    T: cmp::<span class=\"hljs-built_in\">PartialEq</span> + cmp::<span class=\"hljs-built_in\">PartialOrd</span> + <span class=\"hljs-built_in\">Clone</span>,\n{\n    <span class=\"hljs-comment\">// The resulting vector should contain the same amount of elements as</span>\n    <span class=\"hljs-comment\">// the slice that is being sorted, so enough room is preallocated</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">result</span>: <span class=\"hljs-type\">Vec</span>&lt;T&gt; = Vec::<span class=\"hljs-title function_ invoke__\">with_capacity</span>(arr.<span class=\"hljs-title function_ invoke__\">len</span>());\n\n    <span class=\"hljs-comment\">// Iterate over the elements to sort and</span>\n    <span class=\"hljs-comment\">// put a clone of the element to insert in elem.</span>\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">elem</span> <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">cloned</span>() {\n        <span class=\"hljs-comment\">// How many elements have already been inserted?</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n_inserted</span> = result.<span class=\"hljs-title function_ invoke__\">len</span>();\n\n        <span class=\"hljs-comment\">// Loop over the inserted elements and one more index.</span>\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..=n_inserted {\n            <span class=\"hljs-comment\">// If at the end or result[i] is larger than the current element,</span>\n            <span class=\"hljs-comment\">// we have found the right spot:</span>\n            <span class=\"hljs-keyword\">if</span> i == n_inserted || result[i] &gt; elem {\n                <span class=\"hljs-comment\">// Insert the element at i,</span>\n                <span class=\"hljs-comment\">// move the rest to higher indexes:</span>\n                result.<span class=\"hljs-title function_ invoke__\">insert</span>(i, elem);\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n\n    result\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;Vec::&lt;<span class=\"hljs-type\">u8</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">already_sorted</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">odd_number_of_elements</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">repeated_elements</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">res</span> = <span class=\"hljs-title function_ invoke__\">insertion_sort</span>(&amp;<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>]);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>, <span class=\"hljs-number\">542</span>]);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Sebastian Andersson",
      "email": "sebastian@bittr.nu",
      "commits": 1
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
