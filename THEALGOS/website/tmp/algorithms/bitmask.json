{
  "slug": "bitmask",
  "name": "Bitmask",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming/bitmask.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/bitmask.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n\nThis is a Python implementation for questions involving task assignments between people.\nHere Bitmasking and DP are used for solving this.\n\nQuestion :-\nWe have N tasks and M people. Each person in M can do only certain of these tasks. Also\na person can do only one task and a task is performed only by one person.\nFind the total no of ways in which the tasks can be distributed.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> defaultdict\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AssignmentUsingBitmask</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, task_performed, total</span>):\n\n        self.total_tasks = total  <span class=\"hljs-comment\"># total no of tasks (N)</span>\n\n        <span class=\"hljs-comment\"># DP table will have a dimension of (2^M)*N</span>\n        <span class=\"hljs-comment\"># initially all values are set to -1</span>\n        self.dp = [\n            [-<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(total + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span> ** <span class=\"hljs-built_in\">len</span>(task_performed))\n        ]\n\n        self.task = defaultdict(<span class=\"hljs-built_in\">list</span>)  <span class=\"hljs-comment\"># stores the list of persons for each task</span>\n\n        <span class=\"hljs-comment\"># final_mask is used to check if all persons are included by setting all bits</span>\n        <span class=\"hljs-comment\"># to 1</span>\n        self.final_mask = (<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-built_in\">len</span>(task_performed)) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">CountWaysUtil</span>(<span class=\"hljs-params\">self, mask, task_no</span>):\n\n        <span class=\"hljs-comment\"># if mask == self.finalmask all persons are distributed tasks, return 1</span>\n        <span class=\"hljs-keyword\">if</span> mask == self.final_mask:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># if not everyone gets the task and no more tasks are available, return 0</span>\n        <span class=\"hljs-keyword\">if</span> task_no &gt; self.total_tasks:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\"># if case already considered</span>\n        <span class=\"hljs-keyword\">if</span> self.dp[mask][task_no] != -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">return</span> self.dp[mask][task_no]\n\n        <span class=\"hljs-comment\"># Number of ways when we don&#x27;t this task in the arrangement</span>\n        total_ways_util = self.CountWaysUtil(mask, task_no + <span class=\"hljs-number\">1</span>)\n\n        <span class=\"hljs-comment\"># now assign the tasks one by one to all possible persons and recursively</span>\n        <span class=\"hljs-comment\"># assign for the remaining tasks.</span>\n        <span class=\"hljs-keyword\">if</span> task_no <span class=\"hljs-keyword\">in</span> self.task:\n            <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> self.task[task_no]:\n\n                <span class=\"hljs-comment\"># if p is already given a task</span>\n                <span class=\"hljs-keyword\">if</span> mask &amp; (<span class=\"hljs-number\">1</span> &lt;&lt; p):\n                    <span class=\"hljs-keyword\">continue</span>\n\n                <span class=\"hljs-comment\"># assign this task to p and change the mask value. And recursively</span>\n                <span class=\"hljs-comment\"># assign tasks with the new mask value.</span>\n                total_ways_util += self.CountWaysUtil(mask | (<span class=\"hljs-number\">1</span> &lt;&lt; p), task_no + <span class=\"hljs-number\">1</span>)\n\n        <span class=\"hljs-comment\"># save the value.</span>\n        self.dp[mask][task_no] = total_ways_util\n\n        <span class=\"hljs-keyword\">return</span> self.dp[mask][task_no]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">countNoOfWays</span>(<span class=\"hljs-params\">self, task_performed</span>):\n\n        <span class=\"hljs-comment\"># Store the list of persons for each task</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(task_performed)):\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> task_performed[i]:\n                self.task[j].append(i)\n\n        <span class=\"hljs-comment\"># call the function to fill the DP table, final answer is stored in dp[0][1]</span>\n        <span class=\"hljs-keyword\">return</span> self.CountWaysUtil(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n\n    total_tasks = <span class=\"hljs-number\">5</span>  <span class=\"hljs-comment\"># total no of tasks (the value of N)</span>\n\n    <span class=\"hljs-comment\"># the list of tasks that can be done by M persons.</span>\n    task_performed = [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]\n    <span class=\"hljs-built_in\">print</span>(\n        AssignmentUsingBitmask(task_performed, total_tasks).countNoOfWays(\n            task_performed\n        )\n    )\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    For the particular example the tasks can be distributed as\n    (1,2,3), (1,2,4), (1,5,3), (1,5,4), (3,1,4),\n    (3,2,4), (3,5,4), (4,1,3), (4,2,3), (4,5,3)\n    total 10\n    &quot;&quot;&quot;</span>\n"
    }
  },
  "contributors": [
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aditya Haridas Menon",
      "email": "adityaharidas.m16@iiits.in",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
