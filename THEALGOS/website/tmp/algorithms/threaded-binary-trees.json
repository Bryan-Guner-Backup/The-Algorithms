{
  "slug": "threaded-binary-trees",
  "name": "Threaded Binary Trees",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/binary_trees/threaded_binary_trees.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/binary_trees/threaded_binary_trees.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * \\brief This file is a simple implementation of a Threaded Binary Tree\n *\n * Threaded Binary Tree is a binary tree variant in which all left child\n * pointers that are NULL (in Linked list representation) point to its\n * in-order predecessor, and all right child pointers that are NULL\n * (in Linked list representation) point to its in-order successor.\n * It has the following functionalities:\n * - Insertion\n * - Search\n * - Deletion\n * - Listing of node keys inorder,preorder,postorder\n *\n * -see binary_search_tree.c\n *\n * \\author [Amitha Nayak](https://github.com/amitnayakblr)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Node, the basic data structure of the tree\n */</span>\n<span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> data;           <span class=\"hljs-comment\">/**&lt; stores the number */</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">llink</span>;</span> <span class=\"hljs-comment\">/**&lt; link to left child */</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Node</span> *<span class=\"hljs-title\">rlink</span>;</span> <span class=\"hljs-comment\">/**&lt; link to right child */</span>\n} node;\n\n<span class=\"hljs-comment\">/**\n * creates a new node\n * param[in] data value to be inserted\n * \\returns a pointer to the new node\n */</span>\nnode *<span class=\"hljs-title function_\">create_node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span>\n{\n    node *ptr = (node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(node));\n    ptr-&gt;rlink = ptr-&gt;llink = <span class=\"hljs-literal\">NULL</span>;\n    ptr-&gt;data = data;\n    <span class=\"hljs-keyword\">return</span> ptr;\n}\n\n<span class=\"hljs-comment\">/**\n * inserts a node into the tree\n * param[in,out] root pointer to node pointer to the topmost node of the tree\n * param[in] data value to be inserted into the tree\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">insert_bt</span><span class=\"hljs-params\">(node **root, <span class=\"hljs-type\">int</span> data)</span>\n{\n    node *new_node = create_node(data);\n    node *temp;  <span class=\"hljs-comment\">// to be deleted</span>\n    node *prev;  <span class=\"hljs-comment\">// keeps track of the parent of the element deleted</span>\n    <span class=\"hljs-keyword\">if</span> (*root == <span class=\"hljs-literal\">NULL</span>)\n    {\n        *root = new_node;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        temp = *root;\n        prev = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-keyword\">if</span> (new_node-&gt;data &gt; temp-&gt;data)\n            {\n                prev = temp;\n                temp = temp-&gt;rlink;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (new_node-&gt;data &lt; temp-&gt;data)\n            {\n                prev = temp;\n                temp = temp-&gt;llink;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">if</span> (new_node-&gt;data &gt; prev-&gt;data)\n        {\n            prev-&gt;rlink = new_node;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            prev-&gt;llink = new_node;\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * searches for the element\n * \\param[in] root node pointer to the topmost node of the tree\n * \\param[in] ele value searched for\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(node *root, <span class=\"hljs-type\">int</span> ele)</span>\n{\n    node *temp = root;\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (temp-&gt;data == ele)\n        {\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ele &gt; temp-&gt;data)\n        {\n            temp = temp-&gt;rlink;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            temp = temp-&gt;llink;\n        }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (temp == <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;Element not found.&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;Element found.&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * performs inorder traversal\n * param[in] curr node pointer to the topmost node of the tree\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">inorder_display</span><span class=\"hljs-params\">(node *curr)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (curr != <span class=\"hljs-literal\">NULL</span>)\n    {\n        inorder_display(curr-&gt;llink);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>, curr-&gt;data);\n        inorder_display(curr-&gt;rlink);\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * performs postorder traversal\n * param[in] curr node pointer to the topmost node of the tree\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">postorder_display</span><span class=\"hljs-params\">(node *curr)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (curr != <span class=\"hljs-literal\">NULL</span>)\n    {\n        postorder_display(curr-&gt;llink);\n        postorder_display(curr-&gt;rlink);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>, curr-&gt;data);\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * performs preorder traversal\n * param[in] curr node pointer to the topmost node of the tree\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">preorder_display</span><span class=\"hljs-params\">(node *curr)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (curr != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\t&quot;</span>, curr-&gt;data);\n        preorder_display(curr-&gt;llink);\n        preorder_display(curr-&gt;rlink);\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * deletion of a node from the tree\n * if the node isn&#x27;t present in the tree, it takes no action.\n * param[in,out] root pointer to node pointer to the topmost node of the tree\n * param[in] ele value to be deleted from the tree\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">delete_bt</span><span class=\"hljs-params\">(node **root, <span class=\"hljs-type\">int</span> ele)</span>\n{\n    node *temp;\n    node *prev;\n    <span class=\"hljs-keyword\">if</span> (*root == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">else</span>\n    {\n        temp = *root;\n        prev = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-comment\">// search</span>\n        <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n        {\n            <span class=\"hljs-keyword\">if</span> (temp-&gt;data == ele)\n            {\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ele &gt; temp-&gt;data)\n            {\n                prev = temp;\n                temp = temp-&gt;rlink;\n            }\n            <span class=\"hljs-keyword\">else</span>\n            {\n                prev = temp;\n                temp = temp-&gt;llink;\n            }\n        }\n    }\n\n    <span class=\"hljs-keyword\">if</span> (temp == <span class=\"hljs-literal\">NULL</span>)\n        <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">else</span>\n    {\n        node *replacement;  <span class=\"hljs-comment\">// deleted node&#x27;s replacement</span>\n        node *t;\n        <span class=\"hljs-keyword\">if</span> (temp-&gt;llink == <span class=\"hljs-literal\">NULL</span> &amp;&amp; temp-&gt;rlink == <span class=\"hljs-literal\">NULL</span>)\n        {\n            replacement = <span class=\"hljs-literal\">NULL</span>;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp-&gt;llink == <span class=\"hljs-literal\">NULL</span> &amp;&amp; temp-&gt;rlink != <span class=\"hljs-literal\">NULL</span>)\n        {\n            replacement = temp-&gt;rlink;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (temp-&gt;llink != <span class=\"hljs-literal\">NULL</span> &amp;&amp; temp-&gt;rlink == <span class=\"hljs-literal\">NULL</span>)\n        {\n            replacement = temp-&gt;llink;\n        }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            replacement = temp-&gt;rlink;  <span class=\"hljs-comment\">// replaced with inorder successor</span>\n            t = replacement;\n            <span class=\"hljs-keyword\">while</span> (t-&gt;llink != <span class=\"hljs-literal\">NULL</span>)\n            {\n                t = t-&gt;llink;\n            }\n            t-&gt;llink =\n                temp-&gt;llink;  <span class=\"hljs-comment\">// leftmost node of the replacement is linked to</span>\n                              <span class=\"hljs-comment\">// the left child of the deleted node</span>\n        }\n\n        <span class=\"hljs-keyword\">if</span> (temp == *root)\n        {\n            <span class=\"hljs-built_in\">free</span>(*root);\n            *root = replacement;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (prev-&gt;llink == temp)\n        {\n            <span class=\"hljs-built_in\">free</span>(prev-&gt;llink);\n            prev-&gt;llink = replacement;\n        }\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (prev-&gt;rlink == temp)\n        {\n            <span class=\"hljs-built_in\">free</span>(prev-&gt;rlink);\n            prev-&gt;rlink = replacement;\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * main function\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;BINARY THREADED TREE: \\n&quot;</span>);\n    node *root = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-type\">int</span> choice, n;\n    <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;1. Insert into BT&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;2. Print BT - inorder&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;3. Print BT - preorder&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;4. print BT - postorder&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;5. delete from BT&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;6. search in BT&quot;</span>);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;Type 0 to exit&quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;choice);\n\n        <span class=\"hljs-keyword\">switch</span> (choice)\n        {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;Enter a no:&quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n            insert_bt(&amp;root, n);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            inorder_display(root);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            preorder_display(root);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n            postorder_display(root);\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;Enter a no:&quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n            delete_bt(&amp;root, n);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">6</span>:\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, <span class=\"hljs-string\">&quot;Enter a no:&quot;</span>);\n            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n            search(root, n);\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    } <span class=\"hljs-keyword\">while</span> (choice != <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Amit",
      "email": "nayak.amit.blr@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
