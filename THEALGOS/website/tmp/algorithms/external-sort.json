{
  "slug": "external-sort",
  "name": "External Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/external_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/external_sort.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Sort large text files in a minimum amount of memory</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-keyword\">import</span> argparse\n<span class=\"hljs-keyword\">import</span> os\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileSplitter</span>:\n    BLOCK_FILENAME_FORMAT = <span class=\"hljs-string\">&quot;block_{0}.dat&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, filename</span>):\n        self.filename = filename\n        self.block_filenames = []\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">write_block</span>(<span class=\"hljs-params\">self, data, block_number</span>):\n        filename = self.BLOCK_FILENAME_FORMAT.<span class=\"hljs-built_in\">format</span>(block_number)\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(filename, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> file:\n            file.write(data)\n        self.block_filenames.append(filename)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_block_filenames</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.block_filenames\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">split</span>(<span class=\"hljs-params\">self, block_size, sort_key=<span class=\"hljs-literal\">None</span></span>):\n        i = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(self.filename) <span class=\"hljs-keyword\">as</span> file:\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n                lines = file.readlines(block_size)\n\n                <span class=\"hljs-keyword\">if</span> lines == []:\n                    <span class=\"hljs-keyword\">break</span>\n\n                <span class=\"hljs-keyword\">if</span> sort_key <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    lines.sort()\n                <span class=\"hljs-keyword\">else</span>:\n                    lines.sort(key=sort_key)\n\n                self.write_block(<span class=\"hljs-string\">&quot;&quot;</span>.join(lines), i)\n                i += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cleanup</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-built_in\">map</span>(<span class=\"hljs-keyword\">lambda</span> f: os.remove(f), self.block_filenames)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NWayMerge</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">select</span>(<span class=\"hljs-params\">self, choices</span>):\n        min_index = -<span class=\"hljs-number\">1</span>\n        min_str = <span class=\"hljs-literal\">None</span>\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(choices)):\n            <span class=\"hljs-keyword\">if</span> min_str <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">or</span> choices[i] &lt; min_str:\n                min_index = i\n\n        <span class=\"hljs-keyword\">return</span> min_index\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FilesArray</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, files</span>):\n        self.files = files\n        self.empty = <span class=\"hljs-built_in\">set</span>()\n        self.num_buffers = <span class=\"hljs-built_in\">len</span>(files)\n        self.buffers = {i: <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_buffers)}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_dict</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> {\n            i: self.buffers[i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_buffers) <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.empty\n        }\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">refresh</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.num_buffers):\n            <span class=\"hljs-keyword\">if</span> self.buffers[i] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">and</span> i <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.empty:\n                self.buffers[i] = self.files[i].readline()\n\n                <span class=\"hljs-keyword\">if</span> self.buffers[i] == <span class=\"hljs-string\">&quot;&quot;</span>:\n                    self.empty.add(i)\n                    self.files[i].close()\n\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.empty) == self.num_buffers:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-params\">self, index</span>):\n        value = self.buffers[index]\n        self.buffers[index] = <span class=\"hljs-literal\">None</span>\n\n        <span class=\"hljs-keyword\">return</span> value\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileMerger</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, merge_strategy</span>):\n        self.merge_strategy = merge_strategy\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge</span>(<span class=\"hljs-params\">self, filenames, outfilename, buffer_size</span>):\n        buffers = FilesArray(self.get_file_handles(filenames, buffer_size))\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(outfilename, <span class=\"hljs-string\">&quot;w&quot;</span>, buffer_size) <span class=\"hljs-keyword\">as</span> outfile:\n            <span class=\"hljs-keyword\">while</span> buffers.refresh():\n                min_index = self.merge_strategy.select(buffers.get_dict())\n                outfile.write(buffers.unshift(min_index))\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_file_handles</span>(<span class=\"hljs-params\">self, filenames, buffer_size</span>):\n        files = {}\n\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(filenames)):\n            files[i] = <span class=\"hljs-built_in\">open</span>(filenames[i], <span class=\"hljs-string\">&quot;r&quot;</span>, buffer_size)\n\n        <span class=\"hljs-keyword\">return</span> files\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExternalSort</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, block_size</span>):\n        self.block_size = block_size\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-params\">self, filename, sort_key=<span class=\"hljs-literal\">None</span></span>):\n        num_blocks = self.get_number_blocks(filename, self.block_size)\n        splitter = FileSplitter(filename)\n        splitter.split(self.block_size, sort_key)\n\n        merger = FileMerger(NWayMerge())\n        buffer_size = self.block_size / (num_blocks + <span class=\"hljs-number\">1</span>)\n        merger.merge(splitter.get_block_filenames(), filename + <span class=\"hljs-string\">&quot;.out&quot;</span>, buffer_size)\n\n        splitter.cleanup()\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_number_blocks</span>(<span class=\"hljs-params\">self, filename, block_size</span>):\n        <span class=\"hljs-keyword\">return</span> (os.stat(filename).st_size / block_size) + <span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parse_memory</span>(<span class=\"hljs-params\">string</span>):\n    <span class=\"hljs-keyword\">if</span> string[-<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">&quot;k&quot;</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(string[:-<span class=\"hljs-number\">1</span>]) * <span class=\"hljs-number\">1024</span>\n    <span class=\"hljs-keyword\">elif</span> string[-<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">&quot;m&quot;</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(string[:-<span class=\"hljs-number\">1</span>]) * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>\n    <span class=\"hljs-keyword\">elif</span> string[-<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">&quot;g&quot;</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(string[:-<span class=\"hljs-number\">1</span>]) * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span> * <span class=\"hljs-number\">1024</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(string)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        <span class=\"hljs-string\">&quot;-m&quot;</span>, <span class=\"hljs-string\">&quot;--mem&quot;</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">&quot;amount of memory to use for sorting&quot;</span>, default=<span class=\"hljs-string\">&quot;100M&quot;</span>\n    )\n    parser.add_argument(\n        <span class=\"hljs-string\">&quot;filename&quot;</span>, metavar=<span class=\"hljs-string\">&quot;&lt;filename&gt;&quot;</span>, nargs=<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">&quot;name of file to sort&quot;</span>\n    )\n    args = parser.parse_args()\n\n    sorter = ExternalSort(parse_memory(args.mem))\n    sorter.sort(args.filename[<span class=\"hljs-number\">0</span>])\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mickaël Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Shivam sharma",
      "email": "shivams334@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
