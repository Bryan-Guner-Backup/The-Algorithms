{
  "slug": "binomial-calculate",
  "name": "Binomial Calculate",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/binomial_calculate.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/binomial_calculate.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Program to calculate [Binomial\n * coefficients](https://en.wikipedia.org/wiki/Binomial_coefficient)\n *\n * @author [astronmax](https://github.com/astronmax)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdint&gt;</span>   <span class=\"hljs-comment\">/// for int32_t type</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span>   <span class=\"hljs-comment\">/// for atoi</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for IO operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * @namespace binomial\n * @brief Functions for [Binomial\n * coefficients](https://en.wikipedia.org/wiki/Binomial_coefficient)\n * implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> binomial {\n<span class=\"hljs-comment\">/**\n * @brief Function to calculate binomial coefficients\n * @param n first value\n * @param k second value\n * @return binomial coefficient for n and k\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">size_t</span> <span class=\"hljs-title\">calculate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int32_t</span> n, <span class=\"hljs-type\">int32_t</span> k)</span> </span>{\n    <span class=\"hljs-comment\">// basic cases</span>\n    <span class=\"hljs-keyword\">if</span> (k &gt; (n / <span class=\"hljs-number\">2</span>))\n        k = n - k;\n    <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> n;\n    <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-type\">size_t</span> result = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-number\">1</span>; i &lt;= k; ++i) {\n        result *= n - k + i;\n        result /= i;\n    }\n\n    <span class=\"hljs-keyword\">return</span> result;\n}\n}  <span class=\"hljs-comment\">// namespace binomial</span>\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">tests</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// tests for calculate function</span>\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">57</span>, <span class=\"hljs-number\">57</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">3</span>) == <span class=\"hljs-number\">20</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>) == <span class=\"hljs-number\">252</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">10</span>) == <span class=\"hljs-number\">184756</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">15</span>) == <span class=\"hljs-number\">155117520</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">20</span>) == <span class=\"hljs-number\">137846528820</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">25</span>) == <span class=\"hljs-number\">126410606437752</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">30</span>) == <span class=\"hljs-number\">118264581564861424</span>);\n    <span class=\"hljs-built_in\">assert</span>(math::binomial::<span class=\"hljs-built_in\">calculate</span>(<span class=\"hljs-number\">62</span>, <span class=\"hljs-number\">31</span>) == <span class=\"hljs-number\">465428353255261088</span>);\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;[+] Binomial coefficients calculate test completed&quot;</span>\n              &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @param argc commandline argument count\n * @param argv commandline array of arguments\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span>* argv[])</span> </span>{\n    <span class=\"hljs-built_in\">tests</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n\n    <span class=\"hljs-keyword\">if</span> (argc &lt; <span class=\"hljs-number\">3</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Usage ./binomial_calculate {n} {k}&quot;</span> &lt;&lt; std::endl;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-type\">int32_t</span> n = <span class=\"hljs-built_in\">atoi</span>(argv[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-type\">int32_t</span> k = <span class=\"hljs-built_in\">atoi</span>(argv[<span class=\"hljs-number\">2</span>]);\n\n    std::cout &lt;&lt; math::binomial::<span class=\"hljs-built_in\">calculate</span>(n, k) &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
