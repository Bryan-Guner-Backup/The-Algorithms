{
  "slug": "variance",
  "name": "Variance",
  "categories": ["numericalmethods"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "numerical_methods/variance.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/numerical_methods/variance.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> *ARRAY = <span class=\"hljs-literal\">NULL</span>, ARRAY_LENGTH, i, TEMPORARY_ELEMENT, isSorted = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">float</span> MEAN = <span class=\"hljs-number\">0</span>, VARIANCE = <span class=\"hljs-number\">0</span>, STAND;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter no. for Random Numbers :&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;ARRAY_LENGTH);\n    ARRAY = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">realloc</span>(\n        ARRAY,\n        ARRAY_LENGTH * (<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>)));  <span class=\"hljs-comment\">// We allocate the dedicated memory</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; ARRAY_LENGTH; i++)  <span class=\"hljs-comment\">// We generate the random numbers</span>\n        ARRAY[i] = rand() % <span class=\"hljs-number\">100</span>;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Random Numbers Generated are :\\n&quot;</span>);  <span class=\"hljs-comment\">// We display them</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; ARRAY_LENGTH; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, ARRAY[i]);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSorted Data: &quot;</span>);  <span class=\"hljs-comment\">// Then we sort it using Bubble Sort..</span>\n\n    <span class=\"hljs-keyword\">while</span> (!isSorted)\n    {                  <span class=\"hljs-comment\">// While our array&#x27;s not sorted</span>\n        isSorted = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// we suppose that it&#x27;s sorted</span>\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; ARRAY_LENGTH - <span class=\"hljs-number\">1</span>; i++)\n        {  <span class=\"hljs-comment\">// then for each element of the array</span>\n            <span class=\"hljs-keyword\">if</span> (ARRAY[i] &gt; ARRAY[i + <span class=\"hljs-number\">1</span>])\n            {                  <span class=\"hljs-comment\">// if the two elements aren&#x27;t sorted</span>\n                isSorted = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// it means that the array is not sorted</span>\n                TEMPORARY_ELEMENT = ARRAY[i];  <span class=\"hljs-comment\">// and we switch these elements</span>\n                                               <span class=\"hljs-comment\">// using TEMPORARY_ELEMENT</span>\n                ARRAY[i] = ARRAY[i + <span class=\"hljs-number\">1</span>];\n                ARRAY[i + <span class=\"hljs-number\">1</span>] = TEMPORARY_ELEMENT;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; ARRAY_LENGTH; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, ARRAY[i]);\n        MEAN = MEAN + ARRAY[i];\n    }\n    MEAN = MEAN / (<span class=\"hljs-type\">float</span>)ARRAY_LENGTH;\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; ARRAY_LENGTH; i++)\n        VARIANCE = VARIANCE + (<span class=\"hljs-built_in\">pow</span>((ARRAY[i] - MEAN), <span class=\"hljs-number\">2</span>));\n\n    VARIANCE = VARIANCE / (<span class=\"hljs-type\">float</span>)ARRAY_LENGTH;\n    STAND = <span class=\"hljs-built_in\">sqrt</span>(VARIANCE);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\n- Mean is: %f\\n&quot;</span>, MEAN);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;- Variance is: %f\\n&quot;</span>, VARIANCE);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;- Standard Deviation is: %f\\n&quot;</span>, STAND);\n}\n"
    },
    "julia": {
      "dir": "src/statistics/variance.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/statistics/variance.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    variance(a)\n\nFind the variance from a set of data.\n\n# Arguments:\n- `a`: holds the set of data\n\n# Reference\n    - According to Ronald E. Walpole, `variance` is used to measure the variability of a set of data. -- Introduction to Statistics by Ronald E. Walpole\n\n# Contributors:\n- [Aru Bhardwaj](https://github.com/arubhardwaj)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> variance(a)\n    avg = sum(a) / length(a)\n    x = sum((a .- avg).^<span class=\"hljs-number\">2</span>)\n    s_sq = x / (length(a) - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">return</span>(s_sq)\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Jean-Francois Baffier",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Aru Bhardwaj",
      "email": "aru.bhardwaj01@gmail.com",
      "commits": 1
    },
    {
      "name": "Soc Virnyl S. Estela",
      "email": "66054069+ReneganRonin@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
