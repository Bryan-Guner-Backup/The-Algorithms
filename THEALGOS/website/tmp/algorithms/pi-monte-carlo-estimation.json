{
  "slug": "pi-monte-carlo-estimation",
  "name": "Pi Monte Carlo Estimation",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/pi_monte_carlo_estimation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/pi_monte_carlo_estimation.py",
      "code": "<span class=\"hljs-keyword\">import</span> random\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Point</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">float</span>, y: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.x = x\n        self.y = y\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_in_unit_circle</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        True, if the point lies in the unit circle\n        False, otherwise\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> (self.x ** <span class=\"hljs-number\">2</span> + self.y ** <span class=\"hljs-number\">2</span>) &lt;= <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">random_unit_square</span>(<span class=\"hljs-params\">cls</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Generates a point randomly drawn from the unit square [0, 1) x [0, 1).\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> cls(x=random.random(), y=random.random())\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">estimate_pi</span>(<span class=\"hljs-params\">number_of_simulations: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Generates an estimate of the mathematical constant PI.\n    See https://en.wikipedia.org/wiki/Monte_Carlo_method#Overview\n\n    The estimate is generated by Monte Carlo simulations. Let U be uniformly drawn from\n    the unit square [0, 1) x [0, 1). The probability that U lies in the unit circle is:\n\n        P[U in unit circle] = 1/4 PI\n\n    and therefore\n\n        PI = 4 * P[U in unit circle]\n\n    We can get an estimate of the probability P[U in unit circle].\n    See https://en.wikipedia.org/wiki/Empirical_probability by:\n\n        1. Draw a point uniformly from the unit square.\n        2. Repeat the first step n times and count the number of points in the unit\n            circle, which is called m.\n        3. An estimate of P[U in unit circle] is m/n\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> number_of_simulations &lt; <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;At least one simulation is necessary to estimate PI.&quot;</span>)\n\n    number_in_unit_circle = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> simulation_index <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(number_of_simulations):\n        random_point = Point.random_unit_square()\n\n        <span class=\"hljs-keyword\">if</span> random_point.is_in_unit_circle():\n            number_in_unit_circle += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> * number_in_unit_circle / number_of_simulations\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-comment\"># import doctest</span>\n\n    <span class=\"hljs-comment\"># doctest.testmod()</span>\n    <span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> pi\n\n    prompt = <span class=\"hljs-string\">&quot;Please enter the desired number of Monte Carlo simulations: &quot;</span>\n    my_pi = estimate_pi(<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(prompt).strip()))\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;An estimate of PI is <span class=\"hljs-subst\">{my_pi}</span> with an error of <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">abs</span>(my_pi - pi)}</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "cschuerc",
      "email": "57899042+cschuerc@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
