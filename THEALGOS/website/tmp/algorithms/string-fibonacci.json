{
  "slug": "string-fibonacci",
  "name": "String Fibonacci",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/string_fibonacci.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/string_fibonacci.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief This Programme returns the Nth fibonacci as a string.\n *\n * The method used is manual addition with carry and placing it in a string\n * which is called string addition This makes it have no bounds or limits\n *\n * @see fibonacci_large.cpp, fibonacci_fast.cpp, fibonacci.cpp\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>  <span class=\"hljs-comment\">// use this for MS Visual C</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span>  <span class=\"hljs-comment\">// otherwise</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/**\n * function to add two string numbers\n * \\param [in] a first number in string to add\n * \\param [in] b second number in string to add\n * \\returns sum as a std::string\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(std::string a, std::string b)</span> </span>{\n    std::string temp = <span class=\"hljs-string\">&quot;&quot;</span>;\n\n    <span class=\"hljs-comment\">// carry flag</span>\n    <span class=\"hljs-type\">int</span> carry = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">// fills up with zeros</span>\n    <span class=\"hljs-keyword\">while</span> (a.<span class=\"hljs-built_in\">length</span>() &lt; b.<span class=\"hljs-built_in\">length</span>()) {\n        a = <span class=\"hljs-string\">&quot;0&quot;</span> + a;\n    }\n\n    <span class=\"hljs-comment\">// fills up with zeros</span>\n    <span class=\"hljs-keyword\">while</span> (b.<span class=\"hljs-built_in\">length</span>() &lt; a.<span class=\"hljs-built_in\">length</span>()) {\n        b = <span class=\"hljs-string\">&quot;0&quot;</span> + b;\n    }\n\n    <span class=\"hljs-comment\">// adds the numbers a and b</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = a.<span class=\"hljs-built_in\">length</span>() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n        <span class=\"hljs-type\">char</span> val = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">char</span>&gt;(((a[i] - <span class=\"hljs-number\">48</span>) + (b[i] - <span class=\"hljs-number\">48</span>)) + <span class=\"hljs-number\">48</span> + carry);\n        <span class=\"hljs-keyword\">if</span> (val &gt; <span class=\"hljs-number\">57</span>) {\n            carry = <span class=\"hljs-number\">1</span>;\n            val -= <span class=\"hljs-number\">10</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            carry = <span class=\"hljs-number\">0</span>;\n        }\n        temp = val + temp;\n    }\n\n    <span class=\"hljs-comment\">// processes the carry flag</span>\n    <span class=\"hljs-keyword\">if</span> (carry == <span class=\"hljs-number\">1</span>) {\n        temp = <span class=\"hljs-string\">&quot;1&quot;</span> + temp;\n    }\n\n    <span class=\"hljs-comment\">// removes leading zeros.</span>\n    <span class=\"hljs-keyword\">while</span> (temp[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; temp.<span class=\"hljs-built_in\">length</span>() &gt; <span class=\"hljs-number\">1</span>) {\n        temp = temp.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">1</span>);\n    }\n\n    <span class=\"hljs-keyword\">return</span> temp;\n}\n\n<span class=\"hljs-comment\">/** Fibonacci iterator\n * \\param [in] n n^th Fibonacci number\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">fib_Accurate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\n    std::string tmp = <span class=\"hljs-string\">&quot;&quot;</span>;\n    std::string fibMinus1 = <span class=\"hljs-string\">&quot;1&quot;</span>;\n    std::string fibMinus2 = <span class=\"hljs-string\">&quot;0&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        tmp = <span class=\"hljs-built_in\">add</span>(fibMinus1, fibMinus2);\n        fibMinus2 = fibMinus1;\n        fibMinus1 = tmp;\n    }\n    std::cout &lt;&lt; fibMinus2;\n}\n\n<span class=\"hljs-comment\">/** main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> n;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter whatever number N you want to find the fibonacci of\\n&quot;</span>;\n    std::cin &gt;&gt; n;\n    std::cout &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot; th Fibonacci is \\n&quot;</span>;\n    <span class=\"hljs-built_in\">fib_Accurate</span>(n);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Rakesh",
      "email": "rsenwar448@gmail.com",
      "commits": 1
    },
    {
      "name": "Naveen Hegde",
      "email": "hegdenaveen1@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
