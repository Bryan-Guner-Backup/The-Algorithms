{
  "slug": "sum-of-binomial-coefficient",
  "name": "Sum of Binomial Coefficient",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/sum_of_binomial_coefficient.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/sum_of_binomial_coefficient.cpp",
      "code": "<span class=\"hljs-comment\">/**\r\n * @file\r\n * @brief Algorithm to find sum of binomial coefficients of a given positive\r\n * integer.\r\n * @details Given a positive integer n, the task is to find the sum of binomial\r\n * coefficient i.e nC0 + nC1 + nC2 + ... + nCn-1 + nCn By induction, we can\r\n * prove that the sum is equal to 2^n\r\n * @see more on\r\n * https://en.wikipedia.org/wiki/Binomial_coefficient#Sums_of_the_binomial_coefficients\r\n * @author [muskan0719](https://github.com/muskan0719)\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for std::cin and std::cout</span></span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @namespace math\r\n * @brief Mathematical algorithms\r\n */</span>\r\n<span class=\"hljs-keyword\">namespace</span> math {\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function to calculate sum of binomial coefficients\r\n * @param n number\r\n * @return Sum of binomial coefficients of number\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">binomialCoeffSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\r\n    <span class=\"hljs-comment\">// Calculating 2^n</span>\r\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">1</span> &lt;&lt; n);\r\n}\r\n}  <span class=\"hljs-comment\">// namespace math</span>\r\n\r\n<span class=\"hljs-comment\">/**\r\n * Function for testing binomialCoeffSum function.\r\n * test cases and assert statement.\r\n * @returns `void`\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-type\">int</span> test_case_1 = math::<span class=\"hljs-built_in\">binomialCoeffSum</span>(<span class=\"hljs-number\">2</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_1 == <span class=\"hljs-number\">4</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test_case_1 Passed!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">int</span> test_case_2 = math::<span class=\"hljs-built_in\">binomialCoeffSum</span>(<span class=\"hljs-number\">3</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_2 == <span class=\"hljs-number\">8</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test_case_2 Passed!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">int</span> test_case_3 = math::<span class=\"hljs-built_in\">binomialCoeffSum</span>(<span class=\"hljs-number\">4</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_3 == <span class=\"hljs-number\">16</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test_case_3 Passed!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">int</span> test_case_4 = math::<span class=\"hljs-built_in\">binomialCoeffSum</span>(<span class=\"hljs-number\">5</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_4 == <span class=\"hljs-number\">32</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test_case_4 Passed!&quot;</span> &lt;&lt; std::endl;\r\n\r\n    <span class=\"hljs-type\">int</span> test_case_5 = math::<span class=\"hljs-built_in\">binomialCoeffSum</span>(<span class=\"hljs-number\">7</span>);\r\n    <span class=\"hljs-built_in\">assert</span>(test_case_5 == <span class=\"hljs-number\">128</span>);\r\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test_case_5 Passed!&quot;</span> &lt;&lt; std::endl;\r\n}\r\n\r\n<span class=\"hljs-comment\">/**\r\n * @brief Main function\r\n * @returns 0 on exit\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\r\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the tests</span>\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
