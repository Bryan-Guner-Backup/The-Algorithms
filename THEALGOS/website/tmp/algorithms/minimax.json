{
  "slug": "minimax",
  "name": "Minimax",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking/minimax.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking/minimax.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nMinimax helps to achieve maximum score in a game by checking all possible moves\ndepth is current depth in game tree.\n\nnodeIndex is index of current node in scores[].\nif move is of maximizer return true else false\nleaves of game tree is stored in scores[]\nheight is maximum height of Game tree\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> math\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">minimax</span>(<span class=\"hljs-params\">\n    depth: <span class=\"hljs-built_in\">int</span>, node_index: <span class=\"hljs-built_in\">int</span>, is_max: <span class=\"hljs-built_in\">bool</span>, scores: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], height: <span class=\"hljs-built_in\">float</span>\n</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; import math\n    &gt;&gt;&gt; scores = [90, 23, 6, 33, 21, 65, 123, 34423]\n    &gt;&gt;&gt; height = math.log(len(scores), 2)\n    &gt;&gt;&gt; minimax(0, 0, True, scores, height)\n    65\n    &gt;&gt;&gt; minimax(-1, 0, True, scores, height)\n    Traceback (most recent call last):\n        ...\n    ValueError: Depth cannot be less than 0\n    &gt;&gt;&gt; minimax(0, 0, True, [], 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Scores cannot be empty\n    &gt;&gt;&gt; scores = [3, 5, 2, 9, 12, 5, 23, 23]\n    &gt;&gt;&gt; height = math.log(len(scores), 2)\n    &gt;&gt;&gt; minimax(0, 0, True, scores, height)\n    12\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> depth &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Depth cannot be less than 0&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(scores) == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Scores cannot be empty&quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> depth == height:\n        <span class=\"hljs-keyword\">return</span> scores[node_index]\n\n    <span class=\"hljs-keyword\">if</span> is_max:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(\n            minimax(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">False</span>, scores, height),\n            minimax(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">False</span>, scores, height),\n        )\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>(\n        minimax(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">True</span>, scores, height),\n        minimax(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">True</span>, scores, height),\n    )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    scores = [<span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">34423</span>]\n    height = math.log(<span class=\"hljs-built_in\">len</span>(scores), <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Optimal value : &quot;</span>, end=<span class=\"hljs-string\">&quot;&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(minimax(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">True</span>, scores, height))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    main()\n"
    },
    "c-plus-plus": {
      "dir": "backtracking/minimax.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/minimax.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief returns which is the longest/shortest number\n * using [minimax](https://en.wikipedia.org/wiki/Minimax) algorithm\n *\n * @details\n * Minimax (sometimes MinMax, MM or saddle point) is a decision rule used in\n * artificial intelligence, decision theory, game theory, statistics,\n * and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario.\n * When dealing with gains, it is referred to as &quot;maximin&quot;â€”to maximize the minimum gain.\n * Originally formulated for two-player zero-sum game theory, covering both the cases where players take\n * alternate moves and those where they make simultaneous moves, it has also been extended to more\n * complex games and to general decision-making in the presence of uncertainty.\n * \n * @author [Gleison Batista](https://github.com/gleisonbs)\n * @author [David Leal](https://github.com/Panquesito7)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n\n<span class=\"hljs-comment\">/** \n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n<span class=\"hljs-comment\">/**\n * Check which number is the maximum/minimum in the array\n * @param depth current depth in game tree\n * @param node_index current index in array\n * @param is_max if current index is the longest number\n * @param scores saved numbers in array\n * @param height maximum height for game tree\n * @return maximum or minimum number\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">minimax</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> depth, <span class=\"hljs-type\">int</span> node_index, <span class=\"hljs-type\">bool</span> is_max,\n            <span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, T&gt; &amp;scores, <span class=\"hljs-type\">double</span> height)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (depth == height) {\n        <span class=\"hljs-keyword\">return</span> scores[node_index];\n    }\n\n    <span class=\"hljs-type\">int</span> v1 = <span class=\"hljs-built_in\">minimax</span>(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span>, !is_max, scores, height);\n    <span class=\"hljs-type\">int</span> v2 = <span class=\"hljs-built_in\">minimax</span>(depth + <span class=\"hljs-number\">1</span>, node_index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>, !is_max, scores, height);\n\n    <span class=\"hljs-keyword\">return</span> is_max ? std::<span class=\"hljs-built_in\">max</span>(v1, v2) : std::<span class=\"hljs-built_in\">min</span>(v1, v2);\n}\n} <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::array&lt;<span class=\"hljs-type\">int</span>, 8&gt; scores = {<span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">33</span>, <span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">65</span>, <span class=\"hljs-number\">123</span>, <span class=\"hljs-number\">34423</span>};\n    <span class=\"hljs-type\">double</span> height = <span class=\"hljs-built_in\">log2</span>(scores.<span class=\"hljs-built_in\">size</span>());\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Optimal value: &quot;</span> &lt;&lt; backtracking::<span class=\"hljs-built_in\">minimax</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>, scores, height)\n              &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Aditi Agarwal",
      "email": "31546143+aditiagarwal34550@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Gleison Batista",
      "email": "gleisonbs@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Abdujabbar Mirkhalikov",
      "email": "abdujabbar.mirkhalikov@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
