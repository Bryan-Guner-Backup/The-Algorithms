{
  "slug": "armstrong-numbers",
  "name": "Armstrong Numbers",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/armstrong_numbers.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/armstrong_numbers.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nAn Armstrong number is equal to the sum of its own digits each raised to the\r\npower of the number of digits.\r\n\r\nFor example, 370 is an Armstrong number because 3*3*3 + 7*7*7 + 0*0*0 = 370.\r\n\r\nArmstrong numbers are also called Narcissistic numbers and Pluperfect numbers.\r\n\r\nOn-Line Encyclopedia of Integer Sequences entry: https://oeis.org/A005188\r\n&quot;&quot;&quot;</span>\r\nPASSING = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">153</span>, <span class=\"hljs-number\">370</span>, <span class=\"hljs-number\">371</span>, <span class=\"hljs-number\">1634</span>, <span class=\"hljs-number\">24678051</span>, <span class=\"hljs-number\">115132219018763992565095597973971522401</span>)\r\nFAILING = (-<span class=\"hljs-number\">153</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;A&quot;</span>, [], {}, <span class=\"hljs-literal\">None</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">armstrong_number</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return True if n is an Armstrong number or False if it is not.\r\n\r\n    &gt;&gt;&gt; all(armstrong_number(n) for n in PASSING)\r\n    True\r\n    &gt;&gt;&gt; any(armstrong_number(n) for n in FAILING)\r\n    False\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> n &lt; <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-comment\"># Initialization of sum and number of digits.</span>\r\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>\r\n    number_of_digits = <span class=\"hljs-number\">0</span>\r\n    temp = n\r\n    <span class=\"hljs-comment\"># Calculation of digits of the number</span>\r\n    <span class=\"hljs-keyword\">while</span> temp &gt; <span class=\"hljs-number\">0</span>:\r\n        number_of_digits += <span class=\"hljs-number\">1</span>\r\n        temp //= <span class=\"hljs-number\">10</span>\r\n    <span class=\"hljs-comment\"># Dividing number into separate digits and find Armstrong number</span>\r\n    temp = n\r\n    <span class=\"hljs-keyword\">while</span> temp &gt; <span class=\"hljs-number\">0</span>:\r\n        rem = temp % <span class=\"hljs-number\">10</span>\r\n        <span class=\"hljs-built_in\">sum</span> += rem ** number_of_digits\r\n        temp //= <span class=\"hljs-number\">10</span>\r\n    <span class=\"hljs-keyword\">return</span> n == <span class=\"hljs-built_in\">sum</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pluperfect_number</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Return True if n is a pluperfect number or False if it is not\r\n\r\n    &gt;&gt;&gt; all(armstrong_number(n) for n in PASSING)\r\n    True\r\n    &gt;&gt;&gt; any(armstrong_number(n) for n in FAILING)\r\n    False\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> n &lt; <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n    <span class=\"hljs-comment\"># Init a &quot;histogram&quot; of the digits</span>\r\n    digit_histogram = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\r\n    digit_total = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-built_in\">sum</span> = <span class=\"hljs-number\">0</span>\r\n    temp = n\r\n    <span class=\"hljs-keyword\">while</span> temp &gt; <span class=\"hljs-number\">0</span>:\r\n        temp, rem = <span class=\"hljs-built_in\">divmod</span>(temp, <span class=\"hljs-number\">10</span>)\r\n        digit_histogram[rem] += <span class=\"hljs-number\">1</span>\r\n        digit_total += <span class=\"hljs-number\">1</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> (cnt, i) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(digit_histogram, <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(digit_histogram))):\r\n        <span class=\"hljs-built_in\">sum</span> += cnt * i ** digit_total\r\n\r\n    <span class=\"hljs-keyword\">return</span> n == <span class=\"hljs-built_in\">sum</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">narcissistic_number</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Return True if n is a narcissistic number or False if it is not.\r\n\r\n    &gt;&gt;&gt; all(armstrong_number(n) for n in PASSING)\r\n    True\r\n    &gt;&gt;&gt; any(armstrong_number(n) for n in FAILING)\r\n    False\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> n &lt; <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n    expo = <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">str</span>(n))  <span class=\"hljs-comment\"># the power that all digits will be raised to</span>\r\n    <span class=\"hljs-comment\"># check if sum of each digit multiplied expo times is equal to number</span>\r\n    <span class=\"hljs-keyword\">return</span> n == <span class=\"hljs-built_in\">sum</span>(<span class=\"hljs-built_in\">int</span>(i) ** expo <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">str</span>(n))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Request that user input an integer and tell them if it is Armstrong number.\r\n    &quot;&quot;&quot;</span>\r\n    num = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter an integer to see if it is an Armstrong number: &quot;</span>).strip())\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{num}</span> is <span class=\"hljs-subst\">{<span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-keyword\">if</span> armstrong_number(num) <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&#x27;not &#x27;</span>}</span>an Armstrong number.&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{num}</span> is <span class=\"hljs-subst\">{<span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-keyword\">if</span> narcissistic_number(num) <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&#x27;not &#x27;</span>}</span>an Armstrong number.&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{num}</span> is <span class=\"hljs-subst\">{<span class=\"hljs-string\">&#x27;&#x27;</span> <span class=\"hljs-keyword\">if</span> pluperfect_number(num) <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">&#x27;not &#x27;</span>}</span>an Armstrong number.&quot;</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n    main()\r\n"
    }
  },
  "contributors": [
    {
      "name": "Grigoriy Hanin",
      "email": "43445998+haningrisha@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anderson Torres",
      "email": "torres.anderson.85@protonmail.com",
      "commits": 1
    },
    {
      "name": "Akash",
      "email": "akash0babu0@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "kostogls",
      "email": "38495639+kostogls@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
