{
  "slug": "circular-linked-list",
  "name": "Circular Linked List",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/linked_list/circular_linked_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/linked_list/circular_linked_list.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>):\n        self.data = data\n        self.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CircularLinkedList</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.head = <span class=\"hljs-literal\">None</span>\n        self.tail = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>):\n        node = self.head\n        <span class=\"hljs-keyword\">while</span> self.head:\n            <span class=\"hljs-keyword\">yield</span> node.data\n            node = node.<span class=\"hljs-built_in\">next</span>\n            <span class=\"hljs-keyword\">if</span> node == self.head:\n                <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">iter</span>(self)))\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">iter</span>(self))\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_tail</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.insert_nth(<span class=\"hljs-built_in\">len</span>(self), data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_head</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.insert_nth(<span class=\"hljs-number\">0</span>, data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_nth</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span>, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> index &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> index &gt; <span class=\"hljs-built_in\">len</span>(self):\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range.&quot;</span>)\n        new_node = Node(data)\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            new_node.<span class=\"hljs-built_in\">next</span> = new_node  <span class=\"hljs-comment\"># first node points itself</span>\n            self.tail = self.head = new_node\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># insert at head</span>\n            new_node.<span class=\"hljs-built_in\">next</span> = self.head\n            self.head = self.tail.<span class=\"hljs-built_in\">next</span> = new_node\n        <span class=\"hljs-keyword\">else</span>:\n            temp = self.head\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index - <span class=\"hljs-number\">1</span>):\n                temp = temp.<span class=\"hljs-built_in\">next</span>\n            new_node.<span class=\"hljs-built_in\">next</span> = temp.<span class=\"hljs-built_in\">next</span>\n            temp.<span class=\"hljs-built_in\">next</span> = new_node\n            <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>:  <span class=\"hljs-comment\"># insert at tail</span>\n                self.tail = new_node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_front</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.delete_nth(<span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_tail</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> self.delete_nth(<span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_nth</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt;= index &lt; <span class=\"hljs-built_in\">len</span>(self):\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range.&quot;</span>)\n        delete_node = self.head\n        <span class=\"hljs-keyword\">if</span> self.head == self.tail:  <span class=\"hljs-comment\"># just one node</span>\n            self.head = self.tail = <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-number\">0</span>:  <span class=\"hljs-comment\"># delete head node</span>\n            self.tail.<span class=\"hljs-built_in\">next</span> = self.tail.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n            self.head = self.head.<span class=\"hljs-built_in\">next</span>\n        <span class=\"hljs-keyword\">else</span>:\n            temp = self.head\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index - <span class=\"hljs-number\">1</span>):\n                temp = temp.<span class=\"hljs-built_in\">next</span>\n            delete_node = temp.<span class=\"hljs-built_in\">next</span>\n            temp.<span class=\"hljs-built_in\">next</span> = temp.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n            <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>:  <span class=\"hljs-comment\"># delete at tail</span>\n                self.tail = temp\n        <span class=\"hljs-keyword\">return</span> delete_node.data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self) == <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_circular_linked_list</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; test_circular_linked_list()\n    &quot;&quot;&quot;</span>\n    circular_linked_list = CircularLinkedList()\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(circular_linked_list) == <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        circular_linked_list.delete_front()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        circular_linked_list.delete_tail()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        circular_linked_list.delete_nth(-<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        circular_linked_list.delete_nth(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(circular_linked_list) == i\n        circular_linked_list.insert_nth(i, i + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>))\n\n    circular_linked_list.insert_tail(<span class=\"hljs-number\">6</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>))\n    circular_linked_list.insert_head(<span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">7</span>))\n\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.delete_front() == <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.delete_tail() == <span class=\"hljs-number\">6</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>))\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.delete_nth(<span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">3</span>\n\n    circular_linked_list.insert_nth(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(circular_linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>))\n\n    <span class=\"hljs-keyword\">assert</span> circular_linked_list.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "operations_on_datastructures/circular_linked_list.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/operations_on_datastructures/circular_linked_list.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\n    <span class=\"hljs-type\">int</span> val;\n    node *next;\n};\n\nnode *start;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\n    node *t = start;\n\n    <span class=\"hljs-keyword\">if</span> (start != <span class=\"hljs-literal\">NULL</span>) {\n        <span class=\"hljs-keyword\">while</span> (t-&gt;next != start) {\n            t = t-&gt;next;\n        }\n        node *n = <span class=\"hljs-keyword\">new</span> node;\n        t-&gt;next = n;\n        n-&gt;val = x;\n        n-&gt;next = start;\n    } <span class=\"hljs-keyword\">else</span> {\n        node *n = <span class=\"hljs-keyword\">new</span> node;\n        n-&gt;val = x;\n        start = n;\n        n-&gt;next = start;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\n    node *t = start;\n    node *p;\n    <span class=\"hljs-keyword\">while</span> (t-&gt;val != x) {\n        p = t;\n        t = t-&gt;next;\n    }\n    p-&gt;next = t-&gt;next;\n    <span class=\"hljs-keyword\">delete</span> t;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>{\n    node *t = start;\n    <span class=\"hljs-type\">int</span> found = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (t-&gt;next != start) {\n        <span class=\"hljs-keyword\">if</span> (t-&gt;val == x) {\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nFound&quot;</span>;\n            found = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">break</span>;\n        }\n        t = t-&gt;next;\n    }\n    <span class=\"hljs-keyword\">if</span> (found == <span class=\"hljs-number\">0</span>) {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nNot Found&quot;</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span> </span>{\n    node *t = start;\n    <span class=\"hljs-keyword\">do</span> {\n        cout &lt;&lt; t-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\n        t = t-&gt;next;\n    } <span class=\"hljs-keyword\">while</span> (t != start);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> choice, x;\n    <span class=\"hljs-keyword\">do</span> {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n1. Insert&quot;</span>;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n2. Delete&quot;</span>;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n3. Search&quot;</span>;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n4. Print&quot;</span>;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\nEnter you choice : &quot;</span>;\n        cin &gt;&gt; choice;\n        <span class=\"hljs-built_in\">switch</span> (choice) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be inserted : &quot;</span>;\n            cin &gt;&gt; x;\n            <span class=\"hljs-built_in\">insert</span>(x);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be removed : &quot;</span>;\n            cin &gt;&gt; x;\n            <span class=\"hljs-built_in\">remove</span>(x);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the element to be searched : &quot;</span>;\n            cin &gt;&gt; x;\n            <span class=\"hljs-built_in\">search</span>(x);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n            <span class=\"hljs-built_in\">show</span>();\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    } <span class=\"hljs-keyword\">while</span> (choice != <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "data_structures/linked_list/circular_linked_list.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/linked_list/circular_linked_list.c",
      "code": "<span class=\"hljs-comment\">/* Circularly Linked List (Basic Operations) - Program to create a Circularly linked list abstract data type and perform various operations on it (Variable first and last declared globally) */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span>  <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;conio.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span>  <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span>  NULL  0</span>\r\n\r\n<span class=\"hljs-comment\">/* Assume that the data portion of each node consists of ONLY an integer.*/</span>\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>\r\n{</span>\r\n  <span class=\"hljs-type\">int</span>  data ;\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">next</span> ;</span>\r\n} ;\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">first</span>=</span><span class=\"hljs-literal\">NULL</span> ;\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">last</span>=</span><span class=\"hljs-literal\">NULL</span> ;\r\n<span class=\"hljs-comment\">/* first and last are global variables and need not be passed to any function. Any changes made to variables first and last by any of the functions in the program will be reflected in the entire program */</span>\r\n\r\n<span class=\"hljs-comment\">/* This function is responsible for creating the Circularly Linked List right from the BEGINING. */</span>\r\n<span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">create</span><span class=\"hljs-params\">()</span>\r\n{\r\n  <span class=\"hljs-type\">int</span>  i , n ;\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">pnode</span> , *<span class=\"hljs-title\">p</span> ;</span>\r\n\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of nodes required:\\n&quot;</span>) ;\r\n  <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n) ;\r\n\r\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the data value of each node:\\n&quot;</span>) ;\r\n  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">1</span> ; i&lt;=n ; i++)\r\n  {\r\n    pnode=(<span class=\"hljs-keyword\">struct</span> node*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node)) ;\r\n    <span class=\"hljs-keyword\">if</span>(pnode==<span class=\"hljs-literal\">NULL</span>)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Memory overflow. Unable to create.\\n&quot;</span>) ;\r\n      <span class=\"hljs-keyword\">return</span> ;\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;pnode-&gt;data) ;\r\n\r\n    <span class=\"hljs-keyword\">if</span>(first==<span class=\"hljs-literal\">NULL</span>)\r\n\t first=last=pnode ;\r\n    <span class=\"hljs-keyword\">else</span>\r\n    {\r\n\t  last-&gt;next=pnode ;\r\n\t  last=pnode ;    <span class=\"hljs-comment\">/* last keeps track of last node */</span>\r\n    }\r\n\r\n    last-&gt;next=first ;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/* This function will delete a node with value k from the Linked List if such a node exists */</span>\r\n<span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">deletenode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>  k)</span>\r\n{\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">p</span> , *<span class=\"hljs-title\">follow</span> ;</span>\r\n\r\n  <span class=\"hljs-comment\">/* searching the required node */</span>\r\n  p=first ;\r\n  follow=<span class=\"hljs-literal\">NULL</span> ;\r\n  <span class=\"hljs-keyword\">while</span>(follow!=last)\r\n  {\r\n    <span class=\"hljs-keyword\">if</span>(p-&gt;data==k)\r\n\t  <span class=\"hljs-keyword\">break</span> ;\r\n    follow=p ;\r\n    p=p-&gt;next ;\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">if</span>(follow==last)\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Required node not found.\\n&quot;</span>) ;\r\n  <span class=\"hljs-keyword\">else</span>\r\n  {\r\n    <span class=\"hljs-keyword\">if</span>(p==first&amp;&amp;p==last)  <span class=\"hljs-comment\">/* deleting the one and the only node */</span>\r\n\t  first=last=<span class=\"hljs-literal\">NULL</span> ;\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p==first)       <span class=\"hljs-comment\">/* deleting the first node */</span>\r\n    {\r\n      first=first-&gt;next ;\r\n      last-&gt;next=first ;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p==last)      <span class=\"hljs-comment\">/* deleting the last node */</span>\r\n    {\r\n      last=follow ;\r\n      last-&gt;next=first ;\r\n    }\r\n    <span class=\"hljs-keyword\">else</span>\t\t<span class=\"hljs-comment\">/* deleting any other node */</span>\r\n      follow-&gt;next=p-&gt;next ;\r\n\r\n    <span class=\"hljs-built_in\">free</span>(p) ;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-comment\">/* This function will go through all the nodes of Linked List exactly once and will display data value of each node */</span>\r\n<span class=\"hljs-type\">void</span>  <span class=\"hljs-title function_\">traverse</span><span class=\"hljs-params\">()</span>\r\n{\r\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>  <span class=\"hljs-title\">node</span>  *<span class=\"hljs-title\">p</span> , *<span class=\"hljs-title\">follow</span> ;</span>\r\n  <span class=\"hljs-keyword\">if</span>(first==<span class=\"hljs-literal\">NULL</span>)\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Circularly Linked List Empty&quot;</span>) ;\r\n  <span class=\"hljs-keyword\">else</span>\r\n  {\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Circularly Linked List is as shown: \\n&quot;</span>) ;\r\n\r\n    p=first ;\r\n    follow = <span class=\"hljs-literal\">NULL</span> ;\r\n    <span class=\"hljs-keyword\">while</span>(follow!=last)\r\n    {\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span> , p-&gt;data) ;\r\n      follow=p ;\r\n      p=p-&gt;next ;\r\n    }\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>) ;\r\n  }\r\n}\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n  <span class=\"hljs-type\">int</span>  x , k , ch ;\r\n  clrscr() ;\r\n  <span class=\"hljs-keyword\">do</span>\r\n  {\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n Menu: \\n&quot;</span>) ;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1:Create Linked List \\n&quot;</span>) ;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;2:Delete Node \\n&quot;</span>) ;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;3:Traverse \\n&quot;</span>) ;\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;4:Exit \\n&quot;</span>) ;\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nEnter your choice: &quot;</span>) ;\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;ch) ;\r\n\r\n    <span class=\"hljs-keyword\">switch</span>(ch)\r\n    {\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\r\n      create() ;\r\n      <span class=\"hljs-keyword\">break</span> ;\r\n\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\r\n      <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the data value of the node to be deleted: &quot;</span>) ;\r\n      <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;k) ;\r\n      deletenode(k) ;\r\n      <span class=\"hljs-keyword\">break</span> ;\r\n\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\r\n      traverse() ;\r\n      <span class=\"hljs-keyword\">break</span> ;\r\n\r\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\r\n      <span class=\"hljs-keyword\">break</span> ;\r\n    }\r\n }\r\n <span class=\"hljs-keyword\">while</span>(ch!=<span class=\"hljs-number\">4</span>) ;\r\n\r\n getch() ;\r\n}\r\n\r\n\r\n\r\n"
    },
    "ruby": {
      "dir": "data_structures/linked_lists/circular_linked_list.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/linked_lists/circular_linked_list.rb",
      "code": "<span class=\"hljs-comment\"># Define a node for the list</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span></span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:value</span>, <span class=\"hljs-symbol\">:next</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(value)</span></span>\n    <span class=\"hljs-variable\">@value</span> = value\n    <span class=\"hljs-variable\">@next</span> = <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># Class for circular linked list (last node points to the head node)</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CircularList</span></span>\n  <span class=\"hljs-keyword\">attr_reader</span> <span class=\"hljs-symbol\">:head</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span></span>\n    <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_tail</span><span class=\"hljs-params\">(value)</span></span>\n    newNode = Node.new(value)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n      <span class=\"hljs-variable\">@head</span> = newNode\n      <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n    <span class=\"hljs-keyword\">else</span>\n      tempNode = <span class=\"hljs-variable\">@head</span>\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">while</span> tempNode.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      newNode.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n      tempNode.<span class=\"hljs-keyword\">next</span> = newNode\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_head</span><span class=\"hljs-params\">(value)</span></span>\n    newNode = Node.new(value)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n      <span class=\"hljs-variable\">@head</span> = newNode\n      <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> = head\n    <span class=\"hljs-keyword\">else</span>\n      tempNode = <span class=\"hljs-variable\">@head</span>\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">while</span> tempNode.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      newNode.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n      tempNode.<span class=\"hljs-keyword\">next</span> = newNode\n      <span class=\"hljs-variable\">@head</span> = newNode\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_list</span></span>\n    print <span class=\"hljs-string\">&#x27;[&#x27;</span>\n    <span class=\"hljs-keyword\">unless</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n      printNode = <span class=\"hljs-variable\">@head</span>\n      <span class=\"hljs-keyword\">while</span> printNode.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n        print printNode.value.to_s\n        print <span class=\"hljs-string\">&#x27;, &#x27;</span>\n        printNode = printNode.<span class=\"hljs-keyword\">next</span>\n      <span class=\"hljs-keyword\">end</span>\n      print printNode.value\n    <span class=\"hljs-keyword\">end</span>\n    print <span class=\"hljs-string\">&#x27;]&#x27;</span>\n\n    puts(STDOUT.flush)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">delete_head</span></span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      newHead = <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span>\n      tempNode = newHead\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">while</span> tempNode.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      tempNode.<span class=\"hljs-keyword\">next</span> = newHead\n      <span class=\"hljs-variable\">@head</span> = newHead\n    <span class=\"hljs-keyword\">elsif</span> !<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>? &amp;&amp; (<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> == <span class=\"hljs-variable\">@head</span>)\n      <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">delete_tail</span></span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      tempNode = <span class=\"hljs-variable\">@head</span>\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">while</span> tempNode.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-keyword\">next</span> != <span class=\"hljs-variable\">@head</span>\n      tempNode.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n    <span class=\"hljs-keyword\">elsif</span> !<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>? &amp;&amp; (<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span> == <span class=\"hljs-variable\">@head</span>)\n      <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">is_empty</span></span>\n    <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nobj = CircularList.new\n\nobj.insert_tail(<span class=\"hljs-number\">1</span>)\nobj.insert_tail(<span class=\"hljs-number\">2</span>)\nobj.insert_tail(<span class=\"hljs-number\">3</span>)\nobj.insert_tail(<span class=\"hljs-number\">4</span>)\nobj.insert_tail(<span class=\"hljs-number\">5</span>)\nobj.print_list\n\nobj.insert_head(<span class=\"hljs-number\">6</span>)\nobj.print_list\n\nobj.delete_tail\nobj.print_list\n\nobj.delete_head\nobj.print_list\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "onlinejudge95",
      "email": "44158581+onlinejudge95@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "NEERAJ ADITYANANTH POLAMPALLI",
      "email": "65017645+NEERAJAP2001@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
