{
  "slug": "twopointers",
  "name": "TwoPointers",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/TwoPointers.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/TwoPointers.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-comment\">/**\n * The two pointer technique is a useful tool to utilize when searching for pairs in a sorted array.\n *\n * &lt;p&gt;link: https://www.geeksforgeeks.org/two-pointers-technique/\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TwoPointers</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">int</span>[] arr = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">80</span>};\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">70</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isPairedSum</span><span class=\"hljs-params\">(arr, key)</span>; <span class=\"hljs-comment\">/* 20 + 60 == 70 */</span>\n\n    arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>};\n    key = <span class=\"hljs-number\">13</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isPairedSum</span><span class=\"hljs-params\">(arr, key)</span>; <span class=\"hljs-comment\">/* 6 + 7 == 13 */</span>\n\n    key = <span class=\"hljs-number\">14</span>;\n    <span class=\"hljs-keyword\">assert</span> !isPairedSum(arr, key);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Given a sorted array arr (sorted in ascending order). Find if there exists any pair of elements\n   * such that their sum is equal to key.\n   *\n   * <span class=\"hljs-doctag\">@param</span> arr the array contains elements\n   * <span class=\"hljs-doctag\">@param</span> key the number to search\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if there exists a pair of elements, {<span class=\"hljs-doctag\">@code</span> false} otherwise.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPairedSum</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-comment\">/* array sorting is necessary for this algorithm to function correctly */</span>\n    Arrays.sort(arr);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">/* index of first element */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> arr.length - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">/* index of last element */</span>\n\n    <span class=\"hljs-keyword\">while</span> (i &lt; j) {\n      <span class=\"hljs-keyword\">if</span> (arr[i] + arr[j] == key) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (arr[i] + arr[j] &lt; key) {\n        i++;\n      } <span class=\"hljs-keyword\">else</span> {\n        j--;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
