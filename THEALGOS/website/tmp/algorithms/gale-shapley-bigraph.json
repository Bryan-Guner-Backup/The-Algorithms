{
  "slug": "gale-shapley-bigraph",
  "name": "Gale Shapley Bigraph",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/gale_shapley_bigraph.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/gale_shapley_bigraph.py",
      "code": "<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">stable_matching</span>(<span class=\"hljs-params\">\n    donor_pref: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]], recipient_pref: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]]\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Finds the stable match in any bipartite graph, i.e a pairing where no 2 objects\n    prefer each other over their partner.  The function accepts the preferences of\n    oegan donors and recipients (where both are assigned numbers from 0 to n-1) and\n    returns a list where the index position corresponds to the donor and value at the\n    index is the organ recipient.\n\n    To better understand the algorithm, see also:\n    https://github.com/akashvshroff/Gale_Shapley_Stable_Matching (README).\n    https://www.youtube.com/watch?v=Qcv1IqHWAzg&amp;t=13s (Numberphile YouTube).\n\n    &gt;&gt;&gt; donor_pref = [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]]\n    &gt;&gt;&gt; recipient_pref = [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]]\n    &gt;&gt;&gt; print(stable_matching(donor_pref, recipient_pref))\n    [1, 2, 3, 0]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(donor_pref) == <span class=\"hljs-built_in\">len</span>(recipient_pref)\n\n    n = <span class=\"hljs-built_in\">len</span>(donor_pref)\n    unmatched_donors = <span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">range</span>(n))\n    donor_record = [-<span class=\"hljs-number\">1</span>] * n  <span class=\"hljs-comment\"># who the donor has donated to</span>\n    rec_record = [-<span class=\"hljs-number\">1</span>] * n  <span class=\"hljs-comment\"># who the recipient has received from</span>\n    num_donations = [<span class=\"hljs-number\">0</span>] * n\n\n    <span class=\"hljs-keyword\">while</span> unmatched_donors:\n        donor = unmatched_donors[<span class=\"hljs-number\">0</span>]\n        donor_preference = donor_pref[donor]\n        recipient = donor_preference[num_donations[donor]]\n        num_donations[donor] += <span class=\"hljs-number\">1</span>\n        rec_preference = recipient_pref[recipient]\n        prev_donor = rec_record[recipient]\n\n        <span class=\"hljs-keyword\">if</span> prev_donor != -<span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">if</span> rec_preference.index(prev_donor) &gt; rec_preference.index(donor):\n                rec_record[recipient] = donor\n                donor_record[donor] = recipient\n                unmatched_donors.append(prev_donor)\n                unmatched_donors.remove(donor)\n        <span class=\"hljs-keyword\">else</span>:\n            rec_record[recipient] = donor\n            donor_record[donor] = recipient\n            unmatched_donors.remove(donor)\n    <span class=\"hljs-keyword\">return</span> donor_record\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "hasan",
      "email": "hasanuli10@gmail.com",
      "commits": 1
    },
    {
      "name": "Akash Shroff",
      "email": "63399889+akashvshroff@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
