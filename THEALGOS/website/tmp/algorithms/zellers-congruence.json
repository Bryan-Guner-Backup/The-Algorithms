{
  "slug": "zellers-congruence",
  "name": "Zellers Congruence",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/zellers_congruence.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/zellers_congruence.py",
      "code": "<span class=\"hljs-keyword\">import</span> argparse\n<span class=\"hljs-keyword\">import</span> datetime\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">zeller</span>(<span class=\"hljs-params\">date_input: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Zellers Congruence Algorithm\n    Find the day of the week for nearly any Gregorian or Julian calendar date\n\n    &gt;&gt;&gt; zeller(&#x27;01-31-2010&#x27;)\n    &#x27;Your date 01-31-2010, is a Sunday!&#x27;\n\n    Validate out of range month\n    &gt;&gt;&gt; zeller(&#x27;13-31-2010&#x27;)\n    Traceback (most recent call last):\n    ...\n    ValueError: Month must be between 1 - 12\n    &gt;&gt;&gt; zeller(&#x27;.2-31-2010&#x27;)\n    Traceback (most recent call last):\n    ...\n    ValueError: invalid literal for int() with base 10: &#x27;.2&#x27;\n\n    Validate out of range date:\n    &gt;&gt;&gt; zeller(&#x27;01-33-2010&#x27;)\n    Traceback (most recent call last):\n        ...\n    ValueError: Date must be between 1 - 31\n    &gt;&gt;&gt; zeller(&#x27;01-.4-2010&#x27;)\n    Traceback (most recent call last):\n        ...\n    ValueError: invalid literal for int() with base 10: &#x27;.4&#x27;\n\n    Validate second separator:\n    &gt;&gt;&gt; zeller(&#x27;01-31*2010&#x27;)\n    Traceback (most recent call last):\n        ...\n    ValueError: Date separator must be &#x27;-&#x27; or &#x27;/&#x27;\n\n    Validate first separator:\n    &gt;&gt;&gt; zeller(&#x27;01^31-2010&#x27;)\n    Traceback (most recent call last):\n        ...\n    ValueError: Date separator must be &#x27;-&#x27; or &#x27;/&#x27;\n\n    Validate out of range year:\n    &gt;&gt;&gt; zeller(&#x27;01-31-8999&#x27;)\n    Traceback (most recent call last):\n        ...\n    ValueError: Year out of range. There has to be some sort of limit...right?\n\n    Test null input:\n    &gt;&gt;&gt; zeller()\n    Traceback (most recent call last):\n        ...\n    TypeError: zeller() missing 1 required positional argument: &#x27;date_input&#x27;\n\n    Test length of date_input:\n    &gt;&gt;&gt; zeller(&#x27;&#x27;)\n    Traceback (most recent call last):\n        ...\n    ValueError: Must be 10 characters long\n    &gt;&gt;&gt; zeller(&#x27;01-31-19082939&#x27;)\n    Traceback (most recent call last):\n        ...\n    ValueError: Must be 10 characters long&quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># Days of the week for response</span>\n    days = {\n        <span class=\"hljs-string\">&quot;0&quot;</span>: <span class=\"hljs-string\">&quot;Sunday&quot;</span>,\n        <span class=\"hljs-string\">&quot;1&quot;</span>: <span class=\"hljs-string\">&quot;Monday&quot;</span>,\n        <span class=\"hljs-string\">&quot;2&quot;</span>: <span class=\"hljs-string\">&quot;Tuesday&quot;</span>,\n        <span class=\"hljs-string\">&quot;3&quot;</span>: <span class=\"hljs-string\">&quot;Wednesday&quot;</span>,\n        <span class=\"hljs-string\">&quot;4&quot;</span>: <span class=\"hljs-string\">&quot;Thursday&quot;</span>,\n        <span class=\"hljs-string\">&quot;5&quot;</span>: <span class=\"hljs-string\">&quot;Friday&quot;</span>,\n        <span class=\"hljs-string\">&quot;6&quot;</span>: <span class=\"hljs-string\">&quot;Saturday&quot;</span>,\n    }\n\n    convert_datetime_days = {<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">6</span>: <span class=\"hljs-number\">0</span>}\n\n    <span class=\"hljs-comment\"># Validate</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt; <span class=\"hljs-built_in\">len</span>(date_input) &lt; <span class=\"hljs-number\">11</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Must be 10 characters long&quot;</span>)\n\n    <span class=\"hljs-comment\"># Get month</span>\n    m: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(date_input[<span class=\"hljs-number\">0</span>] + date_input[<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-comment\"># Validate</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt; m &lt; <span class=\"hljs-number\">13</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Month must be between 1 - 12&quot;</span>)\n\n    sep_1: <span class=\"hljs-built_in\">str</span> = date_input[<span class=\"hljs-number\">2</span>]\n    <span class=\"hljs-comment\"># Validate</span>\n    <span class=\"hljs-keyword\">if</span> sep_1 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>]:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Date separator must be &#x27;-&#x27; or &#x27;/&#x27;&quot;</span>)\n\n    <span class=\"hljs-comment\"># Get day</span>\n    d: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(date_input[<span class=\"hljs-number\">3</span>] + date_input[<span class=\"hljs-number\">4</span>])\n    <span class=\"hljs-comment\"># Validate</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt; d &lt; <span class=\"hljs-number\">32</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Date must be between 1 - 31&quot;</span>)\n\n    <span class=\"hljs-comment\"># Get second separator</span>\n    sep_2: <span class=\"hljs-built_in\">str</span> = date_input[<span class=\"hljs-number\">5</span>]\n    <span class=\"hljs-comment\"># Validate</span>\n    <span class=\"hljs-keyword\">if</span> sep_2 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> [<span class=\"hljs-string\">&quot;-&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>]:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Date separator must be &#x27;-&#x27; or &#x27;/&#x27;&quot;</span>)\n\n    <span class=\"hljs-comment\"># Get year</span>\n    y: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(date_input[<span class=\"hljs-number\">6</span>] + date_input[<span class=\"hljs-number\">7</span>] + date_input[<span class=\"hljs-number\">8</span>] + date_input[<span class=\"hljs-number\">9</span>])\n    <span class=\"hljs-comment\"># Arbitrary year range</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">45</span> &lt; y &lt; <span class=\"hljs-number\">8500</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">&quot;Year out of range. There has to be some sort of limit...right?&quot;</span>\n        )\n\n    <span class=\"hljs-comment\"># Get datetime obj for validation</span>\n    dt_ck = datetime.date(<span class=\"hljs-built_in\">int</span>(y), <span class=\"hljs-built_in\">int</span>(m), <span class=\"hljs-built_in\">int</span>(d))\n\n    <span class=\"hljs-comment\"># Start math</span>\n    <span class=\"hljs-keyword\">if</span> m &lt;= <span class=\"hljs-number\">2</span>:\n        y = y - <span class=\"hljs-number\">1</span>\n        m = m + <span class=\"hljs-number\">12</span>\n    <span class=\"hljs-comment\"># maths var</span>\n    c: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">str</span>(y)[:<span class=\"hljs-number\">2</span>])\n    k: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">str</span>(y)[<span class=\"hljs-number\">2</span>:])\n    t: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-number\">2.6</span> * m - <span class=\"hljs-number\">5.39</span>)\n    u: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(c / <span class=\"hljs-number\">4</span>)\n    v: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(k / <span class=\"hljs-number\">4</span>)\n    x: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(d + k)\n    z: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(t + u + v + x)\n    w: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">int</span>(z - (<span class=\"hljs-number\">2</span> * c))\n    f: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">round</span>(w % <span class=\"hljs-number\">7</span>)\n    <span class=\"hljs-comment\"># End math</span>\n\n    <span class=\"hljs-comment\"># Validate math</span>\n    <span class=\"hljs-keyword\">if</span> f != convert_datetime_days[dt_ck.weekday()]:\n        <span class=\"hljs-keyword\">raise</span> AssertionError(<span class=\"hljs-string\">&quot;The date was evaluated incorrectly. Contact developer.&quot;</span>)\n\n    <span class=\"hljs-comment\"># Response</span>\n    response: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">f&quot;Your date <span class=\"hljs-subst\">{date_input}</span>, is a <span class=\"hljs-subst\">{days[<span class=\"hljs-built_in\">str</span>(f)]}</span>!&quot;</span>\n    <span class=\"hljs-keyword\">return</span> response\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    parser = argparse.ArgumentParser(\n        description=(\n            <span class=\"hljs-string\">&quot;Find out what day of the week nearly any date is or was. Enter &quot;</span>\n            <span class=\"hljs-string\">&quot;date as a string in the mm-dd-yyyy or mm/dd/yyyy format&quot;</span>\n        )\n    )\n    parser.add_argument(\n        <span class=\"hljs-string\">&quot;date_input&quot;</span>, <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">help</span>=<span class=\"hljs-string\">&quot;Date as a string (mm-dd-yyyy or mm/dd/yyyy)&quot;</span>\n    )\n    args = parser.parse_args()\n    zeller(args.date_input)\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Marvin M. Michum",
      "email": "mrvnmchm@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
