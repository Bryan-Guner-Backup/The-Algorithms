{
  "slug": "closest-pair-of-points",
  "name": "Closest Pair of Points",
  "categories": ["divideandconquer"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "divide_and_conquer/closest_pair_of_points.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/divide_and_conquer/closest_pair_of_points.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThe algorithm finds distance between closest pair of points\nin the given n points.\nApproach used -&gt; Divide and conquer\nThe points are sorted based on Xco-ords and\nthen based on Yco-ords separately.\nAnd by applying divide and conquer approach,\nminimum distance is obtained recursively.\n\n&gt;&gt; Closest points can lie on different sides of partition.\nThis case handled by forming a strip of points\nwhose Xco-ords distance is less than closest_pair_dis\nfrom mid-point&#x27;s Xco-ords. Points sorted based on Yco-ords\nare used in this step to reduce sorting time.\nClosest pair distance is found in the strip of points. (closest_in_strip)\n\nmin(closest_pair_dis, closest_in_strip) would be the final answer.\n\nTime complexity: O(n * log n)\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidean_distance_sqr</span>(<span class=\"hljs-params\">point1, point2</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; euclidean_distance_sqr([1,2],[2,4])\n    5\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> (point1[<span class=\"hljs-number\">0</span>] - point2[<span class=\"hljs-number\">0</span>]) ** <span class=\"hljs-number\">2</span> + (point1[<span class=\"hljs-number\">1</span>] - point2[<span class=\"hljs-number\">1</span>]) ** <span class=\"hljs-number\">2</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">column_based_sort</span>(<span class=\"hljs-params\">array, column=<span class=\"hljs-number\">0</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; column_based_sort([(5, 1), (4, 2), (3, 0)], 1)\n    [(3, 0), (5, 1), (4, 2)]\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sorted</span>(array, key=<span class=\"hljs-keyword\">lambda</span> x: x[column])\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dis_between_closest_pair</span>(<span class=\"hljs-params\">points, points_counts, min_dis=<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;inf&quot;</span></span>)</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    brute force approach to find distance between closest pair points\n\n    Parameters :\n    points, points_count, min_dis (list(tuple(int, int)), int, int)\n\n    Returns :\n    min_dis (float):  distance between closest pair of points\n\n    &gt;&gt;&gt; dis_between_closest_pair([[1,2],[2,4],[5,7],[8,9],[11,0]],5)\n    5\n\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(points_counts - <span class=\"hljs-number\">1</span>):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, points_counts):\n            current_dis = euclidean_distance_sqr(points[i], points[j])\n            <span class=\"hljs-keyword\">if</span> current_dis &lt; min_dis:\n                min_dis = current_dis\n    <span class=\"hljs-keyword\">return</span> min_dis\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dis_between_closest_in_strip</span>(<span class=\"hljs-params\">points, points_counts, min_dis=<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;inf&quot;</span></span>)</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    closest pair of points in strip\n\n    Parameters :\n    points, points_count, min_dis (list(tuple(int, int)), int, int)\n\n    Returns :\n    min_dis (float):  distance btw closest pair of points in the strip (&lt; min_dis)\n\n    &gt;&gt;&gt; dis_between_closest_in_strip([[1,2],[2,4],[5,7],[8,9],[11,0]],5)\n    85\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">min</span>(<span class=\"hljs-number\">6</span>, points_counts - <span class=\"hljs-number\">1</span>), points_counts):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-number\">0</span>, i - <span class=\"hljs-number\">6</span>), i):\n            current_dis = euclidean_distance_sqr(points[i], points[j])\n            <span class=\"hljs-keyword\">if</span> current_dis &lt; min_dis:\n                min_dis = current_dis\n    <span class=\"hljs-keyword\">return</span> min_dis\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">closest_pair_of_points_sqr</span>(<span class=\"hljs-params\">points_sorted_on_x, points_sorted_on_y, points_counts</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;divide and conquer approach\n\n    Parameters :\n    points, points_count (list(tuple(int, int)), int)\n\n    Returns :\n    (float):  distance btw closest pair of points\n\n    &gt;&gt;&gt; closest_pair_of_points_sqr([(1, 2), (3, 4)], [(5, 6), (7, 8)], 2)\n    8\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># base case</span>\n    <span class=\"hljs-keyword\">if</span> points_counts &lt;= <span class=\"hljs-number\">3</span>:\n        <span class=\"hljs-keyword\">return</span> dis_between_closest_pair(points_sorted_on_x, points_counts)\n\n    <span class=\"hljs-comment\"># recursion</span>\n    mid = points_counts // <span class=\"hljs-number\">2</span>\n    closest_in_left = closest_pair_of_points_sqr(\n        points_sorted_on_x, points_sorted_on_y[:mid], mid\n    )\n    closest_in_right = closest_pair_of_points_sqr(\n        points_sorted_on_y, points_sorted_on_y[mid:], points_counts - mid\n    )\n    closest_pair_dis = <span class=\"hljs-built_in\">min</span>(closest_in_left, closest_in_right)\n\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    cross_strip contains the points, whose Xcoords are at a\n    distance(&lt; closest_pair_dis) from mid&#x27;s Xcoord\n    &quot;&quot;&quot;</span>\n\n    cross_strip = []\n    <span class=\"hljs-keyword\">for</span> point <span class=\"hljs-keyword\">in</span> points_sorted_on_x:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">abs</span>(point[<span class=\"hljs-number\">0</span>] - points_sorted_on_x[mid][<span class=\"hljs-number\">0</span>]) &lt; closest_pair_dis:\n            cross_strip.append(point)\n\n    closest_in_strip = dis_between_closest_in_strip(\n        cross_strip, <span class=\"hljs-built_in\">len</span>(cross_strip), closest_pair_dis\n    )\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">min</span>(closest_pair_dis, closest_in_strip)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">closest_pair_of_points</span>(<span class=\"hljs-params\">points, points_counts</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; closest_pair_of_points([(2, 3), (12, 30)], len([(2, 3), (12, 30)]))\n    28.792360097775937\n    &quot;&quot;&quot;</span>\n    points_sorted_on_x = column_based_sort(points, column=<span class=\"hljs-number\">0</span>)\n    points_sorted_on_y = column_based_sort(points, column=<span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">return</span> (\n        closest_pair_of_points_sqr(\n            points_sorted_on_x, points_sorted_on_y, points_counts\n        )\n    ) ** <span class=\"hljs-number\">0.5</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    points = [(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>), (<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">30</span>), (<span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>), (<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>), (<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">10</span>), (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)]\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Distance:&quot;</span>, closest_pair_of_points(points, <span class=\"hljs-built_in\">len</span>(points)))\n"
    }
  },
  "contributors": [
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rsun0013",
      "email": "50036197+rsun0013@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Dharni0607",
      "email": "30770547+Dharni0607@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
