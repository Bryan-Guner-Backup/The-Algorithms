{
  "slug": "rat-maze",
  "name": "Rat Maze",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "backtracking/rat_maze.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/rat_maze.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implements [Rat in a\n * Maze](https://www.codesdope.com/blog/article/backtracking-to-\n * solve-a-rat-in-a-maze-c-java-pytho/) algorithm\n *\n * @details\n * A Maze is given as N*N binary matrix of blocks where source block is the\n * upper left most block i.e., maze[0][0] and destination block is lower\n * rightmost block i.e., maze[N-1][N-1]. A rat starts from source and has to\n * reach destination. The rat can move only in two directions: forward and down.\n * In the maze matrix, 0 means the block is dead end and 1 means the block can\n * be used in the path from source to destination.\n *\n * @author [Vaibhav Thakkar](https://github.com/vaithak)\n * @author [David Leal](https://github.com/Panquesito7)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n<span class=\"hljs-comment\">/**\n * @namespace rat_maze\n * @brief Functions for [Rat in a\n * Maze](https://www.codesdope.com/blog/article/backtracking-to-\n * solve-a-rat-in-a-maze-c-java-pytho/) algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> rat_maze {\n<span class=\"hljs-comment\">/**\n * @brief Solve rat maze problem\n * @tparam size number of matrix size\n * @param currposrow current position in rows\n * @param currposcol current position in columns\n * @param maze matrix where numbers are saved\n * @param soln matrix to problem solution\n * @returns 0 on end\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> size&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">solveMaze</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> currposrow, <span class=\"hljs-type\">int</span> currposcol,\n              <span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, size&gt;, size&gt; &amp;maze,\n              std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, size&gt;, size&gt; soln)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> ((currposrow == size - <span class=\"hljs-number\">1</span>) &amp;&amp; (currposcol == size - <span class=\"hljs-number\">1</span>)) {\n        soln[currposrow][currposcol] = <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; size; ++j) {\n                std::cout &lt;&lt; soln[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n            }\n            std::cout &lt;&lt; std::endl;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        soln[currposrow][currposcol] = <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-comment\">// if there exist a solution by moving one step ahead in a column</span>\n        <span class=\"hljs-keyword\">if</span> ((currposcol &lt; size - <span class=\"hljs-number\">1</span>) &amp;&amp; maze[currposrow][currposcol + <span class=\"hljs-number\">1</span>] == <span class=\"hljs-number\">1</span> &amp;&amp;\n            <span class=\"hljs-built_in\">solveMaze</span>(currposrow, currposcol + <span class=\"hljs-number\">1</span>, maze, soln)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-comment\">// if there exists a solution by moving one step ahead in a row</span>\n        <span class=\"hljs-keyword\">if</span> ((currposrow &lt; size - <span class=\"hljs-number\">1</span>) &amp;&amp; maze[currposrow + <span class=\"hljs-number\">1</span>][currposcol] == <span class=\"hljs-number\">1</span> &amp;&amp;\n            <span class=\"hljs-built_in\">solveMaze</span>(currposrow + <span class=\"hljs-number\">1</span>, currposcol, maze, soln)) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-comment\">// the backtracking part</span>\n        soln[currposrow][currposcol] = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n}  <span class=\"hljs-comment\">// namespace rat_maze</span>\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> size = <span class=\"hljs-number\">4</span>;\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, size&gt;, size&gt; maze = {\n        std::array&lt;<span class=\"hljs-type\">int</span>, size&gt;{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>}, std::array&lt;<span class=\"hljs-type\">int</span>, size&gt;{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>},\n        std::array&lt;<span class=\"hljs-type\">int</span>, size&gt;{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>}, std::array&lt;<span class=\"hljs-type\">int</span>, size&gt;{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}};\n\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, size&gt;, size&gt; soln{};\n\n    <span class=\"hljs-comment\">// Backtracking: setup matrix solution to zero</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; size; ++j) {\n            soln[i][j] = <span class=\"hljs-number\">0</span>;\n        }\n    }\n\n    <span class=\"hljs-type\">int</span> currposrow = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// Current position in rows</span>\n    <span class=\"hljs-type\">int</span> currposcol = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// Current position in columns</span>\n\n    <span class=\"hljs-built_in\">assert</span>(backtracking::rat_maze::<span class=\"hljs-built_in\">solveMaze</span>&lt;size&gt;(currposrow, currposcol, maze,\n                                                   soln) == <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>(); <span class=\"hljs-comment\">// run the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vaibhav Thakkar",
      "email": "vaibhav.thakkar.22.12.99@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
