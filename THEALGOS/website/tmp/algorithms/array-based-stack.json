{
  "slug": "array-based-stack",
  "name": "Array-based Stack",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "DataStructures/Stack/ArrayBasedStack.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/DataStructures/Stack/ArrayBasedStack.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Stack</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Implementation of an array-based stack. LIFO style.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Generic Type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayBasedStack</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">int</span> DefaultCapacity = <span class=\"hljs-number\">10</span>;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">string</span> StackEmptyErrorMessage = <span class=\"hljs-string\">&quot;Stack is empty&quot;</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     <span class=\"hljs-doctag\">&lt;see cref=&quot;Array&quot; /&gt;</span> based stack.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> T[] stack;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     How many items are in the stack right now.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> top;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayBasedStack</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            stack = <span class=\"hljs-keyword\">new</span> T[DefaultCapacity];\n            top = <span class=\"hljs-number\">-1</span>;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>Item to push onto the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayBasedStack</span>(<span class=\"hljs-params\">T item</span>)\n            : <span class=\"hljs-title\">this</span>(<span class=\"hljs-params\"></span>)</span> =&gt; Push(item);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;items&quot;&gt;</span>Items to push onto the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayBasedStack</span>(<span class=\"hljs-params\">IEnumerable&lt;T&gt; items</span>)\n            : <span class=\"hljs-title\">this</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> item <span class=\"hljs-keyword\">in</span> items)\n            {\n                Push(item);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets the number of elements on the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Top =&gt; top;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets or sets the Capacity of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> Capacity\n        {\n            <span class=\"hljs-keyword\">get</span> =&gt; stack.Length;\n            <span class=\"hljs-keyword\">set</span> =&gt; Array.Resize(<span class=\"hljs-keyword\">ref</span> stack, <span class=\"hljs-keyword\">value</span>);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes all items from the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Clear</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            top = <span class=\"hljs-number\">-1</span>;\n            Capacity = DefaultCapacity;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Determines whether an element is in the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>The item to locate in the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>True, if the item is in the stack.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">Contains</span>(<span class=\"hljs-params\">T item</span>)</span> =&gt; Array.IndexOf(stack, item, <span class=\"hljs-number\">0</span>, top + <span class=\"hljs-number\">1</span>) &gt; <span class=\"hljs-number\">-1</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns the item at the top of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span> without removing it.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The item at the top of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Peek</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-number\">-1</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(StackEmptyErrorMessage);\n            }\n\n            <span class=\"hljs-keyword\">return</span> stack[top];\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Removes and returns the item at the top of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The item removed from the top of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Pop</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-number\">-1</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(StackEmptyErrorMessage);\n            }\n\n            <span class=\"hljs-keyword\">return</span> stack[top--];\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Inserts an item at the top of the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;item&quot;&gt;</span>The item to push onto the <span class=\"hljs-doctag\">&lt;see cref=&quot;ArrayBasedStack{T}&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Push</span>(<span class=\"hljs-params\">T item</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (top == Capacity - <span class=\"hljs-number\">1</span>)\n            {\n                Capacity *= <span class=\"hljs-number\">2</span>;\n            }\n\n            stack[++top] = item;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Mateus Ramos da Silva",
      "email": "45329846+BoltzBit@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Nagesh Andani",
      "email": "NageshAndani@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anna",
      "email": "31920806+afoix@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Leon",
      "email": "90090638-eeef-422f-995a-368ece248278@4wrd.cc",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
