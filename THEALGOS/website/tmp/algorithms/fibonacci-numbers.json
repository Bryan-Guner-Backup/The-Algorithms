{
  "slug": "fibonacci-numbers",
  "name": "Fibonacci Numbers",
  "categories": ["dynamicprogramming"],
  "body": {
    "en": "<p>In mathematics, the Fibonacci numbers commonly denoted F(n), form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1.  The Sequence looks like this:</p>\n<p><code>[0, 1, 1, 2, 3, 5, 8, 13, 21, 34,  ...]</code></p>\n<h2>Applications</h2>\n<p>Finding\n<code>N-th</code> member of this sequence would be useful in many Applications:</p>\n<ul>\n<li>Recently Fibonacci sequence and the golden ratio are of great interest to researchers in many fields of</li>\n</ul>\n<p>science including high energy physics, quantum mechanics, Cryptography and Coding.</p>\n<h2>Steps</h2>\n<ol>\n<li>Prepare Base Matrice</li>\n<li>Calculate the power of this Matrice</li>\n<li>Take Corresponding value from Matrix</li>\n</ol>\n<h2>Example</h2>\n<p>Find <code>8-th</code> member of Fibonacci</p>\n<h3>Step 0</h3>\n<pre><code class=\"hljs language-reasonml\"><span class=\"hljs-pattern-match\">| <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>+1)</span>  <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>)</span>  |\n| <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>)</span>    <span class=\"hljs-constructor\">F(<span class=\"hljs-params\">n</span>-1)</span>|\n</span></code></pre>\n<h3>Step 1</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^1\n|<span class=\"hljs-string\"> 1 1 </span>|\n|<span class=\"hljs-string\"> 1 0 </span>|\n</code></pre>\n<h3>Step 2</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^2\n|<span class=\"hljs-string\"> 2 1 </span>|\n|<span class=\"hljs-string\"> 1 1 </span>|\n</code></pre>\n<h3>Step 3</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^4\n|<span class=\"hljs-string\"> 5 3 </span>|\n|<span class=\"hljs-string\"> 3 2 </span>|\n</code></pre>\n<h3>Step 4</h3>\n<pre><code class=\"hljs language-gherkin\">Calculate matrix^8\n|<span class=\"hljs-string\"> 34 21 </span>|\n|<span class=\"hljs-string\"> 21 13 </span>|\n</code></pre>\n<h3>Step 5</h3>\n<p>F(8)=21</p>\n<h2>Implementation</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/math/fibonacci.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Maths/FibonacciNumber.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/80c2dc85d714f73783f133964d6acd9b5625ddd9/Maths/Fibonacci.js\">Javascript</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/maths/fibonacci.py\">Python</a></li>\n</ul>\n<h2>Video URL</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=EEb6JP3NXBI\">Youtube</a></li>\n</ul>\n<h2>Others</h2>\n<ul>\n<li><a href=\"https://brilliant.org/wiki/fast-fibonacci-transform/\">Proof</a></li>\n</ul>"
  },
  "implementations": {
    "python": {
      "dir": "maths/fibonacci.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/fibonacci.py",
      "code": "<span class=\"hljs-comment\"># fibonacci.py</span>\r\n<span class=\"hljs-string\">&quot;&quot;&quot;\r\n1. Calculates the iterative fibonacci sequence\r\n\r\n2. Calculates the fibonacci sequence with a formula\r\n    an = [ Phin - (phi)n ]/Sqrt[5]\r\n    reference--&gt;Su, Francis E., et al. &quot;Fibonacci Number Formula.&quot; Math Fun Facts.\r\n    &lt;http://www.math.hmc.edu/funfacts&gt;\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">import</span> functools\r\n<span class=\"hljs-keyword\">import</span> math\r\n<span class=\"hljs-keyword\">import</span> time\r\n<span class=\"hljs-keyword\">from</span> decimal <span class=\"hljs-keyword\">import</span> Decimal, getcontext\r\n\r\ngetcontext().prec = <span class=\"hljs-number\">100</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">timer_decorator</span>(<span class=\"hljs-params\">func</span>):\r\n<span class=\"hljs-meta\">    @functools.wraps(<span class=\"hljs-params\">func</span>)</span>\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">timer_wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\r\n        start = time.time()\r\n        func(*args, **kwargs)\r\n        end = time.time()\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">int</span>(end - start) &gt; <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Run time for <span class=\"hljs-subst\">{func.__name__}</span>: <span class=\"hljs-subst\">{(end - start):<span class=\"hljs-number\">0.2</span>f}</span>s&quot;</span>)\r\n        <span class=\"hljs-keyword\">else</span>:\r\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Run time for <span class=\"hljs-subst\">{func.__name__}</span>: <span class=\"hljs-subst\">{(end - start)*<span class=\"hljs-number\">1000</span>:<span class=\"hljs-number\">0.2</span>f}</span>ms&quot;</span>)\r\n        <span class=\"hljs-keyword\">return</span> func(*args, **kwargs)\r\n\r\n    <span class=\"hljs-keyword\">return</span> timer_wrapper\r\n\r\n\r\n<span class=\"hljs-comment\"># define Python user-defined exceptions</span>\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-title class_ inherited__\">Exception</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Base class for other exceptions&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ValueTooLargeError</span>(<span class=\"hljs-title class_ inherited__\">Error</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Raised when the input value is too large&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ValueTooSmallError</span>(<span class=\"hljs-title class_ inherited__\">Error</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Raised when the input value is not greater than one&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ValueLessThanZero</span>(<span class=\"hljs-title class_ inherited__\">Error</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;Raised when the input value is less than zero&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_check_number_input</span>(<span class=\"hljs-params\">n, min_thresh, max_thresh=<span class=\"hljs-literal\">None</span></span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param n: single integer\r\n    :type n: int\r\n    :param min_thresh: min threshold, single integer\r\n    :type min_thresh: int\r\n    :param max_thresh: max threshold, single integer\r\n    :type max_thresh: int\r\n    :return: boolean\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">try</span>:\r\n        <span class=\"hljs-keyword\">if</span> n &gt;= min_thresh <span class=\"hljs-keyword\">and</span> max_thresh <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">elif</span> min_thresh &lt;= n &lt;= max_thresh:\r\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">elif</span> n &lt; <span class=\"hljs-number\">0</span>:\r\n            <span class=\"hljs-keyword\">raise</span> ValueLessThanZero\r\n        <span class=\"hljs-keyword\">elif</span> n &lt; min_thresh:\r\n            <span class=\"hljs-keyword\">raise</span> ValueTooSmallError\r\n        <span class=\"hljs-keyword\">elif</span> n &gt; max_thresh:\r\n            <span class=\"hljs-keyword\">raise</span> ValueTooLargeError\r\n    <span class=\"hljs-keyword\">except</span> ValueLessThanZero:\r\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Incorrect Input: number must not be less than 0&quot;</span>)\r\n    <span class=\"hljs-keyword\">except</span> ValueTooSmallError:\r\n        <span class=\"hljs-built_in\">print</span>(\r\n            <span class=\"hljs-string\">f&quot;Incorrect Input: input number must be &gt; <span class=\"hljs-subst\">{min_thresh}</span> for the recursive &quot;</span>\r\n            <span class=\"hljs-string\">&quot;calculation&quot;</span>\r\n        )\r\n    <span class=\"hljs-keyword\">except</span> ValueTooLargeError:\r\n        <span class=\"hljs-built_in\">print</span>(\r\n            <span class=\"hljs-string\">f&quot;Incorrect Input: input number must be &lt; <span class=\"hljs-subst\">{max_thresh}</span> for the recursive &quot;</span>\r\n            <span class=\"hljs-string\">&quot;calculation&quot;</span>\r\n        )\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\r\n\r\n\r\n<span class=\"hljs-meta\">@timer_decorator</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_iterative</span>(<span class=\"hljs-params\">n</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param n: calculate Fibonacci to the nth integer\r\n    :type n:int\r\n    :return: Fibonacci sequence as a list\r\n    &quot;&quot;&quot;</span>\r\n    n = <span class=\"hljs-built_in\">int</span>(n)\r\n    <span class=\"hljs-keyword\">if</span> _check_number_input(n, <span class=\"hljs-number\">2</span>):\r\n        seq_out = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]\r\n        a, b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\r\n        <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-built_in\">len</span>(seq_out)):\r\n            a, b = b, a + b\r\n            seq_out.append(b)\r\n        <span class=\"hljs-keyword\">return</span> seq_out\r\n\r\n\r\n<span class=\"hljs-meta\">@timer_decorator</span>\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib_formula</span>(<span class=\"hljs-params\">n</span>):\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    :param n: calculate Fibonacci to the nth integer\r\n    :type n:int\r\n    :return: Fibonacci sequence as a list\r\n    &quot;&quot;&quot;</span>\r\n    seq_out = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]\r\n    n = <span class=\"hljs-built_in\">int</span>(n)\r\n    <span class=\"hljs-keyword\">if</span> _check_number_input(n, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1000000</span>):\r\n        sqrt = Decimal(math.sqrt(<span class=\"hljs-number\">5</span>))\r\n        phi_1 = Decimal(<span class=\"hljs-number\">1</span> + sqrt) / Decimal(<span class=\"hljs-number\">2</span>)\r\n        phi_2 = Decimal(<span class=\"hljs-number\">1</span> - sqrt) / Decimal(<span class=\"hljs-number\">2</span>)\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, n):\r\n            temp_out = ((phi_1 ** Decimal(i)) - (phi_2 ** Decimal(i))) * (\r\n                Decimal(sqrt) ** Decimal(-<span class=\"hljs-number\">1</span>)\r\n            )\r\n            seq_out.append(<span class=\"hljs-built_in\">int</span>(temp_out))\r\n        <span class=\"hljs-keyword\">return</span> seq_out\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    num = <span class=\"hljs-number\">20</span>\r\n    <span class=\"hljs-comment\"># print(f&#x27;{fib_recursive(num)}\\n&#x27;)</span>\r\n    <span class=\"hljs-comment\"># print(f&#x27;{fib_iterative(num)}\\n&#x27;)</span>\r\n    <span class=\"hljs-comment\"># print(f&#x27;{fib_formula(num)}\\n&#x27;)</span>\r\n    fib_iterative(num)\r\n    fib_formula(num)\r\n"
    },
    "javascript": {
      "dir": "Maths/Fibonacci.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/Fibonacci.js",
      "code": "<span class=\"hljs-keyword\">const</span> list = []\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciIterative</span> = (<span class=\"hljs-params\">nth</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> sequence = []\n\n  <span class=\"hljs-keyword\">if</span> (nth &gt;= <span class=\"hljs-number\">1</span>) sequence.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">if</span> (nth &gt;= <span class=\"hljs-number\">2</span>) sequence.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt; nth; i++) {\n    sequence.<span class=\"hljs-title function_\">push</span>(sequence[i - <span class=\"hljs-number\">1</span>] + sequence[i - <span class=\"hljs-number\">2</span>])\n  }\n\n  <span class=\"hljs-keyword\">return</span> sequence\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciRecursive</span> = (<span class=\"hljs-params\">number</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">switch</span> (list.<span class=\"hljs-property\">length</span>) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n        list.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">FibonacciRecursive</span>(number)\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n        list.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">FibonacciRecursive</span>(number)\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-attr\">number</span>:\n        <span class=\"hljs-keyword\">return</span> list\n      <span class=\"hljs-attr\">default</span>:\n        list.<span class=\"hljs-title function_\">push</span>(list[list.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>] + list[list.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">2</span>])\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">FibonacciRecursive</span>(number)\n    }\n  })()\n}\n\n<span class=\"hljs-keyword\">const</span> dict = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>()\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciRecursiveDP</span> = (<span class=\"hljs-params\">stairs</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (stairs &lt;= <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">if</span> (stairs === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-comment\">// Memoize stair count</span>\n  <span class=\"hljs-keyword\">if</span> (dict.<span class=\"hljs-title function_\">has</span>(stairs)) <span class=\"hljs-keyword\">return</span> dict.<span class=\"hljs-title function_\">get</span>(stairs)\n\n  <span class=\"hljs-keyword\">const</span> res =\n    <span class=\"hljs-title class_\">FibonacciRecursive</span>DP(stairs - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-title class_\">FibonacciRecursive</span>DP(stairs - <span class=\"hljs-number\">2</span>)\n\n  dict.<span class=\"hljs-title function_\">set</span>(stairs, res)\n\n  <span class=\"hljs-keyword\">return</span> res\n}\n\n<span class=\"hljs-comment\">// Algorithms</span>\n<span class=\"hljs-comment\">// Calculates Fibonacci(n) such that Fibonacci(n) = Fibonacci(n - 1) + Fibonacci(n - 2)</span>\n<span class=\"hljs-comment\">// Fibonacci(0) = Fibonacci(1) = 1</span>\n<span class=\"hljs-comment\">// Uses a bottom up dynamic programming approach</span>\n<span class=\"hljs-comment\">// Solve each sub-problem once, using results of previous sub-problems</span>\n<span class=\"hljs-comment\">// which are n-1 and n-2 for Fibonacci numbers</span>\n<span class=\"hljs-comment\">// Although this algorithm is linear in space and time as a function</span>\n<span class=\"hljs-comment\">// of the input value n, it is exponential in the size of n as</span>\n<span class=\"hljs-comment\">// a function of the number of input bits</span>\n<span class=\"hljs-comment\">// @Satzyakiz</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciDpWithoutRecursion</span> = (<span class=\"hljs-params\">number</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> table = []\n  table.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n  table.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt; number; ++i) {\n    table.<span class=\"hljs-title function_\">push</span>(table[i - <span class=\"hljs-number\">1</span>] + table[i - <span class=\"hljs-number\">2</span>])\n  }\n  <span class=\"hljs-keyword\">return</span> table\n}\n\n<span class=\"hljs-comment\">// Using Matrix exponentiation to find n-th fibonacci in O(log n) time</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">copyMatrix</span> = (<span class=\"hljs-params\">A</span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> A.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">cell</span> =&gt;</span> cell))\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Identity</span> = (<span class=\"hljs-params\">size</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> I = <span class=\"hljs-title class_\">Array</span>(size).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">null</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">Array</span>(size).<span class=\"hljs-title function_\">fill</span>())\n  <span class=\"hljs-keyword\">return</span> I.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">row, rowIdx</span>) =&gt;</span> row.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_col, colIdx</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> rowIdx === colIdx ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n  }))\n}\n\n<span class=\"hljs-comment\">// A of size (l x m) and B of size (m x n)</span>\n<span class=\"hljs-comment\">// product C will be of size (l x n)</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">matrixMultiply</span> = (<span class=\"hljs-params\">A, B</span>) =&gt; {\n  A = <span class=\"hljs-title function_\">copyMatrix</span>(A)\n  B = <span class=\"hljs-title function_\">copyMatrix</span>(B)\n  <span class=\"hljs-keyword\">const</span> l = A.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> m = B.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> n = B[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span> <span class=\"hljs-comment\">// Assuming non-empty matrices</span>\n  <span class=\"hljs-keyword\">const</span> C = <span class=\"hljs-title class_\">Array</span>(l).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-literal\">null</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">Array</span>(n).<span class=\"hljs-title function_\">fill</span>())\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; l; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\n      C[i][j] = <span class=\"hljs-number\">0</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">0</span>; k &lt; m; k++) {\n        C[i][j] += A[i][k] * B[k][j]\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> C\n}\n\n<span class=\"hljs-comment\">/**\n * Computes A raised to the power n i.e. pow(A, n) where A is a square matrix\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} A the square matrix\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} n the exponent\n */</span>\n<span class=\"hljs-comment\">// A is a square matrix</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">matrixExpo</span> = (<span class=\"hljs-params\">A, n</span>) =&gt; {\n  A = <span class=\"hljs-title function_\">copyMatrix</span>(A)\n\n  <span class=\"hljs-comment\">// Just like Binary exponentiation mentioned in ./BinaryExponentiationIterative.js</span>\n  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-title class_\">Identity</span>(A.<span class=\"hljs-property\">length</span>) <span class=\"hljs-comment\">// Identity matrix</span>\n  <span class=\"hljs-keyword\">while</span> (n &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span> !== <span class=\"hljs-number\">0</span>) result = <span class=\"hljs-title function_\">matrixMultiply</span>(result, A)\n    n = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(n / <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">0</span>) A = <span class=\"hljs-title function_\">matrixMultiply</span>(A, A)\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">FibonacciMatrixExpo</span> = (<span class=\"hljs-params\">n</span>) =&gt; {\n  <span class=\"hljs-comment\">// F(0) = 0, F(1) = 1</span>\n  <span class=\"hljs-comment\">// F(n) = F(n-1) + F(n-2)</span>\n  <span class=\"hljs-comment\">// Consider below matrix multiplication:</span>\n\n  <span class=\"hljs-comment\">// | F(n) |   |1  1|   |F(n-1)|</span>\n  <span class=\"hljs-comment\">// |      | = |    | * |      |</span>\n  <span class=\"hljs-comment\">// |F(n-1)|   |1  0|   |F(n-2)|</span>\n\n  <span class=\"hljs-comment\">// Let&#x27;s rewrite it as F(n, n-1) = A * F(n-1, n-2)</span>\n  <span class=\"hljs-comment\">// or                  F(n, n-1) = A * A * F(n-2, n-3)</span>\n  <span class=\"hljs-comment\">// or                  F(n, n-1) = pow(A, n-1) * F(1, 0)</span>\n\n  <span class=\"hljs-keyword\">if</span> (n === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">const</span> A = [\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>],\n    [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]\n  ]\n  <span class=\"hljs-keyword\">const</span> poweredA = <span class=\"hljs-title function_\">matrixExpo</span>(A, n - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// A raised to the power n-1</span>\n  <span class=\"hljs-keyword\">let</span> F = [\n    [<span class=\"hljs-number\">1</span>],\n    [<span class=\"hljs-number\">0</span>]\n  ]\n  F = <span class=\"hljs-title function_\">matrixMultiply</span>(poweredA, F)\n  <span class=\"hljs-keyword\">return</span> F[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciDpWithoutRecursion</span> }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciIterative</span> }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciRecursive</span> }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciRecursive</span>DP }\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">FibonacciMatrixExpo</span> }\n"
    },
    "c-plus-plus": {
      "dir": "math/fibonacci.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/fibonacci.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Generate fibonacci sequence\n *\n * Calculate the the value on Fibonacci&#x27;s sequence given an\n * integer as input.\n * \\f[\\text{fib}(n) = \\text{fib}(n-1) + \\text{fib}(n-2)\\f]\n *\n * @see fibonacci_large.cpp, fibonacci_fast.cpp, string_fibonacci.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Recursively compute sequences\n * @param n input\n * @returns n-th element of the Fbinacci&#x27;s sequence\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">fibonacci</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> n)</span> </span>{\n    <span class=\"hljs-comment\">/* If the input is 0 or 1 just return the same\n       This will set the first 2 values of the sequence */</span>\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">return</span> n;\n    }\n\n    <span class=\"hljs-comment\">/* Add the last 2 values of the sequence to get next */</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">fibonacci</span>(n - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-built_in\">fibonacci</span>(n - <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * Function for testing the fibonacci() function with a few\n * test cases and assert statement.\n * @returns `void`\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> test_case_1 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_1 == <span class=\"hljs-number\">0</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 1!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_2 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_2 == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 2!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_3 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_3 == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 3!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_4 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_4 == <span class=\"hljs-number\">2</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 4!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_5 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_5 == <span class=\"hljs-number\">3</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 5!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_6 = <span class=\"hljs-built_in\">fibonacci</span>(<span class=\"hljs-number\">15</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_6 == <span class=\"hljs-number\">610</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 6!&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/// Main function</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">0</span>;\n    std::cin &gt;&gt; n;\n    <span class=\"hljs-built_in\">assert</span>(n &gt;= <span class=\"hljs-number\">0</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;F(&quot;</span> &lt;&lt; n &lt;&lt; <span class=\"hljs-string\">&quot;)= &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">fibonacci</span>(n) &lt;&lt; std::endl;\n}\n"
    },
    "java": {
      "dir": "Maths/FibonacciNumber.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/FibonacciNumber.java",
      "code": "<span class=\"hljs-keyword\">package</span> Maths;\n\n<span class=\"hljs-comment\">/** Fibonacci: 0 1 1 2 3 5 8 13 21 ... */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FibonacciNumber</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isFibonacciNumber</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>)</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isFibonacciNumber</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>)</span>;\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">isFibonacciNumber</span><span class=\"hljs-params\">(<span class=\"hljs-number\">21</span>)</span>;\n    <span class=\"hljs-keyword\">assert</span> !isFibonacciNumber(<span class=\"hljs-number\">9</span>);\n    <span class=\"hljs-keyword\">assert</span> !isFibonacciNumber(<span class=\"hljs-number\">10</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if a number is perfect square number\n   *\n   * <span class=\"hljs-doctag\">@param</span> number the number to be checked\n   * <span class=\"hljs-doctag\">@return</span> &lt;tt&gt;true&lt;/tt&gt; if {<span class=\"hljs-doctag\">@code</span> number} is perfect square, otherwise &lt;tt&gt;false&lt;/tt&gt;\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isPerfectSquare</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sqrt</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) Math.sqrt(number);\n    <span class=\"hljs-keyword\">return</span> sqrt * sqrt == number;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if a number is fibonacci number This is true if and only if at least one of 5x^2+4 or\n   * 5x^2-4 is a perfect square\n   *\n   * <span class=\"hljs-doctag\">@param</span> number the number\n   * <span class=\"hljs-doctag\">@return</span> &lt;tt&gt;true&lt;/tt&gt; if {<span class=\"hljs-doctag\">@code</span> number} is fibonacci number, otherwise &lt;tt&gt;false&lt;/tt&gt;\n   * <span class=\"hljs-doctag\">@link</span> https://en.wikipedia.org/wiki/Fibonacci_number#Identification\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFibonacciNumber</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span> {\n    <span class=\"hljs-keyword\">return</span> isPerfectSquare(<span class=\"hljs-number\">5</span> * number * number + <span class=\"hljs-number\">4</span>) || isPerfectSquare(<span class=\"hljs-number\">5</span> * number * number - <span class=\"hljs-number\">4</span>);\n  }\n}\n"
    },
    "c": {
      "dir": "misc/fibonacci.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/fibonacci.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Fibonnacci function</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">fib</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> number)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (number == <span class=\"hljs-number\">1</span> || number == <span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> fib(number - <span class=\"hljs-number\">1</span>) + fib(number - <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> number;\n\n    <span class=\"hljs-comment\">// Asks for the number that is in n position in Fibonnacci sequence</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;number);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d \\n&quot;</span>, fib(number));\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}"
    },
    "haskell": {
      "dir": "src/Maths/Fibonacci.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Maths/Fibonacci.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Maths.Fibonacci <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">fib</span> :: <span class=\"hljs-type\">Integer</span> -&gt; <span class=\"hljs-type\">Integer</span>\n<span class=\"hljs-title\">fib</span> <span class=\"hljs-number\">0</span> = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-title\">fib</span> <span class=\"hljs-number\">1</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-title\">fib</span> n = fib (n-<span class=\"hljs-number\">1</span>) + fib (n-<span class=\"hljs-number\">2</span>)\n\n<span class=\"hljs-title\">main</span> :: <span class=\"hljs-type\">IO</span> ()\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    print (fib <span class=\"hljs-number\">10</span>)"
    },
    "f-sharp": {
      "dir": "Algorithms/Math/Fibonacci.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Math/Fibonacci.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Math\n\n<span class=\"hljs-keyword\">module</span> Fibonacci =\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> PrintSerie (one: int) (two: int) =\n        <span class=\"hljs-keyword\">let</span> fibo = one + two\n        System.Console.WriteLine fibo\n        PrintSerie two fibo"
    },
    "go": {
      "dir": "dynamicprogramming/fibonacci.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamicprogramming/fibonacci.go",
      "code": "<span class=\"hljs-keyword\">package</span> dynamicprogramming\n\n<span class=\"hljs-comment\">// https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/</span>\n\n<span class=\"hljs-comment\">// NthFibonacci returns the nth Fibonacci Number</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NthFibonacci</span><span class=\"hljs-params\">(n <span class=\"hljs-keyword\">uint</span>)</span> <span class=\"hljs-title\">uint</span></span> {\n\t<span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\t}\n\n\t<span class=\"hljs-comment\">// n1 and n2 are the (i-1)th and ith Fibonacci numbers, respectively</span>\n\t<span class=\"hljs-keyword\">var</span> n1, n2 <span class=\"hljs-keyword\">uint</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">uint</span>(<span class=\"hljs-number\">1</span>); i &lt; n; i++ {\n\t\tn3 := n1 + n2\n\t\tn1 = n2\n\t\tn2 = n3\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> n2\n}\n"
    },
    "rust": {
      "dir": "src/dynamic_programming/fibonacci.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/fibonacci.rs",
      "code": "<span class=\"hljs-comment\">/// Fibonacci via Dynamic Programming</span>\n\n<span class=\"hljs-comment\">/// fibonacci(n) returns the nth fibonacci number</span>\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\n<span class=\"hljs-comment\">/// F(0) = F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-comment\">// Use a and b to store the previous two values in the sequence</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">a</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">b</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">_i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..n {\n        <span class=\"hljs-comment\">// As we iterate through, move b&#x27;s value into a and the new computed</span>\n        <span class=\"hljs-comment\">// value into b.</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">c</span> = a + b;\n        a = b;\n        b = c;\n    }\n    b\n}\n\n<span class=\"hljs-comment\">/// fibonacci(n) returns the nth fibonacci number</span>\n<span class=\"hljs-comment\">/// This function uses the definition of Fibonacci where:</span>\n<span class=\"hljs-comment\">/// F(0) = F(1) = 1 and F(n+1) = F(n) + F(n-1) for n&gt;0</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Warning: This will overflow the 128-bit unsigned integer at n=186</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">recursive_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-comment\">// Call the actual tail recursive implementation, with the extra</span>\n    <span class=\"hljs-comment\">// arguments set up.</span>\n    _recursive_fibonacci(n, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)\n}\n\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">_recursive_fibonacci</span>(n: <span class=\"hljs-type\">u32</span>, previous: <span class=\"hljs-type\">u128</span>, current: <span class=\"hljs-type\">u128</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">u128</span> {\n    <span class=\"hljs-keyword\">if</span> n == <span class=\"hljs-number\">0</span> {\n        current\n    } <span class=\"hljs-keyword\">else</span> {\n        _recursive_fibonacci(n - <span class=\"hljs-number\">1</span>, current, current + previous)\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::fibonacci;\n    <span class=\"hljs-keyword\">use</span> super::recursive_fibonacci;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_fibonacci</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">89</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">10946</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">573147844013817084101</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">fibonacci</span>(<span class=\"hljs-number\">184</span>), <span class=\"hljs-number\">205697230343233228174223751303346572685</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_recursive_fibonacci</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">2</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">3</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">5</span>), <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">89</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">20</span>), <span class=\"hljs-number\">10946</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">100</span>), <span class=\"hljs-number\">573147844013817084101</span>);\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">recursive_fibonacci</span>(<span class=\"hljs-number\">184</span>),\n            <span class=\"hljs-number\">205697230343233228174223751303346572685</span>\n        );\n    }\n}\n"
    },
    "r": {
      "dir": "Mathematics/Fibonacci.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Mathematics/Fibonacci.R",
      "code": "Fibonacci <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>n<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>n <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">|</span>n <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span>\n  <span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>Fibonacci<span class=\"hljs-punctuation\">(</span>n<span class=\"hljs-operator\">-</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">+</span> Fibonacci<span class=\"hljs-punctuation\">(</span>n <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n\nFibonacci<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span>\nFibonacci<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">11</span><span class=\"hljs-punctuation\">)</span>\n"
    },
    "ruby": {
      "dir": "maths/fibonacci.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/fibonacci.rb",
      "code": "<span class=\"hljs-comment\"># The Fibonacci numbers, commonly denoted F(n) form a sequence,</span>\n<span class=\"hljs-comment\"># called the Fibonacci sequence, such that each number is the sum</span>\n<span class=\"hljs-comment\"># of the two preceding ones, starting from 0 and 1. That is,</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># F(0) = 0, F(1) = 1</span>\n<span class=\"hljs-comment\"># F(n) = F(n - 1) + F(n - 2), for n &gt; 1.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Given n, calculate F(n).</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach: Math</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Intuition: Using the golden ratio, a.k.a Binet&#x27;s formula</span>\n\n<span class=\"hljs-comment\"># Algorithm: Use the golden ratio formula to calculate the Nth Fibonacci number.</span>\n<span class=\"hljs-comment\"># https://demonstrations.wolfram.com/GeneralizedFibonacciSequenceAndTheGoldenRatio/</span>\n\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n\n<span class=\"hljs-comment\"># Time complexity: O(1). Constant time complexity since we are using no loops or recursion</span>\n<span class=\"hljs-comment\"># and the time is based on the result of performing the calculation using Binet&#x27;s formula.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Space complexity: O(1). The space used is the space needed to create the variable</span>\n<span class=\"hljs-comment\"># to store the golden ratio formula.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fibonacci</span><span class=\"hljs-params\">(n)</span></span>\n  golden_ratio = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">5</span>**<span class=\"hljs-number\">0.5</span>) / <span class=\"hljs-number\">2</span>\n  ((golden_ratio**n + <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">5</span>**<span class=\"hljs-number\">0.5</span>).to_i\n<span class=\"hljs-keyword\">end</span>\n\nn = <span class=\"hljs-number\">2</span>\nputs(fibonacci(n))\n<span class=\"hljs-comment\"># Output: 1</span>\n<span class=\"hljs-comment\"># Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.</span>\n\nn = <span class=\"hljs-number\">3</span>\nputs(fibonacci(n))\n<span class=\"hljs-comment\"># Output: 2</span>\n<span class=\"hljs-comment\"># Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.</span>\n\nn = <span class=\"hljs-number\">4</span>\nputs(fibonacci(n))\n<span class=\"hljs-comment\"># Output: 3</span>\n<span class=\"hljs-comment\"># Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.</span>\n"
    },
    "php": {
      "dir": "Maths/Fibonacci.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/Maths/Fibonacci.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-comment\">/*\n * Run script and test execution time with following script\n        $executionTime = New ExecutionTime();\n        print_r(fibonacciRecursive(10));\n */</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ExecutionTime</span>\n</span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$start_time</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$end_time</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-variable\">$execution_time</span> = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__construct</span>(<span class=\"hljs-params\"></span>)\n    </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;start_time = microtime(<span class=\"hljs-literal\">true</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">__destruct</span>(<span class=\"hljs-params\"></span>)\n    </span>{\n        <span class=\"hljs-keyword\">$this</span>-&gt;end_time = microtime(<span class=\"hljs-literal\">true</span>);\n        <span class=\"hljs-keyword\">$this</span>-&gt;execution_time = <span class=\"hljs-keyword\">$this</span>-&gt;end_time - <span class=\"hljs-keyword\">$this</span>-&gt;start_time;\n        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">&quot;Executed in <span class=\"hljs-subst\">$this</span>-&gt;execution_time seconds\\n&quot;</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacciRecursive</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\n</span>{\n    <span class=\"hljs-comment\">/*\n     * Fibonacci series using recursive approach\n     */</span>\n\n    <span class=\"hljs-variable\">$fibonacciRecursive</span> = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-variable\">$i</span> &lt; <span class=\"hljs-variable\">$num</span>; <span class=\"hljs-variable\">$i</span>++) {\n        array_push(<span class=\"hljs-variable\">$fibonacciRecursive</span>, recursive(<span class=\"hljs-variable\">$i</span>));\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$fibonacciRecursive</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">recursive</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\n</span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> &lt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> \\<span class=\"hljs-built_in\">Exception</span>(<span class=\"hljs-string\">&quot;Number must be greater than 0.&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> == <span class=\"hljs-number\">0</span> || <span class=\"hljs-variable\">$num</span> == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$num</span>;\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> recursive(<span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">1</span>) + recursive(<span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">2</span>);\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacciWithBinetFormula</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-variable\">$num</span></span>)\n</span>{\n    <span class=\"hljs-comment\">/*\n     * Fibonacci series using Binet&#x27;s formula given below\n     * binet&#x27;s formula =  ((1 + sqrt(5) / 2 ) ^ n - (1 - sqrt(5) / 2 ) ^ n ) ) / sqrt(5)\n     * More about Binet&#x27;s formula found at http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibFormula.html#section1\n     */</span>\n\n    <span class=\"hljs-variable\">$fib_series</span> = [];\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span> &lt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> \\<span class=\"hljs-built_in\">Exception</span>(<span class=\"hljs-string\">&quot;Number must be greater than 0.&quot;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-variable\">$sqrt</span> = sqrt(<span class=\"hljs-number\">5</span>);\n        <span class=\"hljs-variable\">$phi_1</span> = (<span class=\"hljs-number\">1</span> + <span class=\"hljs-variable\">$sqrt</span>) / <span class=\"hljs-number\">2</span>;\n        <span class=\"hljs-variable\">$phi_2</span> = (<span class=\"hljs-number\">1</span> - <span class=\"hljs-variable\">$sqrt</span>) / <span class=\"hljs-number\">2</span>;\n\n        <span class=\"hljs-keyword\">foreach</span> (range(<span class=\"hljs-number\">0</span>, <span class=\"hljs-variable\">$num</span> - <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-variable\">$n</span>) {\n            <span class=\"hljs-variable\">$seriesNumber</span> = (pow(<span class=\"hljs-variable\">$phi_1</span>, <span class=\"hljs-variable\">$n</span>) - pow(<span class=\"hljs-variable\">$phi_2</span>, <span class=\"hljs-variable\">$n</span>)) / <span class=\"hljs-variable\">$sqrt</span>;\n            array_push(<span class=\"hljs-variable\">$fib_series</span>, (<span class=\"hljs-keyword\">int</span>)<span class=\"hljs-variable\">$seriesNumber</span>);\n        }\n\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$fib_series</span>;\n}"
    },
    "scala": {
      "dir": "src/main/scala/Mathematics/Fibonacci.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Mathematics/Fibonacci.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Mathematics</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">Fibonacci</span> </span>{\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">val</span> allFibonacci: <span class=\"hljs-type\">Stream</span>[<span class=\"hljs-type\">Int</span>] = <span class=\"hljs-number\">1</span> #:: <span class=\"hljs-number\">1</span> #:: allFibonacci.zip(allFibonacci.tail).map(t =&gt; t._1 + t._2)\n\n  <span class=\"hljs-comment\">/**\n    * Method to use the allFibonacci stream to take the first total numbers\n    * Using streams is both an easy and efficient way to generate fibonacci numbers (streams are memoized)\n    *\n    * @param total\n    * @return\n    */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fibGenerate</span></span>(total: <span class=\"hljs-type\">Int</span>): <span class=\"hljs-type\">Seq</span>[<span class=\"hljs-type\">Int</span>] = allFibonacci.take(total)\n}\n"
    },
    "swift": {
      "dir": "recursion/fibonacci.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/recursion/fibonacci.swift",
      "code": "<span class=\"hljs-comment\">// The Fibonacci numbers, commonly denoted F(n) form a sequence,</span>\n<span class=\"hljs-comment\">// called the Fibonacci sequence, such that # each number is the sum</span>\n<span class=\"hljs-comment\">// of the two preceding ones, starting from 0 and 1. That is,</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// F(0) = 0, F(1) = 1</span>\n<span class=\"hljs-comment\">// F(n) = F(n - 1) + F(n - 2), for n &gt; 1</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// Given n, calculate F(n).</span>\n<span class=\"hljs-comment\">//</span>\n<span class=\"hljs-comment\">// @leticiafaleia</span>\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">number</span>: <span class=\"hljs-type\">Int</span>) -&gt; <span class=\"hljs-type\">Int</span> {\n    <span class=\"hljs-keyword\">guard</span> number <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> number }\n    <span class=\"hljs-keyword\">return</span> fibonacci(number <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span>) <span class=\"hljs-operator\">+</span> fibonacci(number <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">2</span>)\n}\n\nfibonacci(<span class=\"hljs-number\">5</span>)\n"
    }
  },
  "contributors": [],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Basic Math/Fibonacci_Numbers.md"
  }
}
