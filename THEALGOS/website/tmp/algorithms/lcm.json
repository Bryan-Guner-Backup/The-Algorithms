{
  "slug": "lcm",
  "name": "Lcm",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/lcm.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/lcm.c",
      "code": "<span class=\"hljs-comment\">// C program to find LCM of two numbers</span>\n<span class=\"hljs-comment\">/*\n    suppose we have two numbers a and b.\n    Property: Since product of LCM and GCD of two numbers are equal to product\n   of that number itself. i.e, LCM(a,b)*GCD(a,b)=a*b. So,here we first find the\n   GCD of two numbers and using above property we find LCM of that two numbers.\n*/</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// Recursive function to return gcd of a and b</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> b;\n    <span class=\"hljs-keyword\">return</span> gcd(b % a, a);\n}\n\n<span class=\"hljs-comment\">// Function to return LCM of two numbers</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lcm</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> { <span class=\"hljs-keyword\">return</span> (a * b) / gcd(a, b); }\n\n<span class=\"hljs-comment\">// Driver program</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> a, b;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter two numbers to find their LCM \\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;LCM of %d and %d is %d &quot;</span>, a, b, lcm(a, b));\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-comment\">/*\nTest Case1:\na=15,b=20\nLCM(a,b)=60\nTest Case2:\na=12,b=18\nLCM(a,b)=36\n*/</span>\n"
    },
    "go": {
      "dir": "math/lcm/lcm.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/lcm/lcm.go",
      "code": "<span class=\"hljs-keyword\">package</span> lcm\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\n\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/math/gcd&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Lcm returns the lcm of two numbers using the fact that lcm(a,b) * gcd(a,b) = | a * b |</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Lcm</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int64</span>)</span> <span class=\"hljs-title\">int64</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">int64</span>(math.Abs(<span class=\"hljs-keyword\">float64</span>(a*b)) / <span class=\"hljs-keyword\">float64</span>(gcd.Iterative(a, b)))\n}\n"
    },
    "dart": {
      "dir": "other/LCM.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/other/LCM.dart",
      "code": "<span class=\"hljs-comment\">//Title:Find LCM of two numbers.</span>\n<span class=\"hljs-comment\">//Author:Shawn</span>\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\n\n<span class=\"hljs-comment\">/*suppose we have two numbers a and b.\n * Property: Since product of LCM and GCD of two numbers are\n * equal to product of that number itself.\n * i.e, LCM(a,b)*GCD(a,b)=a*b\n * So,here we first find GCD of two numbers and using above\n * property we find LCM of that two numbers.\n */</span>\n\n<span class=\"hljs-comment\">//Recursive function to return gcd of a and b</span>\n<span class=\"hljs-built_in\">int</span> gcd(<span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b) {\n  <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> b;\n  }\n  <span class=\"hljs-keyword\">return</span> gcd(b % a, a);\n}\n\n<span class=\"hljs-comment\">//Function to return LCM of two numbers</span>\n<span class=\"hljs-built_in\">double</span> lcm(<span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b) {\n  <span class=\"hljs-keyword\">return</span> (a * b) / gcd(a, b);\n}\n\n<span class=\"hljs-comment\">//Driver program</span>\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-keyword\">var</span> a, b;\n  <span class=\"hljs-comment\">//Test case1:</span>\n  a = <span class=\"hljs-number\">15</span>;\n  b = <span class=\"hljs-number\">20</span>;\n  <span class=\"hljs-comment\">//print the result</span>\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;LCM of &quot;</span> +\n      a.toString() +\n      <span class=\"hljs-string\">&quot; and &quot;</span> +\n      b.toString() +\n      <span class=\"hljs-string\">&quot; is &quot;</span> +\n      lcm(a, b).toString());\n  <span class=\"hljs-comment\">//Test case2:</span>\n  a = <span class=\"hljs-number\">12</span>;\n  b = <span class=\"hljs-number\">18</span>;\n  <span class=\"hljs-comment\">//print the result</span>\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;LCM of &quot;</span> +\n      a.toString() +\n      <span class=\"hljs-string\">&quot; and &quot;</span> +\n      b.toString() +\n      <span class=\"hljs-string\">&quot; is &quot;</span> +\n      lcm(a, b).toString());\n}\n"
    },
    "ruby": {
      "dir": "discrete_mathematics/lcm.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/discrete_mathematics/lcm.rb",
      "code": "<span class=\"hljs-comment\"># LCM (Least Common Multiple) of two numbers is the smallest number which can be divided by both numbers.</span>\n\np <span class=\"hljs-string\">&#x27;Least Common Multiple&#x27;</span>\n\np <span class=\"hljs-string\">&#x27;Enter first number&#x27;</span>\nvalue_one = gets.chomp.to_i\n\np <span class=\"hljs-string\">&#x27;Enter second number&#x27;</span>\nvalue_two = gets.chomp.to_i\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">gcd</span><span class=\"hljs-params\">(first, second)</span></span>\n  <span class=\"hljs-keyword\">if</span> second != <span class=\"hljs-number\">0</span>\n    gcd(second, first % second)\n  <span class=\"hljs-keyword\">else</span>\n    first\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">lcm</span><span class=\"hljs-params\">(first, second)</span></span>\n  (first * second) / gcd(first, second)\n<span class=\"hljs-keyword\">end</span>\n\np <span class=\"hljs-string\">&quot;Least Common Multiple is: <span class=\"hljs-subst\">#{lcm(value_one, value_two)}</span>&quot;</span>\n"
    },
    "matlab-octave": {
      "dir": "algorithms/maths/lcm.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/maths/lcm.m",
      "code": "<span class=\"hljs-comment\">% function to calculate lcm of two number a and b using gcd of two numbers.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">[ret]</span> =  <span class=\"hljs-title\">lcm</span><span class=\"hljs-params\">(a, b)</span></span>\n    <span class=\"hljs-keyword\">if</span> b == <span class=\"hljs-number\">0</span>\n       re = a;\n       ret=(a*b)/re;    <span class=\"hljs-comment\">% i.e zero</span>\n       \n    <span class=\"hljs-keyword\">else</span>\n       re = <span class=\"hljs-built_in\">gcd</span>(b, <span class=\"hljs-built_in\">mod</span>(a, b));\n       ret=(a*b)/re;\n    <span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "KAUSHAL DEVRARI",
      "email": "71590645+KaushalDevrari@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vitor",
      "email": "vitor.carminatti@hotmail.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
