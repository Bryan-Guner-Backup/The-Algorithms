{
  "slug": "fft",
  "name": "FFT",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Maths/FFT.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Maths/FFT.java",
      "code": "<span class=\"hljs-keyword\">package</span> com.maths;\n\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\n<span class=\"hljs-keyword\">import</span> java.util.Collections;\n\n<span class=\"hljs-comment\">/**\n * Class for calculating the Fast Fourier Transform (FFT) of a discrete signal using the\n * Cooley-Tukey algorithm.\n *\n * <span class=\"hljs-doctag\">@author</span> Ioannis Karavitsis\n * <span class=\"hljs-doctag\">@version</span> 1.0\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FFT</span> {\n  <span class=\"hljs-comment\">/**\n   * This class represents a complex number and has methods for basic operations.\n   *\n   * &lt;p&gt;More info: https://introcs.cs.princeton.edu/java/32class/Complex.java.html\n   */</span>\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Complex</span> {\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> real, img;\n\n    <span class=\"hljs-comment\">/** Default Constructor. Creates the complex number 0. */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Complex</span><span class=\"hljs-params\">()</span> {\n      real = <span class=\"hljs-number\">0</span>;\n      img = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Constructor. Creates a complex number.\n     *\n     * <span class=\"hljs-doctag\">@param</span> r The real part of the number.\n     * <span class=\"hljs-doctag\">@param</span> i The imaginary part of the number.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Complex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> r, <span class=\"hljs-type\">double</span> i)</span> {\n      real = r;\n      img = i;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns the real part of the complex number.\n     *\n     * <span class=\"hljs-doctag\">@return</span> The real part of the complex number.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getReal</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> real;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Returns the imaginary part of the complex number.\n     *\n     * <span class=\"hljs-doctag\">@return</span> The imaginary part of the complex number.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getImaginary</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> img;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Adds this complex number to another.\n     *\n     * <span class=\"hljs-doctag\">@param</span> z The number to be added.\n     * <span class=\"hljs-doctag\">@return</span> The sum.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(Complex z)</span> {\n      <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\n      temp.real = <span class=\"hljs-built_in\">this</span>.real + z.real;\n      temp.img = <span class=\"hljs-built_in\">this</span>.img + z.img;\n      <span class=\"hljs-keyword\">return</span> temp;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Subtracts a number from this complex number.\n     *\n     * <span class=\"hljs-doctag\">@param</span> z The number to be subtracted.\n     * <span class=\"hljs-doctag\">@return</span> The difference.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">subtract</span><span class=\"hljs-params\">(Complex z)</span> {\n      <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\n      temp.real = <span class=\"hljs-built_in\">this</span>.real - z.real;\n      temp.img = <span class=\"hljs-built_in\">this</span>.img - z.img;\n      <span class=\"hljs-keyword\">return</span> temp;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Multiplies this complex number by another.\n     *\n     * <span class=\"hljs-doctag\">@param</span> z The number to be multiplied.\n     * <span class=\"hljs-doctag\">@return</span> The product.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">multiply</span><span class=\"hljs-params\">(Complex z)</span> {\n      <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\n      temp.real = <span class=\"hljs-built_in\">this</span>.real * z.real - <span class=\"hljs-built_in\">this</span>.img * z.img;\n      temp.img = <span class=\"hljs-built_in\">this</span>.real * z.img + <span class=\"hljs-built_in\">this</span>.img * z.real;\n      <span class=\"hljs-keyword\">return</span> temp;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Multiplies this complex number by a scalar.\n     *\n     * <span class=\"hljs-doctag\">@param</span> n The real number to be multiplied.\n     * <span class=\"hljs-doctag\">@return</span> The product.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">multiply</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n)</span> {\n      <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\n      temp.real = <span class=\"hljs-built_in\">this</span>.real * n;\n      temp.img = <span class=\"hljs-built_in\">this</span>.img * n;\n      <span class=\"hljs-keyword\">return</span> temp;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Finds the conjugate of this complex number.\n     *\n     * <span class=\"hljs-doctag\">@return</span> The conjugate.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">conjugate</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\n      temp.real = <span class=\"hljs-built_in\">this</span>.real;\n      temp.img = -<span class=\"hljs-built_in\">this</span>.img;\n      <span class=\"hljs-keyword\">return</span> temp;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Finds the magnitude of the complex number.\n     *\n     * <span class=\"hljs-doctag\">@return</span> The magnitude.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">abs</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-keyword\">return</span> Math.hypot(<span class=\"hljs-built_in\">this</span>.real, <span class=\"hljs-built_in\">this</span>.img);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Divides this complex number by another.\n     *\n     * <span class=\"hljs-doctag\">@param</span> z The divisor.\n     * <span class=\"hljs-doctag\">@return</span> The quotient.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">divide</span><span class=\"hljs-params\">(Complex z)</span> {\n      <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\n      temp.real = (<span class=\"hljs-built_in\">this</span>.real * z.real + <span class=\"hljs-built_in\">this</span>.img * z.img) / (z.abs() * z.abs());\n      temp.img = (<span class=\"hljs-built_in\">this</span>.img * z.real - <span class=\"hljs-built_in\">this</span>.real * z.img) / (z.abs() * z.abs());\n      <span class=\"hljs-keyword\">return</span> temp;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Divides this complex number by a scalar.\n     *\n     * <span class=\"hljs-doctag\">@param</span> n The divisor which is a real number.\n     * <span class=\"hljs-doctag\">@return</span> The quotient.\n     */</span>\n    <span class=\"hljs-keyword\">public</span> Complex <span class=\"hljs-title function_\">divide</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> n)</span> {\n      <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>();\n      temp.real = <span class=\"hljs-built_in\">this</span>.real / n;\n      temp.img = <span class=\"hljs-built_in\">this</span>.img / n;\n      <span class=\"hljs-keyword\">return</span> temp;\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Iterative In-Place Radix-2 Cooley-Tukey Fast Fourier Transform Algorithm with Bit-Reversal. The\n   * size of the input signal must be a power of 2. If it isn&#x27;t then it is padded with zeros and the\n   * output FFT will be bigger than the input signal.\n   *\n   * &lt;p&gt;More info: https://www.algorithm-archive.org/contents/cooley_tukey/cooley_tukey.html\n   * https://www.geeksforgeeks.org/iterative-fast-fourier-transformation-polynomial-multiplication/\n   * https://en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm\n   * https://cp-algorithms.com/algebra/fft.html\n   *\n   * <span class=\"hljs-doctag\">@param</span> x The discrete signal which is then converted to the FFT or the IFFT of signal x.\n   * <span class=\"hljs-doctag\">@param</span> inverse True if you want to find the inverse FFT.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fft</span><span class=\"hljs-params\">(ArrayList&lt;Complex&gt; x, <span class=\"hljs-type\">boolean</span> inverse)</span> {\n    <span class=\"hljs-comment\">/* Pad the signal with zeros if necessary */</span>\n    paddingPowerOfTwo(x);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">N</span> <span class=\"hljs-operator\">=</span> x.size();\n\n    <span class=\"hljs-comment\">/* Find the log2(N) */</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">log2N</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> ((<span class=\"hljs-number\">1</span> &lt;&lt; log2N) &lt; N) log2N++;\n\n    <span class=\"hljs-comment\">/* Swap the values of the signal with bit-reversal method */</span>\n    <span class=\"hljs-type\">int</span> reverse;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n      reverse = reverseBits(i, log2N);\n      <span class=\"hljs-keyword\">if</span> (i &lt; reverse) Collections.swap(x, i, reverse);\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">direction</span> <span class=\"hljs-operator\">=</span> inverse ? -<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/* Main loop of the algorithm */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span>; len &lt;= N; len *= <span class=\"hljs-number\">2</span>) {\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">angle</span> <span class=\"hljs-operator\">=</span> -<span class=\"hljs-number\">2</span> * Math.PI / len * direction;\n      <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">wlen</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>(Math.cos(angle), Math.sin(angle));\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; N; i += len) {\n        <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">w</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; len / <span class=\"hljs-number\">2</span>; j++) {\n          <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">u</span> <span class=\"hljs-operator\">=</span> x.get(i + j);\n          <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> w.multiply(x.get(i + j + len / <span class=\"hljs-number\">2</span>));\n          x.set(i + j, u.add(v));\n          x.set(i + j + len / <span class=\"hljs-number\">2</span>, u.subtract(v));\n          w = w.multiply(wlen);\n        }\n      }\n    }\n\n    <span class=\"hljs-comment\">/* Divide by N if we want the inverse FFT */</span>\n    <span class=\"hljs-keyword\">if</span> (inverse) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; x.size(); i++) {\n        <span class=\"hljs-type\">Complex</span> <span class=\"hljs-variable\">z</span> <span class=\"hljs-operator\">=</span> x.get(i);\n        x.set(i, z.divide(N));\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * This function reverses the bits of a number. It is used in Cooley-Tukey FFT algorithm.\n   *\n   * &lt;p&gt;E.g. num = 13 = 00001101 in binary log2N = 8 Then reversed = 176 = 10110000 in binary\n   *\n   * &lt;p&gt;More info: https://cp-algorithms.com/algebra/fft.html\n   * https://www.geeksforgeeks.org/write-an-efficient-c-program-to-reverse-bits-of-a-number/\n   *\n   * <span class=\"hljs-doctag\">@param</span> num The integer you want to reverse its bits.\n   * <span class=\"hljs-doctag\">@param</span> log2N The number of bits you want to reverse.\n   * <span class=\"hljs-doctag\">@return</span> The reversed number\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">reverseBits</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num, <span class=\"hljs-type\">int</span> log2N)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">reversed</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; log2N; i++) {\n      <span class=\"hljs-keyword\">if</span> ((num &amp; (<span class=\"hljs-number\">1</span> &lt;&lt; i)) != <span class=\"hljs-number\">0</span>) reversed |= <span class=\"hljs-number\">1</span> &lt;&lt; (log2N - <span class=\"hljs-number\">1</span> - i);\n    }\n    <span class=\"hljs-keyword\">return</span> reversed;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * This method pads an ArrayList with zeros in order to have a size equal to the next power of two\n   * of the previous size.\n   *\n   * <span class=\"hljs-doctag\">@param</span> x The ArrayList to be padded.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">paddingPowerOfTwo</span><span class=\"hljs-params\">(ArrayList&lt;Complex&gt; x)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oldSize</span> <span class=\"hljs-operator\">=</span> x.size();\n    <span class=\"hljs-keyword\">while</span> (n &lt; oldSize) n *= <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n - oldSize; i++) x.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Complex</span>());\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "JohnKara",
      "email": "kcioannis@csd.auth.gr",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
