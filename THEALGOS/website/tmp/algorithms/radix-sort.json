{
  "slug": "radix-sort",
  "name": "Radix Sort",
  "categories": ["sorts"],
  "body": {
    "es": "<p>El límite inferior para el algoritmo de ordenación basado en comparación (Orden de fusión, Ordenación de montón, Ordenación rápida, etc.) es <code>Ω(nlogn)</code>, es decir, no pueden hacerlo mejor que <code>nlogn</code>.</p>\n<p>La ordenación del recuento es un algoritmo de ordenación de tiempo lineal que ordena en el tiempo <code>O(n+k)</code> cuando los elementos están en el rango de 1 a k.</p>\n<p>¿Qué sucede si los elementos están en el rango de 1 a n2? No podemos usar la ordenación de recuento, porque la ordenación de recuento tomará <code>O(n2)</code>, que es peor que los algoritmos de clasificación basados en comparación. ¿Podemos ordenar una matriz de este tipo en tiempo lineal?</p>\n<p>Radix Sort es la respuesta. La idea de Radix Sort es hacer orden dígito por dígito a partir de un dígito menos significativo a un dígito más significativo. La ordenación de radios utiliza la ordenación de recuento como subrutina para ordenar.</p>\n<h2>El algoritmo de ordenación de radios</h2>\n<p>Haga lo siguiente para cada dígito i donde varía de un dígito menos significativo al dígito más significativo.\nOrdene la matriz de entrada mediante la ordenación de recuento (o cualquier ordenación estable) según el dígito i'th.</p>\n<p>Ejemplo:</p>\n<p>Lista original y no ordenada:\n<code>170, 45, 75, 90, 802, 24, 2, 66</code></p>\n<p>Ordenar por el dígito menos significativo (lugar 1s) da:</p>\n<p>[*Observe que mantenemos el 802 antes de las 2, porque ocurrió el 802\nantes de 2 en la lista original, y de manera similar para los pares\n170 &#x26;90 y 45 &#x26;75.]</p>\n<p>Ordenar por el siguiente dígito (lugar de los años 10) da:</p>\n<p>[*Observe que 802 de nuevo viene antes de 2 como 802 viene antes de 2 en la lista anterior.]</p>\n<p><code>802, 2, 24, 45, 66, 170, 75, 90</code></p>\n<p>La clasificación por el dígito más significativo (lugar de los años 100) da:\n<code>2, 24, 45, 66, 75, 90, 170, 802</code></p>\n<h2>¿Cuál es el tiempo de ejecución de Radix Sort?</h2>\n<p>Deje que haya dígitos <code>d</code> en los enteros de entrada. Radix Sort toma <code>O(d*(n+b))</code> tiempo donde <code>b</code> es la base para representar números, por ejemplo, para el sistema decimal, <code>b</code> es 10.\n¿Cuál es el valor de <code>d</code>? Si <code>k</code> es el valor máximo posible, entonces sería <code>O(logb(k))</code>. Así que la complejidad general del tiempo es <code>O((n+b) * logb(k))</code>. Lo que parece más que el\ncomplejidad horaria de algoritmos de ordenación basados en comparación para una <code>k</code> grande. Limitemos primero <code>k</code>. Deje <code>k &#x3C;= nc</code> donde <code>c</code> es una constante. En ese caso, la complejidad se convierte en\n<code>O(n logb(n))</code>. Pero todavía no supera los algoritmos de clasificación basados en comparación.</p>\n<h2>¿Radix Sort es preferible a algoritmos de ordenación basados en comparación como Quick-Sort?</h2>\n<p>Si, tenemos bits <code>log2n</code> para cada dígito, el tiempo de ejecución de Radix parece ser mejor que la ordenación rápida para una amplia gama de números de entrada. Los factores constantes ocultos en la notación asintótica, son mayores para Radix Sort y Quick-Sort que utiliza cachés de hardware de forma más eficaz. Además, Radix sort utiliza la ordenación de recuento como una subrutina y la ordenación de recuento\nnecesita espacio adicional para ordenar los números.</p>\n<p><strong>Vídeo de referencia:</strong> <a href=\"https://youtu.be/nu4gDuFabIM\">https://youtu.be/nu4gDuFabIM</a></p>",
    "en": "<p>The lower bound for Comparison based sorting algorithm (Merge Sort, Heap Sort, Quick-Sort .. etc) is <code>Ω(nlogn)</code>, i.e., they cannot do better than <code>nlogn</code>.</p>\n<p>Counting sort is a linear time sorting algorithm that sort in <code>O(n+k)</code> time when elements are in the range from 1 to k.</p>\n<p>What if the elements are in the range from 1 to n2? We can’t use counting sort because counting sort will take <code>O(n2)</code> which is worse than comparison-based sorting algorithms. Can we sort such an array in linear time?</p>\n<p>Radix Sort is the answer. The idea of Radix Sort is to do digit by digit sort starting from least significant digit to most significant digit. Radix sort uses counting sort as a subroutine to sort.</p>\n<h2>The Radix Sort Algorithm</h2>\n<p>Do following for each digit i where i varies from least significant digit to the most significant digit.\nSort input array using counting sort (or any stable sort) according to the i’th digit.</p>\n<p>Example:</p>\n<p>Original, unsorted list:\n<code>170, 45, 75, 90, 802, 24, 2, 66</code></p>\n<p>Sorting by least significant digit (1s place) gives:</p>\n<p>[*Notice that we keep 802 before 2, because 802 occurred\nbefore 2 in the original list, and similarly for pairs\n170 &#x26; 90 and 45 &#x26; 75.]</p>\n<p>Sorting by next digit (10s place) gives:</p>\n<p>[*Notice that 802 again comes before 2 as 802 comes before 2 in the previous list.]</p>\n<p><code>802, 2, 24, 45, 66, 170, 75, 90</code></p>\n<p>Sorting by the most significant digit (100s place) gives:\n<code>2, 24, 45, 66, 75, 90, 170, 802</code></p>\n<h2>What is the running time of Radix Sort?</h2>\n<p>Let there be d digits in input integers. Radix Sort takes <code>O(d*(n+b))</code> time where b is the base for representing numbers, for example, for the decimal system, b is 10.\nWhat is the value of d? If <code>k</code> is the maximum possible value, then d would be <code>O(logb(k))</code>. So overall time complexity is <code>O((n+b) * logb(k))</code>. Which looks more than the\ntime complexity of comparison-based sorting algorithms for a large k. Let us first limit k. Let k &#x3C;= nc where c is a constant. In that case, the complexity becomes\n<code>O(n logb(n))</code>. But it still doesn’t beat comparison-based sorting algorithms.</p>\n<h2>Is Radix Sort preferable to Comparison based sorting algorithms like Quick-Sort?</h2>\n<p>If we have <code>log2n</code> bits for every digit, the running time of Radix appears to be better than Quick Sort for a wide range of input numbers. The constant factors hidden in\nasymptotic notation are higher for Radix Sort and Quick-Sort uses hardware caches more effectively. Also, Radix sort uses counting sort as a subroutine and counting sort\ntakes extra space to sort numbers.</p>\n<p>Video reference: <a href=\"https://youtu.be/nu4gDuFabIM\">https://youtu.be/nu4gDuFabIM</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "sorts/radix_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/radix_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is a pure Python implementation of the quick sort algorithm\nFor doctests run following command:\npython -m doctest -v radix_sort.py\nor\npython3 -m doctest -v radix_sort.py\nFor manual testing run:\npython radix_sort.py\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">radix_sort</span>(<span class=\"hljs-params\">list_of_ints: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Examples:\n    &gt;&gt;&gt; radix_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n\n    &gt;&gt;&gt; radix_sort(list(range(15))) == sorted(range(15))\n    True\n    &gt;&gt;&gt; radix_sort(list(range(14,-1,-1))) == sorted(range(15))\n    True\n    &gt;&gt;&gt; radix_sort([1,100,10,1000]) == sorted([1,100,10,1000])\n    True\n    &quot;&quot;&quot;</span>\n    RADIX = <span class=\"hljs-number\">10</span>\n    placement = <span class=\"hljs-number\">1</span>\n    max_digit = <span class=\"hljs-built_in\">max</span>(list_of_ints)\n    <span class=\"hljs-keyword\">while</span> placement &lt;= max_digit:\n        <span class=\"hljs-comment\"># declare and initialize empty buckets</span>\n        buckets: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">list</span>] = [<span class=\"hljs-built_in\">list</span>() <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(RADIX)]\n        <span class=\"hljs-comment\"># split list_of_ints between the buckets</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> list_of_ints:\n            tmp = <span class=\"hljs-built_in\">int</span>((i / placement) % RADIX)\n            buckets[tmp].append(i)\n        <span class=\"hljs-comment\"># put each buckets&#x27; contents into list_of_ints</span>\n        a = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> b <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(RADIX):\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> buckets[b]:\n                list_of_ints[a] = i\n                a += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-comment\"># move to next</span>\n        placement *= RADIX\n    <span class=\"hljs-keyword\">return</span> list_of_ints\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Sorts/RadixSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/RadixSort.js",
      "code": "<span class=\"hljs-comment\">/*\n* Radix sorts an integer array without comparing the integers.\n* It groups the integers by their digits which share the same\n* significant position.\n* For more information see: https://en.wikipedia.org/wiki/Radix_sort\n*/</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">radixSort</span> (items, <span class=\"hljs-variable constant_\">RADIX</span>) {\n  <span class=\"hljs-comment\">// default radix is then because we usually count to base 10</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable constant_\">RADIX</span> === <span class=\"hljs-literal\">undefined</span> || <span class=\"hljs-variable constant_\">RADIX</span> &lt; <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-variable constant_\">RADIX</span> = <span class=\"hljs-number\">10</span>\n  }\n\n  <span class=\"hljs-keyword\">let</span> maxLength = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">let</span> placement = <span class=\"hljs-number\">1</span>\n\n  <span class=\"hljs-keyword\">while</span> (!maxLength) {\n    maxLength = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-keyword\">const</span> buckets = []\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable constant_\">RADIX</span>; i++) {\n      buckets.<span class=\"hljs-title function_\">push</span>([])\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; items.<span class=\"hljs-property\">length</span>; j++) {\n      <span class=\"hljs-keyword\">const</span> tmp = items[j] / placement\n      buckets[<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(tmp % <span class=\"hljs-variable constant_\">RADIX</span>)].<span class=\"hljs-title function_\">push</span>(items[j])\n      <span class=\"hljs-keyword\">if</span> (maxLength &amp;&amp; tmp &gt; <span class=\"hljs-number\">0</span>) {\n        maxLength = <span class=\"hljs-literal\">false</span>\n      }\n    }\n\n    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">0</span>; b &lt; <span class=\"hljs-variable constant_\">RADIX</span>; b++) {\n      <span class=\"hljs-keyword\">const</span> buck = buckets[b]\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> k = <span class=\"hljs-number\">0</span>; k &lt; buck.<span class=\"hljs-property\">length</span>; k++) {\n        items[a] = buck[k]\n        a++\n      }\n    }\n    placement *= <span class=\"hljs-variable constant_\">RADIX</span>\n  }\n  <span class=\"hljs-keyword\">return</span> items\n}\n\n<span class=\"hljs-comment\">// Implementation of radixSort</span>\n\n<span class=\"hljs-keyword\">const</span> ar = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>]\n<span class=\"hljs-comment\">// Array before Sort</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ar)\n<span class=\"hljs-title function_\">radixSort</span>(ar)\n<span class=\"hljs-comment\">// Array after sort</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(ar)\n"
    },
    "c-plus-plus": {
      "dir": "sorting/radix_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/radix_sort.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">radixsort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-type\">int</span> count[<span class=\"hljs-number\">10</span>];\n    <span class=\"hljs-type\">int</span>* output = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[n];\n    <span class=\"hljs-built_in\">memset</span>(output, <span class=\"hljs-number\">0</span>, n * <span class=\"hljs-built_in\">sizeof</span>(*output));\n    <span class=\"hljs-built_in\">memset</span>(count, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">sizeof</span>(count));\n    <span class=\"hljs-type\">int</span> max = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        <span class=\"hljs-keyword\">if</span> (a[i] &gt; max) {\n            max = a[i];\n        }\n    }\n    <span class=\"hljs-type\">int</span> maxdigits = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (max) {\n        maxdigits++;\n        max /= <span class=\"hljs-number\">10</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; maxdigits; j++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            <span class=\"hljs-type\">int</span> t = std::<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">10</span>, j);\n            count[(a[i] % (<span class=\"hljs-number\">10</span> * t)) / t]++;\n        }\n        <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; <span class=\"hljs-number\">10</span>; p++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n                <span class=\"hljs-type\">int</span> t = std::<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">10</span>, j);\n                <span class=\"hljs-keyword\">if</span> ((a[i] % (<span class=\"hljs-number\">10</span> * t)) / t == p) {\n                    output[k] = a[i];\n                    k++;\n                }\n            }\n        }\n        <span class=\"hljs-built_in\">memset</span>(count, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">sizeof</span>(count));\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n            a[i] = output[i];\n        }\n    }\n    <span class=\"hljs-keyword\">delete</span>[] output;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> n)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; ++i) {\n        std::cout &lt;&lt; a[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> <span class=\"hljs-keyword\">const</span>* argv[])</span> </span>{\n    <span class=\"hljs-type\">int</span> a[] = {<span class=\"hljs-number\">170</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">802</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">66</span>};\n    <span class=\"hljs-type\">int</span> n = <span class=\"hljs-built_in\">sizeof</span>(a) / <span class=\"hljs-built_in\">sizeof</span>(a[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-built_in\">radixsort</span>(a, n);\n    <span class=\"hljs-built_in\">print</span>(a, n);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "Sorts/RadixSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Sorts/RadixSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> Sorts;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RadixSort</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getMax</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> n)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">mx</span> <span class=\"hljs-operator\">=</span> arr[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; n; i++) <span class=\"hljs-keyword\">if</span> (arr[i] &gt; mx) mx = arr[i];\n    <span class=\"hljs-keyword\">return</span> mx;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">countSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> n, <span class=\"hljs-type\">int</span> exp)</span> {\n    <span class=\"hljs-type\">int</span>[] output = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span>[] count = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">10</span>];\n    Arrays.fill(count, <span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) count[(arr[i] / exp) % <span class=\"hljs-number\">10</span>]++;\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) count[i] += count[i - <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">for</span> (i = n - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n      output[count[(arr[i] / exp) % <span class=\"hljs-number\">10</span>] - <span class=\"hljs-number\">1</span>] = arr[i];\n      count[(arr[i] / exp) % <span class=\"hljs-number\">10</span>]--;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) arr[i] = output[i];\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">radixsort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> n)</span> {\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">m</span> <span class=\"hljs-operator\">=</span> getMax(arr, n);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">exp</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; m / exp &gt; <span class=\"hljs-number\">0</span>; exp *= <span class=\"hljs-number\">10</span>) countSort(arr, n, exp);\n  }\n\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">print</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> n)</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n; i++) System.out.print(arr[i] + <span class=\"hljs-string\">&quot; &quot;</span>);\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">int</span>[] arr = {<span class=\"hljs-number\">170</span>, <span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">802</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">66</span>};\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> arr.length;\n    radixsort(arr, n);\n    print(arr, n);\n  }\n}\n<span class=\"hljs-comment\">// Written by James Mc Dermott(theycallmemac)</span>\n"
    },
    "c": {
      "dir": "sorting/radix_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/radix_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">largest</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> large = a[<span class=\"hljs-number\">0</span>], i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-keyword\">if</span> (large &lt; a[i])\n            large = a[i];\n    }\n    <span class=\"hljs-keyword\">return</span> large;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">RadixSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[], <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-type\">int</span> bucket[<span class=\"hljs-number\">10</span>][<span class=\"hljs-number\">10</span>], bucket_count[<span class=\"hljs-number\">10</span>];\n    <span class=\"hljs-type\">int</span> i, j, k, remainder, NOP = <span class=\"hljs-number\">0</span>, divisor = <span class=\"hljs-number\">1</span>, large, pass;\n\n    large = largest(a, n);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The large element %d\\n&quot;</span>, large);\n    <span class=\"hljs-keyword\">while</span> (large &gt; <span class=\"hljs-number\">0</span>)\n    {\n        NOP++;\n        large /= <span class=\"hljs-number\">10</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (pass = <span class=\"hljs-number\">0</span>; pass &lt; NOP; pass++)\n    {\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++)\n        {\n            bucket_count[i] = <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n        {\n            remainder = (a[i] / divisor) % <span class=\"hljs-number\">10</span>;\n            bucket[remainder][bucket_count[remainder]] = a[i];\n            bucket_count[remainder] += <span class=\"hljs-number\">1</span>;\n        }\n\n        i = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">0</span>; k &lt; <span class=\"hljs-number\">10</span>; k++)\n        {\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; bucket_count[k]; j++)\n            {\n                a[i] = bucket[k][j];\n                i++;\n            }\n        }\n        divisor *= <span class=\"hljs-number\">10</span>;\n\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d  &quot;</span>, a[i]);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> i, n, a[<span class=\"hljs-number\">10</span>];\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of elements :: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements :: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;a[i]);\n    }\n    RadixSort(a, n);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The sorted elements are ::  &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d  &quot;</span>, a[i]);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "go": {
      "dir": "sorts/radixsort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sorts/radixsort.go",
      "code": "<span class=\"hljs-keyword\">package</span> sorts\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">max</span><span class=\"hljs-params\">(arr []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\tmax := arr[<span class=\"hljs-number\">0</span>]\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> arr {\n\t\t<span class=\"hljs-keyword\">if</span> item &gt; max {\n\t\t\tmax = item\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> max\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">countSort</span><span class=\"hljs-params\">(arr []<span class=\"hljs-keyword\">int</span>, exp <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">var</span> digits [<span class=\"hljs-number\">10</span>]<span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">var</span> output = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-built_in\">len</span>(arr))\n\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> arr {\n\t\tdigits[(item/exp)%<span class=\"hljs-number\">10</span>]++\n\t}\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">10</span>; i++ {\n\t\tdigits[i] += digits[i<span class=\"hljs-number\">-1</span>]\n\t}\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-built_in\">len</span>(arr) - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i-- {\n\t\toutput[digits[(arr[i]/exp)%<span class=\"hljs-number\">10</span>]<span class=\"hljs-number\">-1</span>] = arr[i]\n\t\tdigits[(arr[i]/exp)%<span class=\"hljs-number\">10</span>]--\n\t}\n\n\t<span class=\"hljs-keyword\">return</span> output\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">unsignedRadixSort</span><span class=\"hljs-params\">(arr []<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(arr) == <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> arr\n\t}\n\tmaxElement := max(arr)\n\t<span class=\"hljs-keyword\">for</span> exp := <span class=\"hljs-number\">1</span>; maxElement/exp &gt; <span class=\"hljs-number\">0</span>; exp *= <span class=\"hljs-number\">10</span> {\n\t\tarr = countSort(arr, exp)\n\t}\n\t<span class=\"hljs-keyword\">return</span> arr\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RadixSort</span><span class=\"hljs-params\">(arr []<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">var</span> negatives, nonNegatives []<span class=\"hljs-keyword\">int</span>\n\n\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> arr {\n\t\t<span class=\"hljs-keyword\">if</span> item &lt; <span class=\"hljs-number\">0</span> {\n\t\t\tnegatives = <span class=\"hljs-built_in\">append</span>(negatives, -item)\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tnonNegatives = <span class=\"hljs-built_in\">append</span>(nonNegatives, item)\n\t\t}\n\t}\n\tnegatives = unsignedRadixSort(negatives)\n\n\t<span class=\"hljs-comment\">// Reverse the negative array and restore signs</span>\n\t<span class=\"hljs-keyword\">for</span> i, j := <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(negatives)<span class=\"hljs-number\">-1</span>; i &lt;= j; i, j = i+<span class=\"hljs-number\">1</span>, j<span class=\"hljs-number\">-1</span> {\n\t\tnegatives[i], negatives[j] = -negatives[j], -negatives[i]\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">append</span>(negatives, unsignedRadixSort(nonNegatives)...)\n}\n"
    },
    "rust": {
      "dir": "src/sorting/radix_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/radix_sort.rs",
      "code": "<span class=\"hljs-comment\">/// Sorts the elements of `arr` in-place using radix sort.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Time complexity is `O((n + b) * logb(k))`, where `n` is the number of elements,</span>\n<span class=\"hljs-comment\">/// `b` is the base (the radix), and `k` is the largest element.</span>\n<span class=\"hljs-comment\">/// When `n` and `b` are roughly the same maginitude, this algorithm runs in linear time.</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Space complexity is `O(n + b)`.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">radix_sort</span>(arr: &amp;<span class=\"hljs-keyword\">mut</span> [<span class=\"hljs-type\">u64</span>]) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">max</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-keyword\">match</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">max</span>() {\n        <span class=\"hljs-title function_ invoke__\">Some</span>(&amp;x) =&gt; x <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span>,\n        <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">return</span>,\n    };\n    <span class=\"hljs-comment\">// Make radix a power of 2 close to arr.len() for optimal runtime</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">radix</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>().<span class=\"hljs-title function_ invoke__\">next_power_of_two</span>();\n    <span class=\"hljs-comment\">// Counting sort by each digit from least to most significant</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">place</span> = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> place &lt;= max {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">digit_of</span> = |x| x <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">usize</span> / place % radix;\n        <span class=\"hljs-comment\">// Count digit occurrences</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">counter</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; radix];\n        <span class=\"hljs-keyword\">for</span> &amp;x <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">iter</span>() {\n            counter[<span class=\"hljs-title function_ invoke__\">digit_of</span>(x)] += <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-comment\">// Compute last index of each digit</span>\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..radix {\n            counter[i] += counter[i - <span class=\"hljs-number\">1</span>];\n        }\n        <span class=\"hljs-comment\">// Write elements to their new indices</span>\n        <span class=\"hljs-keyword\">for</span> &amp;x <span class=\"hljs-keyword\">in</span> arr.<span class=\"hljs-title function_ invoke__\">to_owned</span>().<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">rev</span>() {\n            counter[<span class=\"hljs-title function_ invoke__\">digit_of</span>(x)] -= <span class=\"hljs-number\">1</span>;\n            arr[counter[<span class=\"hljs-title function_ invoke__\">digit_of</span>(x)]] = x;\n        }\n        place *= radix;\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::super::is_sorted;\n    <span class=\"hljs-keyword\">use</span> super::radix_sort;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">a</span>: [<span class=\"hljs-type\">u64</span>; <span class=\"hljs-number\">0</span>] = [];\n        <span class=\"hljs-title function_ invoke__\">radix_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> a);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;a));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">descending</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">v</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">201</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-title function_ invoke__\">radix_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> v);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;v));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">ascending</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">v</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">127</span>, <span class=\"hljs-number\">201</span>];\n        <span class=\"hljs-title function_ invoke__\">radix_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> v);\n        <span class=\"hljs-built_in\">assert!</span>(<span class=\"hljs-title function_ invoke__\">is_sorted</span>(&amp;v));\n    }\n}\n"
    },
    "aarch64_assembly": {
      "dir": "sorters/radix_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters/radix_sort.s",
      "code": "* <span class=\"hljs-meta\">ARM</span> assembly AARCH64 Raspberry PI <span class=\"hljs-number\">3</span>B */\n<span class=\"hljs-comment\">/*  program radixSort64.s  */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-symbol\">TableNumber:</span>      .quad   <span class=\"hljs-number\">12485</span>,<span class=\"hljs-number\">301</span>,<span class=\"hljs-number\">16</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-number\">5006</span>,<span class=\"hljs-number\">9</span>,-<span class=\"hljs-number\">154389710</span>,<span class=\"hljs-number\">26</span>,<span class=\"hljs-number\">4400</span>,<span class=\"hljs-number\">71</span>,<span class=\"hljs-number\">115</span>\n<span class=\"hljs-comment\">#TableNumber:     .quad   10,9,8,7,6,-5,4,3,2,1</span>\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// first element</span>\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> radixSort\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">bl</span> displayTable\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\n<span class=\"hljs-symbol\">isSorted:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!             <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\n    <span class=\"hljs-keyword\">mov</span> x4,x3\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">98</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*         radix sort                                             */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* r0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* r1 contains the first element    */</span>\n<span class=\"hljs-comment\">/* r2 contains the number of element */</span>\n<span class=\"hljs-comment\">/* no registers save                 */</span>\n<span class=\"hljs-symbol\">radixSort:</span>\n    <span class=\"hljs-keyword\">str</span> <span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!                      <span class=\"hljs-comment\">// save  1 register</span>\n    <span class=\"hljs-keyword\">mov</span> x7,<span class=\"hljs-number\">0b1111</span>                         <span class=\"hljs-comment\">// mask one digit hexa</span>\n    <span class=\"hljs-keyword\">mov</span> x10,<span class=\"hljs-number\">0</span>                             <span class=\"hljs-comment\">// digit counter</span>\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x3,x1,<span class=\"hljs-number\">1</span>                           <span class=\"hljs-comment\">// start index i</span>\n<span class=\"hljs-number\">2</span>:                                        <span class=\"hljs-comment\">// start loop</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]                  <span class=\"hljs-comment\">// load value A[i]</span>\n    <span class=\"hljs-keyword\">and</span> x8,x4,x7                          <span class=\"hljs-comment\">// and mask</span>\n    <span class=\"hljs-keyword\">sub</span> x5,x3,<span class=\"hljs-number\">1</span>                           <span class=\"hljs-comment\">// index j</span>\n<span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]                  <span class=\"hljs-comment\">// load value A[j]</span>\n    <span class=\"hljs-keyword\">and</span> x9,x6,x7                          <span class=\"hljs-comment\">// and mask</span>\n    <span class=\"hljs-keyword\">cmp</span> x9,x8                             <span class=\"hljs-comment\">// compare one digit hexa</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">4</span>f\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">1</span>                           <span class=\"hljs-comment\">// increment index j</span>\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]                  <span class=\"hljs-comment\">// store value A[j+1]</span>\n    <span class=\"hljs-keyword\">sub</span> x5,x5,<span class=\"hljs-number\">2</span>                           <span class=\"hljs-comment\">// j = j - 1</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,x1\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">3</span>b                                <span class=\"hljs-comment\">// loop if j &gt;= first item</span>\n<span class=\"hljs-number\">4</span>:\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">1</span>                           <span class=\"hljs-comment\">// increment index j</span>\n    <span class=\"hljs-keyword\">str</span> x4,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]                  <span class=\"hljs-comment\">// store value A[i] in A[j+1]</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>                           <span class=\"hljs-comment\">// increment index i</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,x2                             <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">2</span>b                                <span class=\"hljs-comment\">// no -&gt; loop</span>\n \n    <span class=\"hljs-comment\">//bl displayTable</span>\n    <span class=\"hljs-keyword\">lsl</span> x7,x7,<span class=\"hljs-number\">4</span>                           <span class=\"hljs-comment\">// shift mask 4 bits left</span>\n    <span class=\"hljs-keyword\">add</span> x10,x10,<span class=\"hljs-number\">1</span>                         <span class=\"hljs-comment\">// increment counter</span>\n    <span class=\"hljs-keyword\">cmp</span> x10,<span class=\"hljs-number\">16</span>                            <span class=\"hljs-comment\">// 16 digits ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                                <span class=\"hljs-comment\">// no loop </span>\n<span class=\"hljs-number\">100</span>:\n \n    <span class=\"hljs-keyword\">ldr</span> <span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>                        <span class=\"hljs-comment\">// restaur  1 registers</span>\n    ret                                   <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-symbol\">displayTable:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion10S                  <span class=\"hljs-comment\">// décimal conversion</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at // character</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">mov</span> x0,x2\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    },
    "dart": {
      "dir": "sort/radix_sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort/radix_sort.dart",
      "code": "<span class=\"hljs-comment\">//radix sort</span>\n<span class=\"hljs-comment\">/*\n radix sort is a non-comparative sorting algorithm. It avoids comparison by creating and distributing elements into buckets according to their radix.\n  For elements with more than one significant digit, this bucketing process is repeated for each digit, \n while preserving the ordering of the prior step, until all digits have been considered. For this reason, \n radix sort has also been called bucket sort and digital sort.\n */</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span> <span class=\"hljs-keyword\">as</span> Math;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span> <span class=\"hljs-keyword\">show</span> Random;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\nmain() {\n  test(<span class=\"hljs-string\">&quot;Sorting of empty list returns empty list&quot;</span>, () {\n    expect(radixSort([]), equals([]));\n  });\n  test(<span class=\"hljs-string\">&quot;Sorting one element list return same list&quot;</span>, () {\n    expect(radixSort([<span class=\"hljs-number\">1</span>]), equals([<span class=\"hljs-number\">1</span>]));\n  });\n  test(<span class=\"hljs-string\">&quot;Sorting two times doesnt change input&quot;</span>, () {\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; lst = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">-1</span>];\n    expect(radixSort(lst), equals(radixSort(radixSort(lst))));\n  });\n  test(<span class=\"hljs-string\">&quot;Sorting already sorted list returns same list&quot;</span>, () {\n    <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt; lst = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">10</span>];\n    expect(radixSort(lst), equals(lst));\n  });\n  test(<span class=\"hljs-string\">&quot;radix sort&quot;</span>, () {\n    expect(radixSort([<span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">122</span>, <span class=\"hljs-number\">24435</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">434</span>, <span class=\"hljs-number\">232</span>, <span class=\"hljs-number\">1323</span>]),\n        equals([<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">122</span>, <span class=\"hljs-number\">232</span>, <span class=\"hljs-number\">434</span>, <span class=\"hljs-number\">1323</span>, <span class=\"hljs-number\">24435</span>]));\n  });\n\n  <span class=\"hljs-keyword\">final</span> seed = <span class=\"hljs-number\">10</span>, rnd = Random(), length = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">var</span> list =\n      <span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">int</span>&gt;.generate(length, (i) =&gt; rnd.nextInt(seed), growable: <span class=\"hljs-keyword\">false</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;before sorting:&#x27;</span>);\n  <span class=\"hljs-built_in\">print</span>(list);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;----------------------------------------------&#x27;</span>);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;After sorting:&#x27;</span>);\n  <span class=\"hljs-built_in\">print</span>(radixSort(list));\n}\n\ngetDigitNum(<span class=\"hljs-built_in\">int</span> n, <span class=\"hljs-built_in\">int</span> i) {\n  <span class=\"hljs-keyword\">var</span> cal = (n.round().abs() / Math.pow(<span class=\"hljs-number\">10</span>, i)) % <span class=\"hljs-number\">10</span>;\n\n  <span class=\"hljs-keyword\">return</span> cal.round();\n}\n\ndigitCount(<span class=\"hljs-built_in\">int</span> number) {\n  <span class=\"hljs-keyword\">if</span> (number == <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> (number.abs().toString().length);\n}\n\nmostDigits(<span class=\"hljs-built_in\">List</span> number) {\n  <span class=\"hljs-keyword\">var</span> maxDigits = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; number.length; i++) {\n    maxDigits = Math.max(maxDigits, digitCount(number[i]));\n  }\n  <span class=\"hljs-keyword\">return</span> maxDigits;\n}\n\nradixSort(<span class=\"hljs-built_in\">List</span> nums) {\n  <span class=\"hljs-keyword\">var</span> maxDightCount = mostDigits(nums);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> k = <span class=\"hljs-number\">0</span>; k &lt; maxDightCount; k++) {\n    <span class=\"hljs-keyword\">var</span> digitBuckets = <span class=\"hljs-built_in\">List</span>.generate(<span class=\"hljs-number\">10</span>, (_) =&gt; []);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; nums.length; i++) {\n      <span class=\"hljs-keyword\">var</span> digit = getDigitNum(nums[i], k);\n      digitBuckets[digit].add(nums[i]);\n    }\n\n    nums = digitBuckets.expand((lst) =&gt; lst).toList();\n  }\n  <span class=\"hljs-keyword\">return</span> nums;\n}\n"
    },
    "r": {
      "dir": "Sorting-Algorithms/radix_sort.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Sorting-Algorithms/radix_sort.R",
      "code": "<span class=\"hljs-comment\"># Radix sort in R:</span>\n\nradix.sort <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    x <span class=\"hljs-operator\">&lt;-</span> nchar<span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">max</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span>\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-punctuation\">(</span>i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span>x<span class=\"hljs-punctuation\">)</span>\n        elements.vec <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span>order<span class=\"hljs-punctuation\">(</span>elements.vec <span class=\"hljs-operator\">%%</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">10</span> <span class=\"hljs-operator\">^</span> i<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\n<span class=\"hljs-comment\"># Example:</span>\n<span class=\"hljs-comment\"># radix.sort(c(50, 3200, 27, 976, 820)) </span>\n<span class=\"hljs-comment\"># [1] 27 50 820 976 3200</span>\n\n<span class=\"hljs-comment\"># Note:</span>\n<span class=\"hljs-comment\"># It is implemented in the &#x27;sort&#x27; function of base R:</span>\n<span class=\"hljs-comment\"># sort(c(50, 3200, 27, 976, 820), method = &quot;radix&quot; , index.return = FALSE)</span>\n<span class=\"hljs-comment\"># [1] 27 50 820 976 3200</span>\n"
    },
    "ruby": {
      "dir": "sorting/radix_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/radix_sort.rb",
      "code": "<span class=\"hljs-comment\"># This is a pure ruby implementation of the radix sort algorithm</span>\n<span class=\"hljs-comment\"># the function returns collection ordered by ascending</span>\n<span class=\"hljs-comment\"># Example:</span>\n<span class=\"hljs-comment\"># pry(main)&gt; radix_sort([6, 22, 43, 16, 0, 15, 9])</span>\n<span class=\"hljs-comment\"># =&gt; [0, 6, 9, 15, 16, 22, 43]</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">radix_sort</span><span class=\"hljs-params\">(array, base = <span class=\"hljs-number\">10</span>)</span></span>\n  <span class=\"hljs-comment\"># passes count equals to the number of digits in the longest number</span>\n  passes = (Math.log(array.minmax.map(&amp;<span class=\"hljs-symbol\">:abs</span>).max) / Math.log(base)).floor + <span class=\"hljs-number\">1</span>\n  passes.times <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|i|</span>\n    buckets = Array.new(<span class=\"hljs-number\">2</span> * base) { [] }\n    base_i = base**i\n\n    <span class=\"hljs-comment\"># elements are added to buckets</span>\n    <span class=\"hljs-comment\"># according to the current place-value digit</span>\n    array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|j|</span>\n      n = (j / base_i) % base\n      n += base <span class=\"hljs-keyword\">if</span> j &gt;= <span class=\"hljs-number\">0</span>\n      buckets[n] &lt;&lt; j\n    <span class=\"hljs-keyword\">end</span>\n    array = buckets.flatten\n  <span class=\"hljs-keyword\">end</span>\n\n  array\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "php": {
      "dir": "sorting/radixSort.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/sorting/radixSort.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-comment\">//get the digits value by it&#x27;s place</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getDigit</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$num</span>,<span class=\"hljs-variable\">$i</span></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> floor(abs(<span class=\"hljs-variable\">$num</span>) /pow(<span class=\"hljs-number\">10</span>,<span class=\"hljs-variable\">$i</span>))%<span class=\"hljs-number\">10</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">digitsCount</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$num</span></span>)</span>{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$num</span>==<span class=\"hljs-number\">0</span>)<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> floor(log10(abs(<span class=\"hljs-variable\">$num</span>)))+<span class=\"hljs-number\">1</span>;\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">maxDigits</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$arr</span></span>)</span>{\n    <span class=\"hljs-variable\">$maxDigits</span>=<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span>=<span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$i</span>&lt;count(<span class=\"hljs-variable\">$arr</span>);<span class=\"hljs-variable\">$i</span>++){\n        <span class=\"hljs-variable\">$maxDigits</span>=max(<span class=\"hljs-variable\">$maxDigits</span>,digitsCount(<span class=\"hljs-variable\">$arr</span>[<span class=\"hljs-variable\">$i</span>]));\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$maxDigits</span>;\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">radixSort</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$nums</span></span>)</span>{\n    <span class=\"hljs-variable\">$maxDigitsCount</span>=maxDigits(<span class=\"hljs-variable\">$nums</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$k</span>=<span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$k</span>&lt;<span class=\"hljs-variable\">$maxDigitsCount</span>;<span class=\"hljs-variable\">$k</span>++){\n        <span class=\"hljs-variable\">$digitBucket</span>=array_fill(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">10</span>,[]);\n\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span>=<span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$i</span>&lt;count(<span class=\"hljs-variable\">$nums</span>);<span class=\"hljs-variable\">$i</span>++){\n            <span class=\"hljs-variable\">$digitBucket</span>[getDigit(<span class=\"hljs-variable\">$nums</span>[<span class=\"hljs-variable\">$i</span>],<span class=\"hljs-variable\">$k</span>)][]=<span class=\"hljs-variable\">$nums</span>[<span class=\"hljs-variable\">$i</span>];\n        }\n\n\n        <span class=\"hljs-variable\">$nums</span>=  concat(<span class=\"hljs-variable\">$digitBucket</span>);\n\n\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$nums</span>;\n}\n\n\n\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">concat</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">array</span> <span class=\"hljs-variable\">$array</span></span>) </span>{\n    <span class=\"hljs-variable\">$newArray</span>=[];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span>=<span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$i</span>&lt;count(<span class=\"hljs-variable\">$array</span>);<span class=\"hljs-variable\">$i</span>++){\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$j</span>=<span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$j</span>&lt;count(<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$i</span>]);<span class=\"hljs-variable\">$j</span>++){\n            <span class=\"hljs-variable\">$newArray</span>[]=<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$i</span>][<span class=\"hljs-variable\">$j</span>];\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$newArray</span>;\n}\n\n\n\n\n\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Sorters/Integer/RadixSorter.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Integer/RadixSorter.cs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Integer</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Radix sort is a non-comparative integer sorting algorithm that sorts data with integer keys by grouping keys by the</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     individual</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     digits which share the same significant position and value. A positional notation is required, but because integers</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     can represent</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     strings of characters (e.g., names or dates) and specially formatted floating point numbers, radix sort is not</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     limited to integers.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RadixSorter</span> : <span class=\"hljs-title\">IIntegerSorter</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array in ascending order.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] array</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> bits = <span class=\"hljs-number\">4</span>;\n            <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[array.Length];\n            <span class=\"hljs-keyword\">var</span> rshift = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> mask = ~(<span class=\"hljs-number\">-1</span> &lt;&lt; bits); mask != <span class=\"hljs-number\">0</span>; mask &lt;&lt;= bits, rshift += bits)\n            {\n                <span class=\"hljs-keyword\">var</span> cntarray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">1</span> &lt;&lt; bits];\n                <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> t <span class=\"hljs-keyword\">in</span> array)\n                {\n                    <span class=\"hljs-keyword\">var</span> key = (t &amp; mask) &gt;&gt; rshift;\n                    ++cntarray[key];\n                }\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; cntarray.Length; ++i)\n                {\n                    cntarray[i] += cntarray[i - <span class=\"hljs-number\">1</span>];\n                }\n\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> p = array.Length - <span class=\"hljs-number\">1</span>; p &gt;= <span class=\"hljs-number\">0</span>; --p)\n                {\n                    <span class=\"hljs-keyword\">var</span> key = (array[p] &amp; mask) &gt;&gt; rshift;\n                    --cntarray[key];\n                    b[cntarray[key]] = array[p];\n                }\n\n                <span class=\"hljs-keyword\">var</span> temp = b;\n                b = array;\n                array = temp;\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "abdelrhman",
      "email": "mohamed95zoytak@gmail.com",
      "commits": 1
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ryan Lowe",
      "email": "rlowe13@me.com",
      "commits": 1
    },
    {
      "name": "James Mc Dermott",
      "email": "james.mcdermott89@gmail.com",
      "commits": 1
    },
    {
      "name": "Aruj Sharma",
      "email": "aruj123sharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Richard Bailey",
      "email": "richard@firsttech.digital",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "KuLi",
      "email": "KuLi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mehdi ALAOUI",
      "email": "alaoui.mehdi.1995@gmail.com",
      "commits": 1
    },
    {
      "name": "valery noname",
      "email": "valerydec17@gmail.com",
      "commits": 1
    },
    {
      "name": "Kenneth Nero",
      "email": "kbn1798@rit.edu",
      "commits": 1
    },
    {
      "name": "Matthew",
      "email": "MatthewG25@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Marcos Vinicius",
      "email": "mvhb@cin.ufpe.br",
      "commits": 1
    },
    {
      "name": "小么小儿郎EL",
      "email": "littlecowherd@qq.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Inno Fang",
      "email": "innofang@outlook.com",
      "commits": 1
    },
    {
      "name": "Sayan Bandyopadhyay",
      "email": "sayan.bandyopadhyay@yahoo.co.in",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Anirban166",
      "email": "bloodraven166@gmail.com",
      "commits": 2
    },
    {
      "name": "mattan",
      "email": "mattany@gmali.com",
      "commits": 2
    },
    {
      "name": "Panzki",
      "email": "Panzki@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Arjun Singh Mann",
      "email": "37778385+arjunmann73@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Algoritmos de Ordenamiento/Ordenamiento Radix.md",
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Sorting Algorithms/Radix Sort.md"
  }
}
