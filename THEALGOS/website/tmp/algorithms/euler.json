{
  "slug": "euler",
  "name": "Euler",
  "categories": ["datastructures", "graphs"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/graphs/euler.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/graphs/euler.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;Graph.h&quot;</span></span>\n\n<span class=\"hljs-comment\">// Return the number of vertices that v is</span>\n<span class=\"hljs-comment\">// connected to</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">degree</span><span class=\"hljs-params\">(Graph g, <span class=\"hljs-type\">int</span> nV, Vertex v)</span>\n{\n    <span class=\"hljs-type\">int</span> deg = <span class=\"hljs-number\">0</span>;\n    Vertex w;\n    <span class=\"hljs-keyword\">for</span> (w = <span class=\"hljs-number\">0</span>; w &lt; nV; w++)\n        <span class=\"hljs-keyword\">if</span> (adjacent(g, v, w))\n            deg++;\n    <span class=\"hljs-keyword\">return</span> deg;\n}\n\n<span class=\"hljs-comment\">// If start from vertex v, decide if the</span>\n<span class=\"hljs-comment\">// graph has euler path</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">hasEulerPath</span><span class=\"hljs-params\">(Graph g, <span class=\"hljs-type\">int</span> nV, Vertex v, Vertex w)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (v != w)\n    {\n        <span class=\"hljs-keyword\">if</span> (degree(g, nV, v) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> || degree(g, nV, w) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (degree(g, nV, v) % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    Vertex x;\n    <span class=\"hljs-keyword\">for</span> (x = <span class=\"hljs-number\">0</span>; x &lt; nV; x++)\n        <span class=\"hljs-keyword\">if</span> (x != v &amp;&amp; x != w &amp;&amp; degree(g, nV, x) % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    Edge e;\n    <span class=\"hljs-type\">int</span> n;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n    Graph g = newGraph(n);\n\n    Vertex src, dest;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter source node: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination node: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dest);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter an edge (from): &quot;</span>);\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;e.v) == <span class=\"hljs-number\">1</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter an edge (to): &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;e.w);\n        insertEdge(g, e);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter an edge (from): &quot;</span>);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Finished.\\n&quot;</span>);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;The graph has &quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (hasEulerPath(g, n, src, dest))\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;an&quot;</span>);\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;no&quot;</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; Euler path from %d to %d.\\n&quot;</span>, src, dest);\n\n    freeGraph(g);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">// By</span>\n<span class=\"hljs-comment\">//  .----------------.  .----------------.  .----------------.</span>\n<span class=\"hljs-comment\">//  .-----------------.  .----------------.  .----------------.</span>\n<span class=\"hljs-comment\">// | .--------------. || .--------------. || .--------------. ||</span>\n<span class=\"hljs-comment\">// .--------------. | | .--------------. || .--------------. | | |  _________ |</span>\n<span class=\"hljs-comment\">// || | _____  _____ | || |      __      | || | ____  _____  | | | |  ____  ____</span>\n<span class=\"hljs-comment\">// | || |     ____     | | | | |  _   _  |  | || ||_   _||_   _|| || |     /  \\\n// | || ||_   \\|_   _| | | | | |_   ||   _| | || |   .&#x27;    `.   | | | | |_/ | |</span>\n<span class=\"hljs-comment\">// \\_|  | || |  | |    | |  | || |    / /\\ \\    | || |  |   \\ | |   | | | |   |</span>\n<span class=\"hljs-comment\">// |__| |   | || |  /  .--.  \\  | | | |     | |      | || |  | &#x27;    &#x27; |  | || |</span>\n<span class=\"hljs-comment\">// / ____ \\   | || |  | |\\ \\| |   | | | |   |  __  |   | || |  | |    | |  | |</span>\n<span class=\"hljs-comment\">// | |    _| |_     | || |   \\ `--&#x27; /   | || | _/ /    \\ \\_ | || | _| |_\\   |_</span>\n<span class=\"hljs-comment\">// | | | |  _| |  | |_  | || |  \\  `--&#x27;  /  | | | |   |_____|    | || | `.__.&#x27;</span>\n<span class=\"hljs-comment\">// | || ||____|  |____|| || ||_____|\\____| | | | | |____||____| | || | `.____.&#x27;</span>\n<span class=\"hljs-comment\">// | | | |              | || |              | || |              | || | | | | |</span>\n<span class=\"hljs-comment\">// | || |              | | | &#x27;--------------&#x27; || &#x27;--------------&#x27; ||</span>\n<span class=\"hljs-comment\">// &#x27;--------------&#x27; || &#x27;--------------&#x27; | | &#x27;--------------&#x27; || &#x27;--------------&#x27;</span>\n<span class=\"hljs-comment\">// |</span>\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;  &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\n<span class=\"hljs-comment\">//  &#x27;----------------&#x27;   &#x27;----------------&#x27;  &#x27;----------------&#x27;</span>\n\n<span class=\"hljs-comment\">//  Email :    z5261243@unsw.edu.au</span>\n<span class=\"hljs-comment\">//             hhoanhtuann@gmail.com</span>\n"
    }
  },
  "contributors": [
    {
      "name": "ttuanho",
      "email": "hhoanhtuann@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
