{
  "slug": "parenthesis",
  "name": "Parenthesis",
  "categories": ["datastructures", "stack"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/stack/parenthesis.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/stack/parenthesis.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> SIZE 100</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">char</span> data;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">link</span>;</span>\n};\n\n<span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">0</span>;          <span class=\"hljs-comment\">// c used as counter to check if stack is empty or not</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">head</span>;</span>  <span class=\"hljs-comment\">// declaring head pointer globally assigned to NULL</span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> x)</span>  <span class=\"hljs-comment\">// function for pushing</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span> =</span> head, *temp;\n    temp = (<span class=\"hljs-keyword\">struct</span> node *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    temp-&gt;data = x;\n    <span class=\"hljs-keyword\">if</span> (head ==\n        <span class=\"hljs-literal\">NULL</span>)  <span class=\"hljs-comment\">// will be execute only one time i.e, 1st time push is called</span>\n    {\n        head = temp;\n        p = head;\n        p-&gt;link = <span class=\"hljs-literal\">NULL</span>;\n        c++;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        temp-&gt;link = p;\n        p = temp;\n        head = p;\n        c++;\n    }\n}\n\n<span class=\"hljs-type\">char</span> <span class=\"hljs-title function_\">pop</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>  <span class=\"hljs-comment\">// function for pop</span>\n{\n    <span class=\"hljs-type\">char</span> x;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span> =</span> head;\n    x = p-&gt;data;\n    head = p-&gt;link;\n    <span class=\"hljs-built_in\">free</span>(p);\n    c--;\n    <span class=\"hljs-keyword\">return</span> x;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">isBalanced</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *s)</span>\n{\n    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">char</span> x;\n    <span class=\"hljs-keyword\">while</span> (s[i] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>)  <span class=\"hljs-comment\">// loop for covering entire string of brackets</span>\n    {\n        <span class=\"hljs-comment\">// printf(&quot;\\t s[i]=%c\\n&quot;, s[i]); //DEBUG</span>\n        <span class=\"hljs-keyword\">if</span> (s[i] == <span class=\"hljs-string\">&#x27;{&#x27;</span> || s[i] == <span class=\"hljs-string\">&#x27;(&#x27;</span> ||\n            s[i] == <span class=\"hljs-string\">&#x27;[&#x27;</span>)  <span class=\"hljs-comment\">// if opening bracket then push</span>\n            push(s[i]);\n        <span class=\"hljs-keyword\">else</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (c &lt;= <span class=\"hljs-number\">0</span>)  <span class=\"hljs-comment\">// i.e, stack is empty as only opening brackets are</span>\n                         <span class=\"hljs-comment\">// added to stack</span>\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n            x = pop();\n            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-string\">&#x27;{&#x27;</span> &amp;&amp; s[i] != <span class=\"hljs-string\">&#x27;}&#x27;</span>)\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-string\">&#x27;[&#x27;</span> &amp;&amp; s[i] != <span class=\"hljs-string\">&#x27;]&#x27;</span>)\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-string\">&#x27;(&#x27;</span> &amp;&amp; s[i] != <span class=\"hljs-string\">&#x27;)&#x27;</span>)\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n        i++;\n    }\n\n    <span class=\"hljs-comment\">// at end if stack is empy which means whole process has been performed</span>\n    <span class=\"hljs-comment\">// correctly so return 1</span>\n    <span class=\"hljs-keyword\">return</span> (c == <span class=\"hljs-number\">0</span>) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">destroyStack</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">p</span> =</span> head;\n    <span class=\"hljs-keyword\">if</span> (c &gt; <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-keyword\">while</span> (p-&gt;link)\n        {\n            <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">tmp</span> =</span> p;\n            p = p-&gt;link;\n            <span class=\"hljs-built_in\">free</span>(tmp);\n        }\n\n        c = <span class=\"hljs-number\">0</span>;\n    }\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> t;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\t\\tBalanced parenthesis\\n\\n&quot;</span>);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPlease enter the number of processing rounds? &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;t);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> a0 = <span class=\"hljs-number\">0</span>; a0 &lt; t; a0++)\n    {\n        <span class=\"hljs-type\">char</span> s[SIZE];\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nPlease enter the expression? &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>, s);\n\n        <span class=\"hljs-keyword\">if</span> (isBalanced(s))\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nYES\\n&quot;</span>);\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nNO\\n&quot;</span>);\n\n        <span class=\"hljs-comment\">/* tidy up stack for new round */</span>\n        destroyStack();\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
