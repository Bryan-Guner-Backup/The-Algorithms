{
  "slug": "burrows-wheeler-transform",
  "name": "Burrows-Wheeler transform",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "Algorithms/DataCompression/BurrowsWheelerTransform.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/DataCompression/BurrowsWheelerTransform.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Linq;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.DataCompression</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The Burrows–Wheeler transform (BWT) rearranges a character string into runs of similar characters.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This is useful for compression, since it tends to be easy to compress a string that has runs of repeated</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     characters.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     See <span class=\"hljs-doctag\">&lt;a href=&quot;https://en.wikipedia.org/wiki/Burrows%E2%80%93Wheeler_transform&quot;&gt;</span>here<span class=\"hljs-doctag\">&lt;/a&gt;</span> for more info.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BurrowsWheelerTransform</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes the input string using BWT and returns encoded string and the index of original string in the sorted</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     rotation matrix.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;s&quot;&gt;</span>Input string.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> (<span class=\"hljs-built_in\">string</span> encoded, <span class=\"hljs-built_in\">int</span> index) Encode(<span class=\"hljs-built_in\">string</span> s)\n        {\n            <span class=\"hljs-keyword\">if</span> (s.Length == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">string</span>.Empty, <span class=\"hljs-number\">0</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> rotations = GetRotations(s);\n            Array.Sort(rotations, StringComparer.Ordinal);\n            <span class=\"hljs-keyword\">var</span> lastColumn = rotations\n                .Select(x =&gt; x[^<span class=\"hljs-number\">1</span>])\n                .ToArray();\n            <span class=\"hljs-keyword\">var</span> encoded = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>(lastColumn);\n            <span class=\"hljs-keyword\">return</span> (encoded, Array.IndexOf(rotations, s));\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Decodes the input string and returns original string.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;s&quot;&gt;</span>Encoded string.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>Index  of original string in the sorted rotation matrix.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s, <span class=\"hljs-built_in\">int</span> index</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (s.Length == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">string</span>.Empty;\n            }\n\n            <span class=\"hljs-keyword\">var</span> rotations = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[s.Length];\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.Length; i++)\n            {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; s.Length; j++)\n                {\n                    rotations[j] = s[j] + rotations[j];\n                }\n\n                Array.Sort(rotations, StringComparer.Ordinal);\n            }\n\n            <span class=\"hljs-keyword\">return</span> rotations[index];\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span>[] <span class=\"hljs-title\">GetRotations</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">string</span>[s.Length];\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.Length; i++)\n            {\n                result[i] = s.Substring(i) + s.Substring(<span class=\"hljs-number\">0</span>, i);\n            }\n\n            <span class=\"hljs-keyword\">return</span> result;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Valdas",
      "email": "valdemar.silcenko@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
