{
  "slug": "columnartranspositioncipher",
  "name": "ColumnarTranspositionCipher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "ciphers/ColumnarTranspositionCipher.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/ciphers/ColumnarTranspositionCipher.java",
      "code": "<span class=\"hljs-keyword\">package</span> ciphers;\n\n<span class=\"hljs-comment\">/**\n * Columnar Transposition Cipher Encryption and Decryption.\n *\n * <span class=\"hljs-doctag\">@author</span> &lt;a href=&quot;https://github.com/freitzzz&quot;&gt;freitzzz&lt;/a&gt;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ColumnarTranspositionCipher</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String keyword;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[][] table;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> String abecedarium;\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ABECEDARIUM</span> <span class=\"hljs-operator\">=</span>\n      <span class=\"hljs-string\">&quot;abcdefghijklmnopqrstuvwxyzABCDEFG&quot;</span> + <span class=\"hljs-string\">&quot;HIJKLMNOPQRSTUVWXYZ0123456789,.;:-@&quot;</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ENCRYPTION_FIELD</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;≈&quot;</span>;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ENCRYPTION_FIELD_CHAR</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27;≈&#x27;</span>;\n\n  <span class=\"hljs-comment\">/**\n   * Encrypts a certain String with the Columnar Transposition Cipher Rule\n   *\n   * <span class=\"hljs-doctag\">@param</span> word Word being encrypted\n   * <span class=\"hljs-doctag\">@param</span> keyword String with keyword being used\n   * <span class=\"hljs-doctag\">@return</span> a String with the word encrypted by the Columnar Transposition Cipher Rule\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encrpyter</span><span class=\"hljs-params\">(String word, String keyword)</span> {\n    ColumnarTranspositionCipher.keyword = keyword;\n    abecedariumBuilder(<span class=\"hljs-number\">500</span>);\n    table = tableBuilder(word);\n    Object[][] sortedTable = sortTable(table);\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">wordEncrypted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sortedTable[i].length; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; sortedTable.length; j++) {\n        wordEncrypted += sortedTable[j][i];\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> wordEncrypted;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Encrypts a certain String with the Columnar Transposition Cipher Rule\n   *\n   * <span class=\"hljs-doctag\">@param</span> word Word being encrypted\n   * <span class=\"hljs-doctag\">@param</span> keyword String with keyword being used\n   * <span class=\"hljs-doctag\">@param</span> abecedarium String with the abecedarium being used. null for default one\n   * <span class=\"hljs-doctag\">@return</span> a String with the word encrypted by the Columnar Transposition Cipher Rule\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encrpyter</span><span class=\"hljs-params\">(String word, String keyword, String abecedarium)</span> {\n    ColumnarTranspositionCipher.keyword = keyword;\n    <span class=\"hljs-keyword\">if</span> (abecedarium != <span class=\"hljs-literal\">null</span>) {\n      ColumnarTranspositionCipher.abecedarium = abecedarium;\n    } <span class=\"hljs-keyword\">else</span> {\n      ColumnarTranspositionCipher.abecedarium = ABECEDARIUM;\n    }\n    table = tableBuilder(word);\n    Object[][] sortedTable = sortTable(table);\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">wordEncrypted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sortedTable[<span class=\"hljs-number\">0</span>].length; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt; sortedTable.length; j++) {\n        wordEncrypted += sortedTable[j][i];\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> wordEncrypted;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Decrypts a certain encrypted String with the Columnar Transposition Cipher Rule\n   *\n   * <span class=\"hljs-doctag\">@return</span> a String decrypted with the word encrypted by the Columnar Transposition Cipher Rule\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decrypter</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">wordDecrypted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; table.length; i++) {\n      <span class=\"hljs-keyword\">for</span> (Object item : table[i]) {\n        wordDecrypted += item;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> wordDecrypted.replaceAll(ENCRYPTION_FIELD, <span class=\"hljs-string\">&quot;&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Builds a table with the word to be encrypted in rows by the Columnar Transposition Cipher Rule\n   *\n   * <span class=\"hljs-doctag\">@return</span> An Object[][] with the word to be encrypted filled in rows and columns\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[][] tableBuilder(String word) {\n    Object[][] table = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[numberOfRows(word) + <span class=\"hljs-number\">1</span>][keyword.length()];\n    <span class=\"hljs-type\">char</span>[] wordInChards = word.toCharArray();\n    <span class=\"hljs-comment\">// Fils in the respective numbers</span>\n    table[<span class=\"hljs-number\">0</span>] = findElements();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">charElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt; table.length; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; j &lt; table[i].length; j++) {\n        <span class=\"hljs-keyword\">if</span> (charElement &lt; wordInChards.length) {\n          table[i][j] = wordInChards[charElement];\n          charElement++;\n        } <span class=\"hljs-keyword\">else</span> {\n          table[i][j] = ENCRYPTION_FIELD_CHAR;\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> table;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Determines the number of rows the table should have regarding the Columnar Transposition Cipher\n   * Rule\n   *\n   * <span class=\"hljs-doctag\">@return</span> an int with the number of rows that the table should have in order to respect the\n   *     Columnar Transposition Cipher Rule.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">numberOfRows</span><span class=\"hljs-params\">(String word)</span> {\n    <span class=\"hljs-keyword\">if</span> (word.length() / keyword.length() &gt; word.length() / keyword.length()) {\n      <span class=\"hljs-keyword\">return</span> (word.length() / keyword.length()) + <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> word.length() / keyword.length();\n    }\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@return</span> charValues */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[] findElements() {\n    Object[] charValues = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[keyword.length()];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; charValues.length; i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">charValueIndex</span> <span class=\"hljs-operator\">=</span> abecedarium.indexOf(keyword.charAt(i));\n      charValues[i] = charValueIndex &gt; -<span class=\"hljs-number\">1</span> ? charValueIndex : <span class=\"hljs-literal\">null</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> charValues;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> table\n   * <span class=\"hljs-doctag\">@return</span> tableSorted\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[][] sortTable(Object[][] table) {\n    Object[][] tableSorted = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[table.length][table[<span class=\"hljs-number\">0</span>].length];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; tableSorted.length; i++) {\n      System.arraycopy(table[i], <span class=\"hljs-number\">0</span>, tableSorted[i], <span class=\"hljs-number\">0</span>, tableSorted[i].length);\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; tableSorted[<span class=\"hljs-number\">0</span>].length; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-number\">1</span>; j &lt; tableSorted[<span class=\"hljs-number\">0</span>].length; j++) {\n        <span class=\"hljs-keyword\">if</span> ((<span class=\"hljs-type\">int</span>) tableSorted[<span class=\"hljs-number\">0</span>][i] &gt; (<span class=\"hljs-type\">int</span>) table[<span class=\"hljs-number\">0</span>][j]) {\n          Object[] column = getColumn(tableSorted, tableSorted.length, i);\n          switchColumns(tableSorted, j, i, column);\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> tableSorted;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> table\n   * <span class=\"hljs-doctag\">@param</span> rows\n   * <span class=\"hljs-doctag\">@param</span> column\n   * <span class=\"hljs-doctag\">@return</span> columnArray\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Object[] getColumn(Object[][] table, <span class=\"hljs-type\">int</span> rows, <span class=\"hljs-type\">int</span> column) {\n    Object[] columnArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[rows];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; rows; i++) {\n      columnArray[i] = table[i][column];\n    }\n    <span class=\"hljs-keyword\">return</span> columnArray;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> table\n   * <span class=\"hljs-doctag\">@param</span> firstColumnIndex\n   * <span class=\"hljs-doctag\">@param</span> secondColumnIndex\n   * <span class=\"hljs-doctag\">@param</span> columnToSwitch\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">switchColumns</span><span class=\"hljs-params\">(\n      Object[][] table, <span class=\"hljs-type\">int</span> firstColumnIndex, <span class=\"hljs-type\">int</span> secondColumnIndex, Object[] columnToSwitch)</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; table.length; i++) {\n      table[i][secondColumnIndex] = table[i][firstColumnIndex];\n      table[i][firstColumnIndex] = columnToSwitch[i];\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Creates an abecedarium with a specified ascii inded\n   *\n   * <span class=\"hljs-doctag\">@param</span> value Number of characters being used based on the ASCII Table\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">abecedariumBuilder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> {\n    abecedarium = <span class=\"hljs-string\">&quot;&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; value; i++) {\n      abecedarium += (<span class=\"hljs-type\">char</span>) i;\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">showTable</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">for</span> (Object[] table1 : table) {\n      <span class=\"hljs-keyword\">for</span> (Object item : table1) {\n        System.out.print(item + <span class=\"hljs-string\">&quot; &quot;</span>);\n      }\n      System.out.println();\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">keywordForExample</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;asd215&quot;</span>;\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">wordBeingEncrypted</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;This is a test of the Columnar Transposition Cipher&quot;</span>;\n    System.out.println(<span class=\"hljs-string\">&quot;### Example of Columnar Transposition Cipher ###\\n&quot;</span>);\n    System.out.println(<span class=\"hljs-string\">&quot;Word being encryped -&gt;&gt;&gt; &quot;</span> + wordBeingEncrypted);\n    System.out.println(\n        <span class=\"hljs-string\">&quot;Word encrypted -&gt;&gt;&gt; &quot;</span>\n            + ColumnarTranspositionCipher.encrpyter(wordBeingEncrypted, keywordForExample));\n    System.out.println(<span class=\"hljs-string\">&quot;Word decryped -&gt;&gt;&gt; &quot;</span> + ColumnarTranspositionCipher.decrypter());\n    System.out.println(<span class=\"hljs-string\">&quot;\\n### Encrypted Table ###&quot;</span>);\n    showTable();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "DESKTOP-0VAEMFL\\joaom",
      "email": "1160907@isep.ipp.pt",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
