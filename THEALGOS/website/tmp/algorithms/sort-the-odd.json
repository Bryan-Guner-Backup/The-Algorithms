{
  "slug": "sort-the-odd",
  "name": "Sort the Odd",
  "categories": ["codewars"],
  "body": {},
  "implementations": {
    "elixir": {
      "dir": "lib/codewars/sort_the_odd.ex",
      "url": "https://github.com/TheAlgorithms/elixir/tree/master/lib/codewars/sort_the_odd.ex",
      "code": "<span class=\"hljs-comment\"># CODEWARS: https://www.codewars.com/kata/578aa45ee9fd15ff4600090d/elixir</span>\n\n<span class=\"hljs-comment\"># You will be given an array of numbers.</span>\n<span class=\"hljs-comment\"># You have to sort the odd numbers in ascending order</span>\n<span class=\"hljs-comment\"># while leaving the even numbers at their original positions.</span>\n\n<span class=\"hljs-comment\"># EXAPLES:</span>\n<span class=\"hljs-comment\"># [7, 1]                            =&gt;  [1, 7]</span>\n<span class=\"hljs-comment\"># [5, 8, 6, 3, 4]                   =&gt;  [3, 8, 6, 5, 4]</span>\n<span class=\"hljs-comment\"># [1, 2, 3, -1, -3, 5]              =&gt;  [-3, 2, -1, 1, 3, 5]</span>\n<span class=\"hljs-comment\"># [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]    =&gt;  [1, 8, 3, 6, 5, 4, 7, 2, 9, 0]</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Algorithms.CodeWars.SortTheOdd</span></span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-variable\">@moduledoc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  line 30: Theta(n)\n  line 31: BigO(n log n)\n  line 32: Theta(n + m) - where n: input List length, m: number of odd in input List\n  line 33: BigO(1) - note: only for List\n  -----------------------------\n  Complexity: BigO(n log n)\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-keyword\">require</span> Integer\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  take a List and return the list with only odd numbers ordered\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-variable\">@spec</span> sort_the_odd(list(integer)) :: list(integer)\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sort_the_odd</span></span>(input_list) <span class=\"hljs-keyword\">do</span>\n    input_list\n    |&gt; Enum.filter(<span class=\"hljs-keyword\">fn</span> el -&gt; Integer.is_odd(el) <span class=\"hljs-keyword\">end</span>)\n    |&gt; Enum.sort()\n    |&gt; merge(input_list, [])\n    |&gt; Enum.reverse()\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  recursive function: take sorted odd List, input List, result\n  return the merged list with the even number fixed at the same index\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-variable\">@spec</span> merge(list(integer), list(integer), list(integer)) :: list(integer)\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge</span></span>([], input_list, result), <span class=\"hljs-symbol\">do:</span> Enum.reverse(input_list) |&gt; Enum.concat(result)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge</span></span>(sorted_list, [], result), <span class=\"hljs-symbol\">do:</span> Enum.concat(sorted_list, result)\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge</span></span>([sorted_head | sorted_rest], [head | rest], result) <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-comment\"># i go on until i find an odd number</span>\n    <span class=\"hljs-keyword\">case</span> Integer.is_odd(head) <span class=\"hljs-keyword\">do</span>\n      <span class=\"hljs-literal\">true</span> -&gt; merge(sorted_rest, rest, [sorted_head | result])\n      <span class=\"hljs-literal\">false</span> -&gt; merge([sorted_head | sorted_rest], rest, [head | result])\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Alessio Farinelli",
      "email": "alessio.farinelli.developer@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
