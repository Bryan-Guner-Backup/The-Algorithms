{
  "slug": "iterativeternarysearch",
  "name": "IterativeTernarySearch",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Searches/IterativeTernarySearch.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Searches/IterativeTernarySearch.java",
      "code": "<span class=\"hljs-keyword\">package</span> Searches;\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">static</span> java.lang.String.format;\n\n<span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n<span class=\"hljs-keyword\">import</span> java.util.stream.Stream;\n\n<span class=\"hljs-comment\">/**\n * A iterative version of a ternary search algorithm This is better way to implement the ternary\n * search, because a recursive version adds some overhead to a stack. But in java the compile can\n * transform the recursive version to iterative implicitly, so there are no much differences between\n * these two algorithms\n *\n * &lt;p&gt;Worst-case performance Θ(log3(N)) Best-case performance O(1) Average performance Θ(log3(N))\n * Worst-case space complexity O(1)\n *\n * <span class=\"hljs-doctag\">@author</span> Podshivalov Nikita (https://github.com/nikitap492)\n * <span class=\"hljs-doctag\">@see</span> SearchAlgorithm\n * <span class=\"hljs-doctag\">@see</span> TernarySearch\n * <span class=\"hljs-doctag\">@since</span> 2018-04-13\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">IterativeTernarySearch</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SearchAlgorithm</span> {\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">find</span><span class=\"hljs-params\">(T[] array, T key)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> array.length - <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">while</span> (right &gt; left) {\n\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftCmp</span> <span class=\"hljs-operator\">=</span> array[left].compareTo(key);\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightCmp</span> <span class=\"hljs-operator\">=</span> array[right].compareTo(key);\n      <span class=\"hljs-keyword\">if</span> (leftCmp == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> left;\n      <span class=\"hljs-keyword\">if</span> (rightCmp == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> right;\n\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">leftThird</span> <span class=\"hljs-operator\">=</span> left + (right - left) / <span class=\"hljs-number\">3</span> + <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rightThird</span> <span class=\"hljs-operator\">=</span> right - (right - left) / <span class=\"hljs-number\">3</span> - <span class=\"hljs-number\">1</span>;\n\n      <span class=\"hljs-keyword\">if</span> (array[leftThird].compareTo(key) &lt;= <span class=\"hljs-number\">0</span>) {\n        left = leftThird;\n      } <span class=\"hljs-keyword\">else</span> {\n        right = rightThird;\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// just generate data</span>\n    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">maxElement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100000</span>;\n    Integer[] integers =\n        Stream.generate(() -&gt; r.nextInt(maxElement)).limit(size).sorted().toArray(Integer[]::<span class=\"hljs-keyword\">new</span>);\n\n    <span class=\"hljs-comment\">// the element that should be found</span>\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">shouldBeFound</span> <span class=\"hljs-operator\">=</span> integers[r.nextInt(size - <span class=\"hljs-number\">1</span>)];\n\n    <span class=\"hljs-type\">IterativeTernarySearch</span> <span class=\"hljs-variable\">search</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IterativeTernarySearch</span>();\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">atIndex</span> <span class=\"hljs-operator\">=</span> search.find(integers, shouldBeFound);\n\n    System.out.println(\n        format(\n            <span class=\"hljs-string\">&quot;Should be found: %d. Found %d at index %d. An array length %d&quot;</span>,\n            shouldBeFound, integers[atIndex], atIndex, size));\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">toCheck</span> <span class=\"hljs-operator\">=</span> Arrays.binarySearch(integers, shouldBeFound);\n    System.out.println(\n        format(\n            <span class=\"hljs-string\">&quot;Found by system method at an index: %d. Is equal: %b&quot;</span>, toCheck, toCheck == atIndex));\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
