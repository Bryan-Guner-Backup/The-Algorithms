{
  "slug": "rsa-cipher",
  "name": "Rsa Cipher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/rsa_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/rsa_cipher.py",
      "code": "<span class=\"hljs-keyword\">import</span> os\n<span class=\"hljs-keyword\">import</span> sys\n\n<span class=\"hljs-keyword\">from</span> . <span class=\"hljs-keyword\">import</span> rsa_key_generator <span class=\"hljs-keyword\">as</span> rkg\n\nDEFAULT_BLOCK_SIZE = <span class=\"hljs-number\">128</span>\nBYTE_SIZE = <span class=\"hljs-number\">256</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_blocks_from_text</span>(<span class=\"hljs-params\">\n    message: <span class=\"hljs-built_in\">str</span>, block_size: <span class=\"hljs-built_in\">int</span> = DEFAULT_BLOCK_SIZE\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    message_bytes = message.encode(<span class=\"hljs-string\">&quot;ascii&quot;</span>)\n\n    block_ints = []\n    <span class=\"hljs-keyword\">for</span> block_start <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(message_bytes), block_size):\n        block_int = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(block_start, <span class=\"hljs-built_in\">min</span>(block_start + block_size, <span class=\"hljs-built_in\">len</span>(message_bytes))):\n            block_int += message_bytes[i] * (BYTE_SIZE ** (i % block_size))\n        block_ints.append(block_int)\n    <span class=\"hljs-keyword\">return</span> block_ints\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_text_from_blocks</span>(<span class=\"hljs-params\">\n    block_ints: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], message_length: <span class=\"hljs-built_in\">int</span>, block_size: <span class=\"hljs-built_in\">int</span> = DEFAULT_BLOCK_SIZE\n</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    message: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>] = []\n    <span class=\"hljs-keyword\">for</span> block_int <span class=\"hljs-keyword\">in</span> block_ints:\n        block_message: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>] = []\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(block_size - <span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>, -<span class=\"hljs-number\">1</span>):\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(message) + i &lt; message_length:\n                ascii_number = block_int // (BYTE_SIZE ** i)\n                block_int = block_int % (BYTE_SIZE ** i)\n                block_message.insert(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">chr</span>(ascii_number))\n        message.extend(block_message)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(message)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encrypt_message</span>(<span class=\"hljs-params\">\n    message: <span class=\"hljs-built_in\">str</span>, key: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>], blockSize: <span class=\"hljs-built_in\">int</span> = DEFAULT_BLOCK_SIZE\n</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    encrypted_blocks = []\n    n, e = key\n\n    <span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> get_blocks_from_text(message, blockSize):\n        encrypted_blocks.append(<span class=\"hljs-built_in\">pow</span>(block, e, n))\n    <span class=\"hljs-keyword\">return</span> encrypted_blocks\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt_message</span>(<span class=\"hljs-params\">\n    encrypted_blocks: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>],\n    message_length: <span class=\"hljs-built_in\">int</span>,\n    key: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>],\n    block_size: <span class=\"hljs-built_in\">int</span> = DEFAULT_BLOCK_SIZE,\n</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    decrypted_blocks = []\n    n, d = key\n    <span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> encrypted_blocks:\n        decrypted_blocks.append(<span class=\"hljs-built_in\">pow</span>(block, d, n))\n    <span class=\"hljs-keyword\">return</span> get_text_from_blocks(decrypted_blocks, message_length, block_size)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">read_key_file</span>(<span class=\"hljs-params\">key_filename: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(key_filename) <span class=\"hljs-keyword\">as</span> fo:\n        content = fo.read()\n    key_size, n, EorD = content.split(<span class=\"hljs-string\">&quot;,&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">int</span>(key_size), <span class=\"hljs-built_in\">int</span>(n), <span class=\"hljs-built_in\">int</span>(EorD))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encrypt_and_write_to_file</span>(<span class=\"hljs-params\">\n    message_filename: <span class=\"hljs-built_in\">str</span>,\n    key_filename: <span class=\"hljs-built_in\">str</span>,\n    message: <span class=\"hljs-built_in\">str</span>,\n    block_size: <span class=\"hljs-built_in\">int</span> = DEFAULT_BLOCK_SIZE,\n</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    key_size, n, e = read_key_file(key_filename)\n    <span class=\"hljs-keyword\">if</span> key_size &lt; block_size * <span class=\"hljs-number\">8</span>:\n        sys.exit(\n            <span class=\"hljs-string\">&quot;ERROR: Block size is %s bits and key size is %s bits. The RSA cipher &quot;</span>\n            <span class=\"hljs-string\">&quot;requires the block size to be equal to or greater than the key size. &quot;</span>\n            <span class=\"hljs-string\">&quot;Either decrease the block size or use different keys.&quot;</span>\n            % (block_size * <span class=\"hljs-number\">8</span>, key_size)\n        )\n\n    encrypted_blocks = [<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> encrypt_message(message, (n, e), block_size)]\n\n    encrypted_content = <span class=\"hljs-string\">&quot;,&quot;</span>.join(encrypted_blocks)\n    encrypted_content = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(message)}</span>_<span class=\"hljs-subst\">{block_size}</span>_<span class=\"hljs-subst\">{encrypted_content}</span>&quot;</span>\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(message_filename, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> fo:\n        fo.write(encrypted_content)\n    <span class=\"hljs-keyword\">return</span> encrypted_content\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">read_from_file_and_decrypt</span>(<span class=\"hljs-params\">message_filename: <span class=\"hljs-built_in\">str</span>, key_filename: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    key_size, n, d = read_key_file(key_filename)\n    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(message_filename) <span class=\"hljs-keyword\">as</span> fo:\n        content = fo.read()\n    message_length_str, block_size_str, encrypted_message = content.split(<span class=\"hljs-string\">&quot;_&quot;</span>)\n    message_length = <span class=\"hljs-built_in\">int</span>(message_length_str)\n    block_size = <span class=\"hljs-built_in\">int</span>(block_size_str)\n\n    <span class=\"hljs-keyword\">if</span> key_size &lt; block_size * <span class=\"hljs-number\">8</span>:\n        sys.exit(\n            <span class=\"hljs-string\">&quot;ERROR: Block size is %s bits and key size is %s bits. The RSA cipher &quot;</span>\n            <span class=\"hljs-string\">&quot;requires the block size to be equal to or greater than the key size. &quot;</span>\n            <span class=\"hljs-string\">&quot;Did you specify the correct key file and encrypted file?&quot;</span>\n            % (block_size * <span class=\"hljs-number\">8</span>, key_size)\n        )\n\n    encrypted_blocks = []\n    <span class=\"hljs-keyword\">for</span> block <span class=\"hljs-keyword\">in</span> encrypted_message.split(<span class=\"hljs-string\">&quot;,&quot;</span>):\n        encrypted_blocks.append(<span class=\"hljs-built_in\">int</span>(block))\n\n    <span class=\"hljs-keyword\">return</span> decrypt_message(encrypted_blocks, message_length, (n, d), block_size)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    filename = <span class=\"hljs-string\">&quot;encrypted_file.txt&quot;</span>\n    response = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">r&quot;Encrypt\\Decrypt [e\\d]: &quot;</span>)\n\n    <span class=\"hljs-keyword\">if</span> response.lower().startswith(<span class=\"hljs-string\">&quot;e&quot;</span>):\n        mode = <span class=\"hljs-string\">&quot;encrypt&quot;</span>\n    <span class=\"hljs-keyword\">elif</span> response.lower().startswith(<span class=\"hljs-string\">&quot;d&quot;</span>):\n        mode = <span class=\"hljs-string\">&quot;decrypt&quot;</span>\n\n    <span class=\"hljs-keyword\">if</span> mode == <span class=\"hljs-string\">&quot;encrypt&quot;</span>:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> os.path.exists(<span class=\"hljs-string\">&quot;rsa_pubkey.txt&quot;</span>):\n            rkg.makeKeyFiles(<span class=\"hljs-string\">&quot;rsa&quot;</span>, <span class=\"hljs-number\">1024</span>)\n\n        message = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;\\nEnter message: &quot;</span>)\n        pubkey_filename = <span class=\"hljs-string\">&quot;rsa_pubkey.txt&quot;</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Encrypting and writing to %s...&quot;</span> % (filename))\n        encryptedText = encrypt_and_write_to_file(filename, pubkey_filename, message)\n\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nEncrypted text:&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(encryptedText)\n\n    <span class=\"hljs-keyword\">elif</span> mode == <span class=\"hljs-string\">&quot;decrypt&quot;</span>:\n        privkey_filename = <span class=\"hljs-string\">&quot;rsa_privkey.txt&quot;</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Reading from %s and decrypting...&quot;</span> % (filename))\n        decrypted_text = read_from_file_and_decrypt(filename, privkey_filename)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;writing decryption to rsa_decryption.txt...&quot;</span>)\n        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;rsa_decryption.txt&quot;</span>, <span class=\"hljs-string\">&quot;w&quot;</span>) <span class=\"hljs-keyword\">as</span> dec:\n            dec.write(decrypted_text)\n\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nDecryption:&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(decrypted_text)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "go": {
      "dir": "ciphers/rsa/RSAcipher.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/ciphers/rsa/RSAcipher.go",
      "code": "<span class=\"hljs-keyword\">package</span> rsacipher\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-comment\">//&quot;math/big&quot;</span>\n\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\n\t<span class=\"hljs-string\">&quot;math/rand&quot;</span>\n\t<span class=\"hljs-string\">&quot;strconv&quot;</span>\n\t<span class=\"hljs-string\">&quot;strings&quot;</span>\n)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">generatePrimes</span><span class=\"hljs-params\">(limit <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">/*\n\t\tgenerate primes by factoring\n\t\trelies on the 30k+i, though better formulae exist\n\t\twhere k &gt;=0 and i = (1,7,11,13,17,13,19,23,29)\n\t*/</span>\n\tprimes := prime(limit)\n\t<span class=\"hljs-keyword\">var</span> choice []<span class=\"hljs-keyword\">int</span>\n\tchoice = <span class=\"hljs-built_in\">append</span>(choice, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">29</span>)\n\t<span class=\"hljs-keyword\">for</span> {\n\t\tk := rand.Intn(<span class=\"hljs-keyword\">int</span>(limit / <span class=\"hljs-number\">30</span>))\n\t\ti := choice[rand.Intn(<span class=\"hljs-built_in\">len</span>(choice))]\n\t\tc := <span class=\"hljs-number\">30</span>*k + i\n\t\tfound := <span class=\"hljs-literal\">true</span>\n\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> primes {\n\t\t\t<span class=\"hljs-keyword\">if</span> c%v == <span class=\"hljs-number\">0</span> {\n\t\t\t\tfound = <span class=\"hljs-literal\">false</span>\n\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t}\n\t\t}\n\t\t<span class=\"hljs-keyword\">if</span> found {\n\t\t\t<span class=\"hljs-keyword\">return</span> c\n\t\t}\n\t}\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">prime</span><span class=\"hljs-params\">(limit <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-params\">(primes []<span class=\"hljs-keyword\">int</span>)</span></span> {\n\tsqrtLimit := <span class=\"hljs-keyword\">int</span>(math.Ceil(math.Sqrt(<span class=\"hljs-keyword\">float64</span>(limit))))\n\texit := <span class=\"hljs-literal\">false</span>\n\tprimes = <span class=\"hljs-built_in\">append</span>(primes, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n\tlastIndex := <span class=\"hljs-number\">2</span>\n\t<span class=\"hljs-keyword\">for</span> primes[lastIndex] &lt; sqrtLimit {\n\t\t<span class=\"hljs-keyword\">if</span> exit {\n\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t}\n\t\t<span class=\"hljs-keyword\">for</span> i := primes[lastIndex] + <span class=\"hljs-number\">2</span>; i &lt; primes[lastIndex]*primes[lastIndex]; i += <span class=\"hljs-number\">2</span> {\n\t\t\tfound := <span class=\"hljs-literal\">true</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> primes {\n\t\t\t\t<span class=\"hljs-keyword\">if</span> i%v == <span class=\"hljs-number\">0</span> {\n\t\t\t\t\tfound = <span class=\"hljs-literal\">false</span>\n\t\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t\t}\n\t\t\t}\n\t\t\t<span class=\"hljs-keyword\">if</span> found {\n\t\t\t\tprimes = <span class=\"hljs-built_in\">append</span>(primes, i)\n\t\t\t\tlastIndex++\n\t\t\t\t<span class=\"hljs-keyword\">if</span> i &gt;= sqrtLimit {\n\t\t\t\t\texit = <span class=\"hljs-literal\">true</span>\n\t\t\t\t\t<span class=\"hljs-keyword\">break</span>\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">lcm</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//complexity depends on gcd</span>\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">int</span>((a * b) / gcd(a, b))\n\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">gcd</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//complexity not clear</span>\n\t<span class=\"hljs-keyword\">for</span> b != <span class=\"hljs-number\">0</span> {\n\t\tt := b\n\t\tb = a % b\n\t\ta = t\n\t}\n\t<span class=\"hljs-keyword\">return</span> a\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modularMultiplicativeInverse</span><span class=\"hljs-params\">(e, delta <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//runs in O(n) where n = delta</span>\n\te = e % delta\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">1</span>; i &lt; delta; i++ {\n\t\t<span class=\"hljs-keyword\">if</span> (i*e)%delta == <span class=\"hljs-number\">1</span> {\n\t\t\t<span class=\"hljs-keyword\">return</span> i\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">modularExponentiation</span><span class=\"hljs-params\">(b, e, mod <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//runs in O(log(n)) where n = e</span>\n\t<span class=\"hljs-keyword\">if</span> mod == <span class=\"hljs-number\">1</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\t}\n\tr := <span class=\"hljs-number\">1</span>\n\tb = b % mod\n\t<span class=\"hljs-keyword\">for</span> e &gt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">if</span> e%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> {\n\t\t\tr = (r * b) % mod\n\t\t}\n\t\te = e &gt;&gt; <span class=\"hljs-number\">1</span>\n\t\tb = (b * b) % mod\n\t}\n\t<span class=\"hljs-keyword\">return</span> r\n}\n\n<span class=\"hljs-comment\">// EncryptRSA main encryption function for RSA</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">EncryptRSA</span><span class=\"hljs-params\">(message []<span class=\"hljs-keyword\">int</span>, e, n <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//runs in O(k*log(n)) where k = len(message) and n = e</span>\n\t<span class=\"hljs-keyword\">var</span> ciphertext []<span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> message {\n\t\tciphertext = <span class=\"hljs-built_in\">append</span>(ciphertext, modularExponentiation(v, e, n))\n\t}\n\t<span class=\"hljs-keyword\">return</span> ciphertext\n}\n\n<span class=\"hljs-comment\">// DecryptRSA main decryption function for RSA</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DecryptRSA</span><span class=\"hljs-params\">(ciphertext []<span class=\"hljs-keyword\">int</span>, d, n <span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//runs in O(k*log(n)) where k = len(ciphertext) and n = d</span>\n\t<span class=\"hljs-keyword\">var</span> message []<span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> ciphertext {\n\t\tmessage = <span class=\"hljs-built_in\">append</span>(message, modularExponentiation(v, d, n))\n\t}\n\t<span class=\"hljs-keyword\">return</span> message\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toASCII</span><span class=\"hljs-params\">(slice []<span class=\"hljs-keyword\">rune</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//runs in O(n) where n = len(slice)</span>\n\t<span class=\"hljs-keyword\">var</span> converted []<span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> slice {\n\t\tconverted = <span class=\"hljs-built_in\">append</span>(converted, <span class=\"hljs-keyword\">int</span>(v))\n\t}\n\t<span class=\"hljs-keyword\">return</span> converted\n}\n\n<span class=\"hljs-comment\">// ToRune convert a string to rune</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ToRune</span><span class=\"hljs-params\">(slice []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-comment\">//runs in O(n) where n = len(slice)</span>\n\t<span class=\"hljs-comment\">// var str string</span>\n\t<span class=\"hljs-keyword\">var</span> str strings.Builder\n\t<span class=\"hljs-keyword\">for</span> i, v := <span class=\"hljs-keyword\">range</span> slice {\n\t\t<span class=\"hljs-keyword\">if</span> i != <span class=\"hljs-built_in\">len</span>(slice)<span class=\"hljs-number\">-1</span> {\n\t\t\tstr.WriteString(fmt.Sprintf(<span class=\"hljs-string\">&quot;%d &quot;</span>, v))\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\tstr.WriteString(fmt.Sprint(v))\n\t\t}\n\n\t}\n\t<span class=\"hljs-keyword\">return</span> str.String()\n}\n\n<span class=\"hljs-comment\">// Compare ... Added for manual comparison but didn&#x27;t work</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Compare</span><span class=\"hljs-params\">(str <span class=\"hljs-keyword\">string</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\ta := strings.Split(str, <span class=\"hljs-string\">&quot; &quot;</span>)\n\tfmt.Printf(<span class=\"hljs-string\">&quot;%v&quot;</span>, a)\n\t<span class=\"hljs-keyword\">var</span> b []<span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> a {\n\t\ttemp, _ := strconv.Atoi(v)\n\t\tb = <span class=\"hljs-built_in\">append</span>(b, temp)\n\t}\n\t<span class=\"hljs-keyword\">return</span> b\n}\n\n<span class=\"hljs-comment\">// func main() {</span>\n<span class=\"hljs-comment\">// \trand.Seed(time.Now().UTC().UnixNano())</span>\n<span class=\"hljs-comment\">// \tbits := 17</span>\n\n<span class=\"hljs-comment\">// \tp := generatePrimes(1 &lt;&lt; bits)</span>\n<span class=\"hljs-comment\">// \tq := generatePrimes(1 &lt;&lt; bits)</span>\n<span class=\"hljs-comment\">// \tfor p == q {</span>\n<span class=\"hljs-comment\">// \t\tq = generatePrimes(1 &lt;&lt; bits)</span>\n<span class=\"hljs-comment\">// \t}</span>\n\n<span class=\"hljs-comment\">// \tn := p * q</span>\n\n<span class=\"hljs-comment\">// \tdelta := lcm(p-1, q-1)</span>\n\n<span class=\"hljs-comment\">// \te := generatePrimes(delta)</span>\n<span class=\"hljs-comment\">// \td := modularMultiplicativeInverse(e, delta)</span>\n\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;%v \\n%v \\n%v \\n%v\\n&quot;, p, q, e, d)</span>\n\n<span class=\"hljs-comment\">// \tstr := &quot;I think RSA is really great&quot;</span>\n<span class=\"hljs-comment\">// \tmessage := []rune(str)</span>\n<span class=\"hljs-comment\">// \tasciiSlice := toASCII(message)</span>\n\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;asciiSlice : %v \\n&quot;, asciiSlice)</span>\n<span class=\"hljs-comment\">// \tencrypted := encryptRSA(asciiSlice, e, n)</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;encrypted : %v \\n&quot;, encrypted)</span>\n<span class=\"hljs-comment\">// \tdecrypted := decryptRSA(encrypted, d, n)</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;decrypted : %v \\n&quot;, decrypted)</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;cleartext : %v \\n&quot;, toRune(decrypted))</span>\n<span class=\"hljs-comment\">// \t//switched to atom</span>\n\n<span class=\"hljs-comment\">// }</span>\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "CarsonHam",
      "email": "carson.ham@utexas.edu",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 2
    },
    {
      "name": "Mickaël Schoentgen",
      "email": "contact@tiger-222.fr",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 6
    }
  ],
  "explanationUrl": {}
}
