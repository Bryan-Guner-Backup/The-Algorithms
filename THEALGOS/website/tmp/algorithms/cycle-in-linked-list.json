{
  "slug": "cycle-in-linked-list",
  "name": "Cycle in Linked List",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "dart": {
      "dir": "data_structures/linked_list/cycle_in_linked_list.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures/linked_list/cycle_in_linked_list.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n  <span class=\"hljs-built_in\">int</span> value;\n  Node next = <span class=\"hljs-keyword\">null</span>;\n  Node(<span class=\"hljs-keyword\">this</span>.value);\n\n  <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">get</span> nodeValue {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.value;\n  }\n\n  Node <span class=\"hljs-keyword\">get</span> nextNode {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.next;\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span> </span>{\n  Node _headNode;\n  Node _tailNode;\n\n  Node <span class=\"hljs-keyword\">get</span> head {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._headNode;\n  }\n\n  Node <span class=\"hljs-keyword\">get</span> tail {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>._tailNode;\n  }\n\n  <span class=\"hljs-keyword\">void</span> insert(Node newNode) {\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-keyword\">null</span>) {\n      <span class=\"hljs-keyword\">this</span>._headNode = newNode;\n      <span class=\"hljs-keyword\">this</span>._tailNode = newNode;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">this</span>._tailNode.next = newNode;\n      <span class=\"hljs-keyword\">this</span>._tailNode = <span class=\"hljs-keyword\">this</span>._tailNode.next;\n    }\n  }\n}\n\nNode createNode(<span class=\"hljs-built_in\">int</span> value) {\n  <span class=\"hljs-keyword\">return</span> Node(value);\n}\n\nNode findCyclicNode(Node headNode) {\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\">Check : https://en.wikipedia.org/wiki/Cycle<span class=\"hljs-emphasis\">_detection</span></span></span>\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">we maintain a fast and slow pointer</span></span></span>\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">The fast pointer jumps 2 nodes at a time</span></span></span>\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">and the slow pointer jumps one node at a time</span></span></span>\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">eventually the fast and slow will coincide on a node</span></span></span>\n  <span class=\"hljs-comment\">///</span>\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">Then we place one of the node back to the head.</span></span></span>\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">The node where these two nodes coincide again will be the</span></span></span>\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">origin of the loop node.</span></span></span>\n  <span class=\"hljs-comment\">/// <span class=\"language-markdown\"><span class=\"hljs-emphasis\">and move in tandem. check algorith for proof</span></span></span>\n  Node fastNode = headNode;\n  Node slowNode = headNode;\n\n  <span class=\"hljs-keyword\">while</span> (fastNode != <span class=\"hljs-keyword\">null</span> &amp;&amp; fastNode.next != <span class=\"hljs-keyword\">null</span>) {\n    slowNode = slowNode.next;\n    fastNode = fastNode.next.next;\n\n    <span class=\"hljs-keyword\">if</span> (slowNode == fastNode) {\n      <span class=\"hljs-keyword\">break</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">if</span> (slowNode == fastNode) {\n    slowNode = headNode;\n    <span class=\"hljs-keyword\">while</span> (slowNode != fastNode) {\n      slowNode = slowNode.next;\n      fastNode = fastNode.next;\n    }\n    <span class=\"hljs-keyword\">return</span> slowNode;\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  LinkedList linkedList = LinkedList();\n  <span class=\"hljs-built_in\">List</span>&lt;Node&gt; allNodes = <span class=\"hljs-built_in\">List</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">10</span>; i++) {\n    Node newNode = createNode(i);\n    linkedList.insert(newNode);\n    allNodes.add(newNode);\n  }\n  Node tail = linkedList.tail;\n  Random random = <span class=\"hljs-keyword\">new</span> Random();\n\n  test((<span class=\"hljs-string\">&#x27;test 1&#x27;</span>), () {\n    <span class=\"hljs-built_in\">int</span> randomIndex = random.nextInt(<span class=\"hljs-number\">9</span>);\n    tail.next = allNodes[randomIndex];\n    Node cycleNode = findCyclicNode(linkedList.head);\n    expect(cycleNode, equals(allNodes[randomIndex]));\n  });\n  test((<span class=\"hljs-string\">&#x27;test 2&#x27;</span>), () {\n    <span class=\"hljs-built_in\">int</span> randomIndex = random.nextInt(<span class=\"hljs-number\">9</span>);\n    tail.next = allNodes[randomIndex];\n    Node cycleNode = findCyclicNode(linkedList.head);\n    expect(cycleNode, equals(allNodes[randomIndex]));\n  });\n\n  test((<span class=\"hljs-string\">&#x27;test 3&#x27;</span>), () {\n    <span class=\"hljs-built_in\">int</span> randomIndex = random.nextInt(<span class=\"hljs-number\">9</span>);\n    tail.next = allNodes[randomIndex];\n    Node cycleNode = findCyclicNode(linkedList.head);\n    expect(cycleNode, equals(allNodes[randomIndex]));\n  });\n\n  test((<span class=\"hljs-string\">&#x27;test 4&#x27;</span>), () {\n    <span class=\"hljs-built_in\">int</span> randomIndex = random.nextInt(<span class=\"hljs-number\">9</span>);\n    tail.next = allNodes[randomIndex];\n    Node cycleNode = findCyclicNode(linkedList.head);\n    expect(cycleNode, equals(allNodes[randomIndex]));\n  });\n\n  test((<span class=\"hljs-string\">&#x27;test 5&#x27;</span>), () {\n    <span class=\"hljs-built_in\">int</span> randomIndex = random.nextInt(<span class=\"hljs-number\">9</span>);\n    tail.next = allNodes[randomIndex];\n    Node cycleNode = findCyclicNode(linkedList.head);\n    expect(cycleNode, equals(allNodes[randomIndex]));\n  });\n\n  test((<span class=\"hljs-string\">&#x27;test 6&#x27;</span>), () {\n    <span class=\"hljs-built_in\">int</span> randomIndex = random.nextInt(<span class=\"hljs-number\">9</span>);\n    tail.next = allNodes[randomIndex];\n    Node cycleNode = findCyclicNode(linkedList.head);\n    expect(cycleNode, equals(allNodes[randomIndex]));\n  });\n\n  test((<span class=\"hljs-string\">&#x27;test 7&#x27;</span>), () {\n    <span class=\"hljs-built_in\">int</span> randomIndex = random.nextInt(<span class=\"hljs-number\">9</span>);\n    tail.next = allNodes[randomIndex];\n    Node cycleNode = findCyclicNode(linkedList.head);\n    expect(cycleNode, equals(allNodes[randomIndex]));\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Akash G Krishnan",
      "email": "krishnanag1996@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
