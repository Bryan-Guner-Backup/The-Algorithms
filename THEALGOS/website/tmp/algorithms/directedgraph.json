{
  "slug": "directedgraph",
  "name": "DirectedGraph",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "haskell": {
      "dir": "src/Graph/DirectedGraph.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Graph/DirectedGraph.hs",
      "code": "<span class=\"hljs-meta\">{-# LANGUAGE TupleSections #-}</span>\n<span class=\"hljs-keyword\">module</span> Graph.DirectedGraph <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">qualified</span> Data.Set <span class=\"hljs-keyword\">as</span> Set\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-keyword\">qualified</span> Data.Map <span class=\"hljs-keyword\">as</span> Map\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Graph</span> a = <span class=\"hljs-type\">Map</span>.<span class=\"hljs-type\">Map</span> a (<span class=\"hljs-type\">Set</span>.<span class=\"hljs-type\">Set</span> <span class=\"hljs-title\">a</span>)</span>\n\n<span class=\"hljs-title\">empty</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; <span class=\"hljs-type\">Graph</span> a\n<span class=\"hljs-title\">empty</span> = <span class=\"hljs-type\">Map</span>.empty\n\n<span class=\"hljs-title\">insertNode</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; a -&gt; <span class=\"hljs-type\">Graph</span> a -&gt; <span class=\"hljs-type\">Graph</span> a\n<span class=\"hljs-title\">insertNode</span> u g\n    | <span class=\"hljs-type\">Map</span>.member u g = g\n    | otherwise      = <span class=\"hljs-type\">Map</span>.insert u <span class=\"hljs-type\">Set</span>.empty g\n\n<span class=\"hljs-title\">insertEdge</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; (a, a) -&gt; <span class=\"hljs-type\">Graph</span> a -&gt; <span class=\"hljs-type\">Graph</span> a\n<span class=\"hljs-title\">insertEdge</span> (u, v) = <span class=\"hljs-type\">Map</span>.insertWith <span class=\"hljs-type\">Set</span>.union u (<span class=\"hljs-type\">Set</span>.singleton v) . insertNode u . insertNode v\n\n<span class=\"hljs-title\">deleteNode</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; a -&gt; <span class=\"hljs-type\">Graph</span> a -&gt; <span class=\"hljs-type\">Graph</span> a\n<span class=\"hljs-title\">deleteNode</span> u = <span class=\"hljs-type\">Map</span>.delete u . <span class=\"hljs-type\">Map</span>.map (<span class=\"hljs-type\">Set</span>.delete u)\n\n<span class=\"hljs-title\">adjacentNodes</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; a -&gt; <span class=\"hljs-type\">Graph</span> a -&gt; <span class=\"hljs-type\">Maybe</span> (<span class=\"hljs-type\">Set</span>.<span class=\"hljs-type\">Set</span> a)\n<span class=\"hljs-title\">adjacentNodes</span> = <span class=\"hljs-type\">Map</span>.lookup\n\n<span class=\"hljs-title\">nodes</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; <span class=\"hljs-type\">Graph</span> a -&gt; <span class=\"hljs-type\">Set</span>.<span class=\"hljs-type\">Set</span> a\n<span class=\"hljs-title\">nodes</span> = <span class=\"hljs-type\">Map</span>.keysSet\n\n<span class=\"hljs-title\">edges</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; <span class=\"hljs-type\">Graph</span> a -&gt; [(a, a)]\n<span class=\"hljs-title\">edges</span> = concat . <span class=\"hljs-type\">Map</span>.elems . <span class=\"hljs-type\">Map</span>.mapWithKey (\\u -&gt; map (u,) . <span class=\"hljs-type\">Set</span>.toList)\n\n<span class=\"hljs-comment\">-- Creates graph from list of edges</span>\n<span class=\"hljs-title\">fromList</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; [(a, a)] -&gt; <span class=\"hljs-type\">Graph</span> a\n<span class=\"hljs-title\">fromList</span> = foldr insertEdge <span class=\"hljs-type\">Map</span>.empty\n\n<span class=\"hljs-comment\">-- Creates new graph by flipping every edge</span>\n<span class=\"hljs-title\">transpose</span> :: <span class=\"hljs-type\">Ord</span> a =&gt; <span class=\"hljs-type\">Graph</span> a -&gt; <span class=\"hljs-type\">Graph</span> a\n<span class=\"hljs-title\">transpose</span> = fromList . map (\\(a, b)-&gt;(b, a)) . edges\n"
    }
  },
  "contributors": [
    {
      "name": "Niccol√≤ Marcon",
      "email": "marcon.niccolo@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
