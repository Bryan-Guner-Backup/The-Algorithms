{
  "slug": "singly-linked-list",
  "name": "Singly Linked List",
  "categories": ["datastructures", "linkedlist"],
  "body": {
    "en": "<p>Singly Linked List is a linear and connected data structure made of Nodes. Each node is composed of a variable <code>data</code> where its content is stored and a pointer to the next Node on the list. The Linked List has a pointer to the first element of this Node sequence and may also have another pointer to the last Node to make operations at the far end less time-consuming. You can also store a <code>length</code> variable to store the total length.</p>\n<h3>Advantages over Arrays</h3>\n<ul>\n<li>Size of a linked list is not fixed (dynamic size)</li>\n<li>Deleting and adding an element is not expensive compared to an array</li>\n</ul>\n<h3>Drawbacks</h3>\n<ul>\n<li>Elements can be accessed sequentially not randomly compared to an array</li>\n<li>Extra memory allocation needs to be done for pointers which connects elements in a linked list</li>\n</ul>\n<h3>Time Complexity</h3>\n<table>\n<thead>\n<tr>\n<th>Operation</th>\n<th>Average</th>\n<th>Worst</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Access</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Search</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>Insertion</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>Deletion</td>\n<td>O(1)</td>\n<td>O(1)</td>\n</tr>\n</tbody>\n</table>\n<h2>Example</h2>\n<pre><code class=\"hljs language-.java\">class LinkedList {\n    Node head;      // Pointer to the first element\n    Node tail;      // Optional. Points to the last element\n\n    int length;     // Optional\n\n    class Node {\n        int data;   // Node data. Can be int, string, float, templates, etc\n        Node next;  // Pointer to the next node on the list\n    }\n}\n</code></pre>\n<h2>Code Implementation Links</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/DataStructures/Lists/SinglyLinkedList.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Data%20Structure/Linked%20List.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/data_structures/linked_list/singly_linked_list.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/data_structures/linked_lists/single_list.rb\">Ruby</a></li>\n</ul>\n<h2>Video Explanation</h2>\n<p><a href=\"https://www.youtube.com/watch?v=5nsKtQuT6E8\">A CS50 video explaining the Linked List Data Structure</a></p>",
    "es": "<p>Singly Linked List es una estructura de datos lineal y conectada formada por nodos. Cada nodo se compone de una variable '''data''' donde se almacena su contenido y un puntero al siguiente nodo de la lista. La lista vinculada tiene un puntero al primer elemento de esta secuencia de nodos y también puede tener otro puntero al último nodo para realizar operaciones en el extremo lejano menos lento. También puede almacenar una variable '''length''' para almacenar la longitud total.</p>\n<h3>Ventajas sobre matrices</h3>\n<ul>\n<li>El tamaño de una lista vinculada no es fijo (tamaño dinámico).</li>\n<li>Eliminar y agregar un elemento no es caro en comparación con una matriz.</li>\n</ul>\n<h3>Inconvenientes</h3>\n<ul>\n<li>Se puede acceder a los elementos secuencialmente no al azar en comparación con una matriz.</li>\n<li>Es necesario realizar una asignación de memoria adicional para los punteros que conecta los elementos de una lista vinculada.</li>\n</ul>\n<h3>Complejidad del tiempo</h3>\n<table>\n<thead>\n<tr>\n<th>Operación</th>\n<th>Promedio</th>\n<th>Peor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Acceso</td>\n<td><code>O(n)</code></td>\n<td><code>O(n)</code></td>\n</tr>\n<tr>\n<td>Buscar</td>\n<td><code>O(n)</code></td>\n<td><code>O(n)</code></td>\n</tr>\n<tr>\n<td>de inserción</td>\n<td><code>O(1)</code></td>\n<td><code>O(1)</code></td>\n</tr>\n<tr>\n<td>de eliminación</td>\n<td><code>O(1)</code></td>\n<td><code>O(1)</code></td>\n</tr>\n</tbody>\n</table>\n<h2>Ejemplo en Java</h2>\n<pre><code class=\"hljs language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span> </span>{\n    Node head;      <span class=\"hljs-comment\">// Puntero al primer elemento.</span>\n    Node tail;      <span class=\"hljs-comment\">// Opcional. Apunta al último elemento.</span>\n\n    <span class=\"hljs-keyword\">int</span> length;     <span class=\"hljs-comment\">// Opcional.</span>\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n        <span class=\"hljs-keyword\">int</span> data;   <span class=\"hljs-comment\">// Datos del nodo. Puede ser `int`, `string`, `float`, `templates`, etc..</span>\n        Node next;  <span class=\"hljs-comment\">// Puntero al siguiente nodo de la lista.</span>\n    }\n}\n</code></pre>\n<h2>Enlaces de implementación de código</h2>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/DataStructures/Lists/SinglyLinkedList.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Data%20Structure/Linked%20List.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/data_structures/linked_list/singly_linked_list.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/data_structures/linked_lists/single_list.rb\">Ruby</a></li>\n</ul>\n<h2>Explicación de vídeo</h2>\n<p><a href=\"https://www.youtube.com/watch?v=5nsKtQuT6E8\">Un vídeo CS50 explicando la Estructura de Datos de la Lista Singular Vinculada</a></p>"
  },
  "implementations": {
    "python": {
      "dir": "data_structures/linked_list/singly_linked_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/linked_list/singly_linked_list.py",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):\n        self.data = data\n        self.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;Node(<span class=\"hljs-subst\">{self.data}</span>)&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedList</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.head = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>):\n        node = self.head\n        <span class=\"hljs-keyword\">while</span> node:\n            <span class=\"hljs-keyword\">yield</span> node.data\n            node = node.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return length of linked list i.e. number of nodes\n        &gt;&gt;&gt; linked_list = LinkedList()\n        &gt;&gt;&gt; len(linked_list)\n        0\n        &gt;&gt;&gt; linked_list.insert_tail(&quot;head&quot;)\n        &gt;&gt;&gt; len(linked_list)\n        1\n        &gt;&gt;&gt; linked_list.insert_head(&quot;head&quot;)\n        &gt;&gt;&gt; len(linked_list)\n        2\n        &gt;&gt;&gt; _ = linked_list.delete_tail()\n        &gt;&gt;&gt; len(linked_list)\n        1\n        &gt;&gt;&gt; _ = linked_list.delete_head()\n        &gt;&gt;&gt; len(linked_list)\n        0\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">iter</span>(self)))\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        String representation/visualization of a Linked Lists\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join([<span class=\"hljs-built_in\">str</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> self])\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__getitem__</span>(<span class=\"hljs-params\">self, index</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Indexing Support. Used to get a node at particular position\n        &gt;&gt;&gt; linked_list = LinkedList()\n        &gt;&gt;&gt; for i in range(0, 10):\n        ...     linked_list.insert_nth(i, i)\n        &gt;&gt;&gt; all(str(linked_list[i]) == str(i) for i in range(0, 10))\n        True\n        &gt;&gt;&gt; linked_list[-10]\n        Traceback (most recent call last):\n        ...\n        ValueError: list index out of range.\n        &gt;&gt;&gt; linked_list[len(linked_list)]\n        Traceback (most recent call last):\n        ...\n        ValueError: list index out of range.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt;= index &lt; <span class=\"hljs-built_in\">len</span>(self):\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;list index out of range.&quot;</span>)\n        <span class=\"hljs-keyword\">for</span> i, node <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self):\n            <span class=\"hljs-keyword\">if</span> i == index:\n                <span class=\"hljs-keyword\">return</span> node\n\n    <span class=\"hljs-comment\"># Used to change the data of a particular node</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__setitem__</span>(<span class=\"hljs-params\">self, index, data</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; linked_list = LinkedList()\n        &gt;&gt;&gt; for i in range(0, 10):\n        ...     linked_list.insert_nth(i, i)\n        &gt;&gt;&gt; linked_list[0] = 666\n        &gt;&gt;&gt; linked_list[0]\n        666\n        &gt;&gt;&gt; linked_list[5] = -666\n        &gt;&gt;&gt; linked_list[5]\n        -666\n        &gt;&gt;&gt; linked_list[-10] = 666\n        Traceback (most recent call last):\n        ...\n        ValueError: list index out of range.\n        &gt;&gt;&gt; linked_list[len(linked_list)] = 666\n        Traceback (most recent call last):\n        ...\n        ValueError: list index out of range.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt;= index &lt; <span class=\"hljs-built_in\">len</span>(self):\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;list index out of range.&quot;</span>)\n        current = self.head\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index):\n            current = current.<span class=\"hljs-built_in\">next</span>\n        current.data = data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_tail</span>(<span class=\"hljs-params\">self, data</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.insert_nth(<span class=\"hljs-built_in\">len</span>(self), data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_head</span>(<span class=\"hljs-params\">self, data</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.insert_nth(<span class=\"hljs-number\">0</span>, data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">insert_nth</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span>, data</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt;= index &lt;= <span class=\"hljs-built_in\">len</span>(self):\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range&quot;</span>)\n        new_node = Node(data)\n        <span class=\"hljs-keyword\">if</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            self.head = new_node\n        <span class=\"hljs-keyword\">elif</span> index == <span class=\"hljs-number\">0</span>:\n            new_node.<span class=\"hljs-built_in\">next</span> = self.head  <span class=\"hljs-comment\"># link new_node to head</span>\n            self.head = new_node\n        <span class=\"hljs-keyword\">else</span>:\n            temp = self.head\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index - <span class=\"hljs-number\">1</span>):\n                temp = temp.<span class=\"hljs-built_in\">next</span>\n            new_node.<span class=\"hljs-built_in\">next</span> = temp.<span class=\"hljs-built_in\">next</span>\n            temp.<span class=\"hljs-built_in\">next</span> = new_node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_list</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:  <span class=\"hljs-comment\"># print every node data</span>\n        <span class=\"hljs-built_in\">print</span>(self)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_head</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> self.delete_nth(<span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_tail</span>(<span class=\"hljs-params\">self</span>):  <span class=\"hljs-comment\"># delete from tail</span>\n        <span class=\"hljs-keyword\">return</span> self.delete_nth(<span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete_nth</span>(<span class=\"hljs-params\">self, index: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>):\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt;= index &lt;= <span class=\"hljs-built_in\">len</span>(self) - <span class=\"hljs-number\">1</span>:  <span class=\"hljs-comment\"># test if index is valid</span>\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;list index out of range&quot;</span>)\n        delete_node = self.head  <span class=\"hljs-comment\"># default first node</span>\n        <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-number\">0</span>:\n            self.head = self.head.<span class=\"hljs-built_in\">next</span>\n        <span class=\"hljs-keyword\">else</span>:\n            temp = self.head\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(index - <span class=\"hljs-number\">1</span>):\n                temp = temp.<span class=\"hljs-built_in\">next</span>\n            delete_node = temp.<span class=\"hljs-built_in\">next</span>\n            temp.<span class=\"hljs-built_in\">next</span> = temp.<span class=\"hljs-built_in\">next</span>.<span class=\"hljs-built_in\">next</span>\n        <span class=\"hljs-keyword\">return</span> delete_node.data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-keyword\">return</span> self.head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reverse</span>(<span class=\"hljs-params\">self</span>):\n        prev = <span class=\"hljs-literal\">None</span>\n        current = self.head\n\n        <span class=\"hljs-keyword\">while</span> current:\n            <span class=\"hljs-comment\"># Store the current node&#x27;s next node.</span>\n            next_node = current.<span class=\"hljs-built_in\">next</span>\n            <span class=\"hljs-comment\"># Make the current node&#x27;s next point backwards</span>\n            current.<span class=\"hljs-built_in\">next</span> = prev\n            <span class=\"hljs-comment\"># Make the previous node be the current node</span>\n            prev = current\n            <span class=\"hljs-comment\"># Make the current node the next node (to progress iteration)</span>\n            current = next_node\n        <span class=\"hljs-comment\"># Return prev in order to put the head at the end</span>\n        self.head = prev\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">test_singly_linked_list</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; test_singly_linked_list()\n    &quot;&quot;&quot;</span>\n    linked_list = LinkedList()\n    <span class=\"hljs-keyword\">assert</span> linked_list.is_empty() <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(linked_list) == <span class=\"hljs-string\">&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        linked_list.delete_head()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen.</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen.</span>\n\n    <span class=\"hljs-keyword\">try</span>:\n        linked_list.delete_tail()\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">False</span>  <span class=\"hljs-comment\"># This should not happen.</span>\n    <span class=\"hljs-keyword\">except</span> IndexError:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">True</span>  <span class=\"hljs-comment\"># This should happen.</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">10</span>):\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(linked_list) == i\n        linked_list.insert_nth(i, i + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">11</span>))\n\n    linked_list.insert_head(<span class=\"hljs-number\">0</span>)\n    linked_list.insert_tail(<span class=\"hljs-number\">11</span>)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">12</span>))\n\n    <span class=\"hljs-keyword\">assert</span> linked_list.delete_head() == <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">assert</span> linked_list.delete_nth(<span class=\"hljs-number\">9</span>) == <span class=\"hljs-number\">10</span>\n    <span class=\"hljs-keyword\">assert</span> linked_list.delete_tail() == <span class=\"hljs-number\">11</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">len</span>(linked_list) == <span class=\"hljs-number\">9</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">str</span>(linked_list) == <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join(<span class=\"hljs-built_in\">str</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>))\n\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">all</span>(linked_list[i] == i + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>)) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>):\n        linked_list[i] = -i\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">all</span>(linked_list[i] == -i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">9</span>)) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n\n    linked_list = LinkedList()\n    linked_list.insert_head(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Inserting 1st at head &quot;</span>).strip())\n    linked_list.insert_head(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Inserting 2nd at head &quot;</span>).strip())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nPrint list:&quot;</span>)\n    linked_list.print_list()\n    linked_list.insert_tail(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;\\nInserting 1st at tail &quot;</span>).strip())\n    linked_list.insert_tail(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Inserting 2nd at tail &quot;</span>).strip())\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nPrint list:&quot;</span>)\n    linked_list.print_list()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nDelete head&quot;</span>)\n    linked_list.delete_head()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Delete tail&quot;</span>)\n    linked_list.delete_tail()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nPrint list:&quot;</span>)\n    linked_list.print_list()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nReverse linked list&quot;</span>)\n    linked_list.reverse()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nPrint list:&quot;</span>)\n    linked_list.print_list()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nString representation of linked list:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(linked_list)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nReading/changing Node data using indexing:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Element at Position 1: <span class=\"hljs-subst\">{linked_list[<span class=\"hljs-number\">1</span>]}</span>&quot;</span>)\n    linked_list[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter New Value: &quot;</span>).strip()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;New list:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(linked_list)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;length of linked_list is : <span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(linked_list)}</span>&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "java": {
      "dir": "DataStructures/Lists/SinglyLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Lists/SinglyLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Lists;\n\n<span class=\"hljs-keyword\">import</span> java.util.StringJoiner;\n\n<span class=\"hljs-comment\">/** https://en.wikipedia.org/wiki/Linked_list */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SinglyLinkedList</span> {\n  <span class=\"hljs-comment\">/** Head refer to the front of the list */</span>\n  <span class=\"hljs-keyword\">private</span> Node head;\n\n  <span class=\"hljs-comment\">/** Size of SinglyLinkedList */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\n\n  <span class=\"hljs-comment\">/** Init SinglyLinkedList */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SinglyLinkedList</span><span class=\"hljs-params\">()</span> {\n    head = <span class=\"hljs-literal\">null</span>;\n    size = <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Init SinglyLinkedList with specified head node and size\n   *\n   * <span class=\"hljs-doctag\">@param</span> head the head node of list\n   * <span class=\"hljs-doctag\">@param</span> size the size of list\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SinglyLinkedList</span><span class=\"hljs-params\">(Node head, <span class=\"hljs-type\">int</span> size)</span> {\n    <span class=\"hljs-built_in\">this</span>.head = head;\n    <span class=\"hljs-built_in\">this</span>.size = size;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Inserts an element at the head of the list\n   *\n   * <span class=\"hljs-doctag\">@param</span> x element to be added\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertHead</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\n    insertNth(x, <span class=\"hljs-number\">0</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Insert an element at the tail of the list\n   *\n   * <span class=\"hljs-doctag\">@param</span> data element to be added\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\n    insertNth(data, size);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Inserts a new node at a specified position of the list\n   *\n   * <span class=\"hljs-doctag\">@param</span> data data to be stored in a new node\n   * <span class=\"hljs-doctag\">@param</span> position position at which a new node is to be inserted\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertNth</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data, <span class=\"hljs-type\">int</span> position)</span> {\n    checkBounds(position, <span class=\"hljs-number\">0</span>, size);\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">newNode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(data);\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-comment\">/* the list is empty */</span>\n      head = newNode;\n      size++;\n      <span class=\"hljs-keyword\">return</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (position == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-comment\">/* insert at the head of the list */</span>\n      newNode.next = head;\n      head = newNode;\n      size++;\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; position - <span class=\"hljs-number\">1</span>; ++i) {\n      cur = cur.next;\n    }\n    newNode.next = cur.next;\n    cur.next = newNode;\n    size++;\n  }\n\n  <span class=\"hljs-comment\">/** Deletes a node at the head */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteHead</span><span class=\"hljs-params\">()</span> {\n    deleteNth(<span class=\"hljs-number\">0</span>);\n  }\n\n  <span class=\"hljs-comment\">/** Deletes an element at the tail */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">delete</span><span class=\"hljs-params\">()</span> {\n    deleteNth(size - <span class=\"hljs-number\">1</span>);\n  }\n\n  <span class=\"hljs-comment\">/** Deletes an element at Nth position */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteNth</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> position)</span> {\n    checkBounds(position, <span class=\"hljs-number\">0</span>, size - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">if</span> (position == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">destroy</span> <span class=\"hljs-operator\">=</span> head;\n      head = head.next;\n      destroy = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">/* clear to let GC do its work */</span>\n      size--;\n      <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; position - <span class=\"hljs-number\">1</span>; ++i) {\n      cur = cur.next;\n    }\n\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">destroy</span> <span class=\"hljs-operator\">=</span> cur.next;\n    cur.next = cur.next.next;\n    destroy = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// clear to let GC do its work</span>\n\n    size--;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> position to check position\n   * <span class=\"hljs-doctag\">@param</span> low low index\n   * <span class=\"hljs-doctag\">@param</span> high high index\n   * <span class=\"hljs-doctag\">@throws</span> IndexOutOfBoundsException if {<span class=\"hljs-doctag\">@code</span> position} not in range {<span class=\"hljs-doctag\">@code</span> low} to {<span class=\"hljs-doctag\">@code</span> high}\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkBounds</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> position, <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> {\n    <span class=\"hljs-keyword\">if</span> (position &gt; high || position &lt; low) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IndexOutOfBoundsException</span>(position + <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n  }\n\n  <span class=\"hljs-comment\">/** Clear all nodes in the list */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clear</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">prev</span> <span class=\"hljs-operator\">=</span> cur;\n      cur = cur.next;\n      prev = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// clear to let GC do its work</span>\n    }\n    head = <span class=\"hljs-literal\">null</span>;\n    size = <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Checks if the list is empty\n   *\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if list is empty, otherwise {<span class=\"hljs-doctag\">@code</span> false}.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns the size of the linked list.\n   *\n   * <span class=\"hljs-doctag\">@return</span> the size of the list.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> size;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Get head of the list.\n   *\n   * <span class=\"hljs-doctag\">@return</span> head of the list.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> Node <span class=\"hljs-title function_\">getHead</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> head;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Calculate the count of the list manually\n   *\n   * <span class=\"hljs-doctag\">@return</span> count of the list\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">count</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\n      cur = cur.next;\n      count++;\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Test if the value key is present in the list.\n   *\n   * <span class=\"hljs-doctag\">@param</span> key the value to be searched.\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if key is present in the list, otherwise {<span class=\"hljs-doctag\">@code</span> false}.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\n      <span class=\"hljs-keyword\">if</span> (cur.value == key) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n      }\n      cur = cur.next;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Return element at special index.\n   *\n   * <span class=\"hljs-doctag\">@param</span> index given index of element\n   * <span class=\"hljs-doctag\">@return</span> element at special index.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getNth</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> {\n    checkBounds(index, <span class=\"hljs-number\">0</span>, size - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; index; ++i) {\n      cur = cur.next;\n    }\n    <span class=\"hljs-keyword\">return</span> cur.value;\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">StringJoiner</span> <span class=\"hljs-variable\">joiner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringJoiner</span>(<span class=\"hljs-string\">&quot;-&gt;&quot;</span>);\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\n      joiner.add(cur.value + <span class=\"hljs-string\">&quot;&quot;</span>);\n      cur = cur.next;\n    }\n    <span class=\"hljs-keyword\">return</span> joiner.toString();\n  }\n\n  <span class=\"hljs-comment\">/** Driver Code */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] arg)</span> {\n    <span class=\"hljs-type\">SinglyLinkedList</span> <span class=\"hljs-variable\">list</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SinglyLinkedList</span>();\n    <span class=\"hljs-keyword\">assert</span> list.isEmpty();\n    <span class=\"hljs-keyword\">assert</span> list.size() == <span class=\"hljs-number\">0</span> &amp;&amp; list.count() == <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">assert</span> list.toString().equals(<span class=\"hljs-string\">&quot;&quot;</span>);\n\n    <span class=\"hljs-comment\">/* Test insert function */</span>\n    list.insertHead(<span class=\"hljs-number\">5</span>);\n    list.insertHead(<span class=\"hljs-number\">7</span>);\n    list.insertHead(<span class=\"hljs-number\">10</span>);\n    list.insert(<span class=\"hljs-number\">3</span>);\n    list.insertNth(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>);\n    <span class=\"hljs-keyword\">assert</span> list.toString().equals(<span class=\"hljs-string\">&quot;10-&gt;7-&gt;5-&gt;3-&gt;1&quot;</span>);\n\n    <span class=\"hljs-comment\">/* Test search function */</span>\n    <span class=\"hljs-keyword\">assert</span> list.search(<span class=\"hljs-number\">10</span>) &amp;&amp; list.search(<span class=\"hljs-number\">5</span>) &amp;&amp; list.search(<span class=\"hljs-number\">1</span>) &amp;&amp; !list.search(<span class=\"hljs-number\">100</span>);\n\n    <span class=\"hljs-comment\">/* Test get function */</span>\n    <span class=\"hljs-keyword\">assert</span> list.getNth(<span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">10</span> &amp;&amp; list.getNth(<span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">5</span> &amp;&amp; list.getNth(<span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/* Test delete function */</span>\n    list.deleteHead();\n    list.deleteNth(<span class=\"hljs-number\">1</span>);\n    list.delete();\n    <span class=\"hljs-keyword\">assert</span> list.toString().equals(<span class=\"hljs-string\">&quot;7-&gt;3&quot;</span>);\n\n    <span class=\"hljs-keyword\">assert</span> list.size == <span class=\"hljs-number\">2</span> &amp;&amp; list.size() == list.count();\n\n    list.clear();\n    <span class=\"hljs-keyword\">assert</span> list.isEmpty();\n\n    <span class=\"hljs-keyword\">try</span> {\n      list.delete();\n      <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">/* this should not happen */</span>\n    } <span class=\"hljs-keyword\">catch</span> (Exception e) {\n      <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">/* this should happen */</span>\n    }\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * This class is the nodes of the SinglyLinked List. They consist of a value and a pointer to the\n * node after them.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n  <span class=\"hljs-comment\">/** The value of the node */</span>\n  <span class=\"hljs-type\">int</span> value;\n\n  <span class=\"hljs-comment\">/** Point to the next node */</span>\n  Node next;\n\n  Node() {}\n\n  <span class=\"hljs-comment\">/**\n   * Constructor\n   *\n   * <span class=\"hljs-doctag\">@param</span> value Value to be put in the node\n   */</span>\n  Node(<span class=\"hljs-type\">int</span> value) {\n    <span class=\"hljs-built_in\">this</span>(value, <span class=\"hljs-literal\">null</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Constructor\n   *\n   * <span class=\"hljs-doctag\">@param</span> value Value to be put in the node\n   * <span class=\"hljs-doctag\">@param</span> next Reference to the next node\n   */</span>\n  Node(<span class=\"hljs-type\">int</span> value, Node next) {\n    <span class=\"hljs-built_in\">this</span>.value = value;\n    <span class=\"hljs-built_in\">this</span>.next = next;\n  }\n}\n"
    },
    "go": {
      "dir": "datastructures/linkedlist/singlylinkedlist/singlylinkedlist.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/datastructures/linkedlist/singlylinkedlist/singlylinkedlist.go",
      "code": "<span class=\"hljs-comment\">// Package singlelinkedlist Single Linked List</span>\n<span class=\"hljs-keyword\">package</span> singlylinkedlist\n\n<span class=\"hljs-comment\">// demonstration of singly linked list in golang</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span>\n\n<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> This is not how it should be done but I don&#x27;t see a way out of this</span>\n<span class=\"hljs-keyword\">type</span> snode <span class=\"hljs-keyword\">struct</span> {\n\tVal  <span class=\"hljs-keyword\">interface</span>{}\n\tNext *snode\n}\n\n<span class=\"hljs-comment\">// SingleLinkedList structure with length of the list and its head</span>\n<span class=\"hljs-keyword\">type</span> SingleLinkedList <span class=\"hljs-keyword\">struct</span> {\n\tlength <span class=\"hljs-keyword\">int</span>\n\tHead   *snode\n}\n\n<span class=\"hljs-comment\">// CreateList returns a new instance of a linked list</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CreateList</span><span class=\"hljs-params\">()</span> *<span class=\"hljs-title\">SingleLinkedList</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;SingleLinkedList{}\n}\n\n<span class=\"hljs-comment\">// to avoid mistakes when using pointer vs struct for new snode creation</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewNode</span><span class=\"hljs-params\">(val <span class=\"hljs-keyword\">interface</span>{})</span> *<span class=\"hljs-title\">snode</span></span> {\n\t<span class=\"hljs-keyword\">return</span> &amp;snode{val, <span class=\"hljs-literal\">nil</span>}\n}\n\n<span class=\"hljs-comment\">// AddAtBeg adds a new snode with given value at the beginning of the list.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *SingleLinkedList)</span> <span class=\"hljs-title\">AddAtBeg</span><span class=\"hljs-params\">(val <span class=\"hljs-keyword\">interface</span>{})</span></span> {\n\tn := NewNode(val)\n\tn.Next = ll.Head\n\tll.Head = n\n\tll.length++\n}\n\n<span class=\"hljs-comment\">// AddAtEnd adds a new snode with given value at the end of the list.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *SingleLinkedList)</span> <span class=\"hljs-title\">AddAtEnd</span><span class=\"hljs-params\">(val <span class=\"hljs-keyword\">int</span>)</span></span> {\n\tn := NewNode(val)\n\n\t<span class=\"hljs-keyword\">if</span> ll.Head == <span class=\"hljs-literal\">nil</span> {\n\t\tll.Head = n\n\t\tll.length++\n\t\t<span class=\"hljs-keyword\">return</span>\n\t}\n\n\tcur := ll.Head\n\t<span class=\"hljs-keyword\">for</span> ; cur.Next != <span class=\"hljs-literal\">nil</span>; cur = cur.Next {\n\t}\n\tcur.Next = n\n\tll.length++\n}\n\n<span class=\"hljs-comment\">// DelAtBeg deletes the snode at the head(beginning) of the list and returns its value. Returns -1 if the list is empty.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *SingleLinkedList)</span> <span class=\"hljs-title\">DelAtBeg</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">interface</span></span>{} {\n\t<span class=\"hljs-keyword\">if</span> ll.Head == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\t}\n\n\tcur := ll.Head\n\tll.Head = cur.Next\n\tll.length--\n\n\t<span class=\"hljs-keyword\">return</span> cur.Val\n}\n\n<span class=\"hljs-comment\">// DelAtEnd deletes the snode at the tail(end) of the list and returns its value. Returns -1 if the list is empty.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *SingleLinkedList)</span> <span class=\"hljs-title\">DelAtEnd</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">interface</span></span>{} {\n\t<span class=\"hljs-keyword\">if</span> ll.Head == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>\n\t}\n\n\t<span class=\"hljs-keyword\">if</span> ll.Head.Next == <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> ll.DelAtBeg()\n\t}\n\n\tcur := ll.Head\n\n\t<span class=\"hljs-keyword\">for</span> ; cur.Next.Next != <span class=\"hljs-literal\">nil</span>; cur = cur.Next {\n\t}\n\n\tretval := cur.Next.Val\n\tcur.Next = <span class=\"hljs-literal\">nil</span>\n\tll.length--\n\t<span class=\"hljs-keyword\">return</span> retval\n\n}\n\n<span class=\"hljs-comment\">// Count returns the current size of the list.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *SingleLinkedList)</span> <span class=\"hljs-title\">Count</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">return</span> ll.length\n}\n\n<span class=\"hljs-comment\">// Reverse reverses the list.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *SingleLinkedList)</span> <span class=\"hljs-title\">Reverse</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">var</span> prev, Next *snode\n\tcur := ll.Head\n\n\t<span class=\"hljs-keyword\">for</span> cur != <span class=\"hljs-literal\">nil</span> {\n\t\tNext = cur.Next\n\t\tcur.Next = prev\n\t\tprev = cur\n\t\tcur = Next\n\t}\n\n\tll.Head = prev\n}\n\n<span class=\"hljs-comment\">// Display prints out the elements of the list.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ll *SingleLinkedList)</span> <span class=\"hljs-title\">Display</span><span class=\"hljs-params\">()</span></span> {\n\t<span class=\"hljs-keyword\">for</span> cur := ll.Head; cur != <span class=\"hljs-literal\">nil</span>; cur = cur.Next {\n\t\tfmt.Print(cur.Val, <span class=\"hljs-string\">&quot; &quot;</span>)\n\t}\n\n\tfmt.Print(<span class=\"hljs-string\">&quot;\\n&quot;</span>)\n}\n"
    },
    "ruby": {
      "dir": "data_structures/linked_lists/singly_linked_list.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/linked_lists/singly_linked_list.rb",
      "code": "<span class=\"hljs-comment\"># Define a node in the list</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span></span>\n  <span class=\"hljs-comment\"># Initialize the data structure here.</span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:value</span>, <span class=\"hljs-symbol\">:next</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span><span class=\"hljs-params\">(value)</span></span>\n    <span class=\"hljs-variable\">@value</span> = value\n    <span class=\"hljs-variable\">@next</span> = <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># A Class for single linked lists (each element links to the next one, but not to the previous one)</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SinglyLinkedList</span></span>\n  <span class=\"hljs-keyword\">include</span> Enumerable\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:head</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span></span>\n    <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_tail</span><span class=\"hljs-params\">(value)</span></span>\n    newNode = Node.new(value)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n      <span class=\"hljs-variable\">@head</span> = newNode\n    <span class=\"hljs-keyword\">else</span>\n      tempNode = <span class=\"hljs-variable\">@head</span>\n      tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">until</span> tempNode.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-literal\">nil</span>?\n      tempNode.<span class=\"hljs-keyword\">next</span> = newNode\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">insert_head</span><span class=\"hljs-params\">(value)</span></span>\n    newNode = Node.new(value)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n      <span class=\"hljs-variable\">@head</span> = newNode\n    <span class=\"hljs-keyword\">else</span>\n      newNode.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-variable\">@head</span>\n      <span class=\"hljs-variable\">@head</span> = newNode\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">each</span></span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n\n    current = <span class=\"hljs-variable\">@head</span>\n    <span class=\"hljs-keyword\">until</span> current.<span class=\"hljs-literal\">nil</span>?\n      <span class=\"hljs-keyword\">yield</span> current.value\n      current = current.<span class=\"hljs-keyword\">next</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">print_list</span></span>\n    puts <span class=\"hljs-string\">&#x27;[&#x27;</span> + to_a.join(<span class=\"hljs-string\">&#x27;, &#x27;</span>) + <span class=\"hljs-string\">&#x27;]&#x27;</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">delete_head</span></span>\n    <span class=\"hljs-keyword\">if</span> !<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>? &amp;&amp; !<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-literal\">nil</span>?\n      newHead = <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span>\n      <span class=\"hljs-variable\">@head</span> = newHead\n    <span class=\"hljs-keyword\">elsif</span> !<span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>? &amp;&amp; <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-literal\">nil</span>?\n      <span class=\"hljs-variable\">@head</span> = <span class=\"hljs-literal\">nil</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">delete_tail</span></span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n\n    tempNode = <span class=\"hljs-variable\">@head</span>\n    tempNode = tempNode.<span class=\"hljs-keyword\">next</span> <span class=\"hljs-keyword\">until</span> tempNode.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-keyword\">next</span>.<span class=\"hljs-literal\">nil</span>?\n    tempNode.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-literal\">nil</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">empty?</span></span>\n    <span class=\"hljs-variable\">@head</span>.<span class=\"hljs-literal\">nil</span>?\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\nobj = SinglyLinkedList.new\n\nobj.insert_head(<span class=\"hljs-number\">1</span>)\nobj.insert_head(<span class=\"hljs-number\">2</span>)\nobj.insert_head(<span class=\"hljs-number\">3</span>)\nobj.insert_head(<span class=\"hljs-number\">4</span>)\nobj.insert_head(<span class=\"hljs-number\">5</span>)\nobj.print_list\n\nobj.insert_tail(<span class=\"hljs-number\">6</span>)\nobj.print_list\n\nobj.delete_head\nobj.print_list\n\nobj.delete_tail\nobj.print_list\n"
    },
    "elixir": {
      "dir": "lib/data_structures/singly_linked_list.ex",
      "url": "https://github.com/TheAlgorithms/elixir/tree/master/lib/data_structures/singly_linked_list.ex",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Algorithms.DataStructures.SinglyLinkedList</span></span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-variable\">@moduledoc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  Access for SinglyLinkedList is O(n)\n  Search for SinglyLinkedList is O(n)\n  Deletion/Insertion at element is O(1)\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Node</span></span>, <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-keyword\">defstruct</span>([<span class=\"hljs-symbol\">:value</span>, <span class=\"hljs-symbol\">:reference</span>])\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">LinkedList</span></span>, <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-keyword\">defstruct</span>([<span class=\"hljs-symbol\">:nodes</span>])\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  Adding to the head of a SinglyLinkedList is O(1), as you know where the head is\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_node_head</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> []}, value) <span class=\"hljs-keyword\">do</span>\n    first_link = form_link(value, <span class=\"hljs-literal\">nil</span>)\n    %LinkedList{<span class=\"hljs-symbol\">nodes:</span> [first_link]}\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_node_head</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> [head | _tail] = list}, value) <span class=\"hljs-keyword\">do</span>\n    new_head = form_link(value, head)\n    %LinkedList{<span class=\"hljs-symbol\">nodes:</span> [new_head | list]}\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-variable\">@doc</span> <span class=\"hljs-string\">&quot;&quot;&quot;\n  Adding to the tail/middle of a SinglyLinkedList is O(1)\n  &quot;&quot;&quot;</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_node_tail</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> []} = list, value) <span class=\"hljs-keyword\">do</span>\n    add_node_head(list, value)\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_node_tail</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> [head | []]}, value) <span class=\"hljs-keyword\">do</span>\n    old_tail = head\n    new_tail = form_tail_link(value)\n    old_tail = %Node{<span class=\"hljs-symbol\">value:</span> old_tail.value, <span class=\"hljs-symbol\">reference:</span> new_tail}\n    new_nodes = [old_tail] ++ [new_tail]\n\n    %LinkedList{<span class=\"hljs-symbol\">nodes:</span> new_nodes}\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">add_node_tail</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> nodes} = list, value) <span class=\"hljs-keyword\">do</span>\n    old_tail = tail(list)\n    new_tail = form_tail_link(value)\n    old_tail = %Node{<span class=\"hljs-symbol\">value:</span> old_tail.value, <span class=\"hljs-symbol\">reference:</span> new_tail}\n    new_nodes = nodes |&gt; List.delete_at(<span class=\"hljs-number\">-1</span>)\n    new_nodes = new_nodes ++ [old_tail] ++ [new_tail]\n\n    %LinkedList{<span class=\"hljs-symbol\">nodes:</span> new_nodes}\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">list_length</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> []}), <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">list_length</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> nodes}), <span class=\"hljs-symbol\">do:</span> nodes |&gt; length()\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">head</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> nodes}), <span class=\"hljs-symbol\">do:</span> nodes |&gt; List.first()\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">tail</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> [current_tail | []]}) <span class=\"hljs-keyword\">do</span>\n    current_tail\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">tail</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> []}), <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-literal\">nil</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">tail</span></span>(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> [_current_head | current_tails]}) <span class=\"hljs-keyword\">do</span>\n    tail(%LinkedList{<span class=\"hljs-symbol\">nodes:</span> current_tails})\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">form_link</span></span>(value, reference) <span class=\"hljs-keyword\">do</span>\n    %__MODULE__.Node{<span class=\"hljs-symbol\">value:</span> value, <span class=\"hljs-symbol\">reference:</span> reference}\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">form_tail_link</span></span>(value) <span class=\"hljs-keyword\">do</span>\n    %__MODULE__.Node{<span class=\"hljs-symbol\">value:</span> value, <span class=\"hljs-symbol\">reference:</span> <span class=\"hljs-literal\">nil</span>}\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "DataStructures/LinkedList/SinglyLinkedList/SinglyLinkedList.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/DataStructures/LinkedList/SinglyLinkedList/SinglyLinkedList.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.LinkedList.SinglyLinkedList</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SinglyLinkedList</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\">// points to the start of the list</span>\n        <span class=\"hljs-keyword\">private</span> SinglyLinkedListNode&lt;T&gt;? Head { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adds new node to the start of the list,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span>Contents of newly added node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Added list node.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SinglyLinkedListNode&lt;T&gt; <span class=\"hljs-title\">AddFirst</span>(<span class=\"hljs-params\">T data</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> newListElement = <span class=\"hljs-keyword\">new</span> SinglyLinkedListNode&lt;T&gt;(data)\n            {\n                Next = Head,\n            };\n\n            Head = newListElement;\n            <span class=\"hljs-keyword\">return</span> newListElement;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adds new node to the end of the list,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - number of nodes in the list.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;data&quot;&gt;</span>Contents of newly added node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Added list node.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> SinglyLinkedListNode&lt;T&gt; <span class=\"hljs-title\">AddLast</span>(<span class=\"hljs-params\">T data</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> newListElement = <span class=\"hljs-keyword\">new</span> SinglyLinkedListNode&lt;T&gt;(data);\n\n            <span class=\"hljs-comment\">// if head is null, the added element is the first, hence it is the head</span>\n            <span class=\"hljs-keyword\">if</span> (Head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                Head = newListElement;\n                <span class=\"hljs-keyword\">return</span> newListElement;\n            }\n\n            <span class=\"hljs-comment\">// temp ListElement to avoid overwriting the original</span>\n            <span class=\"hljs-keyword\">var</span> tempElement = Head;\n\n            <span class=\"hljs-comment\">// iterates through all elements</span>\n            <span class=\"hljs-keyword\">while</span> (tempElement.Next <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\n            {\n                tempElement = tempElement.Next;\n            }\n\n            <span class=\"hljs-comment\">// adds the new element to the last one</span>\n            tempElement.Next = newListElement;\n            <span class=\"hljs-keyword\">return</span> newListElement;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns element at index <span class=\"hljs-doctag\">&lt;paramref name=&quot;index&quot; /&gt;</span> in the list.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;index&quot;&gt;</span>Index of an element to be returned.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Element at index <span class=\"hljs-doctag\">&lt;paramref name=&quot;index&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">GetElementByIndex</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> index</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (index &lt; <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(index));\n            }\n\n            <span class=\"hljs-keyword\">var</span> tempElement = Head;\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; tempElement <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span> &amp;&amp; i &lt; index; i++)\n            {\n                tempElement = tempElement.Next;\n            }\n\n            <span class=\"hljs-keyword\">if</span> (tempElement <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-keyword\">nameof</span>(index));\n            }\n\n            <span class=\"hljs-keyword\">return</span> tempElement.Data;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Length</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-comment\">// checks if there is a head</span>\n            <span class=\"hljs-keyword\">if</span> (Head <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> tempElement = Head;\n            <span class=\"hljs-keyword\">var</span> length = <span class=\"hljs-number\">1</span>;\n\n            <span class=\"hljs-keyword\">while</span> (tempElement.Next <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\n            {\n                tempElement = tempElement.Next;\n                length++;\n            }\n\n            <span class=\"hljs-keyword\">return</span> length;\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;T&gt; <span class=\"hljs-title\">GetListData</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-comment\">// temp ListElement to avoid overwriting the original</span>\n            <span class=\"hljs-keyword\">var</span> tempElement = Head;\n\n            <span class=\"hljs-comment\">// all elements where a next attribute exists</span>\n            <span class=\"hljs-keyword\">while</span> (tempElement <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> tempElement.Data;\n                tempElement = tempElement.Next;\n            }\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">DeleteElement</span>(<span class=\"hljs-params\">T element</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> currentElement = Head;\n            SinglyLinkedListNode&lt;T&gt;? previousElement = <span class=\"hljs-literal\">null</span>;\n\n            <span class=\"hljs-comment\">// iterates through all elements</span>\n            <span class=\"hljs-keyword\">while</span> (currentElement <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\n            {\n                <span class=\"hljs-comment\">// checks if the element, which should get deleted is in this list element</span>\n                <span class=\"hljs-keyword\">if</span> (currentElement.Data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> &amp;&amp; element <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">null</span> ||\n                    currentElement.Data <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span> &amp;&amp; currentElement.Data.Equals(element))\n                {\n                    <span class=\"hljs-comment\">// if element is head just take the next one as head</span>\n                    <span class=\"hljs-keyword\">if</span> (currentElement.Equals(Head))\n                    {\n                        Head = Head.Next;\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                    }\n\n                    <span class=\"hljs-comment\">// else take the prev one and overwrite the next with the one behind the deleted</span>\n                    <span class=\"hljs-keyword\">if</span> (previousElement <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">null</span>)\n                    {\n                        previousElement.Next = currentElement.Next;\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                    }\n                }\n\n                <span class=\"hljs-comment\">// iterating</span>\n                previousElement = currentElement;\n                currentElement = currentElement.Next;\n            }\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Oskar Niburski",
      "email": "oskarniburski@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "1fisedi",
      "email": "51143882+1fisedi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "Atishaya Jain",
      "email": "atishaya.11@live.com",
      "commits": 1
    },
    {
      "name": "Nishant Ingle",
      "email": "30694286+Nishant-Ingle@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ritik2604",
      "email": "49342895+Ritik2604@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "Abhijay Kumar",
      "email": "abhijaynsit@gmail.com",
      "commits": 1
    },
    {
      "name": "Ojas Saxena",
      "email": "43749506+ojasiiitd@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ulvi",
      "email": "merdeliyev@inbox.ru",
      "commits": 1
    },
    {
      "name": "Doru Kesriyeli",
      "email": "dkesriyelI@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "earngpi",
      "email": "earngpi@gmail.com",
      "commits": 1
    },
    {
      "name": "zacharyjones123",
      "email": "zrjones@ncsu.edu",
      "commits": 1
    },
    {
      "name": "Akash",
      "email": "akash0babu0@gmail.com",
      "commits": 1
    },
    {
      "name": "Logan Lieou",
      "email": "logan.lieou@gmail.com",
      "commits": 1
    },
    {
      "name": "Vikas Kumar",
      "email": "54888022+vikasit12@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Hanif Ali",
      "email": "alihanif016@gmail.com",
      "commits": 1
    },
    {
      "name": "Manu M Bhat",
      "email": "46175054+ManuMBhat@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rohan11074",
      "email": "34051577+rohan11074@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Feng",
      "email": "williamfzc@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Tony De La Nuez",
      "email": "tony.delanuez@gmail.com",
      "commits": 1
    },
    {
      "name": "Corey Hu",
      "email": "corey.huym@gmail.com",
      "commits": 1
    },
    {
      "name": "Avkaran singh",
      "email": "avkaransingh357@gmail.com",
      "commits": 1
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 3
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 12
    }
  ],
  "explanationUrl": {
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Data Structures/Linked Lists/Singly Linked List.md",
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Estructuras de datos/Listas vinculadas/Lista singular vinculada.md"
  }
}
