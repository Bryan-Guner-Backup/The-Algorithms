{
  "slug": "queues",
  "name": "Queues",
  "categories": ["datastructures", "queues"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Queues/Queues.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Queues/Queues.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Queues;\n\n<span class=\"hljs-comment\">/**\n * This implements Queues by using the class Queue.\n *\n * &lt;p&gt;A queue data structure functions the same as a real world queue. The elements that are added\n * first are the first to be removed. New elements are added to the back/rear of the queue.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Queue</span> {\n  <span class=\"hljs-comment\">/** Default initial capacity. */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">DEFAULT_CAPACITY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;\n\n  <span class=\"hljs-comment\">/** Max size of the queue */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> maxSize;\n  <span class=\"hljs-comment\">/** The array representing the queue */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] queueArray;\n  <span class=\"hljs-comment\">/** Front of the queue */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> front;\n  <span class=\"hljs-comment\">/** Rear of the queue */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> rear;\n  <span class=\"hljs-comment\">/** How many items are in the queue */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> nItems;\n\n  <span class=\"hljs-comment\">/** init with DEFAULT_CAPACITY */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Queue</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-built_in\">this</span>(DEFAULT_CAPACITY);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Constructor\n   *\n   * <span class=\"hljs-doctag\">@param</span> size Size of the new queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Queue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> size)</span> {\n    maxSize = size;\n    queueArray = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[size];\n    front = <span class=\"hljs-number\">0</span>;\n    rear = -<span class=\"hljs-number\">1</span>;\n    nItems = <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Inserts an element at the rear of the queue\n   *\n   * <span class=\"hljs-doctag\">@param</span> x element to be added\n   * <span class=\"hljs-doctag\">@return</span> True if the element was added successfully\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> {\n    <span class=\"hljs-keyword\">if</span> (isFull()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-comment\">// If the back of the queue is the end of the array wrap around to the front</span>\n    rear = (rear + <span class=\"hljs-number\">1</span>) % maxSize;\n    queueArray[rear] = x;\n    nItems++;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Remove an element from the front of the queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> the new front of the queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> queueArray[front];\n    front = (front + <span class=\"hljs-number\">1</span>) % maxSize;\n    nItems--;\n    <span class=\"hljs-keyword\">return</span> temp;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Checks what&#x27;s at the front of the queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> element at the front of the queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peekFront</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> queueArray[front];\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Checks what&#x27;s at the rear of the queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> element at the rear of the queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peekRear</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> queueArray[rear];\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns true if the queue is empty\n   *\n   * <span class=\"hljs-doctag\">@return</span> true if the queue is empty\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">nItems</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns true if the queue is full\n   *\n   * <span class=\"hljs-doctag\">@return</span> true if the queue is full\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">nItems</span> <span class=\"hljs-operator\">=</span>= maxSize;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Returns the number of elements in the queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> number of elements in the queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getSize</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> nItems;\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n    sb.append(<span class=\"hljs-string\">&quot;[&quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> front; ; i = ++i % maxSize) {\n      sb.append(queueArray[i]).append(<span class=\"hljs-string\">&quot;, &quot;</span>);\n      <span class=\"hljs-keyword\">if</span> (i == rear) {\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n    sb.replace(sb.length() - <span class=\"hljs-number\">2</span>, sb.length(), <span class=\"hljs-string\">&quot;]&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> sb.toString();\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * This class is the example for the Queue class\n *\n * <span class=\"hljs-doctag\">@author</span> Unknown\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Queues</span> {\n  <span class=\"hljs-comment\">/**\n   * Main method\n   *\n   * <span class=\"hljs-doctag\">@param</span> args Command line arguments\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">Queue</span> <span class=\"hljs-variable\">myQueue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Queue</span>(<span class=\"hljs-number\">4</span>);\n    myQueue.insert(<span class=\"hljs-number\">10</span>);\n    myQueue.insert(<span class=\"hljs-number\">2</span>);\n    myQueue.insert(<span class=\"hljs-number\">5</span>);\n    myQueue.insert(<span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-comment\">// [10(front), 2, 5, 3(rear)]</span>\n\n    System.out.println(myQueue.isFull()); <span class=\"hljs-comment\">// Will print true</span>\n\n    myQueue.remove(); <span class=\"hljs-comment\">// Will make 2 the new front, making 10 no longer part of the queue</span>\n    <span class=\"hljs-comment\">// [10, 2(front), 5, 3(rear)]</span>\n\n    myQueue.insert(<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// Insert 7 at the rear which will be index 0 because of wrap around</span>\n    <span class=\"hljs-comment\">// [7(rear), 2(front), 5, 3]</span>\n\n    System.out.println(myQueue.peekFront()); <span class=\"hljs-comment\">// Will print 2</span>\n    System.out.println(myQueue.peekRear()); <span class=\"hljs-comment\">// Will print 7</span>\n    System.out.println(myQueue.toString()); <span class=\"hljs-comment\">// Will print [2, 5, 3, 7]</span>\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Yang Libin",
      "email": "contact@yanglibin.info",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "zacharyjones123",
      "email": "zrjones@ncsu.edu",
      "commits": 1
    },
    {
      "name": "Rian Gallagher",
      "email": "rianogallagher@gmail.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
