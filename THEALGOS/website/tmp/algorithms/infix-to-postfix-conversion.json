{
  "slug": "infix-to-postfix-conversion",
  "name": "Infix to Postfix Conversion",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/infix_to_postfix_conversion.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/infix_to_postfix_conversion.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://en.wikipedia.org/wiki/Infix_notation\nhttps://en.wikipedia.org/wiki/Reverse_Polish_notation\nhttps://en.wikipedia.org/wiki/Shunting-yard_algorithm\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> .balanced_parentheses <span class=\"hljs-keyword\">import</span> balanced_parentheses\n<span class=\"hljs-keyword\">from</span> .stack <span class=\"hljs-keyword\">import</span> Stack\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">precedence</span>(<span class=\"hljs-params\">char: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Return integer value representing an operator&#x27;s precedence, or\n    order of operation.\n    https://en.wikipedia.org/wiki/Order_of_operations\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-string\">&quot;+&quot;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;-&quot;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;*&quot;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;/&quot;</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;^&quot;</span>: <span class=\"hljs-number\">3</span>}.get(char, -<span class=\"hljs-number\">1</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">infix_to_postfix</span>(<span class=\"hljs-params\">expression_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; infix_to_postfix(&quot;(1*(2+3)+4))&quot;)\n    Traceback (most recent call last):\n    ...\n    ValueError: Mismatched parentheses\n    &gt;&gt;&gt; infix_to_postfix(&quot;&quot;)\n    &#x27;&#x27;\n    &gt;&gt;&gt; infix_to_postfix(&quot;3+2&quot;)\n    &#x27;3 2 +&#x27;\n    &gt;&gt;&gt; infix_to_postfix(&quot;(3+4)*5-6&quot;)\n    &#x27;3 4 + 5 * 6 -&#x27;\n    &gt;&gt;&gt; infix_to_postfix(&quot;(1+2)*3/4-5&quot;)\n    &#x27;1 2 + 3 * 4 / 5 -&#x27;\n    &gt;&gt;&gt; infix_to_postfix(&quot;a+b*c+(d*e+f)*g&quot;)\n    &#x27;a b c * + d e * f + g * +&#x27;\n    &gt;&gt;&gt; infix_to_postfix(&quot;x^y/(5*z)+2&quot;)\n    &#x27;x y ^ 5 z * / 2 +&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> balanced_parentheses(expression_str):\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Mismatched parentheses&quot;</span>)\n    stack = Stack()\n    postfix = []\n    <span class=\"hljs-keyword\">for</span> char <span class=\"hljs-keyword\">in</span> expression_str:\n        <span class=\"hljs-keyword\">if</span> char.isalpha() <span class=\"hljs-keyword\">or</span> char.isdigit():\n            postfix.append(char)\n        <span class=\"hljs-keyword\">elif</span> char == <span class=\"hljs-string\">&quot;(&quot;</span>:\n            stack.push(char)\n        <span class=\"hljs-keyword\">elif</span> char == <span class=\"hljs-string\">&quot;)&quot;</span>:\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> stack.is_empty() <span class=\"hljs-keyword\">and</span> stack.peek() != <span class=\"hljs-string\">&quot;(&quot;</span>:\n                postfix.append(stack.pop())\n            stack.pop()\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> stack.is_empty() <span class=\"hljs-keyword\">and</span> precedence(char) &lt;= precedence(stack.peek()):\n                postfix.append(stack.pop())\n            stack.push(char)\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> stack.is_empty():\n        postfix.append(stack.pop())\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &quot;</span>.join(postfix)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n    expression = <span class=\"hljs-string\">&quot;a+b*(c^d-e)^(f+g*h)-i&quot;</span>\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Infix to Postfix Notation demonstration:\\n&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Infix notation: &quot;</span> + expression)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Postfix notation: &quot;</span> + infix_to_postfix(expression))\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Bruno Simas Hadlich",
      "email": "brunosimashadlich@gmail.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Chris McLennon",
      "email": "mclennon@indeed.com",
      "commits": 1
    },
    {
      "name": "Omkar Pathak",
      "email": "omkarpathak27@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
