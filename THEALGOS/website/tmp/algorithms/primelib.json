{
  "slug": "primelib",
  "name": "Primelib",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/primelib.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/primelib.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nCreated on Thu Oct  5 16:44:23 2017\n\n@author: Christian Bender\n\nThis Python library contains some useful functions to deal with\nprime numbers and whole numbers.\n\nOverview:\n\nisPrime(number)\nsieveEr(N)\ngetPrimeNumbers(N)\nprimeFactorization(number)\ngreatestPrimeFactor(number)\nsmallestPrimeFactor(number)\ngetPrime(n)\ngetPrimesBetween(pNumber1, pNumber2)\n\n----\n\nisEven(number)\nisOdd(number)\ngcd(number1, number2)  // greatest common divisor\nkgV(number1, number2)  // least common multiple\ngetDivisors(number)    // all divisors of &#x27;number&#x27; inclusive 1, number\nisPerfectNumber(number)\n\nNEW-FUNCTIONS\n\nsimplifyFraction(numerator, denominator)\nfactorial (n) // n!\nfib (n) // calculate the n-th fibonacci term.\n\n-----\n\ngoldbach(number)  // Goldbach&#x27;s assumption\n\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> math <span class=\"hljs-keyword\">import</span> sqrt\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isPrime</span>(<span class=\"hljs-params\">number</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;number&#x27;\n    returns true if &#x27;number&#x27; is prime otherwise false.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (\n        number &gt;= <span class=\"hljs-number\">0</span>\n    ), <span class=\"hljs-string\">&quot;&#x27;number&#x27; must been an int and positive&quot;</span>\n\n    status = <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-comment\"># 0 and 1 are none primes.</span>\n    <span class=\"hljs-keyword\">if</span> number &lt;= <span class=\"hljs-number\">1</span>:\n        status = <span class=\"hljs-literal\">False</span>\n\n    <span class=\"hljs-keyword\">for</span> divisor <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">round</span>(sqrt(number))) + <span class=\"hljs-number\">1</span>):\n\n        <span class=\"hljs-comment\"># if &#x27;number&#x27; divisible by &#x27;divisor&#x27; then sets &#x27;status&#x27;</span>\n        <span class=\"hljs-comment\"># of false and break up the loop.</span>\n        <span class=\"hljs-keyword\">if</span> number % divisor == <span class=\"hljs-number\">0</span>:\n            status = <span class=\"hljs-literal\">False</span>\n            <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(status, <span class=\"hljs-built_in\">bool</span>), <span class=\"hljs-string\">&quot;&#x27;status&#x27; must been from type bool&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> status\n\n\n<span class=\"hljs-comment\"># ------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sieveEr</span>(<span class=\"hljs-params\">N</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;N&#x27; &gt; 2\n    returns a list of prime numbers from 2 up to N.\n\n    This function implements the algorithm called\n    sieve of erathostenes.\n\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(N, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (N &gt; <span class=\"hljs-number\">2</span>), <span class=\"hljs-string\">&quot;&#x27;N&#x27; must been an int and &gt; 2&quot;</span>\n\n    <span class=\"hljs-comment\"># beginList: contains all natural numbers from 2 up to N</span>\n    beginList = [x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, N + <span class=\"hljs-number\">1</span>)]\n\n    ans = []  <span class=\"hljs-comment\"># this list will be returns.</span>\n\n    <span class=\"hljs-comment\"># actual sieve of erathostenes</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(beginList)):\n\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(beginList)):\n\n            <span class=\"hljs-keyword\">if</span> (beginList[i] != <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">and</span> (beginList[j] % beginList[i] == <span class=\"hljs-number\">0</span>):\n                beginList[j] = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># filters actual prime numbers.</span>\n    ans = [x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> beginList <span class=\"hljs-keyword\">if</span> x != <span class=\"hljs-number\">0</span>]\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">list</span>), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must been from type list&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># --------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getPrimeNumbers</span>(<span class=\"hljs-params\">N</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;N&#x27; &gt; 2\n    returns a list of prime numbers from 2 up to N (inclusive)\n    This function is more efficient as function &#x27;sieveEr(...)&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(N, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (N &gt; <span class=\"hljs-number\">2</span>), <span class=\"hljs-string\">&quot;&#x27;N&#x27; must been an int and &gt; 2&quot;</span>\n\n    ans = []\n\n    <span class=\"hljs-comment\"># iterates over all numbers between 2 up to N+1</span>\n    <span class=\"hljs-comment\"># if a number is prime then appends to list &#x27;ans&#x27;</span>\n    <span class=\"hljs-keyword\">for</span> number <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>, N + <span class=\"hljs-number\">1</span>):\n\n        <span class=\"hljs-keyword\">if</span> isPrime(number):\n\n            ans.append(number)\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">list</span>), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must been from type list&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># -----------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">primeFactorization</span>(<span class=\"hljs-params\">number</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;number&#x27;\n    returns a list of the prime number factors of &#x27;number&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> number &gt;= <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;&#x27;number&#x27; must been an int and &gt;= 0&quot;</span>\n\n    ans = []  <span class=\"hljs-comment\"># this list will be returns of the function.</span>\n\n    <span class=\"hljs-comment\"># potential prime number factors.</span>\n\n    factor = <span class=\"hljs-number\">2</span>\n\n    quotient = number\n\n    <span class=\"hljs-keyword\">if</span> number == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> number == <span class=\"hljs-number\">1</span>:\n\n        ans.append(number)\n\n    <span class=\"hljs-comment\"># if &#x27;number&#x27; not prime then builds the prime factorization of &#x27;number&#x27;</span>\n    <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-keyword\">not</span> isPrime(number):\n\n        <span class=\"hljs-keyword\">while</span> quotient != <span class=\"hljs-number\">1</span>:\n\n            <span class=\"hljs-keyword\">if</span> isPrime(factor) <span class=\"hljs-keyword\">and</span> (quotient % factor == <span class=\"hljs-number\">0</span>):\n                ans.append(factor)\n                quotient /= factor\n            <span class=\"hljs-keyword\">else</span>:\n                factor += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">else</span>:\n        ans.append(number)\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">list</span>), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must been from type list&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># -----------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">greatestPrimeFactor</span>(<span class=\"hljs-params\">number</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;number&#x27; &gt;= 0\n    returns the greatest prime number factor of &#x27;number&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (\n        number &gt;= <span class=\"hljs-number\">0</span>\n    ), <span class=\"hljs-string\">&quot;&#x27;number&#x27; bust been an int and &gt;= 0&quot;</span>\n\n    ans = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># prime factorization of &#x27;number&#x27;</span>\n    primeFactors = primeFactorization(number)\n\n    ans = <span class=\"hljs-built_in\">max</span>(primeFactors)\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">int</span>), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must been from type int&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># ----------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">smallestPrimeFactor</span>(<span class=\"hljs-params\">number</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: integer &#x27;number&#x27; &gt;= 0\n    returns the smallest prime number factor of &#x27;number&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (\n        number &gt;= <span class=\"hljs-number\">0</span>\n    ), <span class=\"hljs-string\">&quot;&#x27;number&#x27; bust been an int and &gt;= 0&quot;</span>\n\n    ans = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># prime factorization of &#x27;number&#x27;</span>\n    primeFactors = primeFactorization(number)\n\n    ans = <span class=\"hljs-built_in\">min</span>(primeFactors)\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">int</span>), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must been from type int&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># ----------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isEven</span>(<span class=\"hljs-params\">number</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: integer &#x27;number&#x27;\n    returns true if &#x27;number&#x27; is even, otherwise false.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>), <span class=\"hljs-string\">&quot;&#x27;number&#x27; must been an int&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">bool</span>), <span class=\"hljs-string\">&quot;compare bust been from type bool&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> number % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-comment\"># ------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isOdd</span>(<span class=\"hljs-params\">number</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: integer &#x27;number&#x27;\n    returns true if &#x27;number&#x27; is odd, otherwise false.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>), <span class=\"hljs-string\">&quot;&#x27;number&#x27; must been an int&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">bool</span>), <span class=\"hljs-string\">&quot;compare bust been from type bool&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> number % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>\n\n\n<span class=\"hljs-comment\"># ------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">goldbach</span>(<span class=\"hljs-params\">number</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Goldbach&#x27;s assumption\n    input: a even positive integer &#x27;number&#x27; &gt; 2\n    returns a list of two prime numbers whose sum is equal to &#x27;number&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (number &gt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">and</span> isEven(number)\n    ), <span class=\"hljs-string\">&quot;&#x27;number&#x27; must been an int, even and &gt; 2&quot;</span>\n\n    ans = []  <span class=\"hljs-comment\"># this list will returned</span>\n\n    <span class=\"hljs-comment\"># creates a list of prime numbers between 2 up to &#x27;number&#x27;</span>\n    primeNumbers = getPrimeNumbers(number)\n    lenPN = <span class=\"hljs-built_in\">len</span>(primeNumbers)\n\n    <span class=\"hljs-comment\"># run variable for while-loops.</span>\n    i = <span class=\"hljs-number\">0</span>\n    j = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-comment\"># exit variable. for break up the loops</span>\n    loop = <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">while</span> i &lt; lenPN <span class=\"hljs-keyword\">and</span> loop:\n\n        j = i + <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">while</span> j &lt; lenPN <span class=\"hljs-keyword\">and</span> loop:\n\n            <span class=\"hljs-keyword\">if</span> primeNumbers[i] + primeNumbers[j] == number:\n                loop = <span class=\"hljs-literal\">False</span>\n                ans.append(primeNumbers[i])\n                ans.append(primeNumbers[j])\n\n            j += <span class=\"hljs-number\">1</span>\n\n        i += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">list</span>)\n        <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-built_in\">len</span>(ans) == <span class=\"hljs-number\">2</span>)\n        <span class=\"hljs-keyword\">and</span> (ans[<span class=\"hljs-number\">0</span>] + ans[<span class=\"hljs-number\">1</span>] == number)\n        <span class=\"hljs-keyword\">and</span> isPrime(ans[<span class=\"hljs-number\">0</span>])\n        <span class=\"hljs-keyword\">and</span> isPrime(ans[<span class=\"hljs-number\">1</span>])\n    ), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must contains two primes. And sum of elements must been eq &#x27;number&#x27;&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># ----------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">gcd</span>(<span class=\"hljs-params\">number1, number2</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Greatest common divisor\n    input: two positive integer &#x27;number1&#x27; and &#x27;number2&#x27;\n    returns the greatest common divisor of &#x27;number1&#x27; and &#x27;number2&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(number1, <span class=\"hljs-built_in\">int</span>)\n        <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(number2, <span class=\"hljs-built_in\">int</span>)\n        <span class=\"hljs-keyword\">and</span> (number1 &gt;= <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">and</span> (number2 &gt;= <span class=\"hljs-number\">0</span>)\n    ), <span class=\"hljs-string\">&quot;&#x27;number1&#x27; and &#x27;number2&#x27; must been positive integer.&quot;</span>\n\n    rest = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">while</span> number2 != <span class=\"hljs-number\">0</span>:\n\n        rest = number1 % number2\n        number1 = number2\n        number2 = rest\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number1, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (\n        number1 &gt;= <span class=\"hljs-number\">0</span>\n    ), <span class=\"hljs-string\">&quot;&#x27;number&#x27; must been from type int and positive&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> number1\n\n\n<span class=\"hljs-comment\"># ----------------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">kgV</span>(<span class=\"hljs-params\">number1, number2</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Least common multiple\n    input: two positive integer &#x27;number1&#x27; and &#x27;number2&#x27;\n    returns the least common multiple of &#x27;number1&#x27; and &#x27;number2&#x27;\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(number1, <span class=\"hljs-built_in\">int</span>)\n        <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(number2, <span class=\"hljs-built_in\">int</span>)\n        <span class=\"hljs-keyword\">and</span> (number1 &gt;= <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">and</span> (number2 &gt;= <span class=\"hljs-number\">1</span>)\n    ), <span class=\"hljs-string\">&quot;&#x27;number1&#x27; and &#x27;number2&#x27; must been positive integer.&quot;</span>\n\n    ans = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># actual answer that will be return.</span>\n\n    <span class=\"hljs-comment\"># for kgV (x,1)</span>\n    <span class=\"hljs-keyword\">if</span> number1 &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> number2 &gt; <span class=\"hljs-number\">1</span>:\n\n        <span class=\"hljs-comment\"># builds the prime factorization of &#x27;number1&#x27; and &#x27;number2&#x27;</span>\n        primeFac1 = primeFactorization(number1)\n        primeFac2 = primeFactorization(number2)\n\n    <span class=\"hljs-keyword\">elif</span> number1 == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> number2 == <span class=\"hljs-number\">1</span>:\n\n        primeFac1 = []\n        primeFac2 = []\n        ans = <span class=\"hljs-built_in\">max</span>(number1, number2)\n\n    count1 = <span class=\"hljs-number\">0</span>\n    count2 = <span class=\"hljs-number\">0</span>\n\n    done = []  <span class=\"hljs-comment\"># captured numbers int both &#x27;primeFac1&#x27; and &#x27;primeFac2&#x27;</span>\n\n    <span class=\"hljs-comment\"># iterates through primeFac1</span>\n    <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> primeFac1:\n\n        <span class=\"hljs-keyword\">if</span> n <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> done:\n\n            <span class=\"hljs-keyword\">if</span> n <span class=\"hljs-keyword\">in</span> primeFac2:\n\n                count1 = primeFac1.count(n)\n                count2 = primeFac2.count(n)\n\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">max</span>(count1, count2)):\n                    ans *= n\n\n            <span class=\"hljs-keyword\">else</span>:\n\n                count1 = primeFac1.count(n)\n\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(count1):\n                    ans *= n\n\n            done.append(n)\n\n    <span class=\"hljs-comment\"># iterates through primeFac2</span>\n    <span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> primeFac2:\n\n        <span class=\"hljs-keyword\">if</span> n <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> done:\n\n            count2 = primeFac2.count(n)\n\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(count2):\n                ans *= n\n\n            done.append(n)\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (\n        ans &gt;= <span class=\"hljs-number\">0</span>\n    ), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must been from type int and positive&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># ----------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getPrime</span>(<span class=\"hljs-params\">n</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Gets the n-th prime number.\n    input: positive integer &#x27;n&#x27; &gt;= 0\n    returns the n-th prime number, beginning at index 0\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (n &gt;= <span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">&quot;&#x27;number&#x27; must been a positive int&quot;</span>\n\n    index = <span class=\"hljs-number\">0</span>\n    ans = <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># this variable holds the answer</span>\n\n    <span class=\"hljs-keyword\">while</span> index &lt; n:\n\n        index += <span class=\"hljs-number\">1</span>\n\n        ans += <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># counts to the next number</span>\n\n        <span class=\"hljs-comment\"># if ans not prime then</span>\n        <span class=\"hljs-comment\"># runs to the next prime number.</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> isPrime(ans):\n            ans += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> isPrime(\n        ans\n    ), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must been a prime number and from type int&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># ---------------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getPrimesBetween</span>(<span class=\"hljs-params\">pNumber1, pNumber2</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: prime numbers &#x27;pNumber1&#x27; and &#x27;pNumber2&#x27;\n            pNumber1 &lt; pNumber2\n    returns a list of all prime numbers between &#x27;pNumber1&#x27; (exclusive)\n            and &#x27;pNumber2&#x27; (exclusive)\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        isPrime(pNumber1) <span class=\"hljs-keyword\">and</span> isPrime(pNumber2) <span class=\"hljs-keyword\">and</span> (pNumber1 &lt; pNumber2)\n    ), <span class=\"hljs-string\">&quot;The arguments must been prime numbers and &#x27;pNumber1&#x27; &lt; &#x27;pNumber2&#x27;&quot;</span>\n\n    number = pNumber1 + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># jump to the next number</span>\n\n    ans = []  <span class=\"hljs-comment\"># this list will be returns.</span>\n\n    <span class=\"hljs-comment\"># if number is not prime then</span>\n    <span class=\"hljs-comment\"># fetch the next prime number.</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> isPrime(number):\n        number += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> number &lt; pNumber2:\n\n        ans.append(number)\n\n        number += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># fetch the next prime number.</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> isPrime(number):\n            number += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(ans, <span class=\"hljs-built_in\">list</span>) <span class=\"hljs-keyword\">and</span> ans[<span class=\"hljs-number\">0</span>] != pNumber1 <span class=\"hljs-keyword\">and</span> ans[<span class=\"hljs-built_in\">len</span>(ans) - <span class=\"hljs-number\">1</span>] != pNumber2\n    ), <span class=\"hljs-string\">&quot;&#x27;ans&#x27; must been a list without the arguments&quot;</span>\n\n    <span class=\"hljs-comment\"># &#x27;ans&#x27; contains not &#x27;pNumber1&#x27; and &#x27;pNumber2&#x27; !</span>\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># ----------------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">getDivisors</span>(<span class=\"hljs-params\">n</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;n&#x27; &gt;= 1\n    returns all divisors of n (inclusive 1 and &#x27;n&#x27;)\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (n &gt;= <span class=\"hljs-number\">1</span>), <span class=\"hljs-string\">&quot;&#x27;n&#x27; must been int and &gt;= 1&quot;</span>\n\n    ans = []  <span class=\"hljs-comment\"># will be returned.</span>\n\n    <span class=\"hljs-keyword\">for</span> divisor <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n\n        <span class=\"hljs-keyword\">if</span> n % divisor == <span class=\"hljs-number\">0</span>:\n            ans.append(divisor)\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> ans[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ans[<span class=\"hljs-built_in\">len</span>(ans) - <span class=\"hljs-number\">1</span>] == n, <span class=\"hljs-string\">&quot;Error in function getDivisiors(...)&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># ----------------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">isPerfectNumber</span>(<span class=\"hljs-params\">number</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;number&#x27; &gt; 1\n    returns true if &#x27;number&#x27; is a perfect number otherwise false.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(number, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (\n        number &gt; <span class=\"hljs-number\">1</span>\n    ), <span class=\"hljs-string\">&quot;&#x27;number&#x27; must been an int and &gt;= 1&quot;</span>\n\n    divisors = getDivisors(number)\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(divisors, <span class=\"hljs-built_in\">list</span>)\n        <span class=\"hljs-keyword\">and</span> (divisors[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">and</span> (divisors[<span class=\"hljs-built_in\">len</span>(divisors) - <span class=\"hljs-number\">1</span>] == number)\n    ), <span class=\"hljs-string\">&quot;Error in help-function getDivisiors(...)&quot;</span>\n\n    <span class=\"hljs-comment\"># summed all divisors up to &#x27;number&#x27; (exclusive), hence [:-1]</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sum</span>(divisors[:-<span class=\"hljs-number\">1</span>]) == number\n\n\n<span class=\"hljs-comment\"># ------------------------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simplifyFraction</span>(<span class=\"hljs-params\">numerator, denominator</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: two integer &#x27;numerator&#x27; and &#x27;denominator&#x27;\n    assumes: &#x27;denominator&#x27; != 0\n    returns: a tuple with simplify numerator and denominator.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(numerator, <span class=\"hljs-built_in\">int</span>)\n        <span class=\"hljs-keyword\">and</span> <span class=\"hljs-built_in\">isinstance</span>(denominator, <span class=\"hljs-built_in\">int</span>)\n        <span class=\"hljs-keyword\">and</span> (denominator != <span class=\"hljs-number\">0</span>)\n    ), <span class=\"hljs-string\">&quot;The arguments must been from type int and &#x27;denominator&#x27; != 0&quot;</span>\n\n    <span class=\"hljs-comment\"># build the greatest common divisor of numerator and denominator.</span>\n    gcdOfFraction = gcd(<span class=\"hljs-built_in\">abs</span>(numerator), <span class=\"hljs-built_in\">abs</span>(denominator))\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(gcdOfFraction, <span class=\"hljs-built_in\">int</span>)\n        <span class=\"hljs-keyword\">and</span> (numerator % gcdOfFraction == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">and</span> (denominator % gcdOfFraction == <span class=\"hljs-number\">0</span>)\n    ), <span class=\"hljs-string\">&quot;Error in function gcd(...,...)&quot;</span>\n\n    <span class=\"hljs-keyword\">return</span> (numerator // gcdOfFraction, denominator // gcdOfFraction)\n\n\n<span class=\"hljs-comment\"># -----------------------------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">factorial</span>(<span class=\"hljs-params\">n</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;n&#x27;\n    returns the factorial of &#x27;n&#x27; (n!)\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (n &gt;= <span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">&quot;&#x27;n&#x27; must been a int and &gt;= 0&quot;</span>\n\n    ans = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># this will be return.</span>\n\n    <span class=\"hljs-keyword\">for</span> factor <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n + <span class=\"hljs-number\">1</span>):\n        ans *= factor\n\n    <span class=\"hljs-keyword\">return</span> ans\n\n\n<span class=\"hljs-comment\"># -------------------------------------------------------------------</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fib</span>(<span class=\"hljs-params\">n</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: positive integer &#x27;n&#x27;\n    returns the n-th fibonacci term , indexing by 0\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(n, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (n &gt;= <span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">&quot;&#x27;n&#x27; must been an int and &gt;= 0&quot;</span>\n\n    tmp = <span class=\"hljs-number\">0</span>\n    fib1 = <span class=\"hljs-number\">1</span>\n    ans = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># this will be return</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n - <span class=\"hljs-number\">1</span>):\n\n        tmp = ans\n        ans += fib1\n        fib1 = tmp\n\n    <span class=\"hljs-keyword\">return</span> ans\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "ParthS007",
      "email": "parth1989shandilya@gmail.com",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
