{
  "slug": "modular-exponentiation",
  "name": "Modular Exponentiation",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/modular_exponentiation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/modular_exponentiation.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief C++ Program for Modular Exponentiation Iteratively.\n * @details The task is to calculate the value of an integer a raised to an\n * integer exponent b under modulo c.\n * @note The time complexity of this approach is O(log b).\n *\n * Example:\n * (4^3) % 5 (where ^ stands for exponentiation and % for modulo)\n * (4*4*4) % 5\n * (4 % 5) * ( (4*4) % 5 )\n * 4 * (16 % 5)\n * 4 * 1\n * 4\n * We can also verify the result as 4^3 is 64 and 64 modulo 5 is 4\n *\n * @author [Shri2206](https://github.com/Shri2206)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace math\n * @brief Mathematical algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> math {\n<span class=\"hljs-comment\">/**\n * @brief This function calculates a raised to exponent b under modulo c using\n * modular exponentiation.\n * @param a integer base\n * @param b unsigned integer exponent\n * @param c integer modulo\n * @return a raised to power b modulo c\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">power</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> a, <span class=\"hljs-type\">uint64_t</span> b, <span class=\"hljs-type\">uint64_t</span> c)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> ans = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// Initialize the answer to be returned</span>\n    a = a % c;         <span class=\"hljs-comment\">/// Update a if it is more than or equal to c</span>\n    <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">/// In case a is divisible by c;</span>\n    }\n    <span class=\"hljs-keyword\">while</span> (b &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-comment\">/// If b is odd, multiply a with answer</span>\n        <span class=\"hljs-keyword\">if</span> (b &amp; <span class=\"hljs-number\">1</span>) {\n            ans = ((ans % c) * (a % c)) % c;\n        }\n        <span class=\"hljs-comment\">/// b must be even now</span>\n        b = b &gt;&gt; <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// b = b/2</span>\n        a = ((a % c) * (a % c)) % c;\n    }\n    <span class=\"hljs-keyword\">return</span> ans;\n}\n\n}  <span class=\"hljs-comment\">// namespace math</span>\n\n<span class=\"hljs-comment\">/**\n * Function for testing power function.\n * test cases and assert statement.\n * @returns `void`\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">uint32_t</span> test_case_1 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">13</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_1 == <span class=\"hljs-number\">6</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1 Passed!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint32_t</span> test_case_2 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">15</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_2 == <span class=\"hljs-number\">14</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2 Passed!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_3 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">41</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_3 == <span class=\"hljs-number\">32</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3 Passed!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint64_t</span> test_case_4 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">27</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_4 == <span class=\"hljs-number\">4</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 4 Passed!&quot;</span> &lt;&lt; std::endl;\n\n    <span class=\"hljs-type\">uint16_t</span> test_case_5 = math::<span class=\"hljs-built_in\">power</span>(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>);\n    <span class=\"hljs-built_in\">assert</span>(test_case_5 == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 5 Passed!&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "go": {
      "dir": "math/modulararithmetic/modularexponentiation.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/math/modulararithmetic/modularexponentiation.go",
      "code": "<span class=\"hljs-keyword\">package</span> modulararithmetic\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;errors&quot;</span>\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\n)\n\n<span class=\"hljs-comment\">// ErrorIntOverflow For asserting that the values do not overflow in Int64</span>\n<span class=\"hljs-keyword\">var</span> ErrorIntOverflow = errors.New(<span class=\"hljs-string\">&quot;Integer Overflow&quot;</span>)\n\n<span class=\"hljs-comment\">// ErrorNegativeExponent for asserting that the exponent we receive is positive</span>\n<span class=\"hljs-keyword\">var</span> ErrorNegativeExponent = errors.New(<span class=\"hljs-string\">&quot;Negative Exponent Provided&quot;</span>)\n\n<span class=\"hljs-comment\">// ModularExponentiation returns base^exponent % mod</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ModularExponentiation</span><span class=\"hljs-params\">(base, exponent, mod <span class=\"hljs-keyword\">int64</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int64</span>, error)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> mod == <span class=\"hljs-number\">1</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">nil</span>\n\t}\n\n\t<span class=\"hljs-keyword\">if</span> exponent &lt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, ErrorNegativeExponent\n\t}\n\t_, err := Multiply64BitInt(mod<span class=\"hljs-number\">-1</span>, mod<span class=\"hljs-number\">-1</span>)\n\n\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>, err\n\t}\n\n\t<span class=\"hljs-keyword\">var</span> result <span class=\"hljs-keyword\">int64</span> = <span class=\"hljs-number\">1</span>\n\n\tbase = base % mod\n\n\t<span class=\"hljs-keyword\">for</span> exponent &gt; <span class=\"hljs-number\">0</span> {\n\t\t<span class=\"hljs-keyword\">if</span> exponent%<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> {\n\t\t\tresult = (result * base) % mod\n\t\t}\n\t\texponent = exponent &gt;&gt; <span class=\"hljs-number\">1</span>\n\t\tbase = (base * base) % mod\n\t}\n\t<span class=\"hljs-keyword\">return</span> result, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-comment\">// Multiply64BitInt Checking if the integer multiplication overflows</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Multiply64BitInt</span><span class=\"hljs-params\">(left, right <span class=\"hljs-keyword\">int64</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">int64</span>, error)</span></span> {\n\t<span class=\"hljs-keyword\">if</span> math.Abs(<span class=\"hljs-keyword\">float64</span>(left)) &gt; <span class=\"hljs-keyword\">float64</span>(math.MaxInt64)/math.Abs(<span class=\"hljs-keyword\">float64</span>(right)) {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>, ErrorIntOverflow\n\t}\n\t<span class=\"hljs-keyword\">return</span> left * right, <span class=\"hljs-literal\">nil</span>\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
