{
  "slug": "enigma-machine2",
  "name": "Enigma Machine2",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/enigma_machine2.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/enigma_machine2.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nWikipedia: https://en.wikipedia.org/wiki/Enigma_machine\nVideo explanation: https://youtu.be/QwQVMqfoB2E\nAlso check out Numberphile&#x27;s and Computerphile&#x27;s videos on this topic\n\nThis module contains function &#x27;enigma&#x27; which emulates\nthe famous Enigma machine from WWII.\nModule includes:\n- enigma function\n- showcase of function usage\n- 9 randnomly generated rotors\n- reflector (aka static rotor)\n- original alphabet\n\nCreated by TrapinchO\n&quot;&quot;&quot;</span>\n\nRotorPositionT = <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>]\nRotorSelectionT = <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]\n\n\n<span class=\"hljs-comment\"># used alphabet --------------------------</span>\n<span class=\"hljs-comment\"># from string.ascii_uppercase</span>\nabc = <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>\n\n<span class=\"hljs-comment\"># -------------------------- default selection --------------------------</span>\n<span class=\"hljs-comment\"># rotors --------------------------</span>\nrotor1 = <span class=\"hljs-string\">&quot;EGZWVONAHDCLFQMSIPJBYUKXTR&quot;</span>\nrotor2 = <span class=\"hljs-string\">&quot;FOBHMDKEXQNRAULPGSJVTYICZW&quot;</span>\nrotor3 = <span class=\"hljs-string\">&quot;ZJXESIUQLHAVRMDOYGTNFWPBKC&quot;</span>\n<span class=\"hljs-comment\"># reflector --------------------------</span>\nreflector = {\n    <span class=\"hljs-string\">&quot;A&quot;</span>: <span class=\"hljs-string\">&quot;N&quot;</span>,\n    <span class=\"hljs-string\">&quot;N&quot;</span>: <span class=\"hljs-string\">&quot;A&quot;</span>,\n    <span class=\"hljs-string\">&quot;B&quot;</span>: <span class=\"hljs-string\">&quot;O&quot;</span>,\n    <span class=\"hljs-string\">&quot;O&quot;</span>: <span class=\"hljs-string\">&quot;B&quot;</span>,\n    <span class=\"hljs-string\">&quot;C&quot;</span>: <span class=\"hljs-string\">&quot;P&quot;</span>,\n    <span class=\"hljs-string\">&quot;P&quot;</span>: <span class=\"hljs-string\">&quot;C&quot;</span>,\n    <span class=\"hljs-string\">&quot;D&quot;</span>: <span class=\"hljs-string\">&quot;Q&quot;</span>,\n    <span class=\"hljs-string\">&quot;Q&quot;</span>: <span class=\"hljs-string\">&quot;D&quot;</span>,\n    <span class=\"hljs-string\">&quot;E&quot;</span>: <span class=\"hljs-string\">&quot;R&quot;</span>,\n    <span class=\"hljs-string\">&quot;R&quot;</span>: <span class=\"hljs-string\">&quot;E&quot;</span>,\n    <span class=\"hljs-string\">&quot;F&quot;</span>: <span class=\"hljs-string\">&quot;S&quot;</span>,\n    <span class=\"hljs-string\">&quot;S&quot;</span>: <span class=\"hljs-string\">&quot;F&quot;</span>,\n    <span class=\"hljs-string\">&quot;G&quot;</span>: <span class=\"hljs-string\">&quot;T&quot;</span>,\n    <span class=\"hljs-string\">&quot;T&quot;</span>: <span class=\"hljs-string\">&quot;G&quot;</span>,\n    <span class=\"hljs-string\">&quot;H&quot;</span>: <span class=\"hljs-string\">&quot;U&quot;</span>,\n    <span class=\"hljs-string\">&quot;U&quot;</span>: <span class=\"hljs-string\">&quot;H&quot;</span>,\n    <span class=\"hljs-string\">&quot;I&quot;</span>: <span class=\"hljs-string\">&quot;V&quot;</span>,\n    <span class=\"hljs-string\">&quot;V&quot;</span>: <span class=\"hljs-string\">&quot;I&quot;</span>,\n    <span class=\"hljs-string\">&quot;J&quot;</span>: <span class=\"hljs-string\">&quot;W&quot;</span>,\n    <span class=\"hljs-string\">&quot;W&quot;</span>: <span class=\"hljs-string\">&quot;J&quot;</span>,\n    <span class=\"hljs-string\">&quot;K&quot;</span>: <span class=\"hljs-string\">&quot;X&quot;</span>,\n    <span class=\"hljs-string\">&quot;X&quot;</span>: <span class=\"hljs-string\">&quot;K&quot;</span>,\n    <span class=\"hljs-string\">&quot;L&quot;</span>: <span class=\"hljs-string\">&quot;Y&quot;</span>,\n    <span class=\"hljs-string\">&quot;Y&quot;</span>: <span class=\"hljs-string\">&quot;L&quot;</span>,\n    <span class=\"hljs-string\">&quot;M&quot;</span>: <span class=\"hljs-string\">&quot;Z&quot;</span>,\n    <span class=\"hljs-string\">&quot;Z&quot;</span>: <span class=\"hljs-string\">&quot;M&quot;</span>,\n}\n\n<span class=\"hljs-comment\"># -------------------------- extra rotors --------------------------</span>\nrotor4 = <span class=\"hljs-string\">&quot;RMDJXFUWGISLHVTCQNKYPBEZOA&quot;</span>\nrotor5 = <span class=\"hljs-string\">&quot;SGLCPQWZHKXAREONTFBVIYJUDM&quot;</span>\nrotor6 = <span class=\"hljs-string\">&quot;HVSICLTYKQUBXDWAJZOMFGPREN&quot;</span>\nrotor7 = <span class=\"hljs-string\">&quot;RZWQHFMVDBKICJLNTUXAGYPSOE&quot;</span>\nrotor8 = <span class=\"hljs-string\">&quot;LFKIJODBEGAMQPXVUHYSTCZRWN&quot;</span>\nrotor9 = <span class=\"hljs-string\">&quot;KOAEGVDHXPQZMLFTYWJNBRCIUS&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_validator</span>(<span class=\"hljs-params\">\n    rotpos: RotorPositionT, rotsel: RotorSelectionT, pb: <span class=\"hljs-built_in\">str</span>\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[RotorPositionT, RotorSelectionT, <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Checks if the values can be used for the &#x27;enigma&#x27; function\n\n    &gt;&gt;&gt; _validator((1,1,1), (rotor1, rotor2, rotor3), &#x27;POLAND&#x27;)\n    ((1, 1, 1), (&#x27;EGZWVONAHDCLFQMSIPJBYUKXTR&#x27;, &#x27;FOBHMDKEXQNRAULPGSJVTYICZW&#x27;, \\\n&#x27;ZJXESIUQLHAVRMDOYGTNFWPBKC&#x27;), \\\n{&#x27;P&#x27;: &#x27;O&#x27;, &#x27;O&#x27;: &#x27;P&#x27;, &#x27;L&#x27;: &#x27;A&#x27;, &#x27;A&#x27;: &#x27;L&#x27;, &#x27;N&#x27;: &#x27;D&#x27;, &#x27;D&#x27;: &#x27;N&#x27;})\n\n    :param rotpos: rotor_positon\n    :param rotsel: rotor_selection\n    :param pb: plugb -&gt; validated and transformed\n    :return: (rotpos, rotsel, pb)\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Checks if there are 3 unique rotors</span>\n\n    unique_rotsel = <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">set</span>(rotsel))\n    <span class=\"hljs-keyword\">if</span> unique_rotsel &lt; <span class=\"hljs-number\">3</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;Please use 3 unique rotors (not <span class=\"hljs-subst\">{unique_rotsel}</span>)&quot;</span>)\n\n    <span class=\"hljs-comment\"># Checks if rotor positions are valid</span>\n    rotorpos1, rotorpos2, rotorpos3 = rotpos\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt; rotorpos1 &lt;= <span class=\"hljs-built_in\">len</span>(abc):\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;First rotor position is not within range of 1..26 (&quot;</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{rotorpos1}</span>&quot;</span>\n        )\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt; rotorpos2 &lt;= <span class=\"hljs-built_in\">len</span>(abc):\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;Second rotor position is not within range of 1..26 (&quot;</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{rotorpos2}</span>)&quot;</span>\n        )\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-number\">0</span> &lt; rotorpos3 &lt;= <span class=\"hljs-built_in\">len</span>(abc):\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;Third rotor position is not within range of 1..26 (&quot;</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{rotorpos3}</span>)&quot;</span>\n        )\n\n    <span class=\"hljs-comment\"># Validates string and returns dict</span>\n    pbdict = _plugboard(pb)\n\n    <span class=\"hljs-keyword\">return</span> rotpos, rotsel, pbdict\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_plugboard</span>(<span class=\"hljs-params\">pbstring: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    https://en.wikipedia.org/wiki/Enigma_machine#Plugboard\n\n    &gt;&gt;&gt; _plugboard(&#x27;PICTURES&#x27;)\n    {&#x27;P&#x27;: &#x27;I&#x27;, &#x27;I&#x27;: &#x27;P&#x27;, &#x27;C&#x27;: &#x27;T&#x27;, &#x27;T&#x27;: &#x27;C&#x27;, &#x27;U&#x27;: &#x27;R&#x27;, &#x27;R&#x27;: &#x27;U&#x27;, &#x27;E&#x27;: &#x27;S&#x27;, &#x27;S&#x27;: &#x27;E&#x27;}\n    &gt;&gt;&gt; _plugboard(&#x27;POLAND&#x27;)\n    {&#x27;P&#x27;: &#x27;O&#x27;, &#x27;O&#x27;: &#x27;P&#x27;, &#x27;L&#x27;: &#x27;A&#x27;, &#x27;A&#x27;: &#x27;L&#x27;, &#x27;N&#x27;: &#x27;D&#x27;, &#x27;D&#x27;: &#x27;N&#x27;}\n\n    In the code, &#x27;pb&#x27; stands for &#x27;plugboard&#x27;\n\n    Pairs can be separated by spaces\n    :param pbstring: string containing plugboard setting for the Enigma machine\n    :return: dictionary containing converted pairs\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># tests the input string if it</span>\n    <span class=\"hljs-comment\"># a) is type string</span>\n    <span class=\"hljs-comment\"># b) has even length (so pairs can be made)</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(pbstring, <span class=\"hljs-built_in\">str</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">f&quot;Plugboard setting isn&#x27;t type string (<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">type</span>(pbstring)}</span>)&quot;</span>)\n    <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">len</span>(pbstring) % <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;Odd number of symbols (<span class=\"hljs-subst\">{<span class=\"hljs-built_in\">len</span>(pbstring)}</span>)&quot;</span>)\n    <span class=\"hljs-keyword\">elif</span> pbstring == <span class=\"hljs-string\">&quot;&quot;</span>:\n        <span class=\"hljs-keyword\">return</span> {}\n\n    pbstring.replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>)\n\n    <span class=\"hljs-comment\"># Checks if all characters are unique</span>\n    tmppbl = <span class=\"hljs-built_in\">set</span>()\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> pbstring:\n        <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> abc:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;&#x27;<span class=\"hljs-subst\">{i}</span>&#x27; not in list of symbols&quot;</span>)\n        <span class=\"hljs-keyword\">elif</span> i <span class=\"hljs-keyword\">in</span> tmppbl:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">f&quot;Duplicate symbol (<span class=\"hljs-subst\">{i}</span>)&quot;</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            tmppbl.add(i)\n    <span class=\"hljs-keyword\">del</span> tmppbl\n\n    <span class=\"hljs-comment\"># Created the dictionary</span>\n    pb = {}\n    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(pbstring) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>):\n        pb[pbstring[j]] = pbstring[j + <span class=\"hljs-number\">1</span>]\n        pb[pbstring[j + <span class=\"hljs-number\">1</span>]] = pbstring[j]\n\n    <span class=\"hljs-keyword\">return</span> pb\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">enigma</span>(<span class=\"hljs-params\">\n    text: <span class=\"hljs-built_in\">str</span>,\n    rotor_position: RotorPositionT,\n    rotor_selection: RotorSelectionT = (<span class=\"hljs-params\">rotor1, rotor2, rotor3</span>),\n    plugb: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;&quot;</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    The only difference with real-world enigma is that I allowed string input.\n    All characters are converted to uppercase. (non-letter symbol are ignored)\n    How it works:\n    (for every letter in the message)\n\n    - Input letter goes into the plugboard.\n    If it is connected to another one, switch it.\n\n    - Letter goes through 3 rotors.\n    Each rotor can be represented as 2 sets of symbol, where one is shuffled.\n    Each symbol from the first set has corresponding symbol in\n    the second set and vice versa.\n\n    example:\n    | ABCDEFGHIJKLMNOPQRSTUVWXYZ | e.g. F=D and D=F\n    | VKLEPDBGRNWTFCJOHQAMUZYIXS |\n\n    - Symbol then goes through reflector (static rotor).\n    There it is switched with paired symbol\n    The reflector can be represented as2 sets, each with half of the alphanet.\n    There are usually 10 pairs of letters.\n\n    Example:\n    | ABCDEFGHIJKLM | e.g. E is paired to X\n    | ZYXWVUTSRQPON | so when E goes in X goes out and vice versa\n\n    - Letter then goes through the rotors again\n\n    - If the letter is connected to plugboard, it is switched.\n\n    - Return the letter\n\n    &gt;&gt;&gt; enigma(&#x27;Hello World!&#x27;, (1, 2, 1), plugb=&#x27;pictures&#x27;)\n    &#x27;KORYH JUHHI!&#x27;\n    &gt;&gt;&gt; enigma(&#x27;KORYH, juhhi!&#x27;, (1, 2, 1), plugb=&#x27;pictures&#x27;)\n    &#x27;HELLO, WORLD!&#x27;\n    &gt;&gt;&gt; enigma(&#x27;hello world!&#x27;, (1, 1, 1), plugb=&#x27;pictures&#x27;)\n    &#x27;FPNCZ QWOBU!&#x27;\n    &gt;&gt;&gt; enigma(&#x27;FPNCZ QWOBU&#x27;, (1, 1, 1), plugb=&#x27;pictures&#x27;)\n    &#x27;HELLO WORLD&#x27;\n\n\n    :param text: input message\n    :param rotor_position: tuple with 3 values in range 1..26\n    :param rotor_selection: tuple with 3 rotors ()\n    :param plugb: string containing plugboard configuration (default &#x27;&#x27;)\n    :return: en/decrypted string\n    &quot;&quot;&quot;</span>\n\n    text = text.upper()\n    rotor_position, rotor_selection, plugboard = _validator(\n        rotor_position, rotor_selection, plugb.upper()\n    )\n\n    rotorpos1, rotorpos2, rotorpos3 = rotor_position\n    rotor1, rotor2, rotor3 = rotor_selection\n    rotorpos1 -= <span class=\"hljs-number\">1</span>\n    rotorpos2 -= <span class=\"hljs-number\">1</span>\n    rotorpos3 -= <span class=\"hljs-number\">1</span>\n\n    result = []\n\n    <span class=\"hljs-comment\"># encryption/decryption process --------------------------</span>\n    <span class=\"hljs-keyword\">for</span> symbol <span class=\"hljs-keyword\">in</span> text:\n        <span class=\"hljs-keyword\">if</span> symbol <span class=\"hljs-keyword\">in</span> abc:\n\n            <span class=\"hljs-comment\"># 1st plugboard --------------------------</span>\n            <span class=\"hljs-keyword\">if</span> symbol <span class=\"hljs-keyword\">in</span> plugboard:\n                symbol = plugboard[symbol]\n\n            <span class=\"hljs-comment\"># rotor ra --------------------------</span>\n            index = abc.index(symbol) + rotorpos1\n            symbol = rotor1[index % <span class=\"hljs-built_in\">len</span>(abc)]\n\n            <span class=\"hljs-comment\"># rotor rb --------------------------</span>\n            index = abc.index(symbol) + rotorpos2\n            symbol = rotor2[index % <span class=\"hljs-built_in\">len</span>(abc)]\n\n            <span class=\"hljs-comment\"># rotor rc --------------------------</span>\n            index = abc.index(symbol) + rotorpos3\n            symbol = rotor3[index % <span class=\"hljs-built_in\">len</span>(abc)]\n\n            <span class=\"hljs-comment\"># reflector --------------------------</span>\n            <span class=\"hljs-comment\"># this is the reason you don&#x27;t need another machine to decipher</span>\n\n            symbol = reflector[symbol]\n\n            <span class=\"hljs-comment\"># 2nd rotors</span>\n            symbol = abc[rotor3.index(symbol) - rotorpos3]\n            symbol = abc[rotor2.index(symbol) - rotorpos2]\n            symbol = abc[rotor1.index(symbol) - rotorpos1]\n\n            <span class=\"hljs-comment\"># 2nd plugboard</span>\n            <span class=\"hljs-keyword\">if</span> symbol <span class=\"hljs-keyword\">in</span> plugboard:\n                symbol = plugboard[symbol]\n\n            <span class=\"hljs-comment\"># moves/resets rotor positions</span>\n            rotorpos1 += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> rotorpos1 &gt;= <span class=\"hljs-built_in\">len</span>(abc):\n                rotorpos1 = <span class=\"hljs-number\">0</span>\n                rotorpos2 += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> rotorpos2 &gt;= <span class=\"hljs-built_in\">len</span>(abc):\n                rotorpos2 = <span class=\"hljs-number\">0</span>\n                rotorpos3 += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">if</span> rotorpos3 &gt;= <span class=\"hljs-built_in\">len</span>(abc):\n                rotorpos3 = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-comment\"># else:</span>\n        <span class=\"hljs-comment\">#    pass</span>\n        <span class=\"hljs-comment\">#    Error could be also raised</span>\n        <span class=\"hljs-comment\">#    raise ValueError(</span>\n        <span class=\"hljs-comment\">#       &#x27;Invalid symbol(&#x27;+repr(symbol)+&#x27;)&#x27;)</span>\n        result.append(symbol)\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(result)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    message = <span class=\"hljs-string\">&quot;This is my Python script that emulates the Enigma machine from WWII.&quot;</span>\n    rotor_pos = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    pb = <span class=\"hljs-string\">&quot;pictures&quot;</span>\n    rotor_sel = (rotor2, rotor4, rotor8)\n    en = enigma(message, rotor_pos, rotor_sel, pb)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Encrypted message:&quot;</span>, en)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Decrypted message:&quot;</span>, enigma(en, rotor_pos, rotor_sel, pb))\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Hasenn",
      "email": "eliottarloveyrier@live.fr",
      "commits": 1
    },
    {
      "name": "TrapinchO",
      "email": "67415128+TrapinchO@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
