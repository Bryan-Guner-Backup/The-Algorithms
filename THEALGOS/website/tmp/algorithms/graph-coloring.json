{
  "slug": "graph-coloring",
  "name": "Graph Coloring",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "backtracking/graph_coloring.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/graph_coloring.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief prints the assigned colors\n * using [Graph Coloring](https://en.wikipedia.org/wiki/Graph_coloring)\n * algorithm\n *\n * @details\n * In graph theory, graph coloring is a special case of graph labeling;\n * it is an assignment of labels traditionally called &quot;colors&quot; to elements of a\n * graph subject to certain constraints. In its simplest form, it is a way of\n * coloring the vertices of a graph such that no two adjacent vertices are of\n * the same color; this is called a vertex coloring. Similarly, an edge coloring\n * assigns a color to each edge so that no two adjacent edges are of the same\n * color, and a face coloring of a planar graph assigns a color to each face or\n * region so that no two faces that share a boundary have the same color.\n *\n * @author [Anup Kumar Panwar](https://github.com/AnupKumarPanwar)\n * @author [David Leal](https://github.com/Panquesito7)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n<span class=\"hljs-comment\">/** A utility function to print solution\n * @tparam V number of vertices in the graph\n * @param color array of colors assigned to the nodes\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">printSolution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, V&gt;&amp; color)</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Following are the assigned colors&quot;</span> &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span>&amp; col : color) {\n        std::cout &lt;&lt; col;\n    }\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** A utility function to check if the current color assignment is safe for\n * vertex v\n * @tparam V number of vertices in the graph\n * @param v index of graph vertex to check\n * @param graph matrix of graph nonnectivity\n * @param color vector of colors assigned to the graph nodes/vertices\n * @param c color value to check for the node `v`\n * @returns `true` if the color is safe to be assigned to the node\n * @returns `false` if the color is not safe to be assigned to the node\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">isSafe</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v, <span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt;&amp; graph,\n            <span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, V&gt;&amp; color, <span class=\"hljs-type\">int</span> c)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; i++) {\n        <span class=\"hljs-keyword\">if</span> (graph[v][i] &amp;&amp; c == color[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/** A recursive utility function to solve m coloring problem\n * @tparam V number of vertices in the graph\n * @param graph matrix of graph nonnectivity\n * @param m number of colors\n * @param [in,out] color description // used in,out to notify in documentation\n * that this parameter gets modified by the function\n * @param v index of graph vertex to check\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> V&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">graphColoring</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt;&amp; graph, <span class=\"hljs-type\">int</span> m,\n                   std::array&lt;<span class=\"hljs-type\">int</span>, V&gt; color, <span class=\"hljs-type\">int</span> v)</span> </span>{\n    <span class=\"hljs-comment\">// base case:</span>\n    <span class=\"hljs-comment\">// If all vertices are assigned a color then return true</span>\n    <span class=\"hljs-keyword\">if</span> (v == V) {\n        backtracking::<span class=\"hljs-built_in\">printSolution</span>&lt;V&gt;(color);\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// Consider this vertex v and try different colors</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> c = <span class=\"hljs-number\">1</span>; c &lt;= m; c++) {\n        <span class=\"hljs-comment\">// Check if assignment of color c to v is fine</span>\n        <span class=\"hljs-keyword\">if</span> (backtracking::<span class=\"hljs-built_in\">isSafe</span>&lt;V&gt;(v, graph, color, c)) {\n            color[v] = c;\n\n            <span class=\"hljs-comment\">// recur to assign colors to rest of the vertices</span>\n            backtracking::<span class=\"hljs-built_in\">graphColoring</span>&lt;V&gt;(graph, m, color, v + <span class=\"hljs-number\">1</span>);\n\n            <span class=\"hljs-comment\">// If assigning color c doesn&#x27;t lead to a solution then remove it</span>\n            color[v] = <span class=\"hljs-number\">0</span>;\n        }\n    }\n}\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Create following graph and test whether it is 3 colorable</span>\n    <span class=\"hljs-comment\">// (3)---(2)</span>\n    <span class=\"hljs-comment\">// |   / |</span>\n    <span class=\"hljs-comment\">// |  /  |</span>\n    <span class=\"hljs-comment\">// | /   |</span>\n    <span class=\"hljs-comment\">// (0)---(1)</span>\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> V = <span class=\"hljs-number\">4</span>;  <span class=\"hljs-comment\">// number of vertices in the graph</span>\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, V&gt;, V&gt; graph = {\n        std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, V&gt;({<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}), std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, V&gt;({<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>}),\n        std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, V&gt;({<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>}), std::<span class=\"hljs-built_in\">array</span>&lt;<span class=\"hljs-type\">int</span>, V&gt;({<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>})};\n\n    <span class=\"hljs-type\">int</span> m = <span class=\"hljs-number\">3</span>;  <span class=\"hljs-comment\">// Number of colors</span>\n    std::array&lt;<span class=\"hljs-type\">int</span>, V&gt; color{};\n\n    backtracking::<span class=\"hljs-built_in\">graphColoring</span>&lt;V&gt;(graph, m, color, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Swastika Gupta",
      "email": "64654203+Swastyy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jxtopher",
      "email": "39927513+Jxtopher@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
