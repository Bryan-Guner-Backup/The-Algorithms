{
  "slug": "searchsinglylinkedlistrecursion",
  "name": "SearchSinglyLinkedListRecursion",
  "categories": ["datastructures", "list"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Lists/SearchSinglyLinkedListRecursion.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Lists/SearchSinglyLinkedListRecursion.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Lists;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SearchSinglyLinkedListRecursion</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">SinglyLinkedList</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">SearchSinglyLinkedListRecursion</span> <span class=\"hljs-variable\">list</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SearchSinglyLinkedListRecursion</span>();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">10</span>; ++i) {\n      list.insert(i);\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">10</span>; ++i) {\n      <span class=\"hljs-keyword\">assert</span> list.search(i);\n    }\n    <span class=\"hljs-keyword\">assert</span> !list.search(-<span class=\"hljs-number\">1</span>) &amp;&amp; !list.search(<span class=\"hljs-number\">100</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Test if the value key is present in the list using recursion.\n   *\n   * <span class=\"hljs-doctag\">@param</span> node the head node.\n   * <span class=\"hljs-doctag\">@param</span> key the value to be searched.\n   * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-doctag\">@code</span> true} if key is present in the list, otherwise {<span class=\"hljs-doctag\">@code</span> false}.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">searchRecursion</span><span class=\"hljs-params\">(Node node, <span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-keyword\">return</span> node != <span class=\"hljs-literal\">null</span> &amp;&amp; (node.value == key || searchRecursion(node.next, key));\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-keyword\">return</span> searchRecursion(getHead(), key);\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
