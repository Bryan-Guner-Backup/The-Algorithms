{
  "slug": "rayleigh-quotient",
  "name": "Rayleigh Quotient",
  "categories": ["linearalgebra", "src"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "linear_algebra/src/rayleigh_quotient.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/linear_algebra/src/rayleigh_quotient.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://en.wikipedia.org/wiki/Rayleigh_quotient\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_hermitian</span>(<span class=\"hljs-params\">matrix: np.ndarray</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Checks if a matrix is Hermitian.\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; A = np.array([\n    ... [2,    2+1j, 4],\n    ... [2-1j,  3,  1j],\n    ... [4,    -1j,  1]])\n    &gt;&gt;&gt; is_hermitian(A)\n    True\n    &gt;&gt;&gt; A = np.array([\n    ... [2,    2+1j, 4+1j],\n    ... [2-1j,  3,  1j],\n    ... [4,    -1j,  1]])\n    &gt;&gt;&gt; is_hermitian(A)\n    False\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> np.array_equal(matrix, matrix.conjugate().T)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">rayleigh_quotient</span>(<span class=\"hljs-params\">A: np.ndarray, v: np.ndarray</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the Rayleigh quotient of a Hermitian matrix A and\n    vector v.\n    &gt;&gt;&gt; import numpy as np\n    &gt;&gt;&gt; A = np.array([\n    ... [1,  2, 4],\n    ... [2,  3,  -1],\n    ... [4, -1,  1]\n    ... ])\n    &gt;&gt;&gt; v = np.array([\n    ... [1],\n    ... [2],\n    ... [3]\n    ... ])\n    &gt;&gt;&gt; rayleigh_quotient(A, v)\n    array([[3.]])\n    &quot;&quot;&quot;</span>\n    v_star = v.conjugate().T\n    v_star_dot = v_star.dot(A)\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(v_star_dot, np.ndarray)\n    <span class=\"hljs-keyword\">return</span> (v_star_dot.dot(v)) / (v_star.dot(v))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tests</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    A = np.array([[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1j</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1j</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1j</span>], [<span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">1j</span>, <span class=\"hljs-number\">1</span>]])\n    v = np.array([[<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>]])\n    <span class=\"hljs-keyword\">assert</span> is_hermitian(A), <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{A}</span> is not hermitian.&quot;</span>\n    <span class=\"hljs-built_in\">print</span>(rayleigh_quotient(A, v))\n\n    A = np.array([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, -<span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">4</span>, -<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]])\n    <span class=\"hljs-keyword\">assert</span> is_hermitian(A), <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{A}</span> is not hermitian.&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> rayleigh_quotient(A, v) == <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-number\">3</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    tests()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
