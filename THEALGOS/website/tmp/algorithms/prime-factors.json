{
  "slug": "prime-factors",
  "name": "Prime Factors",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/prime_factors.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/prime_factors.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\npython/black : True\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">prime_factors</span>(<span class=\"hljs-params\">n: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns prime factors of n as a list.\n\n    &gt;&gt;&gt; prime_factors(0)\n    []\n    &gt;&gt;&gt; prime_factors(100)\n    [2, 2, 5, 5]\n    &gt;&gt;&gt; prime_factors(2560)\n    [2, 2, 2, 2, 2, 2, 2, 2, 2, 5]\n    &gt;&gt;&gt; prime_factors(10**-2)\n    []\n    &gt;&gt;&gt; prime_factors(0.02)\n    []\n    &gt;&gt;&gt; x = prime_factors(10**241) # doctest: +NORMALIZE_WHITESPACE\n    &gt;&gt;&gt; x == [2]*241 + [5]*241\n    True\n    &gt;&gt;&gt; prime_factors(10**-354)\n    []\n    &gt;&gt;&gt; prime_factors(&#x27;hello&#x27;)\n    Traceback (most recent call last):\n        ...\n    TypeError: &#x27;&lt;=&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27;\n    &gt;&gt;&gt; prime_factors([1,2,&#x27;hello&#x27;])\n    Traceback (most recent call last):\n        ...\n    TypeError: &#x27;&lt;=&#x27; not supported between instances of &#x27;int&#x27; and &#x27;list&#x27;\n\n    &quot;&quot;&quot;</span>\n    i = <span class=\"hljs-number\">2</span>\n    factors = []\n    <span class=\"hljs-keyword\">while</span> i * i &lt;= n:\n        <span class=\"hljs-keyword\">if</span> n % i:\n            i += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            n //= i\n            factors.append(i)\n    <span class=\"hljs-keyword\">if</span> n &gt; <span class=\"hljs-number\">1</span>:\n        factors.append(n)\n    <span class=\"hljs-keyword\">return</span> factors\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Maths/PrimeFactors.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/PrimeFactors.js",
      "code": "<span class=\"hljs-comment\">/*\r\n  Modified from:\r\n    https://github.com/TheAlgorithms/Python/blob/master/maths/prime_factors.py\r\n*/</span>\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">PrimeFactors</span> = (<span class=\"hljs-params\">n</span>) =&gt; {\r\n  <span class=\"hljs-comment\">// input: n: int</span>\r\n  <span class=\"hljs-comment\">// output: primeFactors: Array of all prime factors of n</span>\r\n  <span class=\"hljs-keyword\">const</span> primeFactors = []\r\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt;= n; i++) {\r\n    <span class=\"hljs-keyword\">if</span> (n % i === <span class=\"hljs-number\">0</span>) {\r\n      <span class=\"hljs-keyword\">while</span> (n % i === <span class=\"hljs-number\">0</span>) {\r\n        primeFactors.<span class=\"hljs-title function_\">push</span>(i)\r\n        n = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(n / i)\r\n      }\r\n    }\r\n  }\r\n  <span class=\"hljs-keyword\">if</span> (n &gt; <span class=\"hljs-number\">1</span>) {\r\n    primeFactors.<span class=\"hljs-title function_\">push</span>(n)\r\n  }\r\n  <span class=\"hljs-keyword\">return</span> primeFactors\r\n}\r\n\r\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\r\n  <span class=\"hljs-comment\">// PrimeFactors(100)</span>\r\n  <span class=\"hljs-comment\">// &gt; [ 2, 2, 5, 5 ]</span>\r\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">PrimeFactors</span>(<span class=\"hljs-number\">100</span>))\r\n  <span class=\"hljs-comment\">// PrimeFactors(2560)</span>\r\n  <span class=\"hljs-comment\">// &gt; [ 2, 2, 2, 2, 2, 2, 2, 2, 2, 5 ]</span>\r\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">PrimeFactors</span>(<span class=\"hljs-number\">2560</span>))\r\n}\r\n\r\n<span class=\"hljs-title function_\">main</span>()\r\n"
    },
    "scala": {
      "dir": "src/main/scala/Mathematics/PrimeFactors.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Mathematics/PrimeFactors.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Mathematics</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">PrimeFactors</span> </span>{\n\n  <span class=\"hljs-comment\">/**\n    * Method returns list of prime factors of number n\n    *\n    * @param num\n    * @return\n    */</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">primeFactors</span></span>(number: <span class=\"hljs-type\">Long</span>): <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">Long</span>] = {\n    <span class=\"hljs-keyword\">val</span> exists = (<span class=\"hljs-number\">2</span>L to math.sqrt(number).toLong).find(number % _ == <span class=\"hljs-number\">0</span>)\n    exists <span class=\"hljs-keyword\">match</span> {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">None</span> =&gt; <span class=\"hljs-type\">List</span>(number)\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-type\">Some</span>(factor) =&gt; factor :: primeFactors(number / factor)\n\n    }\n  }\n}\n"
    },
    "julia": {
      "dir": "src/math/prime_factors.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/math/prime_factors.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nprime_factors(number)\n\nReturns prime factors of `number` as a vector\n\n# Example\n\n```julia\nprime_factors(50)          # returns [2,5,5]\nprime_factors(0)           # returns []\nprime_factors(100)         # returns [2, 2, 5, 5]\nprime_factors(2560)        # returns [2, 2, 2, 2, 2, 2, 2, 2, 2, 5]\n```\n\nContributed By:- [Ashwani Rathee](https://github.com/ashwani-rathee)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> prime_factors(number::N)<span class=\"hljs-keyword\">where</span> N&lt;:<span class=\"hljs-built_in\">Integer</span>\n    i = <span class=\"hljs-number\">2</span>\n    factors = <span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>}()\n    <span class=\"hljs-keyword\">while</span> i*i &lt;= number\n        <span class=\"hljs-keyword\">if</span> number % i == <span class=\"hljs-number\">1</span>\n            i += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>\n            number รท= i\n            push!(factors, i)\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">if</span> number &gt; <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>\n        push!(factors, number)\n    <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">return</span> factors\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "aditiagarwal34550",
      "email": "aditiagarwal34550@gmail.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "Rratic@163.com",
      "commits": 1
    },
    {
      "name": "Ashwani Rathee",
      "email": "ab669522@gmail.com",
      "commits": 1
    },
    {
      "name": "QuantumNovice",
      "email": "43876848+QuantumNovice@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "utkarsh",
      "email": "ucponia@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Aditi Agarwal",
      "email": "31546143+aditiagarwal34550@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
