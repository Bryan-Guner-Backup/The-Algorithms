{
  "slug": "scoring-algorithm",
  "name": "Scoring Algorithm",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/scoring_algorithm.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/scoring_algorithm.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\ndeveloped by: markmelnic\noriginal repo: https://github.com/markmelnic/Scoring-Algorithm\n\nAnalyse data using a range based percentual proximity algorithm\nand calculate the linear maximum likelihood estimation.\nThe basic principle is that all values supplied will be broken\ndown to a range from 0 to 1 and each column&#x27;s score will be added\nup to get the total score.\n\n==========\nExample for data of vehicles\nprice|mileage|registration_year\n20k  |60k    |2012\n22k  |50k    |2011\n23k  |90k    |2015\n16k  |210k   |2010\n\nWe want the vehicle with the lowest price,\nlowest mileage but newest registration year.\nThus the weights for each column are as follows:\n[0, 0, 1]\n\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>procentual_proximity([[20, 60, 2012],[23, 90, 2015],[22, 50, 2011]], [0, 0, 1])\n[[20, 60, 2012, 2.0], [23, 90, 2015, 1.0], [22, 50, 2011, 1.3333333333333335]]\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">procentual_proximity</span>(<span class=\"hljs-params\">source_data: <span class=\"hljs-built_in\">list</span>, weights: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    weights - int list\n    possible values - 0 / 1\n    0 if lower values have higher weight in the data set\n    1 if higher values have higher weight in the data set\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># getting data</span>\n    data_lists = []\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> source_data:\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(item)):\n            <span class=\"hljs-keyword\">try</span>:\n                data_lists[i].append(<span class=\"hljs-built_in\">float</span>(item[i]))\n            <span class=\"hljs-keyword\">except</span> IndexError:\n                <span class=\"hljs-comment\"># generate corresponding number of lists</span>\n                data_lists.append([])\n                data_lists[i].append(<span class=\"hljs-built_in\">float</span>(item[i]))\n\n    score_lists = []\n    <span class=\"hljs-comment\"># calculating each score</span>\n    <span class=\"hljs-keyword\">for</span> dlist, weight <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(data_lists, weights):\n        mind = <span class=\"hljs-built_in\">min</span>(dlist)\n        maxd = <span class=\"hljs-built_in\">max</span>(dlist)\n\n        score = []\n        <span class=\"hljs-comment\"># for weight 0 score is 1 - actual score</span>\n        <span class=\"hljs-keyword\">if</span> weight == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> dlist:\n                <span class=\"hljs-keyword\">try</span>:\n                    score.append(<span class=\"hljs-number\">1</span> - ((item - mind) / (maxd - mind)))\n                <span class=\"hljs-keyword\">except</span> ZeroDivisionError:\n                    score.append(<span class=\"hljs-number\">1</span>)\n\n        <span class=\"hljs-keyword\">elif</span> weight == <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> dlist:\n                <span class=\"hljs-keyword\">try</span>:\n                    score.append((item - mind) / (maxd - mind))\n                <span class=\"hljs-keyword\">except</span> ZeroDivisionError:\n                    score.append(<span class=\"hljs-number\">0</span>)\n\n        <span class=\"hljs-comment\"># weight not 0 or 1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Invalid weight of %f provided&quot;</span> % (weight))\n\n        score_lists.append(score)\n\n    <span class=\"hljs-comment\"># initialize final scores</span>\n    final_scores = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(score_lists[<span class=\"hljs-number\">0</span>]))]\n\n    <span class=\"hljs-comment\"># generate final scores</span>\n    <span class=\"hljs-keyword\">for</span> i, slist <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(score_lists):\n        <span class=\"hljs-keyword\">for</span> j, ele <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(slist):\n            final_scores[j] = final_scores[j] + ele\n\n    <span class=\"hljs-comment\"># append scores to source data</span>\n    <span class=\"hljs-keyword\">for</span> i, ele <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(final_scores):\n        source_data[i].append(ele)\n\n    <span class=\"hljs-keyword\">return</span> source_data\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Mark",
      "email": "markhappy200@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
