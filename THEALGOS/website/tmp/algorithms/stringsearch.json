{
  "slug": "stringsearch",
  "name": "StringSearch",
  "categories": ["searches"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Search/StringSearch.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Search/StringSearch.js",
      "code": "<span class=\"hljs-comment\">/*\n * String Search\n */</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">makeTable</span> (str) {\n  <span class=\"hljs-comment\">// create a table of size equal to the length of `str`</span>\n  <span class=\"hljs-comment\">// table[i] will store the prefix of the longest prefix of the substring str[0..i]</span>\n  <span class=\"hljs-keyword\">const</span> table = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(str.<span class=\"hljs-property\">length</span>)\n  <span class=\"hljs-keyword\">let</span> maxPrefix = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-comment\">// the longest prefix of the substring str[0] has length</span>\n  table[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-comment\">// for the substrings the following substrings, we have two cases</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; str.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-comment\">// case 1. the current character doesn&#x27;t match the last character of the longest prefix</span>\n    <span class=\"hljs-keyword\">while</span> (maxPrefix &gt; <span class=\"hljs-number\">0</span> &amp;&amp; str.<span class=\"hljs-title function_\">charAt</span>(i) !== str.<span class=\"hljs-title function_\">charAt</span>(maxPrefix)) {\n      <span class=\"hljs-comment\">// if that is the case, we have to backtrack, and try find a character  that will be equal to the current character</span>\n      <span class=\"hljs-comment\">// if we reach 0, then we couldn&#x27;t find a chracter</span>\n      maxPrefix = table[maxPrefix - <span class=\"hljs-number\">1</span>]\n    }\n    <span class=\"hljs-comment\">// case 2. The last character of the longest prefix matches the current character in `str`</span>\n    <span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-title function_\">charAt</span>(maxPrefix) === str.<span class=\"hljs-title function_\">charAt</span>(i)) {\n      <span class=\"hljs-comment\">// if that is the case, we know that the longest prefix at position i has one more character.</span>\n      <span class=\"hljs-comment\">// for example consider `.` be any character not contained in the set [a.c]</span>\n      <span class=\"hljs-comment\">// str = abc....abc</span>\n      <span class=\"hljs-comment\">// consider `i` to be the last character `c` in `str`</span>\n      <span class=\"hljs-comment\">// maxPrefix = will be 2 (the first `c` in `str`)</span>\n      <span class=\"hljs-comment\">// maxPrefix now will be 3</span>\n      maxPrefix++\n      <span class=\"hljs-comment\">// so the max prefix for table[9] is 3</span>\n    }\n    table[i] = maxPrefix\n  }\n  <span class=\"hljs-keyword\">return</span> table\n}\n\n<span class=\"hljs-comment\">// Find all the words that matches in a given string `str`</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">stringSearch</span> (str, word) {\n  <span class=\"hljs-comment\">// find the prefix table in O(n)</span>\n  <span class=\"hljs-keyword\">const</span> prefixes = <span class=\"hljs-title function_\">makeTable</span>(word)\n  <span class=\"hljs-keyword\">const</span> matches = []\n\n  <span class=\"hljs-comment\">// `j` is the index in `P`</span>\n  <span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-comment\">// `i` is the index in `S`</span>\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> (i &lt; str.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-comment\">// Case 1.  S[i] == P[j] so we move to the next index in `S` and `P`</span>\n    <span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-title function_\">charAt</span>(i) === word.<span class=\"hljs-title function_\">charAt</span>(j)) {\n      i++\n      j++\n    }\n    <span class=\"hljs-comment\">// Case 2.  `j` is equal to the length of `P`</span>\n    <span class=\"hljs-comment\">// that means that we reached the end of `P` and thus we found a match</span>\n    <span class=\"hljs-comment\">// Next we have to update `j` because we want to save some time</span>\n    <span class=\"hljs-comment\">// instead of updating to j = 0 , we can jump to the last character of the longest prefix well known so far.</span>\n    <span class=\"hljs-comment\">// j-1 means the last character of `P` because j is actually `P.length`</span>\n    <span class=\"hljs-comment\">// e.g.</span>\n    <span class=\"hljs-comment\">// S =  a b a b d e</span>\n    <span class=\"hljs-comment\">// P = `a b`a b</span>\n    <span class=\"hljs-comment\">// we will jump to `a b` and we will compare d and a in the next iteration</span>\n    <span class=\"hljs-comment\">// a b a b `d` e</span>\n    <span class=\"hljs-comment\">//     a b `a` b</span>\n    <span class=\"hljs-keyword\">if</span> (j === word.<span class=\"hljs-property\">length</span>) {\n      matches.<span class=\"hljs-title function_\">push</span>(i - j)\n      j = prefixes[j - <span class=\"hljs-number\">1</span>]\n      <span class=\"hljs-comment\">// Case 3.</span>\n      <span class=\"hljs-comment\">// S[i] != P[j] There&#x27;s a mismatch!</span>\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-title function_\">charAt</span>(i) !== word.<span class=\"hljs-title function_\">charAt</span>(j)) {\n      <span class=\"hljs-comment\">// if we  found at least a character in common, do the same thing as in case 2</span>\n      <span class=\"hljs-keyword\">if</span> (j !== <span class=\"hljs-number\">0</span>) {\n        j = prefixes[j - <span class=\"hljs-number\">1</span>]\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// else j = 0, and we can move to the next character S[i+1]</span>\n        i++\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> matches\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">stringSearch</span>(<span class=\"hljs-string\">&#x27;Hello search the position of me&#x27;</span>, <span class=\"hljs-string\">&#x27;pos&#x27;</span>))\n"
    }
  },
  "contributors": [
    {
      "name": "Sujan Chhetri",
      "email": "44917558+sujanchhetri@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
