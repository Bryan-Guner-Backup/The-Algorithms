{
  "slug": "udp-server",
  "name": "Udp Server",
  "categories": ["clientserver"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "client_server/udp_server.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/client_server/udp_server.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [TheShubham99](https://github.com/TheShubham99)\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @brief Server side implementation of UDP client-server model\n * @see client_server/udp_client.c\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32                            <span class=\"hljs-comment\">// if compiling for Windows</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS  <span class=\"hljs-comment\">// will make the code invalid for next</span></span>\n                                         <span class=\"hljs-comment\">// MSVC compiler versions</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> close closesocket                <span class=\"hljs-comment\">/**&lt; map BSD name to Winsock */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;winsock2.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span>  <span class=\"hljs-comment\">// if not windows platform</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netdb.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netinet/in.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PORT 8080    <span class=\"hljs-comment\">/**&lt; port number to connect to */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAXLINE 1024 <span class=\"hljs-comment\">/**&lt; maximum characters per line */</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-comment\">/** Cleanup function will be automatically called on program exit */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">cleanup</span><span class=\"hljs-params\">()</span> { WSACleanup(); }\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/** Driver code */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n    <span class=\"hljs-comment\">// when using winsock2.h, startup required</span>\n    WSADATA wsData;\n    <span class=\"hljs-keyword\">if</span> (WSAStartup(MAKEWORD(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>), &amp;wsData) != <span class=\"hljs-number\">0</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;WSA Startup error: \\n&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    atexit(cleanup);  <span class=\"hljs-comment\">// register at-exit function</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n    <span class=\"hljs-type\">int</span> sockfd;\n    <span class=\"hljs-type\">char</span> buffer[MAXLINE];\n    <span class=\"hljs-type\">char</span> *hello = <span class=\"hljs-string\">&quot;Hello from server&quot;</span>;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> <span class=\"hljs-title\">servaddr</span>, <span class=\"hljs-title\">cliaddr</span>;</span>\n\n    <span class=\"hljs-comment\">// Creating socket file descriptor</span>\n    <span class=\"hljs-keyword\">if</span> ((sockfd = socket(AF_INET, SOCK_DGRAM, <span class=\"hljs-number\">0</span>)) &lt; <span class=\"hljs-number\">0</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;socket creation failed&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n    }\n\n    <span class=\"hljs-built_in\">memset</span>(&amp;servaddr, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span>(servaddr));\n    <span class=\"hljs-built_in\">memset</span>(&amp;cliaddr, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span>(cliaddr));\n\n    <span class=\"hljs-comment\">// Filling server information</span>\n    servaddr.sin_family = AF_INET;  <span class=\"hljs-comment\">// IPv4</span>\n    servaddr.sin_addr.s_addr = INADDR_ANY;\n    servaddr.sin_port = htons(PORT);\n\n    <span class=\"hljs-comment\">// Bind the socket with the server address</span>\n    <span class=\"hljs-keyword\">if</span> (bind(sockfd, (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;servaddr, <span class=\"hljs-keyword\">sizeof</span>(servaddr)) &lt; <span class=\"hljs-number\">0</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;bind failed&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);\n    }\n\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> len;\n    <span class=\"hljs-type\">int</span> n;\n    n = recvfrom(sockfd, (<span class=\"hljs-type\">char</span> *)buffer, MAXLINE, MSG_WAITALL,\n                 (<span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;cliaddr, &amp;len);\n    buffer[n] = <span class=\"hljs-string\">&#x27;\\0&#x27;</span>;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Client : %s\\n&quot;</span>, buffer);\n    sendto(sockfd, (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *)hello, <span class=\"hljs-built_in\">strlen</span>(hello), <span class=\"hljs-number\">0</span>,\n           (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">struct</span> sockaddr *)&amp;cliaddr, len);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Hello message sent.\\n&quot;</span>);\n\n    close(sockfd);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Prathamesh Sahasrabhojane",
      "email": "ssahasrabhojane@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
