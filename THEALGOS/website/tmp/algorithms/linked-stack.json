{
  "slug": "linked-stack",
  "name": "Linked Stack",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/linked_stack.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/linked_stack.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; A Stack using a linked list like structure &quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>, <span class=\"hljs-type\">Optional</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data</span>):\r\n        self.data = data\r\n        self.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.data}</span>&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedStack</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Linked List Stack implementing push (to top),\r\n    pop (from top) and is_empty\r\n\r\n    &gt;&gt;&gt; stack = LinkedStack()\r\n    &gt;&gt;&gt; stack.is_empty()\r\n    True\r\n    &gt;&gt;&gt; stack.push(5)\r\n    &gt;&gt;&gt; stack.push(9)\r\n    &gt;&gt;&gt; stack.push(&#x27;python&#x27;)\r\n    &gt;&gt;&gt; stack.is_empty()\r\n    False\r\n    &gt;&gt;&gt; stack.pop()\r\n    &#x27;python&#x27;\r\n    &gt;&gt;&gt; stack.push(&#x27;algorithms&#x27;)\r\n    &gt;&gt;&gt; stack.pop()\r\n    &#x27;algorithms&#x27;\r\n    &gt;&gt;&gt; stack.pop()\r\n    9\r\n    &gt;&gt;&gt; stack.pop()\r\n    5\r\n    &gt;&gt;&gt; stack.is_empty()\r\n    True\r\n    &gt;&gt;&gt; stack.pop()\r\n    Traceback (most recent call last):\r\n        ...\r\n    IndexError: pop from empty stack\r\n    &quot;&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        self.top: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>):\r\n        node = self.top\r\n        <span class=\"hljs-keyword\">while</span> node:\r\n            <span class=\"hljs-keyword\">yield</span> node.data\r\n            node = node.<span class=\"hljs-built_in\">next</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.push(&quot;c&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;b&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;a&quot;)\r\n        &gt;&gt;&gt; str(stack)\r\n        &#x27;a-&gt;b-&gt;c&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;-&gt;&quot;</span>.join([<span class=\"hljs-built_in\">str</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> self])\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>):\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; len(stack) == 0\r\n        True\r\n        &gt;&gt;&gt; stack.push(&quot;c&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;b&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;a&quot;)\r\n        &gt;&gt;&gt; len(stack) == 3\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">iter</span>(self)))\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.is_empty()\r\n        True\r\n        &gt;&gt;&gt; stack.push(1)\r\n        &gt;&gt;&gt; stack.is_empty()\r\n        False\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">return</span> self.top <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">push</span>(<span class=\"hljs-params\">self, item: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.push(&quot;Python&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;Java&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;C&quot;)\r\n        &gt;&gt;&gt; str(stack)\r\n        &#x27;C-&gt;Java-&gt;Python&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        node = Node(item)\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.is_empty():\r\n            node.<span class=\"hljs-built_in\">next</span> = self.top\r\n        self.top = node\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pop</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.pop()\r\n        Traceback (most recent call last):\r\n        ...\r\n        IndexError: pop from empty stack\r\n        &gt;&gt;&gt; stack.push(&quot;c&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;b&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;a&quot;)\r\n        &gt;&gt;&gt; stack.pop() == &#x27;a&#x27;\r\n        True\r\n        &gt;&gt;&gt; stack.pop() == &#x27;b&#x27;\r\n        True\r\n        &gt;&gt;&gt; stack.pop() == &#x27;c&#x27;\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\r\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;pop from empty stack&quot;</span>)\r\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(self.top, Node)\r\n        pop_node = self.top\r\n        self.top = self.top.<span class=\"hljs-built_in\">next</span>\r\n        <span class=\"hljs-keyword\">return</span> pop_node.data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">peek</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.push(&quot;Java&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;C&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;Python&quot;)\r\n        &gt;&gt;&gt; stack.peek()\r\n        &#x27;Python&#x27;\r\n        &quot;&quot;&quot;</span>\r\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\r\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;peek from empty stack&quot;</span>)\r\n\r\n        <span class=\"hljs-keyword\">assert</span> self.top <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>\r\n        <span class=\"hljs-keyword\">return</span> self.top.data\r\n\r\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\r\n        <span class=\"hljs-string\">&quot;&quot;&quot;\r\n        &gt;&gt;&gt; stack = LinkedStack()\r\n        &gt;&gt;&gt; stack.push(&quot;Java&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;C&quot;)\r\n        &gt;&gt;&gt; stack.push(&quot;Python&quot;)\r\n        &gt;&gt;&gt; str(stack)\r\n        &#x27;Python-&gt;C-&gt;Java&#x27;\r\n        &gt;&gt;&gt; stack.clear()\r\n        &gt;&gt;&gt; len(stack) == 0\r\n        True\r\n        &quot;&quot;&quot;</span>\r\n        self.top = <span class=\"hljs-literal\">None</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\r\n\r\n    testmod()\r\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Ahmed Haj Abdel Khaleq",
      "email": "31858489+AhmedHaj@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Mariusz Skoneczko",
      "email": "mariusz@skoneczko.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
