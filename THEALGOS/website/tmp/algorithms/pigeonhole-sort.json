{
  "slug": "pigeonhole-sort",
  "name": "Pigeonhole Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/pigeonhole_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/pigeonhole_sort.py",
      "code": "<span class=\"hljs-comment\"># Python program to implement Pigeonhole Sorting in python</span>\n\n<span class=\"hljs-comment\"># Algorithm for the pigeonhole sorting</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">pigeonhole_sort</span>(<span class=\"hljs-params\">a</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; a = [8, 3, 2, 7, 4, 6, 8]\n    &gt;&gt;&gt; b = sorted(a)  # a nondestructive sort\n    &gt;&gt;&gt; pigeonhole_sort(a)  # a destructive sort\n    &gt;&gt;&gt; a == b\n    True\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># size of range of values in the list (ie, number of pigeonholes we need)</span>\n\n    min_val = <span class=\"hljs-built_in\">min</span>(a)  <span class=\"hljs-comment\"># min() finds the minimum value</span>\n    max_val = <span class=\"hljs-built_in\">max</span>(a)  <span class=\"hljs-comment\"># max() finds the maximum value</span>\n\n    size = max_val - min_val + <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># size is difference of max and min values plus one</span>\n\n    <span class=\"hljs-comment\"># list of pigeonholes of size equal to the variable size</span>\n    holes = [<span class=\"hljs-number\">0</span>] * size\n\n    <span class=\"hljs-comment\"># Populate the pigeonholes.</span>\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> a:\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(x, <span class=\"hljs-built_in\">int</span>), <span class=\"hljs-string\">&quot;integers only please&quot;</span>\n        holes[x - min_val] += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># Putting the elements back into the array in an order.</span>\n    i = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> count <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size):\n        <span class=\"hljs-keyword\">while</span> holes[count] &gt; <span class=\"hljs-number\">0</span>:\n            holes[count] -= <span class=\"hljs-number\">1</span>\n            a[i] = count + min_val\n            i += <span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    a = [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>]\n    pigeonhole_sort(a)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Sorted order is:&quot;</span>, <span class=\"hljs-string\">&quot; &quot;</span>.join(a))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "javascript": {
      "dir": "Sorts/PigeonHoleSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/PigeonHoleSort.js",
      "code": "<span class=\"hljs-comment\">/*\nhttps://en.wikipedia.org/wiki/Pigeonhole_sort\n\n*Pigeonhole sorting is a sorting algorithm that is suitable\n* for sorting lists of elements where the number of elements\n* (n) and the length of the range of possible key values (N)\n* are approximately the same.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">pigeonHoleSort</span> (arr) {\n  <span class=\"hljs-keyword\">let</span> min = arr[<span class=\"hljs-number\">0</span>]\n  <span class=\"hljs-keyword\">let</span> max = arr[<span class=\"hljs-number\">0</span>]\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (arr[i] &gt; max) { max = arr[i] }\n    <span class=\"hljs-keyword\">if</span> (arr[i] &lt; min) { min = arr[i] }\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(max)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(min)\n\n  <span class=\"hljs-keyword\">const</span> range = max - min + <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">const</span> pigeonhole = <span class=\"hljs-title class_\">Array</span>(range).<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-property\">length</span>; i++) {\n    pigeonhole[arr[i] - min]++\n  }\n\n  <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; range; j++) {\n    <span class=\"hljs-keyword\">while</span> (pigeonhole[j]-- &gt; <span class=\"hljs-number\">0</span>) {\n      arr[index++] = j + min\n    }\n  }\n}\n<span class=\"hljs-comment\">// Driver code</span>\n<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>]\n<span class=\"hljs-title function_\">pigeonHoleSort</span>(arr)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(arr)\n"
    },
    "c-plus-plus": {
      "dir": "sorting/pigeonhole_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/pigeonhole_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [Pigeonhole Sort algorithm]\n * (https://en.wikipedia.org/wiki/Pigeonhole_sort)\n * @author [Lownish](https://github.com/Lownish)\n * @details\n * Pigeonhole sorting is a sorting algorithm that is suitable for sorting lists\n * of elements where the number of elements and the number of possible key\n * values are approximately the same. It requires O(n + Range) time where n is\n * number of elements in input array and ‘Range’ is number of possible values in\n * array.\n *\n * The time Complexity of the algorithm is \\f$O(n+N)\\f$.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">//for std::is_sorted</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">//for std::array</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">//for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">//for io operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace sorting\n * @brief Sorting algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> sorting {\n\n<span class=\"hljs-comment\">/**\n * Pigeonhole sorting of array of size n\n * The function will sort the array through Pigeonhole algorithm and print\n * @param arr unsorted array of elements\n * @returns sorted array of elements\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;std::<span class=\"hljs-type\">size_t</span> N&gt;\n<span class=\"hljs-function\">std::array&lt;<span class=\"hljs-type\">int</span>, N&gt; <span class=\"hljs-title\">pigeonSort</span><span class=\"hljs-params\">(std::array&lt;<span class=\"hljs-type\">int</span>, N&gt; arr)</span> </span>{\n    <span class=\"hljs-comment\">// Finding min and max*</span>\n    <span class=\"hljs-keyword\">auto</span> min = std::<span class=\"hljs-built_in\">min_element</span>(std::<span class=\"hljs-built_in\">begin</span>(arr), std::<span class=\"hljs-built_in\">end</span>(arr));\n    <span class=\"hljs-keyword\">auto</span> max = std::<span class=\"hljs-built_in\">max_element</span>(std::<span class=\"hljs-built_in\">begin</span>(arr), std::<span class=\"hljs-built_in\">end</span>(arr));\n\n    <span class=\"hljs-comment\">// Range refers to the number of holes required</span>\n    <span class=\"hljs-type\">int</span> range = *max - *min + <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-type\">int</span> *hole = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[range]();\n\n    <span class=\"hljs-comment\">// Copying all array values to pigeonhole</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++) {\n        hole[arr[i] - *min] = arr[i];\n    }\n\n    <span class=\"hljs-comment\">// Deleting elements from list and storing to original array</span>\n    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; range; i++) {\n        <span class=\"hljs-keyword\">while</span> (hole[i] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>) {\n            arr[count] = hole[i];\n            hole[i] = {};\n            count++;\n        }\n    }\n    <span class=\"hljs-keyword\">delete</span>[] hole;\n\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-comment\">/**\n * Test function 1 with unsorted array\n * {8, 3, 2, 7, 4, 6, 8}\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_1</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">7</span>;\n    std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; test_array = {<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>};\n\n    test_array = sorting::<span class=\"hljs-built_in\">pigeonSort</span>&lt;n&gt;(test_array);\n\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(test_array), std::<span class=\"hljs-built_in\">end</span>(test_array)));\n\n    <span class=\"hljs-comment\">// Printing sorted array</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cout &lt;&lt; test_array.<span class=\"hljs-built_in\">at</span>(i) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Test function 2 with unsorted array\n * {802, 630, 20, 745, 52, 300, 612, 932, 78, 187}\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_2</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">10</span>;\n    std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; test_array = {<span class=\"hljs-number\">802</span>, <span class=\"hljs-number\">630</span>, <span class=\"hljs-number\">20</span>,  <span class=\"hljs-number\">745</span>, <span class=\"hljs-number\">52</span>,\n                                     <span class=\"hljs-number\">300</span>, <span class=\"hljs-number\">612</span>, <span class=\"hljs-number\">932</span>, <span class=\"hljs-number\">78</span>,  <span class=\"hljs-number\">187</span>};\n\n    test_array = sorting::<span class=\"hljs-built_in\">pigeonSort</span>&lt;n&gt;(test_array);\n\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(test_array), std::<span class=\"hljs-built_in\">end</span>(test_array)));\n\n    <span class=\"hljs-comment\">// Printing sorted array</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cout &lt;&lt; test_array.<span class=\"hljs-built_in\">at</span>(i) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Test function 1 with unsorted array\n * {11,13,12,14}\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_3</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">4</span>;\n    std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; test_array = {<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>};\n\n    test_array = sorting::<span class=\"hljs-built_in\">pigeonSort</span>&lt;n&gt;(test_array);\n\n    <span class=\"hljs-built_in\">assert</span>(std::<span class=\"hljs-built_in\">is_sorted</span>(std::<span class=\"hljs-built_in\">begin</span>(test_array), std::<span class=\"hljs-built_in\">end</span>(test_array)));\n\n    <span class=\"hljs-comment\">// Printing sorted array</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        std::cout &lt;&lt; test_array.<span class=\"hljs-built_in\">at</span>(i) &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nPassed\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test_1</span>();\n    <span class=\"hljs-built_in\">test_2</span>();\n    <span class=\"hljs-built_in\">test_3</span>();\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "sorting/pigeonhole_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/pigeonhole_sort.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">pigeonholeSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> size)</span>\n{\n    <span class=\"hljs-type\">int</span> i, j, min = arr[<span class=\"hljs-number\">0</span>], max = arr[<span class=\"hljs-number\">0</span>], range;\n\n    <span class=\"hljs-comment\">// Getting range of the array using max and min</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>; i &lt; size; i++)\n    {\n        <span class=\"hljs-keyword\">if</span> (arr[i] &lt; min)\n            min = arr[i];\n        <span class=\"hljs-keyword\">if</span> (arr[i] &gt; max)\n            max = arr[i];\n    }\n    range = max - min + <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">// Make &#x27;holes&#x27; and put array&#x27;s numbers in holes</span>\n    <span class=\"hljs-type\">int</span> *holes = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * range);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; range; i++)\n    {\n        holes[i] = <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        holes[arr[i] - min]++;\n    }\n\n    <span class=\"hljs-comment\">// Copy the numbers back to the original array</span>\n    j = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; range; i++)\n    {\n        <span class=\"hljs-keyword\">while</span> (holes[i] &gt; <span class=\"hljs-number\">0</span>)\n        {\n            arr[j] = i + min;\n            holes[i]--;\n            j++;\n        }\n    }\n\n    <span class=\"hljs-built_in\">free</span>(holes);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> i, n;\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the size of the array: &quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * n);\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number #%d: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;You entered:  &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\n    }\n    pigeonholeSort(arr, n);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nSorted array: &quot;</span>);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n    <span class=\"hljs-built_in\">free</span>(arr);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}"
    },
    "dart": {
      "dir": "sort/pigeonhole_sort.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/sort/pigeonhole_sort.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-keyword\">void</span> pigeonholeSort(<span class=\"hljs-built_in\">List</span> arr) {\n  <span class=\"hljs-comment\">//The length of the list</span>\n  <span class=\"hljs-built_in\">int</span> n = arr.length;\n\n  <span class=\"hljs-comment\">//checking the size</span>\n  <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-comment\">//Find minimum and maximum values in arr</span>\n  <span class=\"hljs-built_in\">int</span> min = arr[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-built_in\">int</span> max = arr[<span class=\"hljs-number\">0</span>];\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n    <span class=\"hljs-keyword\">if</span> (arr[i] &lt; min) min = arr[i];\n    <span class=\"hljs-keyword\">if</span> (arr[i] &gt; max) max = arr[i];\n  }\n\n  <span class=\"hljs-built_in\">int</span> range = max - min;\n  range++;\n\n  <span class=\"hljs-built_in\">List</span> phole = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>(range);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; range; i++) {\n    phole[i] = <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">//Populate the pigeonholes.</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n    phole[arr[i] - min];\n    phole[arr[i] - min] = phole[arr[i] - min] + <span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">//Put the elements back into the array in order</span>\n  <span class=\"hljs-built_in\">int</span> index = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; range; j++) <span class=\"hljs-keyword\">while</span> (phole[j]-- &gt; <span class=\"hljs-number\">0</span>) arr[index++] = j + min;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;Sort empty list returns empty list&quot;</span>, () {\n    <span class=\"hljs-built_in\">List</span> list = [];\n    pigeonholeSort(list);\n    expect(list, isEmpty);\n  });\n\n  test(<span class=\"hljs-string\">&quot;Already sorted list remain sorted&quot;</span>, () {\n    <span class=\"hljs-built_in\">List</span> list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n    pigeonholeSort(list);\n    expect(list, equals([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]));\n  });\n\n  test(<span class=\"hljs-string\">&quot;Sort&quot;</span>, () {\n    <span class=\"hljs-built_in\">List</span> list = [<span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">135</span>, <span class=\"hljs-number\">85</span>];\n    pigeonholeSort(list);\n    expect(list, equals([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">48</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">135</span>]));\n  });\n\n  test(<span class=\"hljs-string\">&quot;Sorted list size doesnt change&quot;</span>, () {\n    <span class=\"hljs-built_in\">List</span> list = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">77</span>];\n    pigeonholeSort(list);\n    expect(list.length, equals(<span class=\"hljs-number\">7</span>));\n    expect(list, [<span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">-12</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">77</span>]);\n  });\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Hiyabye",
      "email": "jihoon7373@gmail.com",
      "commits": 1
    },
    {
      "name": "Lownish Rai Sookha",
      "email": "69192570+Lownish@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Níkolas Vargas",
      "email": "vargasnikolass@gmail.com",
      "commits": 1
    },
    {
      "name": "SHAKTI SINGH",
      "email": "mohittanwar2323@gmail.com",
      "commits": 1
    },
    {
      "name": "Chris Kolonas",
      "email": "ckolonas@csd.auth.gr",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}
