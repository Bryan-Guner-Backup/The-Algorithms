{
  "slug": "knapsack",
  "name": "Knapsack",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "knapsack/knapsack.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/knapsack/knapsack.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot; A naive recursive implementation of 0-1 Knapsack Problem\n    https://en.wikipedia.org/wiki/Knapsack_problem\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">knapsack</span>(<span class=\"hljs-params\">capacity: <span class=\"hljs-built_in\">int</span>, weights: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], values: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], counter: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns the maximum value that can be put in a knapsack of a capacity cap,\n    whereby each weight w has a specific value val.\n\n    &gt;&gt;&gt; cap = 50\n    &gt;&gt;&gt; val = [60, 100, 120]\n    &gt;&gt;&gt; w = [10, 20, 30]\n    &gt;&gt;&gt; c = len(val)\n    &gt;&gt;&gt; knapsack(cap, w, val, c)\n    220\n\n    The result is 220 cause the values of 100 and 120 got the weight of 50\n    which is the limit of the capacity.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># Base Case</span>\n    <span class=\"hljs-keyword\">if</span> counter == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> capacity == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># If weight of the nth item is more than Knapsack of capacity,</span>\n    <span class=\"hljs-comment\">#   then this item cannot be included in the optimal solution,</span>\n    <span class=\"hljs-comment\"># else return the maximum of two cases:</span>\n    <span class=\"hljs-comment\">#   (1) nth item included</span>\n    <span class=\"hljs-comment\">#   (2) not included</span>\n    <span class=\"hljs-keyword\">if</span> weights[counter - <span class=\"hljs-number\">1</span>] &gt; capacity:\n        <span class=\"hljs-keyword\">return</span> knapsack(capacity, weights, values, counter - <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        left_capacity = capacity - weights[counter - <span class=\"hljs-number\">1</span>]\n        new_value_included = values[counter - <span class=\"hljs-number\">1</span>] + knapsack(\n            left_capacity, weights, values, counter - <span class=\"hljs-number\">1</span>\n        )\n        without_new_value = knapsack(capacity, weights, values, counter - <span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(new_value_included, without_new_value)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "greedy_algorithms/knapsack.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/greedy_algorithms/knapsack.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Item</span> {\n    <span class=\"hljs-type\">int</span> weight;\n    <span class=\"hljs-type\">int</span> profit;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">profitPerUnit</span><span class=\"hljs-params\">(Item x)</span> </span>{ <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">float</span>)x.profit / (<span class=\"hljs-type\">float</span>)x.weight; }\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">partition</span><span class=\"hljs-params\">(Item arr[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> </span>{\n    Item pivot = arr[high];  <span class=\"hljs-comment\">// pivot</span>\n    <span class=\"hljs-type\">int</span> i = (low - <span class=\"hljs-number\">1</span>);       <span class=\"hljs-comment\">// Index of smaller element</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = low; j &lt; high; j++) {\n        <span class=\"hljs-comment\">// If current element is smaller than or</span>\n        <span class=\"hljs-comment\">// equal to pivot</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">profitPerUnit</span>(arr[j]) &lt;= <span class=\"hljs-built_in\">profitPerUnit</span>(pivot)) {\n            i++;  <span class=\"hljs-comment\">// increment index of smaller element</span>\n            Item temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    Item temp = arr[i + <span class=\"hljs-number\">1</span>];\n    arr[i + <span class=\"hljs-number\">1</span>] = arr[high];\n    arr[high] = temp;\n    <span class=\"hljs-keyword\">return</span> (i + <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quickSort</span><span class=\"hljs-params\">(Item arr[], <span class=\"hljs-type\">int</span> low, <span class=\"hljs-type\">int</span> high)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (low &lt; high) {\n        <span class=\"hljs-type\">int</span> p = <span class=\"hljs-built_in\">partition</span>(arr, low, high);\n\n        <span class=\"hljs-built_in\">quickSort</span>(arr, low, p - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">quickSort</span>(arr, p + <span class=\"hljs-number\">1</span>, high);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the capacity of the knapsack : &quot;</span>;\n    <span class=\"hljs-type\">float</span> capacity;\n    cin &gt;&gt; capacity;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Enter the number of Items : &quot;</span>;\n    <span class=\"hljs-type\">int</span> n;\n    cin &gt;&gt; n;\n    Item itemArray[n];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the weight and profit of item &quot;</span> &lt;&lt; i + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">&quot; : &quot;</span>;\n        cin &gt;&gt; itemArray[i].weight;\n        cin &gt;&gt; itemArray[i].profit;\n    }\n\n    <span class=\"hljs-built_in\">quickSort</span>(itemArray, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-comment\">// show(itemArray, n);</span>\n\n    <span class=\"hljs-type\">float</span> maxProfit = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> i = n;\n    <span class=\"hljs-keyword\">while</span> (capacity &gt; <span class=\"hljs-number\">0</span> &amp;&amp; --i &gt;= <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">if</span> (capacity &gt;= itemArray[i].weight) {\n            maxProfit += itemArray[i].profit;\n            capacity -= itemArray[i].weight;\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t&quot;</span> &lt;&lt; itemArray[i].weight &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>\n                 &lt;&lt; itemArray[i].profit;\n        } <span class=\"hljs-keyword\">else</span> {\n            maxProfit += <span class=\"hljs-built_in\">profitPerUnit</span>(itemArray[i]) * capacity;\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n\\t&quot;</span> &lt;&lt; capacity &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>\n                 &lt;&lt; <span class=\"hljs-built_in\">profitPerUnit</span>(itemArray[i]) * capacity;\n            capacity = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nMax Profit : &quot;</span> &lt;&lt; maxProfit;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "java": {
      "dir": "DynamicProgramming/Knapsack.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DynamicProgramming/Knapsack.java",
      "code": "<span class=\"hljs-keyword\">package</span> DynamicProgramming;\n\n<span class=\"hljs-comment\">/** A DynamicProgramming based solution for 0-1 Knapsack problem */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Knapsack</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">knapSack</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> W, <span class=\"hljs-type\">int</span> wt[], <span class=\"hljs-type\">int</span> val[], <span class=\"hljs-type\">int</span> n)</span> <span class=\"hljs-keyword\">throws</span> IllegalArgumentException {\n    <span class=\"hljs-keyword\">if</span> (wt == <span class=\"hljs-literal\">null</span> || val == <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>();\n    <span class=\"hljs-type\">int</span> i, w;\n    <span class=\"hljs-type\">int</span> rv[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n + <span class=\"hljs-number\">1</span>][W + <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// rv means return value</span>\n\n    <span class=\"hljs-comment\">// Build table rv[][] in bottom up manner</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\n      <span class=\"hljs-keyword\">for</span> (w = <span class=\"hljs-number\">0</span>; w &lt;= W; w++) {\n        <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || w == <span class=\"hljs-number\">0</span>) rv[i][w] = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (wt[i - <span class=\"hljs-number\">1</span>] &lt;= w)\n          rv[i][w] = Math.max(val[i - <span class=\"hljs-number\">1</span>] + rv[i - <span class=\"hljs-number\">1</span>][w - wt[i - <span class=\"hljs-number\">1</span>]], rv[i - <span class=\"hljs-number\">1</span>][w]);\n        <span class=\"hljs-keyword\">else</span> rv[i][w] = rv[i - <span class=\"hljs-number\">1</span>][w];\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> rv[n][W];\n  }\n\n  <span class=\"hljs-comment\">// Driver program to test above function</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String args[])</span> {\n    <span class=\"hljs-type\">int</span> val[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">130</span>};\n    <span class=\"hljs-type\">int</span> wt[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[] {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">40</span>};\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">W</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">50</span>;\n    System.out.println(knapSack(W, wt, val, val.length));\n  }\n}\n"
    },
    "go": {
      "dir": "dynamicprogramming/knapsack.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/dynamicprogramming/knapsack.go",
      "code": "<span class=\"hljs-keyword\">package</span> dynamicprogramming\n\n<span class=\"hljs-comment\">// Knapsack Problem</span>\n<span class=\"hljs-comment\">// https://www.geeksforgeeks.org/0-1-knapsack-problem-dp-10/</span>\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;math&quot;</span>\n)\n\n<span class=\"hljs-comment\">// Max function - possible duplicate</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Max</span><span class=\"hljs-params\">(a, b <span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">int</span>(math.Max(<span class=\"hljs-keyword\">float64</span>(a), <span class=\"hljs-keyword\">float64</span>(b)))\n}\n\n<span class=\"hljs-comment\">// Solve knapsack problem</span>\n<span class=\"hljs-comment\">// return maxProfit</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Solve</span><span class=\"hljs-params\">(maxWeight <span class=\"hljs-keyword\">int</span>, weights, values []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\tn := <span class=\"hljs-built_in\">len</span>(weights)\n\tm := maxWeight\n\t<span class=\"hljs-comment\">// create dp data structure</span>\n\tdp := <span class=\"hljs-built_in\">make</span>([][]<span class=\"hljs-keyword\">int</span>, n+<span class=\"hljs-number\">1</span>)\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-keyword\">range</span> dp {\n\t\tdp[i] = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-keyword\">int</span>, m+<span class=\"hljs-number\">1</span>)\n\t}\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(weights); i++ {\n\t\t<span class=\"hljs-keyword\">for</span> j := <span class=\"hljs-number\">0</span>; j &lt;= maxWeight; j++ {\n\t\t\t<span class=\"hljs-keyword\">if</span> weights[i] &gt; j {\n\t\t\t\tdp[i+<span class=\"hljs-number\">1</span>][j] = dp[i][j]\n\t\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\t\tdp[i+<span class=\"hljs-number\">1</span>][j] = Max(dp[i][j-weights[i]]+values[i], dp[i][j])\n\t\t\t}\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> dp[n][m]\n}\n\n<span class=\"hljs-comment\">/*\nfunc main() {\n\tmaxWeight := 50\n\tvalues := []int{\n\t\t60, 100, 120,\n\t}\n\tweights := []int{\n\t\t10, 20, 30,\n\t}\n\tmaxProfit := solve(maxWeight, weights, values)\n\tfmt.Println(maxProfit)\n}\n*/</span>\n"
    },
    "rust": {
      "dir": "src/dynamic_programming/knapsack.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/dynamic_programming/knapsack.rs",
      "code": "<span class=\"hljs-comment\">//! Solves the knapsack problem</span>\n<span class=\"hljs-keyword\">use</span> std::cmp::max;\n\n<span class=\"hljs-comment\">/// knapsack_table(w, weights, values) returns the knapsack table (`n`, `m`) with maximum values, where `n` is number of items</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Arguments:</span>\n<span class=\"hljs-comment\">///     * `w` - knapsack capacity</span>\n<span class=\"hljs-comment\">///     * `weights` - set of weights for each item</span>\n<span class=\"hljs-comment\">///     * `values` - set of values for each item</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">knapsack_table</span>(w: &amp;<span class=\"hljs-type\">usize</span>, weights: &amp;[<span class=\"hljs-type\">usize</span>], values: &amp;[<span class=\"hljs-type\">usize</span>]) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;&gt; {\n    <span class=\"hljs-comment\">// Initialize `n` - number of items</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n</span>: <span class=\"hljs-type\">usize</span> = weights.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-comment\">// Initialize `m`</span>\n    <span class=\"hljs-comment\">// m[i, w] - the maximum value that can be attained with weight less that or equal to `w` using items up to `i`</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">m</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;&gt; = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>; w + <span class=\"hljs-number\">1</span>]; n + <span class=\"hljs-number\">1</span>];\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..=n {\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..=*w {\n            <span class=\"hljs-comment\">// m[i, j] compiled according to the following rule:</span>\n            <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> || j == <span class=\"hljs-number\">0</span> {\n                m[i][j] = <span class=\"hljs-number\">0</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> weights[i - <span class=\"hljs-number\">1</span>] &lt;= j {\n                <span class=\"hljs-comment\">// If `i` is in the knapsack</span>\n                <span class=\"hljs-comment\">// Then m[i, j] is equal to the maximum value of the knapsack,</span>\n                <span class=\"hljs-comment\">// where the weight `j` is reduced by the weight of the `i-th` item and the set of admissible items plus the value `k`</span>\n                m[i][j] = <span class=\"hljs-title function_ invoke__\">max</span>(values[i - <span class=\"hljs-number\">1</span>] + m[i - <span class=\"hljs-number\">1</span>][j - weights[i - <span class=\"hljs-number\">1</span>]], m[i - <span class=\"hljs-number\">1</span>][j]);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// If the item `i` did not get into the knapsack</span>\n                <span class=\"hljs-comment\">// Then m[i, j] is equal to the maximum cost of a knapsack with the same capacity and a set of admissible items</span>\n                m[i][j] = m[i - <span class=\"hljs-number\">1</span>][j]\n            }\n        }\n    }\n    m\n}\n\n<span class=\"hljs-comment\">/// knapsack_items(weights, m, i, j) returns the indices of the items of the optimal knapsack (from 1 to `n`)</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Arguments:</span>\n<span class=\"hljs-comment\">///     * `weights` - set of weights for each item</span>\n<span class=\"hljs-comment\">///     * `m` - knapsack table with maximum values</span>\n<span class=\"hljs-comment\">///     * `i` - include items 1 through `i` in knapsack (for the initial value, use `n`)</span>\n<span class=\"hljs-comment\">///     * `j` - maximum weight of the knapsack</span>\n<span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">knapsack_items</span>(weights: &amp;[<span class=\"hljs-type\">usize</span>], m: &amp;[<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;], i: <span class=\"hljs-type\">usize</span>, j: <span class=\"hljs-type\">usize</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">if</span> i == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">vec!</span>[];\n    }\n    <span class=\"hljs-keyword\">if</span> m[i][j] &gt; m[i - <span class=\"hljs-number\">1</span>][j] {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">knap</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-title function_ invoke__\">knapsack_items</span>(weights, m, i - <span class=\"hljs-number\">1</span>, j - weights[i - <span class=\"hljs-number\">1</span>]);\n        knap.<span class=\"hljs-title function_ invoke__\">push</span>(i);\n        knap\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-title function_ invoke__\">knapsack_items</span>(weights, m, i - <span class=\"hljs-number\">1</span>, j)\n    }\n}\n\n<span class=\"hljs-comment\">/// knapsack(w, weights, values) returns the tuple where first value is `optimal profit`,</span>\n<span class=\"hljs-comment\">/// second value is `knapsack optimal weight` and the last value is `indices of items`, that we got (from 1 to `n`)</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Arguments:</span>\n<span class=\"hljs-comment\">///     * `w` - knapsack capacity</span>\n<span class=\"hljs-comment\">///     * `weights` - set of weights for each item</span>\n<span class=\"hljs-comment\">///     * `values` - set of values for each item</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// Complexity</span>\n<span class=\"hljs-comment\">///     - time complexity: O(nw),</span>\n<span class=\"hljs-comment\">///     - space complexity: O(nw),</span>\n<span class=\"hljs-comment\">///</span>\n<span class=\"hljs-comment\">/// where `n` and `w` are `number of items` and `knapsack capacity`</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">knapsack</span>(w: <span class=\"hljs-type\">usize</span>, weights: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;, values: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;) <span class=\"hljs-punctuation\">-&gt;</span> (<span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">usize</span>, <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;) {\n    <span class=\"hljs-comment\">// Checks if the number of items in the list of weights is the same as the number of items in the list of values</span>\n    <span class=\"hljs-built_in\">assert_eq!</span>(weights.<span class=\"hljs-title function_ invoke__\">len</span>(), values.<span class=\"hljs-title function_ invoke__\">len</span>(), <span class=\"hljs-string\">&quot;Number of items in the list of weights doesn&#x27;t match the number of items in the list of values!&quot;</span>);\n    <span class=\"hljs-comment\">// Initialize `n` - number of items</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">n</span>: <span class=\"hljs-type\">usize</span> = weights.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-comment\">// Find the knapsack table</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">m</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt;&gt; = <span class=\"hljs-title function_ invoke__\">knapsack_table</span>(&amp;w, &amp;weights, &amp;values);\n    <span class=\"hljs-comment\">// Find the indices of the items</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">items</span>: <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; = <span class=\"hljs-title function_ invoke__\">knapsack_items</span>(&amp;weights, &amp;m, n, w);\n    <span class=\"hljs-comment\">// Find the total weight of optimal knapsack</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">total_weight</span>: <span class=\"hljs-type\">usize</span> = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> items.<span class=\"hljs-title function_ invoke__\">iter</span>() {\n        total_weight += weights[i - <span class=\"hljs-number\">1</span>];\n    }\n    <span class=\"hljs-comment\">// Return result</span>\n    (m[n][w], total_weight, items)\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-comment\">// Took test datasets from https://people.sc.fsu.edu/~jburkardt/datasets/bin_packing/bin_packing.html</span>\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_p02</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            (<span class=\"hljs-number\">51</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]),\n            <span class=\"hljs-title function_ invoke__\">knapsack</span>(<span class=\"hljs-number\">26</span>, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>], <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">16</span>])\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_p04</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            (<span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">190</span>, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>]),\n            <span class=\"hljs-title function_ invoke__\">knapsack</span>(\n                <span class=\"hljs-number\">190</span>,\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">17</span>],\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">46</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">5</span>]\n            )\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_p01</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            (<span class=\"hljs-number\">309</span>, <span class=\"hljs-number\">165</span>, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>]),\n            <span class=\"hljs-title function_ invoke__\">knapsack</span>(\n                <span class=\"hljs-number\">165</span>,\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">44</span>, <span class=\"hljs-number\">53</span>, <span class=\"hljs-number\">38</span>, <span class=\"hljs-number\">63</span>, <span class=\"hljs-number\">85</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">82</span>],\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">92</span>, <span class=\"hljs-number\">57</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">68</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">84</span>, <span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">72</span>]\n            )\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_p06</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            (<span class=\"hljs-number\">1735</span>, <span class=\"hljs-number\">169</span>, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>]),\n            <span class=\"hljs-title function_ invoke__\">knapsack</span>(\n                <span class=\"hljs-number\">170</span>,\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">41</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">55</span>, <span class=\"hljs-number\">57</span>, <span class=\"hljs-number\">60</span>],\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">442</span>, <span class=\"hljs-number\">525</span>, <span class=\"hljs-number\">511</span>, <span class=\"hljs-number\">593</span>, <span class=\"hljs-number\">546</span>, <span class=\"hljs-number\">564</span>, <span class=\"hljs-number\">617</span>]\n            )\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_p07</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            (<span class=\"hljs-number\">1458</span>, <span class=\"hljs-number\">749</span>, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">15</span>]),\n            <span class=\"hljs-title function_ invoke__\">knapsack</span>(\n                <span class=\"hljs-number\">750</span>,\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">73</span>, <span class=\"hljs-number\">77</span>, <span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">82</span>, <span class=\"hljs-number\">87</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">94</span>, <span class=\"hljs-number\">98</span>, <span class=\"hljs-number\">106</span>, <span class=\"hljs-number\">110</span>, <span class=\"hljs-number\">113</span>, <span class=\"hljs-number\">115</span>, <span class=\"hljs-number\">118</span>, <span class=\"hljs-number\">120</span>],\n                <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">135</span>, <span class=\"hljs-number\">139</span>, <span class=\"hljs-number\">149</span>, <span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">156</span>, <span class=\"hljs-number\">163</span>, <span class=\"hljs-number\">173</span>, <span class=\"hljs-number\">184</span>, <span class=\"hljs-number\">192</span>, <span class=\"hljs-number\">201</span>, <span class=\"hljs-number\">210</span>, <span class=\"hljs-number\">214</span>, <span class=\"hljs-number\">221</span>, <span class=\"hljs-number\">229</span>, <span class=\"hljs-number\">240</span>]\n            )\n        );\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Egor Bronnikov",
      "email": "52889537+endygamedev@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Jean-Francois Baffier",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "73381027+Rratic@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "rxaru",
      "email": "ai.kanaria.ai@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Serwio YK",
      "email": "56473255+Serwios@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "qwerty50000a",
      "email": "37273442+qwerty50000a@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Deepak",
      "email": "deepakkumar180997@gmail.com",
      "commits": 1
    },
    {
      "name": "pkdism",
      "email": "pawan.dwivedi94@gmail.com",
      "commits": 1
    },
    {
      "name": "Tobias Schröder",
      "email": "5970416+tbsschroeder@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maxwell Aladago",
      "email": "maxwell.aladago@gmail.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "dhruvsaini",
      "email": "dhruv_saini@outlook.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "bharath-123",
      "email": "vedabharath12345@gmail.com",
      "commits": 4
    },
    {
      "name": "Anup Kumar Panwar",
      "email": "1anuppanwar@gmail.com",
      "commits": 8
    }
  ],
  "explanationUrl": {}
}
