{
  "slug": "kmp-substring-search",
  "name": "Kmp Substring Search",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "julia": {
      "dir": "src/strings/kmp_substring_search.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/strings/kmp_substring_search.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    GetIndexWithKMP(string::String, sub_string::String, ignore_case::Bool)::Int\n\nFind if a string contain a given sub string with KMP Search, as an explanation might be too lengthy\nAs such, a detailed explanation can be found at https://towardsdatascience.com/pattern-search-with-the-knuth-morris-pratt-kmp-algorithm-8562407dba5b\n\n\nQuestions and answers\n1. Why KMP instead of naive search?\n- Given n = length of string , m = length of string P\n- Then, the naive search will have time complexity O(mn) to find all occurrences of pattern P in S\n- However, knuth-morris-pratt (KMP) algorithm will have tim complexity of O(m+n) to find all occurrences of pattern P in S\n- Hence, KMP is more efficient than the naive approach\n\n\nExample\n\n```julia\nGetIndexWithKMP(&quot;Hello I am Gervin&quot;, &quot;Hello I am Gervin&quot;, false) # returns 1\nGetIndexWithKMP(&quot;ABABDABACDABABCABAB&quot;, &quot;ABABCABAB&quot;, false) # returns 11\nGetIndexWithKMP(&quot;SeEms Like IgNOrE CaSe Work&quot;, &quot;seems like ignore case work&quot;, true) # returns 1\n```\n\nContributed By:- [Gervin Fung](https://github.com/GervinFung)\nNote: This function will also allow ignoring cases also\n\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-comment\"># by convention -1 will be returned if the string does not contain the sub-string given</span>\n<span class=\"hljs-comment\"># in this case, 0 will be returned for Julia with start index of 1</span>\n<span class=\"hljs-comment\"># reason is that -1 is for language with start index of 0</span>\n<span class=\"hljs-comment\"># Should be convenient for others as most programming language use -1 if the string does not contain the sub-string given</span>\n<span class=\"hljs-keyword\">const</span> NO_SUBSTRING_INDEX = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 1 is the first index, unlike others, where 0 is the first index</span>\n<span class=\"hljs-comment\"># Should be convenient for others as most programming language use 0 as first index</span>\n<span class=\"hljs-keyword\">const</span> JULIA_FIRST_INDEX = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">function</span> CreateSuffixArray(pattern_length::<span class=\"hljs-built_in\">Int</span>, sub_string::<span class=\"hljs-built_in\">String</span>)::<span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>}\n\n    <span class=\"hljs-comment\"># Longest Proper Prefix which is Suffix array</span>\n    lps::<span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>} = ones(<span class=\"hljs-built_in\">Int</span>, pattern_length)\n\n    index::<span class=\"hljs-built_in\">Int</span> = JULIA_FIRST_INDEX\n    i::<span class=\"hljs-built_in\">Int</span> = <span class=\"hljs-number\">1</span> + JULIA_FIRST_INDEX\n\n    <span class=\"hljs-keyword\">while</span> (i &lt; pattern_length)\n        <span class=\"hljs-keyword\">if</span> sub_string[i] == sub_string[index]\n            lps[i] = index + <span class=\"hljs-number\">1</span>;\n            index += <span class=\"hljs-number\">1</span>;\n            i += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">if</span> index != <span class=\"hljs-number\">1</span>\n                index = lps[index - <span class=\"hljs-number\">1</span>]\n            <span class=\"hljs-keyword\">else</span>\n                lps[i] = <span class=\"hljs-number\">1</span>\n                i += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">return</span> lps\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># this function will be used to obtain the index which the substring was found</span>\n<span class=\"hljs-keyword\">function</span> GetIndexWithKMP(string::<span class=\"hljs-built_in\">String</span>, sub_string::<span class=\"hljs-built_in\">String</span>, ignore_case::<span class=\"hljs-built_in\">Bool</span>)::<span class=\"hljs-built_in\">Int</span>\n\n    string = ignore_case ? lowercase(string) : string\n    sub_string = ignore_case ? lowercase(sub_string) : sub_string\n\n    string_length::<span class=\"hljs-built_in\">Int</span> = length(string)\n    substring_length::<span class=\"hljs-built_in\">Int</span> = length(sub_string)\n\n    lps::<span class=\"hljs-built_in\">Vector</span>{<span class=\"hljs-built_in\">Int</span>} = CreateSuffixArray(substring_length, sub_string)\n\n    <span class=\"hljs-comment\"># likewise, 1 is the first index, unlike others, where 0 is the first index</span>\n    i::<span class=\"hljs-built_in\">Int</span> = JULIA_FIRST_INDEX\n    j::<span class=\"hljs-built_in\">Int</span> = JULIA_FIRST_INDEX\n\n    <span class=\"hljs-keyword\">while</span> i &lt; string_length + <span class=\"hljs-number\">1</span> &amp;&amp; j &lt; substring_length + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> string[i] == sub_string[j]\n            i += <span class=\"hljs-number\">1</span>\n            j += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">if</span> j != <span class=\"hljs-number\">1</span>\n                j = lps[j - <span class=\"hljs-number\">1</span>]\n            <span class=\"hljs-keyword\">else</span>\n                i += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-keyword\">return</span> j == substring_length + <span class=\"hljs-number\">1</span> ? i - j + <span class=\"hljs-number\">1</span> : NO_SUBSTRING_INDEX\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\"># optional function that returns boolean if string does contain the sub-string given</span>\n<span class=\"hljs-keyword\">function</span> ContainSubstringWithKMP(string::<span class=\"hljs-built_in\">String</span>, sub_string::<span class=\"hljs-built_in\">String</span>, ignore_case::<span class=\"hljs-built_in\">Bool</span>)::<span class=\"hljs-built_in\">Bool</span>\n    <span class=\"hljs-keyword\">return</span> GetIndexWithKMP(string, sub_string, ignore_case) != NO_SUBSTRING_INDEX\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "PoolOfDeath20",
      "email": "53143214+GervinFung@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "PoolOfDeath20",
      "email": "gervinfungdaxuen@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
