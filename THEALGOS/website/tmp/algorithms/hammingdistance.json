{
  "slug": "hammingdistance",
  "name": "HammingDistance",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "String/HammingDistance.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/String/HammingDistance.js",
      "code": "<span class=\"hljs-comment\">/**\n * Hamming Distance: https://en.wikipedia.org/wiki/Hamming_distance\n *\n *\n * Hamming distance is a metric for comparing two binary data strings.\n *\n * While comparing two binary strings of equal length, Hamming distance\n * is the number of bit positions in which the two bits are different.\n * The Hamming distance between two strings, a and b is denoted as d(a,b)\n */</span>\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">a</span>\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} <span class=\"hljs-variable\">b</span>\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">number</span>}\n */</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">hammingDistance</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (a.<span class=\"hljs-property\">length</span> !== b.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;Strings must be of the same length&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">let</span> distance = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; a.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">if</span> (a[i] !== b[i]) {\n      distance += <span class=\"hljs-number\">1</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> distance\n}\n"
    },
    "c-plus-plus": {
      "dir": "bit_manipulation/hamming_distance.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/bit_manipulation/hamming_distance.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Returns the [Hamming\n * distance](https://en.wikipedia.org/wiki/Hamming_distance) between two\n * integers\n *\n * @details\n * To find hamming distance between two integers, we take their xor, which will\n * have a set bit iff those bits differ in the two numbers.\n * Hence, we return the number of such set bits.\n *\n * @author [Ravishankar Joshi](https://github.com/ravibitsgoa)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace bit_manipulation\n * @brief Bit Manipulation algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> bit_manipulation {\n<span class=\"hljs-comment\">/**\n * @namespace hamming_distance\n * @brief Functions for [Hamming\n * distance](https://en.wikipedia.org/wiki/Hamming_distance) implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> hamming_distance {\n<span class=\"hljs-comment\">/**\n * This function returns the number of set bits in the given number.\n * @param value the number of which we want to count the number of set bits.\n * @returns the number of set bits in the given number.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">bitCount</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> value)</span> </span>{\n    <span class=\"hljs-type\">uint64_t</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (value) {       <span class=\"hljs-comment\">// until all bits are zero</span>\n        <span class=\"hljs-keyword\">if</span> (value &amp; <span class=\"hljs-number\">1</span>) {  <span class=\"hljs-comment\">// check lower bit</span>\n            count++;\n        }\n        value &gt;&gt;= <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// shift bits, removing lower bit</span>\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n}\n\n<span class=\"hljs-comment\">/**\n * This function returns the hamming distance between two integers.\n * @param a the first number\n * @param b the second number\n * @returns the number of bits differing between the two integers.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">hamming_distance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">uint64_t</span> a, <span class=\"hljs-type\">uint64_t</span> b)</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">bitCount</span>(a ^ b); }\n\n<span class=\"hljs-comment\">/**\n * This function returns the hamming distance between two strings.\n * @param a the first string\n * @param b the second string\n * @returns the number of characters differing between the two strings.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">hamming_distance</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string&amp; a, <span class=\"hljs-keyword\">const</span> std::string&amp; b)</span> </span>{\n    <span class=\"hljs-built_in\">assert</span>(a.<span class=\"hljs-built_in\">size</span>() == b.<span class=\"hljs-built_in\">size</span>());\n    <span class=\"hljs-type\">size_t</span> n = a.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-type\">uint64_t</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        count += (b[i] != a[i]);\n    }\n    <span class=\"hljs-keyword\">return</span> count;\n}\n}  <span class=\"hljs-comment\">// namespace hamming_distance</span>\n}  <span class=\"hljs-comment\">// namespace bit_manipulation</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function to the test hamming distance.\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-number\">3</span>);\n\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;1101&quot;</span>,\n                                                                <span class=\"hljs-string\">&quot;1111&quot;</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;1111&quot;</span>,\n                                                                <span class=\"hljs-string\">&quot;1111&quot;</span>) == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;0000&quot;</span>,\n                                                                <span class=\"hljs-string\">&quot;1111&quot;</span>) == <span class=\"hljs-number\">4</span>);\n\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;alpha&quot;</span>,\n                                                                <span class=\"hljs-string\">&quot;alphb&quot;</span>) == <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;abcd&quot;</span>,\n                                                                <span class=\"hljs-string\">&quot;abcd&quot;</span>) == <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">assert</span>(bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(<span class=\"hljs-string\">&quot;dcba&quot;</span>,\n                                                                <span class=\"hljs-string\">&quot;abcd&quot;</span>) == <span class=\"hljs-number\">4</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();           <span class=\"hljs-comment\">// execute the tests</span>\n    <span class=\"hljs-type\">uint64_t</span> a = <span class=\"hljs-number\">11</span>;  <span class=\"hljs-comment\">// 1011 in binary</span>\n    <span class=\"hljs-type\">uint64_t</span> b = <span class=\"hljs-number\">2</span>;   <span class=\"hljs-comment\">// 0010 in binary</span>\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Hamming distance between &quot;</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-string\">&quot; and &quot;</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-string\">&quot; is &quot;</span>\n              &lt;&lt; bit_manipulation::hamming_distance::<span class=\"hljs-built_in\">hamming_distance</span>(a, b)\n              &lt;&lt; std::endl;\n}\n"
    },
    "dart": {
      "dir": "maths/hamming_distance.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/hamming_distance.dart",
      "code": "<span class=\"hljs-comment\">// The Hamming distance between two strings of equal length is</span>\n<span class=\"hljs-comment\">// the number of positions at which the corresponding symbols are different.</span>\n<span class=\"hljs-comment\">// https://en.wikipedia.org/wiki/Hamming_distance</span>\n\n<span class=\"hljs-built_in\">int</span> hamming_distance(<span class=\"hljs-built_in\">String</span> stringA, <span class=\"hljs-built_in\">String</span> stringB) {\n  <span class=\"hljs-comment\">//Calculates Hamming Distance</span>\n  <span class=\"hljs-built_in\">int</span> distance;\n\n  <span class=\"hljs-comment\">//strings must be of equal length</span>\n  <span class=\"hljs-keyword\">if</span> (stringA.length != stringB.length) {\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;String lengths must be same!&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n  } <span class=\"hljs-keyword\">else</span> {\n    distance = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; stringA.length; i++) {\n      <span class=\"hljs-keyword\">if</span> (stringA[i] != stringB[i]) {\n        distance += <span class=\"hljs-number\">1</span>;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> distance;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-built_in\">String</span> stringA;\n  <span class=\"hljs-built_in\">String</span> stringB;\n  <span class=\"hljs-built_in\">int</span> dist;\n\n  stringA = <span class=\"hljs-string\">&#x27;karolin&#x27;</span>;\n  stringB = <span class=\"hljs-string\">&#x27;kathrin&#x27;</span>;\n  dist = hamming_distance(stringA, stringB);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Hamming Distance between <span class=\"hljs-subst\">$stringA</span> and <span class=\"hljs-subst\">$stringB</span> is <span class=\"hljs-subst\">$dist</span>&#x27;</span>);\n\n  stringA = <span class=\"hljs-string\">&#x27;1011101&#x27;</span>;\n  stringB = <span class=\"hljs-string\">&#x27;1001001&#x27;</span>;\n  dist = hamming_distance(stringA, stringB);\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Hamming Distance between <span class=\"hljs-subst\">$stringA</span> and <span class=\"hljs-subst\">$stringB</span> is <span class=\"hljs-subst\">$dist</span>&#x27;</span>);\n}\n"
    }
  },
  "contributors": [
    {
      "name": "cozek",
      "email": "kaushikamardas@gmail.com",
      "commits": 1
    },
    {
      "name": "Shivam Verma",
      "email": "50954641+sarcastic-verma@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Ravishankar Joshi",
      "email": "21024229+ravibitsgoa@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "AbhinavXT",
      "email": "abhinavpathaka17@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
