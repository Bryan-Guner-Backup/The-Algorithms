{
  "slug": "n-queens-all-solution-optimised",
  "name": "N Queens All Solution Optimised",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "backtracking/n_queens_all_solution_optimised.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/n_queens_all_solution_optimised.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [N queens](https://en.wikipedia.org/wiki/Eight_queens_puzzle) all\n * optimized\n *\n * @author [Sombit Bose](https://github.com/deadshotsb)\n * @author [David Leal](https://github.com/Panquesito7)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n<span class=\"hljs-comment\">/**\n * @namespace n_queens_optimized\n * @brief Functions for [Eight\n * Queens](https://en.wikipedia.org/wiki/Eight_queens_puzzle) puzzle optimized.\n */</span>\n<span class=\"hljs-keyword\">namespace</span> n_queens_optimized {\n<span class=\"hljs-comment\">/**\n * Utility function to print matrix\n * @tparam n number of matrix size\n * @param board matrix where numbers are saved\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">PrintSol</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; &amp;board)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\n            std::cout &lt;&lt; board[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span> || (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span> &amp;&amp; board[n / <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] != <span class=\"hljs-number\">1</span>)) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; n; j++) {\n                std::cout &lt;&lt; board[j][i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n            }\n            std::cout &lt;&lt; std::endl;\n        }\n        std::cout &lt;&lt; std::endl;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Check if a queen can be placed on matrix\n * @tparam n number of matrix size\n * @param board matrix where numbers are saved\n * @param row current index in rows\n * @param col current index in columns\n * @returns `true` if queen can be placed on matrix\n * @returns `false` if queen can&#x27;t be placed on matrix\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">CanIMove</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; &amp;board, <span class=\"hljs-type\">int</span> row,\n              <span class=\"hljs-type\">int</span> col)</span> </span>{\n    <span class=\"hljs-comment\">/// check in the row</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= col; i++) {\n        <span class=\"hljs-keyword\">if</span> (board[row][i] == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-comment\">/// check the first diagonal</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = row, j = col; i &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>; i--, j--) {\n        <span class=\"hljs-keyword\">if</span> (board[i][j] == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-comment\">/// check the second diagonal</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = row, j = col; i &lt;= n - <span class=\"hljs-number\">1</span> &amp;&amp; j &gt;= <span class=\"hljs-number\">0</span>; i++, j--) {\n        <span class=\"hljs-keyword\">if</span> (board[i][j] == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Solve n queens problem\n * @tparam n number of matrix size\n * @param board matrix where numbers are saved\n * @param col current index in columns\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">NQueenSol</span><span class=\"hljs-params\">(std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; board, <span class=\"hljs-type\">int</span> col)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (col &gt;= n) {\n        <span class=\"hljs-built_in\">PrintSol</span>&lt;n&gt;(board);\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">CanIMove</span>&lt;n&gt;(board, i, col)) {\n            board[i][col] = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-built_in\">NQueenSol</span>&lt;n&gt;(board, col + <span class=\"hljs-number\">1</span>);\n            board[i][col] = <span class=\"hljs-number\">0</span>;\n        }\n    }\n}\n}  <span class=\"hljs-comment\">// namespace n_queens_optimized</span>\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> n = <span class=\"hljs-number\">4</span>;\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">int</span>, n&gt;, n&gt; board{};\n\n    <span class=\"hljs-keyword\">if</span> (n % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= n / <span class=\"hljs-number\">2</span> - <span class=\"hljs-number\">1</span>; i++) {  <span class=\"hljs-comment\">// üòé</span>\n            <span class=\"hljs-keyword\">if</span> (backtracking::n_queens_optimized::<span class=\"hljs-built_in\">CanIMove</span>(board, i, <span class=\"hljs-number\">0</span>)) {\n                board[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n                backtracking::n_queens_optimized::<span class=\"hljs-built_in\">NQueenSol</span>(board, <span class=\"hljs-number\">1</span>);\n                board[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\n            }\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= n / <span class=\"hljs-number\">2</span>; i++) {  <span class=\"hljs-comment\">// üòè</span>\n            <span class=\"hljs-keyword\">if</span> (backtracking::n_queens_optimized::<span class=\"hljs-built_in\">CanIMove</span>(board, i, <span class=\"hljs-number\">0</span>)) {\n                board[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n                backtracking::n_queens_optimized::<span class=\"hljs-built_in\">NQueenSol</span>(board, <span class=\"hljs-number\">1</span>);\n                board[i][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Sombit Bose",
      "email": "sombit.bose15@gmail.com",
      "commits": 5
    }
  ],
  "explanationUrl": {}
}
