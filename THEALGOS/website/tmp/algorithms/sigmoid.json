{
  "slug": "sigmoid",
  "name": "Sigmoid",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/sigmoid.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/sigmoid.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis script demonstrates the implementation of the Sigmoid function.\n\nThe function takes a vector of K real numbers as input and then 1 / (1 + exp(-x)).\nAfter through Sigmoid, the element of the vector mostly 0 between 1. or 1 between -1.\n\nScript inspired from its corresponding Wikipedia article\nhttps://en.wikipedia.org/wiki/Sigmoid_function\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">sigmoid</span>(<span class=\"hljs-params\">vector: np.array</span>) -&gt; np.array:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Implements the sigmoid function\n\n    Parameters:\n        vector (np.array): A  numpy array of shape (1,n)\n        consisting of real values\n\n    Returns:\n        sigmoid_vec (np.array): The input numpy array, after applying\n        sigmoid.\n\n    Examples:\n    &gt;&gt;&gt; sigmoid(np.array([-1.0, 1.0, 2.0]))\n    array([0.26894142, 0.73105858, 0.88079708])\n\n    &gt;&gt;&gt; sigmoid(np.array([0.0]))\n    array([0.5])\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / (<span class=\"hljs-number\">1</span> + np.exp(-vector))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "dart": {
      "dir": "maths/sigmoid.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/sigmoid.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;dart:math&#x27;</span>;\n\n<span class=\"hljs-built_in\">double</span> sigmoid(\n    <span class=\"hljs-built_in\">double</span> x, <span class=\"hljs-built_in\">double</span> a) <span class=\"hljs-comment\">//x is the function variable and a is the gain</span>\n{\n  <span class=\"hljs-built_in\">double</span> p = exp(-a * x);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> / (<span class=\"hljs-number\">1</span> + p);\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-built_in\">double</span> gain = <span class=\"hljs-number\">1.00</span>, x = <span class=\"hljs-number\">0.5</span>;\n  <span class=\"hljs-built_in\">double</span> p = sigmoid(x, gain);\n  <span class=\"hljs-built_in\">print</span>(p);\n}\n"
    },
    "matlab-octave": {
      "dir": "algorithms/machine_learning/Logistic-Regression/Sigmoid.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/machine_learning/Logistic-Regression/Sigmoid.m",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">G</span> = <span class=\"hljs-title\">Sigmoid</span><span class=\"hljs-params\">(Z)</span></span>\n \nG = <span class=\"hljs-built_in\">zeros</span>(<span class=\"hljs-built_in\">size</span>(Z));\n\na = <span class=\"hljs-built_in\">size</span>(Z);\n\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : a(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>),\n\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-number\">1</span> : a(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>),\n\n        G(<span class=\"hljs-built_in\">i</span>, <span class=\"hljs-built_in\">j</span>) = <span class=\"hljs-number\">1</span> / (<span class=\"hljs-number\">1</span> + e.^-Z(<span class=\"hljs-built_in\">i</span>, <span class=\"hljs-built_in\">j</span>));\n\n    <span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">end</span>"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Abhishek Maletha",
      "email": "67141747+Abhishek-photon@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anesh Kaul",
      "email": "aneshkaul@gmail.com",
      "commits": 1
    },
    {
      "name": "sukyung99",
      "email": "44187128+sukyung99@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
