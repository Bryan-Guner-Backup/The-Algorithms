{
  "slug": "jewels-and-stones",
  "name": "Jewels and Stones",
  "categories": ["datastructures", "array", "strings"],
  "body": {},
  "implementations": {
    "ruby": {
      "dir": "data_structures/arrays/strings/jewels_and_stones.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/data_structures/arrays/strings/jewels_and_stones.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Jewels and Stones</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># You&#x27;re given strings jewels representing the types of stones that are jewels,</span>\n<span class=\"hljs-comment\"># and stones representing the stones you have. Each character in stones is a type</span>\n<span class=\"hljs-comment\"># of stone you have. You want to know how many of the stones you have are also</span>\n<span class=\"hljs-comment\"># jewels.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Letters are case sensitive, so &quot;a&quot; is considered a different type of stone from &quot;A&quot;.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 1:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: jewels = &quot;aA&quot;, stones = &quot;aAAbbbb&quot;</span>\n<span class=\"hljs-comment\"># Output: 3</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Example 2:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Input: jewels = &quot;z&quot;, stones = &quot;ZZ&quot;</span>\n<span class=\"hljs-comment\"># Output: 0</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Constraints:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># 1 &lt;= jewels.length, stones.length &lt;= 50</span>\n<span class=\"hljs-comment\"># jewels and stones consist of only English letters.</span>\n<span class=\"hljs-comment\"># All the characters of jewels are unique.</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 1: Brute Force</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n^2)</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_jewels</span><span class=\"hljs-params\">(jewels, stones)</span></span> \n  jewels_array = jewels.split(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  stones_array = stones.split(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  result = <span class=\"hljs-number\">0</span>\n  jewels_array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|jewel|</span>\n    stones_array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|stone|</span>\n      <span class=\"hljs-keyword\">if</span> jewel == stone\n        result += <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-keyword\">end</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n  result\n<span class=\"hljs-keyword\">end</span>\n\nputs find_jewels(<span class=\"hljs-string\">&quot;aA&quot;</span>, <span class=\"hljs-string\">&quot;aAAbbbb&quot;</span>)\n<span class=\"hljs-comment\"># =&gt; 3</span>\nputs find_jewels(<span class=\"hljs-string\">&quot;z&quot;</span>, <span class=\"hljs-string\">&quot;ZZ&quot;</span>)\n<span class=\"hljs-comment\"># =&gt; 0</span>\n\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Approach 2: Hash</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time Complexity: O(n)</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">find_jewels</span><span class=\"hljs-params\">(jewels, stones)</span></span>\n  jewels_array = jewels.split(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  stones_array = stones.split(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  result_hash = {}\n  result = <span class=\"hljs-number\">0</span>\n\n  stones_array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|stone|</span>\n    <span class=\"hljs-keyword\">if</span> result_hash[stone] \n      result_hash[stone] += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>\n      result_hash[stone] = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  jewels_array.each <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|jewel|</span>\n    <span class=\"hljs-keyword\">if</span> result_hash[jewel]\n      result += result_hash[jewel]\n    <span class=\"hljs-keyword\">else</span>\n      result\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  result\n<span class=\"hljs-keyword\">end</span>\n\nputs find_jewels(<span class=\"hljs-string\">&quot;aA&quot;</span>, <span class=\"hljs-string\">&quot;aAAbbbb&quot;</span>)\n<span class=\"hljs-comment\"># =&gt; 3</span>\nputs find_jewels(<span class=\"hljs-string\">&quot;z&quot;</span>, <span class=\"hljs-string\">&quot;ZZ&quot;</span>)\n<span class=\"hljs-comment\"># =&gt; 0</span>"
    }
  },
  "contributors": [
    {
      "name": "Jessica Kwok",
      "email": "jessicatckwok@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
