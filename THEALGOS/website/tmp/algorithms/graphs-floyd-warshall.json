{
  "slug": "graphs-floyd-warshall",
  "name": "Graphs Floyd Warshall",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/graphs_floyd_warshall.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/graphs_floyd_warshall.py",
      "code": "<span class=\"hljs-comment\"># floyd_warshall.py</span>\n<span class=\"hljs-string\">&quot;&quot;&quot;\n    The problem is to find the shortest distance between all pairs of vertices in a\n    weighted directed graph that can have negative edge weights.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_print_dist</span>(<span class=\"hljs-params\">dist, v</span>):\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nThe shortest path matrix using Floyd Warshall algorithm\\n&quot;</span>)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v):\n            <span class=\"hljs-keyword\">if</span> dist[i][j] != <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>):\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">int</span>(dist[i][j]), end=<span class=\"hljs-string\">&quot;\\t&quot;</span>)\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;INF&quot;</span>, end=<span class=\"hljs-string\">&quot;\\t&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">floyd_warshall</span>(<span class=\"hljs-params\">graph, v</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    :param graph: 2D array calculated from weight[edge[i, j]]\n    :type graph: List[List[float]]\n    :param v: number of vertices\n    :type v: int\n    :return: shortest distance between all vertex pairs\n    distance[u][v] will contain the shortest distance from vertex u to v.\n\n    1. For all edges from v to n, distance[i][j] = weight(edge(i, j)).\n    3. The algorithm then performs distance[i][j] = min(distance[i][j], distance[i][k] +\n        distance[k][j]) for each possible pair i, j of vertices.\n    4. The above is repeated for each vertex k in the graph.\n    5. Whenever distance[i][j] is given a new minimum value, next vertex[i][j] is\n        updated to the next vertex[i][k].\n    &quot;&quot;&quot;</span>\n\n    dist = [[<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v):\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v):\n            dist[i][j] = graph[i][j]\n\n            <span class=\"hljs-comment\"># check vertex k against all other vertices (i, j)</span>\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v):\n        <span class=\"hljs-comment\"># looping through rows of graph array</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v):\n            <span class=\"hljs-comment\"># looping through columns of graph array</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v):\n                <span class=\"hljs-keyword\">if</span> (\n                    dist[i][k] != <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>)\n                    <span class=\"hljs-keyword\">and</span> dist[k][j] != <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>)\n                    <span class=\"hljs-keyword\">and</span> dist[i][k] + dist[k][j] &lt; dist[i][j]\n                ):\n                    dist[i][j] = dist[i][k] + dist[k][j]\n\n    _print_dist(dist, v)\n    <span class=\"hljs-keyword\">return</span> dist, v\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    v = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter number of vertices: &quot;</span>))\n    e = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter number of edges: &quot;</span>))\n\n    graph = [[<span class=\"hljs-built_in\">float</span>(<span class=\"hljs-string\">&quot;inf&quot;</span>) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v)]\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(v):\n        graph[i][i] = <span class=\"hljs-number\">0.0</span>\n\n        <span class=\"hljs-comment\"># src and dst are indices that must be within the array size graph[e][v]</span>\n        <span class=\"hljs-comment\"># failure to follow this will result in an error</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(e):\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nEdge &quot;</span>, i + <span class=\"hljs-number\">1</span>)\n        src = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter source:&quot;</span>))\n        dst = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter destination:&quot;</span>))\n        weight = <span class=\"hljs-built_in\">float</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter weight:&quot;</span>))\n        graph[src][dst] = weight\n\n    floyd_warshall(graph, v)\n\n    <span class=\"hljs-comment\"># Example Input</span>\n    <span class=\"hljs-comment\"># Enter number of vertices: 3</span>\n    <span class=\"hljs-comment\"># Enter number of edges: 2</span>\n\n    <span class=\"hljs-comment\"># # generated graph from vertex and edge inputs</span>\n    <span class=\"hljs-comment\"># [[inf, inf, inf], [inf, inf, inf], [inf, inf, inf]]</span>\n    <span class=\"hljs-comment\"># [[0.0, inf, inf], [inf, 0.0, inf], [inf, inf, 0.0]]</span>\n\n    <span class=\"hljs-comment\"># specify source, destination and weight for edge #1</span>\n    <span class=\"hljs-comment\"># Edge  1</span>\n    <span class=\"hljs-comment\"># Enter source:1</span>\n    <span class=\"hljs-comment\"># Enter destination:2</span>\n    <span class=\"hljs-comment\"># Enter weight:2</span>\n\n    <span class=\"hljs-comment\"># specify source, destination and weight for edge #2</span>\n    <span class=\"hljs-comment\"># Edge  2</span>\n    <span class=\"hljs-comment\"># Enter source:2</span>\n    <span class=\"hljs-comment\"># Enter destination:1</span>\n    <span class=\"hljs-comment\"># Enter weight:1</span>\n\n    <span class=\"hljs-comment\"># # Expected Output from the vertice, edge and src, dst, weight inputs!!</span>\n    <span class=\"hljs-comment\"># 0\t\tINF\tINF</span>\n    <span class=\"hljs-comment\"># INF\t0\t2</span>\n    <span class=\"hljs-comment\"># INF\t1\t0</span>\n"
    }
  },
  "contributors": [
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
