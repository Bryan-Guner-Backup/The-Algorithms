{
  "slug": "rotation",
  "name": "Rotation",
  "categories": ["digitalimageprocessing", "rotation"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "digital_image_processing/rotation/rotation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/digital_image_processing/rotation/rotation.py",
      "code": "<span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> Path\n\n<span class=\"hljs-keyword\">import</span> cv2\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_rotation</span>(<span class=\"hljs-params\">\n    img: np.ndarray, pt1: np.ndarray, pt2: np.ndarray, rows: <span class=\"hljs-built_in\">int</span>, cols: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; np.ndarray:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Get image rotation\n    :param img: np.array\n    :param pt1: 3x2 list\n    :param pt2: 3x2 list\n    :param rows: columns image shape\n    :param cols: rows image shape\n    :return: np.array\n    &quot;&quot;&quot;</span>\n    matrix = cv2.getAffineTransform(pt1, pt2)\n    <span class=\"hljs-keyword\">return</span> cv2.warpAffine(img, matrix, (rows, cols))\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-comment\"># read original image</span>\n    image = cv2.imread(\n        <span class=\"hljs-built_in\">str</span>(Path(__file__).resolve().parent.parent / <span class=\"hljs-string\">&quot;image_data&quot;</span> / <span class=\"hljs-string\">&quot;lena.jpg&quot;</span>)\n    )\n    <span class=\"hljs-comment\"># turn image in gray scale value</span>\n    gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n    <span class=\"hljs-comment\"># get image shape</span>\n    img_rows, img_cols = gray_img.shape\n\n    <span class=\"hljs-comment\"># set different points to rotate image</span>\n    pts1 = np.array([[<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>], [<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">50</span>], [<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">200</span>]], np.float32)\n    pts2 = np.array([[<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>], [<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">50</span>], [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">250</span>]], np.float32)\n    pts3 = np.array([[<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>], [<span class=\"hljs-number\">150</span>, <span class=\"hljs-number\">50</span>], [<span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">200</span>]], np.float32)\n    pts4 = np.array([[<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>], [<span class=\"hljs-number\">80</span>, <span class=\"hljs-number\">50</span>], [<span class=\"hljs-number\">180</span>, <span class=\"hljs-number\">250</span>]], np.float32)\n\n    <span class=\"hljs-comment\"># add all rotated images in a list</span>\n    images = [\n        gray_img,\n        get_rotation(gray_img, pts1, pts2, img_rows, img_cols),\n        get_rotation(gray_img, pts2, pts3, img_rows, img_cols),\n        get_rotation(gray_img, pts2, pts4, img_rows, img_cols),\n    ]\n\n    <span class=\"hljs-comment\"># plot different image rotations</span>\n    fig = plt.figure(<span class=\"hljs-number\">1</span>)\n    titles = [<span class=\"hljs-string\">&quot;Original&quot;</span>, <span class=\"hljs-string\">&quot;Rotation 1&quot;</span>, <span class=\"hljs-string\">&quot;Rotation 2&quot;</span>, <span class=\"hljs-string\">&quot;Rotation 3&quot;</span>]\n    <span class=\"hljs-keyword\">for</span> i, image <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(images):\n        plt.subplot(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, i + <span class=\"hljs-number\">1</span>), plt.imshow(image, <span class=\"hljs-string\">&quot;gray&quot;</span>)\n        plt.title(titles[i])\n        plt.axis(<span class=\"hljs-string\">&quot;off&quot;</span>)\n        plt.subplots_adjust(left=<span class=\"hljs-number\">0.0</span>, bottom=<span class=\"hljs-number\">0.05</span>, right=<span class=\"hljs-number\">1.0</span>, top=<span class=\"hljs-number\">0.95</span>)\n    plt.show()\n"
    },
    "java": {
      "dir": "strings/Rotation.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/strings/Rotation.java",
      "code": "<span class=\"hljs-keyword\">package</span> strings;\n\n<span class=\"hljs-comment\">/**\n * Given a string, moving several characters in front of the string to the end of the string. For\n * example, move the two characters&#x27;a&#x27; and &#x27;b&#x27; in front of the string &quot;abcdef&quot; to the end of the\n * string, so that the original string becomes the string &quot;cdefab&quot;\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rotation</span> {\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-title function_\">rotation</span><span class=\"hljs-params\">(<span class=\"hljs-string\">&quot;abcdef&quot;</span>, <span class=\"hljs-number\">2</span>)</span>.equals(<span class=\"hljs-string\">&quot;cdefab&quot;</span>);\n\n    <span class=\"hljs-type\">char</span>[] values = <span class=\"hljs-string\">&quot;abcdef&quot;</span>.toCharArray();\n    rotation(values, <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(values).equals(<span class=\"hljs-string\">&quot;cdefab&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Move {<span class=\"hljs-doctag\">@code</span> n} characters in front of given string to the end of string time complexity: O(n)\n   * space complexity: O(n)\n   *\n   * <span class=\"hljs-doctag\">@param</span> s given string\n   * <span class=\"hljs-doctag\">@param</span> n the total characters to be moved\n   * <span class=\"hljs-doctag\">@return</span> string after rotation\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">rotation</span><span class=\"hljs-params\">(String s, <span class=\"hljs-type\">int</span> n)</span> {\n    <span class=\"hljs-keyword\">return</span> s.substring(n) + s.substring(<span class=\"hljs-number\">0</span>, n);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Move {<span class=\"hljs-doctag\">@code</span> n} characters in front of given character array to the end of array time\n   * complexity: O(n) space complexity: O(1)\n   *\n   * <span class=\"hljs-doctag\">@param</span> values given character array\n   * <span class=\"hljs-doctag\">@param</span> n the total characters to be moved\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rotation</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>[] values, <span class=\"hljs-type\">int</span> n)</span> {\n    reverse(values, <span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>);\n    reverse(values, n, values.length - <span class=\"hljs-number\">1</span>);\n    reverse(values, <span class=\"hljs-number\">0</span>, values.length - <span class=\"hljs-number\">1</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Reverse character array\n   *\n   * <span class=\"hljs-doctag\">@param</span> values character array\n   * <span class=\"hljs-doctag\">@param</span> from begin index of given array\n   * <span class=\"hljs-doctag\">@param</span> to end index of given array\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reverse</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>[] values, <span class=\"hljs-type\">int</span> from, <span class=\"hljs-type\">int</span> to)</span> {\n    <span class=\"hljs-keyword\">while</span> (from &lt; to) {\n      <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> values[from];\n      values[from] = values[to];\n      values[to] = temp;\n      from++;\n      to--;\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Matheus T. Guimar√£es",
      "email": "matheusguimr@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
