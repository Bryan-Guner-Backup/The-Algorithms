{
  "slug": "0-1-knapsack",
  "name": "0 1 Knapsack",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming/0_1_knapsack.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/0_1_knapsack.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Implementation of [0-1 Knapsack Problem]\n * (https://en.wikipedia.org/wiki/Knapsack_problem)\n *\n * @details\n * Given weights and values of n items, put these items in a knapsack of\n * capacity `W` to get the maximum total value in the knapsack. In other words,\n * given two integer arrays `val[0..n-1]` and `wt[0..n-1]` which represent\n * values and weights associated with n items respectively. Also given an\n * integer W which represents knapsack capacity, find out the maximum value\n * subset of `val[]` such that sum of the weights of this subset is smaller than\n * or equal to W. You cannot break an item, either pick the complete item or\n * donâ€™t pick it (0-1 property)\n *\n * ### Algorithm\n * The idea is to consider all subsets of items and calculate the total weight\n * and value of all subsets. Consider the only subsets whose total weight is\n * smaller than `W`. From all such subsets, pick the maximum value subset.\n *\n * @author [Anmol](https://github.com/Anmol3299)\n * @author [Pardeep](https://github.com/Pardeep009)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace dynamic_programming\n * @brief Dynamic Programming algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\n<span class=\"hljs-comment\">/**\n * @namespace Knapsack\n * @brief Implementation of 0-1 Knapsack problem\n */</span>\n<span class=\"hljs-keyword\">namespace</span> knapsack {\n<span class=\"hljs-comment\">/**\n * @brief Picking up all those items whose combined weight is below\n * given capacity and calculating value of those picked items.Trying all\n * possible combinations will yield the maximum knapsack value.\n * @tparam n size of the weight and value array\n * @param capacity capacity of the carrying bag\n * @param weight array representing weight of items\n * @param value array representing value of items\n * @return maximum value obtainable with given capacity.\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-type\">size_t</span> n&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">maxKnapsackValue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> capacity, <span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; &amp;weight,\n                     <span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">int</span>, n&gt; &amp;value)</span> </span>{\n    std::vector&lt;std::vector&lt;<span class=\"hljs-type\">int</span>&gt; &gt; <span class=\"hljs-built_in\">maxValue</span>(n + <span class=\"hljs-number\">1</span>,\n                                            std::<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-type\">int</span>&gt;(capacity + <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>));\n    <span class=\"hljs-comment\">// outer loop will select no of items allowed</span>\n    <span class=\"hljs-comment\">// inner loop will select capcity of knapsack bag</span>\n    <span class=\"hljs-type\">int</span> items = <span class=\"hljs-built_in\">sizeof</span>(weight) / <span class=\"hljs-built_in\">sizeof</span>(weight[<span class=\"hljs-number\">0</span>]);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; items + <span class=\"hljs-number\">1</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> j = <span class=\"hljs-number\">0</span>; j &lt; capacity + <span class=\"hljs-number\">1</span>; ++j) {\n            <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span> || j == <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-comment\">// if no of items is zero or capacity is zero, then maxValue</span>\n                <span class=\"hljs-comment\">// will be zero</span>\n                maxValue[i][j] = <span class=\"hljs-number\">0</span>;\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (weight[i - <span class=\"hljs-number\">1</span>] &lt;= j) {\n                <span class=\"hljs-comment\">// if the ith item&#x27;s weight(in actual array it will be at i-1)</span>\n                <span class=\"hljs-comment\">// is less than or equal to the allowed weight i.e. j then we</span>\n                <span class=\"hljs-comment\">// can pick that item for our knapsack. maxValue will be the</span>\n                <span class=\"hljs-comment\">// obtained either by picking the current item or by not picking</span>\n                <span class=\"hljs-comment\">// current item</span>\n\n                <span class=\"hljs-comment\">// picking current item</span>\n                <span class=\"hljs-type\">int</span> profit1 = value[i - <span class=\"hljs-number\">1</span>] + maxValue[i - <span class=\"hljs-number\">1</span>][j - weight[i - <span class=\"hljs-number\">1</span>]];\n\n                <span class=\"hljs-comment\">// not picking current item</span>\n                <span class=\"hljs-type\">int</span> profit2 = maxValue[i - <span class=\"hljs-number\">1</span>][j];\n\n                maxValue[i][j] = std::<span class=\"hljs-built_in\">max</span>(profit1, profit2);\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// as weight of current item is greater than allowed weight, so</span>\n                <span class=\"hljs-comment\">// maxProfit will be profit obtained by excluding current item.</span>\n                maxValue[i][j] = maxValue[i - <span class=\"hljs-number\">1</span>][j];\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">// returning maximum value</span>\n    <span class=\"hljs-keyword\">return</span> maxValue[items][capacity];\n}\n}  <span class=\"hljs-comment\">// namespace knapsack</span>\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Function to test above algorithm\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Test 1</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> n1 = <span class=\"hljs-number\">3</span>;                             <span class=\"hljs-comment\">// number of items</span>\n    std::array&lt;<span class=\"hljs-type\">int</span>, n1&gt; weight1 = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>};   <span class=\"hljs-comment\">// weight of each item</span>\n    std::array&lt;<span class=\"hljs-type\">int</span>, n1&gt; value1 = {<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">120</span>};  <span class=\"hljs-comment\">// value of each item</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> capacity1 = <span class=\"hljs-number\">50</span>;                     <span class=\"hljs-comment\">// capacity of carrying bag</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> max_value1 = dynamic_programming::knapsack::<span class=\"hljs-built_in\">maxKnapsackValue</span>(\n        capacity1, weight1, value1);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> expected_max_value1 = <span class=\"hljs-number\">220</span>;\n    <span class=\"hljs-built_in\">assert</span>(max_value1 == expected_max_value1);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Maximum Knapsack value with &quot;</span> &lt;&lt; n1 &lt;&lt; <span class=\"hljs-string\">&quot; items is &quot;</span>\n              &lt;&lt; max_value1 &lt;&lt; std::endl;\n\n    <span class=\"hljs-comment\">// Test 2</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> n2 = <span class=\"hljs-number\">4</span>;                               <span class=\"hljs-comment\">// number of items</span>\n    std::array&lt;<span class=\"hljs-type\">int</span>, n2&gt; weight2 = {<span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">7</span>};  <span class=\"hljs-comment\">// weight of each item</span>\n    std::array&lt;<span class=\"hljs-type\">int</span>, n2&gt; value2 = {<span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">10</span>};  <span class=\"hljs-comment\">// value of each item</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> capacity2 = <span class=\"hljs-number\">25</span>;                       <span class=\"hljs-comment\">// capacity of carrying bag</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> max_value2 = dynamic_programming::knapsack::<span class=\"hljs-built_in\">maxKnapsackValue</span>(\n        capacity2, weight2, value2);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> expected_max_value2 = <span class=\"hljs-number\">36</span>;\n    <span class=\"hljs-built_in\">assert</span>(max_value2 == expected_max_value2);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Maximum Knapsack value with &quot;</span> &lt;&lt; n2 &lt;&lt; <span class=\"hljs-string\">&quot; items is &quot;</span>\n              &lt;&lt; max_value2 &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// Testing</span>\n    <span class=\"hljs-built_in\">test</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "Pardeep Bhatt",
      "email": "pardeepbhatt5254@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
