{
  "slug": "numberofislands",
  "name": "NumberOfIslands",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Graphs/NumberOfIslands.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Graphs/NumberOfIslands.js",
      "code": "<span class=\"hljs-comment\">/* Number of Islands\nhttps://dev.to/rattanakchea/amazons-interview-question-count-island-21h6\nGiven a 2d grid map of &#x27;1&#x27;s (land) and &#x27;0&#x27;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\ntwo a dimensial grid map\neach element is going to represent a peice of land\n1 is land,\n0 is water\noutput a number which is the number of islands\n\nExample 1:\n  Input:\n  11110\n  11010\n  11000\n  00000\n\n  Output: 1\n\nExample 2:\n  Input:\n  11000\n  11000\n  00100\n  00011\n\n  Output: 3\n\nI: two dimensional array\nO: a single integer; total number of islands\n\nPseudocode:\n  OUTER FUNCTION\n    set count to 0\n\n    INNER FUNCTION - flood (col, row)\n      if the tile is water\n        return\n      make tile water(flood tile)\n      invoke flood on the neighbor coordinates\n\n    iterate over the matrix (col, row)\n      if the current element is a 1\n        increment count\n        invoke flood (coordinates for col and row)\n\n    Return the count\n*/</span>\n<span class=\"hljs-keyword\">const</span> grid = [\n  [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>],\n  [<span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>]\n]\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">islands</span> = (<span class=\"hljs-params\">matrixGrid</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> matrix = matrixGrid\n  <span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">0</span>\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">flood</span> = (<span class=\"hljs-params\">row, col</span>) =&gt; {\n    <span class=\"hljs-keyword\">if</span> (row &lt; <span class=\"hljs-number\">0</span> || col &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// Off the map above or left</span>\n    <span class=\"hljs-keyword\">if</span> (row &gt;= matrix.<span class=\"hljs-property\">length</span> || col &gt;= matrix[row].<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// Off the map below or right</span>\n\n    <span class=\"hljs-keyword\">const</span> tile = matrix[row][col]\n    <span class=\"hljs-keyword\">if</span> (tile !== <span class=\"hljs-string\">&#x27;1&#x27;</span>) <span class=\"hljs-keyword\">return</span>\n\n    matrix[row][col] = <span class=\"hljs-string\">&#x27;0&#x27;</span>\n\n    <span class=\"hljs-title function_\">flood</span>(row + <span class=\"hljs-number\">1</span>, col) <span class=\"hljs-comment\">// Down</span>\n    <span class=\"hljs-title function_\">flood</span>(row - <span class=\"hljs-number\">1</span>, col) <span class=\"hljs-comment\">// Up</span>\n    <span class=\"hljs-title function_\">flood</span>(row, col + <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Right</span>\n    <span class=\"hljs-title function_\">flood</span>(row, col - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Left</span>\n  }\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> row = <span class=\"hljs-number\">0</span>; row &lt; matrix.<span class=\"hljs-property\">length</span>; row += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> col = <span class=\"hljs-number\">0</span>; col &lt; matrix[row].<span class=\"hljs-property\">length</span>; col += <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">const</span> current = matrix[row][col]\n      <span class=\"hljs-keyword\">if</span> (current === <span class=\"hljs-string\">&#x27;1&#x27;</span>) {\n        <span class=\"hljs-title function_\">flood</span>(row, col)\n        counter += <span class=\"hljs-number\">1</span>\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> counter\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">islands</span>(grid))\n"
    }
  },
  "contributors": [
    {
      "name": "Kayla",
      "email": "golderkayla@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
