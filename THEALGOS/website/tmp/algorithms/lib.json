{
  "slug": "lib",
  "name": "Lib",
  "categories": ["linearalgebra", "src"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "linear_algebra/src/lib.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/linear_algebra/src/lib.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nCreated on Mon Feb 26 14:29:11 2018\n\n@author: Christian Bender\n@license: MIT-license\n\nThis module contains some useful classes and functions for dealing\nwith linear algebra in python.\n\nOverview:\n\n- class Vector\n- function zeroVector(dimension)\n- function unitBasisVector(dimension,pos)\n- function axpy(scalar,vector1,vector2)\n- function randomVector(N,a,b)\n- class Matrix\n- function squareZeroMatrix(N)\n- function randomMatrix(W,H,a,b)\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">import</span> math\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> Collection, <span class=\"hljs-type\">Optional</span>, <span class=\"hljs-type\">Union</span>, overload\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vector</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    This class represents a vector of arbitrary size.\n    You need to give the vector components.\n\n    Overview about the methods:\n\n    constructor(components : list) : init the vector\n    set(components : list) : changes the vector components.\n    __str__() : toString method\n    component(i : int): gets the i-th component (start by 0)\n    __len__() : gets the size of the vector (number of components)\n    euclidLength() : returns the euclidean length of the vector.\n    operator + : vector addition\n    operator - : vector subtraction\n    operator * : scalar multiplication and dot product\n    copy() : copies this vector and returns it.\n    changeComponent(pos,value) : changes the specified component.\n    TODO: compare-operator\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, components: <span class=\"hljs-type\">Optional</span>[Collection[<span class=\"hljs-built_in\">float</span>]] = <span class=\"hljs-literal\">None</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: components or nothing\n        simple constructor for init the vector\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> components <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            components = []\n        self.__components = <span class=\"hljs-built_in\">list</span>(components)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">self, components: Collection[<span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: new components\n        changes the components of the vector.\n        replace the components with newer one.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(components) &gt; <span class=\"hljs-number\">0</span>:\n            self.__components = <span class=\"hljs-built_in\">list</span>(components)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;please give any vector&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        returns a string representation of the vector\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;(&quot;</span> + <span class=\"hljs-string\">&quot;,&quot;</span>.join(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-built_in\">str</span>, self.__components)) + <span class=\"hljs-string\">&quot;)&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">component</span>(<span class=\"hljs-params\">self, i: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: index (start at 0)\n        output: the i-th component of the vector.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">type</span>(i) <span class=\"hljs-keyword\">is</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">and</span> -<span class=\"hljs-built_in\">len</span>(self.__components) &lt;= i &lt; <span class=\"hljs-built_in\">len</span>(self.__components):\n            <span class=\"hljs-keyword\">return</span> self.__components[i]\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;index out of range&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        returns the size of the vector\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.__components)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidLength</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        returns the euclidean length of the vector\n        &quot;&quot;&quot;</span>\n        summe: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> self.__components:\n            summe += c ** <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">return</span> math.sqrt(summe)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__add__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-string\">&quot;Vector&quot;</span></span>) -&gt; <span class=\"hljs-string\">&quot;Vector&quot;</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: other vector\n        assumes: other vector has the same size\n        returns a new vector that represents the sum.\n        &quot;&quot;&quot;</span>\n        size = <span class=\"hljs-built_in\">len</span>(self)\n        <span class=\"hljs-keyword\">if</span> size == <span class=\"hljs-built_in\">len</span>(other):\n            result = [self.__components[i] + other.component(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)]\n            <span class=\"hljs-keyword\">return</span> Vector(result)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;must have the same size&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__sub__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-string\">&quot;Vector&quot;</span></span>) -&gt; <span class=\"hljs-string\">&quot;Vector&quot;</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: other vector\n        assumes: other vector has the same size\n        returns a new vector that represents the difference.\n        &quot;&quot;&quot;</span>\n        size = <span class=\"hljs-built_in\">len</span>(self)\n        <span class=\"hljs-keyword\">if</span> size == <span class=\"hljs-built_in\">len</span>(other):\n            result = [self.__components[i] - other.component(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)]\n            <span class=\"hljs-keyword\">return</span> Vector(result)\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># error case</span>\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;must have the same size&quot;</span>)\n\n<span class=\"hljs-meta\">    @overload</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-string\">&quot;Vector&quot;</span>:\n        ...\n\n<span class=\"hljs-meta\">    @overload</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-string\">&quot;Vector&quot;</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        ...\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-type\">Union</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-string\">&quot;Vector&quot;</span>]</span>) -&gt; <span class=\"hljs-type\">Union</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-string\">&quot;Vector&quot;</span>]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        mul implements the scalar multiplication\n        and the dot-product\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">float</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">int</span>):\n            ans = [c * other <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> self.__components]\n            <span class=\"hljs-keyword\">return</span> Vector(ans)\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">isinstance</span>(other, Vector) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-built_in\">len</span>(self) == <span class=\"hljs-built_in\">len</span>(other)):\n            size = <span class=\"hljs-built_in\">len</span>(self)\n            summe: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size):\n                summe += self.__components[i] * other.component(i)\n            <span class=\"hljs-keyword\">return</span> summe\n        <span class=\"hljs-keyword\">else</span>:  <span class=\"hljs-comment\"># error case</span>\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;invalid operand!&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">copy</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-string\">&quot;Vector&quot;</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        copies this vector and returns it.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> Vector(self.__components)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">changeComponent</span>(<span class=\"hljs-params\">self, pos: <span class=\"hljs-built_in\">int</span>, value: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        input: an index (pos) and a value\n        changes the specified component (pos) with the\n        &#x27;value&#x27;\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-comment\"># precondition</span>\n        <span class=\"hljs-keyword\">assert</span> -<span class=\"hljs-built_in\">len</span>(self.__components) &lt;= pos &lt; <span class=\"hljs-built_in\">len</span>(self.__components)\n        self.__components[pos] = value\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">zeroVector</span>(<span class=\"hljs-params\">dimension: <span class=\"hljs-built_in\">int</span></span>) -&gt; Vector:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    returns a zero-vector of size &#x27;dimension&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(dimension, <span class=\"hljs-built_in\">int</span>)\n    <span class=\"hljs-keyword\">return</span> Vector([<span class=\"hljs-number\">0</span>] * dimension)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">unitBasisVector</span>(<span class=\"hljs-params\">dimension: <span class=\"hljs-built_in\">int</span>, pos: <span class=\"hljs-built_in\">int</span></span>) -&gt; Vector:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    returns a unit basis vector with a One\n    at index &#x27;pos&#x27; (indexing at 0)\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(dimension, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-built_in\">isinstance</span>(pos, <span class=\"hljs-built_in\">int</span>))\n    ans = [<span class=\"hljs-number\">0</span>] * dimension\n    ans[pos] = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> Vector(ans)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">axpy</span>(<span class=\"hljs-params\">scalar: <span class=\"hljs-built_in\">float</span>, x: Vector, y: Vector</span>) -&gt; Vector:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: a &#x27;scalar&#x27; and two vectors &#x27;x&#x27; and &#x27;y&#x27;\n    output: a vector\n    computes the axpy operation\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># precondition</span>\n    <span class=\"hljs-keyword\">assert</span> (\n        <span class=\"hljs-built_in\">isinstance</span>(x, Vector)\n        <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-built_in\">isinstance</span>(y, Vector))\n        <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-built_in\">isinstance</span>(scalar, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(scalar, <span class=\"hljs-built_in\">float</span>))\n    )\n    <span class=\"hljs-keyword\">return</span> x * scalar + y\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">randomVector</span>(<span class=\"hljs-params\">N: <span class=\"hljs-built_in\">int</span>, a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; Vector:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    input: size (N) of the vector.\n           random range (a,b)\n    output: returns a random vector of size N, with\n            random integer components between &#x27;a&#x27; and &#x27;b&#x27;.\n    &quot;&quot;&quot;</span>\n    random.seed(<span class=\"hljs-literal\">None</span>)\n    ans = [random.randint(a, b) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N)]\n    <span class=\"hljs-keyword\">return</span> Vector(ans)\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Matrix</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    class: Matrix\n    This class represents a arbitrary matrix.\n\n    Overview about the methods:\n\n           __str__() : returns a string representation\n           operator * : implements the matrix vector multiplication\n                        implements the matrix-scalar multiplication.\n           changeComponent(x,y,value) : changes the specified component.\n           component(x,y) : returns the specified component.\n           width() : returns the width of the matrix\n           height() : returns the height of the matrix\n           operator + : implements the matrix-addition.\n           operator - _ implements the matrix-subtraction\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]], w: <span class=\"hljs-built_in\">int</span>, h: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        simple constructor for initializing\n        the matrix with components.\n        &quot;&quot;&quot;</span>\n        self.__matrix = matrix\n        self.__width = w\n        self.__height = h\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        returns a string representation of this\n        matrix.\n        &quot;&quot;&quot;</span>\n        ans = <span class=\"hljs-string\">&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height):\n            ans += <span class=\"hljs-string\">&quot;|&quot;</span>\n            <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width):\n                <span class=\"hljs-keyword\">if</span> j &lt; self.__width - <span class=\"hljs-number\">1</span>:\n                    ans += <span class=\"hljs-built_in\">str</span>(self.__matrix[i][j]) + <span class=\"hljs-string\">&quot;,&quot;</span>\n                <span class=\"hljs-keyword\">else</span>:\n                    ans += <span class=\"hljs-built_in\">str</span>(self.__matrix[i][j]) + <span class=\"hljs-string\">&quot;|\\n&quot;</span>\n        <span class=\"hljs-keyword\">return</span> ans\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">changeComponent</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span>, value: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        changes the x-y component of this matrix\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= x &lt; self.__height <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= y &lt; self.__width:\n            self.__matrix[x][y] = value\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;changeComponent: indices out of bounds&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">component</span>(<span class=\"hljs-params\">self, x: <span class=\"hljs-built_in\">int</span>, y: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        returns the specified (x,y) component\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-number\">0</span> &lt;= x &lt; self.__height <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> &lt;= y &lt; self.__width:\n            <span class=\"hljs-keyword\">return</span> self.__matrix[x][y]\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;changeComponent: indices out of bounds&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">width</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        getter for the width\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self.__width\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">height</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        getter for the height\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> self.__height\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">determinate</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        returns the determinate of an nxn matrix using Laplace expansion\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.__height == self.__width <span class=\"hljs-keyword\">and</span> self.__width &gt;= <span class=\"hljs-number\">2</span>:\n            total = <span class=\"hljs-number\">0</span>\n            <span class=\"hljs-keyword\">if</span> self.__width &gt; <span class=\"hljs-number\">2</span>:\n                <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, self.__width):\n                    <span class=\"hljs-keyword\">for</span> y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, self.__height):\n                        total += (\n                            self.__matrix[x][y]\n                            * (-<span class=\"hljs-number\">1</span>) ** (x + y)\n                            * Matrix(\n                                self.__matrix[<span class=\"hljs-number\">0</span>:x] + self.__matrix[x + <span class=\"hljs-number\">1</span> :],\n                                self.__width - <span class=\"hljs-number\">1</span>,\n                                self.__height - <span class=\"hljs-number\">1</span>,\n                            ).determinate()\n                        )\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">return</span> (\n                    self.__matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] * self.__matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]\n                    - self.__matrix[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] * self.__matrix[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>]\n                )\n            <span class=\"hljs-keyword\">return</span> total\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;matrix is not square&quot;</span>)\n\n<span class=\"hljs-meta\">    @overload</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-string\">&quot;Matrix&quot;</span>:\n        ...\n\n<span class=\"hljs-meta\">    @overload</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: Vector</span>) -&gt; Vector:\n        ...\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__mul__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-type\">Union</span>[<span class=\"hljs-built_in\">float</span>, Vector]</span>) -&gt; <span class=\"hljs-type\">Union</span>[Vector, <span class=\"hljs-string\">&quot;Matrix&quot;</span>]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        implements the matrix-vector multiplication.\n        implements the matrix-scalar multiplication\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">isinstance</span>(other, Vector):  <span class=\"hljs-comment\"># vector-matrix</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(other) == self.__width:\n                ans = zeroVector(self.__height)\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height):\n                    summe: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0</span>\n                    <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width):\n                        summe += other.component(j) * self.__matrix[i][j]\n                    ans.changeComponent(i, summe)\n                    summe = <span class=\"hljs-number\">0</span>\n                <span class=\"hljs-keyword\">return</span> ans\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">raise</span> Exception(\n                    <span class=\"hljs-string\">&quot;vector must have the same size as the &quot;</span>\n                    + <span class=\"hljs-string\">&quot;number of columns of the matrix!&quot;</span>\n                )\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">isinstance</span>(other, <span class=\"hljs-built_in\">float</span>):  <span class=\"hljs-comment\"># matrix-scalar</span>\n            matrix = [\n                [self.__matrix[i][j] * other <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width)]\n                <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height)\n            ]\n            <span class=\"hljs-keyword\">return</span> Matrix(matrix, self.__width, self.__height)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__add__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-string\">&quot;Matrix&quot;</span></span>) -&gt; <span class=\"hljs-string\">&quot;Matrix&quot;</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        implements the matrix-addition.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.__width == other.width() <span class=\"hljs-keyword\">and</span> self.__height == other.height():\n            matrix = []\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height):\n                row = []\n                <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width):\n                    row.append(self.__matrix[i][j] + other.component(i, j))\n                matrix.append(row)\n            <span class=\"hljs-keyword\">return</span> Matrix(matrix, self.__width, self.__height)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;matrix must have the same dimension!&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__sub__</span>(<span class=\"hljs-params\">self, other: <span class=\"hljs-string\">&quot;Matrix&quot;</span></span>) -&gt; <span class=\"hljs-string\">&quot;Matrix&quot;</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        implements the matrix-subtraction.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.__width == other.width() <span class=\"hljs-keyword\">and</span> self.__height == other.height():\n            matrix = []\n            <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__height):\n                row = []\n                <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(self.__width):\n                    row.append(self.__matrix[i][j] - other.component(i, j))\n                matrix.append(row)\n            <span class=\"hljs-keyword\">return</span> Matrix(matrix, self.__width, self.__height)\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">raise</span> Exception(<span class=\"hljs-string\">&quot;matrix must have the same dimension!&quot;</span>)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">squareZeroMatrix</span>(<span class=\"hljs-params\">N: <span class=\"hljs-built_in\">int</span></span>) -&gt; Matrix:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    returns a square zero-matrix of dimension NxN\n    &quot;&quot;&quot;</span>\n    ans: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]] = [[<span class=\"hljs-number\">0</span>] * N <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N)]\n    <span class=\"hljs-keyword\">return</span> Matrix(ans, N, N)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">randomMatrix</span>(<span class=\"hljs-params\">W: <span class=\"hljs-built_in\">int</span>, H: <span class=\"hljs-built_in\">int</span>, a: <span class=\"hljs-built_in\">int</span>, b: <span class=\"hljs-built_in\">int</span></span>) -&gt; Matrix:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    returns a random matrix WxH with integer components\n    between &#x27;a&#x27; and &#x27;b&#x27;\n    &quot;&quot;&quot;</span>\n    random.seed(<span class=\"hljs-literal\">None</span>)\n    matrix: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">float</span>]] = [\n        [random.randint(a, b) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(W)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(H)\n    ]\n    <span class=\"hljs-keyword\">return</span> Matrix(matrix, W, H)\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Iqrar Agalosi Nureyza",
      "email": "misteriqrar@gmail.com",
      "commits": 1
    },
    {
      "name": "Milad Sadeghi DM",
      "email": "Cor3Down@ProtonMail.ch",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Alex Veltman",
      "email": "alexveltman0@gmail.com",
      "commits": 2
    },
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
