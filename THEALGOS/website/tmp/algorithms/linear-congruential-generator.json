{
  "slug": "linear-congruential-generator",
  "name": "Linear Congruential Generator",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/linear_congruential_generator.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/linear_congruential_generator.py",
      "code": "__author__ = <span class=\"hljs-string\">&quot;Tobias Carryer&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> time\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinearCongruentialGenerator</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A pseudorandom number generator.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, multiplier, increment, modulo, seed=<span class=\"hljs-built_in\">int</span>(<span class=\"hljs-params\">time(<span class=\"hljs-params\"></span>)</span>)</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        These parameters are saved and used when nextNumber() is called.\n\n        modulo is the largest number that can be generated (exclusive). The most\n        efficient values are powers of 2. 2^32 is a common value.\n        &quot;&quot;&quot;</span>\n        self.multiplier = multiplier\n        self.increment = increment\n        self.modulo = modulo\n        self.seed = seed\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">next_number</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        The smallest number that can be generated is zero.\n        The largest number that can be generated is modulo-1. modulo is set in the\n        constructor.\n        &quot;&quot;&quot;</span>\n        self.seed = (self.multiplier * self.seed + self.increment) % self.modulo\n        <span class=\"hljs-keyword\">return</span> self.seed\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-comment\"># Show the LCG in action.</span>\n    lcg = LinearCongruentialGenerator(<span class=\"hljs-number\">1664525</span>, <span class=\"hljs-number\">1013904223</span>, <span class=\"hljs-number\">2</span> &lt;&lt; <span class=\"hljs-number\">31</span>)\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        <span class=\"hljs-built_in\">print</span>(lcg.next_number())\n"
    },
    "java": {
      "dir": "Others/LinearCongruentialGenerator.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/LinearCongruentialGenerator.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-comment\">/***\n * A pseudorandom number generator.\n *\n * <span class=\"hljs-doctag\">@author</span> Tobias Carryer\n * <span class=\"hljs-doctag\">@date</span> October 10, 2017\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinearCongruentialGenerator</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> a, c, m, previousValue;\n\n  <span class=\"hljs-comment\">/***\n   * These parameters are saved and used when nextNumber() is called.\n   * The current timestamp in milliseconds is used as the seed.\n   *\n   * <span class=\"hljs-doctag\">@param</span> multiplier\n   * <span class=\"hljs-doctag\">@param</span> increment\n   * <span class=\"hljs-doctag\">@param</span> modulo The maximum number that can be generated (exclusive). A common value is 2^32.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LinearCongruentialGenerator</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> multiplier, <span class=\"hljs-type\">double</span> increment, <span class=\"hljs-type\">double</span> modulo)</span> {\n    <span class=\"hljs-built_in\">this</span>(System.currentTimeMillis(), multiplier, increment, modulo);\n  }\n\n  <span class=\"hljs-comment\">/***\n   * These parameters are saved and used when nextNumber() is called.\n   *\n   * <span class=\"hljs-doctag\">@param</span> seed\n   * <span class=\"hljs-doctag\">@param</span> multiplier\n   * <span class=\"hljs-doctag\">@param</span> increment\n   * <span class=\"hljs-doctag\">@param</span> modulo The maximum number that can be generated (exclusive). A common value is 2^32.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LinearCongruentialGenerator</span><span class=\"hljs-params\">(\n      <span class=\"hljs-type\">double</span> seed, <span class=\"hljs-type\">double</span> multiplier, <span class=\"hljs-type\">double</span> increment, <span class=\"hljs-type\">double</span> modulo)</span> {\n    <span class=\"hljs-built_in\">this</span>.previousValue = seed;\n    <span class=\"hljs-built_in\">this</span>.a = multiplier;\n    <span class=\"hljs-built_in\">this</span>.c = increment;\n    <span class=\"hljs-built_in\">this</span>.m = modulo;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * The smallest number that can be generated is zero. The largest number that can be generated is\n   * modulo-1. modulo is set in the constructor.\n   *\n   * <span class=\"hljs-doctag\">@return</span> a pseudorandom number.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">nextNumber</span><span class=\"hljs-params\">()</span> {\n    previousValue = (a * previousValue + c) % m;\n    <span class=\"hljs-keyword\">return</span> previousValue;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// Show the LCG in action.</span>\n    <span class=\"hljs-comment\">// Decisive proof that the LCG works could be made by adding each number</span>\n    <span class=\"hljs-comment\">// generated to a Set while checking for duplicates.</span>\n    <span class=\"hljs-type\">LinearCongruentialGenerator</span> <span class=\"hljs-variable\">lcg</span> <span class=\"hljs-operator\">=</span>\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinearCongruentialGenerator</span>(<span class=\"hljs-number\">1664525</span>, <span class=\"hljs-number\">1013904223</span>, Math.pow(<span class=\"hljs-number\">2.0</span>, <span class=\"hljs-number\">32.0</span>));\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">512</span>; i++) {\n      System.out.println(lcg.nextNumber());\n    }\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Tobias",
      "email": "TobCar@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
