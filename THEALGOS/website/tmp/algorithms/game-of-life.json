{
  "slug": "game-of-life",
  "name": "Game of Life",
  "categories": ["cellularautomata"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "cellular_automata/game_of_life.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/cellular_automata/game_of_life.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;Conway&#x27;s Game Of Life, Author Anurag Kumar(mailto:anuragkumarak95@gmail.com)\n\nRequirements:\n  - numpy\n  - random\n  - time\n  - matplotlib\n\nPython:\n  - 3.5\n\nUsage:\n  - $python3 game_o_life &lt;canvas_size:int&gt;\n\nGame-Of-Life Rules:\n\n 1.\n Any live cell with fewer than two live neighbours\n dies, as if caused by under-population.\n 2.\n Any live cell with two or three live neighbours lives\n on to the next generation.\n 3.\n Any live cell with more than three live neighbours\n dies, as if by over-population.\n 4.\n Any dead cell with exactly three live neighbours be-\n comes a live cell, as if by reproduction.\n &quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> sys\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot <span class=\"hljs-keyword\">as</span> plt\n<span class=\"hljs-keyword\">from</span> matplotlib.colors <span class=\"hljs-keyword\">import</span> ListedColormap\n\nusage_doc = <span class=\"hljs-string\">&quot;Usage of script: script_nama &lt;size_of_canvas:int&gt;&quot;</span>\n\nchoice = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-number\">100</span> + [<span class=\"hljs-number\">1</span>] * <span class=\"hljs-number\">10</span>\nrandom.shuffle(choice)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">create_canvas</span>(<span class=\"hljs-params\">size</span>):\n    canvas = [[<span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)] <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(size)]\n    <span class=\"hljs-keyword\">return</span> canvas\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">seed</span>(<span class=\"hljs-params\">canvas</span>):\n    <span class=\"hljs-keyword\">for</span> i, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(canvas):\n        <span class=\"hljs-keyword\">for</span> j, _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):\n            canvas[i][j] = <span class=\"hljs-built_in\">bool</span>(random.getrandbits(<span class=\"hljs-number\">1</span>))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run</span>(<span class=\"hljs-params\">canvas</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;This  function runs the rules of game through all points, and changes their\n    status accordingly.(in the same canvas)\n    @Args:\n    --\n    canvas : canvas of population to run the rules on.\n\n    @returns:\n    --\n    None\n    &quot;&quot;&quot;</span>\n    canvas = np.array(canvas)\n    next_gen_canvas = np.array(create_canvas(canvas.shape[<span class=\"hljs-number\">0</span>]))\n    <span class=\"hljs-keyword\">for</span> r, row <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(canvas):\n        <span class=\"hljs-keyword\">for</span> c, pt <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(row):\n            <span class=\"hljs-comment\"># print(r-1,r+2,c-1,c+2)</span>\n            next_gen_canvas[r][c] = __judge_point(\n                pt, canvas[r - <span class=\"hljs-number\">1</span> : r + <span class=\"hljs-number\">2</span>, c - <span class=\"hljs-number\">1</span> : c + <span class=\"hljs-number\">2</span>]\n            )\n\n    canvas = next_gen_canvas\n    <span class=\"hljs-keyword\">del</span> next_gen_canvas  <span class=\"hljs-comment\"># cleaning memory as we move on.</span>\n    <span class=\"hljs-keyword\">return</span> canvas.tolist()\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__judge_point</span>(<span class=\"hljs-params\">pt, neighbours</span>):\n    dead = <span class=\"hljs-number\">0</span>\n    alive = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\"># finding dead or alive neighbours count.</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> neighbours:\n        <span class=\"hljs-keyword\">for</span> status <span class=\"hljs-keyword\">in</span> i:\n            <span class=\"hljs-keyword\">if</span> status:\n                alive += <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">else</span>:\n                dead += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># handling duplicate entry for focus pt.</span>\n    <span class=\"hljs-keyword\">if</span> pt:\n        alive -= <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">else</span>:\n        dead -= <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># running the rules of game here.</span>\n    state = pt\n    <span class=\"hljs-keyword\">if</span> pt:\n        <span class=\"hljs-keyword\">if</span> alive &lt; <span class=\"hljs-number\">2</span>:\n            state = <span class=\"hljs-literal\">False</span>\n        <span class=\"hljs-keyword\">elif</span> alive == <span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">or</span> alive == <span class=\"hljs-number\">3</span>:\n            state = <span class=\"hljs-literal\">True</span>\n        <span class=\"hljs-keyword\">elif</span> alive &gt; <span class=\"hljs-number\">3</span>:\n            state = <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-keyword\">if</span> alive == <span class=\"hljs-number\">3</span>:\n            state = <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-keyword\">return</span> state\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(sys.argv) != <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">raise</span> Exception(usage_doc)\n\n    canvas_size = <span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">1</span>])\n    <span class=\"hljs-comment\"># main working structure of this module.</span>\n    c = create_canvas(canvas_size)\n    seed(c)\n    fig, ax = plt.subplots()\n    fig.show()\n    cmap = ListedColormap([<span class=\"hljs-string\">&quot;w&quot;</span>, <span class=\"hljs-string\">&quot;k&quot;</span>])\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n            c = run(c)\n            ax.matshow(c, cmap=cmap)\n            fig.canvas.draw()\n            ax.cla()\n    <span class=\"hljs-keyword\">except</span> KeyboardInterrupt:\n        <span class=\"hljs-comment\"># do nothing.</span>\n        <span class=\"hljs-keyword\">pass</span>\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
