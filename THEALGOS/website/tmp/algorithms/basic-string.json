{
  "slug": "basic-string",
  "name": "Basic String",
  "categories": ["geneticalgorithm"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "genetic_algorithm/basic_string.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/genetic_algorithm/basic_string.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nSimple multithreaded algorithm to show how the 4 phases of a genetic algorithm works\n(Evaluation, Selection, Crossover and Mutation)\nhttps://en.wikipedia.org/wiki/Genetic_algorithm\nAuthor: D4rkia\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n<span class=\"hljs-keyword\">import</span> random\n\n<span class=\"hljs-comment\"># Maximum size of the population.  bigger could be faster but is more memory expensive</span>\nN_POPULATION = <span class=\"hljs-number\">200</span>\n<span class=\"hljs-comment\"># Number of elements selected in every generation for evolution the selection takes</span>\n<span class=\"hljs-comment\"># place from the best to the worst of that generation must be smaller than N_POPULATION</span>\nN_SELECTED = <span class=\"hljs-number\">50</span>\n<span class=\"hljs-comment\"># Probability that an element of a generation can mutate changing one of its genes this</span>\n<span class=\"hljs-comment\"># guarantees that all genes will be used during evolution</span>\nMUTATION_PROBABILITY = <span class=\"hljs-number\">0.4</span>\n<span class=\"hljs-comment\"># just a seed to improve randomness required by the algorithm</span>\nrandom.seed(random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1000</span>))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">basic</span>(<span class=\"hljs-params\">target: <span class=\"hljs-built_in\">str</span>, genes: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>], debug: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">True</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Verify that the target contains no genes besides the ones inside genes variable.\n\n    &gt;&gt;&gt; from string import ascii_lowercase\n    &gt;&gt;&gt; basic(&quot;doctest&quot;, ascii_lowercase, debug=False)[2]\n    &#x27;doctest&#x27;\n    &gt;&gt;&gt; genes = list(ascii_lowercase)\n    &gt;&gt;&gt; genes.remove(&quot;e&quot;)\n    &gt;&gt;&gt; basic(&quot;test&quot;, genes)\n    Traceback (most recent call last):\n    ...\n    ValueError: [&#x27;e&#x27;] is not in genes list, evolution cannot converge\n    &gt;&gt;&gt; genes.remove(&quot;s&quot;)\n    &gt;&gt;&gt; basic(&quot;test&quot;, genes)\n    Traceback (most recent call last):\n    ...\n    ValueError: [&#x27;e&#x27;, &#x27;s&#x27;] is not in genes list, evolution cannot converge\n    &gt;&gt;&gt; genes.remove(&quot;t&quot;)\n    &gt;&gt;&gt; basic(&quot;test&quot;, genes)\n    Traceback (most recent call last):\n    ...\n    ValueError: [&#x27;e&#x27;, &#x27;s&#x27;, &#x27;t&#x27;] is not in genes list, evolution cannot converge\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># Verify if N_POPULATION is bigger than N_SELECTED</span>\n    <span class=\"hljs-keyword\">if</span> N_POPULATION &lt; N_SELECTED:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{N_POPULATION}</span> must be bigger than <span class=\"hljs-subst\">{N_SELECTED}</span>&quot;</span>)\n    <span class=\"hljs-comment\"># Verify that the target contains no genes besides the ones inside genes variable.</span>\n    not_in_genes_list = <span class=\"hljs-built_in\">sorted</span>({c <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> target <span class=\"hljs-keyword\">if</span> c <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> genes})\n    <span class=\"hljs-keyword\">if</span> not_in_genes_list:\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{not_in_genes_list}</span> is not in genes list, evolution cannot converge&quot;</span>\n        )\n\n    <span class=\"hljs-comment\"># Generate random starting population</span>\n    population = []\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N_POPULATION):\n        population.append(<span class=\"hljs-string\">&quot;&quot;</span>.join([random.choice(genes) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(target))]))\n\n    <span class=\"hljs-comment\"># Just some logs to know what the algorithms is doing</span>\n    generation, total_population = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># This loop will end when we will find a perfect match for our target</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        generation += <span class=\"hljs-number\">1</span>\n        total_population += <span class=\"hljs-built_in\">len</span>(population)\n\n        <span class=\"hljs-comment\"># Random population created now it&#x27;s time to evaluate</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">evaluate</span>(<span class=\"hljs-params\">item: <span class=\"hljs-built_in\">str</span>, main_target: <span class=\"hljs-built_in\">str</span> = target</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">float</span>]:\n            <span class=\"hljs-string\">&quot;&quot;&quot;\n            Evaluate how similar the item is with the target by just\n            counting each char in the right position\n            &gt;&gt;&gt; evaluate(&quot;Helxo Worlx&quot;, Hello World)\n            [&quot;Helxo Worlx&quot;, 9]\n            &quot;&quot;&quot;</span>\n            score = <span class=\"hljs-built_in\">len</span>(\n                [g <span class=\"hljs-keyword\">for</span> position, g <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(item) <span class=\"hljs-keyword\">if</span> g == main_target[position]]\n            )\n            <span class=\"hljs-keyword\">return</span> (item, <span class=\"hljs-built_in\">float</span>(score))\n\n        <span class=\"hljs-comment\"># Adding a bit of concurrency can make everything faster,</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\"># import concurrent.futures</span>\n        <span class=\"hljs-comment\"># population_score: list[tuple[str, float]] = []</span>\n        <span class=\"hljs-comment\"># with concurrent.futures.ThreadPoolExecutor(</span>\n        <span class=\"hljs-comment\">#                                   max_workers=NUM_WORKERS) as executor:</span>\n        <span class=\"hljs-comment\">#     futures = {executor.submit(evaluate, item) for item in population}</span>\n        <span class=\"hljs-comment\">#     concurrent.futures.wait(futures)</span>\n        <span class=\"hljs-comment\">#     population_score = [item.result() for item in futures]</span>\n        <span class=\"hljs-comment\">#</span>\n        <span class=\"hljs-comment\"># but with a simple algorithm like this will probably be slower</span>\n        <span class=\"hljs-comment\"># we just need to call evaluate for every item inside population</span>\n        population_score = [evaluate(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> population]\n\n        <span class=\"hljs-comment\"># Check if there is a matching evolution</span>\n        population_score = <span class=\"hljs-built_in\">sorted</span>(population_score, key=<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-number\">1</span>], reverse=<span class=\"hljs-literal\">True</span>)\n        <span class=\"hljs-keyword\">if</span> population_score[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] == target:\n            <span class=\"hljs-keyword\">return</span> (generation, total_population, population_score[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>])\n\n        <span class=\"hljs-comment\"># Print the Best result every 10 generation</span>\n        <span class=\"hljs-comment\"># just to know that the algorithm is working</span>\n        <span class=\"hljs-keyword\">if</span> debug <span class=\"hljs-keyword\">and</span> generation % <span class=\"hljs-number\">10</span> == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-built_in\">print</span>(\n                <span class=\"hljs-string\">f&quot;\\nGeneration: <span class=\"hljs-subst\">{generation}</span>&quot;</span>\n                <span class=\"hljs-string\">f&quot;\\nTotal Population:<span class=\"hljs-subst\">{total_population}</span>&quot;</span>\n                <span class=\"hljs-string\">f&quot;\\nBest score: <span class=\"hljs-subst\">{population_score[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>]}</span>&quot;</span>\n                <span class=\"hljs-string\">f&quot;\\nBest string: <span class=\"hljs-subst\">{population_score[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]}</span>&quot;</span>\n            )\n\n        <span class=\"hljs-comment\"># Flush the old population keeping some of the best evolutions</span>\n        <span class=\"hljs-comment\"># Keeping this avoid regression of evolution</span>\n        population_best = population[: <span class=\"hljs-built_in\">int</span>(N_POPULATION / <span class=\"hljs-number\">3</span>)]\n        population.clear()\n        population.extend(population_best)\n        <span class=\"hljs-comment\"># Normalize population score from 0 to 1</span>\n        population_score = [\n            (item, score / <span class=\"hljs-built_in\">len</span>(target)) <span class=\"hljs-keyword\">for</span> item, score <span class=\"hljs-keyword\">in</span> population_score\n        ]\n\n        <span class=\"hljs-comment\"># Select, Crossover and Mutate a new population</span>\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">select</span>(<span class=\"hljs-params\">parent_1: <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">float</span>]</span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n            <span class=\"hljs-string\">&quot;&quot;&quot;Select the second parent and generate new population&quot;&quot;&quot;</span>\n            pop = []\n            <span class=\"hljs-comment\"># Generate more child proportionally to the fitness score</span>\n            child_n = <span class=\"hljs-built_in\">int</span>(parent_1[<span class=\"hljs-number\">1</span>] * <span class=\"hljs-number\">100</span>) + <span class=\"hljs-number\">1</span>\n            child_n = <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">if</span> child_n &gt;= <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">else</span> child_n\n            <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(child_n):\n                parent_2 = population_score[random.randint(<span class=\"hljs-number\">0</span>, N_SELECTED)][<span class=\"hljs-number\">0</span>]\n                child_1, child_2 = crossover(parent_1[<span class=\"hljs-number\">0</span>], parent_2)\n                <span class=\"hljs-comment\"># Append new string to the population list</span>\n                pop.append(mutate(child_1))\n                pop.append(mutate(child_2))\n            <span class=\"hljs-keyword\">return</span> pop\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">crossover</span>(<span class=\"hljs-params\">parent_1: <span class=\"hljs-built_in\">str</span>, parent_2: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]:\n            <span class=\"hljs-string\">&quot;&quot;&quot;Slice and combine two string in a random point&quot;&quot;&quot;</span>\n            random_slice = random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(parent_1) - <span class=\"hljs-number\">1</span>)\n            child_1 = parent_1[:random_slice] + parent_2[random_slice:]\n            child_2 = parent_2[:random_slice] + parent_1[random_slice:]\n            <span class=\"hljs-keyword\">return</span> (child_1, child_2)\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">mutate</span>(<span class=\"hljs-params\">child: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n            <span class=\"hljs-string\">&quot;&quot;&quot;Mutate a random gene of a child with another one from the list&quot;&quot;&quot;</span>\n            child_list = <span class=\"hljs-built_in\">list</span>(child)\n            <span class=\"hljs-keyword\">if</span> random.uniform(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>) &lt; MUTATION_PROBABILITY:\n                child_list[random.randint(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(child)) - <span class=\"hljs-number\">1</span>] = random.choice(genes)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(child_list)\n\n        <span class=\"hljs-comment\"># This is Selection</span>\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N_SELECTED):\n            population.extend(select(population_score[<span class=\"hljs-built_in\">int</span>(i)]))\n            <span class=\"hljs-comment\"># Check if the population has already reached the maximum value and if so,</span>\n            <span class=\"hljs-comment\"># break the cycle.  if this check is disabled the algorithm will take</span>\n            <span class=\"hljs-comment\"># forever to compute large strings but will also calculate small string in</span>\n            <span class=\"hljs-comment\"># a lot fewer generations</span>\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(population) &gt; N_POPULATION:\n                <span class=\"hljs-keyword\">break</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    target_str = (\n        <span class=\"hljs-string\">&quot;This is a genetic algorithm to evaluate, combine, evolve, and mutate a string!&quot;</span>\n    )\n    genes_list = <span class=\"hljs-built_in\">list</span>(\n        <span class=\"hljs-string\">&quot; ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm&quot;</span>\n        <span class=\"hljs-string\">&quot;nopqrstuvwxyz.,;!?+-*#@^&#x27;èéòà€ù=)(&amp;%$£/\\\\&quot;</span>\n    )\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;\\nGeneration: %s\\nTotal Population: %s\\nTarget: %s&quot;</span>\n        % basic(target_str, genes_list)\n    )\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "D4rkia",
      "email": "49065066+D4rkia@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
