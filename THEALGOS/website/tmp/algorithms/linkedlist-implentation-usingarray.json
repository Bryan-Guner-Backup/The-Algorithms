{
  "slug": "linkedlist-implentation-usingarray",
  "name": "Linkedlist Implentation Usingarray",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/linkedlist_implentation_usingarray.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/linkedlist_implentation_usingarray.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief Linked list implementation using Arrays\n *\n * The difference between the pointer implementation of linked list and array\n * implementation of linked list:\n * 1. The NULL is represented by -1;\n * 2. Limited size. (in the following case it is 100 nodes at max). But we can\n * reuse the nodes that are to be deleted by again linking it bacj to the list.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">int</span> data;\n    <span class=\"hljs-type\">int</span> next;\n};\n\nNode AvailArray[<span class=\"hljs-number\">100</span>];  <span class=\"hljs-comment\">///&lt; array that will act as nodes of a linked list.</span>\n\n<span class=\"hljs-type\">int</span> head = <span class=\"hljs-number\">-1</span>;\n<span class=\"hljs-type\">int</span> avail = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">initialise_list</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt;= <span class=\"hljs-number\">98</span>; i++) {\n        AvailArray[i].next = i + <span class=\"hljs-number\">1</span>;\n    }\n    AvailArray[<span class=\"hljs-number\">99</span>].next = <span class=\"hljs-number\">-1</span>;  <span class=\"hljs-comment\">// indicating the end of the linked list.</span>\n}\n\n<span class=\"hljs-comment\">/** This will return the index of the first free node present in the avail list\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getnode</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> NodeIndexToBeReturned = avail;\n    avail = AvailArray[avail].next;\n    <span class=\"hljs-keyword\">return</span> NodeIndexToBeReturned;\n}\n\n<span class=\"hljs-comment\">/** This function when called will delete the node with\n * the index presented as an argument, and will put\n * back that node into the array.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">freeNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> nodeToBeDeleted)</span> </span>{\n    AvailArray[nodeToBeDeleted].next = avail;\n    avail = nodeToBeDeleted;\n}\n\n<span class=\"hljs-comment\">/** The function will insert the given data\n * into the front of the linked list.\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertAtTheBeginning</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> </span>{\n    <span class=\"hljs-type\">int</span> newNode = <span class=\"hljs-built_in\">getnode</span>();\n    AvailArray[newNode].data = data;\n    AvailArray[newNode].next = head;\n    head = newNode;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insertAtTheEnd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> </span>{\n    <span class=\"hljs-type\">int</span> newNode = <span class=\"hljs-built_in\">getnode</span>();\n    <span class=\"hljs-type\">int</span> temp = head;\n    <span class=\"hljs-keyword\">while</span> (AvailArray[temp].next != <span class=\"hljs-number\">-1</span>) {\n        temp = AvailArray[temp].next;\n    }\n    <span class=\"hljs-comment\">// temp is now pointing to the end node.</span>\n    AvailArray[newNode].data = data;\n    AvailArray[newNode].next = <span class=\"hljs-number\">-1</span>;\n    AvailArray[temp].next = newNode;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> temp = head;\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-number\">-1</span>) {\n        std::cout &lt;&lt; AvailArray[temp].data &lt;&lt; <span class=\"hljs-string\">&quot;-&gt;&quot;</span>;\n        temp = AvailArray[temp].next;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;-1&quot;</span> &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">initialise_list</span>();\n    <span class=\"hljs-type\">int</span> x, y, z;\n    <span class=\"hljs-keyword\">for</span> (;;) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;1. Insert At The Beginning&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;2. Insert At The End&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;3. Display&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;4.Exit&quot;</span> &lt;&lt; std::endl;\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter Your choice&quot;</span> &lt;&lt; std::endl;\n        std::cin &gt;&gt; z;\n        <span class=\"hljs-built_in\">switch</span> (z) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number you want to enter&quot;</span> &lt;&lt; std::endl;\n            std::cin &gt;&gt; x;\n            <span class=\"hljs-built_in\">insertAtTheBeginning</span>(x);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number you want to enter&quot;</span> &lt;&lt; std::endl;\n            std::cin &gt;&gt; y;\n            <span class=\"hljs-built_in\">insertAtTheEnd</span>(y);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            std::cout\n                &lt;&lt; <span class=\"hljs-string\">&quot;The linked list contains the following element in order&quot;</span>\n                &lt;&lt; std::endl;\n            <span class=\"hljs-built_in\">display</span>();\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">default</span>:\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The entered choice is not correct&quot;</span> &lt;&lt; std::endl;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Pradeep Singh",
      "email": "pswaldia1@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
