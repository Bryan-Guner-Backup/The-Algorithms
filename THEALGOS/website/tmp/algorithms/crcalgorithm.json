{
  "slug": "crcalgorithm",
  "name": "CRCAlgorithm",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/CRCAlgorithm.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/CRCAlgorithm.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\r\n\r\n<span class=\"hljs-keyword\">import</span> java.util.ArrayList;\r\n<span class=\"hljs-keyword\">import</span> java.util.Random;\r\n<span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadLocalRandom;\r\n\r\n<span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@author</span> dimgrichr */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CRCAlgorithm</span> {\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> correctMess;\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> wrongMess;\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> wrongMessCaught;\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> wrongMessNotCaught;\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> messSize;\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span> ber;\r\n\r\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> messageChanged;\r\n\r\n  <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; message;\r\n\r\n  <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; dividedMessage;\r\n\r\n  <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; p;\r\n\r\n  <span class=\"hljs-keyword\">private</span> Random randomGenerator;\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * The algorithm&#x27;s main constructor. The most significant variables, used in the algorithm, are\r\n   * set in their initial values.\r\n   *\r\n   * <span class=\"hljs-doctag\">@param</span> str The binary number P, in a string form, which is used by the CRC algorithm\r\n   * <span class=\"hljs-doctag\">@param</span> size The size of every transmitted message\r\n   * <span class=\"hljs-doctag\">@param</span> ber The Bit Error Rate\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CRCAlgorithm</span><span class=\"hljs-params\">(String str, <span class=\"hljs-type\">int</span> size, <span class=\"hljs-type\">double</span> ber)</span> {\r\n    messageChanged = <span class=\"hljs-literal\">false</span>;\r\n    message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    messSize = size;\r\n    dividedMessage = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; str.length(); i++) {\r\n      p.add(Character.getNumericValue(str.charAt(i)));\r\n    }\r\n    randomGenerator = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();\r\n    correctMess = <span class=\"hljs-number\">0</span>;\r\n    wrongMess = <span class=\"hljs-number\">0</span>;\r\n    wrongMessCaught = <span class=\"hljs-number\">0</span>;\r\n    wrongMessNotCaught = <span class=\"hljs-number\">0</span>;\r\n    <span class=\"hljs-built_in\">this</span>.ber = ber;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Returns the counter wrongMess\r\n   *\r\n   * <span class=\"hljs-doctag\">@return</span> wrongMess, the number of Wrong Messages\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWrongMess</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-keyword\">return</span> wrongMess;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Returns the counter wrongMessCaught\r\n   *\r\n   * <span class=\"hljs-doctag\">@return</span> wrongMessCaught, the number of wrong messages, which are caught by the CRC algoriithm\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWrongMessCaught</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-keyword\">return</span> wrongMessCaught;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Returns the counter wrongMessNotCaught\r\n   *\r\n   * <span class=\"hljs-doctag\">@return</span> wrongMessNotCaught, the number of wrong messages, which are not caught by the CRC\r\n   *     algorithm\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getWrongMessNotCaught</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-keyword\">return</span> wrongMessNotCaught;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Returns the counter correctMess\r\n   *\r\n   * <span class=\"hljs-doctag\">@return</span> correctMess, the number of the Correct Messages\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCorrectMess</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-keyword\">return</span> correctMess;\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Resets some of the object&#x27;s values, used on the main function, so that it can be re-used, in\r\n   * order not to waste too much memory and time, by creating new objects.\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">refactor</span><span class=\"hljs-params\">()</span> {\r\n    messageChanged = <span class=\"hljs-literal\">false</span>;\r\n    message = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    dividedMessage = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Random messages, consisted of 0&#x27;s and 1&#x27;s, are generated, so that they can later be transmitted\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generateRandomMess</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; messSize; i++) {\r\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> ThreadLocalRandom.current().nextInt(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\r\n      message.add(x);\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * The most significant part of the CRC algorithm. The message is divided by P, so the\r\n   * dividedMessage ArrayList&lt;Integer&gt; is created. If check == true, the dividedMessaage is\r\n   * examined, in order to see if it contains any 1&#x27;s. If it does, the message is considered to be\r\n   * wrong by the receiver,so the variable wrongMessCaught changes. If it does not, it is accepted,\r\n   * so one of the variables correctMess, wrongMessNotCaught, changes. If check == false, the\r\n   * diviided Message is added at the end of the ArrayList&lt;integer&gt; message.\r\n   *\r\n   * <span class=\"hljs-doctag\">@param</span> check the variable used to determine, if the message is going to be checked from the\r\n   *     receiver if true, it is checked otherwise, it is not\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">divideMessageWithP</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> check)</span> {\r\n    ArrayList&lt;Integer&gt; x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();\r\n    ArrayList&lt;Integer&gt; k = (ArrayList&lt;Integer&gt;) message.clone();\r\n    <span class=\"hljs-keyword\">if</span> (!check) {\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; p.size() - <span class=\"hljs-number\">1</span>; i++) {\r\n        k.add(<span class=\"hljs-number\">0</span>);\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">while</span> (!k.isEmpty()) {\r\n      <span class=\"hljs-keyword\">while</span> (x.size() &lt; p.size() &amp;&amp; !k.isEmpty()) {\r\n        x.add(k.get(<span class=\"hljs-number\">0</span>));\r\n        k.remove(<span class=\"hljs-number\">0</span>);\r\n      }\r\n      <span class=\"hljs-keyword\">if</span> (x.size() == p.size()) {\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; p.size(); i++) {\r\n          <span class=\"hljs-keyword\">if</span> (x.get(i) == p.get(i)) {\r\n            x.set(i, <span class=\"hljs-number\">0</span>);\r\n          } <span class=\"hljs-keyword\">else</span> {\r\n            x.set(i, <span class=\"hljs-number\">1</span>);\r\n          }\r\n        }\r\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; x.size() &amp;&amp; x.get(i) != <span class=\"hljs-number\">1</span>; i++) {\r\n          x.remove(<span class=\"hljs-number\">0</span>);\r\n        }\r\n      }\r\n    }\r\n    dividedMessage = (ArrayList&lt;Integer&gt;) x.clone();\r\n    <span class=\"hljs-keyword\">if</span> (!check) {\r\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> z : dividedMessage) {\r\n        message.add(z);\r\n      }\r\n    } <span class=\"hljs-keyword\">else</span> {\r\n      <span class=\"hljs-keyword\">if</span> (dividedMessage.contains(<span class=\"hljs-number\">1</span>) &amp;&amp; messageChanged) {\r\n        wrongMessCaught++;\r\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!dividedMessage.contains(<span class=\"hljs-number\">1</span>) &amp;&amp; messageChanged) {\r\n        wrongMessNotCaught++;\r\n      } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!messageChanged) {\r\n        correctMess++;\r\n      }\r\n    }\r\n  }\r\n\r\n  <span class=\"hljs-comment\">/**\r\n   * Once the message is transmitted, some of it&#x27;s elements, is possible to change from 1 to 0, or\r\n   * from 0 to 1, because of the Bit Error Rate (ber). For every element of the message, a random\r\n   * double number is created. If that number is smaller than ber, then the spesific element\r\n   * changes. On the other hand, if it&#x27;s bigger than ber, it does not. Based on these changes. the\r\n   * boolean variable messageChanged, gets the value: true, or false.\r\n   */</span>\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">changeMess</span><span class=\"hljs-params\">()</span> {\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> y : message) {\r\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">x</span> <span class=\"hljs-operator\">=</span> randomGenerator.nextDouble();\r\n      <span class=\"hljs-keyword\">while</span> (x &lt; <span class=\"hljs-number\">0.0000</span> || x &gt; <span class=\"hljs-number\">1.00000</span>) {\r\n        x = randomGenerator.nextDouble();\r\n      }\r\n      <span class=\"hljs-keyword\">if</span> (x &lt; ber) {\r\n        messageChanged = <span class=\"hljs-literal\">true</span>;\r\n        <span class=\"hljs-keyword\">if</span> (y == <span class=\"hljs-number\">1</span>) {\r\n          message.set(message.indexOf(y), <span class=\"hljs-number\">0</span>);\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n          message.set(message.indexOf(y), <span class=\"hljs-number\">1</span>);\r\n        }\r\n      }\r\n    }\r\n    <span class=\"hljs-keyword\">if</span> (messageChanged) {\r\n      wrongMess++;\r\n    }\r\n  }\r\n}\r\n"
    }
  },
  "contributors": [
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "dimgrichr",
      "email": "32580033+dimgrichr@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
