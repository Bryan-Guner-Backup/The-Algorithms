{
  "slug": "bead-sort",
  "name": "Bead Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "sorts/bead_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/bead_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nBead sort only works for sequences of nonegative integers.\nhttps://en.wikipedia.org/wiki/Bead_sort\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bead_sort</span>(<span class=\"hljs-params\">sequence: <span class=\"hljs-built_in\">list</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; bead_sort([6, 11, 12, 4, 1, 5])\n    [1, 4, 5, 6, 11, 12]\n\n    &gt;&gt;&gt; bead_sort([9, 8, 7, 6, 5, 4 ,3, 2, 1])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    &gt;&gt;&gt; bead_sort([5, 0, 4, 3])\n    [0, 3, 4, 5]\n\n    &gt;&gt;&gt; bead_sort([8, 2, 1])\n    [1, 2, 8]\n\n    &gt;&gt;&gt; bead_sort([1, .9, 0.0, 0, -1, -.9])\n    Traceback (most recent call last):\n    ...\n    TypeError: Sequence must be list of nonnegative integers\n\n    &gt;&gt;&gt; bead_sort(&quot;Hello world&quot;)\n    Traceback (most recent call last):\n    ...\n    TypeError: Sequence must be list of nonnegative integers\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">any</span>(<span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(x, <span class=\"hljs-built_in\">int</span>) <span class=\"hljs-keyword\">or</span> x &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> sequence):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;Sequence must be list of nonnegative integers&quot;</span>)\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(sequence)):\n        <span class=\"hljs-keyword\">for</span> i, (rod_upper, rod_lower) <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(<span class=\"hljs-built_in\">zip</span>(sequence, sequence[<span class=\"hljs-number\">1</span>:])):\n            <span class=\"hljs-keyword\">if</span> rod_upper &gt; rod_lower:\n                sequence[i] -= rod_upper - rod_lower\n                sequence[i + <span class=\"hljs-number\">1</span>] += rod_upper - rod_lower\n    <span class=\"hljs-keyword\">return</span> sequence\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">assert</span> bead_sort([<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]) == [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]\n    <span class=\"hljs-keyword\">assert</span> bead_sort([<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]) == [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>]\n"
    },
    "javascript": {
      "dir": "Sorts/BeadSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/BeadSort.js",
      "code": "<span class=\"hljs-comment\">/**\n * Bead Sort, also known as Gravity sort, this algorithm was\n * inspired from natural phenomenons and was designed keeping in mind objects(or beads)\n * falling under the influence of gravity.\n *\n * <span class=\"hljs-doctag\">NOTE:</span> It only works for arrays of positive integers.\n *\n * Wikipedia: https://en.wikipedia.org/wiki/Bead_sort\n */</span>\n\n<span class=\"hljs-comment\">/**\n * Doctests\n *\n * &gt; beadSort([5, 4, 3, 2, 1])\n * [1, 2, 3, 4, 5]\n * &gt; beadSort([7, 9, 4, 3, 5])\n * [3, 4, 5, 7, 9]\n * &gt; beadSort([-1, 5, 8, 4, 3, 19])\n * ! RangeError: Sequence must be a list of positive integers!\n */</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">beadSort</span> (sequence) {\n  <span class=\"hljs-comment\">/* Let&#x27;s ensure our sequence has only Positive Integers */</span>\n  <span class=\"hljs-keyword\">if</span> (sequence.<span class=\"hljs-title function_\">some</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">integer</span>) =&gt;</span> integer &lt; <span class=\"hljs-number\">0</span>)) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-title class_\">RangeError</span>(<span class=\"hljs-string\">&#x27;Sequence must be a list of Positive integers Only!&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">const</span> sequenceLength = sequence.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> max = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(...sequence)\n\n  <span class=\"hljs-comment\">// Set initial Grid</span>\n  <span class=\"hljs-keyword\">const</span> grid = sequence.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">number</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> maxArr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(max)\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; number; i++) {\n      maxArr[i] = <span class=\"hljs-string\">&#x27;*&#x27;</span>\n    }\n\n    <span class=\"hljs-keyword\">return</span> maxArr\n  })\n\n  <span class=\"hljs-comment\">// Drop the Beads!</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> col = <span class=\"hljs-number\">0</span>; col &lt; max; col++) {\n    <span class=\"hljs-keyword\">let</span> beadsCount = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> row = <span class=\"hljs-number\">0</span>; row &lt; sequenceLength; row++) {\n      <span class=\"hljs-keyword\">if</span> (grid[row][col] === <span class=\"hljs-string\">&#x27;*&#x27;</span>) {\n        beadsCount++\n      }\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> row = sequenceLength - <span class=\"hljs-number\">1</span>; row &gt; -<span class=\"hljs-number\">1</span>; row--) {\n      <span class=\"hljs-keyword\">if</span> (beadsCount) {\n        grid[row][col] = <span class=\"hljs-string\">&#x27;*&#x27;</span>\n        beadsCount--\n      } <span class=\"hljs-keyword\">else</span> {\n        grid[row][col] = <span class=\"hljs-literal\">undefined</span>\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/* Finally, let&#x27;s turn our Bead rows into their Respective Numbers */</span>\n  <span class=\"hljs-keyword\">const</span> sortedSequence = grid.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">beadArray</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> beadsArray = beadArray.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">bead</span> =&gt;</span> bead === <span class=\"hljs-string\">&#x27;*&#x27;</span>)\n\n    <span class=\"hljs-keyword\">return</span> beadsArray.<span class=\"hljs-property\">length</span>\n  })\n\n  <span class=\"hljs-keyword\">return</span> sortedSequence\n}\n\n<span class=\"hljs-comment\">/**\n* Implementation of Bead Sort\n*/</span>\n<span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>]\n<span class=\"hljs-comment\">// Before Sort</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;\\n- Before Sort | Implementation of Bead Sort -&#x27;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(array)\n<span class=\"hljs-comment\">// After Sort</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;- After Sort | Implementation of Bead Sort -&#x27;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">beadSort</span>(array))\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n"
    },
    "c-plus-plus": {
      "dir": "sorting/bead_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/bead_sort.cpp",
      "code": "<span class=\"hljs-comment\">// C++ program to implement gravity/bead sort</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> BEAD(i, j) beads[i * max + j]</span>\n\n<span class=\"hljs-comment\">// function to perform the above algorithm</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">beadSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">int</span> len)</span> </span>{\n    <span class=\"hljs-comment\">// Find the maximum element</span>\n    <span class=\"hljs-type\">int</span> max = a[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; len; i++)\n        <span class=\"hljs-keyword\">if</span> (a[i] &gt; max)\n            max = a[i];\n\n    <span class=\"hljs-comment\">// allocating memory</span>\n    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">char</span> *beads = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">char</span>[max * len];\n    <span class=\"hljs-built_in\">memset</span>(beads, <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">size_t</span>&gt;(max) * len);\n\n    <span class=\"hljs-comment\">// mark the beads</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++)\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; a[i]; j++) <span class=\"hljs-built_in\">BEAD</span>(i, j) = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; max; j++) {\n        <span class=\"hljs-comment\">// count how many beads are on each post</span>\n        <span class=\"hljs-type\">int</span> sum = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n            sum += <span class=\"hljs-built_in\">BEAD</span>(i, j);\n            <span class=\"hljs-built_in\">BEAD</span>(i, j) = <span class=\"hljs-number\">0</span>;\n        }\n\n        <span class=\"hljs-comment\">// Move beads down</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = len - sum; i &lt; len; i++) <span class=\"hljs-built_in\">BEAD</span>(i, j) = <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-comment\">// Put sorted values in array using beads</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n        <span class=\"hljs-type\">int</span> j;\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; max &amp;&amp; <span class=\"hljs-built_in\">BEAD</span>(i, j); j++) {\n        }\n\n        a[i] = j;\n    }\n    <span class=\"hljs-keyword\">delete</span>[] beads;\n}\n\n<span class=\"hljs-comment\">// driver function to test the algorithm</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> a[] = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">20</span>};\n    <span class=\"hljs-type\">int</span> len = <span class=\"hljs-built_in\">sizeof</span>(a) / <span class=\"hljs-built_in\">sizeof</span>(a[<span class=\"hljs-number\">0</span>]);\n\n    <span class=\"hljs-built_in\">beadSort</span>(a, len);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, a[i]);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "sorting/bead_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/bead_sort.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Sorting of array list using [bead\n * sort](https://en.wikipedia.org/wiki/Bead_sort)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @addtogroup sorting Sorting algorithms\n * @{\n */</span>\n<span class=\"hljs-comment\">/** Create easy access of elements from a 2D matrix stored in memory as a 1D\n * array\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> BEAD(i, j) beads[i * max + j]</span>\n\n<span class=\"hljs-comment\">/**\n * Displays the array, passed to this method\n * @param [in] arr array to display\n * @param [in] n number of elements in the array\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> n)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n}\n\n<span class=\"hljs-comment\">/** This is where the sorting of the array takes place\n * @param [in,out] a array to be sorted\n * @param [in] len Array Size\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">bead_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a, <span class=\"hljs-type\">size_t</span> len)</span>\n{\n    <span class=\"hljs-type\">int</span> i, j, max, sum;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">char</span> *beads;\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">1</span>, max = a[<span class=\"hljs-number\">0</span>]; i &lt; len; i++)\n        <span class=\"hljs-keyword\">if</span> (a[i] &gt; max)\n            max = a[i];\n\n    beads = <span class=\"hljs-built_in\">calloc</span>(<span class=\"hljs-number\">1</span>, max * len);\n\n    <span class=\"hljs-comment\">/* mark the beads */</span>\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++)\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; a[i]; j++) BEAD(i, j) = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; max; j++)\n    {\n        <span class=\"hljs-comment\">/* count how many beads are on each post */</span>\n        <span class=\"hljs-keyword\">for</span> (sum = i = <span class=\"hljs-number\">0</span>; i &lt; len; i++)\n        {\n            sum += BEAD(i, j);\n            BEAD(i, j) = <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-comment\">/* mark bottom sum beads */</span>\n        <span class=\"hljs-keyword\">for</span> (i = len - sum; i &lt; len; i++) BEAD(i, j) = <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; len; i++)\n    {\n        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; max &amp;&amp; BEAD(i, j); j++)\n            ;\n        a[i] = j;\n    }\n    <span class=\"hljs-built_in\">free</span>(beads);\n}\n<span class=\"hljs-comment\">/** @} */</span>\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-type\">int</span> n;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter size of array:\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);  <span class=\"hljs-comment\">// E.g. 8 1 2 3</span>\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements of the array\\n&quot;</span>);\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;arr[i]);\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Original array: &quot;</span>);\n    display(arr, n);\n\n    bead_sort(arr, n);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array: &quot;</span>);\n    display(arr, n);\n\n    <span class=\"hljs-built_in\">free</span>(arr);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "aarch64_assembly": {
      "dir": "sorters/bead_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters/bead_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program beadSort64.s */</span>\n<span class=\"hljs-comment\">/* En français tri par gravité ou tri par bille (ne pas confondre \n   avec tri par bulle (bubble sort)) */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly*/</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\">#TableNumber:      .quad   1,3,6,2,5,9,10,8,4,7</span>\n<span class=\"hljs-symbol\">TableNumber:</span>     .quad   <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>\n                  <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span>\n           <span class=\"hljs-comment\">//.equ NBELEMENTS, 4 // for others tests</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>            <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                         <span class=\"hljs-comment\">// entry of program </span>\n \n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber    <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>        <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> beadSort\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber    <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>        <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> displayTable\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber    <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-symbol\">#NBELEMENTS</span>        <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> isSorted               <span class=\"hljs-comment\">// control sort</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">#1</span>                 <span class=\"hljs-comment\">// sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">2</span>f\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok  <span class=\"hljs-comment\">// no !! error sort</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">2</span>:                            <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:                          <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0, <span class=\"hljs-number\">#0</span>                <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8, <span class=\"hljs-symbol\">#EXIT</span>             <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">#0</span>                    <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\n<span class=\"hljs-symbol\">isSorted:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">#0</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]        <span class=\"hljs-comment\">// load A[0]</span>\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x1                    <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]       <span class=\"hljs-comment\">// load A[i]</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,x4                    <span class=\"hljs-comment\">// compare A[i],A[i-1]</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f                      <span class=\"hljs-comment\">// smaller -&gt; error -&gt; return</span>\n    <span class=\"hljs-keyword\">mov</span> x4,x3                    <span class=\"hljs-comment\">// no -&gt; A[i-1] = A[i]</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b                         <span class=\"hljs-comment\">// and loop </span>\n<span class=\"hljs-number\">98</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                    <span class=\"hljs-comment\">// error</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#1</span>                    <span class=\"hljs-comment\">// ok -&gt; return</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                          <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*         bead sort                                              */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of element */</span>\n<span class=\"hljs-comment\">/* Caution registers x2-x12 are not saved */</span>\n<span class=\"hljs-symbol\">beadSort:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!       <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x12,x1                <span class=\"hljs-comment\">// save elements number</span>\n                              <span class=\"hljs-comment\">//search max</span>\n    <span class=\"hljs-keyword\">ldr</span> x10,[x0]              <span class=\"hljs-comment\">// load value A[0] in max</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#1</span>\n<span class=\"hljs-number\">1</span>:                            <span class=\"hljs-comment\">// loop search max</span>\n    <span class=\"hljs-keyword\">cmp</span> x4,x12                <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">21</span>f                   <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x2,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]     <span class=\"hljs-comment\">// load value A[i]</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x10                <span class=\"hljs-comment\">// compare with max</span>\n    csel x10,x2,x10,gt        <span class=\"hljs-comment\">// if greather</span>\n    <span class=\"hljs-keyword\">add</span> x4,x4,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b                      <span class=\"hljs-comment\">// loop</span>\n<span class=\"hljs-number\">21</span>:\n    <span class=\"hljs-keyword\">mul</span> x5,x10,x12            <span class=\"hljs-comment\">// max * elements number</span>\n    <span class=\"hljs-keyword\">lsl</span> x5,x5,<span class=\"hljs-number\">#3</span>              <span class=\"hljs-comment\">// 8 bytes for each number</span>\n    <span class=\"hljs-keyword\">sub</span> <span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-built_in\">sp</span>,x5              <span class=\"hljs-comment\">// allocate on the stack</span>\n    <span class=\"hljs-keyword\">mov</span> <span class=\"hljs-built_in\">fp</span>,<span class=\"hljs-built_in\">sp</span>                 <span class=\"hljs-comment\">// frame pointer = stack address</span>\n                              <span class=\"hljs-comment\">// marks beads</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x0                 <span class=\"hljs-comment\">// save table address</span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                 <span class=\"hljs-comment\">// start index x</span>\n<span class=\"hljs-number\">2</span>:\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">#0</span>                 <span class=\"hljs-comment\">// index y</span>\n    <span class=\"hljs-keyword\">ldr</span> x8,[x3,x0,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]     <span class=\"hljs-comment\">// load A[x]</span>\n    <span class=\"hljs-keyword\">mul</span> x6,x0,x10             <span class=\"hljs-comment\">// compute bead x</span>\n<span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">add</span> x9,x6,x1              <span class=\"hljs-comment\">// compute bead y</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#1</span>                 <span class=\"hljs-comment\">// value to store</span>\n    <span class=\"hljs-keyword\">str</span> x4,[<span class=\"hljs-built_in\">fp</span>,x9,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]     <span class=\"hljs-comment\">// store to stack area</span>\n    <span class=\"hljs-keyword\">add</span> x1,x1,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x1,x8\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">3</span>b\n<span class=\"hljs-number\">31</span>:                           <span class=\"hljs-comment\">// init to zéro the bead end </span>\n    <span class=\"hljs-keyword\">cmp</span> x1,x10                <span class=\"hljs-comment\">// max ?</span>\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">32</span>f\n    <span class=\"hljs-keyword\">add</span> x9,x6,x1              <span class=\"hljs-comment\">// compute bead y</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0</span>\n    <span class=\"hljs-keyword\">str</span> x4,[<span class=\"hljs-built_in\">fp</span>,x9,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\n    <span class=\"hljs-keyword\">add</span> x1,x1,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">31</span>b\n<span class=\"hljs-number\">32</span>:\n    <span class=\"hljs-keyword\">add</span> x0,x0,<span class=\"hljs-number\">#1</span>              <span class=\"hljs-comment\">// increment x</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,x12                <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">2</span>b\n                              <span class=\"hljs-comment\">// count beads</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">#0</span>                 <span class=\"hljs-comment\">// y</span>\n<span class=\"hljs-number\">4</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                 <span class=\"hljs-comment\">// start index x</span>\n    <span class=\"hljs-keyword\">mov</span> x8,<span class=\"hljs-number\">#0</span>                 <span class=\"hljs-comment\">// sum</span>\n<span class=\"hljs-number\">5</span>:\n    <span class=\"hljs-keyword\">mul</span> x6,x0,x10             <span class=\"hljs-comment\">// compute bead x</span>\n    <span class=\"hljs-keyword\">add</span> x9,x6,x1              <span class=\"hljs-comment\">// compute bead y</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[<span class=\"hljs-built_in\">fp</span>,x9,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\n    <span class=\"hljs-keyword\">add</span> x8,x8,x4\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#0</span>\n    <span class=\"hljs-keyword\">str</span> x4,[<span class=\"hljs-built_in\">fp</span>,x9,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]     <span class=\"hljs-comment\">// raz bead</span>\n    <span class=\"hljs-keyword\">add</span> x0,x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,x12\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">5</span>b\n    <span class=\"hljs-keyword\">sub</span> x0,x12,x8             <span class=\"hljs-comment\">// compute end - sum</span>\n<span class=\"hljs-number\">6</span>:\n    <span class=\"hljs-keyword\">mul</span> x6,x0,x10             <span class=\"hljs-comment\">// compute bead x</span>\n    <span class=\"hljs-keyword\">add</span> x9,x6,x1              <span class=\"hljs-comment\">// compute bead y</span>\n    <span class=\"hljs-keyword\">mov</span> x4,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">str</span> x4,[<span class=\"hljs-built_in\">fp</span>,x9,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]     <span class=\"hljs-comment\">// store new bead at end</span>\n    <span class=\"hljs-keyword\">add</span> x0,x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,x12\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">6</span>b\n \n    <span class=\"hljs-keyword\">add</span> x1,x1,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x1,x10\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">4</span>b\n \n                              <span class=\"hljs-comment\">// final compute</span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>                 <span class=\"hljs-comment\">// start index x</span>\n<span class=\"hljs-number\">7</span>:\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">#0</span>                 <span class=\"hljs-comment\">// start index y</span>\n    <span class=\"hljs-keyword\">mul</span> x6,x0,x10             <span class=\"hljs-comment\">// compute bead x</span>\n<span class=\"hljs-number\">8</span>:\n    <span class=\"hljs-keyword\">add</span> x9,x6,x1              <span class=\"hljs-comment\">// compute bead y</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[<span class=\"hljs-built_in\">fp</span>,x9,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]     <span class=\"hljs-comment\">// load bead [x,y]</span>\n    <span class=\"hljs-keyword\">add</span> x1,x1,<span class=\"hljs-number\">#1</span>              <span class=\"hljs-comment\">// add to x1 before str (index start at zéro)</span>\n    <span class=\"hljs-keyword\">cmp</span> x4,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">bne</span> <span class=\"hljs-number\">9</span>f\n    <span class=\"hljs-keyword\">str</span> x1,[x3,x0, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]    <span class=\"hljs-comment\">// store A[x]</span>\n<span class=\"hljs-number\">9</span>:\n    <span class=\"hljs-keyword\">cmp</span> x1,x10                <span class=\"hljs-comment\">// compare max</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">8</span>b\n    <span class=\"hljs-keyword\">add</span> x0,x0,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,x12                <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">7</span>b\n \n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">#0</span>\n    <span class=\"hljs-keyword\">add</span> <span class=\"hljs-built_in\">sp</span>,<span class=\"hljs-built_in\">sp</span>,x5              <span class=\"hljs-comment\">// stack alignement</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>         <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                       <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains elements number  */</span>\n<span class=\"hljs-symbol\">displayTable:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!          <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                    <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">mov</span> x4,x1                    <span class=\"hljs-comment\">// elements number</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">#0</span>\n<span class=\"hljs-number\">1</span>:                               <span class=\"hljs-comment\">// loop display table</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">#3</span>]\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion10              <span class=\"hljs-comment\">// décimal conversion </span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv         <span class=\"hljs-comment\">// insert conversion</span>\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc\n    <span class=\"hljs-keyword\">bl</span> affichageMess             <span class=\"hljs-comment\">// display message</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">#1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,x4                    <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                       <span class=\"hljs-comment\">// no -&gt; loop</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>            <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                          <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>           .quad sZoneConv\n \n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    },
    "ruby": {
      "dir": "sorting/bead_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/bead_sort.rb",
      "code": "<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Array</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">columns</span></span>\n    x = map(&amp;<span class=\"hljs-symbol\">:length</span>).max\n    Array.new(x) <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|row|</span>\n      Array.new(length) { <span class=\"hljs-params\">|column|</span> <span class=\"hljs-keyword\">self</span>[column][row] }.compact\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bead_sort</span><span class=\"hljs-params\">(array)</span></span>\n  array\n    .map { <span class=\"hljs-params\">|element|</span> [<span class=\"hljs-number\">1</span>] * element }\n    .columns\n    .columns\n    .map(&amp;<span class=\"hljs-symbol\">:length</span>)\n    .reverse\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-keyword\">__FILE__</span>\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\n\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\n  p bead_sort(list)\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "David Leal",
      "email": "halfpacho@gmail.com",
      "commits": 1
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "maxbarsukov",
      "email": "maximbarsukov@bk.ru",
      "commits": 1
    },
    {
      "name": "Evgenia Polozova",
      "email": "eugpoloz@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "Jeong Tae Yong",
      "email": "wjdxodyd11@gmail.com",
      "commits": 2
    },
    {
      "name": "marsonya",
      "email": "akhil.marsonya27@gmail.com",
      "commits": 3
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
