{
  "slug": "merge-sort-nr",
  "name": "Merge Sort Nr",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "sorting/merge_sort_nr.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/merge_sort_nr.c",
      "code": "<span class=\"hljs-comment\">/* Program to demonstrate non recursive merge sort */</span>\r\n\r\n<span class=\"hljs-comment\">/* Merge sort is an effective sorting algorithm which falls under divide and\r\nconquer paradigm and produces a stable sort. Merge sort repeatedly breaks down a\r\nlist into several sublists until each sublist consists of a single element and\r\nmerging those sublists in a manner that results into a sorted list.\r\n\r\nBottom-Up Merge Sort Implementation:\r\nThe Bottom-Up merge sort approach uses iterative methodology. It starts with the\r\n“single-element” array, and combines two adjacent elements and also sorting the\r\ntwo at the same time. The combined-sorted arrays are again combined and sorted\r\nwith each other until one single unit of sorted array is achieved. */</span>\r\n\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">mergesort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x[], <span class=\"hljs-type\">int</span> n)</span>;\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x[], <span class=\"hljs-type\">int</span> n)</span>;\r\n\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">mergesort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x[], <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> temp[<span class=\"hljs-number\">50</span>], i, j, k, lb1, lb2, ub1, ub2, size;\r\n\r\n    size = <span class=\"hljs-number\">1</span>;\r\n    <span class=\"hljs-keyword\">while</span> (size &lt; n)\r\n    {\r\n        lb1 = <span class=\"hljs-number\">0</span>;\r\n        k = <span class=\"hljs-number\">0</span>;\r\n\r\n        <span class=\"hljs-keyword\">while</span> (lb1 + size &lt; n)\r\n        {\r\n            lb2 = lb1 + size;\r\n            ub1 = lb2 - <span class=\"hljs-number\">1</span>;\r\n            <span class=\"hljs-keyword\">if</span> (ub1 + size &lt; n)\r\n                ub2 = ub1 + size;\r\n            <span class=\"hljs-keyword\">else</span>\r\n                ub2 = n - <span class=\"hljs-number\">1</span>;\r\n\r\n            i = lb1;\r\n            j = lb2;\r\n\r\n            <span class=\"hljs-keyword\">while</span> (i &lt;= ub1 &amp;&amp; j &lt;= ub2)\r\n                <span class=\"hljs-keyword\">if</span> (x[i] &lt; x[j])\r\n                    temp[k++] = x[i++];\r\n                <span class=\"hljs-keyword\">else</span>\r\n                    temp[k++] = x[j++];\r\n\r\n            <span class=\"hljs-keyword\">while</span> (i &lt;= ub1) temp[k++] = x[i++];\r\n\r\n            <span class=\"hljs-keyword\">while</span> (j &lt;= ub2) temp[k++] = x[j++];\r\n\r\n            lb1 = ub2 + <span class=\"hljs-number\">1</span>;\r\n        }\r\n\r\n        <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= ub2; i++) x[i] = temp[i];\r\n\r\n        size = size * <span class=\"hljs-number\">2</span>;\r\n\r\n        show(x, n);\r\n    }\r\n}\r\n\r\n<span class=\"hljs-comment\">// function to show each pass</span>\r\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">show</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x[], <span class=\"hljs-type\">int</span> n)</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i;\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, x[i]);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n\\n&quot;</span>);\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>  <span class=\"hljs-comment\">// main function</span>\r\n{\r\n    <span class=\"hljs-type\">int</span> i, n, x[<span class=\"hljs-number\">20</span>];\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of elements: &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;n);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the elements:\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;x[i]);\r\n\r\n    mergesort(x, n);\r\n\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Sorted array is as shown:\\n&quot;</span>);\r\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, x[i]);\r\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\">/* Output of the Program*/</span>\r\n<span class=\"hljs-comment\">/*\r\nEnter the number of elements: 5\r\nEnter the elements:\r\n15\r\n14\r\n13\r\n12\r\n11\r\n14 15 12 13 11\r\n\r\n12 13 14 15 11\r\n\r\n11 12 13 14 15\r\n\r\nSorted array is as shown:\r\n11 12 13 14 15\r\n*/</span>\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
