{
  "slug": "pid",
  "name": "Pid",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/pid.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/pid.c",
      "code": "<span class=\"hljs-comment\">/**\r\n * PID Controller\r\n *\r\n * The PID controller is a linear control algorithm that has three terms:\r\n *  - Proportional: A simple scaling of the error value by a gain kP\r\n *  - Integral: Integration of the error value over time, then multipled by gain\r\n * kI\r\n *  - Derivative: Rate of change of the error value over time, multiplied by\r\n * gain kD\r\n *\r\n * Terms of the controller can be removed by setting their gain to 0, creating a\r\n * PI (kD = 0) or PD (kI = 0) controller. Depending on the control problem at\r\n * hand, some terms may not increase the performance of the system, or may have\r\n * a negative effect.\r\n *\r\n * For a more mathematical expanation of the PID Controller, see\r\n * https://en.wikipedia.org/wiki/PID_controller\r\n *\r\n * Limitations of this implementation:\r\n *  - Since this implementation is just for demonstration, the pid_step function\r\n * takes the dt as a parameter, and it can be provided by the user in main().\r\n * This allows deterministic experimentation with the algorithm, rather than\r\n * using time(NULL) which would make the function non-deterministic.\r\n *\r\n * Inputs: e(t) - Current error at time t. For example, how far a servo is off\r\n * the desired angle Output: u(t) - Controller output at time t.\r\n */</span>\r\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\r\n\r\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">pid</span>\r\n{</span>\r\n    <span class=\"hljs-comment\">// Controller gains</span>\r\n    <span class=\"hljs-type\">float</span> kP;\r\n    <span class=\"hljs-type\">float</span> kI;\r\n    <span class=\"hljs-type\">float</span> kD;\r\n\r\n    <span class=\"hljs-comment\">// State variables</span>\r\n    <span class=\"hljs-type\">float</span> lastError;\r\n    <span class=\"hljs-type\">float</span> integral;\r\n};\r\n\r\n<span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">pid_step</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> pid *controller, <span class=\"hljs-type\">float</span> dt, <span class=\"hljs-type\">float</span> error)</span>\r\n{\r\n    <span class=\"hljs-comment\">// Calculate p term</span>\r\n    <span class=\"hljs-type\">float</span> p = error * controller-&gt;kP;\r\n\r\n    <span class=\"hljs-comment\">// Calculate i term</span>\r\n    controller-&gt;integral += error * dt * controller-&gt;kI;\r\n\r\n    <span class=\"hljs-comment\">// Calculate d term, taking care to not divide by zero</span>\r\n    <span class=\"hljs-type\">float</span> d =\r\n        dt == <span class=\"hljs-number\">0</span> ? <span class=\"hljs-number\">0</span> : ((error - controller-&gt;lastError) / dt) * controller-&gt;kD;\r\n    controller-&gt;lastError = error;\r\n\r\n    <span class=\"hljs-keyword\">return</span> p + controller-&gt;integral + d;\r\n}\r\n\r\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\r\n{\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;PID Controller Example\\n&quot;</span>);\r\n\r\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">pid</span> <span class=\"hljs-title\">controller</span> =</span> {.lastError = <span class=\"hljs-number\">0</span>, .integral = <span class=\"hljs-number\">0</span>};\r\n\r\n    <span class=\"hljs-comment\">// Take the controller gains from the user</span>\r\n    <span class=\"hljs-built_in\">printf</span>(\r\n        <span class=\"hljs-string\">&quot;Please enter controller gains in format kP, kI, KD. For example, &quot;</span>\r\n        <span class=\"hljs-string\">&quot;\\&quot;1.2 2.1 3.2\\&quot;\\n&gt; &quot;</span>);\r\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%f %f %f&quot;</span>, &amp;controller.kP, &amp;controller.kI, &amp;controller.kD);\r\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Using kP: %f, kI: %f, kD: %f\\n&quot;</span>, controller.kP, controller.kI,\r\n           controller.kD);\r\n\r\n    <span class=\"hljs-comment\">// How often the pid_step algorithm expects to be called. In a real life</span>\r\n    <span class=\"hljs-comment\">// scenario this would be provided by calling time(NULL) - last_time, or by</span>\r\n    <span class=\"hljs-comment\">// calling the function reliably at X Hz (using a timer or RTOS etc) For</span>\r\n    <span class=\"hljs-comment\">// demonstration of this algorithm though, it is defined below as 1 second,</span>\r\n    <span class=\"hljs-comment\">// allowing easy testing of integral and derivative terms.</span>\r\n    <span class=\"hljs-type\">float</span> time_step = <span class=\"hljs-number\">1</span>;\r\n\r\n    <span class=\"hljs-type\">float</span> error_value;\r\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-number\">1</span>)\r\n    {\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter error value\\n&gt;&quot;</span>);\r\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%f&quot;</span>, &amp;error_value);\r\n\r\n        <span class=\"hljs-type\">float</span> output = pid_step(&amp;controller, time_step, error_value);\r\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Output: %f\\n&quot;</span>, output);\r\n    }\r\n}\r\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
