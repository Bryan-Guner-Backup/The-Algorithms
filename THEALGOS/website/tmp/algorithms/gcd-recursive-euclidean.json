{
  "slug": "gcd-recursive-euclidean",
  "name": "Gcd Recursive Euclidean",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/gcd_recursive_euclidean.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/gcd_recursive_euclidean.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Compute the greatest common denominator of two integers using\n * *recursive form* of\n * [Euclidean algorithm](https://en.wikipedia.org/wiki/Euclidean_algorithm)\n *\n * @see gcd_iterative_euclidean.cpp, gcd_of_n_numbers.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * algorithm\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">gcd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> num1, <span class=\"hljs-type\">int</span> num2)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (num1 &lt;= <span class=\"hljs-number\">0</span> | num2 &lt;= <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">throw</span> std::<span class=\"hljs-built_in\">domain_error</span>(<span class=\"hljs-string\">&quot;Euclidean algorithm domain is for ints &gt; 0&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (num1 == num2) {\n        <span class=\"hljs-keyword\">return</span> num1;\n    }\n\n    <span class=\"hljs-comment\">// Everything divides 0</span>\n    <span class=\"hljs-keyword\">if</span> (num1 == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> num2;\n    <span class=\"hljs-keyword\">if</span> (num2 == <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span> num1;\n\n    <span class=\"hljs-comment\">// base case</span>\n    <span class=\"hljs-keyword\">if</span> (num1 == num2)\n        <span class=\"hljs-keyword\">return</span> num1;\n\n    <span class=\"hljs-comment\">// a is greater</span>\n    <span class=\"hljs-keyword\">if</span> (num1 &gt; num2)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">gcd</span>(num1 - num2, num2);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">gcd</span>(num1, num2 - num1);\n}\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;gcd of 120,7 is &quot;</span> &lt;&lt; (<span class=\"hljs-built_in\">gcd</span>(<span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">7</span>)) &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">try</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;gcd of -120,10 is &quot;</span> &lt;&lt; <span class=\"hljs-built_in\">gcd</span>(<span class=\"hljs-number\">-120</span>, <span class=\"hljs-number\">10</span>) &lt;&lt; std::endl;\n    } <span class=\"hljs-built_in\">catch</span> (<span class=\"hljs-keyword\">const</span> std::domain_error &amp;e) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Error handling was successful&quot;</span> &lt;&lt; std::endl;\n    }\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;gcd of 312,221 is &quot;</span> &lt;&lt; (<span class=\"hljs-built_in\">gcd</span>(<span class=\"hljs-number\">312</span>, <span class=\"hljs-number\">221</span>)) &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;gcd of 289,204 is &quot;</span> &lt;&lt; (<span class=\"hljs-built_in\">gcd</span>(<span class=\"hljs-number\">289</span>, <span class=\"hljs-number\">204</span>)) &lt;&lt; std::endl;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
