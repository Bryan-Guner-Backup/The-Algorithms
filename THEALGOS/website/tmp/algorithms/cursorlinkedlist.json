{
  "slug": "cursorlinkedlist",
  "name": "CursorLinkedList",
  "categories": ["datastructures", "list"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/Lists/CursorLinkedList.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Lists/CursorLinkedList.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Lists;\n\n<span class=\"hljs-keyword\">import</span> java.util.Objects;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CursorLinkedList</span>&lt;T&gt; {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>&lt;T&gt; {\n\n    T element;\n    <span class=\"hljs-type\">int</span> next;\n\n    Node(T element, <span class=\"hljs-type\">int</span> next) {\n      <span class=\"hljs-built_in\">this</span>.element = element;\n      <span class=\"hljs-built_in\">this</span>.next = next;\n    }\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> os;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> head;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Node&lt;T&gt;[] cursorSpace;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> count;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">CURSOR_SPACE_SIZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100</span>;\n\n  {\n    <span class=\"hljs-comment\">// init at loading time</span>\n    cursorSpace = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>[CURSOR_SPACE_SIZE];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; CURSOR_SPACE_SIZE; i++) {\n      cursorSpace[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>&lt;&gt;(<span class=\"hljs-literal\">null</span>, i + <span class=\"hljs-number\">1</span>);\n    }\n    cursorSpace[CURSOR_SPACE_SIZE - <span class=\"hljs-number\">1</span>].next = <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CursorLinkedList</span><span class=\"hljs-params\">()</span> {\n    os = <span class=\"hljs-number\">0</span>;\n    count = <span class=\"hljs-number\">0</span>;\n    head = -<span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">printList</span><span class=\"hljs-params\">()</span> {\n\n    <span class=\"hljs-keyword\">if</span> (head != -<span class=\"hljs-number\">1</span>) {\n\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> head;\n      <span class=\"hljs-keyword\">while</span> (start != -<span class=\"hljs-number\">1</span>) {\n\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> cursorSpace[start].element;\n        System.out.println(element.toString());\n        start = cursorSpace[start].next;\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@return</span> the logical index of the element within the list , not the actual index of the\n   *     [cursorSpace] array\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">indexOf</span><span class=\"hljs-params\">(T element)</span> {\n\n    Objects.requireNonNull(element);\n    Node&lt;T&gt; iterator = cursorSpace[head];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; count; i++) {\n      <span class=\"hljs-keyword\">if</span> (iterator.element.equals(element)) {\n        <span class=\"hljs-keyword\">return</span> i;\n      }\n      iterator = cursorSpace[iterator.next];\n    }\n\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@param</span> position , the logical index of the element , not the actual one within the\n   *     [cursorSpace] array . this method should be used to get the index give by indexOf() method.\n   * <span class=\"hljs-doctag\">@return</span>\n   */</span>\n  <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> position)</span> {\n\n    <span class=\"hljs-keyword\">if</span> (position &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; position &lt; count) {\n\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">start</span> <span class=\"hljs-operator\">=</span> head;\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">counter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">while</span> (start != -<span class=\"hljs-number\">1</span>) {\n\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> cursorSpace[start].element;\n        <span class=\"hljs-keyword\">if</span> (counter == position) {\n          <span class=\"hljs-keyword\">return</span> element;\n        }\n\n        start = cursorSpace[start].next;\n        counter++;\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeByIndex</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> {\n\n    <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index &lt; count) {\n\n      <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">element</span> <span class=\"hljs-operator\">=</span> get(index);\n      remove(element);\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(T element)</span> {\n\n    Objects.requireNonNull(element);\n\n    <span class=\"hljs-comment\">// case element is in the head</span>\n    <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">temp_element</span> <span class=\"hljs-operator\">=</span> cursorSpace[head].element;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp_next</span> <span class=\"hljs-operator\">=</span> cursorSpace[head].next;\n    <span class=\"hljs-keyword\">if</span> (temp_element.equals(element)) {\n      free(head);\n      head = temp_next;\n    } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// otherwise cases</span>\n\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">prev_index</span> <span class=\"hljs-operator\">=</span> head;\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">current_index</span> <span class=\"hljs-operator\">=</span> cursorSpace[prev_index].next;\n\n      <span class=\"hljs-keyword\">while</span> (current_index != -<span class=\"hljs-number\">1</span>) {\n\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">current_element</span> <span class=\"hljs-operator\">=</span> cursorSpace[current_index].element;\n        <span class=\"hljs-keyword\">if</span> (current_element.equals(element)) {\n          cursorSpace[prev_index].next = cursorSpace[current_index].next;\n          free(current_index);\n          <span class=\"hljs-keyword\">break</span>;\n        }\n\n        prev_index = current_index;\n        current_index = cursorSpace[prev_index].next;\n      }\n    }\n\n    count--;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">free</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span> {\n\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">os_node</span> <span class=\"hljs-operator\">=</span> cursorSpace[os];\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">os_next</span> <span class=\"hljs-operator\">=</span> os_node.next;\n    cursorSpace[os].next = index;\n    cursorSpace[index].element = <span class=\"hljs-literal\">null</span>;\n    cursorSpace[index].next = os_next;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">append</span><span class=\"hljs-params\">(T element)</span> {\n\n    Objects.requireNonNull(element);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">availableIndex</span> <span class=\"hljs-operator\">=</span> alloc();\n    cursorSpace[availableIndex].element = element;\n\n    <span class=\"hljs-keyword\">if</span> (head == -<span class=\"hljs-number\">1</span>) {\n      head = availableIndex;\n    }\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">iterator</span> <span class=\"hljs-operator\">=</span> head;\n    <span class=\"hljs-keyword\">while</span> (cursorSpace[iterator].next != -<span class=\"hljs-number\">1</span>) {\n      iterator = cursorSpace[iterator].next;\n    }\n\n    cursorSpace[iterator].next = availableIndex;\n    cursorSpace[availableIndex].next = -<span class=\"hljs-number\">1</span>;\n\n    count++;\n  }\n\n  <span class=\"hljs-comment\">/** <span class=\"hljs-doctag\">@return</span> the index of the next available node */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">alloc</span><span class=\"hljs-params\">()</span> {\n\n    <span class=\"hljs-comment\">// 1- get the index at which the os is pointing</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">availableNodeIndex</span> <span class=\"hljs-operator\">=</span> cursorSpace[os].next;\n\n    <span class=\"hljs-keyword\">if</span> (availableNodeIndex == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutOfMemoryError</span>();\n    }\n\n    <span class=\"hljs-comment\">// 2- make the os point to the next of the  @var{availableNodeIndex}</span>\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">availableNext</span> <span class=\"hljs-operator\">=</span> cursorSpace[availableNodeIndex].next;\n    cursorSpace[os].next = availableNext;\n\n    <span class=\"hljs-comment\">// this to indicate an end of the list , helpful at testing since any err</span>\n    <span class=\"hljs-comment\">// would throw an outOfBoundException</span>\n    cursorSpace[availableNodeIndex].next = -<span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">return</span> availableNodeIndex;\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "saeed jinat",
      "email": "saeed.jeebat@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
