{
  "slug": "hashing",
  "name": "Hashing",
  "categories": ["datastructures", "hashmap"],
  "body": {},
  "implementations": {
    "dart": {
      "dir": "data_structures/HashMap/Hashing.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/data_structures/HashMap/Hashing.dart",
      "code": "<span class=\"hljs-comment\">//Author:Shawn</span>\n<span class=\"hljs-comment\">//Email:stepfencurryxiao@gmail.com</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n  <span class=\"hljs-built_in\">int</span> data;\n  Node next;\n\n  Node(<span class=\"hljs-built_in\">int</span> data) {\n    <span class=\"hljs-keyword\">this</span>.data = data;\n    <span class=\"hljs-keyword\">this</span>.next = <span class=\"hljs-keyword\">null</span>;\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span> </span>{\n  Node head;\n  <span class=\"hljs-built_in\">int</span> size;\n\n  LinkedList() {\n    head = <span class=\"hljs-keyword\">null</span>;\n    size = <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-keyword\">void</span> insert(<span class=\"hljs-built_in\">int</span> data) {\n    Node newnode = <span class=\"hljs-keyword\">new</span> Node(data);\n\n    size++;\n\n    <span class=\"hljs-keyword\">if</span> (head == <span class=\"hljs-keyword\">null</span>) {\n      head = newnode;\n    } <span class=\"hljs-keyword\">else</span> {\n      newnode.next = head;\n      head = newnode;\n    }\n  }\n\n  <span class=\"hljs-keyword\">void</span> delete(<span class=\"hljs-built_in\">int</span> data) {\n    <span class=\"hljs-keyword\">if</span> (size == <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;underFlow!&quot;</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      Node curr = head;\n      <span class=\"hljs-keyword\">if</span> (curr.data == data) {\n        head = curr.next;\n        size--;\n        <span class=\"hljs-keyword\">return</span>;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">while</span> (curr.next.next != <span class=\"hljs-keyword\">null</span>) {\n          <span class=\"hljs-keyword\">if</span> (curr.next.data == data) {\n            curr.next = curr.next.next;\n            <span class=\"hljs-keyword\">return</span>;\n          }\n        }\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Key not found&quot;</span>);\n      }\n    }\n  }\n\n  <span class=\"hljs-keyword\">void</span> display() {\n    Node temp = head;\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-keyword\">null</span>) {\n      <span class=\"hljs-built_in\">print</span>(temp.data.toString());\n      temp = temp.next;\n    }\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n  }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HashMap</span> </span>{\n  <span class=\"hljs-built_in\">int</span> hsize;\n  <span class=\"hljs-built_in\">List</span>&lt;LinkedList&gt; buckets;\n\n  HashMap(<span class=\"hljs-built_in\">int</span> hsize) {\n    buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">List</span>&lt;LinkedList&gt;(hsize);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n      buckets[i] = <span class=\"hljs-keyword\">new</span> LinkedList();\n    }\n    <span class=\"hljs-keyword\">this</span>.hsize = hsize;\n  }\n\n  <span class=\"hljs-built_in\">int</span> hashing(<span class=\"hljs-built_in\">int</span> key) {\n    <span class=\"hljs-built_in\">int</span> hash = key % hsize;\n    <span class=\"hljs-keyword\">if</span> (hash &lt; <span class=\"hljs-number\">0</span>) {\n      hash += hsize;\n    }\n    <span class=\"hljs-keyword\">return</span> hash;\n  }\n\n  <span class=\"hljs-keyword\">void</span> insertHash(<span class=\"hljs-built_in\">int</span> key) {\n    <span class=\"hljs-built_in\">int</span> hash = hashing(key);\n    buckets[hash].insert(key);\n  }\n\n  <span class=\"hljs-keyword\">void</span> deleteHash(<span class=\"hljs-built_in\">int</span> key) {\n    <span class=\"hljs-built_in\">int</span> hash = hashing(key);\n    buckets[hash].delete(key);\n  }\n\n  <span class=\"hljs-keyword\">void</span> displayHashtable() {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Bucket <span class=\"hljs-subst\">$i</span>:&quot;</span>);\n      buckets[i].display();\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  HashMap h = <span class=\"hljs-keyword\">new</span> HashMap(<span class=\"hljs-number\">7</span>);\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Add key 5&quot;</span>);\n  h.insertHash(<span class=\"hljs-number\">5</span>);\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Add key 28&quot;</span>);\n  h.insertHash(<span class=\"hljs-number\">28</span>);\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Add key 1&quot;</span>);\n  h.insertHash(<span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Delete Key 28&quot;</span>);\n  h.deleteHash(<span class=\"hljs-number\">28</span>);\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Print Table:\\n&quot;</span>);\n  h.displayHashtable();\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Delete Key 1&quot;</span>);\n  h.deleteHash(<span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Print Table:\\n&quot;</span>);\n  h.displayHashtable();\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Stepfen Shawn",
      "email": "m18824909883@163.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
