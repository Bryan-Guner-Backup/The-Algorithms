{
  "slug": "merge-two-binary-trees",
  "name": "Merge Two Binary Trees",
  "categories": ["datastructures", "binarytree"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/binary_tree/merge_two_binary_trees.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/binary_tree/merge_two_binary_trees.py",
      "code": "<span class=\"hljs-comment\">#!/usr/local/bin/python3</span>\n<span class=\"hljs-string\">&quot;&quot;&quot;\nProblem Description: Given two binary tree, return the merged tree.\nThe rule for merging is that if two nodes overlap, then put the value sum of\nboth nodes to the new value of the merged node. Otherwise, the NOT null node\nwill be used as the node of new tree.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Optional</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    A binary node has value variable and pointers to its left and right node.\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, value: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">0</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.value = value\n        self.left: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n        self.right: <span class=\"hljs-type\">Optional</span>[Node] = <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">merge_two_binary_trees</span>(<span class=\"hljs-params\">tree1: <span class=\"hljs-type\">Optional</span>[Node], tree2: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; Node:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Returns root node of the merged tree.\n\n    &gt;&gt;&gt; tree1 = Node(5)\n    &gt;&gt;&gt; tree1.left = Node(6)\n    &gt;&gt;&gt; tree1.right = Node(7)\n    &gt;&gt;&gt; tree1.left.left = Node(2)\n    &gt;&gt;&gt; tree2 = Node(4)\n    &gt;&gt;&gt; tree2.left = Node(5)\n    &gt;&gt;&gt; tree2.right = Node(8)\n    &gt;&gt;&gt; tree2.left.right = Node(1)\n    &gt;&gt;&gt; tree2.right.right = Node(4)\n    &gt;&gt;&gt; merged_tree = merge_two_binary_trees(tree1, tree2)\n    &gt;&gt;&gt; print_preorder(merged_tree)\n    9\n    11\n    2\n    1\n    15\n    4\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> tree1 <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> tree2\n    <span class=\"hljs-keyword\">if</span> tree2 <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">return</span> tree1\n\n    tree1.value = tree1.value + tree2.value\n    tree1.left = merge_two_binary_trees(tree1.left, tree2.left)\n    tree1.right = merge_two_binary_trees(tree1.right, tree2.right)\n    <span class=\"hljs-keyword\">return</span> tree1\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_preorder</span>(<span class=\"hljs-params\">root: <span class=\"hljs-type\">Optional</span>[Node]</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Print pre-order traversal of the tree.\n\n    &gt;&gt;&gt; root = Node(1)\n    &gt;&gt;&gt; root.left = Node(2)\n    &gt;&gt;&gt; root.right = Node(3)\n    &gt;&gt;&gt; print_preorder(root)\n    1\n    2\n    3\n    &gt;&gt;&gt; print_preorder(root.right)\n    3\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> root:\n        <span class=\"hljs-built_in\">print</span>(root.value)\n        print_preorder(root.left)\n        print_preorder(root.right)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    tree1 = Node(<span class=\"hljs-number\">1</span>)\n    tree1.left = Node(<span class=\"hljs-number\">2</span>)\n    tree1.right = Node(<span class=\"hljs-number\">3</span>)\n    tree1.left.left = Node(<span class=\"hljs-number\">4</span>)\n\n    tree2 = Node(<span class=\"hljs-number\">2</span>)\n    tree2.left = Node(<span class=\"hljs-number\">4</span>)\n    tree2.right = Node(<span class=\"hljs-number\">6</span>)\n    tree2.left.right = Node(<span class=\"hljs-number\">9</span>)\n    tree2.right.right = Node(<span class=\"hljs-number\">5</span>)\n\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Tree1 is: &quot;</span>)\n    print_preorder(tree1)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Tree2 is: &quot;</span>)\n    print_preorder(tree2)\n    merged_tree = merge_two_binary_trees(tree1, tree2)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Merged Tree is: &quot;</span>)\n    print_preorder(merged_tree)\n"
    }
  },
  "contributors": [
    {
      "name": "Gaurav Jindal",
      "email": "54955413+jindal2309@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
