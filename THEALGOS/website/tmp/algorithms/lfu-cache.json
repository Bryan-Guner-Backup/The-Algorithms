{
  "slug": "lfu-cache",
  "name": "Lfu Cache",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "other/lfu_cache.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/other/lfu_cache.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Callable</span>, <span class=\"hljs-type\">Optional</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Double Linked List Node built specifically for LFU Cache\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, key: <span class=\"hljs-built_in\">int</span>, val: <span class=\"hljs-built_in\">int</span></span>):\n        self.key = key\n        self.val = val\n        self.freq = <span class=\"hljs-number\">0</span>\n        self.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n        self.prev = <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Double Linked List built specifically for LFU Cache\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.head = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\n        self.rear = DoubleLinkedListNode(<span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>)\n        self.head.<span class=\"hljs-built_in\">next</span>, self.rear.prev = self.rear, self.head\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Adds the given node at the head of the list and shifting it to proper position\n        &quot;&quot;&quot;</span>\n\n        temp = self.rear.prev\n\n        self.rear.prev, node.<span class=\"hljs-built_in\">next</span> = node, self.rear\n        temp.<span class=\"hljs-built_in\">next</span>, node.prev = node, temp\n        node.freq += <span class=\"hljs-number\">1</span>\n        self._position_node(node)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">_position_node</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-keyword\">while</span> node.prev.key <span class=\"hljs-keyword\">and</span> node.prev.freq &gt; node.freq:\n            node1, node2 = node, node.prev\n            node1.prev, node2.<span class=\"hljs-built_in\">next</span> = node2.prev, node1.prev\n            node1.<span class=\"hljs-built_in\">next</span>, node2.prev = node2, node1\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">self, node: DoubleLinkedListNode</span>) -&gt; DoubleLinkedListNode:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Removes and returns the given node from the list\n        &quot;&quot;&quot;</span>\n\n        temp_last, temp_next = node.prev, node.<span class=\"hljs-built_in\">next</span>\n        node.prev, node.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>, <span class=\"hljs-literal\">None</span>\n        temp_last.<span class=\"hljs-built_in\">next</span>, temp_next.prev = temp_next, temp_last\n        <span class=\"hljs-keyword\">return</span> node\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LFUCache</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    LFU Cache to store a given capacity of data. Can be used as a stand-alone object\n    or as a function decorator.\n\n    &gt;&gt;&gt; cache = LFUCache(2)\n    &gt;&gt;&gt; cache.set(1, 1)\n    &gt;&gt;&gt; cache.set(2, 2)\n    &gt;&gt;&gt; cache.get(1)\n    1\n    &gt;&gt;&gt; cache.set(3, 3)\n    &gt;&gt;&gt; cache.get(2)  # None is returned\n    &gt;&gt;&gt; cache.set(4, 4)\n    &gt;&gt;&gt; cache.get(1)  # None is returned\n    &gt;&gt;&gt; cache.get(3)\n    3\n    &gt;&gt;&gt; cache.get(4)\n    4\n    &gt;&gt;&gt; cache\n    CacheInfo(hits=3, misses=2, capacity=2, current_size=2)\n    &gt;&gt;&gt; @LFUCache.decorator(100)\n    ... def fib(num):\n    ...     if num in (1, 2):\n    ...         return 1\n    ...     return fib(num - 1) + fib(num - 2)\n\n    &gt;&gt;&gt; for i in range(1, 101):\n    ...     res = fib(i)\n\n    &gt;&gt;&gt; fib.cache_info()\n    CacheInfo(hits=196, misses=100, capacity=100, current_size=100)\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># class variable to map the decorator functions to their respective instance</span>\n    decorator_function_to_instance_map = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, capacity: <span class=\"hljs-built_in\">int</span></span>):\n        self.<span class=\"hljs-built_in\">list</span> = DoubleLinkedList()\n        self.capacity = capacity\n        self.num_keys = <span class=\"hljs-number\">0</span>\n        self.hits = <span class=\"hljs-number\">0</span>\n        self.miss = <span class=\"hljs-number\">0</span>\n        self.cache = {}\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__repr__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the details for the cache instance\n        [hits, misses, capacity, current_size]\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> (\n            <span class=\"hljs-string\">f&quot;CacheInfo(hits=<span class=\"hljs-subst\">{self.hits}</span>, misses=<span class=\"hljs-subst\">{self.miss}</span>, &quot;</span>\n            <span class=\"hljs-string\">f&quot;capacity=<span class=\"hljs-subst\">{self.capacity}</span>, current_size=<span class=\"hljs-subst\">{self.num_keys}</span>)&quot;</span>\n        )\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__contains__</span>(<span class=\"hljs-params\">self, key: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; cache = LFUCache(1)\n        &gt;&gt;&gt; 1 in cache\n        False\n        &gt;&gt;&gt; cache.set(1, 1)\n        &gt;&gt;&gt; 1 in cache\n        True\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> key <span class=\"hljs-keyword\">in</span> self.cache\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self, key: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">Optional</span>[<span class=\"hljs-built_in\">int</span>]:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Returns the value for the input key and updates the Double Linked List. Returns\n        None if key is not present in cache\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">in</span> self.cache:\n            self.hits += <span class=\"hljs-number\">1</span>\n            self.<span class=\"hljs-built_in\">list</span>.add(self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key]))\n            <span class=\"hljs-keyword\">return</span> self.cache[key].val\n        self.miss += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">self, key: <span class=\"hljs-built_in\">int</span>, value: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Sets the value for the input key and updates the Double Linked List\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">if</span> key <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> self.cache:\n            <span class=\"hljs-keyword\">if</span> self.num_keys &gt;= self.capacity:\n                key_to_delete = self.<span class=\"hljs-built_in\">list</span>.head.<span class=\"hljs-built_in\">next</span>.key\n                self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key_to_delete])\n                <span class=\"hljs-keyword\">del</span> self.cache[key_to_delete]\n                self.num_keys -= <span class=\"hljs-number\">1</span>\n            self.cache[key] = DoubleLinkedListNode(key, value)\n            self.<span class=\"hljs-built_in\">list</span>.add(self.cache[key])\n            self.num_keys += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">else</span>:\n            node = self.<span class=\"hljs-built_in\">list</span>.remove(self.cache[key])\n            node.val = value\n            self.<span class=\"hljs-built_in\">list</span>.add(node)\n\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decorator</span>(<span class=\"hljs-params\">size: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">128</span></span>):\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Decorator version of LFU Cache\n        &quot;&quot;&quot;</span>\n\n        <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_inner</span>(<span class=\"hljs-params\">func: <span class=\"hljs-type\">Callable</span></span>):\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_decorator_wrapper</span>(<span class=\"hljs-params\">*args, **kwargs</span>):\n                <span class=\"hljs-keyword\">if</span> func <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> LFUCache.decorator_function_to_instance_map:\n                    LFUCache.decorator_function_to_instance_map[func] = LFUCache(size)\n\n                result = LFUCache.decorator_function_to_instance_map[func].get(args[<span class=\"hljs-number\">0</span>])\n                <span class=\"hljs-keyword\">if</span> result <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n                    result = func(*args, **kwargs)\n                    LFUCache.decorator_function_to_instance_map[func].<span class=\"hljs-built_in\">set</span>(\n                        args[<span class=\"hljs-number\">0</span>], result\n                    )\n                <span class=\"hljs-keyword\">return</span> result\n\n            <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">cache_info</span>():\n                <span class=\"hljs-keyword\">return</span> LFUCache.decorator_function_to_instance_map[func]\n\n            cache_decorator_wrapper.cache_info = cache_info\n\n            <span class=\"hljs-keyword\">return</span> cache_decorator_wrapper\n\n        <span class=\"hljs-keyword\">return</span> cache_decorator_inner\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "javascript": {
      "dir": "Cache/LFUCache.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Cache/LFUCache.js",
      "code": "<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span> {\n  <span class=\"hljs-comment\">// Double Linked List Node built specifically for LFU Cache</span>\n  <span class=\"hljs-title function_\">constructor</span> (key, val) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">key</span> = key\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">val</span> = val\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">freq</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">next</span> = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">prev</span> = <span class=\"hljs-literal\">null</span>\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">DoubleLinkedList</span> {\n  <span class=\"hljs-comment\">// Double Linked List built specifically for LFU Cache</span>\n  <span class=\"hljs-title function_\">constructor</span> () {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span>.<span class=\"hljs-property\">prev</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">head</span>\n  }\n\n  _positionNode (node) {\n    <span class=\"hljs-comment\">// Helper function to position a node based on the frequency of the key</span>\n    <span class=\"hljs-keyword\">while</span> (node.<span class=\"hljs-property\">prev</span>.<span class=\"hljs-property\">key</span> &amp;&amp; node.<span class=\"hljs-property\">prev</span>.<span class=\"hljs-property\">freq</span> &gt; node.<span class=\"hljs-property\">freq</span>) {\n      <span class=\"hljs-keyword\">const</span> node1 = node\n      <span class=\"hljs-keyword\">const</span> node2 = node.<span class=\"hljs-property\">prev</span>\n      node1.<span class=\"hljs-property\">prev</span> = node2.<span class=\"hljs-property\">prev</span>\n      node2.<span class=\"hljs-property\">next</span> = node1.<span class=\"hljs-property\">prev</span>\n      node1.<span class=\"hljs-property\">next</span> = node2\n      node2.<span class=\"hljs-property\">prev</span> = node1\n    }\n  }\n\n  add (node) {\n    <span class=\"hljs-comment\">// Adds the given node to the end of the list (before rear) and positions it based on frequency</span>\n    <span class=\"hljs-keyword\">const</span> temp = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span>.<span class=\"hljs-property\">prev</span>\n    temp.<span class=\"hljs-property\">next</span> = node\n    node.<span class=\"hljs-property\">prev</span> = temp\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span>.<span class=\"hljs-property\">prev</span> = node\n    node.<span class=\"hljs-property\">next</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">rear</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">_positionNode</span>(node)\n  }\n\n  remove (node) {\n    <span class=\"hljs-comment\">// Removes and returns the given node from the list</span>\n    <span class=\"hljs-keyword\">const</span> tempLast = node.<span class=\"hljs-property\">prev</span>\n    <span class=\"hljs-keyword\">const</span> tempNext = node.<span class=\"hljs-property\">next</span>\n    node.<span class=\"hljs-property\">prev</span> = <span class=\"hljs-literal\">null</span>\n    node.<span class=\"hljs-property\">next</span> = <span class=\"hljs-literal\">null</span>\n    tempLast.<span class=\"hljs-property\">next</span> = tempNext\n    tempNext.<span class=\"hljs-property\">prev</span> = tempLast\n\n    <span class=\"hljs-keyword\">return</span> node\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LFUCache</span> {\n  <span class=\"hljs-comment\">// LFU Cache to store a given capacity of data</span>\n  <span class=\"hljs-comment\">// The Double Linked List is used to store the order of deletion from the cache</span>\n  <span class=\"hljs-comment\">// The rear.prev holds the most frequently used key and the head.next holds the least used key</span>\n  <span class=\"hljs-comment\">// When the number of elements reaches the capacity, the least frequently used item is removed before adding the next key</span>\n  <span class=\"hljs-title function_\">constructor</span> (capacity) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedList</span>()\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span> = capacity\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">numKeys</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">miss</span> = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span> = {}\n  }\n\n  cacheInfo () {\n    <span class=\"hljs-comment\">// Return the details for the cache instance [hits, misses, capacity, current_size]</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`CacheInfo(hits=<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.hits}</span>, misses=<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.miss}</span>, capacity=<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.capacity}</span>, current size=<span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.numKeys}</span>)`</span>\n  }\n\n  set (key, value) {\n    <span class=\"hljs-comment\">// Sets the value for the input key and updates the Double Linked List</span>\n    <span class=\"hljs-keyword\">if</span> (!(key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>)) {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">numKeys</span> &gt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">capacity</span>) {\n        <span class=\"hljs-keyword\">const</span> keyToDelete = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-property\">head</span>.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">key</span>\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>[keyToDelete])\n        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>[keyToDelete]\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">numKeys</span> -= <span class=\"hljs-number\">1</span>\n      }\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>[key] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DoubleLinkedListNode</span>(key, value)\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>[key])\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">numKeys</span> += <span class=\"hljs-number\">1</span>\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>[key])\n      node.<span class=\"hljs-property\">val</span> = value\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-title function_\">add</span>(node)\n    }\n  }\n\n  get (key) {\n    <span class=\"hljs-comment\">// Returns the value for the input key and updates the Double Linked List. Returns null if key is not present in cache</span>\n    <span class=\"hljs-keyword\">if</span> (key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hits</span> += <span class=\"hljs-number\">1</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">list</span>.<span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>[key]))\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cache</span>[key].<span class=\"hljs-property\">val</span>\n    }\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">miss</span> += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>\n  }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">main</span> () {\n  <span class=\"hljs-comment\">// Example 1 (Small Cache)</span>\n  <span class=\"hljs-keyword\">const</span> cache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">LFUCache</span>(<span class=\"hljs-number\">2</span>)\n  cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n  cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">1</span>))\n\n  cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>)\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">2</span>)) <span class=\"hljs-comment\">// cache miss</span>\n\n  cache.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">4</span>)\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">1</span>)) <span class=\"hljs-comment\">// cache miss</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">3</span>))\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(cache.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-number\">4</span>))\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Example Cache: &#x27;</span>, cache.<span class=\"hljs-title function_\">cacheInfo</span>(), <span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n\n  <span class=\"hljs-comment\">// Example 2 (Computing Fibonacci Series - 100 terms)</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fib</span> (num, cache = <span class=\"hljs-literal\">null</span>) {\n    <span class=\"hljs-keyword\">if</span> (cache) {\n      <span class=\"hljs-keyword\">const</span> value = cache.<span class=\"hljs-title function_\">get</span>(num)\n      <span class=\"hljs-keyword\">if</span> (value) { <span class=\"hljs-keyword\">return</span> value }\n    }\n    <span class=\"hljs-keyword\">if</span> (num === <span class=\"hljs-number\">1</span> || num === <span class=\"hljs-number\">2</span>) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span> }\n    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">fib</span>(num - <span class=\"hljs-number\">1</span>, cache) + <span class=\"hljs-title function_\">fib</span>(num - <span class=\"hljs-number\">2</span>, cache)\n    <span class=\"hljs-keyword\">if</span> (cache) { cache.<span class=\"hljs-title function_\">set</span>(num, result) }\n    <span class=\"hljs-keyword\">return</span> result\n  }\n\n  <span class=\"hljs-keyword\">const</span> fibCache = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">LFUCache</span>(<span class=\"hljs-number\">100</span>)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt;= <span class=\"hljs-number\">100</span>; i++) { <span class=\"hljs-title function_\">fib</span>(i, fibCache) }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Fibonacci Series Cache: &#x27;</span>, fibCache.<span class=\"hljs-title function_\">cacheInfo</span>(), <span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n}\n\n<span class=\"hljs-title function_\">main</span>()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Tapajyoti Bose",
      "email": "44058757+ruppysuppy@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
