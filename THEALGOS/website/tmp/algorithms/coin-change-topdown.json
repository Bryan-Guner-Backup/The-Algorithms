{
  "slug": "coin-change-topdown",
  "name": "Coin Change Topdown",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "dynamic_programming/coin_change_topdown.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/dynamic_programming/coin_change_topdown.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Minimum coins](https://leetcode.com/problems/coin-change/) change\n * problem is a problem used to find the minimum number of coins required to\n * completely reach a target amount.\n *\n * @details\n * This problem can be solved using 2 methods:\n * 1. Top down approach\n * 2. Bottom up appraoch\n * Top down approach involves a vector with all elements initialised to 0.\n * It is based on optimal substructure and overlapping subproblems.\n * Overall time complexity of coin change problem is O(n*t)\n * For example: example 1:-\n * Coins: {1,7,10}\n * Target:15\n * Therfore minimum number of coins required = 3 of denomination 1,7 and 7.\n * @author [Divyansh Kushwaha](https://github.com/webdesignbydivyansh)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;climits&gt;</span>   <span class=\"hljs-comment\">// for INT_MAX</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace dynamic_programming\n * @brief Dynamic Programming algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> dynamic_programming {\n<span class=\"hljs-comment\">/**\n * @namespace mincoins_topdown\n * @brief Functions for [minimum coin\n * exchange](https://leetcode.com/problems/coin-change/) problem\n */</span>\n<span class=\"hljs-keyword\">namespace</span> mincoins_topdown {\n<span class=\"hljs-comment\">/**\n * @brief This implementation is for finding minimum number of coins .\n * @param T template-type to use any kind of value\n * @param n amount to be reached\n * @param coins vector of coins\n * @param t deontes the number of coins\n * @param dp initilised to 0\n * @returns minimum number of coins\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">int64_t</span> <span class=\"hljs-title\">mincoins</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> T &amp;n, <span class=\"hljs-keyword\">const</span> std::vector&lt;T&gt; &amp;coins, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int16_t</span> &amp;t,\n                 std::vector&lt;T&gt; dp)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (dp[n] != <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> dp[n];\n    }\n    <span class=\"hljs-type\">int</span> ans = INT_MAX;  <span class=\"hljs-comment\">// variable to store min coins</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; t; i++) {\n        <span class=\"hljs-keyword\">if</span> (n - coins[i] &gt;= <span class=\"hljs-number\">0</span>) {  <span class=\"hljs-comment\">// if after subtracting the current</span>\n                                  <span class=\"hljs-comment\">// denomination is it greater than 0 or not</span>\n            <span class=\"hljs-type\">int</span> sub = <span class=\"hljs-built_in\">mincoins</span>(n - coins[i], coins, t, dp);\n            ans = std::<span class=\"hljs-built_in\">min</span>(ans, sub + <span class=\"hljs-number\">1</span>);\n        }\n    }\n    dp[n] = ans;\n    <span class=\"hljs-keyword\">return</span> dp[n];  <span class=\"hljs-comment\">// returns minimum number of coins</span>\n}\n\n}  <span class=\"hljs-comment\">// namespace mincoins_topdown</span>\n}  <span class=\"hljs-comment\">// namespace dynamic_programming</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// example 1: number of coins=3 and minimum coins required=3(7,7,1)</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int64_t</span> n1 = <span class=\"hljs-number\">15</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int8_t</span> t1 = <span class=\"hljs-number\">3</span>, a1 = <span class=\"hljs-number\">0</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest 1...&quot;</span>;\n    std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; arr1{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">10</span>};\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int64_t</span>&gt; <span class=\"hljs-title\">dp1</span><span class=\"hljs-params\">(n1 + <span class=\"hljs-number\">1</span>)</span></span>;\n    <span class=\"hljs-built_in\">fill</span>(dp1.<span class=\"hljs-built_in\">begin</span>(), dp1.<span class=\"hljs-built_in\">end</span>(), a1);\n    <span class=\"hljs-built_in\">assert</span>(dynamic_programming::mincoins_topdown::<span class=\"hljs-built_in\">mincoins</span>(n1, arr1, t1, dp1) ==\n           <span class=\"hljs-number\">3</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// execute the test</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "webdesignbydivyansh",
      "email": "62607594+webdesignbydivyansh@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
