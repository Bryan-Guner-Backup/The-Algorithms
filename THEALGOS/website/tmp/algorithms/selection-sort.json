{
  "slug": "selection-sort",
  "name": "Selection Sort",
  "categories": ["sorts"],
  "body": {
    "es": "<h4>Declaración de problema</h4>\n<p>Dada una matriz no ordenada de <code>N</code> elementos, escriba una función para ordenar la matriz.</p>\n<h4>Enfoque</h4>\n<ul>\n<li>Seleccione el elemento más pequeño de la matriz</li>\n<li>Ponerlo al principio de la matriz</li>\n<li>A continuación, seleccione la matriz más pequeña de la lista no ordenada restante</li>\n<li>Anexarlo a la matriz ordenada al principio</li>\n<li>Seguir haciendo esto para cada elemento de la matriz</li>\n<li>Repetir el proceso anterior n veces</li>\n</ul>\n<h4>Complejidad horaria</h4>\n<p><code>O(n^2)</code> Peor rendimiento en el caso</p>\n<p><code>O(n^2)</code> Mejor rendimiento en el caso</p>\n<p><code>O(n^2)</code> Rendimiento medio</p>\n<h4>Complejidad espacial</h4>\n<p><code>O(1)</code> El peor caso</p>\n<h4>Ejemplo</h4>\n<pre><code class=\"hljs language-markdown\">arr[] = {80, 10, 40, 30}\nÍndices: 0 1 2 3    \n\n<span class=\"hljs-bullet\">1.</span> Índice = 0\n<span class=\"hljs-code\">\tSeleccione el número mínimo de la matriz (entre el índice 0-3), es decir, 10\n2. Intercambio 10 y 80 (arr[0])\n3. La matriz ahora es {10, 80, 40, 30}\n</span>\n<span class=\"hljs-bullet\">4.</span> Índice = 1\n<span class=\"hljs-code\">\tSeleccione el número mínimo de la matriz (entre el índice 1-3), es decir, 30\n5. Intercambio 30 y 80 (arr[1])\n6. La matriz ahora es {10, 30, 40, 80}\n</span>\n<span class=\"hljs-bullet\">7.</span> Índice = 2\n<span class=\"hljs-code\">\tSeleccione el número mínimo de la matriz (entre el índice 2-3), es decir, 40\n8. Intercambio 40 y 40 (arr[2])\n9. La matriz ahora es {10, 30, 40, 80}\n</span>\nLa matriz ahora está ordenada.\n</code></pre>\n<h4>Enlaces de implementación de código</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/SelectionSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Sorting/Selection%20Sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/selection_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/sorts/selection_sort.go\">Ir</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/Sorting/selection_sort.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/SelectionSort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/Sort/SelectionSort.scala\">Scala</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Sorts/selectionSort.js\">Javascript</a></li>\n</ul>\n<h4>Explicación de vídeo</h4>\n<p><a href=\"https://www.youtube.com/watch?v=f8hXR_Hvybo\">Un vídeo explicando el algoritmo de Ordenamiento de selección</a></p>\n<h4>Explicación de animación</h4>\n<ul>\n<li><a href=\"https://boardhub.github.io/tute/?wd=selectSortAlgo2\">Tabla de tute</a></li>\n</ul>",
    "en": "<h4>Problem Statement</h4>\n<p>Given an unsorted array of n elements, write a function to sort the array</p>\n<h4>Approach</h4>\n<ul>\n<li>select the smallest element from the array</li>\n<li>put it at the beginning of the array</li>\n<li>then select the smallest array from the remaining unsorted list</li>\n<li>append it to the sorted array at the beginning</li>\n<li>keep doing this for every element of the array</li>\n<li>repeat the above process n times</li>\n</ul>\n<h4>Time Complexity</h4>\n<p><code>O(n^2)</code> Worst case performance</p>\n<p><code>O(n^2)</code> Best-case performance</p>\n<p><code>O(n^2)</code> Average performance</p>\n<h4>Space Complexity</h4>\n<p><code>O(1)</code> Worst case</p>\n<h4>Example</h4>\n<pre><code class=\"hljs language-smali\">arr[] = {80, 10, 40, 30}\nIndexes: 0   1   2   3    \n\n1. Index = 0\n\tSelect the minimum number from the<span class=\"hljs-built_in\"> array </span>(between index 0-3), ie, 10\n2. Swap 10 <span class=\"hljs-built_in\"> and </span>80 (arr[0])\n3. The<span class=\"hljs-built_in\"> array </span>now is {10, 80, 40, 30}\n\n4. Index = 1\n\tSelect the minimum number from the<span class=\"hljs-built_in\"> array </span>(between index 1-3), ie, 30\n5. Swap 30<span class=\"hljs-built_in\"> and </span>80 (arr[1])\n6. The<span class=\"hljs-built_in\"> array </span>now is {10, 30, 40, 80}\n\n7. Index = 2\n\tSelect the minimum number from the<span class=\"hljs-built_in\"> array </span>(between index 2-3), ie, 40\n8. Swap 40<span class=\"hljs-built_in\"> and </span>40 (arr[2])\n9. The<span class=\"hljs-built_in\"> array </span>now is {10, 30, 40, 80}\n\nThe<span class=\"hljs-built_in\"> array </span>is now sorted.\n</code></pre>\n<h4>Code Implementation Links</h4>\n<ul>\n<li><a href=\"https://github.com/TheAlgorithms/Java/blob/master/Sorts/SelectionSort.java\">Java</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C-Plus-Plus/blob/master/Sorting/Selection%20Sort.cpp\">C++</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Python/blob/master/sorts/selection_sort.py\">Python</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Go/blob/master/sorts/selection_sort.go\">Go</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Ruby/blob/master/Sorting/selection_sort.rb\">Ruby</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/C/blob/master/sorting/SelectionSort.c\">C</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Scala/blob/master/src/main/scala/Sort/SelectionSort.scala\">Scala</a></li>\n<li><a href=\"https://github.com/TheAlgorithms/Javascript/blob/master/Sorts/selectionSort.js\">Javascript</a></li>\n</ul>\n<h4>Video Explanation</h4>\n<p><a href=\"https://www.youtube.com/watch?v=f8hXR_Hvybo\">A video explaining the Selection Sort Algorithm</a></p>\n<h4>Animation Explanation</h4>\n<ul>\n<li><a href=\"https://boardhub.github.io/tute/?wd=selectSortAlgo2\">Tute Board</a></li>\n</ul>"
  },
  "implementations": {
    "python": {
      "dir": "sorts/selection_sort.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/sorts/selection_sort.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThis is a pure Python implementation of the selection sort algorithm\n\nFor doctests run following command:\npython -m doctest -v selection_sort.py\nor\npython3 -m doctest -v selection_sort.py\n\nFor manual testing run:\npython selection_sort.py\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">selection_sort</span>(<span class=\"hljs-params\">collection</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Pure implementation of the selection sort algorithm in Python\n    :param collection: some mutable ordered collection with heterogeneous\n    comparable items inside\n    :return: the same collection ordered by ascending\n\n\n    Examples:\n    &gt;&gt;&gt; selection_sort([0, 5, 3, 2, 2])\n    [0, 2, 2, 3, 5]\n\n    &gt;&gt;&gt; selection_sort([])\n    []\n\n    &gt;&gt;&gt; selection_sort([-2, -5, -45])\n    [-45, -5, -2]\n    &quot;&quot;&quot;</span>\n\n    length = <span class=\"hljs-built_in\">len</span>(collection)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(length - <span class=\"hljs-number\">1</span>):\n        least = i\n        <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i + <span class=\"hljs-number\">1</span>, length):\n            <span class=\"hljs-keyword\">if</span> collection[k] &lt; collection[least]:\n                least = k\n        <span class=\"hljs-keyword\">if</span> least != i:\n            collection[least], collection[i] = (collection[i], collection[least])\n    <span class=\"hljs-keyword\">return</span> collection\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    user_input = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter numbers separated by a comma:\\n&quot;</span>).strip()\n    unsorted = [<span class=\"hljs-built_in\">int</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> user_input.split(<span class=\"hljs-string\">&quot;,&quot;</span>)]\n    <span class=\"hljs-built_in\">print</span>(selection_sort(unsorted))\n"
    },
    "javascript": {
      "dir": "Sorts/SelectionSort.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Sorts/SelectionSort.js",
      "code": "<span class=\"hljs-comment\">/* The selection sort algorithm sorts an array by repeatedly finding the minimum element\n *(considering ascending order) from unsorted part and putting it at the beginning. The\n *algorithm maintains two subarrays in a given array.\n *1) The subarray which is already sorted.\n *2) Remaining subarray which is unsorted.\n *\n *In every iteration of selection sort, the minimum element (considering ascending order)\n *from the unsorted subarray is picked and moved to the sorted subarray.\n */</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">selectionSort</span> = (<span class=\"hljs-params\">list</span>) =&gt; {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(list)) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;Given input is not an array&#x27;</span>)\n  }\n  <span class=\"hljs-keyword\">const</span> items = [...list] <span class=\"hljs-comment\">// We don&#x27;t want to modify the original array</span>\n  <span class=\"hljs-keyword\">const</span> length = items.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length - <span class=\"hljs-number\">1</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> items[i] !== <span class=\"hljs-string\">&#x27;number&#x27;</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;One of the items in your array is not a number&#x27;</span>)\n    }\n    <span class=\"hljs-comment\">// Number of passes</span>\n    <span class=\"hljs-keyword\">let</span> min = i <span class=\"hljs-comment\">// min holds the current minimum number position for each pass; i holds the Initial min number</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; length; j++) { <span class=\"hljs-comment\">// Note that j = i + 1 as we only need to go through unsorted array</span>\n      <span class=\"hljs-keyword\">if</span> (items[j] &lt; items[min]) { <span class=\"hljs-comment\">// Compare the numbers</span>\n        min = j <span class=\"hljs-comment\">// Change the current min number position if a smaller num is found</span>\n      }\n    }\n    <span class=\"hljs-keyword\">if</span> (min !== i) {\n      <span class=\"hljs-comment\">// After each pass, if the current min num != initial min num, exchange the position.</span>\n      <span class=\"hljs-comment\">// Swap the numbers</span>\n      [items[i], items[min]] = [items[min], items[i]]\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> items\n}\n\n<span class=\"hljs-comment\">/* Implementation of Selection Sort\n\n(() =&gt; {\n  let array = [5, 6, 7, 8, 1, 2, 12, 14]\n  // Array before Sort\n  console.log(array)\n  array = selectionSort(array)\n  // Array after sort\n  console.log(array)\n})()\n\n*/</span>\n\n<span class=\"hljs-keyword\">export</span> { selectionSort }\n"
    },
    "c-plus-plus": {
      "dir": "sorting/selection_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/selection_sort.cpp",
      "code": "<span class=\"hljs-comment\">// Selection Sort</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> Array[<span class=\"hljs-number\">6</span>];\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter any 6 Numbers for Unsorted Array : &quot;</span>;\n\n    <span class=\"hljs-comment\">// Input</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>; i++) {\n        cin &gt;&gt; Array[i];\n    }\n\n    <span class=\"hljs-comment\">// Selection Sorting</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>; i++) {\n        <span class=\"hljs-type\">int</span> min = i;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-number\">6</span>; j++) {\n            <span class=\"hljs-keyword\">if</span> (Array[j] &lt; Array[min]) {\n                min = j;  <span class=\"hljs-comment\">// Finding the smallest number in Array</span>\n            }\n        }\n        <span class=\"hljs-type\">int</span> temp = Array[i];\n        Array[i] = Array[min];\n        Array[min] = temp;\n    }\n\n    <span class=\"hljs-comment\">// Output</span>\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nSorted Array : &quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>; i++) {\n        cout &lt;&lt; Array[i] &lt;&lt; <span class=\"hljs-string\">&quot;\\t&quot;</span>;\n    }\n}\n"
    },
    "java": {
      "dir": "Sorts/SelectionSort.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Sorts/SelectionSort.java",
      "code": "<span class=\"hljs-keyword\">package</span> Sorts;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SelectionSort</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SortAlgorithm</span> {\n\n  <span class=\"hljs-comment\">/**\n   * Generic selection sort algorithm in increasing order.\n   *\n   * <span class=\"hljs-doctag\">@param</span> arr the array to be sorted.\n   * <span class=\"hljs-doctag\">@param</span> &lt;T&gt; the class of array.\n   * <span class=\"hljs-doctag\">@return</span> sorted array.\n   */</span>\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Comparable</span>&lt;T&gt;&gt; T[] sort(T[] arr) {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">n</span> <span class=\"hljs-operator\">=</span> arr.length;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; n - <span class=\"hljs-number\">1</span>; i++) {\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">minIndex</span> <span class=\"hljs-operator\">=</span> i;\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> i + <span class=\"hljs-number\">1</span>; j &lt; n; j++) {\n        <span class=\"hljs-keyword\">if</span> (arr[minIndex].compareTo(arr[j]) &gt; <span class=\"hljs-number\">0</span>) {\n          minIndex = j;\n        }\n      }\n      <span class=\"hljs-keyword\">if</span> (minIndex != i) {\n        <span class=\"hljs-type\">T</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n  }\n\n  <span class=\"hljs-comment\">/** Driver Code */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n\n    Integer[] arr = {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">54</span>, <span class=\"hljs-number\">231</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">12</span>};\n    <span class=\"hljs-type\">SelectionSort</span> <span class=\"hljs-variable\">selectionSort</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SelectionSort</span>();\n    Integer[] sorted = selectionSort.sort(arr);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sorted.length - <span class=\"hljs-number\">1</span>; ++i) {\n      <span class=\"hljs-keyword\">assert</span> sorted[i] &lt;= sorted[i + <span class=\"hljs-number\">1</span>];\n    }\n\n    String[] strings = {<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;e&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>};\n    String[] sortedStrings = selectionSort.sort(strings);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; sortedStrings.length - <span class=\"hljs-number\">1</span>; ++i) {\n      <span class=\"hljs-keyword\">assert</span> strings[i].compareTo(strings[i + <span class=\"hljs-number\">1</span>]) &lt;= <span class=\"hljs-number\">0</span>;\n    }\n  }\n}\n"
    },
    "c": {
      "dir": "sorting/selection_sort.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/sorting/selection_sort.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Selection sort](https://en.wikipedia.org/wiki/Selection_sort)\n * algorithm implementation.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Swapped two numbers using pointer\n * @param first first pointer of first number\n * @param second second pointer of second number\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *first, <span class=\"hljs-type\">int</span> *second)</span>\n{\n    <span class=\"hljs-type\">int</span> temp = *first;\n    *first = *second;\n    *second = temp;\n}\n\n<span class=\"hljs-comment\">/**\n * Selection sort algorithm implements\n * @param arr array to be sorted\n * @param size size of array\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">selectionSort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *arr, <span class=\"hljs-type\">int</span> size)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; i++)\n    {\n        <span class=\"hljs-type\">int</span> min_index = i;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; size; j++)\n        {\n            <span class=\"hljs-keyword\">if</span> (arr[min_index] &gt; arr[j])\n            {\n                min_index = j;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (min_index != i)\n        {\n            swap(arr + i, arr + min_index);\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/** Test function\n  * @returns None\n  */</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> size = rand() % <span class=\"hljs-number\">500</span>; <span class=\"hljs-comment\">/* random array size */</span>\n    <span class=\"hljs-type\">int</span> *arr = (<span class=\"hljs-type\">int</span> *)<span class=\"hljs-built_in\">calloc</span>(size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-comment\">/* generate size random numbers from -50 to 49 */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; i++)\n    {\n        arr[i] = (rand() % <span class=\"hljs-number\">100</span>) - <span class=\"hljs-number\">50</span>; <span class=\"hljs-comment\">/* signed random numbers */</span>\n    }\n    selectionSort(arr, size);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size - <span class=\"hljs-number\">1</span>; ++i)\n    {\n        assert(arr[i] &lt;= arr[i + <span class=\"hljs-number\">1</span>]);\n    }\n    <span class=\"hljs-built_in\">free</span>(arr);\n}\n\n<span class=\"hljs-comment\">/** Driver Code */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *argv[])</span>\n{\n    <span class=\"hljs-comment\">/* Intializes random number generator */</span>\n    srand(time(<span class=\"hljs-literal\">NULL</span>));\n    test();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "haskell": {
      "dir": "src/Sorts/SelectionSort.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Sorts/SelectionSort.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Sorts.SelectionSort <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-title\">listToSort</span> :: [<span class=\"hljs-type\">Int</span>]\n<span class=\"hljs-title\">listToSort</span> = [<span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">18</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">20</span>]\n\n\n<span class=\"hljs-comment\">-- The selection sort function</span>\n<span class=\"hljs-title\">selectionSort</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; [a]\n<span class=\"hljs-title\">selectionSort</span> [] = []\n<span class=\"hljs-title\">selectionSort</span> (x:xs) =\n    <span class=\"hljs-keyword\">let</span> (y, ys) = leastUnsorted (x:xs)\n    <span class=\"hljs-keyword\">in</span> y : selectionSort ys\n\n<span class=\"hljs-comment\">-- select least element from unsorted list, return it and the rest of unsorted list</span>\n<span class=\"hljs-title\">leastUnsorted</span> :: (<span class=\"hljs-type\">Ord</span> a) =&gt; [a] -&gt; (a, [a])\n<span class=\"hljs-title\">leastUnsorted</span> [x] = (x, [])\n<span class=\"hljs-title\">leastUnsorted</span> (x:xs) =\n    <span class=\"hljs-keyword\">let</span> (y, ys) = leastUnsorted xs\n    <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">if</span> x &lt;= y <span class=\"hljs-keyword\">then</span> (x, xs) <span class=\"hljs-keyword\">else</span> (y, x:ys)\n\n<span class=\"hljs-title\">main</span> = <span class=\"hljs-keyword\">do</span>\n    putStrLn $ <span class=\"hljs-string\">&quot;Unsorted: &quot;</span> ++ show listToSort\n    putStrLn $ <span class=\"hljs-string\">&quot;Sorted: &quot;</span> ++ show (selectionSort listToSort)"
    },
    "go": {
      "dir": "sorts/selectionsort.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/sorts/selectionsort.go",
      "code": "<span class=\"hljs-comment\">//Package sorts a package for demonstrating sorting algorithms in Go</span>\n<span class=\"hljs-keyword\">package</span> sorts\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">SelectionSort</span><span class=\"hljs-params\">(arr []<span class=\"hljs-keyword\">int</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(arr); i++ {\n\t\tmin := i\n\t\t<span class=\"hljs-keyword\">for</span> j := i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-built_in\">len</span>(arr); j++ {\n\t\t\t<span class=\"hljs-keyword\">if</span> arr[j] &lt; arr[min] {\n\t\t\t\tmin = j\n\t\t\t}\n\t\t}\n\n\t\ttmp := arr[i]\n\t\tarr[i] = arr[min]\n\t\tarr[min] = tmp\n\t}\n\t<span class=\"hljs-keyword\">return</span> arr\n}\n"
    },
    "rust": {
      "dir": "src/sorting/selection_sort.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/sorting/selection_sort.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">selection_sort</span>&lt;T: <span class=\"hljs-built_in\">Ord</span>&gt;(arr: &amp;<span class=\"hljs-keyword\">mut</span> [T]) {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">len</span> = arr.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span>..len {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">smallest</span> = left;\n        <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-keyword\">in</span> (left + <span class=\"hljs-number\">1</span>)..len {\n            <span class=\"hljs-keyword\">if</span> arr[right] &lt; arr[smallest] {\n                smallest = right;\n            }\n        }\n        arr.<span class=\"hljs-title function_ invoke__\">swap</span>(smallest, left);\n    }\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">basic</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;d&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>];\n        <span class=\"hljs-title function_ invoke__\">selection_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;d&quot;</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = Vec::&lt;<span class=\"hljs-type\">u8</span>&gt;::<span class=\"hljs-title function_ invoke__\">new</span>();\n        <span class=\"hljs-title function_ invoke__\">selection_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_element</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>];\n        <span class=\"hljs-title function_ invoke__\">selection_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">pre_sorted</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">res</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>];\n        <span class=\"hljs-title function_ invoke__\">selection_sort</span>(&amp;<span class=\"hljs-keyword\">mut</span> res);\n        <span class=\"hljs-built_in\">assert_eq!</span>(res, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>]);\n    }\n}\n"
    },
    "aarch64_assembly": {
      "dir": "sorters/selection_sort.s",
      "url": "https://github.com/TheAlgorithms/aarch64_assembly/tree/master/sorters/selection_sort.s",
      "code": "<span class=\"hljs-comment\">/* ARM assembly AARCH64 Raspberry PI 3B */</span>\n<span class=\"hljs-comment\">/*  program selectionSort64.s   */</span>\n \n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* Constantes file                         */</span>\n<span class=\"hljs-comment\">/*******************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeConstantesARM64.inc&quot;</span>\n \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* Initialized data              */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.data</span>\n<span class=\"hljs-symbol\">szMessSortOk:</span>       <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table sorted.\\n&quot;</span>\n<span class=\"hljs-symbol\">szMessSortNok:</span>      <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Table not sorted !!!!!.\\n&quot;</span>\n<span class=\"hljs-symbol\">sMessResult:</span>        <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;Value  : @ \\n&quot;</span>\n<span class=\"hljs-symbol\">szCarriageReturn:</span>   <span class=\"hljs-meta\">.asciz</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>\n \n<span class=\"hljs-symbol\">.align</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-comment\">#TableNumber:      .quad   1,3,6,2,5,9,10,8,4,7</span>\n<span class=\"hljs-symbol\">TableNumber:</span>     .quad   <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>\n                 <span class=\"hljs-meta\">.equ</span> NBELEMENTS, (. - TableNumber) / <span class=\"hljs-number\">8</span> \n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/* UnInitialized data            */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.bss</span>\n<span class=\"hljs-symbol\">sZoneConv:</span>       <span class=\"hljs-meta\">.skip</span> <span class=\"hljs-number\">24</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-comment\">/*  code section                 */</span>\n<span class=\"hljs-comment\">/*********************************/</span>\n<span class=\"hljs-symbol\">.text</span>\n<span class=\"hljs-symbol\">.global</span> main \n<span class=\"hljs-symbol\">main:</span>                                              <span class=\"hljs-comment\">// entry of program </span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">mov</span> x2,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> selectionSort\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">bl</span> displayTable\n \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrTableNumber                         <span class=\"hljs-comment\">// address number table</span>\n    <span class=\"hljs-keyword\">mov</span> x1,NBELEMENTS                              <span class=\"hljs-comment\">// number of élements </span>\n    <span class=\"hljs-keyword\">bl</span> isSorted                                    <span class=\"hljs-comment\">// control sort</span>\n    <span class=\"hljs-keyword\">cmp</span> x0,<span class=\"hljs-number\">1</span>                                       <span class=\"hljs-comment\">// sorted ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">1</span>f                                    \n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortNok                       <span class=\"hljs-comment\">// no !! error sort</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">1</span>:                                                 <span class=\"hljs-comment\">// yes</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszMessSortOk\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:                                               <span class=\"hljs-comment\">// standard end of the program </span>\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                                       <span class=\"hljs-comment\">// return code</span>\n    <span class=\"hljs-keyword\">mov</span> x8,EXIT                                    <span class=\"hljs-comment\">// request to exit program</span>\n    <span class=\"hljs-keyword\">svc</span> <span class=\"hljs-number\">0</span>                                          <span class=\"hljs-comment\">// perform the system call</span>\n \n<span class=\"hljs-symbol\">qAdrsZoneConv:</span>            .quad sZoneConv\n<span class=\"hljs-symbol\">qAdrszCarriageReturn:</span>     .quad szCarriageReturn\n<span class=\"hljs-symbol\">qAdrsMessResult:</span>          .quad sMessResult\n<span class=\"hljs-symbol\">qAdrTableNumber:</span>          .quad TableNumber\n<span class=\"hljs-symbol\">qAdrszMessSortOk:</span>         .quad szMessSortOk\n<span class=\"hljs-symbol\">qAdrszMessSortNok:</span>        .quad szMessSortNok\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*     control sorted table                                   */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the number of elements  &gt; 0  */</span>\n<span class=\"hljs-comment\">/* x0 return 0  if not sorted   1  if sorted */</span>\n<span class=\"hljs-symbol\">isSorted:</span>\n    stp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x3,x4,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,<span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">ldr</span> x4,[x0,x2,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">1</span>:\n    <span class=\"hljs-keyword\">add</span> x2,x2,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x2,x1\n    <span class=\"hljs-keyword\">bge</span> <span class=\"hljs-number\">99</span>f\n    <span class=\"hljs-keyword\">ldr</span> x3,[x0,x2, <span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">cmp</span> x3,x4\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">98</span>f\n    <span class=\"hljs-keyword\">mov</span> x4,x3\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">1</span>b\n<span class=\"hljs-number\">98</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">0</span>                       <span class=\"hljs-comment\">// not sorted</span>\n    <span class=\"hljs-keyword\">b</span> <span class=\"hljs-number\">100</span>f\n<span class=\"hljs-number\">99</span>:\n    <span class=\"hljs-keyword\">mov</span> x0,<span class=\"hljs-number\">1</span>                       <span class=\"hljs-comment\">// sorted</span>\n<span class=\"hljs-number\">100</span>:\n    ldp x3,x4,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>              <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                            <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*         selection sort                                              */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-comment\">/* x1 contains the first element    */</span>\n<span class=\"hljs-comment\">/* x2 contains the number of element */</span>\n<span class=\"hljs-symbol\">selectionSort:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x4,x5,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x6,x7,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x3,x1                        <span class=\"hljs-comment\">// start index i</span>\n    <span class=\"hljs-keyword\">sub</span> x7,x2,<span class=\"hljs-number\">1</span>                      <span class=\"hljs-comment\">// compute n - 1</span>\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// start loop</span>\n    <span class=\"hljs-keyword\">mov</span> x4,x3\n    <span class=\"hljs-keyword\">add</span> x5,x3,<span class=\"hljs-number\">1</span>                      <span class=\"hljs-comment\">// init index 2</span>\n<span class=\"hljs-number\">2</span>: \n    <span class=\"hljs-keyword\">ldr</span> x1,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]             <span class=\"hljs-comment\">// load value A[mini]</span>\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x5,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]             <span class=\"hljs-comment\">// load value A[j]</span>\n    <span class=\"hljs-keyword\">cmp</span> x6,x1                        <span class=\"hljs-comment\">// compare value</span>\n    csel x4,x5,x4,lt                 <span class=\"hljs-comment\">// j -&gt; mini</span>\n    <span class=\"hljs-keyword\">add</span> x5,x5,<span class=\"hljs-number\">1</span>                      <span class=\"hljs-comment\">// increment index j</span>\n    <span class=\"hljs-keyword\">cmp</span> x5,x2                        <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">2</span>b                           <span class=\"hljs-comment\">// no -&gt; loop</span>\n    <span class=\"hljs-keyword\">cmp</span> x4,x3                        <span class=\"hljs-comment\">// mini &lt;&gt; j ?</span>\n    <span class=\"hljs-keyword\">beq</span> <span class=\"hljs-number\">3</span>f                           <span class=\"hljs-comment\">// no</span>\n    <span class=\"hljs-keyword\">ldr</span> x1,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]             <span class=\"hljs-comment\">// yes swap A[i] A[mini]</span>\n    <span class=\"hljs-keyword\">ldr</span> x6,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">str</span> x1,[x0,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">str</span> x6,[x0,x4,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-number\">3</span>:\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>                      <span class=\"hljs-comment\">// increment i</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,x7                        <span class=\"hljs-comment\">// end ?</span>\n    <span class=\"hljs-keyword\">blt</span> <span class=\"hljs-number\">1</span>b                           <span class=\"hljs-comment\">// no -&gt; loop </span>\n \n<span class=\"hljs-number\">100</span>:\n    ldp x6,x7,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>                <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x4,x5,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>                <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>                <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>                <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                              <span class=\"hljs-comment\">// return to address lr x30</span>\n \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/*      Display table elements                                */</span> \n<span class=\"hljs-comment\">/******************************************************************/</span>\n<span class=\"hljs-comment\">/* x0 contains the address of table */</span>\n<span class=\"hljs-symbol\">displayTable:</span>\n    stp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    stp x2,x3,[<span class=\"hljs-built_in\">sp</span>,-<span class=\"hljs-number\">16</span>]!              <span class=\"hljs-comment\">// save  registers</span>\n    <span class=\"hljs-keyword\">mov</span> x2,x0                        <span class=\"hljs-comment\">// table address</span>\n    <span class=\"hljs-keyword\">mov</span> x3,<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>:                                   <span class=\"hljs-comment\">// loop display table</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,[x2,x3,<span class=\"hljs-keyword\">lsl</span> <span class=\"hljs-number\">3</span>]\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> conversion10                  <span class=\"hljs-comment\">// décimal conversion</span>\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrsMessResult\n    <span class=\"hljs-keyword\">ldr</span> x1,qAdrsZoneConv\n    <span class=\"hljs-keyword\">bl</span> strInsertAtCharInc            <span class=\"hljs-comment\">// insert result at @ character</span>\n    <span class=\"hljs-keyword\">bl</span> affichageMess                 <span class=\"hljs-comment\">// display message</span>\n    <span class=\"hljs-keyword\">add</span> x3,x3,<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">cmp</span> x3,NBELEMENTS - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ble</span> <span class=\"hljs-number\">1</span>b\n    <span class=\"hljs-keyword\">ldr</span> x0,qAdrszCarriageReturn\n    <span class=\"hljs-keyword\">bl</span> affichageMess\n<span class=\"hljs-number\">100</span>:\n    ldp x2,x3,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ldp x1,<span class=\"hljs-built_in\">lr</span>,[<span class=\"hljs-built_in\">sp</span>],<span class=\"hljs-number\">16</span>               <span class=\"hljs-comment\">// restaur  2 registers</span>\n    ret                             <span class=\"hljs-comment\">// return to address lr x30</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/*        File Include fonctions                        */</span>\n<span class=\"hljs-comment\">/********************************************************/</span>\n<span class=\"hljs-comment\">/* for this file see task include a file in language AArch64 assembly */</span>\n<span class=\"hljs-symbol\">.include</span> <span class=\"hljs-string\">&quot;../includeARM64.inc&quot;</span>\n"
    },
    "r": {
      "dir": "Sorting-Algorithms/selection_sort.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Sorting-Algorithms/selection_sort.R",
      "code": "<span class=\"hljs-comment\"># Selection sort in R:</span>\n\nselection.sort <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">,</span> ascending <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-built_in\">max</span> <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-built_in\">length</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-punctuation\">(</span>j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span><span class=\"hljs-operator\">:</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-built_in\">max</span> <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    m <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-punctuation\">]</span>\n    p <span class=\"hljs-operator\">&lt;-</span> j\n    <span class=\"hljs-keyword\">for</span><span class=\"hljs-punctuation\">(</span>k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-punctuation\">(</span>j <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-operator\">:</span><span class=\"hljs-built_in\">max</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>ascending <span class=\"hljs-operator\">&amp;&amp;</span> elements.vec<span class=\"hljs-punctuation\">[</span>k<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;</span> m <span class=\"hljs-operator\">||</span> <span class=\"hljs-operator\">!</span>ascending <span class=\"hljs-operator\">&amp;&amp;</span> elements.vec<span class=\"hljs-punctuation\">[</span>k<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&gt;</span> m<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n        m <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span>k<span class=\"hljs-punctuation\">]</span>\n        p <span class=\"hljs-operator\">&lt;-</span> k\n      <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-punctuation\">}</span> \n    elements.vec<span class=\"hljs-punctuation\">[</span>p<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;-</span> elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-punctuation\">]</span>\n    elements.vec<span class=\"hljs-punctuation\">[</span>j<span class=\"hljs-punctuation\">]</span> <span class=\"hljs-operator\">&lt;-</span> m\n  <span class=\"hljs-punctuation\">}</span> \n  <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span>elements.vec<span class=\"hljs-punctuation\">)</span>\n<span class=\"hljs-punctuation\">}</span>\n\n<span class=\"hljs-comment\"># Example:</span>\n<span class=\"hljs-comment\"># selection.sort(c(5, 2, 3, 1, 1, 4)) </span>\n<span class=\"hljs-comment\"># [1] 1 1 2 3 4 5</span>\n<span class=\"hljs-comment\"># Note that selection sort is not a stable sorting algorithm.</span>\n"
    },
    "ruby": {
      "dir": "sorting/selection_sort.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/sorting/selection_sort.rb",
      "code": "<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">selection_sort</span><span class=\"hljs-params\">(array)</span></span>\n  n = array.length - <span class=\"hljs-number\">1</span>\n  i = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> i &lt;= n - <span class=\"hljs-number\">1</span>\n    smallest = i\n    j = i + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> j &lt;= n\n      smallest = j <span class=\"hljs-keyword\">if</span> array[j] &lt; array[smallest]\n      j += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n    array[i], array[smallest] = array[smallest], array[i] <span class=\"hljs-keyword\">if</span> i != smallest\n    i += <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">end</span>\n  array\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-keyword\">if</span> <span class=\"hljs-variable\">$0</span> == <span class=\"hljs-keyword\">__FILE__</span>\n  puts <span class=\"hljs-string\">&#x27;Enter a list of numbers separated by space&#x27;</span>\n\n  list = gets.split.map(&amp;<span class=\"hljs-symbol\">:to_i</span>)\n  p selection_sort(list)\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "php": {
      "dir": "sorting/selectionSort.php",
      "url": "https://github.com/TheAlgorithms/php/tree/master/sorting/selectionSort.php",
      "code": "<span class=\"hljs-meta\">&lt;?php</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">selectionSorting</span>(<span class=\"hljs-params\"><span class=\"hljs-variable\">$array</span></span>)</span>{\n    <span class=\"hljs-variable\">$length</span>=count(<span class=\"hljs-variable\">$array</span>);\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$i</span>=<span class=\"hljs-number\">0</span>;<span class=\"hljs-variable\">$i</span>&lt;<span class=\"hljs-variable\">$length</span>;<span class=\"hljs-variable\">$i</span>++){\n        <span class=\"hljs-variable\">$lowest</span>=<span class=\"hljs-variable\">$i</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-variable\">$j</span>=<span class=\"hljs-variable\">$i</span>+<span class=\"hljs-number\">1</span>;<span class=\"hljs-variable\">$j</span>&lt;<span class=\"hljs-variable\">$length</span>;<span class=\"hljs-variable\">$j</span>++){\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$j</span>] &lt; <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$lowest</span>]){\n                <span class=\"hljs-variable\">$lowest</span>=<span class=\"hljs-variable\">$j</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable\">$i</span> !==<span class=\"hljs-variable\">$lowest</span>){\n            <span class=\"hljs-variable\">$temp</span>=<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$i</span>];\n            <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$i</span>]=<span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$lowest</span>];\n            <span class=\"hljs-variable\">$array</span>[<span class=\"hljs-variable\">$lowest</span>]=<span class=\"hljs-variable\">$temp</span>;\n        }\n\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable\">$array</span>;\n}\n"
    },
    "kotlin": {
      "dir": "src/main/kotlin/sort/SelectionSort.kt",
      "url": "https://github.com/TheAlgorithms/kotlin/tree/master/src/main/kotlin/sort/SelectionSort.kt",
      "code": "<span class=\"hljs-keyword\">package</span> sort\n\n<span class=\"hljs-comment\">/**\n * This method implements the Generic Selection Sort\n *\n * <span class=\"hljs-doctag\">@param</span> array The array to be sorted\n * Sorts the array by repeatedly finding the minimum element from unsorted part and putting in the beginning\n *\n * Worst-case performance\tO(n^2)\n * Best-case performance\tO(n^2)\n * Average performance\tO(n^2)\n * Worst-case space complexity\tO(1)\n **/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">fun</span> <span class=\"hljs-type\">&lt;T : Comparable&lt;T&gt;</span>&gt; <span class=\"hljs-title\">selectionSort</span><span class=\"hljs-params\">(array: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">T</span>&gt;)</span></span> {\n    <span class=\"hljs-keyword\">val</span> length = array.size - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0.</span>.length) {\n        <span class=\"hljs-keyword\">var</span> idx = i\n        <span class=\"hljs-keyword\">for</span> (j <span class=\"hljs-keyword\">in</span> i + <span class=\"hljs-number\">1.</span>.length) {\n            <span class=\"hljs-keyword\">if</span> (array[j] &lt; array[idx]) {\n                idx = j\n            }\n        }\n\n        swapElements(array, i, idx)\n    }\n}\n"
    },
    "scala": {
      "dir": "src/main/scala/Sort/SelectionSort.scala",
      "url": "https://github.com/TheAlgorithms/scala/tree/master/src/main/scala/Sort/SelectionSort.scala",
      "code": "<span class=\"hljs-keyword\">package</span> <span class=\"hljs-type\">Sort</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">object</span> <span class=\"hljs-title\">SelectionSort</span> </span>{\n\n  <span class=\"hljs-comment\">/**\n    *\n    * @param array - a sequence of unsorted integers\n    * @return - sequence of sorted integers @array\n    */</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">selectionSort</span></span>(array: <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>]): <span class=\"hljs-type\">Array</span>[<span class=\"hljs-type\">Int</span>] = {\n\n    <span class=\"hljs-keyword\">for</span> (i &lt;- <span class=\"hljs-number\">0</span> to array.length - <span class=\"hljs-number\">1</span>) {\n\n      <span class=\"hljs-keyword\">var</span> min: <span class=\"hljs-type\">Int</span> = i\n      <span class=\"hljs-keyword\">var</span> minVal = array(i)\n\n      <span class=\"hljs-keyword\">for</span> (j &lt;- i + <span class=\"hljs-number\">1</span> to array.length - <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">if</span> (array(j) &lt; minVal) {\n          min = j\n          minVal = array(j)\n        }\n      }\n\n      <span class=\"hljs-keyword\">val</span> temp: <span class=\"hljs-type\">Int</span> = array(i)\n      array(i) = array(min)\n      array(min) = temp\n\n    }\n\n    array\n  }\n}"
    },
    "swift": {
      "dir": "sorts/SelectionSort.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/sorts/SelectionSort.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">Array</span> <span class=\"hljs-title class_\">where</span> <span class=\"hljs-title class_\">Element</span>: <span class=\"hljs-title class_\">Comparable</span> {\n<span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">selectionSort</span>() -&gt; <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">Element</span>&gt; {     \n        \n        <span class=\"hljs-keyword\">guard</span> <span class=\"hljs-keyword\">self</span>.count <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>\n        }        \n        \n        <span class=\"hljs-keyword\">var</span> output: <span class=\"hljs-type\">Array</span>&lt;<span class=\"hljs-type\">Element</span>&gt; <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>\n                \n        <span class=\"hljs-keyword\">for</span> primaryindex <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">0</span><span class=\"hljs-operator\">..&lt;</span>output.count {\n                        \n            <span class=\"hljs-keyword\">var</span> minimum <span class=\"hljs-operator\">=</span> primaryindex\n            <span class=\"hljs-keyword\">var</span> secondaryindex <span class=\"hljs-operator\">=</span> primaryindex <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n                        \n            <span class=\"hljs-keyword\">while</span> secondaryindex <span class=\"hljs-operator\">&lt;</span> output.count {\n         \n                <span class=\"hljs-keyword\">if</span> output[minimum] <span class=\"hljs-operator\">&gt;</span> output[secondaryindex] {\n                    minimum <span class=\"hljs-operator\">=</span> secondaryindex\n                }                \n                secondaryindex <span class=\"hljs-operator\">+=</span> <span class=\"hljs-number\">1</span>\n            }\n            \n            <span class=\"hljs-keyword\">if</span> primaryindex <span class=\"hljs-operator\">!=</span> minimum {\n            output.swapAt(primaryindex, minimum)\n            }            \n        }\n                \n        <span class=\"hljs-keyword\">return</span> output        \n    }\n}\n\n<span class=\"hljs-comment\">// The code below can be used for testing</span>\n\n<span class=\"hljs-comment\">// let numberList : Array&lt;Int&gt; = [15, 2, 23, 11, 3, 9]</span>\n<span class=\"hljs-comment\">// let results: Array&lt;Int&gt; = numberList.selectionSort()</span>\n<span class=\"hljs-comment\">// print(results)</span>\n"
    },
    "elm": {
      "dir": "src/Sorting/SelectionSort.elm",
      "url": "https://github.com/TheAlgorithms/elm/tree/master/src/Sorting/SelectionSort.elm",
      "code": "<span class=\"hljs-keyword\">module</span> SelectionSort <span class=\"hljs-keyword\">exposing</span> (output)\n\n<span class=\"hljs-keyword\">import</span> Util\n\n\n<span class=\"hljs-title\">getNextMinVal</span> : <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; ( <span class=\"hljs-type\">Int</span>, <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> )\n<span class=\"hljs-title\">getNextMinVal</span> comparedWith lst =\n    <span class=\"hljs-keyword\">case</span> lst <span class=\"hljs-keyword\">of</span>\n        [] -&gt;\n            ( comparedWith, [] )\n\n        h :: tail -&gt;\n            <span class=\"hljs-keyword\">if</span> comparedWith &lt; h <span class=\"hljs-keyword\">then</span>\n                <span class=\"hljs-keyword\">let</span>\n                    recRes =\n                        getNextMinVal comparedWith tail\n                <span class=\"hljs-keyword\">in</span>\n                ( <span class=\"hljs-type\">Tuple</span>.first recRes, h :: <span class=\"hljs-type\">Tuple</span>.second recRes )\n\n            <span class=\"hljs-keyword\">else</span>\n                <span class=\"hljs-keyword\">let</span>\n                    recRes =\n                        getNextMinVal h tail\n                <span class=\"hljs-keyword\">in</span>\n                ( <span class=\"hljs-type\">Tuple</span>.first recRes, comparedWith :: <span class=\"hljs-type\">Tuple</span>.second recRes )\n\n\n<span class=\"hljs-title\">selectionSort</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span> -&gt; <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">Int</span>\n<span class=\"hljs-title\">selectionSort</span> unsorted =\n    <span class=\"hljs-keyword\">case</span> unsorted <span class=\"hljs-keyword\">of</span>\n        [] -&gt;\n            []\n\n        h :: [] -&gt;\n            [ h ]\n\n        h :: tail -&gt;\n            <span class=\"hljs-keyword\">let</span>\n                firstSorted =\n                    getNextMinVal h tail\n            <span class=\"hljs-keyword\">in</span>\n            <span class=\"hljs-type\">Tuple</span>.first firstSorted :: selectionSort (<span class=\"hljs-type\">Tuple</span>.second firstSorted)\n\n\n<span class=\"hljs-title\">output</span> : <span class=\"hljs-type\">List</span> <span class=\"hljs-type\">String</span> -&gt; <span class=\"hljs-type\">String</span>\n<span class=\"hljs-title\">output</span> args =\n    <span class=\"hljs-type\">Util</span>.sortingOutputDef args selectionSort\n"
    },
    "julia": {
      "dir": "src/sorts/selection_sort.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/sorts/selection_sort.jl",
      "code": "<span class=\"hljs-keyword\">function</span> SelectionSort!(arr::<span class=\"hljs-built_in\">Vector</span>{T})<span class=\"hljs-keyword\">where</span> T\n    l=length(arr)\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:l-<span class=\"hljs-number\">1</span>\n        place=i\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i+<span class=\"hljs-number\">1</span>:l\n            <span class=\"hljs-keyword\">if</span> arr[j]&lt;arr[place] place=j <span class=\"hljs-keyword\">end</span>\n        <span class=\"hljs-keyword\">end</span>\n        temp=arr[i]\n        arr[i]=arr[place]\n        arr[place]=temp\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Sorters/Comparison/SelectionSorter.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Sorters/Comparison/SelectionSorter.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Sorters.Comparison</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Class that implements selection sort algorithm.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Type of array element.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SelectionSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt; : <span class=\"hljs-title\">IComparisonSorter</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Sorts array using specified comparer,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     internal, in-place, stable,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n^2),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(1),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - array length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;array&quot;&gt;</span>Array to sort.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;comparer&quot;&gt;</span>Compares elements.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Sort</span>(<span class=\"hljs-params\">T[] array, IComparer&lt;T&gt; comparer</span>)</span>\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length - <span class=\"hljs-number\">1</span>; i++)\n            {\n                <span class=\"hljs-keyword\">var</span> jmin = i;\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; array.Length; j++)\n                {\n                    <span class=\"hljs-keyword\">if</span> (comparer.Compare(array[jmin], array[j]) &gt; <span class=\"hljs-number\">0</span>)\n                    {\n                        jmin = j;\n                    }\n                }\n\n                <span class=\"hljs-keyword\">var</span> t = array[i];\n                array[i] = array[jmin];\n                array[jmin] = t;\n            }\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Lalit Umbarkar",
      "email": "MrL1605@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anant Kanchan",
      "email": "66024577+anantcodes@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "spamegg",
      "email": "spamegg@pm.me",
      "commits": 1
    },
    {
      "name": "khanhhuynguyenvu",
      "email": "khanhhuynguyenvu@gmail.com",
      "commits": 1
    },
    {
      "name": "Emil Suleymanov",
      "email": "emil.suleymanov@tum.de",
      "commits": 1
    },
    {
      "name": "Bhavya Karia",
      "email": "bhavyakaria@yahoo.in",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "Arnav Borborah",
      "email": "arnavborborah11@gmail.com",
      "commits": 1
    },
    {
      "name": "Shrutikhare180",
      "email": "43774461+Shrutikhare180@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Rratic",
      "email": "73381027+Rratic@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "mattan",
      "email": "mattany@gmali.com",
      "commits": 1
    },
    {
      "name": "vinayak",
      "email": "itssvinayak@gmail.com",
      "commits": 1
    },
    {
      "name": "Nicholas Mertin",
      "email": "nmertin@mertin.home",
      "commits": 1
    },
    {
      "name": "vzvu3k6k",
      "email": "vzvu3k6k@gmail.com",
      "commits": 1
    },
    {
      "name": "Rak Laptudirm",
      "email": "68542775+raklaptudirm@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "zoomdong",
      "email": "1344492820@qq.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "krishna.vedala@ieee.org",
      "commits": 1
    },
    {
      "name": "Rupeshiya",
      "email": "31209617+Rupeshiya@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "kbrx93",
      "email": "kbrx93@gmail.com",
      "commits": 1
    },
    {
      "name": "Hardik Kapadia",
      "email": "thecoderenroute@gmail.com",
      "commits": 1
    },
    {
      "name": "CodingCookieRookie",
      "email": "38324769+CodingCookieRookie@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nik",
      "email": "nikitap4.92@gmail.com",
      "commits": 1
    },
    {
      "name": "KyleScharnhorst",
      "email": "scharkr1@uw.edu",
      "commits": 1
    },
    {
      "name": "matkosoric",
      "email": "soric.matko@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "YasirChoudhary",
      "email": "yasirchoudhary81@gmail.com",
      "commits": 1
    },
    {
      "name": "97arushisharma",
      "email": "97arushisharma@gmail.com",
      "commits": 1
    },
    {
      "name": "Akshay Sharma",
      "email": "akshay.sharma09695@gmail.com",
      "commits": 1
    },
    {
      "name": "JakeBonek",
      "email": "jake.bonek@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Varun Upadhyay",
      "email": "varun.u28@gmail.com",
      "commits": 2
    },
    {
      "name": "Connor Bottum",
      "email": "cbb692@gmail.com",
      "commits": 2
    },
    {
      "name": "Bogdan Lazar",
      "email": "bogdan@bogdanlazar.com",
      "commits": 2
    },
    {
      "name": "Mohit Sharma",
      "email": "mohit1532.cse16@chitkara.edu.in",
      "commits": 2
    },
    {
      "name": "sungbin",
      "email": "21700613@handong.edu",
      "commits": 2
    },
    {
      "name": "Anirban166",
      "email": "bloodraven166@gmail.com",
      "commits": 3
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 3
    },
    {
      "name": "Mertcan Davulcu",
      "email": "54983926+mertcandav@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {
    "es": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/es/Algoritmos de Ordenamiento/Ordenamiento de selección.md",
    "en": "https://github.com/TheAlgorithms/Algorithms-Explanation/tree/master/en/Sorting Algorithms/Selection Sort.md"
  }
}
