{
  "slug": "decrypt-caesar-with-chi-squared",
  "name": "Decrypt Caesar with Chi Squared",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/decrypt_caesar_with_chi_squared.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/decrypt_caesar_with_chi_squared.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Optional</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decrypt_caesar_with_chi_squared</span>(<span class=\"hljs-params\">\n    ciphertext: <span class=\"hljs-built_in\">str</span>,\n    cipher_alphabet: <span class=\"hljs-type\">Optional</span>[<span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]] = <span class=\"hljs-literal\">None</span>,\n    frequencies_dict: <span class=\"hljs-type\">Optional</span>[<span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">float</span>]] = <span class=\"hljs-literal\">None</span>,\n    case_sensetive: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">False</span>,\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Basic Usage\n    ===========\n    Arguments:\n    * ciphertext (str): the text to decode (encoded with the caesar cipher)\n\n    Optional Arguments:\n    * cipher_alphabet (list): the alphabet used for the cipher (each letter is\n      a string separated by commas)\n    * frequencies_dict (dict): a dictionary of word frequencies where keys are\n      the letters and values are a percentage representation of the frequency as\n      a decimal/float\n    * case_sensetive (bool): a boolean value: True if the case matters during\n      decryption, False if it doesn&#x27;t\n\n    Returns:\n    * A tuple in the form of:\n      (\n        most_likely_cipher,\n        most_likely_cipher_chi_squared_value,\n        decoded_most_likely_cipher\n      )\n\n      where...\n      - most_likely_cipher is an integer representing the shift of the smallest\n        chi-squared statistic (most likely key)\n      - most_likely_cipher_chi_squared_value is a float representing the\n        chi-squared statistic of the most likely shift\n      - decoded_most_likely_cipher is a string with the decoded cipher\n        (decoded by the most_likely_cipher key)\n\n\n    The Chi-squared test\n    ====================\n\n    The caesar cipher\n    -----------------\n    The caesar cipher is a very insecure encryption algorithm, however it has\n    been used since Julius Caesar. The cipher is a simple substitution cipher\n    where each character in the plain text is replaced by a character in the\n    alphabet a certain number of characters after the original character. The\n    number of characters away is called the shift or key. For example:\n\n    Plain text: hello\n    Key: 1\n    Cipher text: ifmmp\n    (each letter in hello has been shifted one to the right in the eng. alphabet)\n\n    As you can imagine, this doesn&#x27;t provide lots of security. In fact\n    decrypting ciphertext by brute-force is extremely easy even by hand. However\n     one way to do that is the chi-squared test.\n\n    The chi-squared test\n    -------------------\n    Each letter in the english alphabet has a frequency, or the amount of times\n    it shows up compared to other letters (usually expressed as a decimal\n    representing the percentage likelihood). The most common letter in the\n    english language is &quot;e&quot; with a frequency of 0.11162 or 11.162%. The test is\n    completed in the following fashion.\n\n    1. The ciphertext is decoded in a brute force way (every combination of the\n       26 possible combinations)\n    2. For every combination, for each letter in the combination, the average\n       amount of times the letter should appear the message is calculated by\n       multiplying the total number of characters by the frequency of the letter\n\n       For example:\n       In a message of 100 characters, e should appear around 11.162 times.\n\n     3. Then, to calculate the margin of error (the amount of times the letter\n        SHOULD appear with the amount of times the letter DOES appear), we use\n        the chi-squared test. The following formula is used:\n\n        Let:\n        - n be the number of times the letter actually appears\n        - p be the predicted value of the number of times the letter should\n          appear (see #2)\n        - let v be the chi-squared test result (referred to here as chi-squared\n          value/statistic)\n\n        (n - p)^2\n        --------- = v\n           p\n\n    4. Each chi squared value for each letter is then added up to the total.\n       The total is the chi-squared statistic for that encryption key.\n    5. The encryption key with the lowest chi-squared value is the most likely\n       to be the decoded answer.\n\n    Further Reading\n    ================\n\n    * http://practicalcryptography.com/cryptanalysis/text-characterisation/chi-squared-\n        statistic/\n    * https://en.wikipedia.org/wiki/Letter_frequency\n    * https://en.wikipedia.org/wiki/Chi-squared_test\n    * https://en.m.wikipedia.org/wiki/Caesar_cipher\n\n    Doctests\n    ========\n    &gt;&gt;&gt; decrypt_caesar_with_chi_squared(\n    ...    &#x27;dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!&#x27;\n    ... )  # doctest: +NORMALIZE_WHITESPACE\n    (7, 3129.228005747531,\n     &#x27;why is the caesar cipher so popular? it is too easy to crack!&#x27;)\n\n    &gt;&gt;&gt; decrypt_caesar_with_chi_squared(&#x27;crybd cdbsxq&#x27;)\n    (10, 233.35343938980898, &#x27;short string&#x27;)\n\n    &gt;&gt;&gt; decrypt_caesar_with_chi_squared(12)\n    Traceback (most recent call last):\n    AttributeError: &#x27;int&#x27; object has no attribute &#x27;lower&#x27;\n    &quot;&quot;&quot;</span>\n    alphabet_letters = cipher_alphabet <span class=\"hljs-keyword\">or</span> [<span class=\"hljs-built_in\">chr</span>(i) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">97</span>, <span class=\"hljs-number\">123</span>)]\n\n    <span class=\"hljs-comment\"># If the argument is None or the user provided an empty dictionary</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> frequencies_dict:\n        <span class=\"hljs-comment\"># Frequencies of letters in the english language (how much they show up)</span>\n        frequencies = {\n            <span class=\"hljs-string\">&quot;a&quot;</span>: <span class=\"hljs-number\">0.08497</span>,\n            <span class=\"hljs-string\">&quot;b&quot;</span>: <span class=\"hljs-number\">0.01492</span>,\n            <span class=\"hljs-string\">&quot;c&quot;</span>: <span class=\"hljs-number\">0.02202</span>,\n            <span class=\"hljs-string\">&quot;d&quot;</span>: <span class=\"hljs-number\">0.04253</span>,\n            <span class=\"hljs-string\">&quot;e&quot;</span>: <span class=\"hljs-number\">0.11162</span>,\n            <span class=\"hljs-string\">&quot;f&quot;</span>: <span class=\"hljs-number\">0.02228</span>,\n            <span class=\"hljs-string\">&quot;g&quot;</span>: <span class=\"hljs-number\">0.02015</span>,\n            <span class=\"hljs-string\">&quot;h&quot;</span>: <span class=\"hljs-number\">0.06094</span>,\n            <span class=\"hljs-string\">&quot;i&quot;</span>: <span class=\"hljs-number\">0.07546</span>,\n            <span class=\"hljs-string\">&quot;j&quot;</span>: <span class=\"hljs-number\">0.00153</span>,\n            <span class=\"hljs-string\">&quot;k&quot;</span>: <span class=\"hljs-number\">0.01292</span>,\n            <span class=\"hljs-string\">&quot;l&quot;</span>: <span class=\"hljs-number\">0.04025</span>,\n            <span class=\"hljs-string\">&quot;m&quot;</span>: <span class=\"hljs-number\">0.02406</span>,\n            <span class=\"hljs-string\">&quot;n&quot;</span>: <span class=\"hljs-number\">0.06749</span>,\n            <span class=\"hljs-string\">&quot;o&quot;</span>: <span class=\"hljs-number\">0.07507</span>,\n            <span class=\"hljs-string\">&quot;p&quot;</span>: <span class=\"hljs-number\">0.01929</span>,\n            <span class=\"hljs-string\">&quot;q&quot;</span>: <span class=\"hljs-number\">0.00095</span>,\n            <span class=\"hljs-string\">&quot;r&quot;</span>: <span class=\"hljs-number\">0.07587</span>,\n            <span class=\"hljs-string\">&quot;s&quot;</span>: <span class=\"hljs-number\">0.06327</span>,\n            <span class=\"hljs-string\">&quot;t&quot;</span>: <span class=\"hljs-number\">0.09356</span>,\n            <span class=\"hljs-string\">&quot;u&quot;</span>: <span class=\"hljs-number\">0.02758</span>,\n            <span class=\"hljs-string\">&quot;v&quot;</span>: <span class=\"hljs-number\">0.00978</span>,\n            <span class=\"hljs-string\">&quot;w&quot;</span>: <span class=\"hljs-number\">0.02560</span>,\n            <span class=\"hljs-string\">&quot;x&quot;</span>: <span class=\"hljs-number\">0.00150</span>,\n            <span class=\"hljs-string\">&quot;y&quot;</span>: <span class=\"hljs-number\">0.01994</span>,\n            <span class=\"hljs-string\">&quot;z&quot;</span>: <span class=\"hljs-number\">0.00077</span>,\n        }\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-comment\"># Custom frequencies dictionary</span>\n        frequencies = frequencies_dict\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> case_sensetive:\n        ciphertext = ciphertext.lower()\n\n    <span class=\"hljs-comment\"># Chi squared statistic values</span>\n    chi_squared_statistic_values: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">float</span>, <span class=\"hljs-built_in\">str</span>]] = {}\n\n    <span class=\"hljs-comment\"># cycle through all of the shifts</span>\n    <span class=\"hljs-keyword\">for</span> shift <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(alphabet_letters)):\n        decrypted_with_shift = <span class=\"hljs-string\">&quot;&quot;</span>\n\n        <span class=\"hljs-comment\"># decrypt the message with the shift</span>\n        <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> ciphertext:\n            <span class=\"hljs-keyword\">try</span>:\n                <span class=\"hljs-comment\"># Try to index the letter in the alphabet</span>\n                new_key = (alphabet_letters.index(letter) - shift) % <span class=\"hljs-built_in\">len</span>(\n                    alphabet_letters\n                )\n                decrypted_with_shift += alphabet_letters[new_key]\n            <span class=\"hljs-keyword\">except</span> ValueError:\n                <span class=\"hljs-comment\"># Append the character if it isn&#x27;t in the alphabet</span>\n                decrypted_with_shift += letter\n\n        chi_squared_statistic = <span class=\"hljs-number\">0.0</span>\n\n        <span class=\"hljs-comment\"># Loop through each letter in the decoded message with the shift</span>\n        <span class=\"hljs-keyword\">for</span> letter <span class=\"hljs-keyword\">in</span> decrypted_with_shift:\n            <span class=\"hljs-keyword\">if</span> case_sensetive:\n                <span class=\"hljs-keyword\">if</span> letter <span class=\"hljs-keyword\">in</span> frequencies:\n                    <span class=\"hljs-comment\"># Get the amount of times the letter occurs in the message</span>\n                    occurrences = decrypted_with_shift.count(letter)\n\n                    <span class=\"hljs-comment\"># Get the excepcted amount of times the letter should appear based</span>\n                    <span class=\"hljs-comment\"># on letter frequencies</span>\n                    expected = frequencies[letter] * occurrences\n\n                    <span class=\"hljs-comment\"># Complete the chi squared statistic formula</span>\n                    chi_letter_value = ((occurrences - expected) ** <span class=\"hljs-number\">2</span>) / expected\n\n                    <span class=\"hljs-comment\"># Add the margin of error to the total chi squared statistic</span>\n                    chi_squared_statistic += chi_letter_value\n            <span class=\"hljs-keyword\">else</span>:\n                <span class=\"hljs-keyword\">if</span> letter.lower() <span class=\"hljs-keyword\">in</span> frequencies:\n                    <span class=\"hljs-comment\"># Get the amount of times the letter occurs in the message</span>\n                    occurrences = decrypted_with_shift.count(letter)\n\n                    <span class=\"hljs-comment\"># Get the excepcted amount of times the letter should appear based</span>\n                    <span class=\"hljs-comment\"># on letter frequencies</span>\n                    expected = frequencies[letter] * occurrences\n\n                    <span class=\"hljs-comment\"># Complete the chi squared statistic formula</span>\n                    chi_letter_value = ((occurrences - expected) ** <span class=\"hljs-number\">2</span>) / expected\n\n                    <span class=\"hljs-comment\"># Add the margin of error to the total chi squared statistic</span>\n                    chi_squared_statistic += chi_letter_value\n\n        <span class=\"hljs-comment\"># Add the data to the chi_squared_statistic_values dictionary</span>\n        chi_squared_statistic_values[shift] = (\n            chi_squared_statistic,\n            decrypted_with_shift,\n        )\n\n    <span class=\"hljs-comment\"># Get the most likely cipher by finding the cipher with the smallest chi squared</span>\n    <span class=\"hljs-comment\"># statistic</span>\n    most_likely_cipher: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-built_in\">min</span>(  <span class=\"hljs-comment\"># type: ignore</span>\n        chi_squared_statistic_values,  <span class=\"hljs-comment\"># type: ignore</span>\n        key=chi_squared_statistic_values.get,  <span class=\"hljs-comment\"># type: ignore</span>\n    )  <span class=\"hljs-comment\"># type: ignore</span>\n\n    <span class=\"hljs-comment\"># Get all the data from the most likely cipher (key, decoded message)</span>\n    (\n        most_likely_cipher_chi_squared_value,\n        decoded_most_likely_cipher,\n    ) = chi_squared_statistic_values[most_likely_cipher]\n\n    <span class=\"hljs-comment\"># Return the data on the most likely shift</span>\n    <span class=\"hljs-keyword\">return</span> (\n        most_likely_cipher,\n        most_likely_cipher_chi_squared_value,\n        decoded_most_likely_cipher,\n    )\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Aniruddha Bhattacharjee",
      "email": "aniruddha97bhatt@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Maxim R",
      "email": "49735721+mrmaxguns@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
