{
  "slug": "dict",
  "name": "Dict",
  "categories": ["datastructures", "dictionary"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/dictionary/dict.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/dictionary/dict.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;dict.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/* simple constructor */</span>\nDictionary *<span class=\"hljs-title function_\">create_dict</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    Dictionary *p_dic = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(Dictionary));\n    <span class=\"hljs-keyword\">if</span> (p_dic)\n    {\n        p_dic-&gt;number_of_elements = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\">/* initializes the elemens of the array with NULL-pointer */</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; MAXELEMENTS; i++)\n        {\n            p_dic-&gt;elements[i] = <span class=\"hljs-literal\">NULL</span>;\n        }\n\n        <span class=\"hljs-keyword\">return</span> p_dic;\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;unable to create a dictionary\\n&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/*\n    utility function\n    sdbm hash algorithm\n    returns a hashcode for the given string &#x27;s&#x27;\n*/</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">get_hash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> s[])</span>\n{\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> hash_code = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-comment\">/* iterates over string at each character */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> counter = <span class=\"hljs-number\">0</span>; s[counter] != <span class=\"hljs-string\">&#x27;\\0&#x27;</span>; counter++)\n    {\n        <span class=\"hljs-comment\">/* actual computing of the hash code */</span>\n        hash_code =\n            s[counter] + (hash_code &lt;&lt; <span class=\"hljs-number\">6</span>) + (hash_code &lt;&lt; <span class=\"hljs-number\">16</span>) - hash_code;\n    }\n\n    <span class=\"hljs-comment\">/* % modulo is for fitting the index in array. */</span>\n    <span class=\"hljs-keyword\">return</span> hash_code % MAXELEMENTS;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add_item_label</span><span class=\"hljs-params\">(Dictionary *dic, <span class=\"hljs-type\">char</span> label[], <span class=\"hljs-type\">void</span> *item)</span>\n{\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> index = get_hash(label);\n\n    <span class=\"hljs-comment\">/* make sure index is fitting */</span>\n    <span class=\"hljs-keyword\">if</span> (index &lt; MAXELEMENTS)\n    {\n        dic-&gt;elements[index] = item;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/* error case */</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">add_item_index</span><span class=\"hljs-params\">(Dictionary *dic, <span class=\"hljs-type\">int</span> index, <span class=\"hljs-type\">void</span> *item)</span>\n{\n    <span class=\"hljs-comment\">/* make sure whether this place is already given */</span>\n    <span class=\"hljs-keyword\">if</span> (!dic-&gt;elements[index])\n    {\n        dic-&gt;elements[index] = item;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-comment\">/* error case */</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n}\n\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">get_element_label</span><span class=\"hljs-params\">(Dictionary *dict, <span class=\"hljs-type\">char</span> s[])</span>\n{\n    <span class=\"hljs-type\">int</span> index = get_hash(s);\n    <span class=\"hljs-keyword\">if</span> (dict-&gt;elements[index])\n    {\n        <span class=\"hljs-keyword\">return</span> dict-&gt;elements[index];\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;None entry at given label\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n}\n\n<span class=\"hljs-type\">void</span> *<span class=\"hljs-title function_\">get_element_index</span><span class=\"hljs-params\">(Dictionary *dict, <span class=\"hljs-type\">int</span> index)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; index &lt; MAXELEMENTS)\n    {\n        <span class=\"hljs-keyword\">return</span> dict-&gt;elements[index];\n    }\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;index out of bounds!\\n&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NULL</span>;\n}\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">destroy</span><span class=\"hljs-params\">(Dictionary *dict)</span> { <span class=\"hljs-built_in\">free</span>(dict); }"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
