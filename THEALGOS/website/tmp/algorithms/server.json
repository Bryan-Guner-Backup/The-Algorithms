{
  "slug": "server",
  "name": "Server",
  "categories": ["clientserver"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "client_server/server.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/client_server/server.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @author [Nairit11](https://github.com/Nairit11)\n * @author [Krishna Vedala](https://github.com/kvedala)\n * @brief Server side implementation of Server-Client system.\n * @see client_server/client.c\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// #ifdef HAS_UNISTD</span>\n<span class=\"hljs-comment\">// #include &lt;unistd.h&gt;</span>\n<span class=\"hljs-comment\">// #endif</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> _WINSOCK_DEPRECATED_NO_WARNINGS  <span class=\"hljs-comment\">// will make the code invalid for next</span></span>\n                                         <span class=\"hljs-comment\">// MSVC compiler versions</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;winsock2.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> bzero(b, len) \\\n    (memset((b), <span class=\"hljs-string\">&#x27;\\0&#x27;</span>, (len)), (void)0) <span class=\"hljs-comment\">/**&lt; BSD name not in windows */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> read(a, b, c) recv(a, b, c, 0)  <span class=\"hljs-comment\">/**&lt; map BSD name to Winsock */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> write(a, b, c) send(a, b, c, 0) <span class=\"hljs-comment\">/**&lt; map BSD name to Winsock */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> close closesocket               <span class=\"hljs-comment\">/**&lt; map BSD name to Winsock */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-comment\">// if not windows platform</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;arpa/inet.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netdb.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 80             <span class=\"hljs-comment\">/**&lt; max. characters per message */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> PORT 8080          <span class=\"hljs-comment\">/**&lt; port number to connect to */</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> SA struct sockaddr <span class=\"hljs-comment\">/**&lt; shortname for sockaddr */</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n<span class=\"hljs-comment\">/** Cleanup function will be automatically called on program exit */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">cleanup</span><span class=\"hljs-params\">()</span> { WSACleanup(); }\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/**\n * Continuous loop to send and receive over the socket.\n * Exits when &quot;exit&quot; is sent from commandline.\n * @param sockfd socket handle number\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> sockfd)</span>\n{\n    <span class=\"hljs-type\">char</span> buff[MAX];\n    <span class=\"hljs-type\">int</span> n;\n    <span class=\"hljs-comment\">// infinite loop for chat</span>\n    <span class=\"hljs-keyword\">for</span> (;;)\n    {\n        bzero(buff, MAX);\n\n        <span class=\"hljs-comment\">// read the message from client and copy it in buffer</span>\n        read(sockfd, buff, <span class=\"hljs-keyword\">sizeof</span>(buff));\n        <span class=\"hljs-comment\">// print buffer which contains the client contents</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;From client: %s\\t To client : &quot;</span>, buff);\n        bzero(buff, MAX);\n        n = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-comment\">// copy server message in the buffer</span>\n        <span class=\"hljs-keyword\">while</span> ((buff[n++] = getchar()) != <span class=\"hljs-string\">&#x27;\\n&#x27;</span>)\n        {\n            ;\n        }\n\n        <span class=\"hljs-comment\">// and send that buffer to client</span>\n        write(sockfd, buff, <span class=\"hljs-keyword\">sizeof</span>(buff));\n\n        <span class=\"hljs-comment\">// if msg contains &quot;Exit&quot; then server exit and chat ended.</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">strncmp</span>(<span class=\"hljs-string\">&quot;exit&quot;</span>, buff, <span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">0</span>)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Server Exit...\\n&quot;</span>);\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/** Driver code */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _WIN32</span>\n    <span class=\"hljs-comment\">// when using winsock2.h, startup required</span>\n    WSADATA wsData;\n    <span class=\"hljs-keyword\">if</span> (WSAStartup(MAKEWORD(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>), &amp;wsData) != <span class=\"hljs-number\">0</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;WSA Startup error: \\n&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n    }\n\n    atexit(cleanup);  <span class=\"hljs-comment\">// register at-exit function</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n    <span class=\"hljs-type\">int</span> sockfd, connfd;\n    <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> len;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> <span class=\"hljs-title\">servaddr</span>, <span class=\"hljs-title\">cli</span>;</span>\n\n    <span class=\"hljs-comment\">// socket create and verification</span>\n    sockfd = socket(AF_INET, SOCK_STREAM, <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">if</span> (sockfd == <span class=\"hljs-number\">-1</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;socket creation failed...\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Socket successfully created..\\n&quot;</span>);\n    }\n    bzero(&amp;servaddr, <span class=\"hljs-keyword\">sizeof</span>(servaddr));\n\n    <span class=\"hljs-comment\">// assign IP, PORT</span>\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);\n    servaddr.sin_port = htons(PORT);\n\n    <span class=\"hljs-comment\">// Binding newly created socket to given IP and verification</span>\n    <span class=\"hljs-keyword\">if</span> ((bind(sockfd, (SA *)&amp;servaddr, <span class=\"hljs-keyword\">sizeof</span>(servaddr))) != <span class=\"hljs-number\">0</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;socket bind failed...\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Socket successfully binded..\\n&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">// Now server is ready to listen and verification</span>\n    <span class=\"hljs-keyword\">if</span> ((listen(sockfd, <span class=\"hljs-number\">5</span>)) != <span class=\"hljs-number\">0</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;Listen failed...\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Server listening..\\n&quot;</span>);\n    }\n    len = <span class=\"hljs-keyword\">sizeof</span>(cli);\n\n    <span class=\"hljs-comment\">// Accept the data packet from client and verification</span>\n    connfd = accept(sockfd, (SA *)&amp;cli, &amp;len);\n    <span class=\"hljs-keyword\">if</span> (connfd &lt; <span class=\"hljs-number\">0</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;server acccept failed...\\n&quot;</span>);\n        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n    }\n    <span class=\"hljs-keyword\">else</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;server acccept the client...\\n&quot;</span>);\n    }\n\n    <span class=\"hljs-comment\">// Function for chatting between client and server</span>\n    func(connfd);\n\n    <span class=\"hljs-comment\">// After chatting close the socket</span>\n    close(sockfd);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "gerroo",
      "email": "gerensuner@gmail.com",
      "commits": 1
    },
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 2
    },
    {
      "name": "Nairit Banerjee",
      "email": "nairit32@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
