{
  "slug": "gram-schmidt",
  "name": "Gram Schmidt",
  "categories": ["linearalgebra"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "linear_algebra/gram_schmidt.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/linear_algebra/gram_schmidt.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Gram Schmidt Orthogonalisation\n * Process](https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process)\n *\n * @details\n * Takes the input of Linearly Independent Vectors,\n * returns vectors orthogonal to each other.\n *\n * ### Algorithm\n * Take the first vector of given LI vectors as first vector of Orthogonal\n * vectors. Take projection of second input vector on the first vector of\n * Orthogonal vector and subtract it from the 2nd LI vector. Take projection of\n * third vector on the second vector of Othogonal vectors and subtract it from\n * the 3rd LI vector. Keep repeating the above process until all the vectors in\n * the given input array are exhausted.\n *\n * For Example:\n * In R2,\n * Input LI Vectors={(3,1),(2,2)}\n * then Orthogonal Vectors= {(3, 1),(-0.4, 1.2)}\n *\n *  Have defined maximum dimension of vectors to be 10 and number of vectors\n *  taken is 20.\n *  Please do not give linearly dependent vectors\n *\n *\n * @author [Akanksha Gupta](https://github.com/Akanksha-Gupta920)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>     <span class=\"hljs-comment\">/// for std::array</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span>     <span class=\"hljs-comment\">/// for fabs</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;math.h&quot;</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace linear_algebra\n * @brief Linear Algebra algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> linear_algebra {\n<span class=\"hljs-comment\">/**\n * @namespace gram_schmidt\n * @brief Functions for [Gram Schmidt Orthogonalisation\n * Process](https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process)\n */</span>\n<span class=\"hljs-keyword\">namespace</span> gram_schmidt {\n<span class=\"hljs-comment\">/**\n * Dot product function.\n * Takes 2 vectors along with their dimension as input and returns the dot\n * product.\n * @param x vector 1\n * @param y vector 2\n * @param c dimension of the vectors\n *\n * @returns sum\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">dot_product</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">10</span>&gt;&amp; x,\n                   <span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">10</span>&gt;&amp; y, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span>&amp; c)</span> </span>{\n    <span class=\"hljs-type\">double</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; c; ++i) {\n        sum += x[i] * y[i];\n    }\n    <span class=\"hljs-keyword\">return</span> sum;\n}\n\n<span class=\"hljs-comment\">/**\n * Projection Function\n * Takes input of 2 vectors along with their dimension and evaluates their\n * projection in temp\n *\n * @param x Vector 1\n * @param y Vector 2\n * @param c dimension of each vector\n *\n * @returns factor\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">projection</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">10</span>&gt;&amp; x,\n                  <span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">10</span>&gt;&amp; y, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span>&amp; c)</span> </span>{\n    <span class=\"hljs-type\">double</span> dot =\n        <span class=\"hljs-built_in\">dot_product</span>(x, y, c);  <span class=\"hljs-comment\">/// The dot product of two vectors is taken</span>\n    <span class=\"hljs-type\">double</span> anorm =\n        <span class=\"hljs-built_in\">dot_product</span>(y, y, c);  <span class=\"hljs-comment\">/// The norm of the second vector is taken.</span>\n    <span class=\"hljs-type\">double</span> factor =\n        dot /\n        anorm;  <span class=\"hljs-comment\">/// multiply that factor with every element in a 3rd vector,</span>\n                <span class=\"hljs-comment\">/// whose initial values are same as the 2nd vector.</span>\n    <span class=\"hljs-keyword\">return</span> factor;\n}\n\n<span class=\"hljs-comment\">/**\n * Function to print the orthogonalised vector\n *\n * @param r number of vectors\n * @param c dimenaion of vectors\n * @param B stores orthogonalised vectors\n *\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">display</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span>&amp; r, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span>&amp; c,\n             <span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">10</span>&gt;, <span class=\"hljs-number\">20</span>&gt;&amp; B)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; r; ++i) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Vector &quot;</span> &lt;&lt; i + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">&quot;: &quot;</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; c; ++j) {\n            std::cout &lt;&lt; B[i][j] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n        }\n        std::cout &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Function for the process of Gram Schimdt Process\n * @param r number of vectors\n * @param c dimension of vectors\n * @param A stores input of given LI vectors\n * @param B stores orthogonalised vectors\n *\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">gram_schmidt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> r, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span>&amp; c,\n                  <span class=\"hljs-keyword\">const</span> std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">10</span>&gt;, <span class=\"hljs-number\">20</span>&gt;&amp; A,\n                  std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">10</span>&gt;, <span class=\"hljs-number\">20</span>&gt; B)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (c &lt; r) {  <span class=\"hljs-comment\">/// we check whether appropriate dimensions are given or not.</span>\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Dimension of vector is less than number of vector, hence &quot;</span>\n                     <span class=\"hljs-string\">&quot;\\n first &quot;</span>\n                  &lt;&lt; c &lt;&lt; <span class=\"hljs-string\">&quot; vectors are orthogonalised\\n&quot;</span>;\n        r = c;\n    }\n\n    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">while</span> (k &lt;= r) {\n        <span class=\"hljs-keyword\">if</span> (k == <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; c; j++)\n                B[<span class=\"hljs-number\">0</span>][j] = A[<span class=\"hljs-number\">0</span>][j];  <span class=\"hljs-comment\">/// First vector is copied as it is.</span>\n        }\n\n        <span class=\"hljs-keyword\">else</span> {\n            std::array&lt;<span class=\"hljs-type\">double</span>, <span class=\"hljs-number\">10</span>&gt;\n                all_projection{};  <span class=\"hljs-comment\">/// array to store projections</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; c; ++i) {\n                all_projection[i] = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">/// First initialised to zero</span>\n            }\n\n            <span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">while</span> (l &lt; k) {\n                std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;\n                    temp{};           <span class=\"hljs-comment\">/// to store previous projected array</span>\n                <span class=\"hljs-type\">double</span> factor = NAN;  <span class=\"hljs-comment\">/// to store the factor by which the</span>\n                                      <span class=\"hljs-comment\">/// previous array will change</span>\n                factor = <span class=\"hljs-built_in\">projection</span>(A[k - <span class=\"hljs-number\">1</span>], B[l - <span class=\"hljs-number\">1</span>], c);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; c; ++i) {\n                    temp[i] = B[l - <span class=\"hljs-number\">1</span>][i] * factor;  <span class=\"hljs-comment\">/// projected array created</span>\n                }\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; c; ++j) {\n                    all_projection[j] =\n                        all_projection[j] +\n                        temp[j];  <span class=\"hljs-comment\">/// we take the projection with all the</span>\n                                  <span class=\"hljs-comment\">/// previous vector and add them.</span>\n                }\n                l++;\n            }\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; c; ++i) {\n                B[k - <span class=\"hljs-number\">1</span>][i] =\n                    A[k - <span class=\"hljs-number\">1</span>][i] -\n                    all_projection[i];  <span class=\"hljs-comment\">/// subtract total projection vector</span>\n                                        <span class=\"hljs-comment\">/// from the input vector</span>\n            }\n        }\n        k++;\n    }\n    <span class=\"hljs-built_in\">display</span>(r, c, B);  <span class=\"hljs-comment\">// for displaying orthogoanlised vectors</span>\n}\n}  <span class=\"hljs-comment\">// namespace gram_schmidt</span>\n}  <span class=\"hljs-comment\">// namespace linear_algebra</span>\n<span class=\"hljs-comment\">/**\n * Test Function. Process has been tested for 3 Sample Inputs\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;, 20&gt; a1 = {\n        {{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>}, {<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>}}};\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;, 20&gt; b1 = {{<span class=\"hljs-number\">0</span>}};\n    <span class=\"hljs-type\">double</span> dot1 = <span class=\"hljs-number\">0</span>;\n    linear_algebra::gram_schmidt::<span class=\"hljs-built_in\">gram_schmidt</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, a1, b1);\n    <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-number\">3</span>; ++j) {\n            dot1 = <span class=\"hljs-built_in\">fabs</span>(\n                linear_algebra::gram_schmidt::<span class=\"hljs-built_in\">dot_product</span>(b1[i], b1[j], <span class=\"hljs-number\">4</span>));\n            <span class=\"hljs-keyword\">if</span> (dot1 &gt; <span class=\"hljs-number\">0.1</span>) {\n                flag = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">if</span> (flag == <span class=\"hljs-number\">0</span>)\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Vectors are linearly dependent\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(flag == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test Case 1\\n &quot;</span>;\n\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;, 20&gt; a2 = {{{<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>}, {<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>}}};\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;, 20&gt; b2 = {{<span class=\"hljs-number\">0</span>}};\n    <span class=\"hljs-type\">double</span> dot2 = <span class=\"hljs-number\">0</span>;\n    linear_algebra::gram_schmidt::<span class=\"hljs-built_in\">gram_schmidt</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, a2, b2);\n    flag = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-number\">2</span>; ++j) {\n            dot2 = <span class=\"hljs-built_in\">fabs</span>(\n                linear_algebra::gram_schmidt::<span class=\"hljs-built_in\">dot_product</span>(b2[i], b2[j], <span class=\"hljs-number\">2</span>));\n            <span class=\"hljs-keyword\">if</span> (dot2 &gt; <span class=\"hljs-number\">0.1</span>) {\n                flag = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">if</span> (flag == <span class=\"hljs-number\">0</span>)\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Vectors are linearly dependent\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(flag == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test Case 2\\n&quot;</span>;\n\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;, 20&gt; a3 = {{{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-number\">-4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>}}};\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;, 20&gt; b3 = {{<span class=\"hljs-number\">0</span>}};\n    <span class=\"hljs-type\">double</span> dot3 = <span class=\"hljs-number\">0</span>;\n    linear_algebra::gram_schmidt::<span class=\"hljs-built_in\">gram_schmidt</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, a3, b3);\n    flag = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">1</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; <span class=\"hljs-number\">2</span>; ++j) {\n            dot3 = <span class=\"hljs-built_in\">fabs</span>(\n                linear_algebra::gram_schmidt::<span class=\"hljs-built_in\">dot_product</span>(b3[i], b3[j], <span class=\"hljs-number\">3</span>));\n            <span class=\"hljs-keyword\">if</span> (dot3 &gt; <span class=\"hljs-number\">0.1</span>) {\n                flag = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">if</span> (flag == <span class=\"hljs-number\">0</span>)\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Vectors are linearly dependent\\n&quot;</span>;\n    <span class=\"hljs-built_in\">assert</span>(flag == <span class=\"hljs-number\">1</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test Case 3\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main Function\n * @return 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> r = <span class=\"hljs-number\">0</span>, c = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// perform self tests</span>\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the dimension of your vectors\\n&quot;</span>;\n    std::cin &gt;&gt; c;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number of vectors you will enter\\n&quot;</span>;\n    std::cin &gt;&gt; r;\n\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;, 20&gt;\n        A{};  <span class=\"hljs-comment\">/// a 2-D array for storing all vectors</span>\n    std::array&lt;std::array&lt;<span class=\"hljs-type\">double</span>, 10&gt;, 20&gt; B = {\n        {<span class=\"hljs-number\">0</span>}};  <span class=\"hljs-comment\">/// a 2-D array for storing orthogonalised vectors</span>\n    <span class=\"hljs-comment\">/// storing vectors in array A</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; r; ++i) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter vector &quot;</span> &lt;&lt; i + <span class=\"hljs-number\">1</span>\n                  &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;  <span class=\"hljs-comment\">/// Input of vectors is taken</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; c; ++j) {\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Value &quot;</span> &lt;&lt; j + <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-string\">&quot;th of vector: &quot;</span>;\n            std::cin &gt;&gt; A[i][j];\n        }\n        std::cout &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n    }\n\n    linear_algebra::gram_schmidt::<span class=\"hljs-built_in\">gram_schmidt</span>(r, c, A, B);\n\n    <span class=\"hljs-type\">double</span> dot = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">/// To check whether vectors are orthogonal or  not</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; r - <span class=\"hljs-number\">1</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; r; ++j) {\n            dot =\n                <span class=\"hljs-built_in\">fabs</span>(linear_algebra::gram_schmidt::<span class=\"hljs-built_in\">dot_product</span>(B[i], B[j], c));\n            <span class=\"hljs-keyword\">if</span> (dot &gt; <span class=\"hljs-number\">0.1</span>)  <span class=\"hljs-comment\">/// take make the process numerically stable, upper</span>\n                            <span class=\"hljs-comment\">/// bound for the dot product take 0.1</span>\n            {\n                flag = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n    <span class=\"hljs-keyword\">if</span> (flag == <span class=\"hljs-number\">0</span>)\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Vectors are linearly dependent\\n&quot;</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "Akanksha-Gupta920",
      "email": "69674604+Akanksha-Gupta920@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
