{
  "slug": "runge-kutta",
  "name": "Runge Kutta",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/runge_kutta.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/runge_kutta.py",
      "code": "<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">runge_kutta</span>(<span class=\"hljs-params\">f, y0, x0, h, x_end</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculate the numeric solution at each step to the ODE f(x, y) using RK4\n\n    https://en.wikipedia.org/wiki/Runge-Kutta_methods\n\n    Arguments:\n    f -- The ode as a function of x and y\n    y0 -- the initial value for y\n    x0 -- the initial value for x\n    h -- the stepsize\n    x_end -- the end value for x\n\n    &gt;&gt;&gt; # the exact solution is math.exp(x)\n    &gt;&gt;&gt; def f(x, y):\n    ...     return y\n    &gt;&gt;&gt; y0 = 1\n    &gt;&gt;&gt; y = runge_kutta(f, y0, 0.0, 0.01, 5)\n    &gt;&gt;&gt; y[-1]\n    148.41315904125113\n    &quot;&quot;&quot;</span>\n    N = <span class=\"hljs-built_in\">int</span>(np.ceil((x_end - x0) / h))\n    y = np.zeros((N + <span class=\"hljs-number\">1</span>,))\n    y[<span class=\"hljs-number\">0</span>] = y0\n    x = x0\n\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(N):\n        k1 = f(x, y[k])\n        k2 = f(x + <span class=\"hljs-number\">0.5</span> * h, y[k] + <span class=\"hljs-number\">0.5</span> * h * k1)\n        k3 = f(x + <span class=\"hljs-number\">0.5</span> * h, y[k] + <span class=\"hljs-number\">0.5</span> * h * k2)\n        k4 = f(x + h, y[k] + h * k3)\n        y[k + <span class=\"hljs-number\">1</span>] = y[k] + (<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">6</span>) * h * (k1 + <span class=\"hljs-number\">2</span> * k2 + <span class=\"hljs-number\">2</span> * k3 + k4)\n        x += h\n\n    <span class=\"hljs-keyword\">return</span> y\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "c-plus-plus": {
      "dir": "numerical_methods/rungekutta.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/rungekutta.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @{\n * \\file\n * \\brief [Runge Kutta fourth\n * order](https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods) method\n * implementation\n *\n * \\author [Rudra Prasad Das](http://github.com/rudra697)\n *\n * \\details\n * It solves the unknown value of y\n * for a given value of x\n * only first order differential equations\n * can be solved\n * \\example\n * it solves \\frac{\\mathrm{d} y}{\\mathrm{d} x}= \\frac{\\left ( x-y \\right )}{2}\n * given x for given initial\n * conditions\n * There can be many such equations\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>   <span class=\"hljs-comment\">/// asserting the test functions</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">/// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>    <span class=\"hljs-comment\">/// for using the vector container</span></span>\n\n<span class=\"hljs-comment\">/**\n * @brief The change() function is used\n * to return the updated iterative value corresponding\n * to the given function\n * @param x is the value corresponding to the x coordinate\n * @param y is the value corresponding to the y coordinate\n * @returns the computed function value at that call\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x, <span class=\"hljs-type\">double</span> y)</span> </span>{ <span class=\"hljs-keyword\">return</span> ((x - y) / <span class=\"hljs-number\">2.0</span>); }\n\n<span class=\"hljs-comment\">/**\n * @namespace numerical_methods\n * @brief Numerical Methods\n */</span>\n<span class=\"hljs-keyword\">namespace</span> numerical_methods {\n<span class=\"hljs-comment\">/**\n * @namespace runge_kutta\n * @brief Functions for [Runge Kutta fourth\n * order](https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods) method\n */</span>\n<span class=\"hljs-keyword\">namespace</span> runge_kutta {\n<span class=\"hljs-comment\">/**\n * @brief the Runge Kutta method finds the value of integration of a function in\n * the given limits. the lower limit of integration as the initial value and the\n * upper limit is the given x\n * @param init_x is the value of initial x and is updated after each call\n * @param init_y is the value of initial x and is updated after each call\n * @param x is current iteration at which the function needs to be evaluated\n * @param h is the step value\n * @returns the value of y at thr required value of x from the initial\n * conditions\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">double</span> <span class=\"hljs-title\">rungeKutta</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> init_x, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;init_y, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;x,\n                  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">double</span> &amp;h)</span> </span>{\n    <span class=\"hljs-comment\">// Count number of iterations</span>\n    <span class=\"hljs-comment\">// using step size or</span>\n    <span class=\"hljs-comment\">// step height h</span>\n\n    <span class=\"hljs-comment\">// n calucates the number of iterations</span>\n    <span class=\"hljs-comment\">// k1, k2, k3, k4 are the Runge Kutta variables</span>\n    <span class=\"hljs-comment\">// used for calculation of y at each iteration</span>\n\n    <span class=\"hljs-keyword\">auto</span> n = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">uint64_t</span>&gt;((x - init_x) / h);\n    <span class=\"hljs-comment\">// used a vector container for the variables</span>\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">k</span><span class=\"hljs-params\">(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.0</span>)</span></span>;\n\n    <span class=\"hljs-comment\">// Iterate for number of iterations</span>\n\n    <span class=\"hljs-type\">double</span> y = init_y;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; ++i) {\n        <span class=\"hljs-comment\">// Apply Runge Kutta Formulas</span>\n        <span class=\"hljs-comment\">// to find next value of y</span>\n        k[<span class=\"hljs-number\">0</span>] = h * <span class=\"hljs-built_in\">change</span>(init_x, y);\n        k[<span class=\"hljs-number\">1</span>] = h * <span class=\"hljs-built_in\">change</span>(init_x + <span class=\"hljs-number\">0.5</span> * h, y + <span class=\"hljs-number\">0.5</span> * k[<span class=\"hljs-number\">0</span>]);\n        k[<span class=\"hljs-number\">2</span>] = h * <span class=\"hljs-built_in\">change</span>(init_x + <span class=\"hljs-number\">0.5</span> * h, y + <span class=\"hljs-number\">0.5</span> * k[<span class=\"hljs-number\">1</span>]);\n        k[<span class=\"hljs-number\">3</span>] = h * <span class=\"hljs-built_in\">change</span>(init_x + h, y + k[<span class=\"hljs-number\">2</span>]);\n\n        <span class=\"hljs-comment\">// Update next value of y</span>\n\n        y += (<span class=\"hljs-number\">1.0</span> / <span class=\"hljs-number\">6.0</span>) * (k[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">2</span> * k[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">2</span> * k[<span class=\"hljs-number\">2</span>] + k[<span class=\"hljs-number\">3</span>]);\n\n        <span class=\"hljs-comment\">// Update next value of x</span>\n\n        init_x += h;\n    }\n\n    <span class=\"hljs-keyword\">return</span> y;\n}\n}  <span class=\"hljs-comment\">// namespace runge_kutta</span>\n}  <span class=\"hljs-comment\">// namespace numerical_methods</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Tests to check algorithm implementation.\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;The Runge Kutta function will be tested on the basis of &quot;</span>\n                 <span class=\"hljs-string\">&quot;precomputed values\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 1....&quot;</span>\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    <span class=\"hljs-type\">double</span> valfirst = numerical_methods::runge_kutta::<span class=\"hljs-built_in\">rungeKutta</span>(\n        <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.2</span>);  <span class=\"hljs-comment\">// Tests the function with pre calculated values</span>\n    <span class=\"hljs-built_in\">assert</span>(valfirst == <span class=\"hljs-number\">3.10363932323749570</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 1\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 2....&quot;</span>\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    <span class=\"hljs-type\">double</span> valsec = numerical_methods::runge_kutta::<span class=\"hljs-built_in\">rungeKutta</span>(\n        <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0.1</span>);  <span class=\"hljs-comment\">// The value of step changed</span>\n    <span class=\"hljs-built_in\">assert</span>(valsec == <span class=\"hljs-number\">3.40600589380261409</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 2\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Test 3....&quot;</span>\n              &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    <span class=\"hljs-type\">double</span> valthird = numerical_methods::runge_kutta::<span class=\"hljs-built_in\">rungeKutta</span>(\n        <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0.1</span>);  <span class=\"hljs-comment\">// Tested with negative value</span>\n    <span class=\"hljs-built_in\">assert</span>(valthird == <span class=\"hljs-number\">2.49251005860244268</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Passed Test 3\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// Execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "rudraprasaddas",
      "email": "72852551+rudraprasaddas@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ankur Chattopadhyay",
      "email": "39518771+chttrjeankr@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Stephen",
      "email": "24819660+infrontoftheforest@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
