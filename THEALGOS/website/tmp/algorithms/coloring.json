{
  "slug": "coloring",
  "name": "Coloring",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "backtracking/coloring.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/backtracking/coloring.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    Graph Coloring also called &quot;m coloring problem&quot;\n    consists of coloring given graph with at most m colors\n    such that no adjacent vertices are assigned same color\n\n    Wikipedia: https://en.wikipedia.org/wiki/Graph_coloring\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">valid_coloring</span>(<span class=\"hljs-params\">\n    neighbours: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], colored_vertices: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], color: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    For each neighbour check if coloring constraint is satisfied\n    If any of the neighbours fail the constraint return False\n    If all neighbours validate constraint return True\n\n    &gt;&gt;&gt; neighbours = [0,1,0,1,0]\n    &gt;&gt;&gt; colored_vertices = [0, 2, 1, 2, 0]\n\n    &gt;&gt;&gt; color = 1\n    &gt;&gt;&gt; valid_coloring(neighbours, colored_vertices, color)\n    True\n\n    &gt;&gt;&gt; color = 2\n    &gt;&gt;&gt; valid_coloring(neighbours, colored_vertices, color)\n    False\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-comment\"># Does any neighbour not satisfy the constraints</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">any</span>(\n        neighbour == <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> colored_vertices[i] == color\n        <span class=\"hljs-keyword\">for</span> i, neighbour <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(neighbours)\n    )\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">util_color</span>(<span class=\"hljs-params\">\n    graph: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]], max_colors: <span class=\"hljs-built_in\">int</span>, colored_vertices: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], index: <span class=\"hljs-built_in\">int</span>\n</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Pseudo-Code\n\n    Base Case:\n    1. Check if coloring is complete\n        1.1 If complete return True (meaning that we successfully colored graph)\n\n    Recursive Step:\n    2. Itterates over each color:\n        Check if current coloring is valid:\n            2.1. Color given vertex\n            2.2. Do recursive call check if this coloring leads to solving problem\n            2.4. if current coloring leads to solution return\n            2.5. Uncolor given vertex\n\n    &gt;&gt;&gt; graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n    &gt;&gt;&gt; max_colors = 3\n    &gt;&gt;&gt; colored_vertices = [0, 1, 0, 0, 0]\n    &gt;&gt;&gt; index = 3\n\n    &gt;&gt;&gt; util_color(graph, max_colors, colored_vertices, index)\n    True\n\n    &gt;&gt;&gt; max_colors = 2\n    &gt;&gt;&gt; util_color(graph, max_colors, colored_vertices, index)\n    False\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># Base Case</span>\n    <span class=\"hljs-keyword\">if</span> index == <span class=\"hljs-built_in\">len</span>(graph):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n    <span class=\"hljs-comment\"># Recursive Step</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(max_colors):\n        <span class=\"hljs-keyword\">if</span> valid_coloring(graph[index], colored_vertices, i):\n            <span class=\"hljs-comment\"># Color current vertex</span>\n            colored_vertices[index] = i\n            <span class=\"hljs-comment\"># Validate coloring</span>\n            <span class=\"hljs-keyword\">if</span> util_color(graph, max_colors, colored_vertices, index + <span class=\"hljs-number\">1</span>):\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n            <span class=\"hljs-comment\"># Backtrack</span>\n            colored_vertices[index] = -<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">color</span>(<span class=\"hljs-params\">graph: <span class=\"hljs-type\">List</span>[<span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]], max_colors: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Wrapper function to call subroutine called util_color\n    which will either return True or False.\n    If True is returned colored_vertices list is filled with correct colorings\n\n    &gt;&gt;&gt; graph = [[0, 1, 0, 0, 0],\n    ...          [1, 0, 1, 0, 1],\n    ...          [0, 1, 0, 1, 0],\n    ...          [0, 1, 1, 0, 0],\n    ...          [0, 1, 0, 0, 0]]\n\n    &gt;&gt;&gt; max_colors = 3\n    &gt;&gt;&gt; color(graph, max_colors)\n    [0, 1, 0, 2, 0]\n\n    &gt;&gt;&gt; max_colors = 2\n    &gt;&gt;&gt; color(graph, max_colors)\n    []\n    &quot;&quot;&quot;</span>\n    colored_vertices = [-<span class=\"hljs-number\">1</span>] * <span class=\"hljs-built_in\">len</span>(graph)\n\n    <span class=\"hljs-keyword\">if</span> util_color(graph, max_colors, colored_vertices, <span class=\"hljs-number\">0</span>):\n        <span class=\"hljs-keyword\">return</span> colored_vertices\n\n    <span class=\"hljs-keyword\">return</span> []\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Saba Pochkhua",
      "email": "saba.pochkhua@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
