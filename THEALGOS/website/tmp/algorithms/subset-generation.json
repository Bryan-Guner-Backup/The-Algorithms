{
  "slug": "subset-generation",
  "name": "Subset Generation",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "dynamic_programming/subset_generation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/dynamic_programming/subset_generation.py",
      "code": "<span class=\"hljs-comment\"># Print all subset combinations of n element in given set of r element.</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">combination_util</span>(<span class=\"hljs-params\">arr, n, r, index, data, i</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Current combination is ready to be printed, print it\n    arr[]  ---&gt; Input Array\n    data[] ---&gt; Temporary array to store current combination\n    start &amp; end ---&gt; Staring and Ending indexes in arr[]\n    index  ---&gt; Current index in data[]\n    r ---&gt; Size of a combination to be printed\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> index == r:\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(r):\n            <span class=\"hljs-built_in\">print</span>(data[j], end=<span class=\"hljs-string\">&quot; &quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot; &quot;</span>)\n        <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-comment\">#  When no more elements are there to put in data[]</span>\n    <span class=\"hljs-keyword\">if</span> i &gt;= n:\n        <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-comment\"># current is included, put next at next location</span>\n    data[index] = arr[i]\n    combination_util(arr, n, r, index + <span class=\"hljs-number\">1</span>, data, i + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-comment\"># current is excluded, replace it with</span>\n    <span class=\"hljs-comment\"># next (Note that i+1 is passed, but</span>\n    <span class=\"hljs-comment\"># index is not changed)</span>\n    combination_util(arr, n, r, index, data, i + <span class=\"hljs-number\">1</span>)\n    <span class=\"hljs-comment\"># The main function that prints all combinations</span>\n    <span class=\"hljs-comment\"># of size r in arr[] of size n. This function</span>\n    <span class=\"hljs-comment\"># mainly uses combinationUtil()</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_combination</span>(<span class=\"hljs-params\">arr, n, r</span>):\n    <span class=\"hljs-comment\"># A temporary array to store all combination one by one</span>\n    data = [<span class=\"hljs-number\">0</span>] * r\n    <span class=\"hljs-comment\"># Print all combination using temporary array &#x27;data[]&#x27;</span>\n    combination_util(arr, n, r, <span class=\"hljs-number\">0</span>, data, <span class=\"hljs-number\">0</span>)\n\n\n<span class=\"hljs-comment\"># Driver function to check for above function</span>\narr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>]\nprint_combination(arr, <span class=\"hljs-built_in\">len</span>(arr), <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-comment\"># This code is contributed by Ambuj sahu</span>\n"
    }
  },
  "contributors": [
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ambuj81",
      "email": "dataaccess81@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
