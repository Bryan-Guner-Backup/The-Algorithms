{
  "slug": "stock-span-problem",
  "name": "Stock Span Problem",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/stock_span_problem.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/stock_span_problem.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nThe stock span problem is a financial problem where we have a series of n daily\nprice quotes for a stock and we need to calculate span of stock&#x27;s price for all n days.\n\nThe span Si of the stock&#x27;s price on a given day i is defined as the maximum\nnumber of consecutive days just before the given day, for which the price of the stock\non the current day is less than or equal to its price on the given day.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculateSpan</span>(<span class=\"hljs-params\">price, S</span>):\n\n    n = <span class=\"hljs-built_in\">len</span>(price)\n    <span class=\"hljs-comment\"># Create a stack and push index of fist element to it</span>\n    st = []\n    st.append(<span class=\"hljs-number\">0</span>)\n\n    <span class=\"hljs-comment\"># Span value of first element is always 1</span>\n    S[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># Calculate span values for rest of the elements</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, n):\n\n        <span class=\"hljs-comment\"># Pop elements from stack while stack is not</span>\n        <span class=\"hljs-comment\"># empty and top of stack is smaller than price[i]</span>\n        <span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">len</span>(st) &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> price[st[<span class=\"hljs-number\">0</span>]] &lt;= price[i]:\n            st.pop()\n\n        <span class=\"hljs-comment\"># If stack becomes empty, then price[i] is greater</span>\n        <span class=\"hljs-comment\"># than all elements on left of it, i.e. price[0],</span>\n        <span class=\"hljs-comment\"># price[1], ..price[i-1]. Else the price[i]  is</span>\n        <span class=\"hljs-comment\"># greater than elements after top of stack</span>\n        S[i] = i + <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(st) &lt;= <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> (i - st[<span class=\"hljs-number\">0</span>])\n\n        <span class=\"hljs-comment\"># Push this element to stack</span>\n        st.append(i)\n\n\n<span class=\"hljs-comment\"># A utility function to print elements of array</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">printArray</span>(<span class=\"hljs-params\">arr, n</span>):\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, n):\n        <span class=\"hljs-built_in\">print</span>(arr[i], end=<span class=\"hljs-string\">&quot; &quot;</span>)\n\n\n<span class=\"hljs-comment\"># Driver program to test above function</span>\nprice = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">90</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">80</span>]\nS = [<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(price) + <span class=\"hljs-number\">1</span>)]\n\n<span class=\"hljs-comment\"># Fill the span values in array S[]</span>\ncalculateSpan(price, S)\n\n<span class=\"hljs-comment\"># Print the calculated span values</span>\nprintArray(S, <span class=\"hljs-built_in\">len</span>(price))\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Harshil Darji",
      "email": "darjiharshil2994@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    },
    {
      "name": "S-Sanyal",
      "email": "prosanyal123@gmail.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
