{
  "slug": "primes-up-to-billion",
  "name": "Primes up to Billion",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/primes_up_to_billion.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/primes_up_to_billion.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Compute prime numbers upto 1 billion\n * @see prime_numbers.cpp sieve_of_eratosthenes.cpp\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/** array to store the primes */</span>\n<span class=\"hljs-type\">char</span> prime[<span class=\"hljs-number\">100000000</span>];\n\n<span class=\"hljs-comment\">/** Perform Sieve algorithm */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Sieve</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int64_t</span> n)</span> </span>{\n    <span class=\"hljs-built_in\">memset</span>(prime, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-built_in\">sizeof</span>(prime));  <span class=\"hljs-comment\">// intitize &#x27;1&#x27; to every index</span>\n    prime[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&#x27;0&#x27;</span>;                     <span class=\"hljs-comment\">// 0 is not prime</span>\n    prime[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">&#x27;0&#x27;</span>;                     <span class=\"hljs-comment\">// 1 is not prime</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> p = <span class=\"hljs-number\">2</span>; p * p &lt;= n; p++) {\n        <span class=\"hljs-keyword\">if</span> (prime[p] == <span class=\"hljs-string\">&#x27;1&#x27;</span>) {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int64_t</span> i = p * p; i &lt;= n; i += p)\n                prime[i] = <span class=\"hljs-string\">&#x27;0&#x27;</span>;  <span class=\"hljs-comment\">// set all multiples of p to false</span>\n        }\n    }\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">Sieve</span>(<span class=\"hljs-number\">100000000</span>);\n    <span class=\"hljs-type\">int64_t</span> n;\n    std::cin &gt;&gt; n;  <span class=\"hljs-comment\">// 10006187</span>\n    <span class=\"hljs-keyword\">if</span> (prime[n] == <span class=\"hljs-string\">&#x27;1&#x27;</span>)\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;YES\\n&quot;</span>;\n    <span class=\"hljs-keyword\">else</span>\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;NO\\n&quot;</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
