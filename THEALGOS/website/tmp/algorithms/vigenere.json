{
  "slug": "vigenere",
  "name": "Vigenere",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "ciphers/Vigenere.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/ciphers/Vigenere.java",
      "code": "<span class=\"hljs-keyword\">package</span> ciphers;\r\n\r\n<span class=\"hljs-comment\">/**\r\n * A Java implementation of Vigenere Cipher.\r\n *\r\n * <span class=\"hljs-doctag\">@author</span> straiffix\r\n * <span class=\"hljs-doctag\">@author</span> beingmartinbmc\r\n */</span>\r\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Vigenere</span> {\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String message, <span class=\"hljs-keyword\">final</span> String key)</span> {\r\n\r\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; message.length(); i++) {\r\n      <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> message.charAt(i);\r\n      <span class=\"hljs-keyword\">if</span> (Character.isLetter(c)) {\r\n        <span class=\"hljs-keyword\">if</span> (Character.isUpperCase(c)) {\r\n          result.append((<span class=\"hljs-type\">char</span>) ((c + key.toUpperCase().charAt(j) - <span class=\"hljs-number\">2</span> * <span class=\"hljs-string\">&#x27;A&#x27;</span>) % <span class=\"hljs-number\">26</span> + <span class=\"hljs-string\">&#x27;A&#x27;</span>));\r\n\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n          result.append((<span class=\"hljs-type\">char</span>) ((c + key.toLowerCase().charAt(j) - <span class=\"hljs-number\">2</span> * <span class=\"hljs-string\">&#x27;a&#x27;</span>) % <span class=\"hljs-number\">26</span> + <span class=\"hljs-string\">&#x27;a&#x27;</span>));\r\n        }\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        result.append(c);\r\n      }\r\n      j = ++j % key.length();\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result.toString();\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">decrypt</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">final</span> String message, <span class=\"hljs-keyword\">final</span> String key)</span> {\r\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\r\n\r\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; message.length(); i++) {\r\n\r\n      <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> message.charAt(i);\r\n      <span class=\"hljs-keyword\">if</span> (Character.isLetter(c)) {\r\n        <span class=\"hljs-keyword\">if</span> (Character.isUpperCase(c)) {\r\n          result.append((<span class=\"hljs-type\">char</span>) (<span class=\"hljs-string\">&#x27;Z&#x27;</span> - (<span class=\"hljs-number\">25</span> - (c - key.toUpperCase().charAt(j))) % <span class=\"hljs-number\">26</span>));\r\n\r\n        } <span class=\"hljs-keyword\">else</span> {\r\n          result.append((<span class=\"hljs-type\">char</span>) (<span class=\"hljs-string\">&#x27;z&#x27;</span> - (<span class=\"hljs-number\">25</span> - (c - key.toLowerCase().charAt(j))) % <span class=\"hljs-number\">26</span>));\r\n        }\r\n      } <span class=\"hljs-keyword\">else</span> {\r\n        result.append(c);\r\n      }\r\n\r\n      j = ++j % key.length();\r\n    }\r\n    <span class=\"hljs-keyword\">return</span> result.toString();\r\n  }\r\n\r\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\r\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">text</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;Hello World!&quot;</span>;\r\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;itsakey&quot;</span>;\r\n    System.out.println(text);\r\n    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">ciphertext</span> <span class=\"hljs-operator\">=</span> encrypt(text, key);\r\n    System.out.println(ciphertext);\r\n    System.out.println(decrypt(ciphertext, key));\r\n  }\r\n}\r\n"
    },
    "rust": {
      "dir": "src/ciphers/vigenere.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/ciphers/vigenere.rs",
      "code": "<span class=\"hljs-comment\">//! Vigenère Cipher</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! # Algorithm</span>\n<span class=\"hljs-comment\">//!</span>\n<span class=\"hljs-comment\">//! Rotate each ascii character by the offset of the corresponding key character.</span>\n<span class=\"hljs-comment\">//! When we reach the last key character, we start over from the first one.</span>\n<span class=\"hljs-comment\">//! This implementation does not rotate unicode characters.</span>\n\n<span class=\"hljs-comment\">/// Vigenère cipher to rotate plain_text text by key and return an owned String.</span>\n<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">vigenere</span>(plain_text: &amp;<span class=\"hljs-type\">str</span>, key: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    <span class=\"hljs-comment\">// Remove all unicode and non-ascii characters from key</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">key</span>: <span class=\"hljs-type\">String</span> = key.<span class=\"hljs-title function_ invoke__\">chars</span>().<span class=\"hljs-title function_ invoke__\">filter</span>(|&amp;c| c.<span class=\"hljs-title function_ invoke__\">is_ascii_alphabetic</span>()).<span class=\"hljs-title function_ invoke__\">collect</span>();\n    key.<span class=\"hljs-title function_ invoke__\">to_ascii_lowercase</span>();\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">key_len</span> = key.<span class=\"hljs-title function_ invoke__\">len</span>();\n    <span class=\"hljs-keyword\">if</span> key_len == <span class=\"hljs-number\">0</span> {\n        <span class=\"hljs-keyword\">return</span> String::<span class=\"hljs-title function_ invoke__\">from</span>(plain_text);\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">index</span> = <span class=\"hljs-number\">0</span>;\n\n    plain_text\n        .<span class=\"hljs-title function_ invoke__\">chars</span>()\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|c| {\n            <span class=\"hljs-keyword\">if</span> c.<span class=\"hljs-title function_ invoke__\">is_ascii_alphabetic</span>() {\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">first</span> = <span class=\"hljs-keyword\">if</span> c.<span class=\"hljs-title function_ invoke__\">is_ascii_lowercase</span>() { <span class=\"hljs-string\">b&#x27;a&#x27;</span> } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-string\">b&#x27;A&#x27;</span> };\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">shift</span> = key.<span class=\"hljs-title function_ invoke__\">as_bytes</span>()[index % key_len] - <span class=\"hljs-string\">b&#x27;a&#x27;</span>;\n                index += <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-comment\">// modulo the distance to keep character range</span>\n                (first + (c <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span> + shift - first) % <span class=\"hljs-number\">26</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>\n            } <span class=\"hljs-keyword\">else</span> {\n                c\n            }\n        })\n        .<span class=\"hljs-title function_ invoke__\">collect</span>()\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">vigenere</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;test&quot;</span>), <span class=\"hljs-string\">&quot;&quot;</span>);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">vigenere_base</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">vigenere</span>(<span class=\"hljs-string\">&quot;LoremIpsumDolorSitAmet&quot;</span>, <span class=\"hljs-string\">&quot;base&quot;</span>),\n            <span class=\"hljs-string\">&quot;MojinIhwvmVsmojWjtSqft&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">vigenere_with_spaces</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">vigenere</span>(\n                <span class=\"hljs-string\">&quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&quot;</span>,\n                <span class=\"hljs-string\">&quot;spaces&quot;</span>\n            ),\n            <span class=\"hljs-string\">&quot;Ddrgq ahhuo hgddr uml sbev, ggfheexwljr chahxsemfy tlkx.&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">vigenere_unicode_and_numbers</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">vigenere</span>(<span class=\"hljs-string\">&quot;1 Lorem ⏳ ipsum dolor sit amet Ѡ&quot;</span>, <span class=\"hljs-string\">&quot;unicode&quot;</span>),\n            <span class=\"hljs-string\">&quot;1 Fbzga ⏳ ltmhu fcosl fqv opin Ѡ&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">vigenere_unicode_key</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(\n            <span class=\"hljs-title function_ invoke__\">vigenere</span>(<span class=\"hljs-string\">&quot;Lorem ipsum dolor sit amet&quot;</span>, <span class=\"hljs-string\">&quot;😉 key!&quot;</span>),\n            <span class=\"hljs-string\">&quot;Vspoq gzwsw hmvsp cmr kqcd&quot;</span>\n        );\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">vigenere_empty_key</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-title function_ invoke__\">vigenere</span>(<span class=\"hljs-string\">&quot;Lorem ipsum&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>), <span class=\"hljs-string\">&quot;Lorem ipsum&quot;</span>);\n    }\n}\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Encoders/VigenereEncoder.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Encoders/VigenereEncoder.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Text;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Encoders</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes using vigenere cypher.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">VigenereEncoder</span> : <span class=\"hljs-title\">IEncoder</span>&lt;<span class=\"hljs-title\">string</span>&gt;\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> CaesarEncoder caesarEncoder = <span class=\"hljs-keyword\">new</span>();\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Encodes text using specified key,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text to be encoded.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key that will be used to encode the text.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Encoded text.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Encode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">string</span> key</span>)</span> =&gt; Cipher(text, key, caesarEncoder.Encode);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Decodes text that was encoded using specified key,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     time complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     space complexity: O(n),</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;text&quot;&gt;</span>Text to be decoded.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;key&quot;&gt;</span>Key that was used to encode the text.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Decoded text.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Decode</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">string</span> key</span>)</span> =&gt; Cipher(text, key, caesarEncoder.Decode);\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">Cipher</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> text, <span class=\"hljs-built_in\">string</span> key, Func&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">int</span>, <span class=\"hljs-built_in\">string</span>&gt; symbolCipher</span>)</span>\n        {\n            key = AppendKey(key, text.Length);\n            <span class=\"hljs-keyword\">var</span> encodedTextBuilder = <span class=\"hljs-keyword\">new</span> StringBuilder(text.Length);\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; text.Length; i++)\n            {\n                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">char</span>.IsLetter(text[i]))\n                {\n                    _ = encodedTextBuilder.Append(text[i]);\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n\n                <span class=\"hljs-keyword\">var</span> letterZ = <span class=\"hljs-built_in\">char</span>.IsUpper(key[i]) ? <span class=\"hljs-string\">&#x27;Z&#x27;</span> : <span class=\"hljs-string\">&#x27;z&#x27;</span>;\n                <span class=\"hljs-keyword\">var</span> encodedSymbol = symbolCipher(text[i].ToString(), letterZ - key[i]);\n                _ = encodedTextBuilder.Append(encodedSymbol);\n            }\n\n            <span class=\"hljs-keyword\">return</span> encodedTextBuilder.ToString();\n        }\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">string</span> <span class=\"hljs-title\">AppendKey</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> key, <span class=\"hljs-built_in\">int</span> length</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">string</span>.IsNullOrEmpty(key))\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(<span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(key)}</span> must be non-empty string&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> keyBuilder = <span class=\"hljs-keyword\">new</span> StringBuilder(key, length);\n            <span class=\"hljs-keyword\">while</span> (keyBuilder.Length &lt; length)\n            {\n                _ = keyBuilder.Append(key);\n            }\n\n            <span class=\"hljs-keyword\">return</span> keyBuilder.ToString();\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Matthias Gilch",
      "email": "matthias.gilch.mg@gmail.com",
      "commits": 1
    },
    {
      "name": "gfabrizi",
      "email": "5486679+gfabrizi@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Ankit Sharma",
      "email": "beingbmc12@gmail.com",
      "commits": 1
    },
    {
      "name": "Fractum",
      "email": "24612656+straiffix@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "straiffix",
      "email": "straiffix@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
