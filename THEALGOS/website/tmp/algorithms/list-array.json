{
  "slug": "list-array",
  "name": "List Array",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/list_array.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/list_array.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief [Dynamic Array](https://en.wikipedia.org/wiki/Dynamic_array)\n *\n * @details\n * The list_array is the implementation of list represented using array.\n * We can perform basic CRUD operations as well as other operations like sorting etc.\n *\n * ### Algorithm\n * It implements various method like insert, sort, search etc. efficiently.\n * You can select the operation and methods will do the rest work for you.\n * You can insert element, sort them in order, search efficiently, delete values and print the list.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span> <span class=\"hljs-comment\">/// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>   <span class=\"hljs-comment\">/// for std::array</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span> <span class=\"hljs-comment\">/// for assert</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace data_structures\n * @brief Algorithms with data structures\n */</span>\n<span class=\"hljs-keyword\">namespace</span> data_structures {\n<span class=\"hljs-comment\">/**\n * @namespace list_array\n * @brief Functions for [Dynamic Array](https://en.wikipedia.org/wiki/Dynamic_array) algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> list_array {\n    <span class=\"hljs-comment\">/**\n     * @brief Structure of List with supporting methods.\n     */</span>\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">list</span> {\n        std::array&lt;<span class=\"hljs-type\">uint64_t</span>, 50&gt; data{}; <span class=\"hljs-comment\">// Array that implement list</span>\n        <span class=\"hljs-type\">uint64_t</span> top = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Pointer to the last element</span>\n        <span class=\"hljs-type\">bool</span> isSorted = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// indicator whether list is sorted or not</span>\n        <span class=\"hljs-comment\">/**\n         * @brief Search an element in the list using binarySearch.\n         * @param dataArr list\n         * @param first pointer to the first element in the remaining list\n         * @param last pointer to the last element in the remaining list\n         * @param val element that will be searched\n         * @return index of element in the list if present else -1\n         */</span>\n        <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">BinarySearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">uint64_t</span>, <span class=\"hljs-number\">50</span>&gt; &amp;dataArr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;first, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;last,\n                              <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;val)</span> </span>{\n            <span class=\"hljs-comment\">// If both pointer cross each other means no element present in the list which is equal to the val</span>\n            <span class=\"hljs-keyword\">if</span> (last &lt; first) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n            }\n            <span class=\"hljs-type\">uint64_t</span> mid = (first + last) / <span class=\"hljs-number\">2</span>;\n            <span class=\"hljs-comment\">// check whether current mid pointer value is equal to element or not</span>\n            <span class=\"hljs-keyword\">if</span> (dataArr[mid] == val)\n                <span class=\"hljs-keyword\">return</span> mid;\n                <span class=\"hljs-comment\">// if current mid value is greater than  element we have to search in first half</span>\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (val &lt; dataArr[mid])\n                <span class=\"hljs-built_in\">return</span> (<span class=\"hljs-built_in\">BinarySearch</span>(dataArr, first, mid - <span class=\"hljs-number\">1</span>, val));\n                <span class=\"hljs-comment\">// if current mid value is greater than  element we have to search in second half</span>\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (val &gt; dataArr[mid])\n                <span class=\"hljs-built_in\">return</span> (<span class=\"hljs-built_in\">BinarySearch</span>(dataArr, mid + <span class=\"hljs-number\">1</span>, last, val));\n\n            std::cerr &lt;&lt; __func__ &lt;&lt; <span class=\"hljs-string\">&quot;:&quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"hljs-string\">&quot;: Undefined condition\\n&quot;</span>;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n\n        <span class=\"hljs-comment\">/**\n         * @brief Search an element using linear search\n         * @param dataArr list\n         * @param val element that will be searched\n         * @return index of element in the list if present else -1\n         */</span>\n        <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">LinearSearch</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::array&lt;<span class=\"hljs-type\">uint64_t</span>, <span class=\"hljs-number\">50</span>&gt; &amp;dataArr, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;val)</span> <span class=\"hljs-keyword\">const</span> </span>{\n            <span class=\"hljs-comment\">// Going through each element in the list</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; top; i++) {\n                <span class=\"hljs-keyword\">if</span> (dataArr[i] == val) {\n                    <span class=\"hljs-keyword\">return</span> i; <span class=\"hljs-comment\">// element found at ith index</span>\n                }\n            }\n            <span class=\"hljs-comment\">// element is not present in the list</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n        }\n\n        <span class=\"hljs-comment\">/*\n         * @brief Parent function of binarySearch and linearSearch methods\n         * @param val element that will be searched\n         * @return index of element in the list if present else -1\n         */</span>\n        <span class=\"hljs-function\"><span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;val)</span> </span>{\n            <span class=\"hljs-type\">uint64_t</span> pos; <span class=\"hljs-comment\">// pos variable to store index value of element.</span>\n            <span class=\"hljs-comment\">// if list is sorted, binary search works efficiently else linear search is the only option</span>\n            <span class=\"hljs-keyword\">if</span> (isSorted) {\n                pos = <span class=\"hljs-built_in\">BinarySearch</span>(data, <span class=\"hljs-number\">0</span>, top - <span class=\"hljs-number\">1</span>, val);\n            } <span class=\"hljs-keyword\">else</span> {\n                pos = <span class=\"hljs-built_in\">LinearSearch</span>(data, val);\n            }\n            <span class=\"hljs-comment\">// if index is equal to -1 means element does not present</span>\n            <span class=\"hljs-comment\">// else print the index of that element</span>\n            <span class=\"hljs-keyword\">if</span> (pos != <span class=\"hljs-number\">-1</span>) {\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nElement found at position : &quot;</span> &lt;&lt; pos;\n            } <span class=\"hljs-keyword\">else</span> {\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nElement not found&quot;</span>;\n            }\n            <span class=\"hljs-comment\">// return the index of element or -1.</span>\n            <span class=\"hljs-keyword\">return</span> pos;\n        }\n\n        <span class=\"hljs-comment\">/**\n         * @brief Sort the list\n         * @returns void\n         */</span>\n        <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">sort</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-comment\">//Going through each element in the list</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; top; i++) {\n                <span class=\"hljs-type\">uint64_t</span> min_idx = i; <span class=\"hljs-comment\">// Initialize the min variable</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; top; j++) {\n                    <span class=\"hljs-comment\">// check whether any element less than current min value</span>\n                    <span class=\"hljs-keyword\">if</span> (data[j] &lt; data[min_idx]) {\n                        min_idx = j; <span class=\"hljs-comment\">// update index accordingly</span>\n                    }\n                }\n                <span class=\"hljs-comment\">// swap min value and element at the ith index</span>\n                std::<span class=\"hljs-built_in\">swap</span>(data[min_idx], data[i]);\n            }\n            <span class=\"hljs-comment\">// mark isSorted variable as true</span>\n            isSorted = <span class=\"hljs-literal\">true</span>;\n        }\n\n        <span class=\"hljs-comment\">/**\n         * @brief Insert the new element in the list\n         * @param val element that will be inserted\n         * @returns void\n         */</span>\n        <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;val)</span> </span>{\n            <span class=\"hljs-comment\">// overflow check</span>\n            <span class=\"hljs-keyword\">if</span> (top == <span class=\"hljs-number\">49</span>) {\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nOverflow&quot;</span>;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n            <span class=\"hljs-comment\">// if list is not sorted, insert at the last</span>\n            <span class=\"hljs-comment\">// otherwise place it to correct position</span>\n            <span class=\"hljs-keyword\">if</span> (!isSorted) {\n                data[top] = val;\n                top++;\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-type\">uint64_t</span> pos = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Initialize the index variable</span>\n                <span class=\"hljs-comment\">// Going through each element and find correct position for element</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; top - <span class=\"hljs-number\">1</span>; i++) {\n                    <span class=\"hljs-comment\">// check for the correct position</span>\n                    <span class=\"hljs-keyword\">if</span> (data[i] &lt;= val &amp;&amp; val &lt;= data[i + <span class=\"hljs-number\">1</span>]) {\n                        pos = i + <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// assign correct pos to the index var</span>\n                        <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// to get out from the loop</span>\n                    }\n                }\n                <span class=\"hljs-comment\">// if all elements are smaller than the element</span>\n                <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-number\">0</span>) {\n                    pos = top - <span class=\"hljs-number\">1</span>;\n                }\n                <span class=\"hljs-comment\">// shift all element to make a room for new element</span>\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = top; i &gt; pos; i--) {\n                    data[i] = data[i - <span class=\"hljs-number\">1</span>];\n                }\n                top++; <span class=\"hljs-comment\">// Increment the value of top.</span>\n                data[pos] = val; <span class=\"hljs-comment\">// Assign the value to the correct index in the array</span>\n            }\n        }\n\n        <span class=\"hljs-comment\">/**\n         * @brief To remove the element from the list\n         * @param val element that will be removed\n         * @returns void\n         */</span>\n        <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> &amp;val)</span> </span>{\n            <span class=\"hljs-type\">uint64_t</span> pos = <span class=\"hljs-built_in\">search</span>(val); <span class=\"hljs-comment\">// search the index of the value</span>\n            <span class=\"hljs-comment\">// if search returns -1, element does not present in the list</span>\n            <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-number\">-1</span>) {\n                std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n Element does not present in the list &quot;</span>;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span> &lt;&lt; data[pos] &lt;&lt; <span class=\"hljs-string\">&quot; deleted&quot;</span>; <span class=\"hljs-comment\">// print the appropriate message</span>\n            <span class=\"hljs-comment\">// shift all the element 1 left to fill vacant space</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = pos; i &lt; top; i++) {\n                data[i] = data[i + <span class=\"hljs-number\">1</span>];\n            }\n            top--; <span class=\"hljs-comment\">// decrement the top variable to maintain last index</span>\n        }\n\n        <span class=\"hljs-comment\">/**\n         * @brief Utility function to print array\n         * @returns void\n         */</span>\n        <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">show</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-comment\">// Going through each element in the list</span>\n            std::cout &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">uint64_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; top; i++) {\n                std::cout &lt;&lt; data[i] &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>; <span class=\"hljs-comment\">// print the element</span>\n            }\n        }\n    }; <span class=\"hljs-comment\">// structure list</span>\n} <span class=\"hljs-comment\">// namespace list_array</span>\n} <span class=\"hljs-comment\">// namespace data_structures</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    data_structures::list_array::list L;\n\n    <span class=\"hljs-comment\">// Insert testing</span>\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">11</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">12</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.top == <span class=\"hljs-number\">2</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">15</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">10</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">12</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">20</span>);\n    L.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-number\">18</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.top == <span class=\"hljs-number\">7</span>);\n    L.<span class=\"hljs-built_in\">show</span>(); <span class=\"hljs-comment\">// To print the array</span>\n\n    <span class=\"hljs-comment\">// Remove testing</span>\n    L.<span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-number\">12</span>); <span class=\"hljs-comment\">// Remove Duplicate value in the list</span>\n    L.<span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-number\">15</span>); <span class=\"hljs-comment\">// Remove the existing value in the list</span>\n    <span class=\"hljs-built_in\">assert</span>(L.top == <span class=\"hljs-number\">5</span>);\n    L.<span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-number\">50</span>); <span class=\"hljs-comment\">// Try to remove the non-existing value in the list</span>\n    <span class=\"hljs-built_in\">assert</span>(L.top == <span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-comment\">// LinearSearch testing</span>\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-number\">11</span>) == <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// search for the existing element</span>\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-number\">12</span>) == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-number\">50</span>) == <span class=\"hljs-number\">-1</span>); <span class=\"hljs-comment\">// search for the non-existing element</span>\n\n    <span class=\"hljs-comment\">// Sort testing</span>\n    L.<span class=\"hljs-built_in\">sort</span>();\n    <span class=\"hljs-built_in\">assert</span>(L.isSorted == <span class=\"hljs-literal\">true</span>);\n    L.<span class=\"hljs-built_in\">show</span>();\n\n    <span class=\"hljs-comment\">// BinarySearch testing</span>\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-number\">11</span>) == <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// search for the existing element</span>\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-number\">12</span>) == <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-built_in\">assert</span>(L.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-number\">50</span>) == <span class=\"hljs-number\">-1</span>); <span class=\"hljs-comment\">// search for the non-existing element</span>\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>(); <span class=\"hljs-comment\">// Execute the tests</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Kaustubh Damania",
      "email": "kaustubh.damania@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 3
    },
    {
      "name": "Sagar Pandya",
      "email": "31953933+sagarpandyansit@users.noreply.github.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
