{
  "slug": "binary-exponent",
  "name": "Binary Exponent",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "math/binary_exponent.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/math/binary_exponent.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief C++ Program to find Binary Exponent Iteratively and Recursively.\n *\n * Calculate \\f$a^b\\f$ in \\f$O(\\log(b))\\f$ by converting \\f$b\\f$ to a\n * binary number. Binary exponentiation is also known as exponentiation by\n * squaring.\n * @note This is a far better approach compared to naive method which\n * provide \\f$O(b)\\f$ operations.\n *\n * Example:\n * &lt;/br&gt;10 in base 2 is 1010.\n * \\f{eqnarray*}{\n * 2^{10_d} &amp;=&amp; 2^{1010_b} = 2^8 * 2^2\\\\\n * 2^1 &amp;=&amp; 2\\\\\n * 2^2 &amp;=&amp; (2^1)^2 = 2^2 = 4\\\\\n * 2^4 &amp;=&amp; (2^2)^2 = 4^2 = 16\\\\\n * 2^8 &amp;=&amp; (2^4)^2 = 16^2 = 256\\\\\n * \\f}\n * Hence to calculate 2^10 we only need to multiply \\f$2^8\\f$ and \\f$2^2\\f$\n * skipping \\f$2^1\\f$ and \\f$2^4\\f$.\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-comment\">/// Recursive function to calculate exponent in \\f$O(\\log(n))\\f$ using binary</span>\n<span class=\"hljs-comment\">/// exponent.</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">binExpo</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-type\">int</span> res = <span class=\"hljs-built_in\">binExpo</span>(a, b / <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-keyword\">if</span> (b % <span class=\"hljs-number\">2</span>) {\n        <span class=\"hljs-keyword\">return</span> res * res * a;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> res * res;\n    }\n}\n\n<span class=\"hljs-comment\">/// Iterative function to calculate exponent in \\f$O(\\log(n))\\f$ using binary</span>\n<span class=\"hljs-comment\">/// exponent.</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">binExpo_alt</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b)</span> </span>{\n    <span class=\"hljs-type\">int</span> res = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (b &gt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">if</span> (b % <span class=\"hljs-number\">2</span>) {\n            res = res * a;\n        }\n        a = a * a;\n        b /= <span class=\"hljs-number\">2</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> res;\n}\n\n<span class=\"hljs-comment\">/// Main function</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> a, b;\n    <span class=\"hljs-comment\">/// Give two numbers a, b</span>\n    std::cin &gt;&gt; a &gt;&gt; b;\n    <span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span> &amp;&amp; b == <span class=\"hljs-number\">0</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Math error&quot;</span> &lt;&lt; std::endl;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (b &lt; <span class=\"hljs-number\">0</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Exponent must be positive !!&quot;</span> &lt;&lt; std::endl;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-type\">int</span> resRecurse = <span class=\"hljs-built_in\">binExpo</span>(a, b);\n        <span class=\"hljs-comment\">/// int resIterate = binExpo_alt(a, b);</span>\n\n        <span class=\"hljs-comment\">/// Result of a^b (where &#x27;^&#x27; denotes exponentiation)</span>\n        std::cout &lt;&lt; resRecurse &lt;&lt; std::endl;\n        <span class=\"hljs-comment\">/// std::cout &lt;&lt; resIterate &lt;&lt; std::endl;</span>\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
