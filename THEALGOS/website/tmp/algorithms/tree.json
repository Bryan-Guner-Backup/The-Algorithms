{
  "slug": "tree",
  "name": "Tree",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/tree.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/tree.cpp",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;list&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span> {\n    <span class=\"hljs-type\">int</span> val;\n    node *left;\n    node *right;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">CreateTree</span><span class=\"hljs-params\">(node *curr, node *n, <span class=\"hljs-type\">int</span> x, <span class=\"hljs-type\">char</span> pos)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">NULL</span>) {\n        <span class=\"hljs-type\">char</span> ch;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nLeft or Right of &quot;</span> &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot; : &quot;</span>;\n        cin &gt;&gt; ch;\n        <span class=\"hljs-keyword\">if</span> (ch == <span class=\"hljs-string\">&#x27;l&#x27;</span>)\n            <span class=\"hljs-built_in\">CreateTree</span>(n, n-&gt;left, x, ch);\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ch == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n            <span class=\"hljs-built_in\">CreateTree</span>(n, n-&gt;right, x, ch);\n    } <span class=\"hljs-keyword\">else</span> {\n        node *t = <span class=\"hljs-keyword\">new</span> node;\n        t-&gt;val = x;\n        t-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n        t-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n        <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-string\">&#x27;l&#x27;</span>) {\n            curr-&gt;left = t;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-string\">&#x27;r&#x27;</span>) {\n            curr-&gt;right = t;\n        }\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">BFT</span><span class=\"hljs-params\">(node *n)</span> </span>{\n    list&lt;node *&gt; queue;\n\n    queue.<span class=\"hljs-built_in\">push_back</span>(n);\n\n    <span class=\"hljs-keyword\">while</span> (!queue.<span class=\"hljs-built_in\">empty</span>()) {\n        n = queue.<span class=\"hljs-built_in\">front</span>();\n        cout &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\n        queue.<span class=\"hljs-built_in\">pop_front</span>();\n\n        <span class=\"hljs-keyword\">if</span> (n-&gt;left != <span class=\"hljs-literal\">NULL</span>)\n            queue.<span class=\"hljs-built_in\">push_back</span>(n-&gt;left);\n        <span class=\"hljs-keyword\">if</span> (n-&gt;right != <span class=\"hljs-literal\">NULL</span>)\n            queue.<span class=\"hljs-built_in\">push_back</span>(n-&gt;right);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Pre</span><span class=\"hljs-params\">(node *n)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">NULL</span>) {\n        cout &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\n        <span class=\"hljs-built_in\">Pre</span>(n-&gt;left);\n        <span class=\"hljs-built_in\">Pre</span>(n-&gt;right);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">In</span><span class=\"hljs-params\">(node *n)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">NULL</span>) {\n        <span class=\"hljs-built_in\">In</span>(n-&gt;left);\n        cout &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\n        <span class=\"hljs-built_in\">In</span>(n-&gt;right);\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Post</span><span class=\"hljs-params\">(node *n)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (n != <span class=\"hljs-literal\">NULL</span>) {\n        <span class=\"hljs-built_in\">Post</span>(n-&gt;left);\n        <span class=\"hljs-built_in\">Post</span>(n-&gt;right);\n        cout &lt;&lt; n-&gt;val &lt;&lt; <span class=\"hljs-string\">&quot;  &quot;</span>;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> value;\n    <span class=\"hljs-type\">int</span> ch;\n    node *root = <span class=\"hljs-keyword\">new</span> node;\n    cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the value of root node :&quot;</span>;\n    cin &gt;&gt; value;\n    root-&gt;val = value;\n    root-&gt;left = <span class=\"hljs-literal\">NULL</span>;\n    root-&gt;right = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">do</span> {\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n1. Insert&quot;</span>;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n2. Breadth First&quot;</span>;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n3. Preorder Depth First&quot;</span>;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n4. Inorder Depth First&quot;</span>;\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\n5. Postorder Depth First&quot;</span>;\n\n        cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter Your Choice : &quot;</span>;\n        cin &gt;&gt; ch;\n        <span class=\"hljs-built_in\">switch</span> (ch) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n            <span class=\"hljs-type\">int</span> x;\n            <span class=\"hljs-type\">char</span> pos;\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nEnter the value to be Inserted : &quot;</span>;\n            cin &gt;&gt; x;\n            cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nLeft or Right of Root : &quot;</span>;\n            cin &gt;&gt; pos;\n            <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-string\">&#x27;l&#x27;</span>)\n                <span class=\"hljs-built_in\">CreateTree</span>(root, root-&gt;left, x, pos);\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pos == <span class=\"hljs-string\">&#x27;r&#x27;</span>)\n                <span class=\"hljs-built_in\">CreateTree</span>(root, root-&gt;right, x, pos);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n            <span class=\"hljs-built_in\">BFT</span>(root);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n            <span class=\"hljs-built_in\">Pre</span>(root);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n            <span class=\"hljs-built_in\">In</span>(root);\n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">5</span>:\n            <span class=\"hljs-built_in\">Post</span>(root);\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    } <span class=\"hljs-keyword\">while</span> (ch != <span class=\"hljs-number\">0</span>);\n}\n"
    },
    "swift": {
      "dir": "trees/tree.swift",
      "url": "https://github.com/TheAlgorithms/swift/tree/master/trees/tree.swift",
      "code": "<span class=\"hljs-keyword\">import</span> Foundation\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TreeNode</span>&lt;<span class=\"hljs-title class_\">T</span>&gt; {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> value: <span class=\"hljs-type\">T</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">weak</span> <span class=\"hljs-keyword\">var</span> parent: <span class=\"hljs-type\">TreeNode</span>?\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">var</span> children <span class=\"hljs-operator\">=</span> [<span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">T</span>&gt;]()\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">init</span>(<span class=\"hljs-params\">value</span>: <span class=\"hljs-type\">T</span>) {\n        <span class=\"hljs-keyword\">self</span>.value <span class=\"hljs-operator\">=</span> value\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">addChild</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">node</span>: <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">T</span>&gt;) {\n        children.append(node)\n        node.parent <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">self</span>\n    }\n}\n\n<span class=\"hljs-comment\">/* Checks the node&#x27;s value property, if there is no match, check the child nodes.\nRepeat the same process recursively */</span>\n<span class=\"hljs-keyword\">extension</span> <span class=\"hljs-title class_\">TreeNode</span> <span class=\"hljs-title class_\">where</span> <span class=\"hljs-title class_\">T</span>: <span class=\"hljs-title class_\">Equatable</span> {\n    <span class=\"hljs-keyword\">func</span> <span class=\"hljs-title function_\">search</span>(<span class=\"hljs-keyword\">_</span> <span class=\"hljs-params\">value</span>: <span class=\"hljs-type\">T</span>) -&gt; <span class=\"hljs-type\">TreeNode</span>? {\n        <span class=\"hljs-keyword\">if</span> value <span class=\"hljs-operator\">==</span> <span class=\"hljs-keyword\">self</span>.value {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>\n        }\n        <span class=\"hljs-keyword\">for</span> child <span class=\"hljs-keyword\">in</span> children {\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">let</span> found <span class=\"hljs-operator\">=</span> child.search(value) {\n                <span class=\"hljs-keyword\">return</span> found\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>\n    }\n}\n\n<span class=\"hljs-comment\">// The code below can be used for testing</span>\n<span class=\"hljs-keyword\">let</span> tree <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">String</span>&gt;(value: <span class=\"hljs-string\">&quot;animals&quot;</span>)\n\n<span class=\"hljs-keyword\">let</span> reptilesNode <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">String</span>&gt;(value: <span class=\"hljs-string\">&quot;reptiles&quot;</span>)\n<span class=\"hljs-keyword\">let</span> mammalsNode <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">String</span>&gt;(value: <span class=\"hljs-string\">&quot;mammals&quot;</span>)\n\n<span class=\"hljs-keyword\">let</span> lizardsNode <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">String</span>&gt;(value: <span class=\"hljs-string\">&quot;lizards&quot;</span>)\n<span class=\"hljs-keyword\">let</span> snakesNode <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">String</span>&gt;(value: <span class=\"hljs-string\">&quot;snakes&quot;</span>)\n\n<span class=\"hljs-keyword\">let</span> dogsNode <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">String</span>&gt;(value: <span class=\"hljs-string\">&quot;dogs&quot;</span>)\n<span class=\"hljs-keyword\">let</span> humansNode <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">String</span>&gt;(value: <span class=\"hljs-string\">&quot;humans&quot;</span>)\n\ntree.addChild(reptilesNode)\ntree.addChild(mammalsNode)\n\nreptilesNode.addChild(lizardsNode)\nreptilesNode.addChild(snakesNode)\n\nmammalsNode.addChild(dogsNode)\nmammalsNode.addChild(humansNode)\n\n<span class=\"hljs-built_in\">print</span>(tree.search(<span class=\"hljs-string\">&quot;humans&quot;</span>)<span class=\"hljs-operator\">?</span>.value)\n<span class=\"hljs-built_in\">print</span>(tree.search(<span class=\"hljs-string\">&quot;lizards&quot;</span>)<span class=\"hljs-operator\">?</span>.value)\n<span class=\"hljs-built_in\">print</span>(tree.search(<span class=\"hljs-string\">&quot;dragons&quot;</span>)<span class=\"hljs-operator\">?</span>.value)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 1
    },
    {
      "name": "Luis Fuentes González",
      "email": "47273700+Luisfueg@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "jordan-matthews-98",
      "email": "45404939+jordan-matthews-98@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Gustavo Tiecker",
      "email": "gustavotiecker@gmail.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
