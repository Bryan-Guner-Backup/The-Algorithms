{
  "slug": "linked-queue",
  "name": "Linked Queue",
  "categories": ["datastructures", "queue"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/queue/linked_queue.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/queue/linked_queue.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot; A Queue using a linked list like structure &quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Any</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-type\">Any</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.data = data\n        self.<span class=\"hljs-built_in\">next</span> = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{self.data}</span>&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedQueue</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; queue = LinkedQueue()\n    &gt;&gt;&gt; queue.is_empty()\n    True\n    &gt;&gt;&gt; queue.put(5)\n    &gt;&gt;&gt; queue.put(9)\n    &gt;&gt;&gt; queue.put(&#x27;python&#x27;)\n    &gt;&gt;&gt; queue.is_empty();\n    False\n    &gt;&gt;&gt; queue.get()\n    5\n    &gt;&gt;&gt; queue.put(&#x27;algorithms&#x27;)\n    &gt;&gt;&gt; queue.get()\n    9\n    &gt;&gt;&gt; queue.get()\n    &#x27;python&#x27;\n    &gt;&gt;&gt; queue.get()\n    &#x27;algorithms&#x27;\n    &gt;&gt;&gt; queue.is_empty()\n    True\n    &gt;&gt;&gt; queue.get()\n    Traceback (most recent call last):\n        ...\n    IndexError: dequeue from empty queue\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        self.front = self.rear = <span class=\"hljs-literal\">None</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__iter__</span>(<span class=\"hljs-params\">self</span>):\n        node = self.front\n        <span class=\"hljs-keyword\">while</span> node:\n            <span class=\"hljs-keyword\">yield</span> node.data\n            node = node.<span class=\"hljs-built_in\">next</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__len__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; queue = LinkedQueue()\n        &gt;&gt;&gt; for i in range(1, 6):\n        ...     queue.put(i)\n        &gt;&gt;&gt; len(queue)\n        5\n        &gt;&gt;&gt; for i in range(1, 6):\n        ...     assert len(queue) == 6 - i\n        ...     _ = queue.get()\n        &gt;&gt;&gt; len(queue)\n        0\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(<span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">iter</span>(self)))\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; queue = LinkedQueue()\n        &gt;&gt;&gt; for i in range(1, 4):\n        ...     queue.put(i)\n        &gt;&gt;&gt; queue.put(&quot;Python&quot;)\n        &gt;&gt;&gt; queue.put(3.14)\n        &gt;&gt;&gt; queue.put(True)\n        &gt;&gt;&gt; str(queue)\n        &#x27;1 &lt;- 2 &lt;- 3 &lt;- Python &lt;- 3.14 &lt;- True&#x27;\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot; &lt;- &quot;</span>.join(<span class=\"hljs-built_in\">str</span>(item) <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> self)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_empty</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; queue = LinkedQueue()\n        &gt;&gt;&gt; queue.is_empty()\n        True\n        &gt;&gt;&gt; for i in range(1, 6):\n        ...     queue.put(i)\n        &gt;&gt;&gt; queue.is_empty()\n        False\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self) == <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">put</span>(<span class=\"hljs-params\">self, item</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; queue = LinkedQueue()\n        &gt;&gt;&gt; queue.get()\n        Traceback (most recent call last):\n        ...\n        IndexError: dequeue from empty queue\n        &gt;&gt;&gt; for i in range(1, 6):\n        ...     queue.put(i)\n        &gt;&gt;&gt; str(queue)\n        &#x27;1 &lt;- 2 &lt;- 3 &lt;- 4 &lt;- 5&#x27;\n        &quot;&quot;&quot;</span>\n        node = Node(item)\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\n            self.front = self.rear = node\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(self.rear, Node)\n            self.rear.<span class=\"hljs-built_in\">next</span> = node\n            self.rear = node\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-type\">Any</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; queue = LinkedQueue()\n        &gt;&gt;&gt; queue.get()\n        Traceback (most recent call last):\n        ...\n        IndexError: dequeue from empty queue\n        &gt;&gt;&gt; queue = LinkedQueue()\n        &gt;&gt;&gt; for i in range(1, 6):\n        ...     queue.put(i)\n        &gt;&gt;&gt; for i in range(1, 6):\n        ...     assert queue.get() == i\n        &gt;&gt;&gt; len(queue)\n        0\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> self.is_empty():\n            <span class=\"hljs-keyword\">raise</span> IndexError(<span class=\"hljs-string\">&quot;dequeue from empty queue&quot;</span>)\n        <span class=\"hljs-keyword\">assert</span> <span class=\"hljs-built_in\">isinstance</span>(self.front, Node)\n        node = self.front\n        self.front = self.front.<span class=\"hljs-built_in\">next</span>\n        <span class=\"hljs-keyword\">if</span> self.front <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">None</span>:\n            self.rear = <span class=\"hljs-literal\">None</span>\n        <span class=\"hljs-keyword\">return</span> node.data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">clear</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        &gt;&gt;&gt; queue = LinkedQueue()\n        &gt;&gt;&gt; for i in range(1, 6):\n        ...     queue.put(i)\n        &gt;&gt;&gt; queue.clear()\n        &gt;&gt;&gt; len(queue)\n        0\n        &gt;&gt;&gt; str(queue)\n        &#x27;&#x27;\n        &quot;&quot;&quot;</span>\n        self.front = self.rear = <span class=\"hljs-literal\">None</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">from</span> doctest <span class=\"hljs-keyword\">import</span> testmod\n\n    testmod()\n"
    },
    "java": {
      "dir": "DataStructures/Queues/LinkedQueue.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/Queues/LinkedQueue.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.Queues;\n\n<span class=\"hljs-keyword\">import</span> java.util.NoSuchElementException;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LinkedQueue</span> {\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Node</span> {\n    <span class=\"hljs-type\">int</span> data;\n    Node next;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">()</span> {\n      <span class=\"hljs-built_in\">this</span>(<span class=\"hljs-number\">0</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\n      <span class=\"hljs-built_in\">this</span>(data, <span class=\"hljs-literal\">null</span>);\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Node</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data, Node next)</span> {\n      <span class=\"hljs-built_in\">this</span>.data = data;\n      <span class=\"hljs-built_in\">this</span>.next = next;\n    }\n  }\n\n  <span class=\"hljs-comment\">/** Front of Queue */</span>\n  <span class=\"hljs-keyword\">private</span> Node front;\n\n  <span class=\"hljs-comment\">/** Rear of Queue */</span>\n  <span class=\"hljs-keyword\">private</span> Node rear;\n\n  <span class=\"hljs-comment\">/** Size of Queue */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size;\n\n  <span class=\"hljs-comment\">/** Init LinkedQueue */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">LinkedQueue</span><span class=\"hljs-params\">()</span> {\n    front = rear = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>();\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Check if queue is empty\n   *\n   * <span class=\"hljs-doctag\">@return</span> &lt;tt&gt;true&lt;/tt&gt; if queue is empty, otherwise &lt;tt&gt;false&lt;/tt&gt;\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">return</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span>= <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Add element to rear of queue\n   *\n   * <span class=\"hljs-doctag\">@param</span> data insert value\n   * <span class=\"hljs-doctag\">@return</span> &lt;tt&gt;true&lt;/tt&gt; if add successfully\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">enqueue</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> data)</span> {\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">newNode</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Node</span>(data);\n    rear.next = newNode;\n    rear = newNode; <span class=\"hljs-comment\">/* make rear point at last node */</span>\n    size++;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Remove element at the front of queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> element at the front of queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">dequeue</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>(<span class=\"hljs-string\">&quot;queue is empty&quot;</span>);\n    }\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">destroy</span> <span class=\"hljs-operator\">=</span> front.next;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">retValue</span> <span class=\"hljs-operator\">=</span> destroy.data;\n    front.next = front.next.next;\n    destroy = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">/* clear let GC do it&#x27;s work */</span>\n    size--;\n\n    <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n      front = rear;\n    }\n\n    <span class=\"hljs-keyword\">return</span> retValue;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Peek element at the front of queue without removing\n   *\n   * <span class=\"hljs-doctag\">@return</span> element at the front\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peekFront</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>(<span class=\"hljs-string\">&quot;queue is empty&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> front.next.data;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Peek element at the rear of queue without removing\n   *\n   * <span class=\"hljs-doctag\">@return</span> element at the front\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">peekRear</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NoSuchElementException</span>(<span class=\"hljs-string\">&quot;queue is empty&quot;</span>);\n    }\n    <span class=\"hljs-keyword\">return</span> rear.data;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Return size of queue\n   *\n   * <span class=\"hljs-doctag\">@return</span> size of queue\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">size</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">return</span> size;\n  }\n\n  <span class=\"hljs-comment\">/** Clear all nodes in queue */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">clear</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">while</span> (!isEmpty()) {\n      dequeue();\n    }\n  }\n\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;[]&quot;</span>;\n    }\n    <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();\n    <span class=\"hljs-type\">Node</span> <span class=\"hljs-variable\">cur</span> <span class=\"hljs-operator\">=</span> front.next;\n    builder.append(<span class=\"hljs-string\">&quot;[&quot;</span>);\n    <span class=\"hljs-keyword\">while</span> (cur != <span class=\"hljs-literal\">null</span>) {\n      builder.append(cur.data).append(<span class=\"hljs-string\">&quot;, &quot;</span>);\n      cur = cur.next;\n    }\n    builder.replace(builder.length() - <span class=\"hljs-number\">2</span>, builder.length(), <span class=\"hljs-string\">&quot;]&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> builder.toString();\n  }\n\n  <span class=\"hljs-comment\">/* Driver Code */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">LinkedQueue</span> <span class=\"hljs-variable\">queue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedQueue</span>();\n    <span class=\"hljs-keyword\">assert</span> queue.isEmpty();\n\n    queue.enqueue(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">/* 1 */</span>\n    queue.enqueue(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">/* 1 2 */</span>\n    queue.enqueue(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">/* 1 2 3 */</span>\n    System.out.println(queue); <span class=\"hljs-comment\">/* [1, 2, 3] */</span>\n\n    <span class=\"hljs-keyword\">assert</span> queue.size() == <span class=\"hljs-number\">3</span>;\n    <span class=\"hljs-keyword\">assert</span> queue.dequeue() == <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">assert</span> queue.peekFront() == <span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-keyword\">assert</span> queue.peekRear() == <span class=\"hljs-number\">3</span>;\n\n    queue.clear();\n    <span class=\"hljs-keyword\">assert</span> queue.isEmpty();\n\n    System.out.println(queue); <span class=\"hljs-comment\">/* [] */</span>\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Mariusz Skoneczko",
      "email": "mariusz@skoneczko.com",
      "commits": 1
    },
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
