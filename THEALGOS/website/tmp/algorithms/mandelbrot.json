{
  "slug": "mandelbrot",
  "name": "Mandelbrot",
  "categories": ["fractals"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "fractals/mandelbrot.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/fractals/mandelbrot.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nThe Mandelbrot set is the set of complex numbers &quot;c&quot; for which the series\r\n&quot;z_(n+1) = z_n * z_n + c&quot; does not diverge, i.e. remains bounded. Thus, a\r\ncomplex number &quot;c&quot; is a member of the Mandelbrot set if, when starting with\r\n&quot;z_0 = 0&quot; and applying the iteration repeatedly, the absolute value of\r\n&quot;z_n&quot; remains bounded for all &quot;n &gt; 0&quot;. Complex numbers can be written as\r\n&quot;a + b*i&quot;: &quot;a&quot; is the real component, usually drawn on the x-axis, and &quot;b*i&quot;\r\nis the imaginary component, usually drawn on the y-axis. Most visualizations\r\nof the Mandelbrot set use a color-coding to indicate after how many steps in\r\nthe series the numbers outside the set diverge. Images of the Mandelbrot set\r\nexhibit an elaborate and infinitely complicated boundary that reveals\r\nprogressively ever-finer recursive detail at increasing magnifications, making\r\nthe boundary of the Mandelbrot set a fractal curve.\r\n(description adapted from https://en.wikipedia.org/wiki/Mandelbrot_set )\r\n(see also https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set )\r\n&quot;&quot;&quot;</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">import</span> colorsys\r\n\r\n<span class=\"hljs-keyword\">from</span> PIL <span class=\"hljs-keyword\">import</span> Image  <span class=\"hljs-comment\"># type: ignore</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_distance</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">float</span>, y: <span class=\"hljs-built_in\">float</span>, max_step: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Return the relative distance (= step/max_step) after which the complex number\r\n    constituted by this x-y-pair diverges. Members of the Mandelbrot set do not\r\n    diverge so their distance is 1.\r\n\r\n    &gt;&gt;&gt; get_distance(0, 0, 50)\r\n    1.0\r\n    &gt;&gt;&gt; get_distance(0.5, 0.5, 50)\r\n    0.061224489795918366\r\n    &gt;&gt;&gt; get_distance(2, 0, 50)\r\n    0.0\r\n    &quot;&quot;&quot;</span>\r\n    a = x\r\n    b = y\r\n    <span class=\"hljs-keyword\">for</span> step <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(max_step):\r\n        a_new = a * a - b * b + x\r\n        b = <span class=\"hljs-number\">2</span> * a * b + y\r\n        a = a_new\r\n\r\n        <span class=\"hljs-comment\"># divergence happens for all complex number with an absolute value</span>\r\n        <span class=\"hljs-comment\"># greater than 4</span>\r\n        <span class=\"hljs-keyword\">if</span> a * a + b * b &gt; <span class=\"hljs-number\">4</span>:\r\n            <span class=\"hljs-keyword\">break</span>\r\n    <span class=\"hljs-keyword\">return</span> step / (max_step - <span class=\"hljs-number\">1</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_black_and_white_rgb</span>(<span class=\"hljs-params\">distance: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Black&amp;white color-coding that ignores the relative distance. The Mandelbrot\r\n    set is black, everything else is white.\r\n\r\n    &gt;&gt;&gt; get_black_and_white_rgb(0)\r\n    (255, 255, 255)\r\n    &gt;&gt;&gt; get_black_and_white_rgb(0.5)\r\n    (255, 255, 255)\r\n    &gt;&gt;&gt; get_black_and_white_rgb(1)\r\n    (0, 0, 0)\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> distance == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>)\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_color_coded_rgb</span>(<span class=\"hljs-params\">distance: <span class=\"hljs-built_in\">float</span></span>) -&gt; <span class=\"hljs-built_in\">tuple</span>:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Color-coding taking the relative distance into account. The Mandelbrot set\r\n    is black.\r\n\r\n    &gt;&gt;&gt; get_color_coded_rgb(0)\r\n    (255, 0, 0)\r\n    &gt;&gt;&gt; get_color_coded_rgb(0.5)\r\n    (0, 255, 255)\r\n    &gt;&gt;&gt; get_color_coded_rgb(1)\r\n    (0, 0, 0)\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">if</span> distance == <span class=\"hljs-number\">1</span>:\r\n        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\r\n    <span class=\"hljs-keyword\">else</span>:\r\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">tuple</span>(<span class=\"hljs-built_in\">round</span>(i * <span class=\"hljs-number\">255</span>) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> colorsys.hsv_to_rgb(distance, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>))\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_image</span>(<span class=\"hljs-params\">\r\n    image_width: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">800</span>,\r\n    image_height: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">600</span>,\r\n    figure_center_x: <span class=\"hljs-built_in\">float</span> = -<span class=\"hljs-number\">0.6</span>,\r\n    figure_center_y: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">0</span>,\r\n    figure_width: <span class=\"hljs-built_in\">float</span> = <span class=\"hljs-number\">3.2</span>,\r\n    max_step: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">50</span>,\r\n    use_distance_color_coding: <span class=\"hljs-built_in\">bool</span> = <span class=\"hljs-literal\">True</span>,\r\n</span>) -&gt; Image.Image:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Function to generate the image of the Mandelbrot set. Two types of coordinates\r\n    are used: image-coordinates that refer to the pixels and figure-coordinates\r\n    that refer to the complex numbers inside and outside the Mandelbrot set. The\r\n    figure-coordinates in the arguments of this function determine which section\r\n    of the Mandelbrot set is viewed. The main area of the Mandelbrot set is\r\n    roughly between &quot;-1.5 &lt; x &lt; 0.5&quot; and &quot;-1 &lt; y &lt; 1&quot; in the figure-coordinates.\r\n\r\n    &gt;&gt;&gt; get_image().load()[0,0]\r\n    (255, 0, 0)\r\n    &gt;&gt;&gt; get_image(use_distance_color_coding = False).load()[0,0]\r\n    (255, 255, 255)\r\n    &quot;&quot;&quot;</span>\r\n    img = Image.new(<span class=\"hljs-string\">&quot;RGB&quot;</span>, (image_width, image_height))\r\n    pixels = img.load()\r\n\r\n    <span class=\"hljs-comment\"># loop through the image-coordinates</span>\r\n    <span class=\"hljs-keyword\">for</span> image_x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(image_width):\r\n        <span class=\"hljs-keyword\">for</span> image_y <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(image_height):\r\n\r\n            <span class=\"hljs-comment\"># determine the figure-coordinates based on the image-coordinates</span>\r\n            figure_height = figure_width / image_width * image_height\r\n            figure_x = figure_center_x + (image_x / image_width - <span class=\"hljs-number\">0.5</span>) * figure_width\r\n            figure_y = figure_center_y + (image_y / image_height - <span class=\"hljs-number\">0.5</span>) * figure_height\r\n\r\n            distance = get_distance(figure_x, figure_y, max_step)\r\n\r\n            <span class=\"hljs-comment\"># color the corresponding pixel based on the selected coloring-function</span>\r\n            <span class=\"hljs-keyword\">if</span> use_distance_color_coding:\r\n                pixels[image_x, image_y] = get_color_coded_rgb(distance)\r\n            <span class=\"hljs-keyword\">else</span>:\r\n                pixels[image_x, image_y] = get_black_and_white_rgb(distance)\r\n\r\n    <span class=\"hljs-keyword\">return</span> img\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    <span class=\"hljs-keyword\">import</span> doctest\r\n\r\n    doctest.testmod()\r\n\r\n    <span class=\"hljs-comment\"># colored version, full figure</span>\r\n    img = get_image()\r\n\r\n    <span class=\"hljs-comment\"># uncomment for colored version, different section, zoomed in</span>\r\n    <span class=\"hljs-comment\"># img = get_image(figure_center_x = -0.6, figure_center_y = -0.4,</span>\r\n    <span class=\"hljs-comment\"># figure_width = 0.8)</span>\r\n\r\n    <span class=\"hljs-comment\"># uncomment for black and white version, full figure</span>\r\n    <span class=\"hljs-comment\"># img = get_image(use_distance_color_coding = False)</span>\r\n\r\n    <span class=\"hljs-comment\"># uncomment to save the image</span>\r\n    <span class=\"hljs-comment\"># img.save(&quot;mandelbrot.png&quot;)</span>\r\n\r\n    img.show()\r\n"
    },
    "javascript": {
      "dir": "Maths/Mandelbrot.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Maths/Mandelbrot.js",
      "code": "<span class=\"hljs-comment\">/**\n * The Mandelbrot set is the set of complex numbers &quot;c&quot; for which the series &quot;z_(n+1) = z_n * z_n +\n * c&quot; does not diverge, i.e. remains bounded. Thus, a complex number &quot;c&quot; is a member of the\n * Mandelbrot set if, when starting with &quot;z_0 = 0&quot; and applying the iteration repeatedly, the\n * absolute value of &quot;z_n&quot; remains bounded for all &quot;n &gt; 0&quot;. Complex numbers can be written as &quot;a +\n * b*i&quot;: &quot;a&quot; is the real component, usually drawn on the x-axis, and &quot;b*i&quot; is the imaginary\n * component, usually drawn on the y-axis. Most visualizations of the Mandelbrot set use a\n * color-coding to indicate after how many steps in the series the numbers outside the set cross the\n * divergence threshold. Images of the Mandelbrot set exhibit an elaborate and infinitely\n * complicated boundary that reveals progressively ever-finer recursive detail at increasing\n * magnifications, making the boundary of the Mandelbrot set a fractal curve. (description adapted\n * from https://en.wikipedia.org/wiki/Mandelbrot_set ) (see also\n * https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set )\n */</span>\n\n<span class=\"hljs-comment\">/*\nDoctests\nTest black and white\nPixel outside the Mandelbrot set should be white.\nPixel inside the Mandelbrot set should be black.\n&gt; getRGBData(800, 600, -0.6, 0, 3.2, 50, false)[0][0]\n[255, 255, 255]\n&gt; getRGBData(800, 600, -0.6, 0, 3.2, 50, false)[400][300]\n[0, 0, 0]\n\nTest color-coding\nPixel distant to the Mandelbrot set should be red.\nPixel inside the Mandelbrot set should be black.\n&gt; getRGBData(800, 600, -0.6, 0, 3.2, 50, true)[0][0]\n[255, 0, 0]\n&gt; getRGBData(800, 600, -0.6, 0, 3.2, 50, true)[400][300]\n[0, 0, 0]\n*/</span>\n\n<span class=\"hljs-comment\">/**\n * Method to generate the image of the Mandelbrot set. Two types of coordinates are used:\n * image-coordinates that refer to the pixels and figure-coordinates that refer to the complex\n * numbers inside and outside the Mandelbrot set. The figure-coordinates in the arguments of this\n * method determine which section of the Mandelbrot set is viewed. The main area of the Mandelbrot\n * set is roughly between &quot;-1.5 &lt; x &lt; 0.5&quot; and &quot;-1 &lt; y &lt; 1&quot; in the figure-coordinates.\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} imageWidth The width of the rendered image.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} imageHeight The height of the rendered image.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} figureCenterX The x-coordinate of the center of the figure.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} figureCenterY The y-coordinate of the center of the figure.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} figureWidth The width of the figure.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} maxStep Maximum number of steps to check for divergent behavior.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} useDistanceColorCoding Render in color or black and white.\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">object</span>} The RGB-data of the rendered Mandelbrot set.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getRGBData</span> (\n  imageWidth = <span class=\"hljs-number\">800</span>,\n  imageHeight = <span class=\"hljs-number\">600</span>,\n  figureCenterX = -<span class=\"hljs-number\">0.6</span>,\n  figureCenterY = <span class=\"hljs-number\">0</span>,\n  figureWidth = <span class=\"hljs-number\">3.2</span>,\n  maxStep = <span class=\"hljs-number\">50</span>,\n  useDistanceColorCoding = <span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-keyword\">if</span> (imageWidth &lt;= <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;imageWidth should be greater than zero&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">if</span> (imageHeight &lt;= <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;imageHeight should be greater than zero&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">if</span> (maxStep &lt;= <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&#x27;maxStep should be greater than zero&#x27;</span>)\n  }\n\n  <span class=\"hljs-keyword\">const</span> rgbData = []\n  <span class=\"hljs-keyword\">const</span> figureHeight = figureWidth / imageWidth * imageHeight\n\n  <span class=\"hljs-comment\">// loop through the image-coordinates</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> imageX = <span class=\"hljs-number\">0</span>; imageX &lt; imageWidth; imageX++) {\n    rgbData[imageX] = []\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> imageY = <span class=\"hljs-number\">0</span>; imageY &lt; imageHeight; imageY++) {\n      <span class=\"hljs-comment\">// determine the figure-coordinates based on the image-coordinates</span>\n      <span class=\"hljs-keyword\">const</span> figureX = figureCenterX + (imageX / imageWidth - <span class=\"hljs-number\">0.5</span>) * figureWidth\n      <span class=\"hljs-keyword\">const</span> figureY = figureCenterY + (imageY / imageHeight - <span class=\"hljs-number\">0.5</span>) * figureHeight\n\n      <span class=\"hljs-keyword\">const</span> distance = <span class=\"hljs-title function_\">getDistance</span>(figureX, figureY, maxStep)\n\n      <span class=\"hljs-comment\">// color the corresponding pixel based on the selected coloring-function</span>\n      rgbData[imageX][imageY] =\n          useDistanceColorCoding\n            ? <span class=\"hljs-title function_\">colorCodedColorMap</span>(distance)\n            : <span class=\"hljs-title function_\">blackAndWhiteColorMap</span>(distance)\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> rgbData\n}\n\n<span class=\"hljs-comment\">/**\n * Black and white color-coding that ignores the relative distance. The Mandelbrot set is black,\n * everything else is white.\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} distance Distance until divergence threshold\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">object</span>} The RGB-value corresponding to the distance.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">blackAndWhiteColorMap</span> (distance) {\n  <span class=\"hljs-keyword\">return</span> distance &gt;= <span class=\"hljs-number\">1</span> ? [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>] : [<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>]\n}\n\n<span class=\"hljs-comment\">/**\n * Color-coding taking the relative distance into account. The Mandelbrot set is black.\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} distance Distance until divergence threshold\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">object</span>} The RGB-value corresponding to the distance.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">colorCodedColorMap</span> (distance) {\n  <span class=\"hljs-keyword\">if</span> (distance &gt;= <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// simplified transformation of HSV to RGB</span>\n    <span class=\"hljs-comment\">// distance determines hue</span>\n    <span class=\"hljs-keyword\">const</span> hue = <span class=\"hljs-number\">360</span> * distance\n    <span class=\"hljs-keyword\">const</span> saturation = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">const</span> val = <span class=\"hljs-number\">255</span>\n    <span class=\"hljs-keyword\">const</span> hi = (<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(hue / <span class=\"hljs-number\">60</span>)) % <span class=\"hljs-number\">6</span>\n    <span class=\"hljs-keyword\">const</span> f = hue / <span class=\"hljs-number\">60</span> - <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(hue / <span class=\"hljs-number\">60</span>)\n\n    <span class=\"hljs-keyword\">const</span> v = val\n    <span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">const</span> q = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(val * (<span class=\"hljs-number\">1</span> - f * saturation))\n    <span class=\"hljs-keyword\">const</span> t = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(val * (<span class=\"hljs-number\">1</span> - (<span class=\"hljs-number\">1</span> - f) * saturation))\n\n    <span class=\"hljs-keyword\">switch</span> (hi) {\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> [v, t, p]\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> [q, v, p]\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">return</span> [p, v, t]\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n        <span class=\"hljs-keyword\">return</span> [p, q, v]\n      <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n        <span class=\"hljs-keyword\">return</span> [t, p, v]\n      <span class=\"hljs-attr\">default</span>:\n        <span class=\"hljs-keyword\">return</span> [v, p, q]\n    }\n  }\n}\n\n<span class=\"hljs-comment\">/**\n * Return the relative distance (ratio of steps taken to maxStep) after which the complex number\n * constituted by this x-y-pair diverges. Members of the Mandelbrot set do not diverge so their\n * distance is 1.\n *\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} figureX The x-coordinate within the figure.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} figureX The y-coordinate within the figure.\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} maxStep Maximum number of steps to check for divergent behavior.\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">number</span>} The relative distance as the ratio of steps taken to maxStep.\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getDistance</span> (figureX, figureY, maxStep) {\n  <span class=\"hljs-keyword\">let</span> a = figureX\n  <span class=\"hljs-keyword\">let</span> b = figureY\n  <span class=\"hljs-keyword\">let</span> currentStep = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> step = <span class=\"hljs-number\">0</span>; step &lt; maxStep; step++) {\n    currentStep = step\n    <span class=\"hljs-keyword\">const</span> aNew = a * a - b * b + figureX\n    b = <span class=\"hljs-number\">2</span> * a * b + figureY\n    a = aNew\n\n    <span class=\"hljs-comment\">// divergence happens for all complex number with an absolute value</span>\n    <span class=\"hljs-comment\">// greater than 4 (= divergence threshold)</span>\n    <span class=\"hljs-keyword\">if</span> (a * a + b * b &gt; <span class=\"hljs-number\">4</span>) {\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> currentStep / (maxStep - <span class=\"hljs-number\">1</span>)\n}\n\n<span class=\"hljs-comment\">// plot the results if the script is executed in a browser with a window-object</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">window</span> !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span>) {\n  <span class=\"hljs-keyword\">const</span> rgbData = <span class=\"hljs-title function_\">getRGBData</span>()\n  <span class=\"hljs-keyword\">const</span> width = rgbData.<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> height = rgbData[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">length</span>\n  <span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>)\n  canvas.<span class=\"hljs-property\">width</span> = width\n  canvas.<span class=\"hljs-property\">height</span> = height\n  <span class=\"hljs-keyword\">const</span> ctx = canvas.<span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-string\">&#x27;2d&#x27;</span>)\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">0</span>; x &lt; width; x++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> y = <span class=\"hljs-number\">0</span>; y &lt; height; y++) {\n      <span class=\"hljs-keyword\">const</span> rgb = rgbData[x][y]\n      ctx.<span class=\"hljs-property\">fillStyle</span> = <span class=\"hljs-string\">&#x27;rgb(&#x27;</span> + rgb[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">&#x27;,&#x27;</span> + rgb[<span class=\"hljs-number\">1</span>] + <span class=\"hljs-string\">&#x27;,&#x27;</span> + rgb[<span class=\"hljs-number\">2</span>] + <span class=\"hljs-string\">&#x27;)&#x27;</span>\n      ctx.<span class=\"hljs-title function_\">fillRect</span>(x, y, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)\n    }\n  }\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">append</span>(canvas)\n}\n"
    },
    "java": {
      "dir": "Others/Mandelbrot.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/Mandelbrot.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.awt.*;\n<span class=\"hljs-keyword\">import</span> java.awt.image.BufferedImage;\n<span class=\"hljs-keyword\">import</span> java.io.File;\n<span class=\"hljs-keyword\">import</span> java.io.IOException;\n<span class=\"hljs-keyword\">import</span> javax.imageio.ImageIO;\n\n<span class=\"hljs-comment\">/**\n * The Mandelbrot set is the set of complex numbers &quot;c&quot; for which the series &quot;z_(n+1) = z_n * z_n +\n * c&quot; does not diverge, i.e. remains bounded. Thus, a complex number &quot;c&quot; is a member of the\n * Mandelbrot set if, when starting with &quot;z_0 = 0&quot; and applying the iteration repeatedly, the\n * absolute value of &quot;z_n&quot; remains bounded for all &quot;n &gt; 0&quot;. Complex numbers can be written as &quot;a +\n * b*i&quot;: &quot;a&quot; is the real component, usually drawn on the x-axis, and &quot;b*i&quot; is the imaginary\n * component, usually drawn on the y-axis. Most visualizations of the Mandelbrot set use a\n * color-coding to indicate after how many steps in the series the numbers outside the set cross the\n * divergence threshold. Images of the Mandelbrot set exhibit an elaborate and infinitely\n * complicated boundary that reveals progressively ever-finer recursive detail at increasing\n * magnifications, making the boundary of the Mandelbrot set a fractal curve. (description adapted\n * from https://en.wikipedia.org/wiki/Mandelbrot_set ) (see also\n * https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set )\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Mandelbrot</span> {\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// Test black and white</span>\n    <span class=\"hljs-type\">BufferedImage</span> <span class=\"hljs-variable\">blackAndWhiteImage</span> <span class=\"hljs-operator\">=</span> getImage(<span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">600</span>, -<span class=\"hljs-number\">0.6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3.2</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-literal\">false</span>);\n\n    <span class=\"hljs-comment\">// Pixel outside the Mandelbrot set should be white.</span>\n    <span class=\"hljs-keyword\">assert</span> blackAndWhiteImage.getRGB(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>).getRGB();\n\n    <span class=\"hljs-comment\">// Pixel inside the Mandelbrot set should be black.</span>\n    <span class=\"hljs-keyword\">assert</span> blackAndWhiteImage.getRGB(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>) == <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>).getRGB();\n\n    <span class=\"hljs-comment\">// Test color-coding</span>\n    <span class=\"hljs-type\">BufferedImage</span> <span class=\"hljs-variable\">coloredImage</span> <span class=\"hljs-operator\">=</span> getImage(<span class=\"hljs-number\">800</span>, <span class=\"hljs-number\">600</span>, -<span class=\"hljs-number\">0.6</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3.2</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-literal\">true</span>);\n\n    <span class=\"hljs-comment\">// Pixel distant to the Mandelbrot set should be red.</span>\n    <span class=\"hljs-keyword\">assert</span> coloredImage.getRGB(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) == <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>).getRGB();\n\n    <span class=\"hljs-comment\">// Pixel inside the Mandelbrot set should be black.</span>\n    <span class=\"hljs-keyword\">assert</span> coloredImage.getRGB(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>) == <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>).getRGB();\n\n    <span class=\"hljs-comment\">// Save image</span>\n    <span class=\"hljs-keyword\">try</span> {\n      ImageIO.write(coloredImage, <span class=\"hljs-string\">&quot;png&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;Mandelbrot.png&quot;</span>));\n    } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Method to generate the image of the Mandelbrot set. Two types of coordinates are used:\n   * image-coordinates that refer to the pixels and figure-coordinates that refer to the complex\n   * numbers inside and outside the Mandelbrot set. The figure-coordinates in the arguments of this\n   * method determine which section of the Mandelbrot set is viewed. The main area of the Mandelbrot\n   * set is roughly between &quot;-1.5 &lt; x &lt; 0.5&quot; and &quot;-1 &lt; y &lt; 1&quot; in the figure-coordinates.\n   *\n   * <span class=\"hljs-doctag\">@param</span> imageWidth The width of the rendered image.\n   * <span class=\"hljs-doctag\">@param</span> imageHeight The height of the rendered image.\n   * <span class=\"hljs-doctag\">@param</span> figureCenterX The x-coordinate of the center of the figure.\n   * <span class=\"hljs-doctag\">@param</span> figureCenterY The y-coordinate of the center of the figure.\n   * <span class=\"hljs-doctag\">@param</span> figureWidth The width of the figure.\n   * <span class=\"hljs-doctag\">@param</span> maxStep Maximum number of steps to check for divergent behavior.\n   * <span class=\"hljs-doctag\">@param</span> useDistanceColorCoding Render in color or black and white.\n   * <span class=\"hljs-doctag\">@return</span> The image of the rendered Mandelbrot set.\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> BufferedImage <span class=\"hljs-title function_\">getImage</span><span class=\"hljs-params\">(\n      <span class=\"hljs-type\">int</span> imageWidth,\n      <span class=\"hljs-type\">int</span> imageHeight,\n      <span class=\"hljs-type\">double</span> figureCenterX,\n      <span class=\"hljs-type\">double</span> figureCenterY,\n      <span class=\"hljs-type\">double</span> figureWidth,\n      <span class=\"hljs-type\">int</span> maxStep,\n      <span class=\"hljs-type\">boolean</span> useDistanceColorCoding)</span> {\n    <span class=\"hljs-keyword\">if</span> (imageWidth &lt;= <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;imageWidth should be greater than zero&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (imageHeight &lt;= <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;imageHeight should be greater than zero&quot;</span>);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (maxStep &lt;= <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;maxStep should be greater than zero&quot;</span>);\n    }\n\n    <span class=\"hljs-type\">BufferedImage</span> <span class=\"hljs-variable\">image</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BufferedImage</span>(imageWidth, imageHeight, BufferedImage.TYPE_INT_RGB);\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">figureHeight</span> <span class=\"hljs-operator\">=</span> figureWidth / imageWidth * imageHeight;\n\n    <span class=\"hljs-comment\">// loop through the image-coordinates</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">imageX</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; imageX &lt; imageWidth; imageX++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">imageY</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; imageY &lt; imageHeight; imageY++) {\n        <span class=\"hljs-comment\">// determine the figure-coordinates based on the image-coordinates</span>\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">figureX</span> <span class=\"hljs-operator\">=</span> figureCenterX + ((<span class=\"hljs-type\">double</span>) imageX / imageWidth - <span class=\"hljs-number\">0.5</span>) * figureWidth;\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">figureY</span> <span class=\"hljs-operator\">=</span> figureCenterY + ((<span class=\"hljs-type\">double</span>) imageY / imageHeight - <span class=\"hljs-number\">0.5</span>) * figureHeight;\n\n        <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">distance</span> <span class=\"hljs-operator\">=</span> getDistance(figureX, figureY, maxStep);\n\n        <span class=\"hljs-comment\">// color the corresponding pixel based on the selected coloring-function</span>\n        image.setRGB(\n            imageX,\n            imageY,\n            useDistanceColorCoding\n                ? colorCodedColorMap(distance).getRGB()\n                : blackAndWhiteColorMap(distance).getRGB());\n      }\n    }\n\n    <span class=\"hljs-keyword\">return</span> image;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Black and white color-coding that ignores the relative distance. The Mandelbrot set is black,\n   * everything else is white.\n   *\n   * <span class=\"hljs-doctag\">@param</span> distance Distance until divergence threshold\n   * <span class=\"hljs-doctag\">@return</span> The color corresponding to the distance.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Color <span class=\"hljs-title function_\">blackAndWhiteColorMap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> distance)</span> {\n    <span class=\"hljs-keyword\">return</span> distance &gt;= <span class=\"hljs-number\">1</span> ? <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>) : <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Color-coding taking the relative distance into account. The Mandelbrot set is black.\n   *\n   * <span class=\"hljs-doctag\">@param</span> distance Distance until divergence threshold.\n   * <span class=\"hljs-doctag\">@return</span> The color corresponding to the distance.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Color <span class=\"hljs-title function_\">colorCodedColorMap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> distance)</span> {\n    <span class=\"hljs-keyword\">if</span> (distance &gt;= <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-comment\">// simplified transformation of HSV to RGB</span>\n      <span class=\"hljs-comment\">// distance determines hue</span>\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">hue</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">360</span> * distance;\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">saturation</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">val</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">255</span>;\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hi</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) (Math.floor(hue / <span class=\"hljs-number\">60</span>)) % <span class=\"hljs-number\">6</span>;\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> hue / <span class=\"hljs-number\">60</span> - Math.floor(hue / <span class=\"hljs-number\">60</span>);\n\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">v</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) val;\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">q</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) (val * (<span class=\"hljs-number\">1</span> - f * saturation));\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">t</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) (val * (<span class=\"hljs-number\">1</span> - (<span class=\"hljs-number\">1</span> - f) * saturation));\n\n      <span class=\"hljs-keyword\">switch</span> (hi) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>:\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(v, t, p);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(q, v, p);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(p, v, t);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(p, q, v);\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>:\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(t, p, v);\n        <span class=\"hljs-keyword\">default</span>:\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Color</span>(v, p, q);\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Return the relative distance (ratio of steps taken to maxStep) after which the complex number\n   * constituted by this x-y-pair diverges. Members of the Mandelbrot set do not diverge so their\n   * distance is 1.\n   *\n   * <span class=\"hljs-doctag\">@param</span> figureX The x-coordinate within the figure.\n   * <span class=\"hljs-doctag\">@param</span> figureX The y-coordinate within the figure.\n   * <span class=\"hljs-doctag\">@param</span> maxStep Maximum number of steps to check for divergent behavior.\n   * <span class=\"hljs-doctag\">@return</span> The relative distance as the ratio of steps taken to maxStep.\n   */</span>\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">getDistance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> figureX, <span class=\"hljs-type\">double</span> figureY, <span class=\"hljs-type\">int</span> maxStep)</span> {\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">a</span> <span class=\"hljs-operator\">=</span> figureX;\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> figureY;\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">currentStep</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">step</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; step &lt; maxStep; step++) {\n      currentStep = step;\n      <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">aNew</span> <span class=\"hljs-operator\">=</span> a * a - b * b + figureX;\n      b = <span class=\"hljs-number\">2</span> * a * b + figureY;\n      a = aNew;\n\n      <span class=\"hljs-comment\">// divergence happens for all complex number with an absolute value</span>\n      <span class=\"hljs-comment\">// greater than 4 (= divergence threshold)</span>\n      <span class=\"hljs-keyword\">if</span> (a * a + b * b &gt; <span class=\"hljs-number\">4</span>) {\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">double</span>) currentStep / (maxStep - <span class=\"hljs-number\">1</span>);\n  }\n}\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Other/Mandelbrot.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Other/Mandelbrot.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Drawing;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Other</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The Mandelbrot set is the set of complex numbers &quot;c&quot; for which the series</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     &quot;z_(n+1) = z_n * z_n + c&quot; does not diverge, i.e. remains bounded. Thus, a</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     complex number &quot;c&quot; is a member of the Mandelbrot set if, when starting with</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     &quot;z_0 = 0&quot; and applying the iteration repeatedly, the absolute value of</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     &quot;z_n&quot; remains bounded for all &quot;n &gt; 0&quot;. Complex numbers can be written as</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     &quot;a + b*i&quot;: &quot;a&quot; is the real component, usually drawn on the x-axis, and &quot;b*i&quot;</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is the imaginary component, usually drawn on the y-axis. Most visualizations</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     of the Mandelbrot set use a color-coding to indicate after how many steps in</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     the series the numbers outside the set cross the divergence threshold.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Images of the Mandelbrot set exhibit an elaborate and infinitely</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     complicated boundary that reveals progressively ever-finer recursive detail</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     at increasing magnifications, making the boundary of the Mandelbrot set a</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     fractal curve.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (description adapted from https://en.wikipedia.org/wiki/Mandelbrot_set)</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (see also https://en.wikipedia.org/wiki/Plotting_algorithms_for_the_Mandelbrot_set).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mandelbrot</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Method to generate the bitmap of the Mandelbrot set. Two types of coordinates</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     are used: bitmap-coordinates that refer to the pixels and figure-coordinates</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     that refer to the complex numbers inside and outside the Mandelbrot set. The</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     figure-coordinates in the arguments of this method determine which section</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     of the Mandelbrot set is viewed. The main area of the Mandelbrot set is</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     roughly between &quot;-1.5 &amp;lt; x &amp;lt; 0.5&quot; and &quot;-1 &amp;lt; y &amp;lt; 1&quot; in the figure-coordinates.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     To save the bitmap the command &#x27;GetBitmap().Save(&quot;Mandelbrot.png&quot;)&#x27; can be used.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmapWidth&quot;&gt;</span>The width of the rendered bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;bitmapHeight&quot;&gt;</span>The height of the rendered bitmap.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;figureCenterX&quot;&gt;</span>The x-coordinate of the center of the figure.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;figureCenterY&quot;&gt;</span>The y-coordinate of the center of the figure.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;figureWidth&quot;&gt;</span>The width of the figure.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;maxStep&quot;&gt;</span>Maximum number of steps to check for divergent behavior.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;useDistanceColorCoding&quot;&gt;</span>Render in color or black and white.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The bitmap of the rendered Mandelbrot set.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Bitmap <span class=\"hljs-title\">GetBitmap</span>(<span class=\"hljs-params\">\n            <span class=\"hljs-built_in\">int</span> bitmapWidth = <span class=\"hljs-number\">800</span>,\n            <span class=\"hljs-built_in\">int</span> bitmapHeight = <span class=\"hljs-number\">600</span>,\n            <span class=\"hljs-built_in\">double</span> figureCenterX = <span class=\"hljs-number\">-0.6</span>,\n            <span class=\"hljs-built_in\">double</span> figureCenterY = <span class=\"hljs-number\">0</span>,\n            <span class=\"hljs-built_in\">double</span> figureWidth = <span class=\"hljs-number\">3.2</span>,\n            <span class=\"hljs-built_in\">int</span> maxStep = <span class=\"hljs-number\">50</span>,\n            <span class=\"hljs-built_in\">bool</span> useDistanceColorCoding = <span class=\"hljs-literal\">true</span></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (bitmapWidth &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\n                    <span class=\"hljs-keyword\">nameof</span>(bitmapWidth),\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(bitmapWidth)}</span> should be greater than zero&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (bitmapHeight &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\n                    <span class=\"hljs-keyword\">nameof</span>(bitmapHeight),\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(bitmapHeight)}</span> should be greater than zero&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (maxStep &lt;= <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> ArgumentOutOfRangeException(\n                    <span class=\"hljs-keyword\">nameof</span>(maxStep),\n                    <span class=\"hljs-string\">$&quot;<span class=\"hljs-subst\">{<span class=\"hljs-keyword\">nameof</span>(maxStep)}</span> should be greater than zero&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">var</span> bitmap = <span class=\"hljs-keyword\">new</span> Bitmap(bitmapWidth, bitmapHeight);\n            <span class=\"hljs-keyword\">var</span> figureHeight = figureWidth / bitmapWidth * bitmapHeight;\n\n            <span class=\"hljs-comment\">// loop through the bitmap-coordinates</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> bitmapX = <span class=\"hljs-number\">0</span>; bitmapX &lt; bitmapWidth; bitmapX++)\n            {\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> bitmapY = <span class=\"hljs-number\">0</span>; bitmapY &lt; bitmapHeight; bitmapY++)\n                {\n                    <span class=\"hljs-comment\">// determine the figure-coordinates based on the bitmap-coordinates</span>\n                    <span class=\"hljs-keyword\">var</span> figureX = figureCenterX + ((<span class=\"hljs-built_in\">double</span>)bitmapX / bitmapWidth - <span class=\"hljs-number\">0.5</span>) * figureWidth;\n                    <span class=\"hljs-keyword\">var</span> figureY = figureCenterY + ((<span class=\"hljs-built_in\">double</span>)bitmapY / bitmapHeight - <span class=\"hljs-number\">0.5</span>) * figureHeight;\n\n                    <span class=\"hljs-keyword\">var</span> distance = GetDistance(figureX, figureY, maxStep);\n\n                    <span class=\"hljs-comment\">// color the corresponding pixel based on the selected coloring-function</span>\n                    bitmap.SetPixel(\n                        bitmapX,\n                        bitmapY,\n                        useDistanceColorCoding ? ColorCodedColorMap(distance) : BlackAndWhiteColorMap(distance));\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> bitmap;\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Black and white color-coding that ignores the relative distance. The Mandelbrot</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     set is black, everything else is white.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;distance&quot;&gt;</span>Distance until divergence threshold.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The color corresponding to the distance.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Color <span class=\"hljs-title\">BlackAndWhiteColorMap</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> distance</span>)</span> =&gt;\n            distance &gt;= <span class=\"hljs-number\">1</span>\n                ? Color.FromArgb(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n                : Color.FromArgb(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>);\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Color-coding taking the relative distance into account. The Mandelbrot set</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     is black.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;distance&quot;&gt;</span>Distance until divergence threshold.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The color corresponding to the distance.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Color <span class=\"hljs-title\">ColorCodedColorMap</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> distance</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (distance &gt;= <span class=\"hljs-number\">1</span>)\n            {\n                <span class=\"hljs-keyword\">return</span> Color.FromArgb(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n            }\n\n            <span class=\"hljs-comment\">// simplified transformation of HSV to RGB</span>\n            <span class=\"hljs-comment\">// distance determines hue</span>\n            <span class=\"hljs-keyword\">var</span> hue = <span class=\"hljs-number\">360</span> * distance;\n            <span class=\"hljs-built_in\">double</span> saturation = <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-built_in\">double</span> val = <span class=\"hljs-number\">255</span>;\n            <span class=\"hljs-keyword\">var</span> hi = (<span class=\"hljs-built_in\">int</span>)Math.Floor(hue / <span class=\"hljs-number\">60</span>) % <span class=\"hljs-number\">6</span>;\n            <span class=\"hljs-keyword\">var</span> f = hue / <span class=\"hljs-number\">60</span> - Math.Floor(hue / <span class=\"hljs-number\">60</span>);\n\n            <span class=\"hljs-keyword\">var</span> v = (<span class=\"hljs-built_in\">int</span>)val;\n            <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">var</span> q = (<span class=\"hljs-built_in\">int</span>)(val * (<span class=\"hljs-number\">1</span> - f * saturation));\n            <span class=\"hljs-keyword\">var</span> t = (<span class=\"hljs-built_in\">int</span>)(val * (<span class=\"hljs-number\">1</span> - (<span class=\"hljs-number\">1</span> - f) * saturation));\n\n            <span class=\"hljs-keyword\">switch</span> (hi)\n            {\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">0</span>: <span class=\"hljs-keyword\">return</span> Color.FromArgb(<span class=\"hljs-number\">255</span>, v, t, p);\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">return</span> Color.FromArgb(<span class=\"hljs-number\">255</span>, q, v, p);\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>: <span class=\"hljs-keyword\">return</span> Color.FromArgb(<span class=\"hljs-number\">255</span>, p, v, t);\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>: <span class=\"hljs-keyword\">return</span> Color.FromArgb(<span class=\"hljs-number\">255</span>, p, q, v);\n                <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">4</span>: <span class=\"hljs-keyword\">return</span> Color.FromArgb(<span class=\"hljs-number\">255</span>, t, p, v);\n                <span class=\"hljs-literal\">default</span>: <span class=\"hljs-keyword\">return</span> Color.FromArgb(<span class=\"hljs-number\">255</span>, v, p, q);\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Return the relative distance (ratio of steps taken to maxStep) after which the complex number</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     constituted by this x-y-pair diverges. Members of the Mandelbrot set do not</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     diverge so their distance is 1.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;figureX&quot;&gt;</span>The x-coordinate within the figure.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;figureY&quot;&gt;</span>The y-coordinate within the figure.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;maxStep&quot;&gt;</span>Maximum number of steps to check for divergent behavior.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The relative distance as the ratio of steps taken to maxStep.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">double</span> <span class=\"hljs-title\">GetDistance</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">double</span> figureX, <span class=\"hljs-built_in\">double</span> figureY, <span class=\"hljs-built_in\">int</span> maxStep</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> a = figureX;\n            <span class=\"hljs-keyword\">var</span> b = figureY;\n            <span class=\"hljs-keyword\">var</span> currentStep = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> step = <span class=\"hljs-number\">0</span>; step &lt; maxStep; step++)\n            {\n                currentStep = step;\n                <span class=\"hljs-keyword\">var</span> aNew = a * a - b * b + figureX;\n                b = <span class=\"hljs-number\">2</span> * a * b + figureY;\n                a = aNew;\n\n                <span class=\"hljs-comment\">// divergence happens for all complex number with an absolute value</span>\n                <span class=\"hljs-comment\">// greater than 4 (= divergence threshold)</span>\n                <span class=\"hljs-keyword\">if</span> (a * a + b * b &gt; <span class=\"hljs-number\">4</span>)\n                {\n                    <span class=\"hljs-keyword\">break</span>;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">double</span>)currentStep / (maxStep - <span class=\"hljs-number\">1</span>);\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 1
    },
    {
      "name": "algobytewise",
      "email": "algobytewise@gmail.com",
      "commits": 7
    }
  ],
  "explanationUrl": {}
}
