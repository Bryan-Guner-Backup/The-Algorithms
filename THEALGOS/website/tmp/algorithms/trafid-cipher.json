{
  "slug": "trafid-cipher",
  "name": "Trafid Cipher",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/trafid_cipher.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/trafid_cipher.py",
      "code": "<span class=\"hljs-comment\"># https://en.wikipedia.org/wiki/Trifid_cipher</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__encryptPart</span>(<span class=\"hljs-params\">messagePart: <span class=\"hljs-built_in\">str</span>, character2Number: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    one, two, three = <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>\r\n    tmp = []\r\n\r\n    <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> messagePart:\r\n        tmp.append(character2Number[character])\r\n\r\n    <span class=\"hljs-keyword\">for</span> each <span class=\"hljs-keyword\">in</span> tmp:\r\n        one += each[<span class=\"hljs-number\">0</span>]\r\n        two += each[<span class=\"hljs-number\">1</span>]\r\n        three += each[<span class=\"hljs-number\">2</span>]\r\n\r\n    <span class=\"hljs-keyword\">return</span> one + two + three\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__decryptPart</span>(<span class=\"hljs-params\">\r\n    messagePart: <span class=\"hljs-built_in\">str</span>, character2Number: <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]\r\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]:\r\n    tmp, thisPart = <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>\r\n    result = []\r\n\r\n    <span class=\"hljs-keyword\">for</span> character <span class=\"hljs-keyword\">in</span> messagePart:\r\n        thisPart += character2Number[character]\r\n\r\n    <span class=\"hljs-keyword\">for</span> digit <span class=\"hljs-keyword\">in</span> thisPart:\r\n        tmp += digit\r\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(tmp) == <span class=\"hljs-built_in\">len</span>(messagePart):\r\n            result.append(tmp)\r\n            tmp = <span class=\"hljs-string\">&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">return</span> result[<span class=\"hljs-number\">0</span>], result[<span class=\"hljs-number\">1</span>], result[<span class=\"hljs-number\">2</span>]\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__prepare</span>(<span class=\"hljs-params\">\r\n    message: <span class=\"hljs-built_in\">str</span>, alphabet: <span class=\"hljs-built_in\">str</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">tuple</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>], <span class=\"hljs-built_in\">dict</span>[<span class=\"hljs-built_in\">str</span>, <span class=\"hljs-built_in\">str</span>]]:\r\n    <span class=\"hljs-comment\"># Validate message and alphabet, set to upper and remove spaces</span>\r\n    alphabet = alphabet.replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).upper()\r\n    message = message.replace(<span class=\"hljs-string\">&quot; &quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>).upper()\r\n\r\n    <span class=\"hljs-comment\"># Check length and characters</span>\r\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(alphabet) != <span class=\"hljs-number\">27</span>:\r\n        <span class=\"hljs-keyword\">raise</span> KeyError(<span class=\"hljs-string\">&quot;Length of alphabet has to be 27.&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> each <span class=\"hljs-keyword\">in</span> message:\r\n        <span class=\"hljs-keyword\">if</span> each <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> alphabet:\r\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Each message character has to be included in alphabet!&quot;</span>)\r\n\r\n    <span class=\"hljs-comment\"># Generate dictionares</span>\r\n    numbers = (\r\n        <span class=\"hljs-string\">&quot;111&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;112&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;113&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;121&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;122&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;123&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;131&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;132&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;133&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;211&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;212&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;213&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;221&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;222&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;223&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;231&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;232&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;233&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;311&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;312&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;313&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;321&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;322&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;323&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;331&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;332&quot;</span>,\r\n        <span class=\"hljs-string\">&quot;333&quot;</span>,\r\n    )\r\n    character2Number = {}\r\n    number2Character = {}\r\n    <span class=\"hljs-keyword\">for</span> letter, number <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(alphabet, numbers):\r\n        character2Number[letter] = number\r\n        number2Character[number] = letter\r\n\r\n    <span class=\"hljs-keyword\">return</span> message, alphabet, character2Number, number2Character\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">encryptMessage</span>(<span class=\"hljs-params\">\r\n    message: <span class=\"hljs-built_in\">str</span>, alphabet: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ.&quot;</span>, period: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">5</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    message, alphabet, character2Number, number2Character = __prepare(message, alphabet)\r\n    encrypted, encrypted_numeric = <span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-string\">&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(message) + <span class=\"hljs-number\">1</span>, period):\r\n        encrypted_numeric += __encryptPart(message[i : i + period], character2Number)\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(encrypted_numeric), <span class=\"hljs-number\">3</span>):\r\n        encrypted += number2Character[encrypted_numeric[i : i + <span class=\"hljs-number\">3</span>]]\r\n\r\n    <span class=\"hljs-keyword\">return</span> encrypted\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">decryptMessage</span>(<span class=\"hljs-params\">\r\n    message: <span class=\"hljs-built_in\">str</span>, alphabet: <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ.&quot;</span>, period: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">5</span>\r\n</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\r\n    message, alphabet, character2Number, number2Character = __prepare(message, alphabet)\r\n    decrypted_numeric = []\r\n    decrypted = <span class=\"hljs-string\">&quot;&quot;</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(message) + <span class=\"hljs-number\">1</span>, period):\r\n        a, b, c = __decryptPart(message[i : i + period], character2Number)\r\n\r\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">len</span>(a)):\r\n            decrypted_numeric.append(a[j] + b[j] + c[j])\r\n\r\n    <span class=\"hljs-keyword\">for</span> each <span class=\"hljs-keyword\">in</span> decrypted_numeric:\r\n        decrypted += number2Character[each]\r\n\r\n    <span class=\"hljs-keyword\">return</span> decrypted\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    msg = <span class=\"hljs-string\">&quot;DEFEND THE EAST WALL OF THE CASTLE.&quot;</span>\r\n    encrypted = encryptMessage(msg, <span class=\"hljs-string\">&quot;EPSDUCVWYM.ZLKXNBTFGORIJHAQ&quot;</span>)\r\n    decrypted = decryptMessage(encrypted, <span class=\"hljs-string\">&quot;EPSDUCVWYM.ZLKXNBTFGORIJHAQ&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Encrypted: <span class=\"hljs-subst\">{encrypted}</span>\\nDecrypted: <span class=\"hljs-subst\">{decrypted}</span>&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "nowakowsky",
      "email": "47832512+nowakowsky@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
