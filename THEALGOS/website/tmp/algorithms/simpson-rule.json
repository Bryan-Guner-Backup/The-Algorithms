{
  "slug": "simpson-rule",
  "name": "Simpson Rule",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/simpson_rule.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/simpson_rule.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nNumerical integration or quadrature for a smooth function f with known values at x_i\n\nThis method is the classical approach of suming &#x27;Equally Spaced Abscissas&#x27;\n\nmethod 2:\n&quot;Simpson Rule&quot;\n\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">method_2</span>(<span class=\"hljs-params\">boundary, steps</span>):\n    <span class=\"hljs-comment\"># &quot;Simpson Rule&quot;</span>\n    <span class=\"hljs-comment\"># int(f) = delta_x/2 * (b-a)/3*(f1 + 4f2 + 2f_3 + ... + fn)</span>\n    h = (boundary[<span class=\"hljs-number\">1</span>] - boundary[<span class=\"hljs-number\">0</span>]) / steps\n    a = boundary[<span class=\"hljs-number\">0</span>]\n    b = boundary[<span class=\"hljs-number\">1</span>]\n    x_i = make_points(a, b, h)\n    y = <span class=\"hljs-number\">0.0</span>\n    y += (h / <span class=\"hljs-number\">3.0</span>) * f(a)\n    cnt = <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> x_i:\n        y += (h / <span class=\"hljs-number\">3</span>) * (<span class=\"hljs-number\">4</span> - <span class=\"hljs-number\">2</span> * (cnt % <span class=\"hljs-number\">2</span>)) * f(i)\n        cnt += <span class=\"hljs-number\">1</span>\n    y += (h / <span class=\"hljs-number\">3.0</span>) * f(b)\n    <span class=\"hljs-keyword\">return</span> y\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_points</span>(<span class=\"hljs-params\">a, b, h</span>):\n    x = a + h\n    <span class=\"hljs-keyword\">while</span> x &lt; (b - h):\n        <span class=\"hljs-keyword\">yield</span> x\n        x = x + h\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-params\">x</span>):  <span class=\"hljs-comment\"># enter your function here</span>\n    y = (x - <span class=\"hljs-number\">0</span>) * (x - <span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> y\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    a = <span class=\"hljs-number\">0.0</span>  <span class=\"hljs-comment\"># Lower bound of integration</span>\n    b = <span class=\"hljs-number\">1.0</span>  <span class=\"hljs-comment\"># Upper bound of integration</span>\n    steps = <span class=\"hljs-number\">10.0</span>  <span class=\"hljs-comment\"># define number of steps or resolution</span>\n    boundary = [a, b]  <span class=\"hljs-comment\"># define boundary of integration</span>\n    y = method_2(boundary, steps)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;y = <span class=\"hljs-subst\">{y}</span>&quot;</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    },
    "dart": {
      "dir": "maths/simpson_rule.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/maths/simpson_rule.dart",
      "code": "<span class=\"hljs-comment\">/// <span class=\"language-markdown\">Approximate definite integral of f in [a, b] interval</span></span>\n<span class=\"hljs-built_in\">double</span> simpson(<span class=\"hljs-built_in\">double</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-built_in\">double</span>) f, <span class=\"hljs-built_in\">double</span> a, <span class=\"hljs-built_in\">double</span> b, <span class=\"hljs-built_in\">int</span> n) {\n  <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">throw</span> ArgumentError(<span class=\"hljs-string\">&quot;n have to be greater than 0&quot;</span>);\n  }\n\n  <span class=\"hljs-built_in\">double</span> step = (b - a) / n;\n  <span class=\"hljs-built_in\">double</span> sum = f(a) + f(b);\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; n; i++) {\n    <span class=\"hljs-keyword\">if</span> (i % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>) {\n      sum += <span class=\"hljs-number\">2</span> * f(a + i * step);\n    } <span class=\"hljs-keyword\">else</span> {\n      sum += <span class=\"hljs-number\">4</span> * f(a + i * step);\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> (step / <span class=\"hljs-number\">3</span>) * sum;\n}\n\n<span class=\"hljs-built_in\">double</span> f(<span class=\"hljs-built_in\">double</span> x) {\n  <span class=\"hljs-keyword\">return</span> x * x + <span class=\"hljs-number\">2</span> * x + <span class=\"hljs-number\">7</span>;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  <span class=\"hljs-built_in\">print</span>(simpson(f, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>));\n}\n"
    }
  },
  "contributors": [
    {
      "name": "AlexDvorak",
      "email": "opti.jawsome@gmail.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 1
    },
    {
      "name": "PatOnTheBack",
      "email": "51241310+PatOnTheBack@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "GeorgeChambi",
      "email": "charalambous99@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "lane",
      "email": "ltdouthit@email.arizona.edu",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
