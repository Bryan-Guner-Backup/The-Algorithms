{
  "slug": "single-bit-manipulation-operations",
  "name": "Single Bit Manipulation Operations",
  "categories": ["bitmanipulation"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "bit_manipulation/single_bit_manipulation_operations.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/bit_manipulation/single_bit_manipulation_operations.py",
      "code": "<span class=\"hljs-comment\">#!/usr/bin/env python3</span>\n\n<span class=\"hljs-string\">&quot;&quot;&quot;Provide the functionality to manipulate a single bit.&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">set_bit</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span>, position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Set the bit at position to 1.\n\n    Details: perform bitwise or for given number and X.\n    Where X is a number with all the bits – zeroes and bit on given\n    position – one.\n\n    &gt;&gt;&gt; set_bit(0b1101, 1) # 0b1111\n    15\n    &gt;&gt;&gt; set_bit(0b0, 5) # 0b100000\n    32\n    &gt;&gt;&gt; set_bit(0b1111, 1) # 0b1111\n    15\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> number | (<span class=\"hljs-number\">1</span> &lt;&lt; position)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">clear_bit</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span>, position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Set the bit at position to 0.\n\n    Details: perform bitwise and for given number and X.\n    Where X is a number with all the bits – ones and bit on given\n    position – zero.\n\n    &gt;&gt;&gt; clear_bit(0b10010, 1) # 0b10000\n    16\n    &gt;&gt;&gt; clear_bit(0b0, 5) # 0b0\n    0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> number &amp; ~(<span class=\"hljs-number\">1</span> &lt;&lt; position)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">flip_bit</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span>, position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Flip the bit at position.\n\n    Details: perform bitwise xor for given number and X.\n    Where X is a number with all the bits – zeroes and bit on given\n    position – one.\n\n    &gt;&gt;&gt; flip_bit(0b101, 1) # 0b111\n    7\n    &gt;&gt;&gt; flip_bit(0b101, 0) # 0b100\n    4\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> number ^ (<span class=\"hljs-number\">1</span> &lt;&lt; position)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">is_bit_set</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span>, position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Is the bit at position set?\n\n    Details: Shift the bit at position to be the first (smallest) bit.\n    Then check if the first bit is set by anding the shifted number with 1.\n\n    &gt;&gt;&gt; is_bit_set(0b1010, 0)\n    False\n    &gt;&gt;&gt; is_bit_set(0b1010, 1)\n    True\n    &gt;&gt;&gt; is_bit_set(0b1010, 2)\n    False\n    &gt;&gt;&gt; is_bit_set(0b1010, 3)\n    True\n    &gt;&gt;&gt; is_bit_set(0b0, 17)\n    False\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> ((number &gt;&gt; position) &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">1</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_bit</span>(<span class=\"hljs-params\">number: <span class=\"hljs-built_in\">int</span>, position: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Get the bit at the given position\n\n    Details: perform bitwise and for the given number and X,\n    Where X is a number with all the bits – zeroes and bit on given position – one.\n    If the result is not equal to 0, then the bit on the given position is 1, else 0.\n\n    &gt;&gt;&gt; get_bit(0b1010, 0)\n    0\n    &gt;&gt;&gt; get_bit(0b1010, 1)\n    1\n    &gt;&gt;&gt; get_bit(0b1010, 2)\n    0\n    &gt;&gt;&gt; get_bit(0b1010, 3)\n    1\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>((number &amp; (<span class=\"hljs-number\">1</span> &lt;&lt; position)) != <span class=\"hljs-number\">0</span>)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Cere Blanco",
      "email": "743526+cereblanco@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Phil Bazun",
      "email": "Phil9lne@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
