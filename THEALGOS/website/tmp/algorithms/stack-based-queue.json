{
  "slug": "stack-based-queue",
  "name": "Stack-based Queue",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "DataStructures/Queue/StackBasedQueue.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/DataStructures/Queue/StackBasedQueue.cs",
      "code": "ï»¿<span class=\"hljs-keyword\">using</span> System;\n<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.Queue</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Implementation of a stack based queue. FIFO style.</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;remarks&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Enqueue is O(1) and Dequeue is amortized O(1).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/remarks&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;typeparam name=&quot;T&quot;&gt;</span>Generic Type.<span class=\"hljs-doctag\">&lt;/typeparam&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StackBasedQueue</span>&lt;<span class=\"hljs-title\">T</span>&gt;\n    {\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Stack&lt;T&gt; input;\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">readonly</span> Stack&lt;T&gt; output;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;StackBasedQueue{T}&quot; /&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">StackBasedQueue</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            input = <span class=\"hljs-keyword\">new</span> Stack&lt;T&gt;();\n            output = <span class=\"hljs-keyword\">new</span> Stack&lt;T&gt;();\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Clears the queue.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Clear</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            input.Clear();\n            output.Clear();\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns the first item in the queue and removes it from the queue.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if the queue is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Dequeue</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (input.Count == <span class=\"hljs-number\">0</span> &amp;&amp; output.Count == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;The queue contains no items.&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (output.Count == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">while</span> (input.Count &gt; <span class=\"hljs-number\">0</span>)\n                {\n                    <span class=\"hljs-keyword\">var</span> item = input.Pop();\n                    output.Push(item);\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> output.Pop();\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a boolean indicating whether the queue is empty.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsEmpty</span>(<span class=\"hljs-params\"></span>)</span> =&gt; input.Count == <span class=\"hljs-number\">0</span> &amp;&amp; output.Count == <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns a boolean indicating whether the queue is full.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">IsFull</span>(<span class=\"hljs-params\"></span>)</span> =&gt; <span class=\"hljs-literal\">false</span>;\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Returns the first item in the queue and keeps it in the queue.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;exception cref=&quot;InvalidOperationException&quot;&gt;</span>Thrown if the queue is empty.<span class=\"hljs-doctag\">&lt;/exception&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">Peek</span>(<span class=\"hljs-params\"></span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (input.Count == <span class=\"hljs-number\">0</span> &amp;&amp; output.Count == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> InvalidOperationException(<span class=\"hljs-string\">&quot;The queue contains no items.&quot;</span>);\n            }\n\n            <span class=\"hljs-keyword\">if</span> (output.Count == <span class=\"hljs-number\">0</span>)\n            {\n                <span class=\"hljs-keyword\">while</span> (input.Count &gt; <span class=\"hljs-number\">0</span>)\n                {\n                    <span class=\"hljs-keyword\">var</span> item = input.Pop();\n                    output.Push(item);\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> output.Peek();\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Adds an item at the last position in the queue.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Enqueue</span>(<span class=\"hljs-params\">T item</span>)</span> =&gt; input.Push(item);\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Hank McCord",
      "email": "hymccord@gmail.com",
      "commits": 1
    },
    {
      "name": "Andrii Siriak",
      "email": "siryaka@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
