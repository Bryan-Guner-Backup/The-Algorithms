{
  "slug": "eulerian-path-and-circuit-for-undirected-graph",
  "name": "Eulerian Path and Circuit for Undirected Graph",
  "categories": ["graphs"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "graphs/eulerian_path_and_circuit_for_undirected_graph.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/graphs/eulerian_path_and_circuit_for_undirected_graph.py",
      "code": "<span class=\"hljs-comment\"># Eulerian Path is a path in graph that visits every edge exactly once.</span>\n<span class=\"hljs-comment\"># Eulerian Circuit is an Eulerian Path which starts and ends on the same</span>\n<span class=\"hljs-comment\"># vertex.</span>\n<span class=\"hljs-comment\"># time complexity is O(V+E)</span>\n<span class=\"hljs-comment\"># space complexity is O(VE)</span>\n\n\n<span class=\"hljs-comment\"># using dfs for finding eulerian path traversal</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dfs</span>(<span class=\"hljs-params\">u, graph, visited_edge, path=[]</span>):\n    path = path + [u]\n    <span class=\"hljs-keyword\">for</span> v <span class=\"hljs-keyword\">in</span> graph[u]:\n        <span class=\"hljs-keyword\">if</span> visited_edge[u][v] <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">False</span>:\n            visited_edge[u][v], visited_edge[v][u] = <span class=\"hljs-literal\">True</span>, <span class=\"hljs-literal\">True</span>\n            path = dfs(v, graph, visited_edge, path)\n    <span class=\"hljs-keyword\">return</span> path\n\n\n<span class=\"hljs-comment\"># for checking in graph has euler path or circuit</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_circuit_or_path</span>(<span class=\"hljs-params\">graph, max_node</span>):\n    odd_degree_nodes = <span class=\"hljs-number\">0</span>\n    odd_node = -<span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(max_node):\n        <span class=\"hljs-keyword\">if</span> i <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">in</span> graph.keys():\n            <span class=\"hljs-keyword\">continue</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(graph[i]) % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">1</span>:\n            odd_degree_nodes += <span class=\"hljs-number\">1</span>\n            odd_node = i\n    <span class=\"hljs-keyword\">if</span> odd_degree_nodes == <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>, odd_node\n    <span class=\"hljs-keyword\">if</span> odd_degree_nodes == <span class=\"hljs-number\">2</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>, odd_node\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>, odd_node\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">check_euler</span>(<span class=\"hljs-params\">graph, max_node</span>):\n    visited_edge = [[<span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(max_node + <span class=\"hljs-number\">1</span>)] <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(max_node + <span class=\"hljs-number\">1</span>)]\n    check, odd_node = check_circuit_or_path(graph, max_node)\n    <span class=\"hljs-keyword\">if</span> check == <span class=\"hljs-number\">3</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;graph is not Eulerian&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;no path&quot;</span>)\n        <span class=\"hljs-keyword\">return</span>\n    start_node = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> check == <span class=\"hljs-number\">2</span>:\n        start_node = odd_node\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;graph has a Euler path&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> check == <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;graph has a Euler cycle&quot;</span>)\n    path = dfs(start_node, graph, visited_edge)\n    <span class=\"hljs-built_in\">print</span>(path)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    G1 = {<span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">4</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">5</span>: [<span class=\"hljs-number\">4</span>]}\n    G2 = {<span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">4</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">5</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>]}\n    G3 = {<span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">4</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">5</span>: [<span class=\"hljs-number\">4</span>]}\n    G4 = {<span class=\"hljs-number\">1</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">2</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">3</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]}\n    G5 = {\n        <span class=\"hljs-number\">1</span>: [],\n        <span class=\"hljs-number\">2</span>: []\n        <span class=\"hljs-comment\"># all degree is zero</span>\n    }\n    max_node = <span class=\"hljs-number\">10</span>\n    check_euler(G1, max_node)\n    check_euler(G2, max_node)\n    check_euler(G3, max_node)\n    check_euler(G4, max_node)\n    check_euler(G5, max_node)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Reshad Hasan",
      "email": "reshadhasan555@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
