{
  "slug": "code",
  "name": "Code",
  "categories": ["particleswarmoptimization", "polynomialminimization"],
  "body": {},
  "implementations": {
    "matlab-octave": {
      "dir": "algorithms/Particle_Swarm_Optimization/Polynomial Minimization/code.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/Particle_Swarm_Optimization/Polynomial Minimization/code.m",
      "code": "clc;\r\nclear;\r\nclose all;\r\n\r\n<span class=\"hljs-comment\">%% Problem Definition</span>\r\n\r\n\r\nCostFunction=@(x) Parabola(x);   <span class=\"hljs-comment\">% Cost Function</span>\r\n\r\nnVar = <span class=\"hljs-number\">5</span>;           <span class=\"hljs-comment\">% 5 dimensional-Number of unknown (Decision Variables)</span>\r\n\r\nVarSize = [<span class=\"hljs-number\">1</span> nVar]; <span class=\"hljs-comment\">% Matrix size of Decision Variables</span>\r\n\r\nVarMin = <span class=\"hljs-number\">-10</span>;       <span class=\"hljs-comment\">% Lower bound of Decision Variables</span>\r\nVarMax =  <span class=\"hljs-number\">10</span>;       <span class=\"hljs-comment\">% Upper bound of Decision Variables</span>\r\n\r\n\r\n<span class=\"hljs-comment\">%% Parameters of PSO</span>\r\n\r\nMaxIt = <span class=\"hljs-number\">1000</span>; <span class=\"hljs-comment\">% Maximum Numbers of Iterations</span>\r\n\r\nnPop = <span class=\"hljs-number\">50</span>;   <span class=\"hljs-comment\">% Population size (Swarm Size)</span>\r\n\r\nw = <span class=\"hljs-number\">1</span>;        <span class=\"hljs-comment\">% Inertia Coefficient</span>\r\nwdamp=<span class=\"hljs-number\">0.99</span>;     <span class=\"hljs-comment\">% Damping Ratio of intertia weight</span>\r\nc1 = <span class=\"hljs-number\">2</span>;       <span class=\"hljs-comment\">% Personal Acceleration Coefficient</span>\r\nc2  = <span class=\"hljs-number\">2</span>;      <span class=\"hljs-comment\">% Social Acceleration Coefficient</span>\r\n\r\n\r\n\r\n<span class=\"hljs-comment\">%% Initialization</span>\r\n\r\n<span class=\"hljs-comment\">% The Particle Template</span>\r\nempty_particle.Position = [];      <span class=\"hljs-comment\">% position of particle</span>\r\nempty_particle.Velocity = [];      <span class=\"hljs-comment\">% velocity of particle</span>\r\nempty_particle.Cost = [];          <span class=\"hljs-comment\">% own measurement of particle(cost value)</span>\r\nempty_particle.Best.Position = []; <span class=\"hljs-comment\">% personal best with its position</span>\r\nempty_particle.Best.Cost = [];     <span class=\"hljs-comment\">% personal best with its cost value</span>\r\n\r\n\r\nparticle = <span class=\"hljs-built_in\">repmat</span>(empty_particle, nPop,<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">% Create random Population Array</span>\r\n\r\n<span class=\"hljs-comment\">%Initialization Global best</span>\r\nGlobalBest.Cost=<span class=\"hljs-built_in\">inf</span>; <span class=\"hljs-comment\">% for minization fun. its infinity before 1st iteration</span>\r\n\r\n<span class=\"hljs-comment\">% Initialize Population Members</span>\r\n\r\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-number\">1</span>:nPop\r\n    \r\n    <span class=\"hljs-comment\">% Generate Random Solutions</span>\r\n    particle(<span class=\"hljs-built_in\">i</span>).Position=unifrnd(VarMin,VarMax,VarSize);\r\n    \r\n    <span class=\"hljs-comment\">% Initialize Velocity</span>\r\n    particle(<span class=\"hljs-built_in\">i</span>).Velocity=<span class=\"hljs-built_in\">zeros</span>(VarSize); <span class=\"hljs-comment\">%matrix with all o of varsize</span>\r\n    \r\n     <span class=\"hljs-comment\">% Evaluation at above particle i position</span>\r\n    particle(<span class=\"hljs-built_in\">i</span>).Cost=CostFunction(particle(<span class=\"hljs-built_in\">i</span>).Position);\r\n    \r\n    <span class=\"hljs-comment\">% Update Personal Best value</span>\r\n    particle(<span class=\"hljs-built_in\">i</span>).Best.Position=particle(<span class=\"hljs-built_in\">i</span>).Position;\r\n    particle(<span class=\"hljs-built_in\">i</span>).Best.Cost=particle(<span class=\"hljs-built_in\">i</span>).Cost;\r\n    \r\n    <span class=\"hljs-comment\">% Update Global Best</span>\r\n    <span class=\"hljs-keyword\">if</span> particle(<span class=\"hljs-built_in\">i</span>).Best.Cost&lt;GlobalBest.Cost\r\n        \r\n        GlobalBest=particle(<span class=\"hljs-built_in\">i</span>).Best;\r\n        \r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-keyword\">end</span>\r\n    <span class=\"hljs-comment\">% Array to hold best cost value on each iteration</span>\r\n    BestCost=<span class=\"hljs-built_in\">zeros</span>(MaxIt,<span class=\"hljs-number\">1</span>);\r\n    \r\n    <span class=\"hljs-comment\">%% Main Loop of PSO</span>\r\n    <span class=\"hljs-keyword\">for</span> it=<span class=\"hljs-number\">1</span>:MaxIt <span class=\"hljs-comment\">% first iter to last iteration</span>\r\n    \r\n      <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-number\">1</span>:nPop <span class=\"hljs-comment\">% for every particle thisloop is required</span>\r\n        \r\n        <span class=\"hljs-comment\">% Update Velocity    %element wise multiplication is there</span>\r\n        particle(<span class=\"hljs-built_in\">i</span>).Velocity = w*particle(<span class=\"hljs-built_in\">i</span>).Velocity ...\r\n            +c1*<span class=\"hljs-built_in\">rand</span>(VarSize).*(particle(<span class=\"hljs-built_in\">i</span>).Best.Position-particle(<span class=\"hljs-built_in\">i</span>).Position) ...\r\n            +c2*<span class=\"hljs-built_in\">rand</span>(VarSize).*(GlobalBest.Position-particle(<span class=\"hljs-built_in\">i</span>).Position);\r\n        \r\n         <span class=\"hljs-comment\">%Update Position</span>\r\n        particle(<span class=\"hljs-built_in\">i</span>).Position = particle(<span class=\"hljs-built_in\">i</span>).Position + particle(<span class=\"hljs-built_in\">i</span>).Velocity;\r\n        \r\n         <span class=\"hljs-comment\">% Evaluation</span>\r\n        particle(<span class=\"hljs-built_in\">i</span>).Cost = CostFunction(particle(<span class=\"hljs-built_in\">i</span>).Position);\r\n        \r\n        <span class=\"hljs-comment\">% Update Personal Best</span>\r\n        <span class=\"hljs-keyword\">if</span> particle(<span class=\"hljs-built_in\">i</span>).Cost&lt;particle(<span class=\"hljs-built_in\">i</span>).Best.Cost\r\n            \r\n            particle(<span class=\"hljs-built_in\">i</span>).Best.Position=particle(<span class=\"hljs-built_in\">i</span>).Position; <span class=\"hljs-comment\">%best updated with current</span>\r\n            particle(<span class=\"hljs-built_in\">i</span>).Best.Cost=particle(<span class=\"hljs-built_in\">i</span>).Cost;\r\n            \r\n            <span class=\"hljs-comment\">% Update Global Best</span>\r\n            <span class=\"hljs-keyword\">if</span> particle(<span class=\"hljs-built_in\">i</span>).Best.Cost&lt;GlobalBest.Cost\r\n                \r\n                GlobalBest=particle(<span class=\"hljs-built_in\">i</span>).Best;\r\n                \r\n            <span class=\"hljs-keyword\">end</span>\r\n            \r\n            \r\n        <span class=\"hljs-keyword\">end</span>\r\n        \r\n      <span class=\"hljs-keyword\">end</span>\r\n       <span class=\"hljs-comment\">% store the Best cost value</span>\r\n    BestCost(it)=GlobalBest.Cost;\r\n     \r\n    <span class=\"hljs-comment\">% Display iteration info.</span>\r\n    <span class=\"hljs-built_in\">disp</span>([<span class=\"hljs-string\">&#x27;Iteration &#x27;</span> num2str(it) <span class=\"hljs-string\">&#x27;: Best Cost = &#x27;</span> num2str(BestCost(it))]);\r\n    \r\n     <span class=\"hljs-comment\">%Damping Intertia coefficient</span>\r\n    w=w*wdamp; \r\n    <span class=\"hljs-keyword\">end</span>\r\n    \r\n    <span class=\"hljs-comment\">%% Results</span>\r\n    \r\n    <span class=\"hljs-comment\">% Graph converges to origin</span>\r\n<span class=\"hljs-built_in\">figure</span>;\r\n<span class=\"hljs-comment\">%plot(BestCost,&#x27;LineWidth&#x27;,2); % for normal graph</span>\r\nsemilogy(BestCost,<span class=\"hljs-string\">&#x27;LineWidth&#x27;</span>,<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">%for exponential graph</span>\r\nxlabel(<span class=\"hljs-string\">&#x27;Iteration&#x27;</span>);\r\nylabel(<span class=\"hljs-string\">&#x27;Best Cost&#x27;</span>);\r\ngrid on;\r\n\r\n        \r\n        \r\n        \r\n        \r\n        "
    }
  },
  "contributors": [
    {
      "name": "puneet-pr-arya",
      "email": "71585635+puneet-pr-arya@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
