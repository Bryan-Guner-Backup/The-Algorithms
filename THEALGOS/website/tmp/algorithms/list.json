{
  "slug": "list",
  "name": "List",
  "categories": ["datastructures", "list"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/list/list.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/list/list.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;list.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdarg.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stddef.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> L List_T</span>\n\n<span class=\"hljs-comment\">/* Initial list */</span>\nL <span class=\"hljs-title function_\">List_init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>\n{\n    L <span class=\"hljs-built_in\">list</span>;\n    <span class=\"hljs-built_in\">list</span> = (L)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(L));\n    <span class=\"hljs-built_in\">list</span>-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\n}\n\n<span class=\"hljs-comment\">/* Push an element into top of the list */</span>\nL <span class=\"hljs-title function_\">List_push</span><span class=\"hljs-params\">(L <span class=\"hljs-built_in\">list</span>, <span class=\"hljs-type\">void</span> *val)</span>\n{\n    L new_elem = (L)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(L));\n    new_elem-&gt;val = val;\n    new_elem-&gt;next = <span class=\"hljs-built_in\">list</span>;\n    <span class=\"hljs-keyword\">return</span> new_elem;\n}\n\n<span class=\"hljs-comment\">/* Length of list */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">List_length</span><span class=\"hljs-params\">(L <span class=\"hljs-built_in\">list</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> n;\n    <span class=\"hljs-keyword\">for</span> (n = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">list</span>; <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-built_in\">list</span>-&gt;next) n++;\n    <span class=\"hljs-keyword\">return</span> n;\n}\n\n<span class=\"hljs-comment\">/* Convert list to array */</span>\n<span class=\"hljs-type\">void</span> **<span class=\"hljs-title function_\">List_toArray</span><span class=\"hljs-params\">(L <span class=\"hljs-built_in\">list</span>)</span>\n{\n    <span class=\"hljs-type\">int</span> i, n = List_length(<span class=\"hljs-built_in\">list</span>);\n    <span class=\"hljs-type\">void</span> **<span class=\"hljs-built_in\">array</span> = (<span class=\"hljs-type\">void</span> **)<span class=\"hljs-built_in\">malloc</span>((n + <span class=\"hljs-number\">1</span>) * <span class=\"hljs-keyword\">sizeof</span>(*<span class=\"hljs-built_in\">array</span>));\n\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">array</span>[i] = <span class=\"hljs-built_in\">list</span>-&gt;val;\n        <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-built_in\">list</span>-&gt;next;\n    }\n    <span class=\"hljs-built_in\">array</span>[i] = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>;\n}\n\n<span class=\"hljs-comment\">/* Create and return a list */</span>\nL <span class=\"hljs-title function_\">List_list</span><span class=\"hljs-params\">(L <span class=\"hljs-built_in\">list</span>, <span class=\"hljs-type\">void</span> *val, ...)</span>\n{\n    va_list ap;\n    L *p = &amp;<span class=\"hljs-built_in\">list</span>;\n\n    va_start(ap, val);\n    <span class=\"hljs-keyword\">for</span> (; val; val = va_arg(ap, <span class=\"hljs-type\">void</span> *))\n    {\n        *p = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(L));\n        (*p)-&gt;val = val;\n        p = &amp;(*p)-&gt;next;\n    }\n    *p = <span class=\"hljs-literal\">NULL</span>;\n    va_end(ap);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\n}\n\n<span class=\"hljs-comment\">/* Append 2 lists together */</span>\nL <span class=\"hljs-title function_\">List_append</span><span class=\"hljs-params\">(L <span class=\"hljs-built_in\">list</span>, L tail)</span>\n{\n    L *p = &amp;<span class=\"hljs-built_in\">list</span>;\n    <span class=\"hljs-keyword\">while</span> ((*p)-&gt;next)\n    {\n        p = &amp;(*p)-&gt;next;\n    }\n\n    *p = tail;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Anup Kumar Panwar",
      "email": "mylnext@gmail.com",
      "commits": 1
    },
    {
      "name": "Santo",
      "email": "sancn@live.com",
      "commits": 2
    },
    {
      "name": "hai dang",
      "email": "haihoangdang91@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
