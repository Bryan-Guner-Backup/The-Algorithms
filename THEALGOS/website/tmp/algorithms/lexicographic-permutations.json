{
  "slug": "lexicographic-permutations",
  "name": "Lexicographic Permutations",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/lexicographic_permutations.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/lexicographic_permutations.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *left, <span class=\"hljs-type\">char</span> *right)</span>\n{\n    <span class=\"hljs-type\">char</span> temp = *left;\n    *left = *right;\n    *right = temp;\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span> *a, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">void</span> *b)</span> { <span class=\"hljs-keyword\">return</span> (*(<span class=\"hljs-type\">char</span> *)a - *(<span class=\"hljs-type\">char</span> *)b); }\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintSortedPermutations</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *str)</span>\n{\n    <span class=\"hljs-type\">int</span> strSize = <span class=\"hljs-built_in\">strlen</span>(str);\n    qsort(str, strSize, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>), compare);\n\n    <span class=\"hljs-type\">int</span> largerPermFound = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">do</span>\n    {\n        <span class=\"hljs-comment\">// 1. Print permutation</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s\\n&quot;</span>, str);\n        <span class=\"hljs-comment\">// 2. Find rightmost char that is smaller than char to its right</span>\n        <span class=\"hljs-type\">int</span> i;\n        <span class=\"hljs-keyword\">for</span> (i = strSize - <span class=\"hljs-number\">2</span>; i &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; str[i] &gt;= str[i + <span class=\"hljs-number\">1</span>]; --i)\n        {\n        }\n\n        <span class=\"hljs-comment\">// if we couldn&#x27;t find one, we&#x27;re finished, else we can swap</span>\n        <span class=\"hljs-keyword\">if</span> (i &gt;= <span class=\"hljs-number\">0</span>)\n        {\n            <span class=\"hljs-comment\">// 3. find character at index j such that str[j] = min(str[k]) &amp;&amp;</span>\n            <span class=\"hljs-comment\">// str[k] &gt; str[i] for all k &gt; i</span>\n            <span class=\"hljs-type\">int</span> j = i + <span class=\"hljs-number\">1</span>, k;\n            <span class=\"hljs-keyword\">for</span> (k = j; k &lt; strSize &amp;&amp; str[k]; k++)\n            {\n                <span class=\"hljs-keyword\">if</span> (str[k] &gt; str[i] &amp;&amp; str[k] &lt; str[j])\n                    j = k;\n            }\n            <span class=\"hljs-comment\">// 3. Swap chars at i and j</span>\n            swap(&amp;str[i], &amp;str[j]);\n            <span class=\"hljs-comment\">// 4. Sort string to the right of i</span>\n            qsort(str + i + <span class=\"hljs-number\">1</span>, strSize - i - <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>), compare);\n        }\n        <span class=\"hljs-keyword\">else</span>\n            largerPermFound = <span class=\"hljs-number\">0</span>;\n    } <span class=\"hljs-keyword\">while</span> (largerPermFound);\n}\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> n;  <span class=\"hljs-comment\">// size of string</span>\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, &amp;n);\n    <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">0</span> || n &gt;= <span class=\"hljs-number\">1000</span>)\n    {\n        perror(<span class=\"hljs-string\">&quot;Input number out of range: &gt;0 and &lt;1000\\n&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n    }\n    <span class=\"hljs-type\">char</span> *str = (<span class=\"hljs-type\">char</span> *)<span class=\"hljs-built_in\">malloc</span>(n * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>, str);\n    PrintSortedPermutations(str);\n    <span class=\"hljs-built_in\">free</span>(str);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
