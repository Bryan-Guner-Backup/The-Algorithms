{
  "slug": "trie-modern",
  "name": "Trie Modern",
  "categories": ["datastructures"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "data_structures/trie_modern.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/data_structures/trie_modern.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n *\n * @author Anmol3299\n * \\brief A basic implementation of trie class to store only lower-case strings.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>  <span class=\"hljs-comment\">// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;memory&gt;</span>    <span class=\"hljs-comment\">// for std::shared_ptr&lt;&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>    <span class=\"hljs-comment\">// for std::string class</span></span>\n\n<span class=\"hljs-comment\">/**\n * A basic implementation of trie class to store only lower-case strings.\n * You can extend the implementation to all the ASCII characters by changing the\n * value of @ ALPHABETS to 128.\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Trie</span> {\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">constexpr</span> <span class=\"hljs-type\">size_t</span> ALPHABETS = <span class=\"hljs-number\">26</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Structure of trie node.\n     * This struct doesn&#x27;t need a constructor as we are initializing using\n     * intializer list which is more efficient than if we had done so with\n     * constructor.\n     */</span>\n    <span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">TrieNode</span> {\n        <span class=\"hljs-comment\">// An array of pointers of size 26 which tells if a character of word is</span>\n        <span class=\"hljs-comment\">// present or not.</span>\n        std::shared_ptr&lt;TrieNode&gt; character[ALPHABETS]{<span class=\"hljs-literal\">nullptr</span>};\n\n        <span class=\"hljs-type\">bool</span> isEndOfWord{<span class=\"hljs-literal\">false</span>};\n    };\n\n    <span class=\"hljs-comment\">/**\n     * Function to check if a node has some children which can form words.\n     * @param node whose character array of pointers need to be checked for\n     * children.\n     * @return `true` if a child is found\n     * @return `false` if a child is not found\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">hasChildren</span><span class=\"hljs-params\">(std::shared_ptr&lt;TrieNode&gt; node)</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>; i &lt; ALPHABETS; i++) {\n            <span class=\"hljs-keyword\">if</span> (node-&gt;character[i]) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * A recursive helper function to remove a word from the trie. First, it\n     * recursively traverses to the location of last character of word in the\n     * trie. However, if the word is not found, the function returns a runtime\n     * error. Upon successfully reaching the last character of word in trie, if\n     * sets the isEndOfWord to false and deletes the node if and only if it has\n     * no children, else it returns the current node.\n     * @param word is the string which needs to be removed from trie.\n     * @param curr is the current node we are at.\n     * @param index is the index of the @word we are at.\n     * @return if current node has childern, it returns @ curr, else it returns\n     * nullptr.\n     * @throw a runtime error in case @ word is not found in the trie.\n     */</span>\n    <span class=\"hljs-function\">std::shared_ptr&lt;TrieNode&gt; <span class=\"hljs-title\">removeWordHelper</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string&amp; word,\n                                               std::shared_ptr&lt;TrieNode&gt; curr,\n                                               <span class=\"hljs-type\">size_t</span> index)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (word.<span class=\"hljs-built_in\">size</span>() == index) {\n            <span class=\"hljs-keyword\">if</span> (curr-&gt;isEndOfWord) {\n                curr-&gt;isEndOfWord = <span class=\"hljs-literal\">false</span>;\n            }\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">hasChildren</span>(curr)) {\n                <span class=\"hljs-keyword\">return</span> curr;\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nullptr</span>;\n        }\n\n        <span class=\"hljs-type\">size_t</span> idx = word[index] - <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n\n        <span class=\"hljs-comment\">// Throw a runtime error in case the user enters a word which is not</span>\n        <span class=\"hljs-comment\">// present in the trie.</span>\n        <span class=\"hljs-keyword\">if</span> (!curr-&gt;character[idx]) {\n            <span class=\"hljs-keyword\">throw</span> std::<span class=\"hljs-built_in\">runtime_error</span>(std::<span class=\"hljs-built_in\">move</span>(std::<span class=\"hljs-built_in\">string</span>(<span class=\"hljs-string\">&quot;Word not found.&quot;</span>)));\n        }\n\n        curr-&gt;character[idx] =\n            <span class=\"hljs-built_in\">removeWordHelper</span>(word, curr-&gt;character[idx], index + <span class=\"hljs-number\">1</span>);\n\n        <span class=\"hljs-comment\">// This if condition checks if the node has some childern.</span>\n        <span class=\"hljs-comment\">// The 1st if check, i.e. (curr-&gt;character[idx]) is checked specifically</span>\n        <span class=\"hljs-comment\">// because if the older string is a prefix of some other string, then,</span>\n        <span class=\"hljs-comment\">// there would be no need to check all 26 characters. Example- str1 =</span>\n        <span class=\"hljs-comment\">// abbey, str2 = abbex and we want to delete string &quot;abbey&quot;, then in</span>\n        <span class=\"hljs-comment\">// this case, there would be no need to check all characters for the</span>\n        <span class=\"hljs-comment\">// chars a,b,b.</span>\n        <span class=\"hljs-keyword\">if</span> (curr-&gt;character[idx] || <span class=\"hljs-built_in\">hasChildren</span>(curr)) {\n            <span class=\"hljs-keyword\">return</span> curr;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nullptr</span>;\n    }\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">/// constructor to initialise the root of the trie.</span>\n    <span class=\"hljs-built_in\">Trie</span>() : <span class=\"hljs-built_in\">m_root</span>(std::<span class=\"hljs-built_in\">make_shared</span>&lt;TrieNode&gt;()) {}\n\n    <span class=\"hljs-comment\">/**\n     * Insert a word into the trie.\n     * @param word which needs to be inserted into the string.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string&amp; word)</span> </span>{\n        <span class=\"hljs-keyword\">auto</span> curr = m_root;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> ch : word) {\n            <span class=\"hljs-type\">size_t</span> index = ch - <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n\n            <span class=\"hljs-comment\">// if a node for current word is not already present in trie, create</span>\n            <span class=\"hljs-comment\">// a new node for it.</span>\n            <span class=\"hljs-keyword\">if</span> (!curr-&gt;character[index]) {\n                curr-&gt;character[index] = std::<span class=\"hljs-built_in\">make_shared</span>&lt;TrieNode&gt;();\n            }\n\n            curr = curr-&gt;character[index];\n        }\n        curr-&gt;isEndOfWord = <span class=\"hljs-literal\">true</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * Search if a word is present in trie or not.\n     * @param word which is needed to be searched in the trie.\n     * @return True if the word is found in trie and isEndOfWord is set to true.\n     * @return False if word is not found in trie or isEndOfWord is set to\n     * false.\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string&amp; word)</span> </span>{\n        <span class=\"hljs-keyword\">auto</span> curr = m_root;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">char</span> ch : word) {\n            <span class=\"hljs-type\">size_t</span> index = ch - <span class=\"hljs-string\">&#x27;a&#x27;</span>;\n\n            <span class=\"hljs-comment\">// if any node for a character is not found, then return that the</span>\n            <span class=\"hljs-comment\">// word cannot be formed.</span>\n            <span class=\"hljs-keyword\">if</span> (!curr-&gt;character[index]) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            curr = curr-&gt;character[index];\n        }\n        <span class=\"hljs-keyword\">return</span> curr-&gt;isEndOfWord;\n    }\n\n    <span class=\"hljs-comment\">// Function to remove the word which calls the helper function.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">removeWord</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string&amp; word)</span> </span>{\n        m_root = <span class=\"hljs-built_in\">removeWordHelper</span>(word, m_root, <span class=\"hljs-number\">0</span>);\n    }\n\n <span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-comment\">// data member to store the root of the trie.</span>\n    std::shared_ptr&lt;TrieNode&gt; m_root;\n};\n\n<span class=\"hljs-comment\">/**\n * Main function\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    Trie trie;\n    trie.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-string\">&quot;hel&quot;</span>);\n    trie.<span class=\"hljs-built_in\">insert</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>);\n    trie.<span class=\"hljs-built_in\">removeWord</span>(<span class=\"hljs-string\">&quot;hel&quot;</span>);\n    std::cout &lt;&lt; trie.<span class=\"hljs-built_in\">search</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>) &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Anmol Mittal",
      "email": "mittalanmol22@gmail.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
