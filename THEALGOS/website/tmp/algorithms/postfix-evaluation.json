{
  "slug": "postfix-evaluation",
  "name": "Postfix Evaluation",
  "categories": ["datastructures", "stacks"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/stacks/postfix_evaluation.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/stacks/postfix_evaluation.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nOutput:\n\nEnter a Postfix Equation (space separated) = 5 6 9 * +\n Symbol  |    Action    | Stack\n-----------------------------------\n       5 | push(5)      | 5\n       6 | push(6)      | 5,6\n       9 | push(9)      | 5,6,9\n         | pop(9)       | 5,6\n         | pop(6)       | 5\n       * | push(6*9)    | 5,54\n         | pop(54)      | 5\n         | pop(5)       |\n       + | push(5+54)   | 59\n\n        Result =  59\n&quot;&quot;&quot;</span>\n\n<span class=\"hljs-keyword\">import</span> operator <span class=\"hljs-keyword\">as</span> op\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">Solve</span>(<span class=\"hljs-params\">Postfix</span>):\n    Stack = []\n    Div = <span class=\"hljs-keyword\">lambda</span> x, y: <span class=\"hljs-built_in\">int</span>(x / y)  <span class=\"hljs-comment\"># noqa: E731 integer division operation</span>\n    Opr = {\n        <span class=\"hljs-string\">&quot;^&quot;</span>: op.<span class=\"hljs-built_in\">pow</span>,\n        <span class=\"hljs-string\">&quot;*&quot;</span>: op.mul,\n        <span class=\"hljs-string\">&quot;/&quot;</span>: Div,\n        <span class=\"hljs-string\">&quot;+&quot;</span>: op.add,\n        <span class=\"hljs-string\">&quot;-&quot;</span>: op.sub,\n    }  <span class=\"hljs-comment\"># operators &amp; their respective operation</span>\n\n    <span class=\"hljs-comment\"># print table header</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Symbol&quot;</span>.center(<span class=\"hljs-number\">8</span>), <span class=\"hljs-string\">&quot;Action&quot;</span>.center(<span class=\"hljs-number\">12</span>), <span class=\"hljs-string\">&quot;Stack&quot;</span>, sep=<span class=\"hljs-string\">&quot; | &quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;-&quot;</span> * (<span class=\"hljs-number\">30</span> + <span class=\"hljs-built_in\">len</span>(Postfix)))\n\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> Postfix:\n        <span class=\"hljs-keyword\">if</span> x.isdigit():  <span class=\"hljs-comment\"># if x in digit</span>\n            Stack.append(x)  <span class=\"hljs-comment\"># append x to stack</span>\n            <span class=\"hljs-comment\"># output in tabular format</span>\n            <span class=\"hljs-built_in\">print</span>(x.rjust(<span class=\"hljs-number\">8</span>), (<span class=\"hljs-string\">&quot;push(&quot;</span> + x + <span class=\"hljs-string\">&quot;)&quot;</span>).ljust(<span class=\"hljs-number\">12</span>), <span class=\"hljs-string\">&quot;,&quot;</span>.join(Stack), sep=<span class=\"hljs-string\">&quot; | &quot;</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            B = Stack.pop()  <span class=\"hljs-comment\"># pop stack</span>\n            <span class=\"hljs-comment\"># output in tabular format</span>\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>.rjust(<span class=\"hljs-number\">8</span>), (<span class=\"hljs-string\">&quot;pop(&quot;</span> + B + <span class=\"hljs-string\">&quot;)&quot;</span>).ljust(<span class=\"hljs-number\">12</span>), <span class=\"hljs-string\">&quot;,&quot;</span>.join(Stack), sep=<span class=\"hljs-string\">&quot; | &quot;</span>)\n\n            A = Stack.pop()  <span class=\"hljs-comment\"># pop stack</span>\n            <span class=\"hljs-comment\"># output in tabular format</span>\n            <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;&quot;</span>.rjust(<span class=\"hljs-number\">8</span>), (<span class=\"hljs-string\">&quot;pop(&quot;</span> + A + <span class=\"hljs-string\">&quot;)&quot;</span>).ljust(<span class=\"hljs-number\">12</span>), <span class=\"hljs-string\">&quot;,&quot;</span>.join(Stack), sep=<span class=\"hljs-string\">&quot; | &quot;</span>)\n\n            Stack.append(\n                <span class=\"hljs-built_in\">str</span>(Opr[x](<span class=\"hljs-built_in\">int</span>(A), <span class=\"hljs-built_in\">int</span>(B)))\n            )  <span class=\"hljs-comment\"># evaluate the 2 values popped from stack &amp; push result to stack</span>\n            <span class=\"hljs-comment\"># output in tabular format</span>\n            <span class=\"hljs-built_in\">print</span>(\n                x.rjust(<span class=\"hljs-number\">8</span>),\n                (<span class=\"hljs-string\">&quot;push(&quot;</span> + A + x + B + <span class=\"hljs-string\">&quot;)&quot;</span>).ljust(<span class=\"hljs-number\">12</span>),\n                <span class=\"hljs-string\">&quot;,&quot;</span>.join(Stack),\n                sep=<span class=\"hljs-string\">&quot; | &quot;</span>,\n            )\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">int</span>(Stack[<span class=\"hljs-number\">0</span>])\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    Postfix = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;\\n\\nEnter a Postfix Equation (space separated) = &quot;</span>).split(<span class=\"hljs-string\">&quot; &quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\n\\tResult = &quot;</span>, Solve(Postfix))\n"
    },
    "c-plus-plus": {
      "dir": "others/postfix_evaluation.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/others/postfix_evaluation.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Evaluation of [Postfix Expression](https://en.wikipedia.org/wiki/Reverse_Polish_notation)\n * @author [Darshana Sarma](https://github.com/Darshana-Sarma)\n * @details\n * Create a stack to store operands (or values).\n * Scan the given expression and do following for every scanned element.\n * If the element is a number, push it into the stack\n * If the element is a operator, pop operands for the operator from stack.\n * Evaluate the operator and push the result back to the stack\n * When the expression is ended, the number in the stack is the final answer\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">// for all_of</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;array&gt;</span>      <span class=\"hljs-comment\">// for std::array</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">// for io operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>     <span class=\"hljs-comment\">// for stof</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace others\n * @brief Other algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> others {\n<span class=\"hljs-comment\">/**\n * @namespace postfix_expression\n * @brief Functions for Postfix Expression algorithm\n */</span>\n<span class=\"hljs-keyword\">namespace</span> postfix_expression {\n <span class=\"hljs-comment\">/**\n * @brief Creates an array to be used as stack for storing values\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Stack</span> {\n <span class=\"hljs-keyword\">public</span>:\n    std::array&lt;<span class=\"hljs-type\">float</span>, 20&gt; stack{}; <span class=\"hljs-comment\">///&lt; Array which will be used to store numbers in the input</span>\n    <span class=\"hljs-type\">int</span> stackTop = <span class=\"hljs-number\">-1</span>;            <span class=\"hljs-comment\">///&lt; Represents the index of the last value added to array. -1 means array is empty</span>\n};\n\n<span class=\"hljs-comment\">/**\n * @brief Pushing operand, also called the number in the array to the stack\n * @param operand float value from the input array or evaluation\n * @param stack stack containing numbers\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> operand, Stack *stack)</span> </span>{\n    stack-&gt;stackTop++;\n    stack-&gt;stack[stack-&gt;stackTop] = operand;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Popping operand, also called the number from the stack\n * @param stack stack containing numbers\n * @returns operand float on top of stack\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">(Stack *stack)</span> </span>{\n    <span class=\"hljs-type\">float</span> operand = stack-&gt;stack[stack-&gt;stackTop];\n    stack-&gt;stackTop--;\n    <span class=\"hljs-keyword\">return</span> operand;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Checks if scanned string is a number\n * @param s scanned string\n * @returns bool boolean value if string is number\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_number</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;s)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> !s.<span class=\"hljs-built_in\">empty</span>() &amp;&amp; std::<span class=\"hljs-built_in\">all_of</span>(s.<span class=\"hljs-built_in\">begin</span>(), s.<span class=\"hljs-built_in\">end</span>(), ::isdigit);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Evaluate answer using given last two operands from and operation\n * @param a second last added operand which will be used for evaluation\n * @param b last added operand which will be used for evaluation\n * @param operation to be performed with respective floats\n * @param stack containing numbers\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">evaluate</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> a, <span class=\"hljs-type\">float</span> b, <span class=\"hljs-keyword\">const</span> std::string &amp;operation, Stack *stack)</span> </span>{\n    <span class=\"hljs-type\">float</span> c = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> *op = operation.<span class=\"hljs-built_in\">c_str</span>();\n    <span class=\"hljs-built_in\">switch</span> (*op) {\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;+&#x27;</span>:\n            c = a + b; <span class=\"hljs-comment\">// Addition of numbers</span>\n            others::postfix_expression::<span class=\"hljs-built_in\">push</span>(c, stack);\n            <span class=\"hljs-keyword\">break</span>;\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;-&#x27;</span>:\n            c = a - b; <span class=\"hljs-comment\">// Subtraction of numbers</span>\n            others::postfix_expression::<span class=\"hljs-built_in\">push</span>(c, stack);\n            <span class=\"hljs-keyword\">break</span>;\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;*&#x27;</span>:\n            c = a * b; <span class=\"hljs-comment\">// Multiplication of numbers</span>\n            others::postfix_expression::<span class=\"hljs-built_in\">push</span>(c, stack);\n            <span class=\"hljs-keyword\">break</span>;\n\n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>:\n            c = a / b; <span class=\"hljs-comment\">// Division of numbers</span>\n            others::postfix_expression::<span class=\"hljs-built_in\">push</span>(c, stack);\n            <span class=\"hljs-keyword\">break</span>;\n\n        <span class=\"hljs-keyword\">default</span>:\n            std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Operator not defined\\n&quot;</span>;\n            <span class=\"hljs-keyword\">break</span>;\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Postfix Evaluation algorithm to compute the value from given input\n * array\n * @tparam N number of array size\n * @param input Array of characters consisting of numbers and operations\n * @returns stack[stackTop] returns the top value from the stack\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;std::<span class=\"hljs-type\">size_t</span> N&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">float</span> <span class=\"hljs-title\">postfix_evaluation</span><span class=\"hljs-params\">(std::array&lt;std::string, N&gt; input)</span> </span>{\n    Stack stack;\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">while</span> (j &lt; N) {\n        std::string scan = input[j];\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">is_number</span>(scan)) {\n            <span class=\"hljs-built_in\">push</span>(std::<span class=\"hljs-built_in\">stof</span>(scan), &amp;stack);\n\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-type\">float</span> op2 = <span class=\"hljs-built_in\">pop</span>(&amp;stack);\n            <span class=\"hljs-type\">float</span> op1 = <span class=\"hljs-built_in\">pop</span>(&amp;stack);\n\n            <span class=\"hljs-built_in\">evaluate</span>(op1, op2, scan, &amp;stack);\n        }\n        j++;\n    }\n\n    std::cout &lt;&lt; stack.stack[stack.stackTop] &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    <span class=\"hljs-keyword\">return</span> stack.stack[stack.stackTop];\n}\n}  <span class=\"hljs-comment\">// namespace postfix_expression</span>\n}  <span class=\"hljs-comment\">// namespace others</span>\n\n\n<span class=\"hljs-comment\">/**\n * @brief Test function 1 with input array\n * {&#x27;2&#x27;, &#x27;3&#x27;, &#x27;1&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;9&#x27;, &#x27;-&#x27;}\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_function_1</span><span class=\"hljs-params\">()</span> </span>{\n    std::array&lt;std::string, 7&gt; input = {<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>, <span class=\"hljs-string\">&quot;+&quot;</span>, <span class=\"hljs-string\">&quot;9&quot;</span>, <span class=\"hljs-string\">&quot;-&quot;</span>};\n\n    <span class=\"hljs-type\">float</span> answer = others::postfix_expression::<span class=\"hljs-built_in\">postfix_evaluation</span>(input);\n\n    <span class=\"hljs-built_in\">assert</span>(answer == <span class=\"hljs-number\">-4</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Test function 2 with input array\n * {&#x27;1&#x27;, &#x27;2&#x27;, &#x27;+&#x27;, &#x27;2&#x27;, &#x27;/&#x27;, &#x27;5&#x27;, &#x27;*&#x27;, &#x27;7&#x27;, &#x27;+&#x27;}\n * @returns none\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test_function_2</span><span class=\"hljs-params\">()</span> </span>{\n    std::array&lt;std::string, 9&gt; input = {<span class=\"hljs-string\">&quot;100&quot;</span>, <span class=\"hljs-string\">&quot;200&quot;</span>, <span class=\"hljs-string\">&quot;+&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>,\n                                        <span class=\"hljs-string\">&quot;5&quot;</span>,   <span class=\"hljs-string\">&quot;*&quot;</span>,   <span class=\"hljs-string\">&quot;7&quot;</span>, <span class=\"hljs-string\">&quot;+&quot;</span>};\n    <span class=\"hljs-type\">float</span> answer = others::postfix_expression::<span class=\"hljs-built_in\">postfix_evaluation</span>(input);\n\n    <span class=\"hljs-built_in\">assert</span>(answer == <span class=\"hljs-number\">757</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test_function_1</span>();\n    <span class=\"hljs-built_in\">test_function_2</span>();\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;\\nTest implementations passed!\\n&quot;</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ashwek Swamy",
      "email": "39827514+ashwek@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Darshana Sarma",
      "email": "69460657+Darshana-Sarma@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
