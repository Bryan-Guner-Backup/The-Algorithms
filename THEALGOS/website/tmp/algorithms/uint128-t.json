{
  "slug": "uint128-t",
  "name": "Uint128 T",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "ciphers/uint128_t.hpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/ciphers/uint128_t.hpp",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n *\n * @details Implementation of 128-bit unsigned integers.\n * @note The implementation can be flagged as not completed. This header is used\n * with enough operations as a part of bigger integer types 256-bit integer.\n * @author [Ashish Daulatabad](https://github.com/AshishYUO)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for `std::reverse` and other operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ostream&gt;</span>    <span class=\"hljs-comment\">/// for `std::cout` overload</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>     <span class=\"hljs-comment\">/// for `std::string`</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;utility&gt;</span>    <span class=\"hljs-comment\">/// for `std::pair` library</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;intrin.h&gt;</span>  <span class=\"hljs-comment\">/// for _BitScanForward64 and __BitScanReverse64 operation</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> CIPHERS_UINT128_T_HPP_</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> CIPHERS_UINT128_T_HPP_</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">uint128_t</span>;\n\n<span class=\"hljs-keyword\">template</span> &lt;&gt;\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">std</span>::is_integral&lt;<span class=\"hljs-type\">uint128_t</span>&gt; : std::true_type {};\n<span class=\"hljs-keyword\">template</span> &lt;&gt;\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">std</span>::is_arithmetic&lt;<span class=\"hljs-type\">uint128_t</span>&gt; : std::true_type {};\n<span class=\"hljs-keyword\">template</span> &lt;&gt;\n<span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">std</span>::is_unsigned&lt;<span class=\"hljs-type\">uint128_t</span>&gt; : std::true_type {};\n\n<span class=\"hljs-comment\">/**\n * @brief Adding two string\n * @details Adds two long integer, only used for printing numbers\n * @param first First integer string\n * @param second Second integer string\n * @returns string denoting the addition of both the strings\n */</span>\n<span class=\"hljs-function\">std::string <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;first, <span class=\"hljs-keyword\">const</span> std::string &amp;second)</span> </span>{\n    std::string third;\n    <span class=\"hljs-type\">int16_t</span> sum = <span class=\"hljs-number\">0</span>, carry = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int32_t</span> i = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">int32_t</span>&gt;(first.<span class=\"hljs-built_in\">size</span>()) - <span class=\"hljs-number\">1</span>,\n                 j = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">int32_t</span>&gt;(second.<span class=\"hljs-built_in\">size</span>()) - <span class=\"hljs-number\">1</span>;\n         i &gt;= <span class=\"hljs-number\">0</span> || j &gt;= <span class=\"hljs-number\">0</span>; --i, --j) {\n        sum = ((i &gt;= <span class=\"hljs-number\">0</span> ? first[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span> : <span class=\"hljs-number\">0</span>) + (j &gt;= <span class=\"hljs-number\">0</span> ? second[j] - <span class=\"hljs-string\">&#x27;0&#x27;</span> : <span class=\"hljs-number\">0</span>) +\n               carry);\n        carry = sum / <span class=\"hljs-number\">10</span>;\n        sum %= <span class=\"hljs-number\">10</span>;\n        third.<span class=\"hljs-built_in\">push_back</span>(sum + <span class=\"hljs-string\">&#x27;0&#x27;</span>);\n    }\n    <span class=\"hljs-keyword\">if</span> (carry) {\n        third.<span class=\"hljs-built_in\">push_back</span>(<span class=\"hljs-string\">&#x27;1&#x27;</span>);\n    }\n    std::<span class=\"hljs-built_in\">reverse</span>(third.<span class=\"hljs-built_in\">begin</span>(), third.<span class=\"hljs-built_in\">end</span>());\n    <span class=\"hljs-keyword\">return</span> third;\n}\n<span class=\"hljs-comment\">/**\n * @class uint128_t\n * @brief class for 128-bit unsigned integer\n */</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">uint128_t</span> {\n    <span class=\"hljs-type\">uint64_t</span> f{}, s{};  <span class=\"hljs-comment\">/// First and second half of 128 bit number</span>\n\n    <span class=\"hljs-comment\">/**\n     * @brief Get integer from given string.\n     * @details Create an integer from a given string\n     * @param str integer string, can be hexadecimal (starting on 0x... or\n     * number)\n     * @returns void\n     */</span>\n    <span class=\"hljs-type\">void</span> __get_integer_from_string(<span class=\"hljs-keyword\">const</span> std::string &amp;str) {\n        <span class=\"hljs-keyword\">this</span>-&gt;f = <span class=\"hljs-keyword\">this</span>-&gt;s = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-built_in\">size</span>() &gt; <span class=\"hljs-number\">1</span> &amp;&amp; str[<span class=\"hljs-number\">1</span>] == <span class=\"hljs-string\">&#x27;x&#x27;</span>) {  <span class=\"hljs-comment\">// if hexadecimal</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> i = <span class=\"hljs-number\">2</span>; i &lt; str.<span class=\"hljs-built_in\">size</span>(); ++i) {\n                *<span class=\"hljs-keyword\">this</span> *= <span class=\"hljs-number\">16LL</span>;\n                <span class=\"hljs-keyword\">if</span> (str[i] &gt;= <span class=\"hljs-string\">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class=\"hljs-string\">&#x27;9&#x27;</span>) {\n                    *<span class=\"hljs-keyword\">this</span> += (str[i] - <span class=\"hljs-string\">&#x27;0&#x27;</span>);\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[i] &gt;= <span class=\"hljs-string\">&#x27;A&#x27;</span> &amp;&amp; str[i] &lt;= <span class=\"hljs-string\">&#x27;F&#x27;</span>) {\n                    *<span class=\"hljs-keyword\">this</span> += (str[i] - <span class=\"hljs-string\">&#x27;A&#x27;</span> + <span class=\"hljs-number\">10</span>);\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[i] &gt;= <span class=\"hljs-string\">&#x27;a&#x27;</span> &amp;&amp; str[i] &lt;= <span class=\"hljs-string\">&#x27;f&#x27;</span>) {\n                    *<span class=\"hljs-keyword\">this</span> += (str[i] - <span class=\"hljs-string\">&#x27;a&#x27;</span> + <span class=\"hljs-number\">10</span>);\n                }\n            }\n        } <span class=\"hljs-keyword\">else</span> {  <span class=\"hljs-comment\">// if decimal</span>\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> &amp;x : str) {\n                *<span class=\"hljs-keyword\">this</span> *= <span class=\"hljs-number\">10LL</span>;\n                *<span class=\"hljs-keyword\">this</span> += (x - <span class=\"hljs-string\">&#x27;0&#x27;</span>);\n            }\n        }\n    }\n\n <span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-built_in\">uint128_t</span>() = <span class=\"hljs-keyword\">default</span>;\n\n    <span class=\"hljs-comment\">/**\n     * @brief Parameterized constructor\n     * @tparam T integral type\n     * @param low lower part 8-bit unisgned integer\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-built_in\">uint128_t</span>(T low) : <span class=\"hljs-built_in\">s</span>(low) {}\n\n    <span class=\"hljs-comment\">/**\n     * @brief Parameterized constructor\n     * @param str Integer string (hexadecimal starting with 0x.. or decimal)\n     */</span>\n    <span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">const</span> std::string &amp;str) {\n        __get_integer_from_string(str);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Parameterized constructor\n     * @param high higher part 64-bit unsigned integer\n     * @param low lower part 64-bit unsigned integer\n     */</span>\n    <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> high, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint64_t</span> low) : <span class=\"hljs-built_in\">f</span>(high), <span class=\"hljs-built_in\">s</span>(low) {}\n\n    <span class=\"hljs-comment\">/**\n     * @brief Copy constructor\n     * @param num 128-bit unsigned integer\n     */</span>\n    <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;num) = <span class=\"hljs-keyword\">default</span>;\n\n    <span class=\"hljs-comment\">/**\n     * @brief Move constructor\n     * @param num 128-bit unsigned integer\n     */</span>\n    <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-type\">uint128_t</span> &amp;&amp;num) <span class=\"hljs-keyword\">noexcept</span> : <span class=\"hljs-built_in\">f</span>(num.f), <span class=\"hljs-built_in\">s</span>(num.s) {}\n\n    <span class=\"hljs-comment\">/**\n     * @brief Destructor for uint128_t\n     */</span>\n    ~<span class=\"hljs-built_in\">uint128_t</span>() = <span class=\"hljs-keyword\">default</span>;\n\n    <span class=\"hljs-comment\">/**\n     * @brief Leading zeroes in binary\n     * @details Calculates leading zeros in 128-bit integer\n     * @returns Integer denoting leading zeroes\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint32_t</span> _lez() {\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> _MSC_VER</span>\n        <span class=\"hljs-keyword\">if</span> (f) {\n            <span class=\"hljs-keyword\">return</span> __builtin_clzll(f);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">64</span> + __builtin_clzll(s);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n        <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">long</span> r = <span class=\"hljs-number\">0</span>;\n        _BitScanForward64(&amp;r, f);\n        <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-number\">64</span>) {\n            <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">long</span> l = <span class=\"hljs-number\">0</span>;\n            _BitScanForward64(&amp;l, s);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">64</span> + l;\n        }\n        <span class=\"hljs-keyword\">return</span> r;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief Trailing zeroes in binary\n     * @details Calculates leading zeros in 128-bit integer\n     * @returns Integer denoting Trailing zeroes\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint32_t</span> _trz() {\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifndef</span> _MSC_VER</span>\n        <span class=\"hljs-keyword\">if</span> (f) {\n            <span class=\"hljs-keyword\">return</span> __builtin_ctzll(f);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">64</span> + __builtin_ctzll(s);\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n        <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">long</span> r = <span class=\"hljs-number\">0</span>;\n        _BitScanReverse64(&amp;r, s);\n        <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-number\">64</span>) {\n            <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">long</span> l = <span class=\"hljs-number\">0</span>;\n            _BitScanReverse64(&amp;l, f);\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">64</span> + l;\n        }\n        <span class=\"hljs-keyword\">return</span> r;\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief casting operator to boolean value\n     * @returns true if value of this is non-zero, else false\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-title\">bool</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> (f || s); }\n\n    <span class=\"hljs-comment\">/**\n     * @brief casting operator to any integer valu\n     * @tparam T any integer type\n     * @returns integer value casted to mentioned type\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-keyword\">explicit</span> <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-built_in\">T</span>() <span class=\"hljs-keyword\">const</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">static_cast</span>&lt;T&gt;(s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief returns lower 64-bit integer part\n     * @returns returns lower 64-bit integer part\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">lower</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> s; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief returns upper 64-bit integer part\n     * @returns returns upper 64-bit integer part\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint64_t</span> <span class=\"hljs-title\">upper</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{ <span class=\"hljs-keyword\">return</span> f; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator = for other types\n     * @tparam T denoting any integer type\n     * @param p an integer to assign it&#x27;s value\n     * @returns this pointer with it&#x27;s value equal to `p`\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-keyword\">const</span> T &amp;p) {\n        <span class=\"hljs-keyword\">this</span>-&gt;s = p;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator = for type string\n     * @param p a string to assign it&#x27;s value to equivalent integer\n     * @returns this pointer with it&#x27;s value equal to `p`\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-keyword\">const</span> std::string &amp;p) {\n        <span class=\"hljs-keyword\">this</span>-&gt;__get_integer_from_string(p);\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator = for uint128_t\n     * @param p an 128-bit integer to assign it&#x27;s value\n     * @returns this pointer with it&#x27;s value equal to `p`\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) = <span class=\"hljs-keyword\">default</span>;\n\n    <span class=\"hljs-comment\">/**\n     * @brief Move assignment operator\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>=(<span class=\"hljs-type\">uint128_t</span> &amp;&amp;p) = <span class=\"hljs-keyword\">default</span>;\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator + for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns addition of this and p, returning uint128_t integer\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(f + (p + s &lt; s), p + s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator + for uint128_t and other integer types.\n     * @param p 128-bit unsigned integer\n     * @returns addition of this and p, returning uint128_t integer\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(f + (p.s + s &lt; s) + p.f, p.s + s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator += for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns addition of this and p, returning this\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>+=(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-type\">bool</span> app = p + s &lt; s;\n        <span class=\"hljs-keyword\">this</span>-&gt;f += app;\n        <span class=\"hljs-keyword\">this</span>-&gt;s += p;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator += for uint128_t\n     * @param p 128-bit unsigned integer\n     * @returns addition of this and p, returning this\n     */</span>\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>+=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-type\">bool</span> app = p.s + s &lt; s;\n        f = f + app + p.f;\n        s = p.s + s;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief pre-increment operator\n     * @returns incremented value of this.\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>++() {\n        *<span class=\"hljs-keyword\">this</span> += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief post-increment operator\n     * @returns incremented value of this.\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>++(<span class=\"hljs-type\">int</span>) {\n        ++*<span class=\"hljs-keyword\">this</span>;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator - for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns subtraction of this and p, returning uint128_t integer\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>-(<span class=\"hljs-keyword\">const</span> T &amp;p) {\n        <span class=\"hljs-type\">bool</span> app = p &gt; s;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(f - app, s - p);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator - for uint128_t\n     * @param p a type of integer variable\n     * @returns subtraction of this and p, returning uint128_t integer\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>-(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-type\">bool</span> app = p.s &gt; s;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(f - p.f - app, s - p.s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator - using twos complement\n     * @returns 2&#x27;s complement of this.\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>-() { <span class=\"hljs-keyword\">return</span> ~*<span class=\"hljs-keyword\">this</span> + <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">1</span>); }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator -- (pre-decrement)\n     * @returns decremented value of this\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>--() {\n        *<span class=\"hljs-keyword\">this</span> -= <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator -- (post-decrement)\n     * @returns decremented value of this\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>--(<span class=\"hljs-type\">int</span> p) {\n        --*<span class=\"hljs-keyword\">this</span>;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator -= for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns subtraction of this and p, returning this\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>-=(<span class=\"hljs-keyword\">const</span> T &amp;p) {\n        <span class=\"hljs-type\">bool</span> app = p &gt; s;\n        f -= app;\n        s -= p;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator -= for uint128_t\n     * @param p 128-bit unsigned integer\n     * @returns subtraction of this and p, returning this\n     */</span>\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>-=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-type\">bool</span> app = p.s &gt; s;\n        f = f - p.f - app;\n        s = s - p.s;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator * for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns multiplication of this and p, returning uint128_t integer\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>*(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span> * <span class=\"hljs-built_in\">uint128_t</span>(p);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator * for uint128_t and other integer types.\n     * @param p 128-bit unsigned integer\n     * @returns multiplication of this and p, returning uint128_t integer\n     */</span>\n    <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>*(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-type\">uint64_t</span> f_first = s &gt;&gt; <span class=\"hljs-number\">32</span>, f_second = s &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>,\n                 s_first = p.s &gt;&gt; <span class=\"hljs-number\">32</span>, s_second = p.s &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>;\n        <span class=\"hljs-type\">uint64_t</span> fi = f_first * s_first, se = f_first * s_second,\n                 th = s_first * f_second, fo = s_second * f_second;\n        <span class=\"hljs-type\">uint64_t</span> tmp = ((se &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>) &lt;&lt; <span class=\"hljs-number\">32</span>), tmp2 = (th &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>)\n                                                         &lt;&lt; <span class=\"hljs-number\">32</span>;\n        <span class=\"hljs-type\">int</span> cc = (tmp + tmp2 &lt; tmp);\n        tmp += tmp2;\n        cc += (tmp + fo &lt; tmp);\n        <span class=\"hljs-type\">uint64_t</span> carry = fi + (se &gt;&gt; <span class=\"hljs-number\">32</span>) + (th &gt;&gt; <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">this</span>-&gt;f * p.s + <span class=\"hljs-keyword\">this</span>-&gt;s * p.f + carry + cc, tmp + fo);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator *= for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns multiplication of this and p, returning this\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>*=(<span class=\"hljs-keyword\">const</span> T p) {\n        *<span class=\"hljs-keyword\">this</span> *= <span class=\"hljs-built_in\">uint128_t</span>(p);\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator *= for uint128_t and other integer types.\n     * @param p 128-bit unsigned integer\n     * @returns multiplication of this and p, returning this\n     */</span>\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>*=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-type\">uint64_t</span> f_first = s &gt;&gt; <span class=\"hljs-number\">32</span>, f_second = s &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>,\n                 s_first = p.s &gt;&gt; <span class=\"hljs-number\">32</span>, s_second = p.s &amp; <span class=\"hljs-number\">0xFFFFFFFF</span>;\n        <span class=\"hljs-type\">uint64_t</span> fi = f_first * s_first, se = f_first * s_second,\n                 th = s_first * f_second, fo = s_second * f_second;\n        <span class=\"hljs-type\">uint64_t</span> tmp = (se &lt;&lt; <span class=\"hljs-number\">32</span>), tmp2 = (th &lt;&lt; <span class=\"hljs-number\">32</span>);\n        <span class=\"hljs-type\">int</span> cc = (tmp + tmp2 &lt; tmp);\n        tmp += tmp2;\n        cc += (tmp + fo &lt; tmp);\n        <span class=\"hljs-type\">uint64_t</span> carry = fi + (se &gt;&gt; <span class=\"hljs-number\">32</span>) + (th &gt;&gt; <span class=\"hljs-number\">32</span>);\n        f = <span class=\"hljs-keyword\">this</span>-&gt;f * p.s + <span class=\"hljs-keyword\">this</span>-&gt;s * p.f + carry + cc;\n        s = tmp + fo;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief divide function for uint128_t and other integer types.\n     * @details divide this value and\n     * @param p 128-bit unsigned integer\n     * @returns pair denoting quotient and remainder.\n     */</span>\n    <span class=\"hljs-function\">std::pair&lt;<span class=\"hljs-type\">uint128_t</span>, <span class=\"hljs-type\">uint128_t</span>&gt; <span class=\"hljs-title\">divide</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (*<span class=\"hljs-keyword\">this</span> &lt; p) {  <span class=\"hljs-comment\">// if this is less than divisor</span>\n            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">0</span>), *<span class=\"hljs-keyword\">this</span>};\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (*<span class=\"hljs-keyword\">this</span> == p) {  <span class=\"hljs-comment\">// if this is equal to divisor</span>\n            <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">0</span>)};\n        }\n        <span class=\"hljs-type\">uint128_t</span> tmp = p, tmp2 = *<span class=\"hljs-keyword\">this</span>;\n        <span class=\"hljs-type\">uint16_t</span> left = tmp._lez() - _lez();\n        tmp &lt;&lt;= left;\n        <span class=\"hljs-function\"><span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-title\">quotient</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>;\n        <span class=\"hljs-function\"><span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-title\">zero</span><span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>)</span></span>;\n        <span class=\"hljs-keyword\">while</span> (left &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; tmp2 &gt;= p) {\n            <span class=\"hljs-type\">uint16_t</span> shf = tmp2._lez() - tmp._lez();\n            <span class=\"hljs-keyword\">if</span> (shf) {\n                tmp &gt;&gt;= shf;\n                quotient &lt;&lt;= shf;\n                left -= shf;\n            }\n            <span class=\"hljs-keyword\">if</span> (tmp2 &lt; tmp) {\n                tmp &gt;&gt;= <span class=\"hljs-number\">1</span>;\n                quotient &lt;&lt;= <span class=\"hljs-number\">1</span>;\n                --left;\n            }\n            tmp2 -= tmp;\n            ++quotient;\n        }\n        <span class=\"hljs-keyword\">return</span> {quotient &lt;&lt; left, tmp2};\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator / for uint128_t and other integer types.\n     * @param p 128-bit unsigned integer\n     * @returns unsigned 128-bit quotient.\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>/(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">divide</span>(p).first; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator / for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns unsigned 128-bit quotient.\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>/(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-type\">uint128_t</span> tmp = *<span class=\"hljs-keyword\">this</span>;\n        tmp /= <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">0</span>, p);\n        <span class=\"hljs-keyword\">return</span> tmp;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator /= for uint128_t\n     * @param p 128-bit unsigned integer\n     * @returns this set as unsigned 128-bit quotient.\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>/=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        *<span class=\"hljs-keyword\">this</span> = <span class=\"hljs-built_in\">divide</span>(p).first;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator /= for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns this set as unsigned 128-bit quotient.\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>/=(<span class=\"hljs-keyword\">const</span> T p) {\n        *<span class=\"hljs-keyword\">this</span> /= <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">0</span>, p);\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator % for uint128_t\n     * @param p 128-bit unsigned integer\n     * @returns unsigned 128-bit remainder.\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>%(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">divide</span>(p).second; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator % for uint128_t and other integer types.\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns unsigned 128-bit remainder.\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>%(<span class=\"hljs-keyword\">const</span> T &amp;p) {\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span> % <span class=\"hljs-built_in\">uint128_t</span>(p);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator %= for uint128_t\n     * @param p 128-bit unsigned integer\n     * @returns this set as unsigned 128-bit remainder.\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>%=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        *<span class=\"hljs-keyword\">this</span> = <span class=\"hljs-built_in\">divide</span>(p).second;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator %= for uint128_t\n     * @tparam T denoting integral type\n     * @param p a type of integer variable\n     * @returns this set as unsigned 128-bit remainder.\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>%=(<span class=\"hljs-keyword\">const</span> T &amp;p) {\n        *<span class=\"hljs-keyword\">this</span> %= <span class=\"hljs-built_in\">uint128_t</span>(p);\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &lt; for uint128_t\n     * @param other number to be compared with this\n     * @returns true if this is less than other, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&lt;(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;other) {\n        <span class=\"hljs-keyword\">return</span> f &lt; other.f || (f == other.f &amp;&amp; s &lt; other.s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &lt;= for uint128_t\n     * @param other number to be compared with this\n     * @returns true if this is less than or equal to other, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&lt;=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;other) {\n        <span class=\"hljs-keyword\">return</span> f &lt; other.f || (f == other.f &amp;&amp; s &lt;= other.s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &gt; for uint128_t\n     * @param other number to be compared with this\n     * @returns true if this is greater than other, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&gt;(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;other) {\n        <span class=\"hljs-keyword\">return</span> f &gt; other.f || (f == other.f &amp;&amp; s &gt; other.s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &gt;= for uint128_t\n     * @param other number to be compared with this\n     * @returns true if this is greater than or equal than other, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&gt;=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;other) {\n        <span class=\"hljs-built_in\">return</span> (f &gt; other.f) || (f == other.f &amp;&amp; s &gt;= other.s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator == for uint128_t\n     * @param other number to be compared with this\n     * @returns true if this is equal than other, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;other) {\n        <span class=\"hljs-keyword\">return</span> f == other.f &amp;&amp; s == other.s;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator != for uint128_t\n     * @param other number to be compared with this\n     * @returns true if this is not equal than other, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>!=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;other) {\n        <span class=\"hljs-keyword\">return</span> f != other.f || s != other.s;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator ! for uint128_t\n     * @returns true if this has zero value, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>!() { <span class=\"hljs-keyword\">return</span> !f &amp;&amp; !s; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &amp;&amp; for uint128_t\n     * @param b number to be compared with this\n     * @returns true if both of the values are not zero, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&amp;&amp;(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;b) {\n        <span class=\"hljs-keyword\">return</span> (s || f) &amp;&amp; (b.s || b.f);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator || for uint128_t\n     * @param b number to be compared with this\n     * @returns true if one of the values are not zero, else false\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>||(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;b) {\n        <span class=\"hljs-keyword\">return</span> (s || f) || (b.s || b.f);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator () for uint128_t\n     * @returns true if this value is non-zero, else false\n     */</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">operator</span><span class=\"hljs-params\">()</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> s || f; }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &lt; for other types\n     * @tparam T integral type\n     * @param other number to be compared with this\n     * @returns true if this is less than other, else false\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&lt;(<span class=\"hljs-keyword\">const</span> T other) {\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span> &lt; <span class=\"hljs-built_in\">uint128_t</span>(other);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &lt;= for other types\n     * @tparam T integral type\n     * @param other number to be compared with this\n     * @returns true if this is less than or equal to other, else false\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&lt;=(<span class=\"hljs-keyword\">const</span> T other) {\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span> &lt;= <span class=\"hljs-built_in\">uint128_t</span>(other);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &gt; for other types\n     * @tparam T integral type\n     * @param other number to be compared with this\n     * @returns true if this is greater than other, else false\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&gt;(<span class=\"hljs-keyword\">const</span> T other) {\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span> &gt; <span class=\"hljs-built_in\">uint128_t</span>(other);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &gt;= for other types\n     * @tparam T integral type\n     * @param other number to be compared with this\n     * @returns true if this is greater than or equal other, else false\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&gt;=(<span class=\"hljs-keyword\">const</span> T other) {\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span> &gt;= <span class=\"hljs-built_in\">uint128_t</span>(other);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator == for other types\n     * @tparam T integral type\n     * @param other number to be compared with this\n     * @returns true if this is equal to other, else false\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(<span class=\"hljs-keyword\">const</span> T other) {\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span> == <span class=\"hljs-built_in\">uint128_t</span>(other);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator != for other types\n     * @tparam T integral type\n     * @param other number to be compared with this\n     * @returns true if this is not equal to other, else false\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>!=(<span class=\"hljs-keyword\">const</span> T other) {\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span> != <span class=\"hljs-built_in\">uint128_t</span>(other);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &amp;&amp; for other types\n     * @tparam T integral type\n     * @param other number to be compared with this\n     * @returns true if this is both values are non-zero, else false\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&amp;&amp;(<span class=\"hljs-keyword\">const</span> T b) {\n        <span class=\"hljs-built_in\">return</span> (f || s) &amp;&amp; b;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator || for other types\n     * @tparam T integral type\n     * @param other number to be compared with this\n     * @returns true if this is either one of the values are non-zero, else\n     * false\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>||(<span class=\"hljs-keyword\">const</span> T b) {\n        <span class=\"hljs-built_in\">return</span> (f || s) || b;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator ~ for uint128_t\n     * @returns 1&#x27;s complement of this number\n     */</span>\n    <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>~() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(~<span class=\"hljs-keyword\">this</span>-&gt;f, ~<span class=\"hljs-keyword\">this</span>-&gt;s); }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &lt;&lt; for uint128_t\n     * @tparam T integral type\n     * @param p number denoting number of shifts\n     * @returns value of this shifted by p to left\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>&lt;&lt;(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-keyword\">if</span> (!p) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(f, s);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p &gt;= <span class=\"hljs-number\">64</span> &amp;&amp; p &lt;= <span class=\"hljs-number\">128</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>((<span class=\"hljs-keyword\">this</span>-&gt;s &lt;&lt; (p - <span class=\"hljs-number\">64</span>)), <span class=\"hljs-number\">0</span>);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">64</span> &amp;&amp; p &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>((<span class=\"hljs-keyword\">this</span>-&gt;f &lt;&lt; p) + ((<span class=\"hljs-keyword\">this</span>-&gt;s &gt;&gt; (<span class=\"hljs-number\">64</span> - p))),\n                             <span class=\"hljs-keyword\">this</span>-&gt;s &lt;&lt; p);\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">0</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &lt;&lt;= for uint128_t\n     * @tparam T integral type\n     * @param p number denoting number of shifts\n     * @returns this shifted by p to left\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;=(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-keyword\">if</span> (p) {\n            <span class=\"hljs-keyword\">if</span> (p &gt;= <span class=\"hljs-number\">64</span> &amp;&amp; p &lt;= <span class=\"hljs-number\">128</span>) {\n                <span class=\"hljs-keyword\">this</span>-&gt;f = (<span class=\"hljs-keyword\">this</span>-&gt;s &lt;&lt; (p - <span class=\"hljs-number\">64</span>));\n                <span class=\"hljs-keyword\">this</span>-&gt;s = <span class=\"hljs-number\">0</span>;\n            } <span class=\"hljs-keyword\">else</span> {\n                f = ((<span class=\"hljs-keyword\">this</span>-&gt;f &lt;&lt; p) + (<span class=\"hljs-keyword\">this</span>-&gt;s &gt;&gt; (<span class=\"hljs-number\">64</span> - p)));\n                s = (<span class=\"hljs-keyword\">this</span>-&gt;s &lt;&lt; p);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &gt;&gt; for uint128_t\n     * @tparam T integral type\n     * @param p number denoting number of shifts\n     * @returns value of this shifted by p to right\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>&gt;&gt;(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-keyword\">if</span> (!p) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">this</span>-&gt;f, <span class=\"hljs-keyword\">this</span>-&gt;s);\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p &gt;= <span class=\"hljs-number\">64</span> &amp;&amp; p &lt;= <span class=\"hljs-number\">128</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">0</span>, (<span class=\"hljs-keyword\">this</span>-&gt;f &gt;&gt; (p - <span class=\"hljs-number\">64</span>)));\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">64</span> &amp;&amp; p &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>((<span class=\"hljs-keyword\">this</span>-&gt;f &gt;&gt; p),\n                             (<span class=\"hljs-keyword\">this</span>-&gt;s &gt;&gt; p) + (<span class=\"hljs-keyword\">this</span>-&gt;f &lt;&lt; (<span class=\"hljs-number\">64</span> - p)));\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-number\">0</span>);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &gt;&gt;= for uint128_t\n     * @tparam T integral type\n     * @param p number denoting number of shifts\n     * @returns this shifted by p to right\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>&gt;&gt;=(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-keyword\">if</span> (p) {\n            <span class=\"hljs-keyword\">if</span> (p &gt;= <span class=\"hljs-number\">64</span>) {\n                f = <span class=\"hljs-number\">0</span>;\n                s = (<span class=\"hljs-keyword\">this</span>-&gt;f &gt;&gt; (p - <span class=\"hljs-number\">64</span>));\n            } <span class=\"hljs-keyword\">else</span> {\n                s = (<span class=\"hljs-keyword\">this</span>-&gt;s &gt;&gt; p) + (<span class=\"hljs-keyword\">this</span>-&gt;f &lt;&lt; (<span class=\"hljs-number\">64</span> - p));\n                f = (<span class=\"hljs-keyword\">this</span>-&gt;f &gt;&gt; p);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &amp; for uint128_t (bitwise operator)\n     * @param p number to be operated\n     * @returns value of this &amp; p (&amp; is bit-wise operator)\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>&amp;(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">this</span>-&gt;f &amp; p.f, <span class=\"hljs-keyword\">this</span>-&gt;s &amp; p.s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &amp; for other types (bitwise operator)\n     * @tparam T integral type\n     * @param p number to be operated\n     * @returns value of this &amp; p (&amp; is bit-wise operator)\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>&amp;(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-type\">uint128_t</span> tmp = *<span class=\"hljs-keyword\">this</span>;\n        <span class=\"hljs-keyword\">return</span> tmp &amp; <span class=\"hljs-built_in\">uint128_t</span>(p);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &amp;= for uint128_t (bitwise operator)\n     * @param p number to be operated\n     * @returns this = this &amp; p (&amp; is bit-wise operator)\n     */</span>\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>&amp;=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-keyword\">this</span>-&gt;f &amp;= p.f;\n        <span class=\"hljs-keyword\">this</span>-&gt;s &amp;= p.s;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &amp;= for other types (bitwise operator)\n     * @tparam T integral type\n     * @param p number to be operated\n     * @returns this = this &amp; p (&amp; is bit-wise operator)\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>&amp;=(<span class=\"hljs-keyword\">const</span> T p) {\n        *<span class=\"hljs-keyword\">this</span> &amp;= <span class=\"hljs-built_in\">uint128_t</span>(p);\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator | for other types (bitwise operator)\n     * @tparam T integral type\n     * @param p number to be operated\n     * @returns value of this | p (| is bit-wise operator)\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>|(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p | s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator | for uint128_t (bitwise operator)\n     * @param p number to be operated\n     * @returns value of this | p (| is bit-wise OR operator)\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>|(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">this</span>-&gt;f | p.f, <span class=\"hljs-keyword\">this</span>-&gt;s | p.s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator |= for uint128_t (bitwise operator)\n     * @param p number to be operated\n     * @returns this = this | p (| is bit-wise OR operator)\n     */</span>\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>|=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        f |= p.f;\n        s |= p.s;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator |= for other types (bitwise operator)\n     * @tparam T integral type\n     * @param p number to be operated\n     * @returns this = this | p (| is bit-wise OR operator)\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>|=(<span class=\"hljs-keyword\">const</span> T p) {\n        s |= p.s;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator ^ for other types (bitwise operator)\n     * @tparam T integral type\n     * @param p number to be operated\n     * @returns value of this ^ p (^ is bit-wise XOR operator)\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>^(<span class=\"hljs-keyword\">const</span> T p) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">this</span>-&gt;f, <span class=\"hljs-keyword\">this</span>-&gt;s ^ p);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator ^ for uint128_t (bitwise operator)\n     * @param p number to be operated\n     * @returns value of this ^ p (^ is bit-wise XOR operator)\n     */</span>\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>^(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(<span class=\"hljs-keyword\">this</span>-&gt;f ^ p.f, <span class=\"hljs-keyword\">this</span>-&gt;s ^ p.s);\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator ^= for uint128_t (bitwise operator)\n     * @param p number to be operated\n     * @returns this = this ^ p (^ is bit-wise XOR operator)\n     */</span>\n    <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>^=(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        f ^= p.f;\n        s ^= p.s;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator ^= for other types (bitwise operator)\n     * @tparam T integral type\n     * @param p number to be operated\n     * @returns this = this ^ p (^ is bit-wise XOR operator)\n     */</span>\n    <span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                              std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n    <span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> &amp;<span class=\"hljs-keyword\">operator</span>^=(<span class=\"hljs-keyword\">const</span> T &amp;p) {\n        s ^= p;\n        <span class=\"hljs-keyword\">return</span> *<span class=\"hljs-keyword\">this</span>;\n    }\n\n    <span class=\"hljs-comment\">/**\n     * @brief operator &lt;&lt; for printing uint128_t integer\n     * @details Prints the uint128_t integer in decimal form\n     * @note Note that this operator is costly since it uses strings to print\n     * the value\n     * @param op ostream object\n     * @param p 128-bit integer\n     * @returns op, ostream object.\n     */</span>\n    <span class=\"hljs-keyword\">friend</span> std::ostream &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;(std::ostream &amp;op, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;p) {\n        <span class=\"hljs-keyword\">if</span> (!p.f) {\n            op &lt;&lt; p.s;\n        } <span class=\"hljs-keyword\">else</span> {\n            std::string out = <span class=\"hljs-string\">&quot;0&quot;</span>, p_2 = <span class=\"hljs-string\">&quot;1&quot;</span>;\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">64</span>; ++i) {\n                <span class=\"hljs-keyword\">if</span> (p.s &amp; (<span class=\"hljs-number\">1LL</span> &lt;&lt; i)) {\n                    out = <span class=\"hljs-built_in\">add</span>(out, p_2);\n                }\n                p_2 = <span class=\"hljs-built_in\">add</span>(p_2, p_2);\n            }\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">64</span>; ++i) {\n                <span class=\"hljs-keyword\">if</span> (p.f &amp; (<span class=\"hljs-number\">1LL</span> &lt;&lt; i)) {\n                    out = <span class=\"hljs-built_in\">add</span>(out, p_2);\n                }\n                p_2 = <span class=\"hljs-built_in\">add</span>(p_2, p_2);\n            }\n            op &lt;&lt; out;\n        }\n        <span class=\"hljs-keyword\">return</span> op;\n    }\n};\n\n<span class=\"hljs-comment\">// Arithmetic operators</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>+(<span class=\"hljs-keyword\">const</span> T &amp;p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) + q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>-(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) - q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>*(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) * q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>/(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) / q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>%(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) % q;\n}\n\n<span class=\"hljs-comment\">// Bitwise operators</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>&amp;(<span class=\"hljs-keyword\">const</span> T &amp;p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) &amp; q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>|(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) | q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">uint128_t</span> <span class=\"hljs-keyword\">operator</span>^(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) ^ q;\n}\n\n<span class=\"hljs-comment\">// Boolean operators</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&amp;&amp;(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) &amp;&amp; q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>||(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) || q;\n}\n\n<span class=\"hljs-comment\">// Comparison operators</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>==(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) == q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>!=(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) != q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&lt;(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) &lt; q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&lt;=(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) &lt;= q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&gt;(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) &gt; q;\n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T, <span class=\"hljs-keyword\">typename</span> = <span class=\"hljs-keyword\">typename</span> std::enable_if&lt;\n                          std::is_integral&lt;T&gt;::value, T&gt;::type&gt;\n<span class=\"hljs-keyword\">inline</span> <span class=\"hljs-type\">bool</span> <span class=\"hljs-keyword\">operator</span>&gt;=(<span class=\"hljs-keyword\">const</span> T p, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">uint128_t</span> &amp;q) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uint128_t</span>(p) &gt;= q;\n}\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span>  <span class=\"hljs-comment\">// CIPHERS_UINT128_T_HPP_</span></span>\n"
    }
  },
  "contributors": [
    {
      "name": "Ashish Bhanu Daulatabad",
      "email": "supersonic12910@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
