{
  "slug": "hashmaplinearprobing",
  "name": "HashMapLinearProbing",
  "categories": ["datastructures", "hashmap", "hashing"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "DataStructures/HashMap/Hashing/HashMapLinearProbing.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/DataStructures/HashMap/Hashing/HashMapLinearProbing.java",
      "code": "<span class=\"hljs-keyword\">package</span> DataStructures.HashMap.Hashing;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-comment\">/**\n * This class is an implementation of a hash table using linear probing It uses a dynamic array to\n * lengthen the size of the hash table when load factor &gt; .7\n */</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">HashMapLinearProbing</span> {\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> hsize; <span class=\"hljs-comment\">// size of the hash table</span>\n  <span class=\"hljs-keyword\">private</span> Integer[] buckets; <span class=\"hljs-comment\">// array representing the table</span>\n  <span class=\"hljs-keyword\">private</span> Integer AVAILABLE;\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> size; <span class=\"hljs-comment\">// amount of elements in the hash table</span>\n\n  <span class=\"hljs-comment\">/**\n   * Constructor initializes buckets array, hsize, and creates dummy object for AVAILABLE\n   *\n   * <span class=\"hljs-doctag\">@param</span> hsize the desired size of the hash map\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">HashMapLinearProbing</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> hsize)</span> {\n    <span class=\"hljs-built_in\">this</span>.buckets = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>[hsize];\n    <span class=\"hljs-built_in\">this</span>.hsize = hsize;\n    <span class=\"hljs-built_in\">this</span>.AVAILABLE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>(Integer.MIN_VALUE);\n    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * The Hash Function takes a given key and finds an index based on its data\n   *\n   * <span class=\"hljs-doctag\">@param</span> key the desired key to be converted\n   * <span class=\"hljs-doctag\">@return</span> int an index corresponding to the key\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashing</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> key % hsize;\n    <span class=\"hljs-keyword\">if</span> (hash &lt; <span class=\"hljs-number\">0</span>) {\n      hash += hsize;\n    }\n    <span class=\"hljs-keyword\">return</span> hash;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * inserts the key into the hash map by wrapping it as an Integer object\n   *\n   * <span class=\"hljs-doctag\">@param</span> key the desired key to be inserted in the hash map\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>(key);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\n\n    <span class=\"hljs-keyword\">if</span> (isFull()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Hash table is full&quot;</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n      <span class=\"hljs-keyword\">if</span> (buckets[hash] == <span class=\"hljs-literal\">null</span> || buckets[hash] == AVAILABLE) {\n        buckets[hash] = wrappedInt;\n        size++;\n        <span class=\"hljs-keyword\">return</span>;\n      }\n\n      <span class=\"hljs-keyword\">if</span> (hash + <span class=\"hljs-number\">1</span> &lt; hsize) {\n        hash++;\n      } <span class=\"hljs-keyword\">else</span> {\n        hash = <span class=\"hljs-number\">0</span>;\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * deletes a key from the hash map and adds an available placeholder\n   *\n   * <span class=\"hljs-doctag\">@param</span> key the desired key to be deleted\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">deleteHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>(key);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\n\n    <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Table is empty&quot;</span>);\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n      <span class=\"hljs-keyword\">if</span> (buckets[hash] != <span class=\"hljs-literal\">null</span> &amp;&amp; buckets[hash].equals(wrappedInt)) {\n        buckets[hash] = AVAILABLE;\n        size--;\n        <span class=\"hljs-keyword\">return</span>;\n      }\n\n      <span class=\"hljs-keyword\">if</span> (hash + <span class=\"hljs-number\">1</span> &lt; hsize) {\n        hash++;\n      } <span class=\"hljs-keyword\">else</span> {\n        hash = <span class=\"hljs-number\">0</span>;\n      }\n    }\n    System.out.println(<span class=\"hljs-string\">&quot;Key &quot;</span> + key + <span class=\"hljs-string\">&quot; not found&quot;</span>);\n  }\n\n  <span class=\"hljs-comment\">/** Displays the hash table line by line */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">displayHashtable</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n      <span class=\"hljs-keyword\">if</span> (buckets[i] == <span class=\"hljs-literal\">null</span> || buckets[i] == AVAILABLE) {\n        System.out.println(<span class=\"hljs-string\">&quot;Bucket &quot;</span> + i + <span class=\"hljs-string\">&quot;: Empty&quot;</span>);\n      } <span class=\"hljs-keyword\">else</span> {\n        System.out.println(<span class=\"hljs-string\">&quot;Bucket &quot;</span> + i + <span class=\"hljs-string\">&quot;: &quot;</span> + buckets[i].toString());\n      }\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Finds the index of location based on an inputed key\n   *\n   * <span class=\"hljs-doctag\">@param</span> key the desired key to be found\n   * <span class=\"hljs-doctag\">@return</span> int the index where the key is located\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">findHash</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span> {\n    <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">wrappedInt</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Integer</span>(key);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">hash</span> <span class=\"hljs-operator\">=</span> hashing(key);\n\n    <span class=\"hljs-keyword\">if</span> (isEmpty()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Table is empty&quot;</span>);\n      <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n      <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">if</span> (buckets[hash].equals(wrappedInt)) {\n          buckets[hash] = AVAILABLE;\n          <span class=\"hljs-keyword\">return</span> hash;\n        }\n      } <span class=\"hljs-keyword\">catch</span> (Exception E) {\n      }\n\n      <span class=\"hljs-keyword\">if</span> (hash + <span class=\"hljs-number\">1</span> &lt; hsize) {\n        hash++;\n      } <span class=\"hljs-keyword\">else</span> {\n        hash = <span class=\"hljs-number\">0</span>;\n      }\n    }\n    System.out.println(<span class=\"hljs-string\">&quot;Key &quot;</span> + key + <span class=\"hljs-string\">&quot; not found&quot;</span>);\n    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n  }\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">lengthenTable</span><span class=\"hljs-params\">()</span> {\n    buckets = Arrays.copyOf(buckets, hsize * <span class=\"hljs-number\">2</span>);\n    hsize *= <span class=\"hljs-number\">2</span>;\n    System.out.println(<span class=\"hljs-string\">&quot;Table size is now: &quot;</span> + hsize);\n  }\n\n  <span class=\"hljs-comment\">/**\n   * Checks the load factor of the hash table if greater than .7, automatically lengthens table to\n   * prevent further collisions\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkLoadFactor</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">double</span> <span class=\"hljs-variable\">factor</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">double</span>) size / hsize;\n    <span class=\"hljs-keyword\">if</span> (factor &gt; <span class=\"hljs-number\">.7</span>) {\n      System.out.println(<span class=\"hljs-string\">&quot;Load factor is &quot;</span> + factor + <span class=\"hljs-string\">&quot;,  lengthening table&quot;</span>);\n      lengthenTable();\n    } <span class=\"hljs-keyword\">else</span> {\n      System.out.println(<span class=\"hljs-string\">&quot;Load factor is &quot;</span> + factor);\n    }\n  }\n\n  <span class=\"hljs-comment\">/**\n   * isFull returns true if the hash map is full and false if not full\n   *\n   * <span class=\"hljs-doctag\">@return</span> boolean is Empty\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isFull</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n      <span class=\"hljs-keyword\">if</span> (buckets[i] == <span class=\"hljs-literal\">null</span> || buckets[i] == AVAILABLE) {\n        response = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> response;\n  }\n\n  <span class=\"hljs-comment\">/**\n   * isEmpty returns true if the hash map is empty and false if not empty\n   *\n   * <span class=\"hljs-doctag\">@return</span> boolean is Empty\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEmpty</span><span class=\"hljs-params\">()</span> {\n    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">response</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; hsize; i++) {\n      <span class=\"hljs-keyword\">if</span> (buckets[i] != <span class=\"hljs-literal\">null</span>) {\n        response = <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">break</span>;\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> response;\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Ray S",
      "email": "68674276+rbshealy@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ray",
      "email": "rbshealy@live.unc.edu",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
