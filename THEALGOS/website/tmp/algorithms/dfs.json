{
  "slug": "dfs",
  "name": "Dfs",
  "categories": ["datastructures", "graphs"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "data_structures/graphs/dfs.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/data_structures/graphs/dfs.c",
      "code": "<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n\n<span class=\"hljs-comment\">// A vertex of the graph</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span>\n{</span>\n    <span class=\"hljs-type\">int</span> vertex;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span>\n};\n<span class=\"hljs-comment\">// Some declarations</span>\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span>\n{</span>\n    <span class=\"hljs-type\">int</span> numVertices;\n    <span class=\"hljs-type\">int</span> *visited;\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *\n        *<span class=\"hljs-title\">adjLists</span>;</span>  <span class=\"hljs-comment\">// we need int** to store a two dimensional array. Similary,</span>\n                    <span class=\"hljs-comment\">// we need struct node** to store an array of Linked lists</span>\n};\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *, <span class=\"hljs-type\">int</span>, <span class=\"hljs-type\">int</span>)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *)</span>;\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *, <span class=\"hljs-type\">int</span>)</span>;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-type\">int</span> vertices, edges, source, i, src, dst;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of vertices\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;vertices);\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> createGraph(vertices);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter the number of edges\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;edges);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; edges; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Edge %d \\nEnter source: &quot;</span>, i + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;src);\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter destination: &quot;</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;dst);\n        addEdge(graph, src, dst);\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Enter source of DFS\\n&quot;</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>, &amp;source);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;DFS from %d is:\\n&quot;</span>, source);\n    dfs(graph, source);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n\n    <span class=\"hljs-comment\">// Uncomment below part to get a ready-made example</span>\n    <span class=\"hljs-comment\">/*struct Graph* graph = createGraph(4);\n    addEdge(graph, 0, 1);\n    addEdge(graph, 0, 2);\n    addEdge(graph, 1, 2);\n    addEdge(graph, 2, 3);\n    printf(&quot;DFS from 0 is:\\n&quot;);\n    dfs(graph,0);\n    printf(&quot;\\n&quot;);*/</span>\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-comment\">// Recursive dfs approach</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> vertex)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">adjList</span> =</span> graph-&gt;adjLists[vertex];\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> adjList;\n\n    <span class=\"hljs-comment\">// Add vertex to visited list and print it</span>\n    graph-&gt;visited[vertex] = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>, vertex);\n\n    <span class=\"hljs-comment\">// Recursively call the dfs function on all unvisited neighbours</span>\n    <span class=\"hljs-keyword\">while</span> (temp != <span class=\"hljs-literal\">NULL</span>)\n    {\n        <span class=\"hljs-type\">int</span> connectedVertex = temp-&gt;vertex;\n        <span class=\"hljs-keyword\">if</span> (graph-&gt;visited[connectedVertex] == <span class=\"hljs-number\">0</span>)\n        {\n            dfs(graph, connectedVertex);\n        }\n        temp = temp-&gt;next;\n    }\n}\n<span class=\"hljs-comment\">// Allocate memory for a node</span>\n<span class=\"hljs-keyword\">struct</span> node *<span class=\"hljs-title function_\">createNode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> v)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node));\n    newNode-&gt;vertex = v;\n    newNode-&gt;next = <span class=\"hljs-literal\">NULL</span>;\n    <span class=\"hljs-keyword\">return</span> newNode;\n}\n<span class=\"hljs-comment\">// Allocate memory for the entire graph structure</span>\n<span class=\"hljs-keyword\">struct</span> Graph *<span class=\"hljs-title function_\">createGraph</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> vertices)</span>\n{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Graph</span> *<span class=\"hljs-title\">graph</span> =</span> <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> Graph));\n    graph-&gt;numVertices = vertices;\n\n    graph-&gt;adjLists = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> node *));\n\n    graph-&gt;visited = <span class=\"hljs-built_in\">malloc</span>(vertices * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>));\n\n    <span class=\"hljs-type\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; vertices; i++)\n    {\n        graph-&gt;adjLists[i] = <span class=\"hljs-literal\">NULL</span>;\n        graph-&gt;visited[i] = <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> graph;\n}\n<span class=\"hljs-comment\">// Creates a bidirectional graph</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">addEdge</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph, <span class=\"hljs-type\">int</span> src, <span class=\"hljs-type\">int</span> dest)</span>\n{\n    <span class=\"hljs-comment\">// Add edge from src to dest</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">newNode</span> =</span> createNode(dest);\n    newNode-&gt;next = graph-&gt;adjLists[src];\n    graph-&gt;adjLists[src] = newNode;\n\n    <span class=\"hljs-comment\">// Add edge from dest to src</span>\n    newNode = createNode(src);\n    newNode-&gt;next = graph-&gt;adjLists[dest];\n    graph-&gt;adjLists[dest] = newNode;\n}\n<span class=\"hljs-comment\">// Utility function to see state of graph at a given time</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printGraph</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> Graph *graph)</span>\n{\n    <span class=\"hljs-type\">int</span> v;\n    <span class=\"hljs-keyword\">for</span> (v = <span class=\"hljs-number\">0</span>; v &lt; graph-&gt;numVertices; v++)\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">temp</span> =</span> graph-&gt;adjLists[v];\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n Adjacency list of vertex %d\\n &quot;</span>, v);\n        <span class=\"hljs-keyword\">while</span> (temp)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d -&gt; &quot;</span>, temp-&gt;vertex);\n            temp = temp-&gt;next;\n        }\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);\n    }\n}\n"
    },
    "haskell": {
      "dir": "src/Graph/Dfs.hs",
      "url": "https://github.com/TheAlgorithms/haskell/tree/master/src/Graph/Dfs.hs",
      "code": "<span class=\"hljs-keyword\">module</span> Graph.Dfs <span class=\"hljs-keyword\">where</span>\n\n<span class=\"hljs-keyword\">import</span> Data.List\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Node</span> = <span class=\"hljs-type\">Int</span></span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Edge</span> = (<span class=\"hljs-type\">Node</span>,<span class=\"hljs-type\">Node</span>)</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-type\">Graph</span> = ([<span class=\"hljs-type\">Node</span>],[<span class=\"hljs-type\">Edge</span>])</span>\n\n<span class=\"hljs-title\">depthfirst</span> :: <span class=\"hljs-type\">Graph</span> -&gt; <span class=\"hljs-type\">Node</span> -&gt; [<span class=\"hljs-type\">Node</span>]\n<span class=\"hljs-title\">depthfirst</span> (v,e) n\n    | [x|x&lt;-v,x==n] == [] = []\n    | otherwise = dfrecursive (v,e) [n]\n    \n<span class=\"hljs-title\">dfrecursive</span> :: <span class=\"hljs-type\">Graph</span> -&gt; [<span class=\"hljs-type\">Node</span>] -&gt; [<span class=\"hljs-type\">Node</span>]\n<span class=\"hljs-title\">dfrecursive</span> ([],_) _ = []\n<span class=\"hljs-title\">dfrecursive</span> (_,_) [] = []\n<span class=\"hljs-title\">dfrecursive</span> (v,e) (top:stack)\n    | [x|x&lt;-v,x==top] == [] = dfrecursive (newv, e) stack\n    | otherwise = top : dfrecursive (newv, e) (adjacent ++ stack)\n    <span class=\"hljs-keyword\">where</span>\n        adjacent = [x | (x,y)&lt;-e,y==top] ++ [x | (y,x)&lt;-e,y==top]\n        newv = [x|x&lt;-v,x/=top]\n        \n<span class=\"hljs-title\">connectedcomponents</span> :: <span class=\"hljs-type\">Graph</span> -&gt; [[<span class=\"hljs-type\">Node</span>]]\n<span class=\"hljs-title\">connectedcomponents</span> ([],_) = []\n<span class=\"hljs-title\">connectedcomponents</span> (top:v,e) \n    | remaining == [] = [connected]\n    | otherwise = connected : connectedcomponents (remaining, e)\n    <span class=\"hljs-keyword\">where</span>\n        connected = depthfirst (top:v,e) top\n        remaining = (top:v) \\\\ connected\n        \n        \n<span class=\"hljs-title\">dfsbipartite</span> :: <span class=\"hljs-type\">Graph</span> -&gt; [(<span class=\"hljs-type\">Node</span>, <span class=\"hljs-type\">Int</span>)] -&gt; [<span class=\"hljs-type\">Node</span>] -&gt; [<span class=\"hljs-type\">Node</span>] -&gt; <span class=\"hljs-type\">Bool</span>\n<span class=\"hljs-title\">dfsbipartite</span> ([],_) _ _ _ = <span class=\"hljs-type\">True</span>\n<span class=\"hljs-title\">dfsbipartite</span> (_,_) [] _ _ = <span class=\"hljs-type\">True</span>\n<span class=\"hljs-title\">dfsbipartite</span> (v,e) ((nv, <span class=\"hljs-number\">0</span>):stack) odd even\n    | [x|x&lt;-v,x==nv] == [] = dfsbipartite (v, e) stack odd even\n    | [] == intersect adjacent even = dfsbipartite (newv, e) ([(x,<span class=\"hljs-number\">1</span>)|x&lt;-adjacent] ++ stack) odd (nv : even)\n    | otherwise = <span class=\"hljs-type\">False</span>\n    <span class=\"hljs-keyword\">where</span>\n        adjacent = [x | (x,y)&lt;-e,y==nv] ++ [x | (y,x)&lt;-e,y==nv]\n        newv = [x|x&lt;-v,x/=nv]\n<span class=\"hljs-title\">dfsbipartite</span> (v,e) ((nv, <span class=\"hljs-number\">1</span>):stack) odd even\n    | [x|x&lt;-v,x==nv] == [] = dfsbipartite (v, e) stack odd even    \n    | [] == intersect adjacent odd = dfsbipartite (newv, e) ([(x,<span class=\"hljs-number\">0</span>)|x&lt;-adjacent] ++ stack) (nv : odd) even\n    | otherwise = <span class=\"hljs-type\">False</span>\n    <span class=\"hljs-keyword\">where</span>\n        adjacent = [x | (x,y)&lt;-e,y==nv] ++ [x | (y,x)&lt;-e,y==nv]\n        newv = [x|x&lt;-v,x/=nv]\n\n<span class=\"hljs-title\">bipartite</span> :: <span class=\"hljs-type\">Graph</span> -&gt; <span class=\"hljs-type\">Bool</span>\n<span class=\"hljs-title\">bipartite</span> ([],_) = <span class=\"hljs-type\">True</span>\n<span class=\"hljs-title\">bipartite</span> (top:v,e) = dfsbipartite (top:v, e) [(top,<span class=\"hljs-number\">0</span>)] [] []\n"
    }
  },
  "contributors": [
    {
      "name": "PalAditya",
      "email": "adityapal.nghss@gmail.com",
      "commits": 1
    },
    {
      "name": "Ashwin Narayan",
      "email": "ashwinnarayan1994@gmail.com",
      "commits": 1
    },
    {
      "name": "KAUSHAL DEVRARI",
      "email": "71590645+KaushalDevrari@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "stepfencurryxiao",
      "email": "stepfencurryxiao@gmail.com",
      "commits": 1
    },
    {
      "name": "Surendra Kumar",
      "email": "32401892+comradesurendra@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ayaan Khan",
      "email": "ayaankhan98@gmail.com",
      "commits": 1
    },
    {
      "name": "khalil2535",
      "email": "khalil2535@localhost",
      "commits": 1
    },
    {
      "name": "unknown",
      "email": "cnddhks846@naver.com",
      "commits": 1
    },
    {
      "name": "sangjun2",
      "email": "sj27294626@gmail.com",
      "commits": 1
    },
    {
      "name": "Filip Hlasek",
      "email": "fhlasek@gmail.com",
      "commits": 1
    },
    {
      "name": "pkdism",
      "email": "pawan.dwivedi94@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "zachzhu2016",
      "email": "48337051+zachzhu2016@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Guo",
      "email": "msn4399@163.com",
      "commits": 1
    },
    {
      "name": "Harshit Kumar",
      "email": "kumar_harshit@outlook.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
