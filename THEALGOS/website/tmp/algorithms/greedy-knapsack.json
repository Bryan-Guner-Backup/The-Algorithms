{
  "slug": "greedy-knapsack",
  "name": "Greedy Knapsack",
  "categories": ["knapsack"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "knapsack/greedy_knapsack.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/knapsack/greedy_knapsack.py",
      "code": "<span class=\"hljs-comment\"># To get an insight into Greedy Algorithm through the Knapsack problem</span>\n\n\n<span class=\"hljs-string\">&quot;&quot;&quot;\nA shopkeeper has bags of wheat that each have different weights and different profits.\neg.\nprofit 5 8 7 1 12 3 4\nweight 2 7 1 6  4 2 5\nmax_weight 100\n\nConstraints:\nmax_weight &gt; 0\nprofit[i] &gt;= 0\nweight[i] &gt;= 0\nCalculate the maximum profit that the shopkeeper can make given maxmum weight that can\nbe carried.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calc_profit</span>(<span class=\"hljs-params\">profit: <span class=\"hljs-built_in\">list</span>, weight: <span class=\"hljs-built_in\">list</span>, max_weight: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Function description is as follows-\n    :param profit: Take a list of profits\n    :param weight: Take a list of weight if bags corresponding to the profits\n    :param max_weight: Maximum weight that could be carried\n    :return: Maximum expected gain\n\n    &gt;&gt;&gt; calc_profit([1, 2, 3], [3, 4, 5], 15)\n    6\n    &gt;&gt;&gt; calc_profit([10, 9 , 8], [3 ,4 , 5], 25)\n    27\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(profit) != <span class=\"hljs-built_in\">len</span>(weight):\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;The length of profit and weight must be same.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> max_weight &lt;= <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;max_weight must greater than zero.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">any</span>(p &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> profit):\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Profit can not be negative.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">any</span>(w &lt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">for</span> w <span class=\"hljs-keyword\">in</span> weight):\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Weight can not be negative.&quot;</span>)\n\n    <span class=\"hljs-comment\"># List created to store profit gained for the 1kg in case of each weight</span>\n    <span class=\"hljs-comment\"># respectively.  Calculate and append profit/weight for each element.</span>\n    profit_by_weight = [p / w <span class=\"hljs-keyword\">for</span> p, w <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(profit, weight)]\n\n    <span class=\"hljs-comment\"># Creating a copy of the list and sorting profit/weight in ascending order</span>\n    sorted_profit_by_weight = <span class=\"hljs-built_in\">sorted</span>(profit_by_weight)\n\n    <span class=\"hljs-comment\"># declaring useful variables</span>\n    length = <span class=\"hljs-built_in\">len</span>(sorted_profit_by_weight)\n    limit = <span class=\"hljs-number\">0</span>\n    gain = <span class=\"hljs-number\">0</span>\n    i = <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-comment\"># loop till the total weight do not reach max limit e.g. 15 kg and till i&lt;length</span>\n    <span class=\"hljs-keyword\">while</span> limit &lt;= max_weight <span class=\"hljs-keyword\">and</span> i &lt; length:\n        <span class=\"hljs-comment\"># flag value for encountered greatest element in sorted_profit_by_weight</span>\n        biggest_profit_by_weight = sorted_profit_by_weight[length - i - <span class=\"hljs-number\">1</span>]\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Calculate the index of the biggest_profit_by_weight in profit_by_weight list.\n        This will give the index of the first encountered element which is same as of\n        biggest_profit_by_weight.  There may be one or more values same as that of\n        biggest_profit_by_weight but index always encounter the very first element\n        only.  To curb this alter the values in profit_by_weight once they are used\n        here it is done to -1 because neither profit nor weight can be in negative.\n        &quot;&quot;&quot;</span>\n        index = profit_by_weight.index(biggest_profit_by_weight)\n        profit_by_weight[index] = -<span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># check if the weight encountered is less than the total weight</span>\n        <span class=\"hljs-comment\"># encountered before.</span>\n        <span class=\"hljs-keyword\">if</span> max_weight - limit &gt;= weight[index]:\n            limit += weight[index]\n            <span class=\"hljs-comment\"># Adding profit gained for the given weight 1 ===</span>\n            <span class=\"hljs-comment\"># weight[index]/weight[index]</span>\n            gain += <span class=\"hljs-number\">1</span> * profit[index]\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># Since the weight encountered is greater than limit, therefore take the</span>\n            <span class=\"hljs-comment\"># required number of remaining kgs and calculate profit for it.</span>\n            <span class=\"hljs-comment\"># weight remaining / weight[index]</span>\n            gain += (max_weight - limit) / weight[index] * profit[index]\n            <span class=\"hljs-keyword\">break</span>\n        i += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> gain\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">&quot;Input profits, weights, and then max_weight (all positive ints) separated by &quot;</span>\n        <span class=\"hljs-string\">&quot;spaces.&quot;</span>\n    )\n\n    profit = [<span class=\"hljs-built_in\">int</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Input profits separated by spaces: &quot;</span>).split()]\n    weight = [<span class=\"hljs-built_in\">int</span>(x) <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Input weights separated by spaces: &quot;</span>).split()]\n    max_weight = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Max weight allowed: &quot;</span>))\n\n    <span class=\"hljs-comment\"># Function Call</span>\n    calc_profit(profit, weight, max_weight)\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Apoorve",
      "email": "apoorve73@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
