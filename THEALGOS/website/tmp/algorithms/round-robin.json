{
  "slug": "round-robin",
  "name": "Round Robin",
  "categories": ["scheduling"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "scheduling/round_robin.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/scheduling/round_robin.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\r\nRound Robin is a scheduling algorithm.\r\nIn Round Robin each process is assigned a fixed time slot in a cyclic way.\r\nhttps://en.wikipedia.org/wiki/Round-robin_scheduling\r\n&quot;&quot;&quot;</span>\r\n<span class=\"hljs-keyword\">from</span> statistics <span class=\"hljs-keyword\">import</span> mean\r\n<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_waiting_times</span>(<span class=\"hljs-params\">burst_times: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    Calculate the waiting times of a list of processes that have a specified duration.\r\n\r\n    Return: The waiting time for each process.\r\n    &gt;&gt;&gt; calculate_waiting_times([10, 5, 8])\r\n    [13, 10, 13]\r\n    &gt;&gt;&gt; calculate_waiting_times([4, 6, 3, 1])\r\n    [5, 8, 9, 6]\r\n    &gt;&gt;&gt; calculate_waiting_times([12, 2, 10])\r\n    [12, 2, 12]\r\n    &quot;&quot;&quot;</span>\r\n    quantum = <span class=\"hljs-number\">2</span>\r\n    rem_burst_times = <span class=\"hljs-built_in\">list</span>(burst_times)\r\n    waiting_times = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">len</span>(burst_times)\r\n    t = <span class=\"hljs-number\">0</span>\r\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\r\n        done = <span class=\"hljs-literal\">True</span>\r\n        <span class=\"hljs-keyword\">for</span> i, burst_time <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(burst_times):\r\n            <span class=\"hljs-keyword\">if</span> rem_burst_times[i] &gt; <span class=\"hljs-number\">0</span>:\r\n                done = <span class=\"hljs-literal\">False</span>\r\n                <span class=\"hljs-keyword\">if</span> rem_burst_times[i] &gt; quantum:\r\n                    t += quantum\r\n                    rem_burst_times[i] -= quantum\r\n                <span class=\"hljs-keyword\">else</span>:\r\n                    t += rem_burst_times[i]\r\n                    waiting_times[i] = t - burst_time\r\n                    rem_burst_times[i] = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-keyword\">if</span> done <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>:\r\n            <span class=\"hljs-keyword\">return</span> waiting_times\r\n\r\n\r\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">calculate_turn_around_times</span>(<span class=\"hljs-params\">\r\n    burst_times: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>], waiting_times: <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]\r\n</span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\r\n    <span class=\"hljs-string\">&quot;&quot;&quot;\r\n    &gt;&gt;&gt; calculate_turn_around_times([1, 2, 3, 4], [0, 1, 3])\r\n    [1, 3, 6]\r\n    &gt;&gt;&gt; calculate_turn_around_times([10, 3, 7], [10, 6, 11])\r\n    [20, 9, 18]\r\n    &quot;&quot;&quot;</span>\r\n    <span class=\"hljs-keyword\">return</span> [burst + waiting <span class=\"hljs-keyword\">for</span> burst, waiting <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(burst_times, waiting_times)]\r\n\r\n\r\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\r\n    burst_times = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>]\r\n    waiting_times = calculate_waiting_times(burst_times)\r\n    turn_around_times = calculate_turn_around_times(burst_times, waiting_times)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Process ID \\tBurst Time \\tWaiting Time \\tTurnaround Time&quot;</span>)\r\n    <span class=\"hljs-keyword\">for</span> i, burst_time <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(burst_times):\r\n        <span class=\"hljs-built_in\">print</span>(\r\n            <span class=\"hljs-string\">f&quot;  <span class=\"hljs-subst\">{i + <span class=\"hljs-number\">1</span>}</span>\\t\\t  <span class=\"hljs-subst\">{burst_time}</span>\\t\\t  <span class=\"hljs-subst\">{waiting_times[i]}</span>\\t\\t  &quot;</span>\r\n            <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{turn_around_times[i]}</span>&quot;</span>\r\n        )\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;\\nAverage waiting time = <span class=\"hljs-subst\">{mean(waiting_times):<span class=\"hljs-number\">.5</span>f}</span>&quot;</span>)\r\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Average turn around time = <span class=\"hljs-subst\">{mean(turn_around_times):<span class=\"hljs-number\">.5</span>f}</span>&quot;</span>)\r\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Shantanu Joshi",
      "email": "42472191+shan7030@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Pawan Sundargiri",
      "email": "67560186+pawanbuddy2000@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
