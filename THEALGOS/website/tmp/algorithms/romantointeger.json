{
  "slug": "romantointeger",
  "name": "RomanToInteger",
  "categories": ["conversions"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Conversions/RomanToInteger.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Conversions/RomanToInteger.java",
      "code": "<span class=\"hljs-keyword\">package</span> Conversions;\n\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RomanToInteger</span> {\n\n  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> Map&lt;Character, Integer&gt; map =\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;Character, Integer&gt;() {\n        <span class=\"hljs-comment\">/** */</span>\n        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">serialVersionUID</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">87605733047260530L</span>;\n\n        {\n          put(<span class=\"hljs-string\">&#x27;I&#x27;</span>, <span class=\"hljs-number\">1</span>);\n          put(<span class=\"hljs-string\">&#x27;V&#x27;</span>, <span class=\"hljs-number\">5</span>);\n          put(<span class=\"hljs-string\">&#x27;X&#x27;</span>, <span class=\"hljs-number\">10</span>);\n          put(<span class=\"hljs-string\">&#x27;L&#x27;</span>, <span class=\"hljs-number\">50</span>);\n          put(<span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-number\">100</span>);\n          put(<span class=\"hljs-string\">&#x27;D&#x27;</span>, <span class=\"hljs-number\">500</span>);\n          put(<span class=\"hljs-string\">&#x27;M&#x27;</span>, <span class=\"hljs-number\">1000</span>);\n        }\n      };\n  <span class=\"hljs-comment\">// Roman Number = Roman Numerals</span>\n\n  <span class=\"hljs-comment\">/**\n   * This function convert Roman number into Integer\n   *\n   * <span class=\"hljs-doctag\">@param</span> A Roman number string\n   * <span class=\"hljs-doctag\">@return</span> integer\n   */</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">romanToInt</span><span class=\"hljs-params\">(String A)</span> {\n\n    A = A.toUpperCase();\n    <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">prev</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&#x27; &#x27;</span>;\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">newPrev</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> A.length() - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n      <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">c</span> <span class=\"hljs-operator\">=</span> A.charAt(i);\n\n      <span class=\"hljs-keyword\">if</span> (prev != <span class=\"hljs-string\">&#x27; &#x27;</span>) {\n        <span class=\"hljs-comment\">// checking current Number greater then previous or not</span>\n        newPrev = map.get(prev) &gt; newPrev ? map.get(prev) : newPrev;\n      }\n\n      <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">currentNum</span> <span class=\"hljs-operator\">=</span> map.get(c);\n\n      <span class=\"hljs-comment\">// if current number greater then prev max previous then add</span>\n      <span class=\"hljs-keyword\">if</span> (currentNum &gt;= newPrev) {\n        sum += currentNum;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// subtract upcoming number until upcoming number not greater then prev max</span>\n        sum -= currentNum;\n      }\n\n      prev = c;\n    }\n\n    <span class=\"hljs-keyword\">return</span> sum;\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> romanToInt(<span class=\"hljs-string\">&quot;MDCCCIV&quot;</span>);\n    System.out.println(sum);\n  }\n}\n"
    },
    "go": {
      "dir": "conversions/roman-to-integer/roman_to_integer.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/conversions/roman-to-integer/roman_to_integer.go",
      "code": "<span class=\"hljs-comment\">/*\nThis algorithm will convert a standard roman number to an integer\nhttps://en.wikipedia.org/wiki/Roman_numerals\nFunction receives a string as a roman number and outputs an integer\nMaximum output will be 3999\nOnly standard form is supported\n*/</span>\n<span class=\"hljs-keyword\">package</span> conversions\n\n<span class=\"hljs-keyword\">var</span> romans = <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-keyword\">string</span>]<span class=\"hljs-keyword\">int</span>{<span class=\"hljs-string\">&quot;I&quot;</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;V&quot;</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">&quot;X&quot;</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">&quot;L&quot;</span>: <span class=\"hljs-number\">50</span>, <span class=\"hljs-string\">&quot;C&quot;</span>: <span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">&quot;D&quot;</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;M&quot;</span>: <span class=\"hljs-number\">1000</span>}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">RomanToInteger</span><span class=\"hljs-params\">(roman <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">int</span></span> {\n\ttotal := <span class=\"hljs-number\">0</span>\n\tholder := <span class=\"hljs-number\">0</span>\n\t<span class=\"hljs-keyword\">for</span> holder &lt; <span class=\"hljs-built_in\">len</span>(roman) {\n\t\t<span class=\"hljs-keyword\">if</span> holder+<span class=\"hljs-number\">1</span> &lt; <span class=\"hljs-built_in\">len</span>(roman) &amp;&amp; (romans[<span class=\"hljs-keyword\">string</span>(roman[holder])] &lt; romans[<span class=\"hljs-keyword\">string</span>(roman[holder+<span class=\"hljs-number\">1</span>])]) {\n\t\t\ttotal += romans[<span class=\"hljs-keyword\">string</span>(roman[holder+<span class=\"hljs-number\">1</span>])] - romans[<span class=\"hljs-keyword\">string</span>(roman[holder])]\n\t\t\tholder += <span class=\"hljs-number\">2</span>\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\ttotal += romans[<span class=\"hljs-keyword\">string</span>(roman[holder])]\n\t\t\tholder++\n\t\t}\n\t}\n\t<span class=\"hljs-keyword\">return</span> total\n}\n"
    },
    "dart": {
      "dir": "conversions/roman_to_integer.dart",
      "url": "https://github.com/TheAlgorithms/dart/tree/master/conversions/roman_to_integer.dart",
      "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:test/test.dart&#x27;</span>;\n\n<span class=\"hljs-built_in\">int</span> romanToInteger(<span class=\"hljs-keyword\">var</span> s) {\n  <span class=\"hljs-built_in\">int</span> ans = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.length; i++) {\n    <span class=\"hljs-built_in\">int</span> num1 = value(s[i]);\n    <span class=\"hljs-keyword\">if</span> (i + <span class=\"hljs-number\">1</span> &lt; s.length) {\n      <span class=\"hljs-built_in\">int</span> num2 = value(s[i + <span class=\"hljs-number\">1</span>]);\n      <span class=\"hljs-keyword\">if</span> (num1 &lt; num2) {\n        ans = ans + num2 - num1;\n        i++;\n      } <span class=\"hljs-keyword\">else</span> {\n        ans = ans + num1;\n      }\n    } <span class=\"hljs-keyword\">else</span> {\n      ans = ans + num1;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> ans;\n}\n\n<span class=\"hljs-built_in\">int</span> value(<span class=\"hljs-keyword\">var</span> r) {\n  <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-string\">&#x27;I&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-string\">&#x27;V&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-string\">&#x27;X&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-string\">&#x27;L&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">50</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-string\">&#x27;C&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">100</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-string\">&#x27;D&#x27;</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">500</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (r == <span class=\"hljs-string\">&#x27;M&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1000</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-keyword\">void</span> main() {\n  test(<span class=\"hljs-string\">&quot;romanToInteger XII returns 12&quot;</span>, () {\n    expect(romanToInteger(<span class=\"hljs-string\">&#x27;XII&#x27;</span>), equals(<span class=\"hljs-number\">12</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;romanToInteger LII returns 52&quot;</span>, () {\n    expect(romanToInteger(<span class=\"hljs-string\">&#x27;LII&#x27;</span>), equals(<span class=\"hljs-number\">52</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;romanToInteger DLVII returns 557&quot;</span>, () {\n    expect(romanToInteger(<span class=\"hljs-string\">&#x27;LII&#x27;</span>), equals(<span class=\"hljs-number\">52</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;romanToInteger VI returns 6&quot;</span>, () {\n    expect(romanToInteger(<span class=\"hljs-string\">&#x27;VI&#x27;</span>), equals(<span class=\"hljs-number\">6</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;romanToInteger CLXV returns 165&quot;</span>, () {\n    expect(romanToInteger(<span class=\"hljs-string\">&#x27;CLXV&#x27;</span>), equals(<span class=\"hljs-number\">165</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;romanToInteger MDCI returns 1601&quot;</span>, () {\n    expect(romanToInteger(<span class=\"hljs-string\">&#x27;MDCI&#x27;</span>), equals(<span class=\"hljs-number\">1601</span>));\n  });\n\n  test(<span class=\"hljs-string\">&quot;romanToInteger LVII returns 57&quot;</span>, () {\n    expect(romanToInteger(<span class=\"hljs-string\">&#x27;LVII&#x27;</span>), equals(<span class=\"hljs-number\">57</span>));\n  });\n}\n"
    },
    "ruby": {
      "dir": "maths/roman_to_integer.rb",
      "url": "https://github.com/TheAlgorithms/ruby/tree/master/maths/roman_to_integer.rb",
      "code": "<span class=\"hljs-comment\"># Challenge name: Roman to Integer</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Symbol       Value</span>\n<span class=\"hljs-comment\"># I             1</span>\n<span class=\"hljs-comment\"># V             5</span>\n<span class=\"hljs-comment\"># X             10</span>\n<span class=\"hljs-comment\"># L             50</span>\n<span class=\"hljs-comment\"># C             100</span>\n<span class=\"hljs-comment\"># D             500</span>\n<span class=\"hljs-comment\"># M             1000</span>\n<span class=\"hljs-comment\"># </span>\n<span class=\"hljs-comment\"># For example, 2 is written as II in Roman numeral, just two one&#x27;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># I can be placed before V (5) and X (10) to make 4 and 9.</span>\n<span class=\"hljs-comment\"># X can be placed before L (50) and C (100) to make 40 and 90.</span>\n<span class=\"hljs-comment\"># C can be placed before D (500) and M (1000) to make 400 and 900.</span>\n<span class=\"hljs-comment\"># Given a roman numeral, convert it to an integer.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Approach 1: Left-to-Right Pass</span>\n<span class=\"hljs-comment\">#</span>\n\n<span class=\"hljs-comment\"># Complexity Analysis</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Let n be the length of the input string (the total number of symbols in it).</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Time complexity: O(1).</span>\n<span class=\"hljs-comment\"># As there is a finite set of roman numerals.</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># Space complexity: O(1).</span>\n<span class=\"hljs-comment\"># Because only a constant number of single-value variables are used, the space complexity is O(1).</span>\n\nROM_NUMS = {\n  <span class=\"hljs-string\">&quot;I&quot;</span> =&gt; <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-string\">&quot;V&quot;</span> =&gt; <span class=\"hljs-number\">5</span>,\n  <span class=\"hljs-string\">&quot;X&quot;</span> =&gt; <span class=\"hljs-number\">10</span>,\n  <span class=\"hljs-string\">&quot;L&quot;</span> =&gt; <span class=\"hljs-number\">50</span>,\n  <span class=\"hljs-string\">&quot;C&quot;</span> =&gt; <span class=\"hljs-number\">100</span>,\n  <span class=\"hljs-string\">&quot;D&quot;</span> =&gt; <span class=\"hljs-number\">500</span>,\n  <span class=\"hljs-string\">&quot;M&quot;</span> =&gt; <span class=\"hljs-number\">1000</span>\n}\n\n<span class=\"hljs-comment\"># Now, recall that each symbol adds its own value, except for when a smaller</span>\n<span class=\"hljs-comment\"># valued symbol is before a larger valued symbol. In those cases, instead of</span>\n<span class=\"hljs-comment\"># adding both symbols to the total, we need to subtract the large from the</span>\n<span class=\"hljs-comment\"># small, adding that instead.</span>\n\n<span class=\"hljs-comment\"># Therefore, the simplest algorithm is to use a pointer to scan through the</span>\n<span class=\"hljs-comment\"># string, at each step deciding whether to add the current symbol and</span>\n<span class=\"hljs-comment\"># go forward 1 place, or add the difference of the next 2 symbols and</span>\n<span class=\"hljs-comment\"># go forward 2 places.</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">roman_to_int</span><span class=\"hljs-params\">(s)</span></span>\n  res = <span class=\"hljs-number\">0</span>\n  temp = <span class=\"hljs-number\">0</span>\n\n  s.chars.each_with_index <span class=\"hljs-keyword\">do</span> <span class=\"hljs-params\">|el, i|</span>\n    <span class=\"hljs-comment\"># subtractive case: if at least 2 symbols remaining AND value of s[i] &lt; value of s[i + 1]</span>\n    <span class=\"hljs-keyword\">if</span> ROM_NUMS[s[i + <span class=\"hljs-number\">1</span>]] &amp;&amp; ROM_NUMS[el] &lt; ROM_NUMS[s[i+<span class=\"hljs-number\">1</span>]]\n      temp = ROM_NUMS[el]\n    <span class=\"hljs-keyword\">else</span>\n      <span class=\"hljs-comment\"># Else this is NOT the subtractive case.</span>\n      res += (ROM_NUMS[el] - temp)\n      temp = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  res\n<span class=\"hljs-keyword\">end</span>\n\ns = <span class=\"hljs-string\">&quot;III&quot;</span>\nputs roman_to_int(s)\n<span class=\"hljs-comment\"># Output: 3</span>\n\ns = <span class=\"hljs-string\">&quot;IV&quot;</span>\nputs roman_to_int(s)\n<span class=\"hljs-comment\"># Output: 4</span>\n\ns = <span class=\"hljs-string\">&quot;IX&quot;</span>\nputs roman_to_int(s)\n<span class=\"hljs-comment\"># Output: 9</span>\n\ns = <span class=\"hljs-string\">&quot;LVIII&quot;</span>\nputs roman_to_int(s)\n<span class=\"hljs-comment\"># Output: 58</span>\n<span class=\"hljs-comment\"># Explanation: L = 50, V= 5, III = 3.</span>\n\ns = <span class=\"hljs-string\">&quot;MCMXCIV&quot;</span>\nputs roman_to_int(s)\n<span class=\"hljs-comment\"># Output: 1994</span>\n<span class=\"hljs-comment\"># Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Vitor Oliveira",
      "email": "vbrazo@gmail.com",
      "commits": 1
    },
    {
      "name": "Navid Zarepak",
      "email": "navid2zp@gmail.com",
      "commits": 1
    },
    {
      "name": "Parowicz",
      "email": "arturparowicz@gmail.com",
      "commits": 1
    },
    {
      "name": "Pa1sathvik",
      "email": "7vik.sathvik@gmail.com",
      "commits": 1
    },
    {
      "name": "EAlexa",
      "email": "rubi_81@outlook.de",
      "commits": 1
    },
    {
      "name": "Arogon1",
      "email": "40372809+Arogon1@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Yang Libin",
      "email": "contact@yanglibin.info",
      "commits": 1
    },
    {
      "name": "pandeyarun709",
      "email": "pandeyarun709@gmail.com",
      "commits": 1
    },
    {
      "name": "Jasper",
      "email": "46252815+jasper256@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Ganesh Agarwal",
      "email": "69008792+Ganesh-Agarwal-25@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
