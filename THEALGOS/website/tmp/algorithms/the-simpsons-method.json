{
  "slug": "the-simpsons-method",
  "name": "The Simpson’s Method",
  "categories": ["numericalmethods"],
  "body": {
    "en": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>Simpson's Rule is a numerical method that approximates the value of a definite integral by using quadratic functions. This method is named after the English mathematician Thomas Simpson (1710−1761).</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simpsone</span>(<span class=\"hljs-params\">a, b, n, func</span>):\n    h = <span class=\"hljs-built_in\">float</span>((b-a)/n)\n    s = (func(a) + func(b)) * <span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> np.arange(<span class=\"hljs-number\">0</span>, n-<span class=\"hljs-number\">1</span>):\n        xk = a + h*i\n        xk1 = a + h*(i-<span class=\"hljs-number\">1</span>)\n        s = s + func(xk) + <span class=\"hljs-number\">2</span>*func((xk1+xk)/<span class=\"hljs-number\">2</span>)\n    x = a + h*n\n    x1 = a + h*(n-<span class=\"hljs-number\">1</span>)\n    s += <span class=\"hljs-number\">2</span> *func((x1 + x)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> s*h/<span class=\"hljs-number\">3.0</span></code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"some-input-data\">Some input data</h2>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">f = <span class=\"hljs-keyword\">lambda</span> x: (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\nn = <span class=\"hljs-number\">10000</span>  \na = <span class=\"hljs-number\">2.0</span>\nb = <span class=\"hljs-number\">3.0</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Result: \"</span>, simpsone(a, b, n, f))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"2\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">404153016168566</span>\n</pre></div></div></div></div>",
    "de": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>Simpson's Rule is a numerical method that approximates the value of a definite integral by using quadratic functions. This method is named after the English mathematician Thomas Simpson (1710−1761).</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simpsone</span>(<span class=\"hljs-params\">a, b, n, func</span>):\n    h = <span class=\"hljs-built_in\">float</span>((b-a)/n)\n    s = (func(a) + func(b)) * <span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> np.arange(<span class=\"hljs-number\">0</span>, n-<span class=\"hljs-number\">1</span>):\n        xk = a + h*i\n        xk1 = a + h*(i-<span class=\"hljs-number\">1</span>)\n        s = s + func(xk) + <span class=\"hljs-number\">2</span>*func((xk1+xk)/<span class=\"hljs-number\">2</span>)\n    x = a + h*n\n    x1 = a + h*(n-<span class=\"hljs-number\">1</span>)\n    s += <span class=\"hljs-number\">2</span> *func((x1 + x)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> s*h/<span class=\"hljs-number\">3.0</span></code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"some-input-data\">Some input data</h2>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">f = <span class=\"hljs-keyword\">lambda</span> x: (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\nn = <span class=\"hljs-number\">10000</span>  \na = <span class=\"hljs-number\">2.0</span>\nb = <span class=\"hljs-number\">3.0</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Result: \"</span>, simpsone(a, b, n, f))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"2\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">404153016168566</span>\n</pre></div></div></div></div>",
    "es": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>Simpson's Rule is a numerical method that approximates the value of a definite integral by using quadratic functions. This method is named after the English mathematician Thomas Simpson (1710−1761).</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simpsone</span>(<span class=\"hljs-params\">a, b, n, func</span>):\n    h = <span class=\"hljs-built_in\">float</span>((b-a)/n)\n    s = (func(a) + func(b)) * <span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> np.arange(<span class=\"hljs-number\">0</span>, n-<span class=\"hljs-number\">1</span>):\n        xk = a + h*i\n        xk1 = a + h*(i-<span class=\"hljs-number\">1</span>)\n        s = s + func(xk) + <span class=\"hljs-number\">2</span>*func((xk1+xk)/<span class=\"hljs-number\">2</span>)\n    x = a + h*n\n    x1 = a + h*(n-<span class=\"hljs-number\">1</span>)\n    s += <span class=\"hljs-number\">2</span> *func((x1 + x)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> s*h/<span class=\"hljs-number\">3.0</span></code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"some-input-data\">Some input data</h2>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">f = <span class=\"hljs-keyword\">lambda</span> x: (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\nn = <span class=\"hljs-number\">10000</span>  \na = <span class=\"hljs-number\">2.0</span>\nb = <span class=\"hljs-number\">3.0</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Result: \"</span>, simpsone(a, b, n, f))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"2\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">404153016168566</span>\n</pre></div></div></div></div>",
    "eo": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>Simpson's Rule is a numerical method that approximates the value of a definite integral by using quadratic functions. This method is named after the English mathematician Thomas Simpson (1710−1761).</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simpsone</span>(<span class=\"hljs-params\">a, b, n, func</span>):\n    h = <span class=\"hljs-built_in\">float</span>((b-a)/n)\n    s = (func(a) + func(b)) * <span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> np.arange(<span class=\"hljs-number\">0</span>, n-<span class=\"hljs-number\">1</span>):\n        xk = a + h*i\n        xk1 = a + h*(i-<span class=\"hljs-number\">1</span>)\n        s = s + func(xk) + <span class=\"hljs-number\">2</span>*func((xk1+xk)/<span class=\"hljs-number\">2</span>)\n    x = a + h*n\n    x1 = a + h*(n-<span class=\"hljs-number\">1</span>)\n    s += <span class=\"hljs-number\">2</span> *func((x1 + x)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> s*h/<span class=\"hljs-number\">3.0</span></code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"some-input-data\">Some input data</h2>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">f = <span class=\"hljs-keyword\">lambda</span> x: (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\nn = <span class=\"hljs-number\">10000</span>  \na = <span class=\"hljs-number\">2.0</span>\nb = <span class=\"hljs-number\">3.0</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Result: \"</span>, simpsone(a, b, n, f))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"2\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">404153016168566</span>\n</pre></div></div></div></div>",
    "uk": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>Simpson's Rule is a numerical method that approximates the value of a definite integral by using quadratic functions. This method is named after the English mathematician Thomas Simpson (1710−1761).</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simpsone</span>(<span class=\"hljs-params\">a, b, n, func</span>):\n    h = <span class=\"hljs-built_in\">float</span>((b-a)/n)\n    s = (func(a) + func(b)) * <span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> np.arange(<span class=\"hljs-number\">0</span>, n-<span class=\"hljs-number\">1</span>):\n        xk = a + h*i\n        xk1 = a + h*(i-<span class=\"hljs-number\">1</span>)\n        s = s + func(xk) + <span class=\"hljs-number\">2</span>*func((xk1+xk)/<span class=\"hljs-number\">2</span>)\n    x = a + h*n\n    x1 = a + h*(n-<span class=\"hljs-number\">1</span>)\n    s += <span class=\"hljs-number\">2</span> *func((x1 + x)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> s*h/<span class=\"hljs-number\">3.0</span></code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"some-input-data\">Some input data</h2>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">f = <span class=\"hljs-keyword\">lambda</span> x: (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\nn = <span class=\"hljs-number\">10000</span>  \na = <span class=\"hljs-number\">2.0</span>\nb = <span class=\"hljs-number\">3.0</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Result: \"</span>, simpsone(a, b, n, f))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"2\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">404153016168566</span>\n</pre></div></div></div></div>",
    "hr": "<div class=\"nb-notebook\"><div class=\"nb-worksheet\"><div class=\"nb-cell nb-markdown-cell\"><p>Simpson's Rule is a numerical method that approximates the value of a definite integral by using quadratic functions. This method is named after the English mathematician Thomas Simpson (1710−1761).</p>\n</div><div class=\"nb-cell nb-markdown-cell\"><p>Let's check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\varepsilon = 0.001$</p>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"1\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\"><span class=\"hljs-keyword\">import</span> math \n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">simpsone</span>(<span class=\"hljs-params\">a, b, n, func</span>):\n    h = <span class=\"hljs-built_in\">float</span>((b-a)/n)\n    s = (func(a) + func(b)) * <span class=\"hljs-number\">0.5</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> np.arange(<span class=\"hljs-number\">0</span>, n-<span class=\"hljs-number\">1</span>):\n        xk = a + h*i\n        xk1 = a + h*(i-<span class=\"hljs-number\">1</span>)\n        s = s + func(xk) + <span class=\"hljs-number\">2</span>*func((xk1+xk)/<span class=\"hljs-number\">2</span>)\n    x = a + h*n\n    x1 = a + h*(n-<span class=\"hljs-number\">1</span>)\n    s += <span class=\"hljs-number\">2</span> *func((x1 + x)/<span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> s*h/<span class=\"hljs-number\">3.0</span></code></pre></div></div><div class=\"nb-cell nb-markdown-cell\"><h2 id=\"some-input-data\">Some input data</h2>\n</div><div class=\"nb-cell nb-code-cell\"><div class=\"nb-input\" data-prompt-number=\"2\"><pre class=\"\"><code class=\"lang-python hljs\" data-language=\"python\">f = <span class=\"hljs-keyword\">lambda</span> x: (math.e**x / <span class=\"hljs-number\">2</span>)*(math.cos(x)-math.sin(x))\n\nn = <span class=\"hljs-number\">10000</span>  \na = <span class=\"hljs-number\">2.0</span>\nb = <span class=\"hljs-number\">3.0</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Result: \"</span>, simpsone(a, b, n, f))</code></pre></div><div class=\"nb-output\" data-prompt-number=\"2\"><pre class=\"nb-stdout\"><span class=\"hljs-attribute\">Result</span>:  -<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">404153016168566</span>\n</pre></div></div></div></div>"
  },
  "implementations": {
    "jupyter": {
      "dir": "numerical_methods/the_Simpson’s_method.ipynb",
      "url": "https://github.com/TheAlgorithms/jupyter/tree/master/numerical_methods/the_Simpson’s_method.ipynb",
      "code": "<span class=\"hljs-punctuation\">{</span>\n <span class=\"hljs-attr\">&quot;cells&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;Simpson&#x27;s Rule is a numerical method that approximates the value of a definite integral by using quadratic functions. This method is named after the English mathematician Thomas Simpson (1710−1761).&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;Let&#x27;s check this method for the next function: $$f(x) = ({e^x / 2})*(cos(x)-sin(x))$$ with $\\\\varepsilon = 0.001$&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;import math \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;import numpy as np\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;def simpsone(a, b, n, func):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    h = float((b-a)/n)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    s = (func(a) + func(b)) * 0.5\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    for i in np.arange(0, n-1):\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        xk = a + h*i\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        xk1 = a + h*(i-1)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;        s = s + func(xk) + 2*func((xk1+xk)/2)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    x = a + h*n\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    x1 = a + h*(n-1)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    s += 2 *func((x1 + x)/2)\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;    return s*h/3.0&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;markdown&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;## Some input data&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;cell_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;code&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;execution_count&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span><span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;outputs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-punctuation\">{</span>\n     <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stdout&quot;</span><span class=\"hljs-punctuation\">,</span>\n     <span class=\"hljs-attr\">&quot;output_type&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;stream&quot;</span><span class=\"hljs-punctuation\">,</span>\n     <span class=\"hljs-attr\">&quot;text&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n      <span class=\"hljs-string\">&quot;Result:  -8.404153016168566\\n&quot;</span>\n     <span class=\"hljs-punctuation\">]</span>\n    <span class=\"hljs-punctuation\">}</span>\n   <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;source&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n    <span class=\"hljs-string\">&quot;f = lambda x: (math.e**x / 2)*(math.cos(x)-math.sin(x))\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;n = 10000  \\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;a = 2.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;b = 3.0\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;\\n&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-string\">&quot;print(\\&quot;Result: \\&quot;, simpsone(a, b, n, f))&quot;</span>\n   <span class=\"hljs-punctuation\">]</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;metadata&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;kernelspec&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;display_name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;Python 3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;language&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python3&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;language_info&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n   <span class=\"hljs-attr\">&quot;codemirror_mode&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">3</span>\n   <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;file_extension&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;.py&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;mimetype&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;text/x-python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;name&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;nbconvert_exporter&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;python&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;pygments_lexer&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;ipython3&quot;</span><span class=\"hljs-punctuation\">,</span>\n   <span class=\"hljs-attr\">&quot;version&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;3.7.6&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">,</span>\n <span class=\"hljs-attr\">&quot;nbformat_minor&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">4</span>\n<span class=\"hljs-punctuation\">}</span>\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
