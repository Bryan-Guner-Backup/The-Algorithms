{
  "slug": "lu-decompose",
  "name": "Lu Decompose",
  "categories": ["numericalmethods"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "numerical_methods/lu_decompose.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/numerical_methods/lu_decompose.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief [LU decomposition](https://en.wikipedia.org/wiki/LU_decompositon) of a\n * square matrix\n * \\author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iomanip&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;./lu_decomposition.h&quot;</span></span>\n\n<span class=\"hljs-comment\">/**\n * operator to print a matrix\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\nstd::ostream &amp;<span class=\"hljs-keyword\">operator</span>&lt;&lt;(std::ostream &amp;out, matrix&lt;T&gt; <span class=\"hljs-keyword\">const</span> &amp;v) {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> width = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">char</span> separator = <span class=\"hljs-string\">&#x27; &#x27;</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> row = <span class=\"hljs-number\">0</span>; row &lt; v.<span class=\"hljs-built_in\">size</span>(); row++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> col = <span class=\"hljs-number\">0</span>; col &lt; v[row].<span class=\"hljs-built_in\">size</span>(); col++)\n            out &lt;&lt; std::left &lt;&lt; std::<span class=\"hljs-built_in\">setw</span>(width) &lt;&lt; std::<span class=\"hljs-built_in\">setfill</span>(separator)\n                &lt;&lt; v[row][col];\n        out &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-keyword\">return</span> out;\n}\n\n<span class=\"hljs-comment\">/**\n * Test LU decomposition\n * \\todo better ways to self-check a matrix output?\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test1</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-type\">int</span> mat_size = <span class=\"hljs-number\">3</span>;  <span class=\"hljs-comment\">// default matrix size</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> range = <span class=\"hljs-number\">50</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> range2 = range &gt;&gt; <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">/* Create a square matrix with random values */</span>\n    <span class=\"hljs-function\">matrix&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">A</span><span class=\"hljs-params\">(mat_size, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt;(mat_size))</span></span>;\n    <span class=\"hljs-function\">matrix&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">L</span><span class=\"hljs-params\">(mat_size, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt;(mat_size))</span></span>;  <span class=\"hljs-comment\">// output</span>\n    <span class=\"hljs-function\">matrix&lt;<span class=\"hljs-type\">double</span>&gt; <span class=\"hljs-title\">U</span><span class=\"hljs-params\">(mat_size, std::valarray&lt;<span class=\"hljs-type\">double</span>&gt;(mat_size))</span></span>;  <span class=\"hljs-comment\">// output</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++) {\n        <span class=\"hljs-comment\">// calloc so that all valeus are &#x27;0&#x27; by default</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; mat_size; j++)\n            <span class=\"hljs-comment\">/* create random values in the limits [-range2, range-1] */</span>\n            A[i][j] = <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(std::<span class=\"hljs-built_in\">rand</span>() % range - range2);\n    }\n\n    std::<span class=\"hljs-type\">clock_t</span> <span class=\"hljs-type\">start_t</span> = std::<span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-built_in\">lu_decomposition</span>(A, &amp;L, &amp;U);\n    std::<span class=\"hljs-type\">clock_t</span> <span class=\"hljs-type\">end_t</span> = std::<span class=\"hljs-built_in\">clock</span>();\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Time taken: &quot;</span>\n              &lt;&lt; <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-type\">double</span>&gt;(<span class=\"hljs-type\">end_t</span> - <span class=\"hljs-type\">start_t</span>) / CLOCKS_PER_SEC &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;A = \\n&quot;</span> &lt;&lt; A &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;L = \\n&quot;</span> &lt;&lt; L &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;U = \\n&quot;</span> &lt;&lt; U &lt;&lt; <span class=\"hljs-string\">&quot;\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Test determinant computation using LU decomposition\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test2</span><span class=\"hljs-params\">()</span> </span>{\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Determinant test 1...&quot;</span>;\n    <span class=\"hljs-function\">matrix&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">A1</span><span class=\"hljs-params\">({{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">6</span>}, {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>}})</span></span>;\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">determinant_lu</span>(A1) == <span class=\"hljs-number\">-48</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Determinant test 2...&quot;</span>;\n    <span class=\"hljs-function\">matrix&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">A2</span><span class=\"hljs-params\">({{<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>}, {<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>}})</span></span>;\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">determinant_lu</span>(A2) == <span class=\"hljs-number\">0</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Determinant test 3...&quot;</span>;\n    <span class=\"hljs-function\">matrix&lt;<span class=\"hljs-type\">float</span>&gt; <span class=\"hljs-title\">A3</span><span class=\"hljs-params\">({{<span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">2.3</span>, <span class=\"hljs-number\">3.4</span>}, {<span class=\"hljs-number\">4.5</span>, <span class=\"hljs-number\">5.6</span>, <span class=\"hljs-number\">6.7</span>}, {<span class=\"hljs-number\">7.8</span>, <span class=\"hljs-number\">8.9</span>, <span class=\"hljs-number\">9.0</span>}})</span></span>;\n    <span class=\"hljs-built_in\">assert</span>(<span class=\"hljs-built_in\">determinant_lu</span>(A3) == <span class=\"hljs-number\">3.63</span>);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;passed\\n&quot;</span>;\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> **argv)</span> </span>{\n    std::<span class=\"hljs-built_in\">srand</span>(std::<span class=\"hljs-built_in\">time</span>(<span class=\"hljs-literal\">NULL</span>));  <span class=\"hljs-comment\">// random number initializer</span>\n\n    <span class=\"hljs-built_in\">test1</span>();\n    <span class=\"hljs-built_in\">test2</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "c": {
      "dir": "numerical_methods/lu_decompose.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/numerical_methods/lu_decompose.c",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief [LU decomposition](https://en.wikipedia.org/wiki/LU_decompositon) of a\n * square matrix\n * \\author [Krishna Vedala](https://github.com/kvedala)\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;time.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _OPENMP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;omp.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n\n<span class=\"hljs-comment\">/** Perform LU decomposition on matrix\n * \\param[in] A matrix to decompose\n * \\param[out] L output L matrix\n * \\param[out] U output U matrix\n * \\param[in] mat_size input square matrix size\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">lu_decomposition</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> **A, <span class=\"hljs-type\">double</span> **L, <span class=\"hljs-type\">double</span> **U, <span class=\"hljs-type\">int</span> mat_size)</span>\n{\n    <span class=\"hljs-type\">int</span> row, col, j;\n\n    <span class=\"hljs-comment\">// regularize each row</span>\n    <span class=\"hljs-keyword\">for</span> (row = <span class=\"hljs-number\">0</span>; row &lt; mat_size; row++)\n    {\n        <span class=\"hljs-comment\">// Upper triangular matrix</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _OPENMP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> omp for</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n        <span class=\"hljs-keyword\">for</span> (col = row; col &lt; mat_size; col++)\n        {\n            <span class=\"hljs-comment\">// Summation of L[i,j] * U[j,k]</span>\n            <span class=\"hljs-type\">double</span> lu_sum = <span class=\"hljs-number\">0.</span>;\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; row; j++) lu_sum += L[row][j] * U[j][col];\n\n            <span class=\"hljs-comment\">// Evaluate U[i,k]</span>\n            U[row][col] = A[row][col] - lu_sum;\n        }\n\n        <span class=\"hljs-comment\">// Lower triangular matrix</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _OPENMP</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">pragma</span> omp for</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n        <span class=\"hljs-keyword\">for</span> (col = row; col &lt; mat_size; col++)\n        {\n            <span class=\"hljs-keyword\">if</span> (row == col)\n            {\n                L[row][col] = <span class=\"hljs-number\">1.</span>;\n                <span class=\"hljs-keyword\">continue</span>;\n            }\n\n            <span class=\"hljs-comment\">// Summation of L[i,j] * U[j,k]</span>\n            <span class=\"hljs-type\">double</span> lu_sum = <span class=\"hljs-number\">0.</span>;\n            <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; row; j++) lu_sum += L[col][j] * U[j][row];\n\n            <span class=\"hljs-comment\">// Evaluate U[i,k]</span>\n            L[col][row] = (A[col][row] - lu_sum) / U[row][row];\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/** Function to display square matrix */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">display</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> **A, <span class=\"hljs-type\">int</span> N)</span>\n{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; N; i++)\n    {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; N; j++)\n        {\n            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;% 3.3g \\t&quot;</span>, A[i][j]);\n        }\n        <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);\n    }\n}\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> **argv)</span>\n{\n    <span class=\"hljs-type\">int</span> mat_size = <span class=\"hljs-number\">3</span>;  <span class=\"hljs-comment\">// default matrix size</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> range = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">int</span> range2 = range &gt;&gt; <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-keyword\">if</span> (argc == <span class=\"hljs-number\">2</span>)\n        mat_size = atoi(argv[<span class=\"hljs-number\">1</span>]);\n\n    srand(time(<span class=\"hljs-literal\">NULL</span>));  <span class=\"hljs-comment\">// random number initializer</span>\n\n    <span class=\"hljs-comment\">/* Create a square matrix with random values */</span>\n    <span class=\"hljs-type\">double</span> **A = (<span class=\"hljs-type\">double</span> **)<span class=\"hljs-built_in\">malloc</span>(mat_size * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span> *));\n    <span class=\"hljs-type\">double</span> **L = (<span class=\"hljs-type\">double</span> **)<span class=\"hljs-built_in\">malloc</span>(mat_size * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span> *));  <span class=\"hljs-comment\">// output</span>\n    <span class=\"hljs-type\">double</span> **U = (<span class=\"hljs-type\">double</span> **)<span class=\"hljs-built_in\">malloc</span>(mat_size * <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span> *));  <span class=\"hljs-comment\">// output</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++)\n    {\n        <span class=\"hljs-comment\">// calloc so that all valeus are &#x27;0&#x27; by default</span>\n        A[i] = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">calloc</span>(mat_size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>));\n        L[i] = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">calloc</span>(mat_size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>));\n        U[i] = (<span class=\"hljs-type\">double</span> *)<span class=\"hljs-built_in\">calloc</span>(mat_size, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">double</span>));\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; mat_size; j++)\n            <span class=\"hljs-comment\">/* create random values in the limits [-range2, range-1] */</span>\n            A[i][j] = (<span class=\"hljs-type\">double</span>)(rand() % range - range2);\n    }\n\n    lu_decomposition(A, L, U, mat_size);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;A = \\n&quot;</span>);\n    display(A, mat_size);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nL = \\n&quot;</span>);\n    display(L, mat_size);\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\nU = \\n&quot;</span>);\n    display(U, mat_size);\n\n    <span class=\"hljs-comment\">/* Free dynamically allocated memory */</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; mat_size; i++)\n    {\n        <span class=\"hljs-built_in\">free</span>(A[i]);\n        <span class=\"hljs-built_in\">free</span>(L[i]);\n        <span class=\"hljs-built_in\">free</span>(U[i]);\n    }\n    <span class=\"hljs-built_in\">free</span>(A);\n    <span class=\"hljs-built_in\">free</span>(L);\n    <span class=\"hljs-built_in\">free</span>(U);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}"
    },
    "julia": {
      "dir": "src/matrix/lu_decompose.jl",
      "url": "https://github.com/TheAlgorithms/julia/tree/master/src/matrix/lu_decompose.jl",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\n    lu_decompose(mat)\nDecomposes a `n x n` non singular matrix into a lower triangular matrix (L) and an upper triangular matrix (U)\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">function</span> lu_decompose(mat)\n\tn = mat |&gt; size |&gt; first\n\tL = zeros(n, n)\n\tU = zeros(n, n)\n\n\t<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:n\n\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i:n\n\t\t\ts = <span class=\"hljs-number\">0</span>\n\t\t\t<span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:i\n\t\t\t\ts += L[i,k] * U[k,j]\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t\tU[i,j] = mat[i,j] - s\n\t\t<span class=\"hljs-keyword\">end</span>\n\n\t\t<span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> i:n\n\t\t\t<span class=\"hljs-keyword\">if</span> i == k\n\t\t\t\tL[i,i] = <span class=\"hljs-number\">1</span>\n    \t\t\t<span class=\"hljs-keyword\">else</span>\n\t\t\t\ts = <span class=\"hljs-number\">0</span>\n\t\t\t\t<span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>:i\n\t\t\t\t\ts += L[k,j] * U[j,i]\n\t\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t\t\tL[k,i] = (mat[k,i] - s) / U[i,i]\n\t\t\t<span class=\"hljs-keyword\">end</span>\n\t\t<span class=\"hljs-keyword\">end</span>\n\t<span class=\"hljs-keyword\">end</span>\n\n\t<span class=\"hljs-keyword\">return</span> L, U\n<span class=\"hljs-keyword\">end</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Jean-Francois Baffier",
      "email": "jf@baffier.fr",
      "commits": 1
    },
    {
      "name": "Ved Mahajan",
      "email": "74182892+Ved-Mahajan@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 9
    }
  ],
  "explanationUrl": {}
}
