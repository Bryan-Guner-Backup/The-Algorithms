{
  "slug": "topkwords",
  "name": "TopKWords",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "java": {
      "dir": "Others/TopKWords.java",
      "url": "https://github.com/TheAlgorithms/java/tree/master/Others/TopKWords.java",
      "code": "<span class=\"hljs-keyword\">package</span> Others;\n\n<span class=\"hljs-keyword\">import</span> java.io.*;\n<span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-comment\">/* display the most frequent K words in the file and the times it appear\nin the file â€“ shown in order (ignore case and periods) */</span>\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TopKWords</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CountWords</span> {\n    <span class=\"hljs-keyword\">private</span> String fileName;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CountWords</span><span class=\"hljs-params\">(String fileName)</span> {\n      <span class=\"hljs-built_in\">this</span>.fileName = fileName;\n    }\n\n    <span class=\"hljs-keyword\">public</span> Map&lt;String, Integer&gt; <span class=\"hljs-title function_\">getDictionary</span><span class=\"hljs-params\">()</span> {\n      Map&lt;String, Integer&gt; dictionary = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();\n      <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;\n\n      <span class=\"hljs-keyword\">try</span> {\n\n        fis = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(fileName); <span class=\"hljs-comment\">// open the file</span>\n        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">in</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// init a empty word</span>\n        in = fis.read(); <span class=\"hljs-comment\">// read one character</span>\n\n        <span class=\"hljs-keyword\">while</span> (-<span class=\"hljs-number\">1</span> != in) {\n          <span class=\"hljs-keyword\">if</span> (Character.isLetter((<span class=\"hljs-type\">char</span>) in)) {\n            s += (<span class=\"hljs-type\">char</span>) in; <span class=\"hljs-comment\">// if get a letter, append to s</span>\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// this branch means an entire word has just been read</span>\n            <span class=\"hljs-keyword\">if</span> (s.length() &gt; <span class=\"hljs-number\">0</span>) {\n              <span class=\"hljs-comment\">// see whether word exists or not</span>\n              <span class=\"hljs-keyword\">if</span> (dictionary.containsKey(s)) {\n                <span class=\"hljs-comment\">// if exist, count++</span>\n                dictionary.put(s, dictionary.get(s) + <span class=\"hljs-number\">1</span>);\n              } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// if not exist, initiate count of this word with 1</span>\n                dictionary.put(s, <span class=\"hljs-number\">1</span>);\n              }\n            }\n            s = <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">// reInit a empty word</span>\n          }\n          in = fis.read();\n        }\n        <span class=\"hljs-keyword\">return</span> dictionary;\n      } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n        e.printStackTrace();\n      } <span class=\"hljs-keyword\">finally</span> {\n        <span class=\"hljs-keyword\">try</span> {\n          <span class=\"hljs-comment\">// you always have to close the I/O streams</span>\n          <span class=\"hljs-keyword\">if</span> (fis != <span class=\"hljs-literal\">null</span>) fis.close();\n        } <span class=\"hljs-keyword\">catch</span> (IOException e) {\n          e.printStackTrace();\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> {\n    <span class=\"hljs-comment\">// you can replace the filePath with yours</span>\n    <span class=\"hljs-type\">CountWords</span> <span class=\"hljs-variable\">cw</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CountWords</span>(<span class=\"hljs-string\">&quot;/Users/lisanaaa/Desktop/words.txt&quot;</span>);\n    Map&lt;String, Integer&gt; dictionary =\n        cw.getDictionary(); <span class=\"hljs-comment\">// get the words dictionary: {word: frequency}</span>\n\n    <span class=\"hljs-comment\">// we change the map to list for convenient sort</span>\n    List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(dictionary.entrySet());\n\n    <span class=\"hljs-comment\">// sort by lambda valueComparator</span>\n    list.sort(Comparator.comparing(m -&gt; m.getValue()));\n\n    <span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">input</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">k</span> <span class=\"hljs-operator\">=</span> input.nextInt();\n    <span class=\"hljs-keyword\">while</span> (k &gt; list.size()) {\n      System.out.println(<span class=\"hljs-string\">&quot;Retype a number, your number is too large&quot;</span>);\n      input = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);\n      k = input.nextInt();\n    }\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; k; i++) {\n      System.out.println(list.get(list.size() - i - <span class=\"hljs-number\">1</span>));\n    }\n    input.close();\n  }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Maria Lungeanu",
      "email": "Maria.Lungeanu@anritsu.com",
      "commits": 1
    },
    {
      "name": "Hassan",
      "email": "hassan.elseoudy@gmail.com",
      "commits": 1
    },
    {
      "name": "Libin Yang",
      "email": "szuyanglb@outlook.com",
      "commits": 2
    },
    {
      "name": "Keqi Huang",
      "email": "keqih@smu.edu",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
