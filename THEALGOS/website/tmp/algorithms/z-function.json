{
  "slug": "z-function",
  "name": "Z Function",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/z_function.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/z_function.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://cp-algorithms.com/string/z-function.html\n\nZ-function or Z algorithm\n\nEfficient algorithm for pattern occurrence in a string\n\nTime Complexity: O(n) - where n is the length of the string\n\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">z_function</span>(<span class=\"hljs-params\">input_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    For the given string this function computes value for each index,\n    which represents the maximal length substring starting from the index\n    and is the same as the prefix of the same size\n\n    e.x.  for string &#x27;abab&#x27; for second index value would be 2\n\n    For the value of the first element the algorithm always returns 0\n\n    &gt;&gt;&gt; z_function(&quot;abracadabra&quot;)\n    [0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1]\n    &gt;&gt;&gt; z_function(&quot;aaaa&quot;)\n    [0, 3, 2, 1]\n    &gt;&gt;&gt; z_function(&quot;zxxzxxz&quot;)\n    [0, 0, 0, 4, 0, 0, 1]\n    &quot;&quot;&quot;</span>\n    z_result = [<span class=\"hljs-number\">0</span>] * <span class=\"hljs-built_in\">len</span>(input_str)\n\n    <span class=\"hljs-comment\"># initialize interval&#x27;s left pointer and right pointer</span>\n    left_pointer, right_pointer = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\n\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(input_str)):\n        <span class=\"hljs-comment\"># case when current index is inside the interval</span>\n        <span class=\"hljs-keyword\">if</span> i &lt;= right_pointer:\n            min_edge = <span class=\"hljs-built_in\">min</span>(right_pointer - i + <span class=\"hljs-number\">1</span>, z_result[i - left_pointer])\n            z_result[i] = min_edge\n\n        <span class=\"hljs-keyword\">while</span> go_next(i, z_result, input_str):\n            z_result[i] += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># if new index&#x27;s result gives us more right interval,</span>\n        <span class=\"hljs-comment\"># we&#x27;ve to update left_pointer and right_pointer</span>\n        <span class=\"hljs-keyword\">if</span> i + z_result[i] - <span class=\"hljs-number\">1</span> &gt; right_pointer:\n            left_pointer, right_pointer = i, i + z_result[i] - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> z_result\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">go_next</span>(<span class=\"hljs-params\">i, z_result, s</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Check if we have to move forward to the next characters or not\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> i + z_result[i] &lt; <span class=\"hljs-built_in\">len</span>(s) <span class=\"hljs-keyword\">and</span> s[z_result[i]] == s[i + z_result[i]]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">find_pattern</span>(<span class=\"hljs-params\">pattern: <span class=\"hljs-built_in\">str</span>, input_str: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Example of using z-function for pattern occurrence\n    Given function returns the number of times &#x27;pattern&#x27;\n    appears in &#x27;input_str&#x27; as a substring\n\n    &gt;&gt;&gt; find_pattern(&quot;abr&quot;, &quot;abracadabra&quot;)\n    2\n    &gt;&gt;&gt; find_pattern(&quot;a&quot;, &quot;aaaa&quot;)\n    4\n    &gt;&gt;&gt; find_pattern(&quot;xz&quot;, &quot;zxxzxxz&quot;)\n    2\n    &quot;&quot;&quot;</span>\n    answer = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-comment\"># concatenate &#x27;pattern&#x27; and &#x27;input_str&#x27; and call z_function</span>\n    <span class=\"hljs-comment\"># with concatenated string</span>\n    z_result = z_function(pattern + input_str)\n\n    <span class=\"hljs-keyword\">for</span> val <span class=\"hljs-keyword\">in</span> z_result:\n        <span class=\"hljs-comment\"># if value is greater then length of the pattern string</span>\n        <span class=\"hljs-comment\"># that means this index is starting position of substring</span>\n        <span class=\"hljs-comment\"># which is equal to pattern string</span>\n        <span class=\"hljs-keyword\">if</span> val &gt;= <span class=\"hljs-built_in\">len</span>(pattern):\n            answer += <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> answer\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/ZFunction.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/ZFunction.fs",
      "code": "ï»¿<span class=\"hljs-comment\">///https://cp-algorithms.com/string/z-function.html</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">///Z-function or Z algorithm</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">///Efficient algorithm for pattern occurrence in a string</span>\r\n<span class=\"hljs-comment\">///</span>\r\n<span class=\"hljs-comment\">///Time Complexity: O(n) - where n is the length of the string</span>\r\n<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\r\n\r\n<span class=\"hljs-keyword\">module</span> ZFunction =\r\n\r\n    <span class=\"hljs-keyword\">let</span> goNext (i, zResult: array&lt;int&gt;, s: string) =\r\n        i + zResult.[i] &lt; s.Length\r\n        &amp;&amp; s.[zResult.[i]] = s.[i + zResult.[i]]\r\n\r\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// For the given string this function computes value for each index,</span>\r\n    <span class=\"hljs-comment\">/// which represents the maximal length substring starting from the index</span>\r\n    <span class=\"hljs-comment\">/// and is the same as the prefix of the same size</span>\r\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;inputString&quot;&gt;&lt;/param&gt;</span>\r\n    <span class=\"hljs-comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\r\n    <span class=\"hljs-keyword\">let</span> zFunction (inputString: string): list&lt;int&gt; =\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> zResult =\r\n            [| <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> .. inputString.Length -&gt; <span class=\"hljs-number\">0</span> |]\r\n        <span class=\"hljs-comment\">// Initialize interval&#x27;s left pointer and right pointer</span>\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> leftPointer, rightPointer = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>\r\n\r\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span> .. inputString.Length - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-comment\">// Case when current index is inside the interval</span>\r\n            <span class=\"hljs-keyword\">if</span> i &lt;= rightPointer <span class=\"hljs-keyword\">then</span>\r\n                <span class=\"hljs-keyword\">let</span> minEdge =\r\n                    min (rightPointer - i + <span class=\"hljs-number\">1</span>) (zResult.[i - leftPointer])\r\n\r\n                zResult.SetValue(minEdge, i)\r\n\r\n            <span class=\"hljs-keyword\">while</span> goNext (i, zResult, inputString) <span class=\"hljs-keyword\">do</span>\r\n                zResult.[i] &lt;- zResult.[i] + <span class=\"hljs-number\">1</span>\r\n\r\n            <span class=\"hljs-comment\">// if new index&#x27;s result gives us more right interval,</span>\r\n            <span class=\"hljs-comment\">// we&#x27;ve to update left_pointer and right_pointer</span>\r\n            <span class=\"hljs-keyword\">if</span> i + zResult.[i] - <span class=\"hljs-number\">1</span> &gt; rightPointer <span class=\"hljs-keyword\">then</span>\r\n                leftPointer &lt;- i\r\n                rightPointer &lt;- i + zResult.[i] - <span class=\"hljs-number\">1</span>\r\n\r\n        zResult |&gt; List.ofArray\r\n\r\n\r\n    <span class=\"hljs-keyword\">let</span> findPattern (pattern: string, inputString: string): int =\r\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> answer = <span class=\"hljs-number\">0</span>\r\n        <span class=\"hljs-comment\">// Concatenate &#x27;pattern&#x27; and &#x27;input_str&#x27; and call z_function</span>\r\n        <span class=\"hljs-comment\">// with concatenated string</span>\r\n        <span class=\"hljs-keyword\">let</span> zResult = zFunction (pattern + inputString)\r\n\r\n        <span class=\"hljs-keyword\">for</span> value <span class=\"hljs-keyword\">in</span> zResult <span class=\"hljs-keyword\">do</span>\r\n            <span class=\"hljs-comment\">// If value is greater then length of the pattern string</span>\r\n            <span class=\"hljs-comment\">// that means this index is starting position of substring</span>\r\n            <span class=\"hljs-comment\">// which is equal to pattern string</span>\r\n            <span class=\"hljs-keyword\">if</span> value &gt;= pattern.Length <span class=\"hljs-keyword\">then</span>\r\n                answer &lt;- answer + <span class=\"hljs-number\">1</span>\r\n\r\n        answer\r\n"
    }
  },
  "contributors": [
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "vakhokoto",
      "email": "v.kotoreishvili@gmail.com",
      "commits": 2
    },
    {
      "name": "Nika Losaberidze",
      "email": "nlosa16@freeuni.edu.ge",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
