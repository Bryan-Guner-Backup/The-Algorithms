{
  "slug": "two-pointer",
  "name": "Two Pointer",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/two_pointer.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/two_pointer.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nGiven a sorted array of integers, return indices of the two numbers such\nthat they add up to a specific target using the two pointers technique.\n\nYou may assume that each input would have exactly one solution, and you\nmay not use the same element twice.\n\nThis is an alternative solution of the two-sum problem, which uses a\nmap to solve the problem. Hence can not solve the issue if there is a\nconstraint not use the same index twice. [1]\n\nExample:\nGiven nums = [2, 7, 11, 15], target = 9,\n\nBecause nums[0] + nums[1] = 2 + 7 = 9,\nreturn [0, 1].\n\n[1]: https://github.com/TheAlgorithms/Python/blob/master/other/two_sum.py\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">two_pointer</span>(<span class=\"hljs-params\">nums: <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>], target: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    &gt;&gt;&gt; two_pointer([2, 7, 11, 15], 9)\n    [0, 1]\n    &gt;&gt;&gt; two_pointer([2, 7, 11, 15], 17)\n    [0, 3]\n    &gt;&gt;&gt; two_pointer([2, 7, 11, 15], 18)\n    [1, 2]\n    &gt;&gt;&gt; two_pointer([2, 7, 11, 15], 26)\n    [2, 3]\n    &gt;&gt;&gt; two_pointer([1, 3, 3], 6)\n    [1, 2]\n    &gt;&gt;&gt; two_pointer([2, 7, 11, 15], 8)\n    []\n    &gt;&gt;&gt; two_pointer([3 * i for i in range(10)], 19)\n    []\n    &gt;&gt;&gt; two_pointer([1, 2, 3], 6)\n    []\n    &quot;&quot;&quot;</span>\n    i = <span class=\"hljs-number\">0</span>\n    j = <span class=\"hljs-built_in\">len</span>(nums) - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">while</span> i &lt; j:\n\n        <span class=\"hljs-keyword\">if</span> nums[i] + nums[j] == target:\n            <span class=\"hljs-keyword\">return</span> [i, j]\n        <span class=\"hljs-keyword\">elif</span> nums[i] + nums[j] &lt; target:\n            i = i + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            j = j - <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-keyword\">return</span> []\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{two_pointer([<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">15</span>], <span class=\"hljs-number\">9</span>) = }</span>&quot;</span>)\n"
    }
  },
  "contributors": [
    {
      "name": "Shabab Karim",
      "email": "shababkarim93@gmail.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
