{
  "slug": "shuf",
  "name": "Shuf",
  "categories": ["dynamicprogramming"],
  "body": {},
  "implementations": {
    "javascript": {
      "dir": "Dynamic-Programming/Shuf.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Dynamic-Programming/Shuf.js",
      "code": "<span class=\"hljs-comment\">/*\nGiven a data set of an unknown size,\nGet a random sample in a random order\nIt&#x27;s used in data analytics, often as a way to get a small random sample from a data lake or warehouse, or from a large CSV file\n*/</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shuf</span> (datasetSource, sampleSize) {\n  <span class=\"hljs-keyword\">const</span> output = <span class=\"hljs-title function_\">fillBaseSample</span>(datasetSource, sampleSize)\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">randomizeOutputFromDataset</span>(datasetSource, output)\n}\n\n<span class=\"hljs-comment\">/**\n * Fills the output if possible, with the minimum number of values\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Iterable.&lt;T&gt;</span>} datasetSource The iterable source of data\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} sampleSize The size of the sample to extract from the dataset\n * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Array.&lt;T&gt;</span>} The random sample, as an array\n * <span class=\"hljs-doctag\">@template</span> <span class=\"hljs-variable\">T</span>\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fillBaseSample</span> (datasetSource, sampleSize) {\n  <span class=\"hljs-keyword\">let</span> filledIndexes = []\n  <span class=\"hljs-keyword\">let</span> output = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(sampleSize)\n\n  <span class=\"hljs-comment\">// Spread data out filling the array</span>\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">const</span> iterator = datasetSource.<span class=\"hljs-title function_\">next</span>()\n    <span class=\"hljs-keyword\">if</span> (iterator.<span class=\"hljs-property\">done</span>) <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">let</span> insertTo = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * output.<span class=\"hljs-property\">length</span>)\n    <span class=\"hljs-keyword\">while</span> (filledIndexes.<span class=\"hljs-title function_\">includes</span>(insertTo)) {\n      insertTo++\n      <span class=\"hljs-keyword\">if</span> (insertTo === output.<span class=\"hljs-property\">length</span>) {\n        insertTo = <span class=\"hljs-number\">0</span>\n      }\n    }\n    output[insertTo] = {\n      <span class=\"hljs-attr\">value</span>: iterator.<span class=\"hljs-property\">value</span>\n    }\n\n    filledIndexes = [...filledIndexes, insertTo]\n\n    <span class=\"hljs-keyword\">if</span> (filledIndexes.<span class=\"hljs-property\">length</span> === sampleSize) {\n      <span class=\"hljs-keyword\">break</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">if</span> (filledIndexes.<span class=\"hljs-property\">length</span> &lt; output.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-comment\">// Not a large enough dataset to fill the sample - trim empty values</span>\n    output = output.<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, i</span>) =&gt;</span> filledIndexes.<span class=\"hljs-title function_\">includes</span>(i))\n  }\n\n  <span class=\"hljs-keyword\">return</span> output.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">o</span>) =&gt;</span> o.<span class=\"hljs-property\">value</span>)\n}\n\n<span class=\"hljs-comment\">/**\n * Replaces values in the output randomly with new ones from the dataset\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Iterable.&lt;T&gt;</span>} datasetSource The iterable source of data\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array.&lt;T&gt;</span>} output The output so far, filled with data\n * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Array.&lt;T&gt;</span>} The random sample, as an array\n * <span class=\"hljs-doctag\">@template</span> <span class=\"hljs-variable\">T</span>\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">randomizeOutputFromDataset</span> (datasetSource, output) {\n  <span class=\"hljs-keyword\">const</span> newOutput = [...output]\n  <span class=\"hljs-keyword\">let</span> readSoFar = output.<span class=\"hljs-property\">length</span>\n\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-keyword\">const</span> iterator = datasetSource.<span class=\"hljs-title function_\">next</span>()\n    <span class=\"hljs-keyword\">if</span> (iterator.<span class=\"hljs-property\">done</span>) <span class=\"hljs-keyword\">break</span>\n    readSoFar++\n\n    <span class=\"hljs-keyword\">const</span> insertTo = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * readSoFar)\n    <span class=\"hljs-keyword\">if</span> (insertTo &lt; newOutput.<span class=\"hljs-property\">length</span>) {\n      newOutput[insertTo] = iterator.<span class=\"hljs-property\">value</span>\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> newOutput\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">main</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-comment\">/**\n   * Generates a random range of data, with values between 0 and 2^31 - 1\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">number</span>} length The number of data items to generate\n   * <span class=\"hljs-doctag\">@returns</span> {<span class=\"hljs-type\">Iterable&lt;number&gt;</span>} Random iterable data\n  */</span>\n  <span class=\"hljs-keyword\">function</span> * generateRandomData (length) {\n    <span class=\"hljs-keyword\">const</span> maxValue = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">pow</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">31</span>) - <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; length; i++) {\n      <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * maxValue)\n    }\n  }\n\n  <span class=\"hljs-keyword\">const</span> source = <span class=\"hljs-title function_\">generateRandomData</span>(<span class=\"hljs-number\">1000</span>)\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">shuf</span>(source, <span class=\"hljs-number\">10</span>)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result)\n}\n<span class=\"hljs-title function_\">main</span>()\n"
    }
  },
  "contributors": [
    {
      "name": "MarkSFrancis",
      "email": "mrkfrancis8@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
