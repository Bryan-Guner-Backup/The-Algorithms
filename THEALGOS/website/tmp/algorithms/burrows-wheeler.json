{
  "slug": "burrows-wheeler",
  "name": "Burrows Wheeler",
  "categories": ["compression"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "compression/burrows_wheeler.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/compression/burrows_wheeler.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nhttps://en.wikipedia.org/wiki/Burrows%E2%80%93Wheeler_transform\n\nThe Burrowsâ€“Wheeler transform (BWT, also called block-sorting compression)\nrearranges a character string into runs of similar characters. This is useful\nfor compression, since it tends to be easy to compress a string that has runs\nof repeated characters by techniques such as move-to-front transform and\nrun-length encoding. More importantly, the transformation is reversible,\nwithout needing to store any additional data except the position of the first\noriginal character. The BWT is thus a &quot;free&quot; method of improving the efficiency\nof text compression algorithms, costing only some extra computation.\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">all_rotations</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    :param s: The string that will be rotated len(s) times.\n    :return: A list with the rotations.\n    :raises TypeError: If s is not an instance of str.\n    Examples:\n\n    &gt;&gt;&gt; all_rotations(&quot;^BANANA|&quot;) # doctest: +NORMALIZE_WHITESPACE\n    [&#x27;^BANANA|&#x27;, &#x27;BANANA|^&#x27;, &#x27;ANANA|^B&#x27;, &#x27;NANA|^BA&#x27;, &#x27;ANA|^BAN&#x27;, &#x27;NA|^BANA&#x27;,\n    &#x27;A|^BANAN&#x27;, &#x27;|^BANANA&#x27;]\n    &gt;&gt;&gt; all_rotations(&quot;a_asa_da_casa&quot;) # doctest: +NORMALIZE_WHITESPACE\n    [&#x27;a_asa_da_casa&#x27;, &#x27;_asa_da_casaa&#x27;, &#x27;asa_da_casaa_&#x27;, &#x27;sa_da_casaa_a&#x27;,\n    &#x27;a_da_casaa_as&#x27;, &#x27;_da_casaa_asa&#x27;, &#x27;da_casaa_asa_&#x27;, &#x27;a_casaa_asa_d&#x27;,\n    &#x27;_casaa_asa_da&#x27;, &#x27;casaa_asa_da_&#x27;, &#x27;asaa_asa_da_c&#x27;, &#x27;saa_asa_da_ca&#x27;,\n    &#x27;aa_asa_da_cas&#x27;]\n    &gt;&gt;&gt; all_rotations(&quot;panamabanana&quot;) # doctest: +NORMALIZE_WHITESPACE\n    [&#x27;panamabanana&#x27;, &#x27;anamabananap&#x27;, &#x27;namabananapa&#x27;, &#x27;amabananapan&#x27;,\n    &#x27;mabananapana&#x27;, &#x27;abananapanam&#x27;, &#x27;bananapanama&#x27;, &#x27;ananapanamab&#x27;,\n    &#x27;nanapanamaba&#x27;, &#x27;anapanamaban&#x27;, &#x27;napanamabana&#x27;, &#x27;apanamabanan&#x27;]\n    &gt;&gt;&gt; all_rotations(5)\n    Traceback (most recent call last):\n        ...\n    TypeError: The parameter s type must be str.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(s, <span class=\"hljs-built_in\">str</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;The parameter s type must be str.&quot;</span>)\n\n    <span class=\"hljs-keyword\">return</span> [s[i:] + s[:i] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s))]\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">bwt_transform</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">dict</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    :param s: The string that will be used at bwt algorithm\n    :return: the string composed of the last char of each row of the ordered\n    rotations and the index of the original string at ordered rotations list\n    :raises TypeError: If the s parameter type is not str\n    :raises ValueError: If the s parameter is empty\n    Examples:\n\n    &gt;&gt;&gt; bwt_transform(&quot;^BANANA&quot;)\n    {&#x27;bwt_string&#x27;: &#x27;BNN^AAA&#x27;, &#x27;idx_original_string&#x27;: 6}\n    &gt;&gt;&gt; bwt_transform(&quot;a_asa_da_casa&quot;)\n    {&#x27;bwt_string&#x27;: &#x27;aaaadss_c__aa&#x27;, &#x27;idx_original_string&#x27;: 3}\n    &gt;&gt;&gt; bwt_transform(&quot;panamabanana&quot;)\n    {&#x27;bwt_string&#x27;: &#x27;mnpbnnaaaaaa&#x27;, &#x27;idx_original_string&#x27;: 11}\n    &gt;&gt;&gt; bwt_transform(4)\n    Traceback (most recent call last):\n        ...\n    TypeError: The parameter s type must be str.\n    &gt;&gt;&gt; bwt_transform(&#x27;&#x27;)\n    Traceback (most recent call last):\n        ...\n    ValueError: The parameter s must not be empty.\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(s, <span class=\"hljs-built_in\">str</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;The parameter s type must be str.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> s:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;The parameter s must not be empty.&quot;</span>)\n\n    rotations = all_rotations(s)\n    rotations.sort()  <span class=\"hljs-comment\"># sort the list of rotations in alphabetically order</span>\n    <span class=\"hljs-comment\"># make a string composed of the last char of each rotation</span>\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-string\">&quot;bwt_string&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>.join([word[-<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">for</span> word <span class=\"hljs-keyword\">in</span> rotations]),\n        <span class=\"hljs-string\">&quot;idx_original_string&quot;</span>: rotations.index(s),\n    }\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">reverse_bwt</span>(<span class=\"hljs-params\">bwt_string: <span class=\"hljs-built_in\">str</span>, idx_original_string: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    :param bwt_string: The string returned from bwt algorithm execution\n    :param idx_original_string: A 0-based index of the string that was used to\n    generate bwt_string at ordered rotations list\n    :return: The string used to generate bwt_string when bwt was executed\n    :raises TypeError: If the bwt_string parameter type is not str\n    :raises ValueError: If the bwt_string parameter is empty\n    :raises TypeError: If the idx_original_string type is not int or if not\n    possible to cast it to int\n    :raises ValueError: If the idx_original_string value is lower than 0 or\n    greater than len(bwt_string) - 1\n\n    &gt;&gt;&gt; reverse_bwt(&quot;BNN^AAA&quot;, 6)\n    &#x27;^BANANA&#x27;\n    &gt;&gt;&gt; reverse_bwt(&quot;aaaadss_c__aa&quot;, 3)\n    &#x27;a_asa_da_casa&#x27;\n    &gt;&gt;&gt; reverse_bwt(&quot;mnpbnnaaaaaa&quot;, 11)\n    &#x27;panamabanana&#x27;\n    &gt;&gt;&gt; reverse_bwt(4, 11)\n    Traceback (most recent call last):\n        ...\n    TypeError: The parameter bwt_string type must be str.\n    &gt;&gt;&gt; reverse_bwt(&quot;&quot;, 11)\n    Traceback (most recent call last):\n        ...\n    ValueError: The parameter bwt_string must not be empty.\n    &gt;&gt;&gt; reverse_bwt(&quot;mnpbnnaaaaaa&quot;, &quot;asd&quot;) # doctest: +NORMALIZE_WHITESPACE\n    Traceback (most recent call last):\n        ...\n    TypeError: The parameter idx_original_string type must be int or passive\n    of cast to int.\n    &gt;&gt;&gt; reverse_bwt(&quot;mnpbnnaaaaaa&quot;, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: The parameter idx_original_string must not be lower than 0.\n    &gt;&gt;&gt; reverse_bwt(&quot;mnpbnnaaaaaa&quot;, 12) # doctest: +NORMALIZE_WHITESPACE\n    Traceback (most recent call last):\n        ...\n    ValueError: The parameter idx_original_string must be lower than\n    len(bwt_string).\n    &gt;&gt;&gt; reverse_bwt(&quot;mnpbnnaaaaaa&quot;, 11.0)\n    &#x27;panamabanana&#x27;\n    &gt;&gt;&gt; reverse_bwt(&quot;mnpbnnaaaaaa&quot;, 11.4)\n    &#x27;panamabanana&#x27;\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-built_in\">isinstance</span>(bwt_string, <span class=\"hljs-built_in\">str</span>):\n        <span class=\"hljs-keyword\">raise</span> TypeError(<span class=\"hljs-string\">&quot;The parameter bwt_string type must be str.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> bwt_string:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;The parameter bwt_string must not be empty.&quot;</span>)\n    <span class=\"hljs-keyword\">try</span>:\n        idx_original_string = <span class=\"hljs-built_in\">int</span>(idx_original_string)\n    <span class=\"hljs-keyword\">except</span> ValueError:\n        <span class=\"hljs-keyword\">raise</span> TypeError(\n            <span class=\"hljs-string\">&quot;The parameter idx_original_string type must be int or passive&quot;</span>\n            <span class=\"hljs-string\">&quot; of cast to int.&quot;</span>\n        )\n    <span class=\"hljs-keyword\">if</span> idx_original_string &lt; <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;The parameter idx_original_string must not be lower than 0.&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> idx_original_string &gt;= <span class=\"hljs-built_in\">len</span>(bwt_string):\n        <span class=\"hljs-keyword\">raise</span> ValueError(\n            <span class=\"hljs-string\">&quot;The parameter idx_original_string must be lower than&quot;</span> <span class=\"hljs-string\">&quot; len(bwt_string).&quot;</span>\n        )\n\n    ordered_rotations = [<span class=\"hljs-string\">&quot;&quot;</span>] * <span class=\"hljs-built_in\">len</span>(bwt_string)\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(bwt_string)):\n        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(bwt_string)):\n            ordered_rotations[i] = bwt_string[i] + ordered_rotations[i]\n        ordered_rotations.sort()\n    <span class=\"hljs-keyword\">return</span> ordered_rotations[idx_original_string]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    entry_msg = <span class=\"hljs-string\">&quot;Provide a string that I will generate its BWT transform: &quot;</span>\n    s = <span class=\"hljs-built_in\">input</span>(entry_msg).strip()\n    result = bwt_transform(s)\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">f&quot;Burrows Wheeler transform for string &#x27;<span class=\"hljs-subst\">{s}</span>&#x27; results &quot;</span>\n        <span class=\"hljs-string\">f&quot;in &#x27;<span class=\"hljs-subst\">{result[<span class=\"hljs-string\">&#x27;bwt_string&#x27;</span>]}</span>&#x27;&quot;</span>\n    )\n    original_string = reverse_bwt(result[<span class=\"hljs-string\">&quot;bwt_string&quot;</span>], result[<span class=\"hljs-string\">&quot;idx_original_string&quot;</span>])\n    <span class=\"hljs-built_in\">print</span>(\n        <span class=\"hljs-string\">f&quot;Reversing Burrows Wheeler transform for entry &#x27;<span class=\"hljs-subst\">{result[<span class=\"hljs-string\">&#x27;bwt_string&#x27;</span>]}</span>&#x27; &quot;</span>\n        <span class=\"hljs-string\">f&quot;we get original string &#x27;<span class=\"hljs-subst\">{original_string}</span>&#x27;&quot;</span>\n    )\n"
    }
  },
  "contributors": [
    {
      "name": "CarsonHam",
      "email": "carson.ham@utexas.edu",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Bruno Simas Hadlich",
      "email": "brunosimashadlich@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
