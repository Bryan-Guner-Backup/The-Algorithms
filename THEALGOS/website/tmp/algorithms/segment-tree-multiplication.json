{
  "slug": "segment-tree-multiplication",
  "name": "Segment Tree Multiplication",
  "categories": ["datastructures", "linkedlist"],
  "body": {},
  "implementations": {
    "c-sharp": {
      "dir": "DataStructures/SegmentTrees/SegmentTreeApply.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/DataStructures/SegmentTrees/SegmentTreeApply.cs",
      "code": "<span class=\"hljs-keyword\">using</span> System;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">DataStructures.SegmentTrees</span>\n{\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     This is an extension of a segment tree, which allows applying distributive operations to a subarray</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (in this case multiplication).</span>\n    <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SegmentTreeApply</span> : <span class=\"hljs-title\">SegmentTree</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Initializes a new instance of the <span class=\"hljs-doctag\">&lt;see cref=&quot;SegmentTreeApply&quot; /&gt;</span> class.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Runtime complexity: O(n) where n equals the array-length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;arr&quot;&gt;</span>Array on which the operations should be made.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">SegmentTreeApply</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span>[] arr</span>)\n            : <span class=\"hljs-title\">base</span>(<span class=\"hljs-params\">arr</span>)</span>\n        {\n            <span class=\"hljs-comment\">// Initilizes and fills &quot;operand&quot; array with neutral element (in this case 1, because value * 1 = value)</span>\n            Operand = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[Tree.Length];\n            Array.Fill(Operand, <span class=\"hljs-number\">1</span>);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Gets an array that stores for each node an operand,</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     which must be applied to all direct and indirect child nodes of this node</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (but not to the node itself).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span>[] Operand { <span class=\"hljs-keyword\">get</span>; }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Applies a distributive operation to a subarray defined by <span class=\"hljs-doctag\">&lt;c&gt;</span>l<span class=\"hljs-doctag\">&lt;/c&gt;</span> and <span class=\"hljs-doctag\">&lt;c&gt;</span>r<span class=\"hljs-doctag\">&lt;/c&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     (in this case multiplication by <span class=\"hljs-doctag\">&lt;c&gt;</span>value<span class=\"hljs-doctag\">&lt;/c&gt;</span>).</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Runtime complexity: O(logN) where N equals the initial array-length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;l&quot;&gt;</span>Left border of the subarray.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;r&quot;&gt;</span>Right border of the subarray.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;value&quot;&gt;</span>Value with which each element of the interval is calculated.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Apply</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> l, <span class=\"hljs-built_in\">int</span> r, <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">value</span></span>)</span>\n        {\n            <span class=\"hljs-comment\">// The Application start at node with 1</span>\n            <span class=\"hljs-comment\">// Node with index 1 includes the whole input subarray</span>\n            Apply(++l, ++r, <span class=\"hljs-keyword\">value</span>, <span class=\"hljs-number\">1</span>, Tree.Length / <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>);\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Edits a query.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;l&quot;&gt;</span>Left border of the query.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;r&quot;&gt;</span>Right border of the query.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;a&quot;&gt;</span>Left end of the subarray enclosed by <span class=\"hljs-doctag\">&lt;c&gt;</span>i<span class=\"hljs-doctag\">&lt;/c&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;b&quot;&gt;</span>Right end of the subarray enclosed by <span class=\"hljs-doctag\">&lt;c&gt;</span>i<span class=\"hljs-doctag\">&lt;/c&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;i&quot;&gt;</span>Current node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>Sum of a subarray between <span class=\"hljs-doctag\">&lt;c&gt;</span>l<span class=\"hljs-doctag\">&lt;/c&gt;</span> and <span class=\"hljs-doctag\">&lt;c&gt;</span>r<span class=\"hljs-doctag\">&lt;/c&gt;</span> (including <span class=\"hljs-doctag\">&lt;c&gt;</span>l<span class=\"hljs-doctag\">&lt;/c&gt;</span> and <span class=\"hljs-doctag\">&lt;c&gt;</span>r<span class=\"hljs-doctag\">&lt;/c&gt;</span>).<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">override</span> <span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">Query</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> l, <span class=\"hljs-built_in\">int</span> r, <span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b, <span class=\"hljs-built_in\">int</span> i</span>)</span>\n        {\n            <span class=\"hljs-keyword\">if</span> (l &lt;= a &amp;&amp; b &lt;= r)\n            {\n                <span class=\"hljs-keyword\">return</span> Tree[i];\n            }\n\n            <span class=\"hljs-keyword\">if</span> (r &lt; a || b &lt; l)\n            {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> m = (a + b) / <span class=\"hljs-number\">2</span>;\n\n            <span class=\"hljs-comment\">// Application of the saved operand to the direct and indrect child nodes</span>\n            <span class=\"hljs-keyword\">return</span> Operand[i] * (Query(l, r, a, m, Left(i)) + Query(l, r, m + <span class=\"hljs-number\">1</span>, b, Right(i)));\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Applies the operation.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;l&quot;&gt;</span>Left border of the Application.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;r&quot;&gt;</span>Right border of the Application.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;value&quot;&gt;</span>Multiplier by which the subarray is to be multiplied.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;a&quot;&gt;</span>Left end of the subarray enclosed by <span class=\"hljs-doctag\">&lt;c&gt;</span>i<span class=\"hljs-doctag\">&lt;/c&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;b&quot;&gt;</span>Right end of the subarray enclosed by <span class=\"hljs-doctag\">&lt;c&gt;</span>i<span class=\"hljs-doctag\">&lt;/c&gt;</span>.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;i&quot;&gt;</span>Current node.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Apply</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> l, <span class=\"hljs-built_in\">int</span> r, <span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">value</span>, <span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b, <span class=\"hljs-built_in\">int</span> i</span>)</span>\n        {\n            <span class=\"hljs-comment\">// If a and b are in the (by l and r) specified subarray</span>\n            <span class=\"hljs-keyword\">if</span> (l &lt;= a &amp;&amp; b &lt;= r)\n            {\n                <span class=\"hljs-comment\">// Applies the operation to the current node and saves it for the direct and indirect child nodes</span>\n                Operand[i] = <span class=\"hljs-keyword\">value</span> * Operand[i];\n                Tree[i] = <span class=\"hljs-keyword\">value</span> * Tree[i];\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-comment\">// If a or b are out of the by l and r specified subarray stop application at this node</span>\n            <span class=\"hljs-keyword\">if</span> (r &lt; a || b &lt; l)\n            {\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-comment\">// Calculates index m of the node that cuts the current subarray in half</span>\n            <span class=\"hljs-keyword\">var</span> m = (a + b) / <span class=\"hljs-number\">2</span>;\n\n            <span class=\"hljs-comment\">// Applies the operation to both halfes</span>\n            Apply(l, r, <span class=\"hljs-keyword\">value</span>, a, m, Left(i));\n            Apply(l, r, <span class=\"hljs-keyword\">value</span>, m + <span class=\"hljs-number\">1</span>, b, Right(i));\n\n            <span class=\"hljs-comment\">// Recalculates the value of this node by its (possibly new) children.</span>\n            Tree[i] = Operand[i] * (Tree[Left(i)] + Tree[Right(i)]);\n        }\n    }\n}\n"
    }
  },
  "contributors": [],
  "explanationUrl": {}
}
