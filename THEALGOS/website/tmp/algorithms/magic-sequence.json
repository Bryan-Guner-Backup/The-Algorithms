{
  "slug": "magic-sequence",
  "name": "Magic Sequence",
  "categories": ["backtracking"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "backtracking/magic_sequence.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/backtracking/magic_sequence.cpp",
      "code": "<span class=\"hljs-comment\">/*\n * @brief [Magic sequence](https://www.csplib.org/Problems/prob019/)\n * implementation\n *\n * @details Solve the magic sequence problem with backtracking\n *\n * &quot;A magic sequence of length $n$ is a sequence of integers $x_0\n * \\ldots x_{n-1}$ between $0$ and $n-1$, such that for all $i$\n * in $0$ to $n-1$, the number $i$ occurs exactly $x_i$ times in\n * the sequence. For instance, $6,2,1,0,0,0,1,0,0,0$ is a magic\n * sequence since $0$ occurs $6$ times in it, $1$ occurs twice, etc.&quot;\n * Quote taken from the [CSPLib](https://www.csplib.org/Problems/prob019/)\n * website\n *\n * @author [Jxtopher](https://github.com/Jxtopher)\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span>  <span class=\"hljs-comment\">/// for std::count</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cassert&gt;</span>    <span class=\"hljs-comment\">/// for assert</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span>   <span class=\"hljs-comment\">/// for IO operations</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;list&gt;</span>       <span class=\"hljs-comment\">/// for std::list</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;numeric&gt;</span>    <span class=\"hljs-comment\">/// for std::accumulate</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span>     <span class=\"hljs-comment\">/// for std::vector</span></span>\n\n<span class=\"hljs-comment\">/**\n * @namespace backtracking\n * @brief Backtracking algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> backtracking {\n<span class=\"hljs-comment\">/**\n * @namespace magic_sequence\n * @brief Functions for the [Magic\n * sequence](https://www.csplib.org/Problems/prob019/) implementation\n */</span>\n<span class=\"hljs-keyword\">namespace</span> magic_sequence {\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-type\">sequence_t</span> =\n    std::vector&lt;<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span>&gt;;  <span class=\"hljs-comment\">///&lt; Definition of the sequence type</span>\n<span class=\"hljs-comment\">/**\n * @brief Print the magic sequence\n * @param s working memory for the sequence\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">print</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">sequence_t</span>&amp; s)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">auto</span>&amp; item : s) std::cout &lt;&lt; item &lt;&lt; <span class=\"hljs-string\">&quot; &quot;</span>;\n    std::cout &lt;&lt; std::endl;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Check if the sequence is magic\n * @param s working memory for the sequence\n * @returns true if it&#x27;s a magic sequence\n * @returns false if it&#x27;s NOT a magic sequence\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_magic</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">sequence_t</span>&amp; s)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-built_in\">size</span>(); i++) {\n        <span class=\"hljs-keyword\">if</span> (std::<span class=\"hljs-built_in\">count</span>(s.<span class=\"hljs-built_in\">cbegin</span>(), s.<span class=\"hljs-built_in\">cend</span>(), i) != s[i]) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Sub-solutions filtering\n * @param s working memory for the sequence\n * @param depth current depth in tree\n * @returns true if the sub-solution is valid\n * @returns false if the sub-solution is NOT valid\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">filtering</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">sequence_t</span>&amp; s, <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> depth)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> std::<span class=\"hljs-built_in\">accumulate</span>(s.<span class=\"hljs-built_in\">cbegin</span>(), s.<span class=\"hljs-built_in\">cbegin</span>() + depth,\n                           <span class=\"hljs-built_in\">static_cast</span>&lt;<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span>&gt;(<span class=\"hljs-number\">0</span>)) &lt;= s.<span class=\"hljs-built_in\">size</span>();\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Solve the Magic Sequence problem\n * @param s working memory for the sequence\n * @param ret list of the valid magic sequences\n * @param depth current depth in the tree\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">solve</span><span class=\"hljs-params\">(<span class=\"hljs-type\">sequence_t</span>* s, std::list&lt;<span class=\"hljs-type\">sequence_t</span>&gt;* ret, <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> depth = <span class=\"hljs-number\">0</span>)</span> </span>{\n    <span class=\"hljs-keyword\">if</span> (depth == s-&gt;<span class=\"hljs-built_in\">size</span>()) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">is_magic</span>(*s)) {\n            ret-&gt;<span class=\"hljs-built_in\">push_back</span>(*s);\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; s-&gt;<span class=\"hljs-built_in\">size</span>(); i++) {\n            (*s)[depth] = i;\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">filtering</span>(*s, depth + <span class=\"hljs-number\">1</span>)) {\n                <span class=\"hljs-built_in\">solve</span>(s, ret, depth + <span class=\"hljs-number\">1</span>);\n            }\n        }\n    }\n}\n\n}  <span class=\"hljs-comment\">// namespace magic_sequence</span>\n}  <span class=\"hljs-comment\">// namespace backtracking</span>\n\n<span class=\"hljs-comment\">/**\n * @brief Self-test implementations\n * @returns void\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// test a valid magic sequence</span>\n    backtracking::magic_sequence::<span class=\"hljs-type\">sequence_t</span> s_magic = {<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n                                                        <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-built_in\">assert</span>(backtracking::magic_sequence::<span class=\"hljs-built_in\">is_magic</span>(s_magic));\n\n    <span class=\"hljs-comment\">// test a non-valid magic sequence</span>\n    backtracking::magic_sequence::<span class=\"hljs-type\">sequence_t</span> s_not_magic = {<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>,\n                                                            <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>};\n    <span class=\"hljs-built_in\">assert</span>(!backtracking::magic_sequence::<span class=\"hljs-built_in\">is_magic</span>(s_not_magic));\n}\n\n<span class=\"hljs-comment\">/**\n * @brief Main function\n * @returns 0 on exit\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-built_in\">test</span>();  <span class=\"hljs-comment\">// run self-test implementations</span>\n\n    <span class=\"hljs-comment\">// solve magic sequences of size 2 to 11 and print the solutions</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">2</span>; i &lt; <span class=\"hljs-number\">12</span>; i++) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Solution for n = &quot;</span> &lt;&lt; i &lt;&lt; std::endl;\n        <span class=\"hljs-comment\">// valid magic sequence list</span>\n        std::list&lt;backtracking::magic_sequence::<span class=\"hljs-type\">sequence_t</span>&gt; list_of_solutions;\n        <span class=\"hljs-comment\">// initialization of a sequence</span>\n        backtracking::<span class=\"hljs-function\">magic_sequence::<span class=\"hljs-type\">sequence_t</span> <span class=\"hljs-title\">s1</span><span class=\"hljs-params\">(i, i)</span></span>;\n        <span class=\"hljs-comment\">// launch of solving the problem</span>\n        backtracking::magic_sequence::<span class=\"hljs-built_in\">solve</span>(&amp;s1, &amp;list_of_solutions);\n        <span class=\"hljs-comment\">// print solutions</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">auto</span>&amp; item : list_of_solutions) {\n            backtracking::magic_sequence::<span class=\"hljs-built_in\">print</span>(item);\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Jxtopher",
      "email": "39927513+Jxtopher@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
