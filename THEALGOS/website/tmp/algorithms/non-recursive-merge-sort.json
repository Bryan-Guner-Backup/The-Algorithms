{
  "slug": "non-recursive-merge-sort",
  "name": "Non Recursive Merge Sort",
  "categories": ["sorts"],
  "body": {},
  "implementations": {
    "c-plus-plus": {
      "dir": "sorting/non_recursive_merge_sort.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/sorting/non_recursive_merge_sort.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * Copyright 2020 @author Albirair\n * @file\n *\n * A generic implementation of non-recursive merge sort.\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstddef&gt;</span>  <span class=\"hljs-comment\">// for size_t</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;utility&gt;</span>  <span class=\"hljs-comment\">// for std::move &amp; std::remove_reference_t</span></span>\n\n<span class=\"hljs-keyword\">namespace</span> sorting {\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Iterator</span>&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(Iterator, Iterator, <span class=\"hljs-keyword\">const</span> Iterator, <span class=\"hljs-type\">char</span>[])</span></span>;\n<span class=\"hljs-comment\">/// bottom-up merge sort which sorts elements in a non-decreasing order</span>\n<span class=\"hljs-comment\">/**\n * sorts elements non-recursively by breaking them into small segments,\n * merging adjacent segments into larger sorted segments, then increasing\n * the sizes of segments by factors of 2 and repeating the same process.\n * best-case = worst-case = O(n log(n))\n * @param first points to the first element\n * @param last points to 1-step past the last element\n * @param n the number of elements\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Iterator</span>&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">non_recursive_merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Iterator first, <span class=\"hljs-keyword\">const</span> Iterator last,\n                              <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">size_t</span> n)</span> </span>{\n    <span class=\"hljs-comment\">// create a buffer large enough to store all elements</span>\n    <span class=\"hljs-comment\">// dynamically allocated to comply with cpplint</span>\n    <span class=\"hljs-type\">char</span>* buffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">char</span>[n * <span class=\"hljs-built_in\">sizeof</span>(*first)];\n    <span class=\"hljs-comment\">// buffer size can be optimized to largest power of 2 less than n</span>\n    <span class=\"hljs-comment\">// elements divide the container into equally-sized segments whose</span>\n    <span class=\"hljs-comment\">// length start at 1 and keeps increasing by factors of 2</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> <span class=\"hljs-built_in\">length</span>(<span class=\"hljs-number\">1</span>); length &lt; n; length &lt;&lt;= <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-comment\">// merge adjacent segments whose number is n / (length * 2)</span>\n        <span class=\"hljs-function\">Iterator <span class=\"hljs-title\">left</span><span class=\"hljs-params\">(first)</span></span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> <span class=\"hljs-built_in\">counter</span>(n / (length &lt;&lt; <span class=\"hljs-number\">1</span>)); counter; --counter) {\n            <span class=\"hljs-function\">Iterator <span class=\"hljs-title\">right</span><span class=\"hljs-params\">(left + length)</span>, <span class=\"hljs-title\">end</span><span class=\"hljs-params\">(right + length)</span></span>;\n            <span class=\"hljs-built_in\">merge</span>(left, right, end, buffer);\n            left = end;\n        }\n        <span class=\"hljs-comment\">// if the number of remaining elements (n * 2 % length) is longer</span>\n        <span class=\"hljs-comment\">// than a segment, merge the remaining elements</span>\n        <span class=\"hljs-keyword\">if</span> ((n &amp; ((length &lt;&lt; <span class=\"hljs-number\">1</span>) - <span class=\"hljs-number\">1</span>)) &gt; length)\n            <span class=\"hljs-built_in\">merge</span>(left, left + length, last, buffer);\n    }\n    <span class=\"hljs-keyword\">delete</span>[] buffer;\n}\n<span class=\"hljs-comment\">/// merges 2 sorted adjacent segments into a larger sorted segment</span>\n<span class=\"hljs-comment\">/**\n * best-case = worst-case = O(n)\n * @param l points to the left part\n * @param r points to the right part, end of left part\n * @param e points to end of right part\n * @param b points at the buffer\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Iterator</span>&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(Iterator l, Iterator r, <span class=\"hljs-keyword\">const</span> Iterator e, <span class=\"hljs-type\">char</span> b[])</span> </span>{\n    <span class=\"hljs-comment\">// create 2 pointers to point at the buffer</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">auto</span> <span class=\"hljs-title\">p</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">reinterpret_cast</span>&lt;std::<span class=\"hljs-type\">remove_reference_t</span>&lt;<span class=\"hljs-keyword\">decltype</span>(*l)&gt;*&gt;(b))</span>, <span class=\"hljs-title\">c</span><span class=\"hljs-params\">(p)</span></span>;\n    <span class=\"hljs-comment\">// move the left part of the segment</span>\n    <span class=\"hljs-keyword\">for</span> (Iterator <span class=\"hljs-built_in\">t</span>(l); r != t; ++t) *p++ = std::<span class=\"hljs-built_in\">move</span>(*t);\n    <span class=\"hljs-comment\">// while neither the buffer nor the right part has been exhausted</span>\n    <span class=\"hljs-comment\">// move the smallest element of the two back to the container</span>\n    <span class=\"hljs-keyword\">while</span> (e != r &amp;&amp; c != p) *l++ = std::<span class=\"hljs-built_in\">move</span>(*r &lt; *c ? *r++ : *c++);\n    <span class=\"hljs-comment\">// notice only one of the two following loops will be executed</span>\n    <span class=\"hljs-comment\">// while the right part hasn&#x27;t bee exhausted, move it back</span>\n    <span class=\"hljs-keyword\">while</span> (e != r) *l++ = std::<span class=\"hljs-built_in\">move</span>(*r++);\n    <span class=\"hljs-comment\">// while the buffer hasn&#x27;t bee exhausted, move it back</span>\n    <span class=\"hljs-keyword\">while</span> (c != p) *l++ = std::<span class=\"hljs-built_in\">move</span>(*c++);\n}\n<span class=\"hljs-comment\">/// bottom-up merge sort which sorts elements in a non-decreasing order</span>\n<span class=\"hljs-comment\">/**\n * @param first points to the first element\n * @param n the number of elements\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Iterator</span>&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">non_recursive_merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Iterator first, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-type\">size_t</span> n)</span> </span>{\n    <span class=\"hljs-built_in\">non_recursive_merge_sort</span>(first, first + n, n);\n}\n<span class=\"hljs-comment\">/// bottom-up merge sort which sorts elements in a non-decreasing order</span>\n<span class=\"hljs-comment\">/**\n * @param first points to the first element\n * @param last points to 1-step past the last element\n */</span>\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Iterator</span>&gt;\n<span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">non_recursive_merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> Iterator first, <span class=\"hljs-keyword\">const</span> Iterator last)</span> </span>{\n    <span class=\"hljs-built_in\">non_recursive_merge_sort</span>(first, last, last - first);\n}\n\n}  <span class=\"hljs-comment\">// namespace sorting</span>\n\n<span class=\"hljs-keyword\">using</span> sorting::non_recursive_merge_sort;\n\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span>** argv)</span> </span>{\n    <span class=\"hljs-type\">int</span> size;\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Enter the number of elements : &quot;</span>;\n    std::cin &gt;&gt; size;\n    <span class=\"hljs-type\">int</span>* arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">int</span>[size];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;arr[&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;] = &quot;</span>;\n        std::cin &gt;&gt; arr[i];\n    }\n    <span class=\"hljs-built_in\">non_recursive_merge_sort</span>(arr, size);\n    std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Sorted array\\n&quot;</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; size; ++i)\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;arr[&quot;</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">&quot;] = &quot;</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span>;\n    <span class=\"hljs-keyword\">delete</span>[] arr;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Musab Albirair",
      "email": "62430041+Albirair@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
