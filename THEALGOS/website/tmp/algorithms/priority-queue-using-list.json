{
  "slug": "priority-queue-using-list",
  "name": "Priority Queue Using List",
  "categories": ["datastructures", "queue"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "data_structures/queue/priority_queue_using_list.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/data_structures/queue/priority_queue_using_list.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nPure Python implementations of a Fixed Priority Queue and an Element Priority Queue\nusing Python lists.\n&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OverFlowError</span>(<span class=\"hljs-title class_ inherited__\">Exception</span>):\n    <span class=\"hljs-keyword\">pass</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UnderFlowError</span>(<span class=\"hljs-title class_ inherited__\">Exception</span>):\n    <span class=\"hljs-keyword\">pass</span>\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FixedPriorityQueue</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Tasks can be added to a Priority Queue at any time and in any order but when Tasks\n    are removed then the Task with the highest priority is removed in FIFO order.  In\n    code we will use three levels of priority with priority zero Tasks being the most\n    urgent (high priority) and priority 2 tasks being the least urgent.\n\n    Examples\n    &gt;&gt;&gt; fpq = FixedPriorityQueue()\n    &gt;&gt;&gt; fpq.enqueue(0, 10)\n    &gt;&gt;&gt; fpq.enqueue(1, 70)\n    &gt;&gt;&gt; fpq.enqueue(0, 100)\n    &gt;&gt;&gt; fpq.enqueue(2, 1)\n    &gt;&gt;&gt; fpq.enqueue(2, 5)\n    &gt;&gt;&gt; fpq.enqueue(1, 7)\n    &gt;&gt;&gt; fpq.enqueue(2, 4)\n    &gt;&gt;&gt; fpq.enqueue(1, 64)\n    &gt;&gt;&gt; fpq.enqueue(0, 128)\n    &gt;&gt;&gt; print(fpq)\n    Priority 0: [10, 100, 128]\n    Priority 1: [70, 7, 64]\n    Priority 2: [1, 5, 4]\n    &gt;&gt;&gt; fpq.dequeue()\n    10\n    &gt;&gt;&gt; fpq.dequeue()\n    100\n    &gt;&gt;&gt; fpq.dequeue()\n    128\n    &gt;&gt;&gt; fpq.dequeue()\n    70\n    &gt;&gt;&gt; fpq.dequeue()\n    7\n    &gt;&gt;&gt; print(fpq)\n    Priority 0: []\n    Priority 1: [64]\n    Priority 2: [1, 5, 4]\n    &gt;&gt;&gt; fpq.dequeue()\n    64\n    &gt;&gt;&gt; fpq.dequeue()\n    1\n    &gt;&gt;&gt; fpq.dequeue()\n    5\n    &gt;&gt;&gt; fpq.dequeue()\n    4\n    &gt;&gt;&gt; fpq.dequeue()\n    Traceback (most recent call last):\n    ...\n    data_structures.queue.priority_queue_using_list.UnderFlowError: All queues are empty\n    &gt;&gt;&gt; print(fpq)\n    Priority 0: []\n    Priority 1: []\n    Priority 2: []\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.queues = [\n            [],\n            [],\n            [],\n        ]\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">self, priority: <span class=\"hljs-built_in\">int</span>, data: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Add an element to a queue based on its priority.\n        If the priority is invalid ValueError is raised.\n        If the queue is full an OverFlowError is raised.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">try</span>:\n            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.queues[priority]) &gt;= <span class=\"hljs-number\">100</span>:\n                <span class=\"hljs-keyword\">raise</span> OverflowError(<span class=\"hljs-string\">&quot;Maximum queue size is 100&quot;</span>)\n            self.queues[priority].append(data)\n        <span class=\"hljs-keyword\">except</span> IndexError:\n            <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;Valid priorities are 0, 1, and 2&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dequeue</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the highest priority element in FIFO order.\n        If the queue is empty then an under flow exception is raised.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">for</span> queue <span class=\"hljs-keyword\">in</span> self.queues:\n            <span class=\"hljs-keyword\">if</span> queue:\n                <span class=\"hljs-keyword\">return</span> queue.pop(<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">raise</span> UnderFlowError(<span class=\"hljs-string\">&quot;All queues are empty&quot;</span>)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;\\n&quot;</span>.join(<span class=\"hljs-string\">f&quot;Priority <span class=\"hljs-subst\">{i}</span>: <span class=\"hljs-subst\">{q}</span>&quot;</span> <span class=\"hljs-keyword\">for</span> i, q <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(self.queues))\n\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ElementPriorityQueue</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Element Priority Queue is the same as Fixed Priority Queue except that the value of\n    the element itself is the priority. The rules for priorities are the same the as\n    Fixed Priority Queue.\n\n    &gt;&gt;&gt; epq = ElementPriorityQueue()\n    &gt;&gt;&gt; epq.enqueue(10)\n    &gt;&gt;&gt; epq.enqueue(70)\n    &gt;&gt;&gt; epq.enqueue(4)\n    &gt;&gt;&gt; epq.enqueue(1)\n    &gt;&gt;&gt; epq.enqueue(5)\n    &gt;&gt;&gt; epq.enqueue(7)\n    &gt;&gt;&gt; epq.enqueue(4)\n    &gt;&gt;&gt; epq.enqueue(64)\n    &gt;&gt;&gt; epq.enqueue(128)\n    &gt;&gt;&gt; print(epq)\n    [10, 70, 4, 1, 5, 7, 4, 64, 128]\n    &gt;&gt;&gt; epq.dequeue()\n    1\n    &gt;&gt;&gt; epq.dequeue()\n    4\n    &gt;&gt;&gt; epq.dequeue()\n    4\n    &gt;&gt;&gt; epq.dequeue()\n    5\n    &gt;&gt;&gt; epq.dequeue()\n    7\n    &gt;&gt;&gt; epq.dequeue()\n    10\n    &gt;&gt;&gt; print(epq)\n    [70, 64, 128]\n    &gt;&gt;&gt; epq.dequeue()\n    64\n    &gt;&gt;&gt; epq.dequeue()\n    70\n    &gt;&gt;&gt; epq.dequeue()\n    128\n    &gt;&gt;&gt; epq.dequeue()\n    Traceback (most recent call last):\n        ...\n    data_structures.queue.priority_queue_using_list.UnderFlowError: The queue is empty\n    &gt;&gt;&gt; print(epq)\n    []\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self</span>):\n        self.queue = []\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">self, data: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-literal\">None</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        This function enters the element into the queue\n        If the queue is full an Exception is raised saying Over Flow!\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(self.queue) == <span class=\"hljs-number\">100</span>:\n            <span class=\"hljs-keyword\">raise</span> OverFlowError(<span class=\"hljs-string\">&quot;Maximum queue size is 100&quot;</span>)\n        self.queue.append(data)\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dequeue</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">int</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Return the highest priority element in FIFO order.\n        If the queue is empty then an under flow exception is raised.\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> self.queue:\n            <span class=\"hljs-keyword\">raise</span> UnderFlowError(<span class=\"hljs-string\">&quot;The queue is empty&quot;</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            data = <span class=\"hljs-built_in\">min</span>(self.queue)\n            self.queue.remove(data)\n            <span class=\"hljs-keyword\">return</span> data\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__str__</span>(<span class=\"hljs-params\">self</span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        <span class=\"hljs-string\">&quot;&quot;&quot;\n        Prints all the elements within the Element Priority Queue\n        &quot;&quot;&quot;</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">str</span>(self.queue)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">fixed_priority_queue</span>():\n    fpq = FixedPriorityQueue()\n    fpq.enqueue(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">10</span>)\n    fpq.enqueue(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">70</span>)\n    fpq.enqueue(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)\n    fpq.enqueue(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)\n    fpq.enqueue(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>)\n    fpq.enqueue(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">7</span>)\n    fpq.enqueue(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)\n    fpq.enqueue(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">64</span>)\n    fpq.enqueue(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">128</span>)\n    <span class=\"hljs-built_in\">print</span>(fpq)\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq)\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(fpq.dequeue())\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">element_priority_queue</span>():\n    epq = ElementPriorityQueue()\n    epq.enqueue(<span class=\"hljs-number\">10</span>)\n    epq.enqueue(<span class=\"hljs-number\">70</span>)\n    epq.enqueue(<span class=\"hljs-number\">100</span>)\n    epq.enqueue(<span class=\"hljs-number\">1</span>)\n    epq.enqueue(<span class=\"hljs-number\">5</span>)\n    epq.enqueue(<span class=\"hljs-number\">7</span>)\n    epq.enqueue(<span class=\"hljs-number\">4</span>)\n    epq.enqueue(<span class=\"hljs-number\">64</span>)\n    epq.enqueue(<span class=\"hljs-number\">128</span>)\n    <span class=\"hljs-built_in\">print</span>(epq)\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq)\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n    <span class=\"hljs-built_in\">print</span>(epq.dequeue())\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    fixed_priority_queue()\n    element_priority_queue()\n"
    }
  },
  "contributors": [
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Ashley Jeji George",
      "email": "40469421+Ashley-J-George@users.noreply.github.com",
      "commits": 1
    }
  ],
  "explanationUrl": {}
}
