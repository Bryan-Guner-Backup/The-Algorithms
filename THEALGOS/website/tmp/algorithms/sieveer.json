{
  "slug": "sieveer",
  "name": "sieveER",
  "categories": ["sieveoferatosthenes"],
  "body": {},
  "implementations": {
    "matlab-octave": {
      "dir": "algorithms/Sieve_of_Eratosthenes/sieveER.m",
      "url": "https://github.com/TheAlgorithms/matlab-octave/tree/master/algorithms/Sieve_of_Eratosthenes/sieveER.m",
      "code": "<span class=\"hljs-comment\">% sieveEr: returns a vector with prime numbers from 2 up to N</span>\n<span class=\"hljs-comment\">% assumes: N &gt;= 2</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>  <span class=\"hljs-title\">y</span> = <span class=\"hljs-title\">sieveER</span><span class=\"hljs-params\">(N)</span></span>\n  <span class=\"hljs-comment\">% precondition</span>\n  assert(N &gt;= <span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">&quot;N must be &gt;= 2&quot;</span>)\n  tmp = <span class=\"hljs-number\">2</span>:<span class=\"hljs-number\">1</span>:N; <span class=\"hljs-comment\">% all numbers from 2 up to N</span>\n  y = []; <span class=\"hljs-comment\">% the answer</span>\n  \n  <span class=\"hljs-comment\">% labels all composite number with 0</span>\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(tmp)\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-built_in\">i</span>+<span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(tmp)\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">mod</span>(tmp(<span class=\"hljs-built_in\">j</span>),tmp(<span class=\"hljs-built_in\">i</span>)) == <span class=\"hljs-number\">0</span>)\n        tmp(<span class=\"hljs-built_in\">j</span>) = <span class=\"hljs-number\">0</span>;\n      endif\n    endfor\n  endfor\n  \n  <span class=\"hljs-comment\">% fills up all prime numbers in vector y</span>\n  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(tmp)\n    <span class=\"hljs-keyword\">if</span> (tmp(<span class=\"hljs-built_in\">i</span>) ~= <span class=\"hljs-number\">0</span>)\n    y = [y tmp(<span class=\"hljs-built_in\">i</span>)];\n    endif\n  endfor\n  \nendfunction\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Bender",
      "email": "christianbender89@web.de",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
