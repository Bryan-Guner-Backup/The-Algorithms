{
  "slug": "rot13",
  "name": "Rot13",
  "categories": ["ciphers"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "ciphers/rot13.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/ciphers/rot13.py",
      "code": "<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dencrypt</span>(<span class=\"hljs-params\">s: <span class=\"hljs-built_in\">str</span>, n: <span class=\"hljs-built_in\">int</span> = <span class=\"hljs-number\">13</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    https://en.wikipedia.org/wiki/ROT13\n\n    &gt;&gt;&gt; msg = &quot;My secret bank account number is 173-52946 so don&#x27;t tell anyone!!&quot;\n    &gt;&gt;&gt; s = dencrypt(msg)\n    &gt;&gt;&gt; s\n    &quot;Zl frperg onax nppbhag ahzore vf 173-52946 fb qba&#x27;g gryy nalbar!!&quot;\n    &gt;&gt;&gt; dencrypt(s) == msg\n    True\n    &quot;&quot;&quot;</span>\n    out = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> s:\n        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">&quot;A&quot;</span> &lt;= c &lt;= <span class=\"hljs-string\">&quot;Z&quot;</span>:\n            out += <span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&quot;A&quot;</span>) + (<span class=\"hljs-built_in\">ord</span>(c) - <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&quot;A&quot;</span>) + n) % <span class=\"hljs-number\">26</span>)\n        <span class=\"hljs-keyword\">elif</span> <span class=\"hljs-string\">&quot;a&quot;</span> &lt;= c &lt;= <span class=\"hljs-string\">&quot;z&quot;</span>:\n            out += <span class=\"hljs-built_in\">chr</span>(<span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&quot;a&quot;</span>) + (<span class=\"hljs-built_in\">ord</span>(c) - <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&quot;a&quot;</span>) + n) % <span class=\"hljs-number\">26</span>)\n        <span class=\"hljs-keyword\">else</span>:\n            out += c\n    <span class=\"hljs-keyword\">return</span> out\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>() -&gt; <span class=\"hljs-literal\">None</span>:\n    s0 = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&quot;Enter message: &quot;</span>)\n\n    s1 = dencrypt(s0, <span class=\"hljs-number\">13</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Encryption:&quot;</span>, s1)\n\n    s2 = dencrypt(s1, <span class=\"hljs-number\">13</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Decryption: &quot;</span>, s2)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    main()\n"
    },
    "javascript": {
      "dir": "Ciphers/ROT13.js",
      "url": "https://github.com/TheAlgorithms/javascript/tree/master/Ciphers/ROT13.js",
      "code": "<span class=\"hljs-comment\">/**\n * Transcipher a ROT13 cipher\n * <span class=\"hljs-doctag\">@param</span>  {<span class=\"hljs-type\">String</span>} <span class=\"hljs-variable\">text</span> - string to be encrypted\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">String</span>} - decrypted string\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">transcipher</span> = (<span class=\"hljs-params\">text</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> originalCharacterList = <span class=\"hljs-string\">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> toBeMappedCharaterList = <span class=\"hljs-string\">&#x27;NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm&#x27;</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">index</span> = x =&gt; originalCharacterList.<span class=\"hljs-title function_\">indexOf</span>(x)\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">replace</span> = x =&gt; <span class=\"hljs-title function_\">index</span>(x) &gt; -<span class=\"hljs-number\">1</span> ? toBeMappedCharaterList[<span class=\"hljs-title function_\">index</span>(x)] : x\n  <span class=\"hljs-keyword\">return</span> text.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>).<span class=\"hljs-title function_\">map</span>(replace).<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n}\n\n(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> messageToBeEncrypted = <span class=\"hljs-string\">&#x27;The quick brown fox jumps over the lazy dog&#x27;</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Original Text = &quot;<span class=\"hljs-subst\">${messageToBeEncrypted}</span>&quot;`</span>)\n  <span class=\"hljs-keyword\">const</span> rot13CipheredText = <span class=\"hljs-title function_\">transcipher</span>(messageToBeEncrypted)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Ciphered Text = &quot;<span class=\"hljs-subst\">${rot13CipheredText}</span>&quot;`</span>)\n  <span class=\"hljs-keyword\">const</span> rot13DecipheredText = <span class=\"hljs-title function_\">transcipher</span>(rot13CipheredText)\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Deciphered Text = &quot;<span class=\"hljs-subst\">${rot13DecipheredText}</span>&quot;`</span>)\n})()\n"
    },
    "go": {
      "dir": "ciphers/rot13/rot13.go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/ciphers/rot13/rot13.go",
      "code": "<span class=\"hljs-comment\">// Package rot13 is a simple letter substitution cipher that replaces a letter with the 13th letter after it in the alphabet.</span>\n<span class=\"hljs-comment\">// ref: https://en.wikipedia.org/wiki/ROT13</span>\n<span class=\"hljs-keyword\">package</span> rot13\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;github.com/TheAlgorithms/Go/ciphers/caesar&quot;</span>\n)\n\n<span class=\"hljs-comment\">// rot13 is a special case, which is fixed the shift of 13, of the Caesar cipher</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">rot13</span><span class=\"hljs-params\">(input <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-keyword\">return</span> caesar.Encrypt(input, <span class=\"hljs-number\">13</span>)\n}\n"
    },
    "rust": {
      "dir": "src/ciphers/rot13.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/ciphers/rot13.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">rot13</span>(text: &amp;<span class=\"hljs-type\">str</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">String</span> {\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">to_enc</span> = text.<span class=\"hljs-title function_ invoke__\">to_uppercase</span>();\n    to_enc\n        .<span class=\"hljs-title function_ invoke__\">chars</span>()\n        .<span class=\"hljs-title function_ invoke__\">map</span>(|c| <span class=\"hljs-keyword\">match</span> c {\n            <span class=\"hljs-string\">&#x27;A&#x27;</span>..=<span class=\"hljs-string\">&#x27;M&#x27;</span> =&gt; ((c <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>) + <span class=\"hljs-number\">13</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>,\n            <span class=\"hljs-string\">&#x27;N&#x27;</span>..=<span class=\"hljs-string\">&#x27;Z&#x27;</span> =&gt; ((c <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">u8</span>) - <span class=\"hljs-number\">13</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">char</span>,\n            _ =&gt; c,\n        })\n        .<span class=\"hljs-title function_ invoke__\">collect</span>()\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> test {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_single_letter</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">&quot;N&quot;</span>, <span class=\"hljs-title function_ invoke__\">rot13</span>(<span class=\"hljs-string\">&quot;A&quot;</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_bunch_of_letters</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">&quot;NOP&quot;</span>, <span class=\"hljs-title function_ invoke__\">rot13</span>(<span class=\"hljs-string\">&quot;ABC&quot;</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_non_ascii</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">&quot;ðŸ˜€NO&quot;</span>, <span class=\"hljs-title function_ invoke__\">rot13</span>(<span class=\"hljs-string\">&quot;ðŸ˜€AB&quot;</span>));\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">test_twice</span>() {\n        <span class=\"hljs-built_in\">assert_eq!</span>(<span class=\"hljs-string\">&quot;ABCD&quot;</span>, <span class=\"hljs-title function_ invoke__\">rot13</span>(&amp;<span class=\"hljs-title function_ invoke__\">rot13</span>(<span class=\"hljs-string\">&quot;ABCD&quot;</span>)));\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Carlo Federico Vescovo",
      "email": "vescovocarlofederico@gmail.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 1
    },
    {
      "name": "task4233",
      "email": "tks.m1205@gmail.com",
      "commits": 1
    },
    {
      "name": "Sutthinart Khunvadhana",
      "email": "iakgoog@gmail.com",
      "commits": 1
    },
    {
      "name": "Dhruv Manilawala",
      "email": "dhruvmanila@gmail.com",
      "commits": 1
    },
    {
      "name": "Jenia Dysin",
      "email": "jenia90@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Aakash Dinkar",
      "email": "35952953+aakashdinkar@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "cclauss",
      "email": "cclauss@bluewin.ch",
      "commits": 1
    },
    {
      "name": "Pedro TÃ´rres",
      "email": "t0rr3sp3dr0@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
