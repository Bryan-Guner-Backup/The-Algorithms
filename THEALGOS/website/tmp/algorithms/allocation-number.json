{
  "slug": "allocation-number",
  "name": "Allocation Number",
  "categories": ["math"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "maths/allocation_number.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/maths/allocation_number.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;\nIn a multi-threaded download, this algorithm could be used to provide\neach worker thread with a block of non-overlapping bytes to download.\nFor example:\n    for i in allocation_list:\n        requests.get(url,headers={&#x27;Range&#x27;:f&#x27;bytes={i}&#x27;})\n&quot;&quot;&quot;</span>\n<span class=\"hljs-keyword\">from</span> __future__ <span class=\"hljs-keyword\">import</span> annotations\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">allocation_num</span>(<span class=\"hljs-params\">number_of_bytes: <span class=\"hljs-built_in\">int</span>, partitions: <span class=\"hljs-built_in\">int</span></span>) -&gt; <span class=\"hljs-built_in\">list</span>[<span class=\"hljs-built_in\">str</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Divide a number of bytes into x partitions.\n    :param number_of_bytes: the total of bytes.\n    :param partitions: the number of partition need to be allocated.\n    :return: list of bytes to be assigned to each worker thread\n\n    &gt;&gt;&gt; allocation_num(16647, 4)\n    [&#x27;1-4161&#x27;, &#x27;4162-8322&#x27;, &#x27;8323-12483&#x27;, &#x27;12484-16647&#x27;]\n    &gt;&gt;&gt; allocation_num(50000, 5)\n    [&#x27;1-10000&#x27;, &#x27;10001-20000&#x27;, &#x27;20001-30000&#x27;, &#x27;30001-40000&#x27;, &#x27;40001-50000&#x27;]\n    &gt;&gt;&gt; allocation_num(888, 999)\n    Traceback (most recent call last):\n        ...\n    ValueError: partitions can not &gt; number_of_bytes!\n    &gt;&gt;&gt; allocation_num(888, -4)\n    Traceback (most recent call last):\n        ...\n    ValueError: partitions must be a positive number!\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">if</span> partitions &lt;= <span class=\"hljs-number\">0</span>:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;partitions must be a positive number!&quot;</span>)\n    <span class=\"hljs-keyword\">if</span> partitions &gt; number_of_bytes:\n        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">&quot;partitions can not &gt; number_of_bytes!&quot;</span>)\n    bytes_per_partition = number_of_bytes // partitions\n    allocation_list = []\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(partitions):\n        start_bytes = i * bytes_per_partition + <span class=\"hljs-number\">1</span>\n        end_bytes = (\n            number_of_bytes <span class=\"hljs-keyword\">if</span> i == partitions - <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> (i + <span class=\"hljs-number\">1</span>) * bytes_per_partition\n        )\n        allocation_list.append(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{start_bytes}</span>-<span class=\"hljs-subst\">{end_bytes}</span>&quot;</span>)\n    <span class=\"hljs-keyword\">return</span> allocation_list\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n"
    }
  },
  "contributors": [
    {
      "name": "shellhub",
      "email": "shellhub.me@gmail.com",
      "commits": 1
    },
    {
      "name": "wind-Lv",
      "email": "61381242+wind-Lv@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
