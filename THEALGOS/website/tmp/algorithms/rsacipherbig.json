{
  "slug": "rsacipherbig",
  "name": "RSAcipher(Big)",
  "categories": ["ciphers", "rsabig"],
  "body": {},
  "implementations": {
    "go": {
      "dir": "ciphers/rsaBig/RSAcipher(Big).go",
      "url": "https://github.com/TheAlgorithms/go/tree/master/ciphers/rsaBig/RSAcipher(Big).go",
      "code": "<span class=\"hljs-keyword\">package</span> bigrsacipher\n\n<span class=\"hljs-keyword\">import</span> (\n\t<span class=\"hljs-string\">&quot;fmt&quot;</span>\n\t<span class=\"hljs-string\">&quot;math/big&quot;</span>\n\t<span class=\"hljs-string\">&quot;strconv&quot;</span>\n\t<span class=\"hljs-string\">&quot;strings&quot;</span>\n)\n\n<span class=\"hljs-comment\">/*\nCare has been taken to uses cryptographic secure functions\nThe primes numbers are 1024 bits which is as secure as u can get really\ncrypto/rand library has been imported as crypto and not rand\nThis import style will make it easier to spot all the cryptographic secure functions\n*/</span>\n<span class=\"hljs-comment\">// func main() {</span>\n<span class=\"hljs-comment\">// \tp, _ := crypto.Prime(crypto.Reader, 1024)</span>\n<span class=\"hljs-comment\">// \tq, _ := crypto.Prime(crypto.Reader, 1024)</span>\n<span class=\"hljs-comment\">// \tif !(primeCheck(p) || primeCheck(q)) {</span>\n<span class=\"hljs-comment\">// \t\t//they are always prime, no worries</span>\n<span class=\"hljs-comment\">// \t\tfmt.Println(&quot;These numbers ain&#x27;t prime&quot;)</span>\n<span class=\"hljs-comment\">// \t}</span>\n<span class=\"hljs-comment\">// \tn := new(big.Int).Mul(p, q)</span>\n\n<span class=\"hljs-comment\">// \tone := big.NewInt(1)</span>\n\n<span class=\"hljs-comment\">// \tdelta := lcmBig(p.Sub(p, one), q.Sub(q, one))</span>\n\n<span class=\"hljs-comment\">// \te, _ := crypto.Prime(crypto.Reader, delta.BitLen())</span>\n<span class=\"hljs-comment\">// \td := big.NewInt(0)</span>\n<span class=\"hljs-comment\">// \td.ModInverse(e, delta)</span>\n\n<span class=\"hljs-comment\">// \tcleartext := &quot;Black Lives Matter, all lives can&#x27;t matter until Black lives matter&quot;</span>\n<span class=\"hljs-comment\">// \trunes := []rune(cleartext)</span>\n<span class=\"hljs-comment\">// \tASCIIs := toASCII(runes)</span>\n<span class=\"hljs-comment\">// \tstringEncoded := stringEncode(ASCIIs)</span>\n<span class=\"hljs-comment\">// \tbigNum, _ := new(big.Int).SetString(stringEncoded, 0)</span>\n<span class=\"hljs-comment\">// \t/*</span>\n<span class=\"hljs-comment\">// \t\t<span class=\"hljs-doctag\">TODO:</span> check that bigNum is not larger than N if larger break</span>\n<span class=\"hljs-comment\">// \t\tinto two or more strings and encrypt separately</span>\n<span class=\"hljs-comment\">// \t*/</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;Message to be encrypted: %v \\n&quot;, cleartext)</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;ASCII encoded: %v\\n&quot;, bigNum)</span>\n<span class=\"hljs-comment\">// \tencrypted := encryptBig(bigNum, e, n)</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;ciphertext: %v \\n&quot;, encrypted)</span>\n<span class=\"hljs-comment\">// \tdecrypted := decryptBig(encrypted, d, n)</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;Decrypted but still ASCII encoded: %v \\n&quot;, decrypted)</span>\n<span class=\"hljs-comment\">// \tdecryptASCIIs := stringDecode(decrypted)</span>\n<span class=\"hljs-comment\">// \tfmt.Printf(&quot;Plaintext (original message) :%v&quot;, toRune(decryptASCIIs))</span>\n<span class=\"hljs-comment\">// }</span>\n\n<span class=\"hljs-comment\">// EncryptBig Main encryption function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">EncryptBig</span><span class=\"hljs-params\">(num *big.Int, privateExponent *big.Int, modulus *big.Int)</span> *<span class=\"hljs-title\">big</span>.<span class=\"hljs-title\">Int</span></span> {\n\t<span class=\"hljs-comment\">//encrypts by modular exponentiation</span>\n\tencrypted := <span class=\"hljs-built_in\">new</span>(big.Int).Exp(num, privateExponent, modulus)\n\t<span class=\"hljs-keyword\">return</span> encrypted\n}\n\n<span class=\"hljs-comment\">// DecryptBig Main decryption function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">DecryptBig</span><span class=\"hljs-params\">(num *big.Int, publicExponent *big.Int, modulus *big.Int)</span> *<span class=\"hljs-title\">big</span>.<span class=\"hljs-title\">Int</span></span> {\n\t<span class=\"hljs-comment\">//decrypts by modular exponentiation</span>\n\tdecrypted := <span class=\"hljs-built_in\">new</span>(big.Int).Exp(num, publicExponent, modulus)\n\t<span class=\"hljs-keyword\">return</span> decrypted\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">lcmBig</span><span class=\"hljs-params\">(x *big.Int, y *big.Int)</span> *<span class=\"hljs-title\">big</span>.<span class=\"hljs-title\">Int</span></span> {\n\t<span class=\"hljs-comment\">//an lcm implementation for big.Int numbers</span>\n\tgcd := <span class=\"hljs-built_in\">new</span>(big.Int).GCD(<span class=\"hljs-literal\">nil</span>, <span class=\"hljs-literal\">nil</span>, x, y)\n\ttemp := <span class=\"hljs-built_in\">new</span>(big.Int).Mul(x, y)\n\tlcm := <span class=\"hljs-built_in\">new</span>(big.Int).Div(temp, gcd)\n\t<span class=\"hljs-keyword\">return</span> lcm\n}\n\n<span class=\"hljs-comment\">// PrimeCheck primality test</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">PrimeCheck</span><span class=\"hljs-params\">(prime *big.Int)</span> <span class=\"hljs-title\">bool</span></span> {\n\t<span class=\"hljs-comment\">//primality test</span>\n\t<span class=\"hljs-keyword\">return</span> prime.ProbablyPrime(<span class=\"hljs-number\">256</span>)\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">toASCII</span><span class=\"hljs-params\">(slice []<span class=\"hljs-keyword\">rune</span>)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//runs in O(n) where n = len(slice)</span>\n\t<span class=\"hljs-keyword\">var</span> converted []<span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> slice {\n\t\tconverted = <span class=\"hljs-built_in\">append</span>(converted, <span class=\"hljs-keyword\">int</span>(v))\n\t}\n\t<span class=\"hljs-keyword\">return</span> converted\n}\n\n<span class=\"hljs-comment\">// ToRune convert a string to a rune</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">ToRune</span><span class=\"hljs-params\">(slice []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-comment\">//runs in O(n) where n = len(slice)</span>\n\t<span class=\"hljs-comment\">// var str string</span>\n\t<span class=\"hljs-keyword\">var</span> str strings.Builder\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> slice {\n\t\tstr.WriteString(fmt.Sprint(v))\n\t}\n\t<span class=\"hljs-keyword\">return</span> str.String()\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stringEncode</span><span class=\"hljs-params\">(slice []<span class=\"hljs-keyword\">int</span>)</span> <span class=\"hljs-title\">string</span></span> {\n\t<span class=\"hljs-comment\">//encodes the ASCII to a string</span>\n\t<span class=\"hljs-keyword\">var</span> out []<span class=\"hljs-keyword\">string</span>\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> slice {\n\t\t<span class=\"hljs-keyword\">if</span> v &lt; <span class=\"hljs-number\">100</span> {\n\t\t\tout = <span class=\"hljs-built_in\">append</span>(out, <span class=\"hljs-string\">&quot;0&quot;</span>+strconv.Itoa(v))\n\t\t\t<span class=\"hljs-keyword\">continue</span>\n\t\t}\n\t\tout = <span class=\"hljs-built_in\">append</span>(out, strconv.Itoa(v))\n\t}\n\t<span class=\"hljs-keyword\">var</span> str <span class=\"hljs-keyword\">string</span>\n\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> out {\n\t\tstr += v\n\t}\n\t<span class=\"hljs-comment\">//strips leading 0 if present to avoid conversion errors</span>\n\t<span class=\"hljs-keyword\">if</span> str[<span class=\"hljs-number\">0</span>] == <span class=\"hljs-string\">&#x27;0&#x27;</span> {\n\t\tstr = str[<span class=\"hljs-number\">1</span>:]\n\t}\n\t<span class=\"hljs-keyword\">return</span> str\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">stringDecode</span><span class=\"hljs-params\">(decryptedBig *big.Int)</span> []<span class=\"hljs-title\">int</span></span> {\n\t<span class=\"hljs-comment\">//decodes the number to string then ASCII values</span>\n\tstr := decryptedBig.String()\n\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(str)%<span class=\"hljs-number\">3</span> != <span class=\"hljs-number\">0</span> {\n\t\tstr = <span class=\"hljs-string\">&quot;0&quot;</span> + str\n\t}\n\t<span class=\"hljs-keyword\">var</span> ASCII []<span class=\"hljs-keyword\">int</span>\n\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">len</span>(str); i += <span class=\"hljs-number\">3</span> {\n\t\ttemp, _ := strconv.Atoi(str[i : i+<span class=\"hljs-number\">3</span>])\n\t\tASCII = <span class=\"hljs-built_in\">append</span>(ASCII, temp)\n\t}\n\t<span class=\"hljs-keyword\">return</span> ASCII\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Taj",
      "email": "tjgurwara99@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Brayo",
      "email": "vukubrian@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
