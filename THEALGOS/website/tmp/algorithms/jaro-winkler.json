{
  "slug": "jaro-winkler",
  "name": "Jaro Winkler",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/jaro_winkler.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/jaro_winkler.py",
      "code": "<span class=\"hljs-string\">&quot;&quot;&quot;https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance&quot;&quot;&quot;</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">jaro_winkler</span>(<span class=\"hljs-params\">str1: <span class=\"hljs-built_in\">str</span>, str2: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">float</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Jaro–Winkler distance is a string metric measuring an edit distance between two\n    sequences.\n    Output value is between 0.0 and 1.0.\n\n    &gt;&gt;&gt; jaro_winkler(&quot;martha&quot;, &quot;marhta&quot;)\n    0.9611111111111111\n    &gt;&gt;&gt; jaro_winkler(&quot;CRATE&quot;, &quot;TRACE&quot;)\n    0.7333333333333334\n    &gt;&gt;&gt; jaro_winkler(&quot;test&quot;, &quot;dbdbdbdb&quot;)\n    0.0\n    &gt;&gt;&gt; jaro_winkler(&quot;test&quot;, &quot;test&quot;)\n    1.0\n    &gt;&gt;&gt; jaro_winkler(&quot;hello world&quot;, &quot;HeLLo W0rlD&quot;)\n    0.6363636363636364\n    &gt;&gt;&gt; jaro_winkler(&quot;test&quot;, &quot;&quot;)\n    0.0\n    &gt;&gt;&gt; jaro_winkler(&quot;hello&quot;, &quot;world&quot;)\n    0.4666666666666666\n    &gt;&gt;&gt; jaro_winkler(&quot;hell**o&quot;, &quot;*world&quot;)\n    0.4365079365079365\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_matched_characters</span>(<span class=\"hljs-params\">_str1: <span class=\"hljs-built_in\">str</span>, _str2: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">str</span>:\n        matched = []\n        limit = <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-built_in\">len</span>(_str1), <span class=\"hljs-built_in\">len</span>(_str2)) // <span class=\"hljs-number\">2</span>\n        <span class=\"hljs-keyword\">for</span> i, l <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">enumerate</span>(_str1):\n            left = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-number\">0</span>, i - limit))\n            right = <span class=\"hljs-built_in\">int</span>(<span class=\"hljs-built_in\">min</span>(i + limit + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">len</span>(_str2)))\n            <span class=\"hljs-keyword\">if</span> l <span class=\"hljs-keyword\">in</span> _str2[left:right]:\n                matched.append(l)\n                _str2 = <span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">{_str2[<span class=\"hljs-number\">0</span>:_str2.index(l)]}</span> <span class=\"hljs-subst\">{_str2[_str2.index(l) + <span class=\"hljs-number\">1</span>:]}</span>&quot;</span>\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>.join(matched)\n\n    <span class=\"hljs-comment\"># matching characters</span>\n    matching_1 = get_matched_characters(str1, str2)\n    matching_2 = get_matched_characters(str2, str1)\n    match_count = <span class=\"hljs-built_in\">len</span>(matching_1)\n\n    <span class=\"hljs-comment\"># transposition</span>\n    transpositions = (\n        <span class=\"hljs-built_in\">len</span>([(c1, c2) <span class=\"hljs-keyword\">for</span> c1, c2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(matching_1, matching_2) <span class=\"hljs-keyword\">if</span> c1 != c2]) // <span class=\"hljs-number\">2</span>\n    )\n\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> match_count:\n        jaro = <span class=\"hljs-number\">0.0</span>\n    <span class=\"hljs-keyword\">else</span>:\n        jaro = (\n            <span class=\"hljs-number\">1</span>\n            / <span class=\"hljs-number\">3</span>\n            * (\n                match_count / <span class=\"hljs-built_in\">len</span>(str1)\n                + match_count / <span class=\"hljs-built_in\">len</span>(str2)\n                + (match_count - transpositions) / match_count\n            )\n        )\n\n    <span class=\"hljs-comment\"># common prefix up to 4 characters</span>\n    prefix_len = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">for</span> c1, c2 <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(str1[:<span class=\"hljs-number\">4</span>], str2[:<span class=\"hljs-number\">4</span>]):\n        <span class=\"hljs-keyword\">if</span> c1 == c2:\n            prefix_len += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-keyword\">break</span>\n\n    <span class=\"hljs-keyword\">return</span> jaro + <span class=\"hljs-number\">0.1</span> * prefix_len * (<span class=\"hljs-number\">1</span> - jaro)\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-keyword\">import</span> doctest\n\n    doctest.testmod()\n    <span class=\"hljs-built_in\">print</span>(jaro_winkler(<span class=\"hljs-string\">&quot;hello&quot;</span>, <span class=\"hljs-string\">&quot;world&quot;</span>))\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/JaroWinkler.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/JaroWinkler.fs",
      "code": "<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\n\n<span class=\"hljs-keyword\">open</span> Microsoft.FSharp.Collections\n\n<span class=\"hljs-keyword\">module</span> JaroWinkler =\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\n    <span class=\"hljs-comment\">/// Jaro–Winkler distance is a string metric measuring an edit distance between two</span>\n    <span class=\"hljs-comment\">/// sequences.</span>\n    <span class=\"hljs-comment\">/// Output value is between 0.0 and 1.0.</span>\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;str1&quot;&gt;&lt;/param&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;str2&quot;&gt;&lt;/param&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n    <span class=\"hljs-keyword\">let</span> jaroWinkler (str1: string, str2: string): float =\n        <span class=\"hljs-keyword\">let</span> getMatchedCharacters (_str1: string, _str2: string): string =\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> istr1 = _str1\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> istr2 = _str2\n            <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> matched = []\n    \n            <span class=\"hljs-keyword\">let</span> limit =\n                int (floor (double (min _str1.Length str2.Length) / <span class=\"hljs-number\">2.0</span>))\n    \n            istr1\n            |&gt; Seq.iteri\n                (<span class=\"hljs-keyword\">fun</span> i l -&gt;\n                    <span class=\"hljs-keyword\">let</span> left = int(max <span class=\"hljs-number\">0</span> (i - limit))\n    \n                    <span class=\"hljs-keyword\">let</span> right = int(min (i + limit + <span class=\"hljs-number\">1</span>) istr2.Length)\n    \n                    <span class=\"hljs-keyword\">if</span> (istr2.[left..right - <span class=\"hljs-number\">1</span>]).Contains(l) <span class=\"hljs-keyword\">then</span>\n                        matched &lt;- List.append matched [ (string) l ]\n                        <span class=\"hljs-keyword\">let</span> myIndex = (istr2.IndexOf(l))\n                        istr2 &lt;- $<span class=\"hljs-string\">&quot;{istr2.[0..istr2.IndexOf(l) - 1]} {istr2.[istr2.IndexOf(l) + 1..]}&quot;</span>)\n    \n            matched |&gt; List.fold (+) <span class=\"hljs-string\">&quot;&quot;</span>\n    \n        <span class=\"hljs-comment\">// matching characters</span>\n        <span class=\"hljs-keyword\">let</span> matching1 = getMatchedCharacters (str1, str2)\n        <span class=\"hljs-keyword\">let</span> matching2 = getMatchedCharacters (str2, str1)\n        <span class=\"hljs-keyword\">let</span> matchCount = matching1.Length\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> jaro = <span class=\"hljs-number\">0.0</span>\n    \n        <span class=\"hljs-comment\">// Transposition</span>\n        <span class=\"hljs-keyword\">let</span> transpositions =\n            floor (\n                double (\n                    (double)\n                        [ <span class=\"hljs-keyword\">for</span> c1, c2 <span class=\"hljs-keyword\">in</span> List.zip [ matching1 ] [ matching2 ] <span class=\"hljs-keyword\">do</span> <span class=\"hljs-keyword\">if</span> c1 &lt;&gt; c2 <span class=\"hljs-keyword\">then</span> (c1, c2) ]\n                            .Length\n                )\n            )\n    \n        <span class=\"hljs-keyword\">if</span> matchCount = <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n            jaro &lt;- <span class=\"hljs-number\">0.0</span>\n        <span class=\"hljs-keyword\">else</span>\n            jaro &lt;-\n                <span class=\"hljs-number\">1.0</span> / <span class=\"hljs-number\">3.0</span>\n                * ((double) matchCount / (double) str1.Length\n                   + (double) matchCount / (double) str2.Length\n                   + ((double) matchCount - transpositions)\n                     / (double) matchCount)\n    \n        <span class=\"hljs-comment\">// Common prefix up to 4 characters</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> prefixLen = <span class=\"hljs-number\">0</span>\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> c1C2BoolList : bool list = []\n\n        <span class=\"hljs-keyword\">if</span> str1.Length = str2.Length <span class=\"hljs-keyword\">then</span>\n            <span class=\"hljs-keyword\">for</span> c1, c2 <span class=\"hljs-keyword\">in</span> Array.zip (str1.[.<span class=\"hljs-number\">.4</span>].ToCharArray()) (str2.[.<span class=\"hljs-number\">.4</span>].ToCharArray()) <span class=\"hljs-keyword\">do</span>\n                <span class=\"hljs-keyword\">if</span> c1 = c2 <span class=\"hljs-keyword\">then</span>\n                    c1C2BoolList &lt;- List.append c1C2BoolList [<span class=\"hljs-keyword\">true</span>]\n                <span class=\"hljs-keyword\">else</span>\n                    c1C2BoolList &lt;- List.append c1C2BoolList [<span class=\"hljs-keyword\">false</span>]\n            <span class=\"hljs-keyword\">if</span> (c1C2BoolList |&gt; List.exists(<span class=\"hljs-keyword\">fun</span> x -&gt; (not x))) <span class=\"hljs-keyword\">then</span>\n                prefixLen &lt;- prefixLen + (c1C2BoolList |&gt; List.findIndex(<span class=\"hljs-keyword\">fun</span> x -&gt; (not x)))\n        jaro + <span class=\"hljs-number\">0.1</span> * (double) prefixLen * (<span class=\"hljs-number\">1.0</span> - jaro)"
    }
  },
  "contributors": [
    {
      "name": "mateuszz0000",
      "email": "mtszzwdzk@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 2
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 4
    }
  ],
  "explanationUrl": {}
}
