{
  "slug": "prime",
  "name": "Prime",
  "categories": ["others"],
  "body": {},
  "implementations": {
    "c": {
      "dir": "misc/prime.c",
      "url": "https://github.com/TheAlgorithms/c/tree/master/misc/prime.c",
      "code": "<span class=\"hljs-comment\">/**\n * @file\n * @brief Program to identify if a number is [prime\n * number](https://en.wikipedia.org/wiki/Prime_number) or not\n */</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;assert.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdbool.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-comment\">/**\n * Check if a given number is prime number or not\n * @param x number to check\n * @return `true` if given number is prime number, otherwise `false`\n */</span>\n<span class=\"hljs-type\">bool</span> <span class=\"hljs-title function_\">isPrime</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span>\n{\n    <span class=\"hljs-keyword\">if</span> (x == <span class=\"hljs-number\">2</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (x &lt; <span class=\"hljs-number\">2</span> || x % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-type\">double</span> squareRoot = <span class=\"hljs-built_in\">sqrt</span>(x);\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">3</span>; i &lt;= squareRoot; i += <span class=\"hljs-number\">2</span>)\n    {\n        <span class=\"hljs-keyword\">if</span> (x % i == <span class=\"hljs-number\">0</span>)\n        {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">/**\n * Test function\n * @return void\n */</span>\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>\n{\n    <span class=\"hljs-comment\">/* all the prime numbers less than 100 */</span>\n    <span class=\"hljs-type\">int</span> primers[] = {<span class=\"hljs-number\">2</span>,  <span class=\"hljs-number\">3</span>,  <span class=\"hljs-number\">5</span>,  <span class=\"hljs-number\">7</span>,  <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">17</span>, <span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">29</span>, <span class=\"hljs-number\">31</span>, <span class=\"hljs-number\">37</span>, <span class=\"hljs-number\">41</span>,\n                     <span class=\"hljs-number\">43</span>, <span class=\"hljs-number\">47</span>, <span class=\"hljs-number\">53</span>, <span class=\"hljs-number\">59</span>, <span class=\"hljs-number\">61</span>, <span class=\"hljs-number\">67</span>, <span class=\"hljs-number\">71</span>, <span class=\"hljs-number\">73</span>, <span class=\"hljs-number\">79</span>, <span class=\"hljs-number\">83</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">97</span>};\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>, size = <span class=\"hljs-keyword\">sizeof</span>(primers) / <span class=\"hljs-keyword\">sizeof</span>(primers[<span class=\"hljs-number\">0</span>]); i &lt; size;\n         ++i)\n    {\n        assert(isPrime(primers[i]));\n    }\n\n    <span class=\"hljs-comment\">/* Example Non-prime numbers */</span>\n    <span class=\"hljs-type\">int</span> NonPrimers[] = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>};\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">size_t</span> i = <span class=\"hljs-number\">0</span>, size = <span class=\"hljs-keyword\">sizeof</span>(NonPrimers) / <span class=\"hljs-keyword\">sizeof</span>(NonPrimers[<span class=\"hljs-number\">0</span>]);\n         i &lt; size; ++i)\n    {\n        assert(!isPrime(NonPrimers[i]));\n    }\n}\n\n<span class=\"hljs-comment\">/**\n * Driver Code\n * @return None\n */</span>\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>\n{\n    test();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "r": {
      "dir": "Mathematics/Prime.R",
      "url": "https://github.com/TheAlgorithms/r/tree/master/Mathematics/Prime.R",
      "code": "<span class=\"hljs-comment\"># Prime Number Checking in R</span>\nisPrime <span class=\"hljs-operator\">&lt;-</span> <span class=\"hljs-keyword\">function</span><span class=\"hljs-punctuation\">(</span>number<span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-punctuation\">(</span>number <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">|</span> number <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">3</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-punctuation\">(</span>number <span class=\"hljs-operator\">%%</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-operator\">|</span> number <span class=\"hljs-operator\">%%</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-punctuation\">{</span>\n    k <span class=\"hljs-operator\">&lt;-</span> 1\n    <span class=\"hljs-keyword\">while</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">6</span> <span class=\"hljs-operator\">*</span> k <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-built_in\">sqrt</span><span class=\"hljs-punctuation\">(</span>number<span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n      <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>number <span class=\"hljs-operator\">%%</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">6</span> <span class=\"hljs-operator\">*</span> k <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span>\n      <span class=\"hljs-punctuation\">}</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span><span class=\"hljs-punctuation\">(</span>number <span class=\"hljs-operator\">%%</span> <span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">6</span> <span class=\"hljs-operator\">*</span> k <span class=\"hljs-operator\">-</span> <span class=\"hljs-number\">1</span><span class=\"hljs-punctuation\">)</span> <span class=\"hljs-operator\">==</span> <span class=\"hljs-number\">0</span><span class=\"hljs-punctuation\">)</span><span class=\"hljs-punctuation\">{</span>\n        <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">FALSE</span><span class=\"hljs-punctuation\">)</span>\n      <span class=\"hljs-punctuation\">}</span>\n      k <span class=\"hljs-operator\">&lt;-</span> k <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-punctuation\">}</span>\n    <span class=\"hljs-built_in\">return</span><span class=\"hljs-punctuation\">(</span><span class=\"hljs-literal\">TRUE</span><span class=\"hljs-punctuation\">)</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n\nisPrime<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">2</span><span class=\"hljs-punctuation\">)</span>\nisPrime<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">5</span><span class=\"hljs-punctuation\">)</span>\nisPrime<span class=\"hljs-punctuation\">(</span><span class=\"hljs-number\">4</span><span class=\"hljs-punctuation\">)</span>\n"
    }
  },
  "contributors": [
    {
      "name": "Alex Garland",
      "email": "alex@numinar.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
