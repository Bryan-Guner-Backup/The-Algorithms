{
  "slug": "k-nearest-neighbours",
  "name": "K Nearest Neighbours",
  "categories": ["machinelearning"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "machine_learning/k_nearest_neighbours.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/machine_learning/k_nearest_neighbours.py",
      "code": "<span class=\"hljs-keyword\">from</span> collections <span class=\"hljs-keyword\">import</span> Counter\n\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n<span class=\"hljs-keyword\">from</span> sklearn <span class=\"hljs-keyword\">import</span> datasets\n<span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> train_test_split\n\ndata = datasets.load_iris()\n\nX = np.array(data[<span class=\"hljs-string\">&quot;data&quot;</span>])\ny = np.array(data[<span class=\"hljs-string\">&quot;target&quot;</span>])\nclasses = data[<span class=\"hljs-string\">&quot;target_names&quot;</span>]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">euclidean_distance</span>(<span class=\"hljs-params\">a, b</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Gives the euclidean distance between two points\n    &gt;&gt;&gt; euclidean_distance([0, 0], [3, 4])\n    5.0\n    &gt;&gt;&gt; euclidean_distance([1, 2, 3], [1, 8, 11])\n    10.0\n    &quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">return</span> np.linalg.norm(np.array(a) - np.array(b))\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">classifier</span>(<span class=\"hljs-params\">train_data, train_target, classes, point, k=<span class=\"hljs-number\">5</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Classifies the point using the KNN algorithm\n    k closest points are found (ranked in ascending order of euclidean distance)\n    Params:\n    :train_data: Set of points that are classified into two or more classes\n    :train_target: List of classes in the order of train_data points\n    :classes: Labels of the classes\n    :point: The data point that needs to be classified\n\n    &gt;&gt;&gt; X_train = [[0, 0], [1, 0], [0, 1], [0.5, 0.5], [3, 3], [2, 3], [3, 2]]\n    &gt;&gt;&gt; y_train = [0, 0, 0, 0, 1, 1, 1]\n    &gt;&gt;&gt; classes = [&#x27;A&#x27;,&#x27;B&#x27;]; point = [1.2,1.2]\n    &gt;&gt;&gt; classifier(X_train, y_train, classes,point)\n    &#x27;A&#x27;\n    &quot;&quot;&quot;</span>\n    data = <span class=\"hljs-built_in\">zip</span>(train_data, train_target)\n    <span class=\"hljs-comment\"># List of distances of all points from the point to be classified</span>\n    distances = []\n    <span class=\"hljs-keyword\">for</span> data_point <span class=\"hljs-keyword\">in</span> data:\n        distance = euclidean_distance(data_point[<span class=\"hljs-number\">0</span>], point)\n        distances.append((distance, data_point[<span class=\"hljs-number\">1</span>]))\n    <span class=\"hljs-comment\"># Choosing &#x27;k&#x27; points with the least distances.</span>\n    votes = [i[<span class=\"hljs-number\">1</span>] <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">sorted</span>(distances)[:k]]\n    <span class=\"hljs-comment\"># Most commonly occurring class among them</span>\n    <span class=\"hljs-comment\"># is the class into which the point is classified</span>\n    result = Counter(votes).most_common(<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">return</span> classes[result]\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-built_in\">print</span>(classifier(X_train, y_train, classes, [<span class=\"hljs-number\">4.4</span>, <span class=\"hljs-number\">3.1</span>, <span class=\"hljs-number\">1.3</span>, <span class=\"hljs-number\">1.4</span>]))\n"
    }
  },
  "contributors": [
    {
      "name": "Phyllipe Bezerra",
      "email": "32442929+pmba@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Parth Paradkar",
      "email": "parthparadkar3@gmail.com",
      "commits": 1
    },
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 3
    }
  ],
  "explanationUrl": {}
}
