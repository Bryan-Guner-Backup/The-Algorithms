{
  "slug": "knuth-morris-pratt",
  "name": "Knuth Morris Pratt",
  "categories": ["strings"],
  "body": {},
  "implementations": {
    "python": {
      "dir": "strings/knuth_morris_pratt.py",
      "url": "https://github.com/TheAlgorithms/python/tree/master/strings/knuth_morris_pratt.py",
      "code": "<span class=\"hljs-keyword\">from</span> typing <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">List</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">kmp</span>(<span class=\"hljs-params\">pattern: <span class=\"hljs-built_in\">str</span>, text: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-built_in\">bool</span>:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    The Knuth-Morris-Pratt Algorithm for finding a pattern within a piece of text\n    with complexity O(n + m)\n\n    1) Preprocess pattern to identify any suffixes that are identical to prefixes\n\n        This tells us where to continue from if we get a mismatch between a character\n        in our pattern and the text.\n\n    2) Step through the text one character at a time and compare it to a character in\n        the pattern updating our location within the pattern if necessary\n\n    &quot;&quot;&quot;</span>\n\n    <span class=\"hljs-comment\"># 1) Construct the failure array</span>\n    failure = get_failure_array(pattern)\n\n    <span class=\"hljs-comment\"># 2) Step through text searching for pattern</span>\n    i, j = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># index into text, pattern</span>\n    <span class=\"hljs-keyword\">while</span> i &lt; <span class=\"hljs-built_in\">len</span>(text):\n        <span class=\"hljs-keyword\">if</span> pattern[j] == text[i]:\n            <span class=\"hljs-keyword\">if</span> j == (<span class=\"hljs-built_in\">len</span>(pattern) - <span class=\"hljs-number\">1</span>):\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n            j += <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-comment\"># if this is a prefix in our pattern</span>\n        <span class=\"hljs-comment\"># just go back far enough to continue</span>\n        <span class=\"hljs-keyword\">elif</span> j &gt; <span class=\"hljs-number\">0</span>:\n            j = failure[j - <span class=\"hljs-number\">1</span>]\n            <span class=\"hljs-keyword\">continue</span>\n        i += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_failure_array</span>(<span class=\"hljs-params\">pattern: <span class=\"hljs-built_in\">str</span></span>) -&gt; <span class=\"hljs-type\">List</span>[<span class=\"hljs-built_in\">int</span>]:\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Calculates the new index we should go to if we fail a comparison\n    :param pattern:\n    :return:\n    &quot;&quot;&quot;</span>\n    failure = [<span class=\"hljs-number\">0</span>]\n    i = <span class=\"hljs-number\">0</span>\n    j = <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> j &lt; <span class=\"hljs-built_in\">len</span>(pattern):\n        <span class=\"hljs-keyword\">if</span> pattern[i] == pattern[j]:\n            i += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">elif</span> i &gt; <span class=\"hljs-number\">0</span>:\n            i = failure[i - <span class=\"hljs-number\">1</span>]\n            <span class=\"hljs-keyword\">continue</span>\n        j += <span class=\"hljs-number\">1</span>\n        failure.append(i)\n    <span class=\"hljs-keyword\">return</span> failure\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    <span class=\"hljs-comment\"># Test 1)</span>\n    pattern = <span class=\"hljs-string\">&quot;abc1abc12&quot;</span>\n    text1 = <span class=\"hljs-string\">&quot;alskfjaldsabc1abc1abc12k23adsfabcabc&quot;</span>\n    text2 = <span class=\"hljs-string\">&quot;alskfjaldsk23adsfabcabc&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> kmp(pattern, text1) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-keyword\">not</span> kmp(pattern, text2)\n\n    <span class=\"hljs-comment\"># Test 2)</span>\n    pattern = <span class=\"hljs-string\">&quot;ABABX&quot;</span>\n    text = <span class=\"hljs-string\">&quot;ABABZABABYABABX&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> kmp(pattern, text)\n\n    <span class=\"hljs-comment\"># Test 3)</span>\n    pattern = <span class=\"hljs-string\">&quot;AAAB&quot;</span>\n    text = <span class=\"hljs-string\">&quot;ABAAAAAB&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> kmp(pattern, text)\n\n    <span class=\"hljs-comment\"># Test 4)</span>\n    pattern = <span class=\"hljs-string\">&quot;abcdabcy&quot;</span>\n    text = <span class=\"hljs-string\">&quot;abcxabcdabxabcdabcdabcy&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> kmp(pattern, text)\n\n    <span class=\"hljs-comment\"># Test 5)</span>\n    pattern = <span class=\"hljs-string\">&quot;aabaabaaa&quot;</span>\n    <span class=\"hljs-keyword\">assert</span> get_failure_array(pattern) == [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">2</span>]\n"
    },
    "c-plus-plus": {
      "dir": "strings/knuth_morris_pratt.cpp",
      "url": "https://github.com/TheAlgorithms/c-plus-plus/tree/master/strings/knuth_morris_pratt.cpp",
      "code": "<span class=\"hljs-comment\">/**\n * \\file\n * \\brief The [Knuth-Morris-Pratt\n * Algorithm](https://en.wikipedia.org/wiki/Knuth–Morris–Pratt_algorithm) for\n * finding a pattern within a piece of text with complexity O(n + m)\n *\n * 1. Preprocess pattern to identify any suffixes that are identical to\n * prefixes. This tells us where to continue from if we get a mismatch between a\n * character in our pattern and the text.\n * 2. Step through the text one character at a time and compare it to a\n * character in the pattern updating our location within the pattern if\n * necessary\n */</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">ifdef</span> _MSC_VER</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string&gt;</span>  <span class=\"hljs-comment\">// use this for MS Visual C++</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">else</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">endif</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-comment\">/** \\namespace string_search\n * \\brief String search algorithms\n */</span>\n<span class=\"hljs-keyword\">namespace</span> string_search {\n<span class=\"hljs-comment\">/**\n * Generate the partial match table aka failure function for a pattern to\n * search.\n * \\param[in] pattern text for which to create the partial match table\n * \\returns the partial match table as a vector array\n */</span>\n<span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">getFailureArray</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;pattern)</span> </span>{\n    <span class=\"hljs-type\">int</span> pattern_length = pattern.<span class=\"hljs-built_in\">size</span>();\n    <span class=\"hljs-function\">std::vector&lt;<span class=\"hljs-type\">int</span>&gt; <span class=\"hljs-title\">failure</span><span class=\"hljs-params\">(pattern_length + <span class=\"hljs-number\">1</span>)</span></span>;\n    failure[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">-1</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; pattern_length; i++) {\n        <span class=\"hljs-keyword\">while</span> (j != <span class=\"hljs-number\">-1</span> &amp;&amp; pattern[j] != pattern[i]) {\n            j = failure[j];\n        }\n        j++;\n        failure[i + <span class=\"hljs-number\">1</span>] = j;\n    }\n    <span class=\"hljs-keyword\">return</span> failure;\n}\n\n<span class=\"hljs-comment\">/**\n * KMP algorithm to find a pattern in a text\n * \\param[in] pattern string pattern to search\n * \\param[in] text text in which to search\n * \\returns `true` if pattern was found\n * \\returns `false` if pattern was not found\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">kmp</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> std::string &amp;pattern, <span class=\"hljs-keyword\">const</span> std::string &amp;text)</span> </span>{\n    <span class=\"hljs-type\">int</span> text_length = text.<span class=\"hljs-built_in\">size</span>(), pattern_length = pattern.<span class=\"hljs-built_in\">size</span>();\n    std::vector&lt;<span class=\"hljs-type\">int</span>&gt; failure = <span class=\"hljs-built_in\">getFailureArray</span>(pattern);\n\n    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; text_length; j++) {\n        <span class=\"hljs-keyword\">while</span> (k != <span class=\"hljs-number\">-1</span> &amp;&amp; pattern[k] != text[j]) {\n            k = failure[k];\n        }\n        k++;\n        <span class=\"hljs-keyword\">if</span> (k == pattern_length)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n}  <span class=\"hljs-comment\">// namespace string_search</span>\n\n<span class=\"hljs-keyword\">using</span> string_search::kmp;\n\n<span class=\"hljs-comment\">/** Main function */</span>\n<span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    std::string text = <span class=\"hljs-string\">&quot;alskfjaldsabc1abc1abc12k23adsfabcabc&quot;</span>;\n    std::string pattern = <span class=\"hljs-string\">&quot;abc1abc12l&quot;</span>;\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">kmp</span>(pattern, text) == <span class=\"hljs-literal\">true</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Found&quot;</span> &lt;&lt; std::endl;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Not Found&quot;</span> &lt;&lt; std::endl;\n    }\n\n    text = <span class=\"hljs-string\">&quot;abcabc&quot;</span>;\n    pattern = <span class=\"hljs-string\">&quot;bca&quot;</span>;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">kmp</span>(pattern, text) == <span class=\"hljs-literal\">true</span>) {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Found&quot;</span> &lt;&lt; std::endl;\n    } <span class=\"hljs-keyword\">else</span> {\n        std::cout &lt;&lt; <span class=\"hljs-string\">&quot;Not Found&quot;</span> &lt;&lt; std::endl;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n"
    },
    "f-sharp": {
      "dir": "Algorithms/Strings/KnuthMorrisPratt.fs",
      "url": "https://github.com/TheAlgorithms/f-sharp/tree/master/Algorithms/Strings/KnuthMorrisPratt.fs",
      "code": "﻿<span class=\"hljs-keyword\">namespace</span> Algorithms.Strings\n\n<span class=\"hljs-keyword\">module</span> KnuthMorrisPratt =\n    <span class=\"hljs-keyword\">let</span> getFailureArray (pattern: string): list&lt;int&gt; =\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> failure = [ <span class=\"hljs-number\">0</span> ]\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> i = <span class=\"hljs-number\">0</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> j = <span class=\"hljs-number\">1</span>\n\n        <span class=\"hljs-keyword\">while</span> j &lt; pattern.Length <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">if</span> pattern.[i] = pattern.[j] <span class=\"hljs-keyword\">then</span>\n                i &lt;- i + <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">elif</span> i &gt; <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">then</span>\n                i &lt;- failure.[i - <span class=\"hljs-number\">1</span>]\n\n            j &lt;- j + <span class=\"hljs-number\">1</span>\n            failure &lt;- failure |&gt; List.append [ i ]\n\n        failure\n\n    <span class=\"hljs-comment\">/// &lt;summary&gt;</span>\n    <span class=\"hljs-comment\">/// The Knuth-Morris-Pratt Algorithm for finding a pattern within a piece of text</span>\n    <span class=\"hljs-comment\">/// with complexity O(n + m)</span>\n    <span class=\"hljs-comment\">/// &lt;/summary&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;pattern&quot;&gt;&lt;/param&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;param name=&quot;text&quot;&gt;&lt;/param&gt;</span>\n    <span class=\"hljs-comment\">/// &lt;returns&gt;&lt;/returns&gt;</span>\n    <span class=\"hljs-keyword\">let</span> kmp (pattern: string, text: string): bool =\n        <span class=\"hljs-comment\">// 1) Construct the failure array</span>\n        <span class=\"hljs-keyword\">let</span> failure = getFailureArray pattern\n\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> result = <span class=\"hljs-keyword\">false</span>\n\n        <span class=\"hljs-comment\">// 2) Step through text searching for pattern</span>\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mutable</span> i, j = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// Index into text, pattern</span>\n\n        <span class=\"hljs-keyword\">while</span> i &lt; text.Length <span class=\"hljs-keyword\">do</span>\n            <span class=\"hljs-keyword\">if</span> pattern.[j] = text.[i] <span class=\"hljs-keyword\">then</span>\n                <span class=\"hljs-keyword\">if</span> j = pattern.Length - <span class=\"hljs-number\">1</span> &amp;&amp; (not result) <span class=\"hljs-keyword\">then</span>\n                    result &lt;- <span class=\"hljs-keyword\">true</span>\n\n                j &lt;- j + <span class=\"hljs-number\">1</span>\n\n            <span class=\"hljs-comment\">// If this is a prefix in our pattern</span>\n            <span class=\"hljs-comment\">// just go back far enough to continue</span>\n            <span class=\"hljs-keyword\">elif</span> j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; (not result) <span class=\"hljs-keyword\">then</span>\n                j &lt;- failure.[j - <span class=\"hljs-number\">1</span>]\n\n            i &lt;- i + <span class=\"hljs-number\">1</span>\n\n        result\n"
    },
    "rust": {
      "dir": "src/string/knuth_morris_pratt.rs",
      "url": "https://github.com/TheAlgorithms/rust/tree/master/src/string/knuth_morris_pratt.rs",
      "code": "<span class=\"hljs-keyword\">pub</span> <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">knuth_morris_pratt</span>(st: <span class=\"hljs-type\">String</span>, pat: <span class=\"hljs-type\">String</span>) <span class=\"hljs-punctuation\">-&gt;</span> <span class=\"hljs-type\">Vec</span>&lt;<span class=\"hljs-type\">usize</span>&gt; {\n    <span class=\"hljs-keyword\">if</span> st.<span class=\"hljs-title function_ invoke__\">is_empty</span>() || pat.<span class=\"hljs-title function_ invoke__\">is_empty</span>() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">vec!</span>[];\n    }\n\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">string</span> = st.<span class=\"hljs-title function_ invoke__\">into_bytes</span>();\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">pattern</span> = pat.<span class=\"hljs-title function_ invoke__\">into_bytes</span>();\n\n    <span class=\"hljs-comment\">// build the partial match table</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">partial</span> = <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1</span>..pattern.<span class=\"hljs-title function_ invoke__\">len</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">j</span> = partial[i - <span class=\"hljs-number\">1</span>];\n        <span class=\"hljs-keyword\">while</span> j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; pattern[j] != pattern[i] {\n            j = partial[j - <span class=\"hljs-number\">1</span>];\n        }\n        partial.<span class=\"hljs-title function_ invoke__\">push</span>(<span class=\"hljs-keyword\">if</span> pattern[j] == pattern[i] { j + <span class=\"hljs-number\">1</span> } <span class=\"hljs-keyword\">else</span> { j });\n    }\n\n    <span class=\"hljs-comment\">// and read &#x27;string&#x27; to find &#x27;pattern&#x27;</span>\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">ret</span> = <span class=\"hljs-built_in\">vec!</span>[];\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">j</span> = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-title function_ invoke__\">for</span> (i, &amp;c) <span class=\"hljs-keyword\">in</span> string.<span class=\"hljs-title function_ invoke__\">iter</span>().<span class=\"hljs-title function_ invoke__\">enumerate</span>() {\n        <span class=\"hljs-keyword\">while</span> j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; c != pattern[j] {\n            j = partial[j - <span class=\"hljs-number\">1</span>];\n        }\n        <span class=\"hljs-keyword\">if</span> c == pattern[j] {\n            j += <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">if</span> j == pattern.<span class=\"hljs-title function_ invoke__\">len</span>() {\n            ret.<span class=\"hljs-title function_ invoke__\">push</span>(i + <span class=\"hljs-number\">1</span> - j);\n            j = partial[j - <span class=\"hljs-number\">1</span>];\n        }\n    }\n\n    ret\n}\n\n<span class=\"hljs-meta\">#[cfg(test)]</span>\n<span class=\"hljs-keyword\">mod</span> tests {\n    <span class=\"hljs-keyword\">use</span> super::*;\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">each_letter_matches</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;aaa&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;a&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">a_few_separate_matches</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;abababa&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;ab&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">one_match</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> =\n            <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;ABC ABCDAB ABCDABCDABDE&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;ABCDABD&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">15</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">lots_of_matches</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;aaabaabaaaaa&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;aa&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">lots_of_intricate_matches</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;ababababa&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;aba&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not_found0</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;abcde&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;f&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not_found1</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;abcde&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;ac&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">not_found2</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;ababab&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;bababa&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n\n    <span class=\"hljs-meta\">#[test]</span>\n    <span class=\"hljs-keyword\">fn</span> <span class=\"hljs-title function_\">empty_string</span>() {\n        <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">index</span> = <span class=\"hljs-title function_ invoke__\">knuth_morris_pratt</span>(<span class=\"hljs-string\">&quot;&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>(), <span class=\"hljs-string\">&quot;abcdef&quot;</span>.<span class=\"hljs-title function_ invoke__\">to_string</span>());\n        <span class=\"hljs-built_in\">assert_eq!</span>(index, <span class=\"hljs-built_in\">vec!</span>[]);\n    }\n}\n"
    },
    "c-sharp": {
      "dir": "Algorithms/Strings/KnuthMorrisPrattSearcher.cs",
      "url": "https://github.com/TheAlgorithms/C-Sharp/blob/master/Algorithms/Strings/KnuthMorrisPrattSearcher.cs",
      "code": "﻿<span class=\"hljs-keyword\">using</span> System.Collections.Generic;\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title\">Algorithms.Strings</span>\n{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">KnuthMorrisPrattSearcher</span>\n    {\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     An implementation of Knuth–Morris–Pratt Algorithm.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Worst case time complexity: O(n + k)</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     where n - text length, k - pattern length.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;str&quot;&gt;</span>The string to look in.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;pat&quot;&gt;</span>The pattern to look for.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     The zero-based positions of all occurrences of <span class=\"hljs-doctag\">&lt;paramref name=&quot;pat&quot; /&gt;</span> in <span class=\"hljs-doctag\">&lt;paramref name=&quot;str&quot; /&gt;</span>.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> IEnumerable&lt;<span class=\"hljs-built_in\">int</span>&gt; <span class=\"hljs-title\">FindIndexes</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> str, <span class=\"hljs-built_in\">string</span> pat</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> lps = FindLongestPrefixSuffixValues(pat);\n\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; str.Length;)\n            {\n                <span class=\"hljs-keyword\">if</span> (pat[j] == str[i])\n                {\n                    j++;\n                    i++;\n                }\n\n                <span class=\"hljs-keyword\">if</span> (j == pat.Length)\n                {\n                    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">return</span> i - j;\n                    j = lps[j - <span class=\"hljs-number\">1</span>];\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n\n                <span class=\"hljs-keyword\">if</span> (i &lt; str.Length &amp;&amp; pat[j] != str[i])\n                {\n                    <span class=\"hljs-keyword\">if</span> (j != <span class=\"hljs-number\">0</span>)\n                    {\n                        j = lps[j - <span class=\"hljs-number\">1</span>];\n                    }\n                    <span class=\"hljs-keyword\">else</span>\n                    {\n                        i += <span class=\"hljs-number\">1</span>;\n                    }\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span>     Return the longest prefix suffix values for pattern.</span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;/summary&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;param name=&quot;pat&quot;&gt;</span>pattern to seek.<span class=\"hljs-doctag\">&lt;/param&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-doctag\">///</span> <span class=\"hljs-doctag\">&lt;returns&gt;</span>The longest prefix suffix values for <span class=\"hljs-doctag\">&lt;paramref name=&quot;pat&quot; /&gt;</span>.<span class=\"hljs-doctag\">&lt;/returns&gt;</span></span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-title\">FindLongestPrefixSuffixValues</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> pat</span>)</span>\n        {\n            <span class=\"hljs-keyword\">var</span> lps = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[pat.Length];\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">1</span>, len = <span class=\"hljs-number\">0</span>; i &lt; pat.Length;)\n            {\n                <span class=\"hljs-keyword\">if</span> (pat[i] == pat[len])\n                {\n                    len++;\n                    lps[i] = len;\n                    i++;\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n\n                <span class=\"hljs-keyword\">if</span> (len != <span class=\"hljs-number\">0</span>)\n                {\n                    len = lps[len - <span class=\"hljs-number\">1</span>];\n                }\n                <span class=\"hljs-keyword\">else</span>\n                {\n                    lps[i] = <span class=\"hljs-number\">0</span>;\n                    i++;\n                }\n            }\n\n            <span class=\"hljs-keyword\">return</span> lps;\n        }\n    }\n}\n"
    }
  },
  "contributors": [
    {
      "name": "Christian Clauss",
      "email": "cclauss@me.com",
      "commits": 1
    },
    {
      "name": "Pierre Gimalac",
      "email": "pierre.gimalac@gmail.com",
      "commits": 1
    },
    {
      "name": "Krishna Vedala",
      "email": "7001608+kvedala@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Raman Preet Singh",
      "email": "ramanpre0810@gmail.com",
      "commits": 1
    },
    {
      "name": "mahbubur.rahman",
      "email": "mahbubur.rahman@bjitgroup.com",
      "commits": 1
    },
    {
      "name": "Dmytro Litvinov",
      "email": "litvinov.dmytro.it@gmail.com",
      "commits": 1
    },
    {
      "name": "William Zhang",
      "email": "39932068+WilliamHYZhang@users.noreply.github.com",
      "commits": 1
    },
    {
      "name": "Allister Isaiah Harvey",
      "email": "41553768+powpow58@users.noreply.github.com",
      "commits": 2
    },
    {
      "name": "damelLP",
      "email": "dlambertpowell@gmail.com",
      "commits": 2
    }
  ],
  "explanationUrl": {}
}
